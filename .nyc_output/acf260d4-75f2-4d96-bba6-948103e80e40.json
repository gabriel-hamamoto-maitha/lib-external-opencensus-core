{"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-binary-serializer.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-binary-serializer.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":15},"end":{"line":18,"column":32}},"2":{"start":{"line":19,"column":28},"end":{"line":19,"column":80}},"3":{"start":{"line":20,"column":18},"end":{"line":20,"column":48}},"4":{"start":{"line":21,"column":11},"end":{"line":23,"column":1}},"5":{"start":{"line":24,"column":11},"end":{"line":26,"column":1}},"6":{"start":{"line":27,"column":11},"end":{"line":29,"column":1}},"7":{"start":{"line":30,"column":11},"end":{"line":32,"column":1}},"8":{"start":{"line":33,"column":11},"end":{"line":35,"column":1}},"9":{"start":{"line":36,"column":11},"end":{"line":38,"column":1}},"10":{"start":{"line":39,"column":11},"end":{"line":41,"column":1}},"11":{"start":{"line":42,"column":11},"end":{"line":44,"column":1}},"12":{"start":{"line":45,"column":0},"end":{"line":125,"column":3}},"13":{"start":{"line":46,"column":24},"end":{"line":46,"column":46}},"14":{"start":{"line":47,"column":25},"end":{"line":47,"column":47}},"15":{"start":{"line":48,"column":4},"end":{"line":48,"column":29}},"16":{"start":{"line":49,"column":27},"end":{"line":49,"column":49}},"17":{"start":{"line":50,"column":4},"end":{"line":50,"column":31}},"18":{"start":{"line":51,"column":4},"end":{"line":51,"column":31}},"19":{"start":{"line":52,"column":4},"end":{"line":52,"column":31}},"20":{"start":{"line":53,"column":4},"end":{"line":53,"column":31}},"21":{"start":{"line":54,"column":4},"end":{"line":83,"column":7}},"22":{"start":{"line":55,"column":8},"end":{"line":58,"column":11}},"23":{"start":{"line":56,"column":27},"end":{"line":56,"column":75}},"24":{"start":{"line":57,"column":12},"end":{"line":57,"column":95}},"25":{"start":{"line":59,"column":8},"end":{"line":62,"column":11}},"26":{"start":{"line":60,"column":27},"end":{"line":60,"column":76}},"27":{"start":{"line":61,"column":12},"end":{"line":61,"column":96}},"28":{"start":{"line":63,"column":8},"end":{"line":66,"column":11}},"29":{"start":{"line":64,"column":27},"end":{"line":64,"column":78}},"30":{"start":{"line":65,"column":12},"end":{"line":65,"column":98}},"31":{"start":{"line":67,"column":8},"end":{"line":82,"column":11}},"32":{"start":{"line":68,"column":25},"end":{"line":68,"column":47}},"33":{"start":{"line":69,"column":12},"end":{"line":75,"column":13}},"34":{"start":{"line":69,"column":25},"end":{"line":69,"column":26}},"35":{"start":{"line":72,"column":28},"end":{"line":72,"column":66}},"36":{"start":{"line":73,"column":28},"end":{"line":73,"column":40}},"37":{"start":{"line":74,"column":16},"end":{"line":74,"column":56}},"38":{"start":{"line":78,"column":12},"end":{"line":78,"column":59}},"39":{"start":{"line":79,"column":12},"end":{"line":81,"column":82}},"40":{"start":{"line":80,"column":16},"end":{"line":80,"column":58}},"41":{"start":{"line":84,"column":4},"end":{"line":124,"column":7}},"42":{"start":{"line":85,"column":8},"end":{"line":99,"column":11}},"43":{"start":{"line":86,"column":25},"end":{"line":95,"column":14}},"44":{"start":{"line":96,"column":12},"end":{"line":98,"column":83}},"45":{"start":{"line":97,"column":16},"end":{"line":97,"column":60}},"46":{"start":{"line":100,"column":8},"end":{"line":123,"column":11}},"47":{"start":{"line":101,"column":33},"end":{"line":101,"column":55}},"48":{"start":{"line":102,"column":12},"end":{"line":102,"column":37}},"49":{"start":{"line":103,"column":25},"end":{"line":119,"column":14}},"50":{"start":{"line":120,"column":25},"end":{"line":120,"column":68}},"51":{"start":{"line":121,"column":12},"end":{"line":121,"column":50}},"52":{"start":{"line":122,"column":12},"end":{"line":122,"column":55}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":45,"column":37},"end":{"line":45,"column":38}},"loc":{"start":{"line":45,"column":43},"end":{"line":125,"column":1}},"line":45},"1":{"name":"(anonymous_1)","decl":{"start":{"line":54,"column":32},"end":{"line":54,"column":33}},"loc":{"start":{"line":54,"column":38},"end":{"line":83,"column":5}},"line":54},"2":{"name":"(anonymous_2)","decl":{"start":{"line":55,"column":45},"end":{"line":55,"column":46}},"loc":{"start":{"line":55,"column":51},"end":{"line":58,"column":9}},"line":55},"3":{"name":"(anonymous_3)","decl":{"start":{"line":59,"column":48},"end":{"line":59,"column":49}},"loc":{"start":{"line":59,"column":54},"end":{"line":62,"column":9}},"line":59},"4":{"name":"(anonymous_4)","decl":{"start":{"line":63,"column":49},"end":{"line":63,"column":50}},"loc":{"start":{"line":63,"column":55},"end":{"line":66,"column":9}},"line":63},"5":{"name":"(anonymous_5)","decl":{"start":{"line":67,"column":73},"end":{"line":67,"column":74}},"loc":{"start":{"line":67,"column":79},"end":{"line":82,"column":9}},"line":67},"6":{"name":"(anonymous_6)","decl":{"start":{"line":79,"column":26},"end":{"line":79,"column":27}},"loc":{"start":{"line":79,"column":32},"end":{"line":81,"column":13}},"line":79},"7":{"name":"(anonymous_7)","decl":{"start":{"line":84,"column":34},"end":{"line":84,"column":35}},"loc":{"start":{"line":84,"column":40},"end":{"line":124,"column":5}},"line":84},"8":{"name":"(anonymous_8)","decl":{"start":{"line":85,"column":56},"end":{"line":85,"column":57}},"loc":{"start":{"line":85,"column":62},"end":{"line":99,"column":9}},"line":85},"9":{"name":"(anonymous_9)","decl":{"start":{"line":96,"column":26},"end":{"line":96,"column":27}},"loc":{"start":{"line":96,"column":32},"end":{"line":98,"column":13}},"line":96},"10":{"name":"(anonymous_10)","decl":{"start":{"line":100,"column":60},"end":{"line":100,"column":61}},"loc":{"start":{"line":100,"column":66},"end":{"line":123,"column":9}},"line":100}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1023,"36":1023,"37":1023,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1},"f":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-binary-serializer.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-binary-serializer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport {\n  deserializeBinary,\n  serializeBinary,\n  TAG_MAP_SERIALIZED_SIZE_LIMIT,\n} from '../src/tags/propagation/binary-serializer';\nimport { TagMap } from '../src/tags/tag-map';\n\nconst K1 = {\n  name: 'k1',\n};\nconst K2 = {\n  name: 'k2',\n};\nconst K3 = {\n  name: 'k3',\n};\nconst K4 = {\n  name: 'k4',\n};\n\nconst V1 = {\n  value: 'v1',\n};\nconst V2 = {\n  value: 'v2',\n};\nconst V3 = {\n  value: 'v3',\n};\nconst V4 = {\n  value: 'v4',\n};\n\ndescribe('Binary Format Serializer', () => {\n  const emptyTagMap = new TagMap();\n\n  const singleTagMap = new TagMap();\n  singleTagMap.set(K1, V1);\n\n  const multipleTagMap = new TagMap();\n  multipleTagMap.set(K1, V1);\n  multipleTagMap.set(K2, V2);\n  multipleTagMap.set(K3, V3);\n  multipleTagMap.set(K4, V4);\n\n  describe('serializeBinary', () => {\n    it('should serialize empty tag map', () => {\n      const binary = serializeBinary(emptyTagMap);\n      assert.deepStrictEqual(deserializeBinary(binary), emptyTagMap);\n    });\n\n    it('should serialize with one tag map', () => {\n      const binary = serializeBinary(singleTagMap);\n      assert.deepStrictEqual(deserializeBinary(binary), singleTagMap);\n    });\n\n    it('should serialize with multiple tag', () => {\n      const binary = serializeBinary(multipleTagMap);\n      assert.deepStrictEqual(deserializeBinary(binary), multipleTagMap);\n    });\n\n    it('should throw an error when exceeds the max serialized size', () => {\n      const tags = new TagMap();\n      for (let i = 0; i < TAG_MAP_SERIALIZED_SIZE_LIMIT / 8 - 1; i++) {\n        // Each tag will be with format {key : \"0123\", value : \"0123\"}, so the\n        // length of it is 8.\n        const pad = '0000'.substring(0, 4 - `${i}`.length);\n        const str = `${pad}${i}`;\n        tags.set({ name: str }, { value: str });\n      }\n      // The last tag will be of size 9, so the total size of the TagMap\n      // (8193) will be one byte more than limit.\n      tags.set({ name: 'last' }, { value: 'last1' });\n\n      assert.throws(() => {\n        serializeBinary(tags);\n      }, /^Error: Size of TagMap exceeds the maximum serialized size 8192/);\n    });\n  });\n\n  describe('deserializeBinary', () => {\n    it('should throw an error when invalid tagKey', () => {\n      const buff = Buffer.from([\n        0x01,\n        0x00,\n        0x02,\n        0x6b,\n        0x31,\n        0x02,\n        0x76,\n        0x31,\n      ]);\n      assert.throws(() => {\n        deserializeBinary(buff);\n      }, /^Error: Wrong Version ID: 1. Currently supports version up to: 0/);\n    });\n\n    it('should stop parsing at first unknown field ID', () => {\n      const expectedTags = new TagMap();\n      expectedTags.set(K1, V1);\n\n      const buff = Buffer.from([\n        0x00,\n        0x00,\n        0x02,\n        0x6b,\n        0x31,\n        0x02,\n        0x76,\n        0x31,\n        0x01,\n        0x02,\n        0x6b,\n        0x32,\n        0x02,\n        0x76,\n        0x32,\n      ]);\n      const tags = deserializeBinary(buff);\n      assert.strictEqual(tags.tags.size, 1);\n      assert.deepStrictEqual(tags, expectedTags);\n    });\n  });\n});\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"9bb9fcc62e32e11b39cf95f24db3644390f45739","contentHash":"32ee44b63e834ba7354425b7735f02892f72364ad5ab265d40facf89074a3a03"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/propagation/binary-serializer.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/propagation/binary-serializer.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":101}},"2":{"start":{"line":48,"column":18},"end":{"line":48,"column":39}},"3":{"start":{"line":49,"column":27},"end":{"line":49,"column":56}},"4":{"start":{"line":51,"column":0},"end":{"line":51,"column":45}},"5":{"start":{"line":52,"column":17},"end":{"line":52,"column":23}},"6":{"start":{"line":53,"column":19},"end":{"line":53,"column":20}},"7":{"start":{"line":54,"column":21},"end":{"line":54,"column":22}},"8":{"start":{"line":55,"column":25},"end":{"line":55,"column":26}},"9":{"start":{"line":61,"column":22},"end":{"line":61,"column":24}},"10":{"start":{"line":62,"column":4},"end":{"line":62,"column":31}},"11":{"start":{"line":63,"column":21},"end":{"line":63,"column":22}},"12":{"start":{"line":64,"column":17},"end":{"line":64,"column":28}},"13":{"start":{"line":65,"column":4},"end":{"line":69,"column":7}},"14":{"start":{"line":66,"column":8},"end":{"line":66,"column":41}},"15":{"start":{"line":67,"column":8},"end":{"line":67,"column":44}},"16":{"start":{"line":68,"column":8},"end":{"line":68,"column":47}},"17":{"start":{"line":70,"column":4},"end":{"line":72,"column":5}},"18":{"start":{"line":71,"column":8},"end":{"line":71,"column":119}},"19":{"start":{"line":73,"column":4},"end":{"line":73,"column":34}},"20":{"start":{"line":75,"column":0},"end":{"line":75,"column":42}},"21":{"start":{"line":81,"column":4},"end":{"line":83,"column":5}},"22":{"start":{"line":82,"column":8},"end":{"line":82,"column":58}},"23":{"start":{"line":84,"column":22},"end":{"line":84,"column":55}},"24":{"start":{"line":85,"column":4},"end":{"line":87,"column":5}},"25":{"start":{"line":86,"column":8},"end":{"line":86,"column":107}},"26":{"start":{"line":88,"column":4},"end":{"line":88,"column":29}},"27":{"start":{"line":90,"column":0},"end":{"line":90,"column":46}},"28":{"start":{"line":92,"column":4},"end":{"line":92,"column":33}},"29":{"start":{"line":93,"column":4},"end":{"line":93,"column":41}},"30":{"start":{"line":94,"column":4},"end":{"line":94,"column":44}},"31":{"start":{"line":97,"column":4},"end":{"line":97,"column":69}},"32":{"start":{"line":98,"column":4},"end":{"line":98,"column":52}},"33":{"start":{"line":99,"column":4},"end":{"line":99,"column":21}},"34":{"start":{"line":102,"column":17},"end":{"line":102,"column":39}},"35":{"start":{"line":103,"column":18},"end":{"line":103,"column":31}},"36":{"start":{"line":104,"column":21},"end":{"line":104,"column":22}},"37":{"start":{"line":105,"column":23},"end":{"line":105,"column":24}},"38":{"start":{"line":106,"column":4},"end":{"line":128,"column":5}},"39":{"start":{"line":107,"column":24},"end":{"line":107,"column":53}},"40":{"start":{"line":108,"column":8},"end":{"line":112,"column":9}},"41":{"start":{"line":111,"column":12},"end":{"line":111,"column":18}},"42":{"start":{"line":113,"column":8},"end":{"line":113,"column":26}},"43":{"start":{"line":114,"column":20},"end":{"line":114,"column":54}},"44":{"start":{"line":115,"column":8},"end":{"line":115,"column":35}},"45":{"start":{"line":116,"column":8},"end":{"line":116,"column":33}},"46":{"start":{"line":117,"column":8},"end":{"line":117,"column":26}},"47":{"start":{"line":118,"column":20},"end":{"line":118,"column":54}},"48":{"start":{"line":119,"column":8},"end":{"line":119,"column":35}},"49":{"start":{"line":120,"column":8},"end":{"line":120,"column":33}},"50":{"start":{"line":121,"column":8},"end":{"line":121,"column":26}},"51":{"start":{"line":122,"column":8},"end":{"line":127,"column":9}},"52":{"start":{"line":123,"column":12},"end":{"line":123,"column":123}},"53":{"start":{"line":126,"column":12},"end":{"line":126,"column":52}},"54":{"start":{"line":129,"column":4},"end":{"line":129,"column":16}},"55":{"start":{"line":132,"column":19},"end":{"line":132,"column":66}},"56":{"start":{"line":133,"column":4},"end":{"line":133,"column":70}},"57":{"start":{"line":136,"column":4},"end":{"line":136,"column":27}}},"fnMap":{"0":{"name":"serializeBinary","decl":{"start":{"line":60,"column":9},"end":{"line":60,"column":24}},"loc":{"start":{"line":60,"column":33},"end":{"line":74,"column":1}},"line":60},"1":{"name":"(anonymous_1)","decl":{"start":{"line":65,"column":17},"end":{"line":65,"column":18}},"loc":{"start":{"line":65,"column":39},"end":{"line":69,"column":5}},"line":65},"2":{"name":"deserializeBinary","decl":{"start":{"line":80,"column":9},"end":{"line":80,"column":26}},"loc":{"start":{"line":80,"column":35},"end":{"line":89,"column":1}},"line":80},"3":{"name":"encodeTag","decl":{"start":{"line":91,"column":9},"end":{"line":91,"column":18}},"loc":{"start":{"line":91,"column":48},"end":{"line":95,"column":1}},"line":91},"4":{"name":"encodeString","decl":{"start":{"line":96,"column":9},"end":{"line":96,"column":21}},"loc":{"start":{"line":96,"column":40},"end":{"line":100,"column":1}},"line":96},"5":{"name":"parseTags","decl":{"start":{"line":101,"column":9},"end":{"line":101,"column":18}},"loc":{"start":{"line":101,"column":27},"end":{"line":130,"column":1}},"line":101},"6":{"name":"decodeString","decl":{"start":{"line":131,"column":9},"end":{"line":131,"column":21}},"loc":{"start":{"line":131,"column":38},"end":{"line":134,"column":1}},"line":131},"7":{"name":"unicode","decl":{"start":{"line":135,"column":9},"end":{"line":135,"column":16}},"loc":{"start":{"line":135,"column":20},"end":{"line":137,"column":1}},"line":135}},"branchMap":{"0":{"loc":{"start":{"line":70,"column":4},"end":{"line":72,"column":5}},"type":"if","locations":[{"start":{"line":70,"column":4},"end":{"line":72,"column":5}},{"start":{"line":70,"column":4},"end":{"line":72,"column":5}}],"line":70},"1":{"loc":{"start":{"line":81,"column":4},"end":{"line":83,"column":5}},"type":"if","locations":[{"start":{"line":81,"column":4},"end":{"line":83,"column":5}},{"start":{"line":81,"column":4},"end":{"line":83,"column":5}}],"line":81},"2":{"loc":{"start":{"line":85,"column":4},"end":{"line":87,"column":5}},"type":"if","locations":[{"start":{"line":85,"column":4},"end":{"line":87,"column":5}},{"start":{"line":85,"column":4},"end":{"line":87,"column":5}}],"line":85},"3":{"loc":{"start":{"line":108,"column":8},"end":{"line":112,"column":9}},"type":"if","locations":[{"start":{"line":108,"column":8},"end":{"line":112,"column":9}},{"start":{"line":108,"column":8},"end":{"line":112,"column":9}}],"line":108},"4":{"loc":{"start":{"line":122,"column":8},"end":{"line":127,"column":9}},"type":"if","locations":[{"start":{"line":122,"column":8},"end":{"line":127,"column":9}},{"start":{"line":122,"column":8},"end":{"line":127,"column":9}}],"line":122}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":4,"10":4,"11":4,"12":4,"13":4,"14":1029,"15":1029,"16":1029,"17":4,"18":1,"19":3,"20":1,"21":5,"22":0,"23":5,"24":5,"25":1,"26":4,"27":1,"28":1029,"29":1029,"30":1029,"31":2058,"32":2058,"33":2058,"34":4,"35":4,"36":4,"37":4,"38":4,"39":7,"40":7,"41":1,"42":6,"43":6,"44":6,"45":6,"46":6,"47":6,"48":6,"49":6,"50":6,"51":6,"52":0,"53":6,"54":4,"55":12,"56":12,"57":8213},"f":{"0":4,"1":1029,"2":5,"3":1029,"4":2058,"5":4,"6":12,"7":8213},"b":{"0":[1,3],"1":[0,5],"2":[1,4],"3":[1,6],"4":[0,6]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/propagation/binary-serializer.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/propagation/binary-serializer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This module contains the functions for serializing and deserializing\n * TagMap (TagContext) with the binary format. It allows tags to propagate\n * across requests.\n *\n * <p>OpenCensus tag context encoding:\n *\n * <ul>\n *   <li>Tags are encoded in single byte sequence. The version 0 format is:\n *   <li>{@code <version_id><encoded_tags>}\n *   <li>{@code <version_id> -> a single byte, value 0}\n *   <li>{@code <encoded_tags> -> (<tag_field_id><tag_encoding>)*}\n *     <ul>\n *       <li>{@code <tag_field_id>} -> a single byte, value 0\n *       <li>{@code <tag_encoding>}:\n *         <ul>\n *           <li>{@code <tag_key_len><tag_key><tag_val_len><tag_val>}\n *             <ul>\n *               <li>{@code <tag_key_len>} -> varint encoded integer\n *               <li>{@code <tag_key>} -> tag_key_len bytes comprising tag name\n *               <li>{@code <tag_val_len>} -> varint encoded integer\n *               <li>{@code <tag_val>} -> tag_val_len bytes comprising tag value\n *             </ul>\n *           </li>\n *         </ul>\n *       </li>\n *     </ul>\n * </ul>\n */\n\nimport { TagMap } from '../tag-map';\nimport { TagKey, TagValue } from '../types';\nimport { DecodeVarint, EncodeVarint } from './variant-encoding';\n\n// This size limit only applies to the bytes representing tag keys and values.\nexport const TAG_MAP_SERIALIZED_SIZE_LIMIT = 8192;\n\nconst ENCODING = 'utf8';\nconst VERSION_ID = 0;\nconst TAG_FIELD_ID = 0;\nconst VERSION_ID_INDEX = 0;\n\n/**\n * Serializes a given TagMap to the on-the-wire format.\n * @param tagMap The TagMap to serialize.\n */\nexport function serializeBinary(tagMap: TagMap): Buffer {\n  const byteArray: number[] = [];\n  byteArray.push(VERSION_ID);\n  let totalChars = 0;\n  const tags = tagMap.tags;\n  tags.forEach((tagValue: TagValue, tagKey: TagKey) => {\n    totalChars += tagKey.name.length;\n    totalChars += tagValue.value.length;\n    encodeTag(tagKey, tagValue, byteArray);\n  });\n\n  if (totalChars > TAG_MAP_SERIALIZED_SIZE_LIMIT) {\n    throw new Error(\n      `Size of TagMap exceeds the maximum serialized size ${TAG_MAP_SERIALIZED_SIZE_LIMIT}`\n    );\n  }\n  return Buffer.from(byteArray);\n}\n\n/**\n * Deserializes input to TagMap based on the binary format standard.\n * @param buffer The TagMap to deserialize.\n */\nexport function deserializeBinary(buffer: Buffer): TagMap {\n  if (buffer.length === 0) {\n    throw new Error('Input buffer can not be empty.');\n  }\n  const versionId = buffer.readInt8(VERSION_ID_INDEX);\n  if (versionId > VERSION_ID) {\n    throw new Error(\n      `Wrong Version ID: ${versionId}. Currently supports version up to: ${VERSION_ID}`\n    );\n  }\n  return parseTags(buffer);\n}\n\nfunction encodeTag(tagKey: TagKey, tagValue: TagValue, byteArray: number[]) {\n  byteArray.push(TAG_FIELD_ID);\n  encodeString(tagKey.name, byteArray);\n  encodeString(tagValue.value, byteArray);\n}\n\nfunction encodeString(input: string, byteArray: number[]) {\n  byteArray.push(...EncodeVarint(input.length));\n  byteArray.push(...input.split('').map(unicode));\n  return byteArray;\n}\n\nfunction parseTags(buffer: Buffer): TagMap {\n  const tags = new TagMap();\n  const limit = buffer.length;\n  let totalChars = 0;\n  let currentIndex = 1;\n\n  while (currentIndex < limit) {\n    const fieldId = buffer.readInt8(currentIndex);\n    if (fieldId > TAG_FIELD_ID) {\n      // Stop parsing at the first unknown field ID, since there is no way to\n      // know its length.\n      break;\n    }\n    currentIndex += 1;\n    const key = decodeString(buffer, currentIndex);\n    currentIndex += key.length;\n    totalChars += key.length;\n\n    currentIndex += 1;\n    const val = decodeString(buffer, currentIndex);\n    currentIndex += val.length;\n    totalChars += val.length;\n\n    currentIndex += 1;\n    if (totalChars > TAG_MAP_SERIALIZED_SIZE_LIMIT) {\n      throw new Error(\n        `Size of TagMap exceeds the maximum serialized size ${TAG_MAP_SERIALIZED_SIZE_LIMIT}`\n      );\n    } else {\n      tags.set({ name: key }, { value: val });\n    }\n  }\n  return tags;\n}\n\nfunction decodeString(buffer: Buffer, offset: number): string {\n  const length = DecodeVarint(buffer, offset);\n  return buffer.toString(ENCODING, offset + 1, offset + 1 + length);\n}\n\nfunction unicode(x: string) {\n  return x.charCodeAt(0);\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"41734d77825a666b2f2c08e318e364f2de396516","contentHash":"f04140cad4071dad4ea1cad5c4ad8f77041c220fc8d333db206fea138d2419b2"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/tag-map.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/tag-map.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":24}},"2":{"start":{"line":19,"column":16},"end":{"line":19,"column":34}},"3":{"start":{"line":20,"column":21},"end":{"line":20,"column":44}},"4":{"start":{"line":21,"column":33},"end":{"line":23,"column":1}},"5":{"start":{"line":28,"column":8},"end":{"line":28,"column":40}},"6":{"start":{"line":37,"column":8},"end":{"line":38,"column":19}},"7":{"start":{"line":38,"column":12},"end":{"line":38,"column":19}},"8":{"start":{"line":40,"column":8},"end":{"line":45,"column":9}},"9":{"start":{"line":41,"column":12},"end":{"line":44,"column":13}},"10":{"start":{"line":42,"column":16},"end":{"line":42,"column":34}},"11":{"start":{"line":43,"column":16},"end":{"line":43,"column":22}},"12":{"start":{"line":46,"column":8},"end":{"line":47,"column":52}},"13":{"start":{"line":47,"column":12},"end":{"line":47,"column":52}},"14":{"start":{"line":48,"column":34},"end":{"line":48,"column":82}},"15":{"start":{"line":49,"column":8},"end":{"line":49,"column":59}},"16":{"start":{"line":56,"column":8},"end":{"line":56,"column":43}},"17":{"start":{"line":60,"column":36},"end":{"line":60,"column":45}},"18":{"start":{"line":61,"column":8},"end":{"line":63,"column":9}},"19":{"start":{"line":62,"column":12},"end":{"line":62,"column":72}},"20":{"start":{"line":64,"column":8},"end":{"line":64,"column":35}},"21":{"start":{"line":68,"column":8},"end":{"line":68,"column":35}},"22":{"start":{"line":76,"column":8},"end":{"line":78,"column":9}},"23":{"start":{"line":77,"column":12},"end":{"line":77,"column":45}},"24":{"start":{"line":79,"column":8},"end":{"line":79,"column":67}},"25":{"start":{"line":82,"column":0},"end":{"line":82,"column":24}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":26,"column":4},"end":{"line":26,"column":5}},"loc":{"start":{"line":26,"column":18},"end":{"line":29,"column":5}},"line":26},"1":{"name":"(anonymous_1)","decl":{"start":{"line":36,"column":4},"end":{"line":36,"column":5}},"loc":{"start":{"line":36,"column":39},"end":{"line":50,"column":5}},"line":36},"2":{"name":"(anonymous_2)","decl":{"start":{"line":55,"column":4},"end":{"line":55,"column":5}},"loc":{"start":{"line":55,"column":19},"end":{"line":57,"column":5}},"line":55},"3":{"name":"(anonymous_3)","decl":{"start":{"line":59,"column":4},"end":{"line":59,"column":5}},"loc":{"start":{"line":59,"column":15},"end":{"line":65,"column":5}},"line":59},"4":{"name":"(anonymous_4)","decl":{"start":{"line":67,"column":4},"end":{"line":67,"column":5}},"loc":{"start":{"line":67,"column":27},"end":{"line":69,"column":5}},"line":67},"5":{"name":"(anonymous_5)","decl":{"start":{"line":75,"column":4},"end":{"line":75,"column":5}},"loc":{"start":{"line":75,"column":48},"end":{"line":80,"column":5}},"line":75}},"branchMap":{"0":{"loc":{"start":{"line":37,"column":8},"end":{"line":38,"column":19}},"type":"if","locations":[{"start":{"line":37,"column":8},"end":{"line":38,"column":19}},{"start":{"line":37,"column":8},"end":{"line":38,"column":19}}],"line":37},"1":{"loc":{"start":{"line":37,"column":12},"end":{"line":37,"column":90}},"type":"binary-expr","locations":[{"start":{"line":37,"column":12},"end":{"line":37,"column":47}},{"start":{"line":37,"column":51},"end":{"line":37,"column":90}}],"line":37},"2":{"loc":{"start":{"line":41,"column":12},"end":{"line":44,"column":13}},"type":"if","locations":[{"start":{"line":41,"column":12},"end":{"line":44,"column":13}},{"start":{"line":41,"column":12},"end":{"line":44,"column":13}}],"line":41},"3":{"loc":{"start":{"line":46,"column":8},"end":{"line":47,"column":52}},"type":"if","locations":[{"start":{"line":46,"column":8},"end":{"line":47,"column":52}},{"start":{"line":46,"column":8},"end":{"line":47,"column":52}}],"line":46},"4":{"loc":{"start":{"line":76,"column":8},"end":{"line":78,"column":9}},"type":"if","locations":[{"start":{"line":76,"column":8},"end":{"line":78,"column":9}},{"start":{"line":76,"column":8},"end":{"line":78,"column":9}}],"line":76}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":102,"6":1369,"7":2,"8":1367,"9":540196,"10":5,"11":5,"12":1367,"13":5,"14":1367,"15":1367,"16":2,"17":148,"18":148,"19":1286,"20":148,"21":40,"22":1367,"23":65,"24":1302,"25":1},"f":{"0":102,"1":1369,"2":2,"3":148,"4":40,"5":1367},"b":{"0":[2,1367],"1":[1369,1368],"2":[5,540191],"3":[5,1362],"4":[65,1302]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/tag-map.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/tag-map.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,mCAMiB;AACjB,6CAA8D;AAE9D,MAAM,wBAAwB,GAAG;IAC/B,MAAM,EAAE,cAAM,CAAC,qBAAqB;CACrC,CAAC;AAEF,uDAAuD;AACvD,MAAa,MAAM;IAAnB;QACE,kEAAkE;QACjD,mBAAc,GAG3B,IAAI,GAAG,EAAE,CAAC;IA0DhB,CAAC;IAxDC;;;;;OAKG;IACH,GAAG,CAAC,MAAc,EAAE,QAAkB,EAAE,WAAyB;QAC/D,IAAI,CAAC,0BAAa,CAAC,MAAM,CAAC,IAAI,CAAC,4BAAe,CAAC,QAAQ,CAAC;YAAE,OAAO;QACjE,IAAI,WAAW,CAAC;QAChB,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,EAAE;YAC5C,IAAI,GAAG,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI,EAAE;gBAC5B,WAAW,GAAG,GAAG,CAAC;gBAClB,MAAM;aACP;SACF;QACD,IAAI,WAAW;YAAE,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QACzD,MAAM,iBAAiB,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;QAC3E,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC;IACrD,CAAC;IAED;;;OAGG;IACH,MAAM,CAAC,MAAc;QACnB,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACrC,CAAC;IAED,0CAA0C;IAC1C,IAAI,IAAI;QACN,MAAM,mBAAmB,GAA0B,IAAI,GAAG,EAAE,CAAC;QAC7D,KAAK,MAAM,CAAC,MAAM,EAAE,iBAAiB,CAAC,IAAI,IAAI,CAAC,cAAc,EAAE;YAC7D,mBAAmB,CAAC,GAAG,CAAC,MAAM,EAAE,iBAAiB,CAAC,QAAQ,CAAC,CAAC;SAC7D;QACD,OAAO,mBAAmB,CAAC;IAC7B,CAAC;IAED,uCAAuC;IACvC,IAAI,gBAAgB;QAClB,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IAED;;;;OAIG;IACK,oBAAoB,CAC1B,QAAkB,EAClB,WAAyB;QAEzB,IAAI,WAAW,EAAE;YACf,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,CAAC;SAClC;QACD,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,wBAAwB,EAAE,CAAC;IAC7D,CAAC;CACF;AA/DD,wBA+DC","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  TagKey,\n  TagMetadata,\n  TagTtl,\n  TagValue,\n  TagValueWithMetadata,\n} from './types';\nimport { isValidTagKey, isValidTagValue } from './validation';\n\nconst UNLIMITED_PROPAGATION_MD = {\n  tagTtl: TagTtl.UNLIMITED_PROPAGATION,\n};\n\n/** TagMap is maps of TagKey -> TagValueWithMetadata */\nexport class TagMap {\n  // A map mapping TagKey to to its respective TagValueWithMetadata.\n  private readonly registeredTags: Map<\n    TagKey,\n    TagValueWithMetadata\n  > = new Map();\n\n  /**\n   * Adds the key/value pair regardless of whether the key is present.\n   * @param tagKey The TagKey which will be set.\n   * @param tagValue The TagValue to set for the given key.\n   * @param tagMetadata The TagMetadata associated with this Tag.\n   */\n  set(tagKey: TagKey, tagValue: TagValue, tagMetadata?: TagMetadata): void {\n    if (!isValidTagKey(tagKey) || !isValidTagValue(tagValue)) return;\n    let existingKey;\n    for (const key of this.registeredTags.keys()) {\n      if (key.name === tagKey.name) {\n        existingKey = key;\n        break;\n      }\n    }\n    if (existingKey) this.registeredTags.delete(existingKey);\n    const valueWithMetadata = this.getValueWithMetadata(tagValue, tagMetadata);\n    this.registeredTags.set(tagKey, valueWithMetadata);\n  }\n\n  /**\n   * Deletes a tag from the map if the key is in the map.\n   * @param tagKey The TagKey which will be removed.\n   */\n  delete(tagKey: TagKey): void {\n    this.registeredTags.delete(tagKey);\n  }\n\n  /** Gets the tags map without metadata. */\n  get tags() {\n    const tagsWithoutMetadata: Map<TagKey, TagValue> = new Map();\n    for (const [tagKey, valueWithMetadata] of this.registeredTags) {\n      tagsWithoutMetadata.set(tagKey, valueWithMetadata.tagValue);\n    }\n    return tagsWithoutMetadata;\n  }\n\n  /** Gets the tags map with metadata. */\n  get tagsWithMetadata() {\n    return this.registeredTags;\n  }\n\n  /**\n   * Constructs a new TagValueWithMetadata using tagValue and tagMetadata.\n   * For backwards-compatibility this method still produces propagating Tags\n   * (UNLIMITED_PROPAGATION) if tagMetadata is not provided or missing.\n   */\n  private getValueWithMetadata(\n    tagValue: TagValue,\n    tagMetadata?: TagMetadata\n  ): TagValueWithMetadata {\n    if (tagMetadata) {\n      return { tagValue, tagMetadata };\n    }\n    return { tagValue, tagMetadata: UNLIMITED_PROPAGATION_MD };\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"870318ea92509b18aa839e136b9412c905005591","contentHash":"52e8dcd06bcd794cab8b7df5484cdbbd5695fbd8be4d486263bc634583cfb821"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/types.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/types.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":24}},"2":{"start":{"line":21,"column":0},"end":{"line":29,"column":53}},"3":{"start":{"line":26,"column":4},"end":{"line":26,"column":60}},"4":{"start":{"line":28,"column":4},"end":{"line":28,"column":75}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":21,"column":1},"end":{"line":21,"column":2}},"loc":{"start":{"line":21,"column":19},"end":{"line":29,"column":1}},"line":21}},"branchMap":{"0":{"loc":{"start":{"line":29,"column":12},"end":{"line":29,"column":51}},"type":"binary-expr","locations":[{"start":{"line":29,"column":12},"end":{"line":29,"column":26}},{"start":{"line":29,"column":31},"end":{"line":29,"column":50}}],"line":29}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1},"f":{"0":1},"b":{"0":[1,1]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/types.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/types.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAqCH,8EAA8E;AAC9E,IAAY,MASX;AATD,WAAY,MAAM;IAChB;;;OAGG;IACH,uDAAkB,CAAA;IAElB,0DAA0D;IAC1D,sEAA0B,CAAA;AAC5B,CAAC,EATW,MAAM,GAAN,cAAM,KAAN,cAAM,QASjB","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** TagKey represents a tag key */\nexport interface TagKey {\n  /** The name of the key. */\n  readonly name: string;\n}\n\n/** TagValue represents a tag value */\nexport interface TagValue {\n  /** The value of a tag. */\n  readonly value: string;\n}\n\n/** TagValueWithMetadata holds a TagValue and a TagMetadata. */\nexport interface TagValueWithMetadata {\n  /** The tag value */\n  readonly tagValue: TagValue;\n  /** The metadata for the tag */\n  readonly tagMetadata: TagMetadata;\n}\n\n/**\n * TagMetadata contains properties associated with a Tag.\n * Anytime a sender serializes a tag, sends it over the wire and receiver\n * deserializes the tag then the tag is considered to have travelled one hop.\n * There could be one or more proxy(ies) between sender and receiver. Proxies\n * are treated as transparent entities and they do not create additional hops.\n */\nexport interface TagMetadata {\n  /**\n   * For now, only special values of TagTtl are supported. In future,\n   * additional properties may be added to address specific situations.\n   */\n  readonly tagTtl: number;\n}\n\n/** TagTtl is an integer that represents number of hops a tag can propagate */\nexport enum TagTtl {\n  /**\n   * NO_PROPAGATION is considered to have local scope and is used within the\n   * process it created.\n   */\n  NO_PROPAGATION = 0,\n\n  /** UNLIMITED_PROPAGATION can propagate unlimited hops. */\n  UNLIMITED_PROPAGATION = -1,\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"c88ebd16767dd74bbc9667670b51bb58548e5378","contentHash":"37cf6cc97e9c3731737f9f0550d72123e4184f6c20c859ea4a58e33b019bdd29"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/validation.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/validation.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":57}},"2":{"start":{"line":19,"column":31},"end":{"line":19,"column":49}},"3":{"start":{"line":20,"column":27},"end":{"line":20,"column":30}},"4":{"start":{"line":23,"column":4},"end":{"line":25,"column":5}},"5":{"start":{"line":24,"column":8},"end":{"line":24,"column":21}},"6":{"start":{"line":26,"column":4},"end":{"line":28,"column":50}},"7":{"start":{"line":30,"column":0},"end":{"line":30,"column":38}},"8":{"start":{"line":33,"column":4},"end":{"line":35,"column":5}},"9":{"start":{"line":34,"column":8},"end":{"line":34,"column":21}},"10":{"start":{"line":36,"column":4},"end":{"line":37,"column":53}},"11":{"start":{"line":39,"column":0},"end":{"line":39,"column":42}},"12":{"start":{"line":41,"column":4},"end":{"line":41,"column":46}}},"fnMap":{"0":{"name":"isValidTagKey","decl":{"start":{"line":22,"column":9},"end":{"line":22,"column":22}},"loc":{"start":{"line":22,"column":31},"end":{"line":29,"column":1}},"line":22},"1":{"name":"isValidTagValue","decl":{"start":{"line":32,"column":9},"end":{"line":32,"column":24}},"loc":{"start":{"line":32,"column":35},"end":{"line":38,"column":1}},"line":32},"2":{"name":"isPrintableString","decl":{"start":{"line":40,"column":9},"end":{"line":40,"column":26}},"loc":{"start":{"line":40,"column":33},"end":{"line":42,"column":1}},"line":40}},"branchMap":{"0":{"loc":{"start":{"line":23,"column":4},"end":{"line":25,"column":5}},"type":"if","locations":[{"start":{"line":23,"column":4},"end":{"line":25,"column":5}},{"start":{"line":23,"column":4},"end":{"line":25,"column":5}}],"line":23},"1":{"loc":{"start":{"line":23,"column":8},"end":{"line":23,"column":31}},"type":"binary-expr","locations":[{"start":{"line":23,"column":8},"end":{"line":23,"column":15}},{"start":{"line":23,"column":19},"end":{"line":23,"column":31}}],"line":23},"2":{"loc":{"start":{"line":26,"column":12},"end":{"line":28,"column":48}},"type":"binary-expr","locations":[{"start":{"line":26,"column":12},"end":{"line":26,"column":42}},{"start":{"line":27,"column":8},"end":{"line":27,"column":30}},{"start":{"line":28,"column":8},"end":{"line":28,"column":48}}],"line":26},"3":{"loc":{"start":{"line":33,"column":4},"end":{"line":35,"column":5}},"type":"if","locations":[{"start":{"line":33,"column":4},"end":{"line":35,"column":5}},{"start":{"line":33,"column":4},"end":{"line":35,"column":5}}],"line":33},"4":{"loc":{"start":{"line":33,"column":8},"end":{"line":33,"column":76}},"type":"binary-expr","locations":[{"start":{"line":33,"column":8},"end":{"line":33,"column":17}},{"start":{"line":33,"column":21},"end":{"line":33,"column":44}},{"start":{"line":33,"column":48},"end":{"line":33,"column":76}}],"line":33},"5":{"loc":{"start":{"line":36,"column":12},"end":{"line":37,"column":51}},"type":"binary-expr","locations":[{"start":{"line":36,"column":12},"end":{"line":36,"column":45}},{"start":{"line":37,"column":8},"end":{"line":37,"column":51}}],"line":36}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1449,"5":1,"6":1448,"7":1,"8":1371,"9":0,"10":1371,"11":1,"12":2819},"f":{"0":1449,"1":1371,"2":2819},"b":{"0":[1,1448],"1":[1449,1449],"2":[1448,1448,1448],"3":[0,1371],"4":[1371,1371,1371],"5":[1371,1371]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/validation.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/validation.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAIH,MAAM,sBAAsB,GAAG,kBAAkB,CAAC;AAClD,MAAM,kBAAkB,GAAG,GAAG,CAAC;AAE/B,8DAA8D;AAC9D,SAAgB,aAAa,CAAC,MAAc;IAC1C,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE;QAC3B,OAAO,KAAK,CAAC;KACd;IACD,OAAO,CACL,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC;QAC9B,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC;QACtB,MAAM,CAAC,IAAI,CAAC,MAAM,IAAI,kBAAkB,CACzC,CAAC;AACJ,CAAC;AATD,sCASC;AAED,gEAAgE;AAChE,SAAgB,eAAe,CAAC,QAAkB;IAChD,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,KAAK,KAAK,IAAI,IAAI,QAAQ,CAAC,KAAK,KAAK,SAAS,EAAE;QACxE,OAAO,KAAK,CAAC;KACd;IACD,OAAO,CACL,iBAAiB,CAAC,QAAQ,CAAC,KAAK,CAAC;QACjC,QAAQ,CAAC,KAAK,CAAC,MAAM,IAAI,kBAAkB,CAC5C,CAAC;AACJ,CAAC;AARD,0CAQC;AAED,SAAS,iBAAiB,CAAC,IAAY;IACrC,OAAO,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC5C,CAAC","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TagKey, TagValue } from './types';\n\nconst nonPrintableCharsRegex = /[^\\u0020-\\u007e]/;\nconst TAG_KEY_MAX_LENGTH = 255;\n\n/** Determines whether the given String is a valid tag key. */\nexport function isValidTagKey(tagKey: TagKey): boolean {\n  if (!tagKey || !tagKey.name) {\n    return false;\n  }\n  return (\n    isPrintableString(tagKey.name) &&\n    tagKey.name.length > 0 &&\n    tagKey.name.length <= TAG_KEY_MAX_LENGTH\n  );\n}\n\n/** Determines whether the given String is a valid tag value. */\nexport function isValidTagValue(tagValue: TagValue): boolean {\n  if (!tagValue || tagValue.value === null || tagValue.value === undefined) {\n    return false;\n  }\n  return (\n    isPrintableString(tagValue.value) &&\n    tagValue.value.length <= TAG_KEY_MAX_LENGTH\n  );\n}\n\nfunction isPrintableString(name: string): boolean {\n  return !nonPrintableCharsRegex.test(name);\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"3fad8890672d0b056539af6b370069d26ea07afa","contentHash":"d52d2596f1fb1f666cfe9fdb3576a669fb410571103c3386075273fd1bda31d0"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/propagation/variant-encoding.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/propagation/variant-encoding.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":53}},"2":{"start":{"line":21,"column":12},"end":{"line":21,"column":16}},"3":{"start":{"line":23,"column":13},"end":{"line":23,"column":17}},"4":{"start":{"line":29,"column":16},"end":{"line":29,"column":18}},"5":{"start":{"line":30,"column":4},"end":{"line":35,"column":26}},"6":{"start":{"line":31,"column":21},"end":{"line":31,"column":33}},"7":{"start":{"line":32,"column":8},"end":{"line":32,"column":21}},"8":{"start":{"line":33,"column":18},"end":{"line":33,"column":48}},"9":{"start":{"line":34,"column":8},"end":{"line":34,"column":20}},"10":{"start":{"line":36,"column":4},"end":{"line":36,"column":15}},"11":{"start":{"line":38,"column":0},"end":{"line":38,"column":36}},"12":{"start":{"line":45,"column":14},"end":{"line":45,"column":15}},"13":{"start":{"line":46,"column":16},"end":{"line":46,"column":17}},"14":{"start":{"line":48,"column":18},"end":{"line":48,"column":24}},"15":{"start":{"line":49,"column":4},"end":{"line":56,"column":40}},"16":{"start":{"line":50,"column":8},"end":{"line":52,"column":9}},"17":{"start":{"line":51,"column":12},"end":{"line":51,"column":47}},"18":{"start":{"line":53,"column":8},"end":{"line":53,"column":49}},"19":{"start":{"line":54,"column":8},"end":{"line":54,"column":45}},"20":{"start":{"line":55,"column":8},"end":{"line":55,"column":19}},"21":{"start":{"line":57,"column":4},"end":{"line":57,"column":15}},"22":{"start":{"line":59,"column":0},"end":{"line":59,"column":36}}},"fnMap":{"0":{"name":"EncodeVarint","decl":{"start":{"line":28,"column":9},"end":{"line":28,"column":21}},"loc":{"start":{"line":28,"column":29},"end":{"line":37,"column":1}},"line":28},"1":{"name":"DecodeVarint","decl":{"start":{"line":44,"column":9},"end":{"line":44,"column":21}},"loc":{"start":{"line":44,"column":38},"end":{"line":58,"column":1}},"line":44}},"branchMap":{"0":{"loc":{"start":{"line":33,"column":26},"end":{"line":33,"column":47}},"type":"cond-expr","locations":[{"start":{"line":33,"column":40},"end":{"line":33,"column":43}},{"start":{"line":33,"column":46},"end":{"line":33,"column":47}}],"line":33},"1":{"loc":{"start":{"line":50,"column":8},"end":{"line":52,"column":9}},"type":"if","locations":[{"start":{"line":50,"column":8},"end":{"line":52,"column":9}},{"start":{"line":50,"column":8},"end":{"line":52,"column":9}}],"line":50}},"s":{"0":1,"1":1,"2":1,"3":1,"4":2070,"5":2070,"6":2083,"7":2083,"8":2083,"9":2083,"10":2070,"11":1,"12":23,"13":23,"14":23,"15":23,"16":36,"17":0,"18":36,"19":36,"20":36,"21":23,"22":1},"f":{"0":2070,"1":23},"b":{"0":[13,2070],"1":[0,36]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/propagation/variant-encoding.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/propagation/variant-encoding.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,4EAA4E;AAC5E,mEAAmE;AACnE,MAAM,GAAG,GAAG,IAAI,CAAC;AAEjB,oDAAoD;AACpD,MAAM,IAAI,GAAG,IAAI,CAAC;AAElB;;;GAGG;AACH,SAAgB,YAAY,CAAC,KAAa;IACxC,MAAM,GAAG,GAAa,EAAE,CAAC;IACzB,GAAG;QACD,MAAM,IAAI,GAAG,KAAK,GAAG,IAAI,CAAC;QAC1B,KAAK,MAAM,CAAC,CAAC;QACb,MAAM,CAAC,GAAG,IAAI,GAAG,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACzC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;KACb,QAAQ,KAAK,KAAK,CAAC,EAAE;IACtB,OAAO,GAAG,CAAC;AACb,CAAC;AATD,oCASC;AAED;;;;GAIG;AACH,SAAgB,YAAY,CAAC,MAAc,EAAE,MAAc;IACzD,IAAI,GAAG,GAAG,CAAC,CAAC;IACZ,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,IAAI,WAAW,CAAC;IAChB,IAAI,OAAO,GAAG,MAAM,CAAC;IACrB,GAAG;QACD,IAAI,KAAK,IAAI,EAAE,EAAE;YACf,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;SACpC;QACD,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAC;QACzC,GAAG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,KAAK,CAAC;QACrC,KAAK,IAAI,CAAC,CAAC;KACZ,QAAQ,CAAC,WAAW,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE;IACpC,OAAO,GAAG,CAAC;AACb,CAAC;AAdD,oCAcC","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// The MSB (most significant bit) indicates whether we've reached the end of\n// the number. Set means there is more than one byte in the varint.\nconst MSB = 0x80;\n\n// The REST indicates the lower 7 bits of each byte.\nconst REST = 0x7f;\n\n/**\n * Encodes a number in a variable-length encoding, 7 bits per byte.\n * @param value The input number.\n */\nexport function EncodeVarint(value: number) {\n  const ret: number[] = [];\n  do {\n    const bits = value & REST;\n    value >>>= 7;\n    const b = bits + (value !== 0 ? MSB : 0);\n    ret.push(b);\n  } while (value !== 0);\n  return ret;\n}\n\n/**\n * Decodes a varint from buffer.\n * @param buffer The source buffer.\n * @param offset The offset within buffer.\n */\nexport function DecodeVarint(buffer: Buffer, offset: number) {\n  let ret = 0;\n  let shift = 0;\n  let currentByte;\n  let counter = offset;\n  do {\n    if (shift >= 32) {\n      throw new Error('varint too long');\n    }\n    currentByte = buffer.readInt8(counter++);\n    ret |= (currentByte & REST) << shift;\n    shift += 7;\n  } while ((currentByte & MSB) !== 0);\n  return ret;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"bfb232444487037e6078a856796b37946f8dc591","contentHash":"a2fc86f3b1edd1937f96f71f1e074fcffbe0051bfc6669dcc7e6140aca59e071"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-bucket-boundaries.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-bucket-boundaries.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":15},"end":{"line":18,"column":32}},"2":{"start":{"line":19,"column":14},"end":{"line":19,"column":31}},"3":{"start":{"line":20,"column":0},"end":{"line":38,"column":3}},"4":{"start":{"line":21,"column":4},"end":{"line":24,"column":7}},"5":{"start":{"line":22,"column":24},"end":{"line":22,"column":61}},"6":{"start":{"line":23,"column":8},"end":{"line":23,"column":67}},"7":{"start":{"line":25,"column":4},"end":{"line":28,"column":7}},"8":{"start":{"line":26,"column":24},"end":{"line":26,"column":61}},"9":{"start":{"line":27,"column":8},"end":{"line":27,"column":66}},"10":{"start":{"line":29,"column":4},"end":{"line":37,"column":7}},"11":{"start":{"line":30,"column":24},"end":{"line":30,"column":87}},"12":{"start":{"line":31,"column":8},"end":{"line":33,"column":11}},"13":{"start":{"line":32,"column":12},"end":{"line":32,"column":71}},"14":{"start":{"line":34,"column":8},"end":{"line":36,"column":11}},"15":{"start":{"line":35,"column":12},"end":{"line":35,"column":70}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":20,"column":29},"end":{"line":20,"column":30}},"loc":{"start":{"line":20,"column":35},"end":{"line":38,"column":1}},"line":20},"1":{"name":"(anonymous_1)","decl":{"start":{"line":21,"column":35},"end":{"line":21,"column":36}},"loc":{"start":{"line":21,"column":41},"end":{"line":24,"column":5}},"line":21},"2":{"name":"(anonymous_2)","decl":{"start":{"line":25,"column":35},"end":{"line":25,"column":36}},"loc":{"start":{"line":25,"column":41},"end":{"line":28,"column":5}},"line":25},"3":{"name":"(anonymous_3)","decl":{"start":{"line":29,"column":47},"end":{"line":29,"column":48}},"loc":{"start":{"line":29,"column":53},"end":{"line":37,"column":5}},"line":29},"4":{"name":"(anonymous_4)","decl":{"start":{"line":31,"column":52},"end":{"line":31,"column":53}},"loc":{"start":{"line":31,"column":58},"end":{"line":33,"column":9}},"line":31},"5":{"name":"(anonymous_5)","decl":{"start":{"line":34,"column":39},"end":{"line":34,"column":40}},"loc":{"start":{"line":34,"column":45},"end":{"line":36,"column":9}},"line":34}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1},"f":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-bucket-boundaries.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-bucket-boundaries.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,iCAAiC;AACjC,gCAA0C;AAE1C,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAChC,EAAE,CAAC,0BAA0B,EAAE,GAAG,EAAE;QAClC,MAAM,OAAO,GAAG,IAAI,sBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAChD,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0BAA0B,EAAE,GAAG,EAAE;QAClC,MAAM,OAAO,GAAG,IAAI,sBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAChD,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC5D,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gCAAgC,EAAE,GAAG,EAAE;QAC9C,MAAM,OAAO,GAAG,IAAI,sBAAgB,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC1E,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;YAC/C,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,0BAA0B,EAAE,GAAG,EAAE;YAClC,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport { BucketBoundaries } from '../src';\n\ndescribe('BucketBoundaries', () => {\n  it('should return boundaries', () => {\n    const buckets = new BucketBoundaries([1, 2, 3]);\n    assert.deepStrictEqual(buckets.getBoundaries(), [1, 2, 3]);\n  });\n\n  it('should has bucket counts', () => {\n    const buckets = new BucketBoundaries([1, 2, 3]);\n    assert.deepStrictEqual(buckets.getCounts(), [0, 0, 0, 0]);\n  });\n\n  describe('Drop negative and 0 boundaries', () => {\n    const buckets = new BucketBoundaries([-Infinity, -3, -2, -1, 0, 1, 2, 3]);\n    it('should drop negative and 0 boundaries', () => {\n      assert.deepStrictEqual(buckets.getBoundaries(), [1, 2, 3]);\n    });\n    it('should has bucket counts', () => {\n      assert.deepStrictEqual(buckets.getCounts(), [0, 0, 0, 0]);\n    });\n  });\n});\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"47ae99be9432879694683f0a2e4c5bb9747baaa9","contentHash":"388b1dbef69fd74fa997dbddd1e61e513d124e8fe8f99f9a4771c59a7443f657"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/index.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/index.ts","statementMap":{"0":{"start":{"line":17,"column":22},"end":{"line":23,"column":3}},"1":{"start":{"line":18,"column":4},"end":{"line":18,"column":33}},"2":{"start":{"line":18,"column":26},"end":{"line":18,"column":33}},"3":{"start":{"line":19,"column":4},"end":{"line":19,"column":89}},"4":{"start":{"line":19,"column":71},"end":{"line":19,"column":83}},"5":{"start":{"line":21,"column":4},"end":{"line":21,"column":33}},"6":{"start":{"line":21,"column":26},"end":{"line":21,"column":33}},"7":{"start":{"line":22,"column":4},"end":{"line":22,"column":17}},"8":{"start":{"line":24,"column":19},"end":{"line":26,"column":1}},"9":{"start":{"line":25,"column":4},"end":{"line":25,"column":103}},"10":{"start":{"line":25,"column":21},"end":{"line":25,"column":103}},"11":{"start":{"line":25,"column":72},"end":{"line":25,"column":103}},"12":{"start":{"line":27,"column":0},"end":{"line":27,"column":62}},"13":{"start":{"line":28,"column":0},"end":{"line":28,"column":46}},"14":{"start":{"line":30,"column":0},"end":{"line":30,"column":48}},"15":{"start":{"line":31,"column":0},"end":{"line":31,"column":54}},"16":{"start":{"line":32,"column":0},"end":{"line":32,"column":55}},"17":{"start":{"line":33,"column":0},"end":{"line":33,"column":56}},"18":{"start":{"line":34,"column":0},"end":{"line":34,"column":64}},"19":{"start":{"line":35,"column":0},"end":{"line":35,"column":60}},"20":{"start":{"line":36,"column":0},"end":{"line":36,"column":52}},"21":{"start":{"line":37,"column":0},"end":{"line":37,"column":49}},"22":{"start":{"line":38,"column":0},"end":{"line":38,"column":50}},"23":{"start":{"line":39,"column":0},"end":{"line":39,"column":61}},"24":{"start":{"line":40,"column":0},"end":{"line":40,"column":57}},"25":{"start":{"line":41,"column":14},"end":{"line":41,"column":47}},"26":{"start":{"line":42,"column":0},"end":{"line":42,"column":108}},"27":{"start":{"line":42,"column":80},"end":{"line":42,"column":102}},"28":{"start":{"line":43,"column":0},"end":{"line":43,"column":128}},"29":{"start":{"line":43,"column":90},"end":{"line":43,"column":122}},"30":{"start":{"line":44,"column":0},"end":{"line":44,"column":116}},"31":{"start":{"line":44,"column":84},"end":{"line":44,"column":110}},"32":{"start":{"line":45,"column":0},"end":{"line":45,"column":136}},"33":{"start":{"line":45,"column":94},"end":{"line":45,"column":130}},"34":{"start":{"line":46,"column":0},"end":{"line":46,"column":112}},"35":{"start":{"line":46,"column":82},"end":{"line":46,"column":106}},"36":{"start":{"line":47,"column":0},"end":{"line":47,"column":116}},"37":{"start":{"line":47,"column":84},"end":{"line":47,"column":110}},"38":{"start":{"line":48,"column":0},"end":{"line":48,"column":116}},"39":{"start":{"line":48,"column":89},"end":{"line":48,"column":110}},"40":{"start":{"line":49,"column":0},"end":{"line":49,"column":130}},"41":{"start":{"line":49,"column":91},"end":{"line":49,"column":124}},"42":{"start":{"line":50,"column":0},"end":{"line":50,"column":122}},"43":{"start":{"line":50,"column":87},"end":{"line":50,"column":116}},"44":{"start":{"line":51,"column":0},"end":{"line":51,"column":120}},"45":{"start":{"line":51,"column":92},"end":{"line":51,"column":114}},"46":{"start":{"line":52,"column":0},"end":{"line":52,"column":120}},"47":{"start":{"line":52,"column":86},"end":{"line":52,"column":114}},"48":{"start":{"line":53,"column":0},"end":{"line":53,"column":112}},"49":{"start":{"line":53,"column":82},"end":{"line":53,"column":106}},"50":{"start":{"line":54,"column":0},"end":{"line":54,"column":112}},"51":{"start":{"line":54,"column":82},"end":{"line":54,"column":106}},"52":{"start":{"line":55,"column":0},"end":{"line":55,"column":114}},"53":{"start":{"line":55,"column":83},"end":{"line":55,"column":108}},"54":{"start":{"line":56,"column":0},"end":{"line":56,"column":112}},"55":{"start":{"line":56,"column":82},"end":{"line":56,"column":106}},"56":{"start":{"line":57,"column":0},"end":{"line":57,"column":130}},"57":{"start":{"line":57,"column":91},"end":{"line":57,"column":124}},"58":{"start":{"line":58,"column":0},"end":{"line":58,"column":138}},"59":{"start":{"line":58,"column":95},"end":{"line":58,"column":132}},"60":{"start":{"line":59,"column":0},"end":{"line":59,"column":124}},"61":{"start":{"line":59,"column":88},"end":{"line":59,"column":118}},"62":{"start":{"line":62,"column":0},"end":{"line":62,"column":60}},"63":{"start":{"line":63,"column":0},"end":{"line":63,"column":55}},"64":{"start":{"line":65,"column":0},"end":{"line":65,"column":58}},"65":{"start":{"line":67,"column":0},"end":{"line":67,"column":70}},"66":{"start":{"line":69,"column":0},"end":{"line":69,"column":62}},"67":{"start":{"line":70,"column":0},"end":{"line":70,"column":63}},"68":{"start":{"line":73,"column":0},"end":{"line":73,"column":47}},"69":{"start":{"line":74,"column":0},"end":{"line":74,"column":51}},"70":{"start":{"line":75,"column":0},"end":{"line":75,"column":60}},"71":{"start":{"line":76,"column":0},"end":{"line":76,"column":55}},"72":{"start":{"line":77,"column":0},"end":{"line":77,"column":49}},"73":{"start":{"line":78,"column":0},"end":{"line":78,"column":48}},"74":{"start":{"line":79,"column":0},"end":{"line":79,"column":71}},"75":{"start":{"line":80,"column":0},"end":{"line":80,"column":65}},"76":{"start":{"line":81,"column":0},"end":{"line":81,"column":54}},"77":{"start":{"line":83,"column":0},"end":{"line":83,"column":48}},"78":{"start":{"line":84,"column":14},"end":{"line":84,"column":37}},"79":{"start":{"line":85,"column":0},"end":{"line":85,"column":108}},"80":{"start":{"line":85,"column":80},"end":{"line":85,"column":102}},"81":{"start":{"line":86,"column":0},"end":{"line":86,"column":112}},"82":{"start":{"line":86,"column":82},"end":{"line":86,"column":106}},"83":{"start":{"line":87,"column":0},"end":{"line":87,"column":118}},"84":{"start":{"line":87,"column":85},"end":{"line":87,"column":112}},"85":{"start":{"line":88,"column":0},"end":{"line":88,"column":108}},"86":{"start":{"line":88,"column":80},"end":{"line":88,"column":102}},"87":{"start":{"line":89,"column":0},"end":{"line":89,"column":51}},"88":{"start":{"line":91,"column":15},"end":{"line":91,"column":49}},"89":{"start":{"line":92,"column":0},"end":{"line":92,"column":24}},"90":{"start":{"line":94,"column":0},"end":{"line":94,"column":51}},"91":{"start":{"line":96,"column":0},"end":{"line":96,"column":52}},"92":{"start":{"line":97,"column":0},"end":{"line":97,"column":60}},"93":{"start":{"line":99,"column":0},"end":{"line":99,"column":66}},"94":{"start":{"line":100,"column":0},"end":{"line":100,"column":74}},"95":{"start":{"line":102,"column":0},"end":{"line":102,"column":65}},"96":{"start":{"line":103,"column":0},"end":{"line":103,"column":57}},"97":{"start":{"line":105,"column":16},"end":{"line":105,"column":40}},"98":{"start":{"line":106,"column":20},"end":{"line":106,"column":46}},"99":{"start":{"line":107,"column":0},"end":{"line":107,"column":34}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":17,"column":74},"end":{"line":17,"column":75}},"loc":{"start":{"line":17,"column":96},"end":{"line":20,"column":1}},"line":17},"1":{"name":"(anonymous_1)","decl":{"start":{"line":19,"column":58},"end":{"line":19,"column":59}},"loc":{"start":{"line":19,"column":69},"end":{"line":19,"column":85}},"line":19},"2":{"name":"(anonymous_2)","decl":{"start":{"line":20,"column":6},"end":{"line":20,"column":7}},"loc":{"start":{"line":20,"column":28},"end":{"line":23,"column":1}},"line":20},"3":{"name":"(anonymous_3)","decl":{"start":{"line":24,"column":50},"end":{"line":24,"column":51}},"loc":{"start":{"line":24,"column":71},"end":{"line":26,"column":1}},"line":24},"4":{"name":"(anonymous_4)","decl":{"start":{"line":42,"column":66},"end":{"line":42,"column":67}},"loc":{"start":{"line":42,"column":78},"end":{"line":42,"column":104}},"line":42},"5":{"name":"(anonymous_5)","decl":{"start":{"line":43,"column":76},"end":{"line":43,"column":77}},"loc":{"start":{"line":43,"column":88},"end":{"line":43,"column":124}},"line":43},"6":{"name":"(anonymous_6)","decl":{"start":{"line":44,"column":70},"end":{"line":44,"column":71}},"loc":{"start":{"line":44,"column":82},"end":{"line":44,"column":112}},"line":44},"7":{"name":"(anonymous_7)","decl":{"start":{"line":45,"column":80},"end":{"line":45,"column":81}},"loc":{"start":{"line":45,"column":92},"end":{"line":45,"column":132}},"line":45},"8":{"name":"(anonymous_8)","decl":{"start":{"line":46,"column":68},"end":{"line":46,"column":69}},"loc":{"start":{"line":46,"column":80},"end":{"line":46,"column":108}},"line":46},"9":{"name":"(anonymous_9)","decl":{"start":{"line":47,"column":70},"end":{"line":47,"column":71}},"loc":{"start":{"line":47,"column":82},"end":{"line":47,"column":112}},"line":47},"10":{"name":"(anonymous_10)","decl":{"start":{"line":48,"column":75},"end":{"line":48,"column":76}},"loc":{"start":{"line":48,"column":87},"end":{"line":48,"column":112}},"line":48},"11":{"name":"(anonymous_11)","decl":{"start":{"line":49,"column":77},"end":{"line":49,"column":78}},"loc":{"start":{"line":49,"column":89},"end":{"line":49,"column":126}},"line":49},"12":{"name":"(anonymous_12)","decl":{"start":{"line":50,"column":73},"end":{"line":50,"column":74}},"loc":{"start":{"line":50,"column":85},"end":{"line":50,"column":118}},"line":50},"13":{"name":"(anonymous_13)","decl":{"start":{"line":51,"column":78},"end":{"line":51,"column":79}},"loc":{"start":{"line":51,"column":90},"end":{"line":51,"column":116}},"line":51},"14":{"name":"(anonymous_14)","decl":{"start":{"line":52,"column":72},"end":{"line":52,"column":73}},"loc":{"start":{"line":52,"column":84},"end":{"line":52,"column":116}},"line":52},"15":{"name":"(anonymous_15)","decl":{"start":{"line":53,"column":68},"end":{"line":53,"column":69}},"loc":{"start":{"line":53,"column":80},"end":{"line":53,"column":108}},"line":53},"16":{"name":"(anonymous_16)","decl":{"start":{"line":54,"column":68},"end":{"line":54,"column":69}},"loc":{"start":{"line":54,"column":80},"end":{"line":54,"column":108}},"line":54},"17":{"name":"(anonymous_17)","decl":{"start":{"line":55,"column":69},"end":{"line":55,"column":70}},"loc":{"start":{"line":55,"column":81},"end":{"line":55,"column":110}},"line":55},"18":{"name":"(anonymous_18)","decl":{"start":{"line":56,"column":68},"end":{"line":56,"column":69}},"loc":{"start":{"line":56,"column":80},"end":{"line":56,"column":108}},"line":56},"19":{"name":"(anonymous_19)","decl":{"start":{"line":57,"column":77},"end":{"line":57,"column":78}},"loc":{"start":{"line":57,"column":89},"end":{"line":57,"column":126}},"line":57},"20":{"name":"(anonymous_20)","decl":{"start":{"line":58,"column":81},"end":{"line":58,"column":82}},"loc":{"start":{"line":58,"column":93},"end":{"line":58,"column":134}},"line":58},"21":{"name":"(anonymous_21)","decl":{"start":{"line":59,"column":74},"end":{"line":59,"column":75}},"loc":{"start":{"line":59,"column":86},"end":{"line":59,"column":120}},"line":59},"22":{"name":"(anonymous_22)","decl":{"start":{"line":85,"column":66},"end":{"line":85,"column":67}},"loc":{"start":{"line":85,"column":78},"end":{"line":85,"column":104}},"line":85},"23":{"name":"(anonymous_23)","decl":{"start":{"line":86,"column":68},"end":{"line":86,"column":69}},"loc":{"start":{"line":86,"column":80},"end":{"line":86,"column":108}},"line":86},"24":{"name":"(anonymous_24)","decl":{"start":{"line":87,"column":71},"end":{"line":87,"column":72}},"loc":{"start":{"line":87,"column":83},"end":{"line":87,"column":114}},"line":87},"25":{"name":"(anonymous_25)","decl":{"start":{"line":88,"column":66},"end":{"line":88,"column":67}},"loc":{"start":{"line":88,"column":78},"end":{"line":88,"column":104}},"line":88}},"branchMap":{"0":{"loc":{"start":{"line":17,"column":22},"end":{"line":23,"column":3}},"type":"binary-expr","locations":[{"start":{"line":17,"column":23},"end":{"line":17,"column":27}},{"start":{"line":17,"column":31},"end":{"line":17,"column":51}},{"start":{"line":17,"column":57},"end":{"line":23,"column":2}}],"line":17},"1":{"loc":{"start":{"line":17,"column":57},"end":{"line":23,"column":2}},"type":"cond-expr","locations":[{"start":{"line":17,"column":74},"end":{"line":20,"column":1}},{"start":{"line":20,"column":6},"end":{"line":23,"column":1}}],"line":17},"2":{"loc":{"start":{"line":18,"column":4},"end":{"line":18,"column":33}},"type":"if","locations":[{"start":{"line":18,"column":4},"end":{"line":18,"column":33}},{"start":{"line":18,"column":4},"end":{"line":18,"column":33}}],"line":18},"3":{"loc":{"start":{"line":21,"column":4},"end":{"line":21,"column":33}},"type":"if","locations":[{"start":{"line":21,"column":4},"end":{"line":21,"column":33}},{"start":{"line":21,"column":4},"end":{"line":21,"column":33}}],"line":21},"4":{"loc":{"start":{"line":24,"column":19},"end":{"line":26,"column":1}},"type":"binary-expr","locations":[{"start":{"line":24,"column":20},"end":{"line":24,"column":24}},{"start":{"line":24,"column":28},"end":{"line":24,"column":45}},{"start":{"line":24,"column":50},"end":{"line":26,"column":1}}],"line":24},"5":{"loc":{"start":{"line":25,"column":21},"end":{"line":25,"column":103}},"type":"if","locations":[{"start":{"line":25,"column":21},"end":{"line":25,"column":103}},{"start":{"line":25,"column":21},"end":{"line":25,"column":103}}],"line":25},"6":{"loc":{"start":{"line":25,"column":25},"end":{"line":25,"column":70}},"type":"binary-expr","locations":[{"start":{"line":25,"column":25},"end":{"line":25,"column":40}},{"start":{"line":25,"column":44},"end":{"line":25,"column":70}}],"line":25}},"s":{"0":1,"1":50,"2":50,"3":50,"4":271,"5":0,"6":0,"7":0,"8":1,"9":35,"10":50,"11":50,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":0,"28":1,"29":0,"30":1,"31":0,"32":1,"33":0,"34":1,"35":0,"36":1,"37":0,"38":1,"39":0,"40":1,"41":0,"42":1,"43":0,"44":1,"45":0,"46":1,"47":0,"48":1,"49":0,"50":1,"51":0,"52":1,"53":0,"54":1,"55":0,"56":1,"57":0,"58":1,"59":0,"60":1,"61":0,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"71":1,"72":1,"73":1,"74":1,"75":1,"76":1,"77":1,"78":1,"79":1,"80":0,"81":1,"82":0,"83":1,"84":0,"85":1,"86":5,"87":1,"88":1,"89":1,"90":1,"91":1,"92":1,"93":1,"94":1,"95":1,"96":1,"97":1,"98":1,"99":1},"f":{"0":50,"1":271,"2":0,"3":35,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":5},"b":{"0":[1,1,1],"1":[1,0],"2":[50,0],"3":[0,0],"4":[1,1,1],"5":[50,0],"6":[50,50]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/index.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/index.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;;;;AAEH,QAAQ;AACR,gDAA8B;AAC9B,sDAAoC;AACpC,uDAAqC;AACrC,wDAAsC;AACtC,gEAA8C;AAC9C,4DAA0C;AAC1C,oDAAkC;AAClC,iDAA+B;AAC/B,kDAAgC;AAChC,6DAA2C;AAC3C,yDAAuC;AACvC,gDAmBgC;AAlB9B,+FAAA,MAAM,OAAA;AACN,yGAAA,gBAAgB,OAAA;AAChB,mGAAA,UAAU,OAAA;AACV,6GAAA,oBAAoB,OAAA;AACpB,iGAAA,QAAQ,OAAA;AACR,mGAAA,UAAU,OAAA;AACV,wGAAA,KAAK,OAAmB;AACxB,0GAAA,iBAAiB,OAAA;AACjB,sGAAA,aAAa,OAAA;AACb,2GAAA,MAAM,OAAsB;AAC5B,qGAAA,YAAY,OAAA;AACZ,iGAAA,QAAQ,OAAA;AACR,iGAAA,QAAQ,OAAA;AACR,kGAAA,SAAS,OAAA;AACT,iGAAA,QAAQ,OAAA;AACR,0GAAA,iBAAiB,OAAA;AACjB,8GAAA,qBAAqB,OAAA;AACrB,uGAAA,cAAc,OAAA;AAGhB,UAAU;AAEV,sBAAsB;AACtB,4DAA0C;AAC1C,uDAAqC;AAErC,eAAe;AACf,0DAAwC;AAExC,4BAA4B;AAC5B,sEAAoD;AAEpD,oCAAoC;AACpC,8DAA4C;AAC5C,+DAA6C;AAE7C,gBAAgB;AAEhB,UAAU;AACV,+CAA6B;AAC7B,mDAAiC;AACjC,4DAA0C;AAC1C,uDAAqC;AACrC,iDAA+B;AAC/B,gDAA8B;AAC9B,uEAAqD;AACrD,iEAA+C;AAC/C,sDAAoC;AAEpC,aAAa;AACb,gDAA8B;AAC9B,sCAAqE;AAA5D,+FAAA,MAAM,OAAA;AAAE,iGAAA,QAAQ,OAAA;AAAE,oGAAA,WAAW,OAAA;AAAE,+FAAA,MAAM,OAAA;AAC9C,mDAAiC;AAEjC,SAAS;AACT,kDAAkD;AACzC,wBAAM;AAEf,UAAU;AACV,mDAAiC;AAEjC,kBAAkB;AAElB,oDAAkC;AAClC,4DAA0C;AAE1C,qBAAqB;AACrB,kEAAgD;AAChD,0EAAwD;AAExD,iBAAiB;AACjB,iEAA+C;AAC/C,yDAAuC;AAEvC,2BAA2B;AAC3B,yCAA0C;AAE1C,MAAM,WAAW,GAAU,iBAAS,CAAC,QAAQ,CAAC;AACrC,kCAAW","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// types\nexport * from './trace/types';\nexport * from './trace/model/types';\nexport * from './trace/config/types';\nexport * from './trace/sampler/types';\nexport * from './trace/instrumentation/types';\nexport * from './trace/propagation/types';\nexport * from './exporters/types';\nexport * from './common/types';\nexport * from './metrics/types';\nexport * from './metrics/cumulative/types';\nexport * from './metrics/gauges/types';\nexport {\n  Metric,\n  MetricDescriptor,\n  TimeSeries,\n  MetricDescriptorType,\n  LabelKey,\n  LabelValue,\n  Point as TimeSeriesPoint,\n  DistributionValue,\n  BucketOptions,\n  Bucket as DistributionBucket,\n  SummaryValue,\n  Explicit,\n  Exemplar,\n  Timestamp,\n  Snapshot,\n  ValueAtPercentile,\n  MetricProducerManager,\n  MetricProducer,\n} from './metrics/export/types';\n\n// classes\n\n// domain models impls\nexport * from './trace/model/tracer-base';\nexport * from './trace/model/tracer';\n\n// sampler impl\nexport * from './trace/sampler/sampler';\n\n// base instrumetation class\nexport * from './trace/instrumentation/base-plugin';\n\n// console exporter and buffer impls\nexport * from './exporters/exporter-buffer';\nexport * from './exporters/console-exporter';\n\n// STATS CLASSES\n\n// classes\nexport * from './stats/view';\nexport * from './stats/recorder';\nexport * from './stats/bucket-boundaries';\nexport * from './stats/metric-utils';\nexport * from './tags/tag-map';\nexport * from './tags/tagger';\nexport * from './tags/propagation/binary-serializer';\nexport * from './tags/propagation/text-format';\nexport * from './resource/resource';\n\n// interfaces\nexport * from './stats/types';\nexport { TagKey, TagValue, TagMetadata, TagTtl } from './tags/types';\nexport * from './resource/types';\n\n// logger\nimport * as logger from './common/console-logger';\nexport { logger };\n\n// version\nexport * from './common/version';\n\n// METRICS CLASSES\n\nexport * from './metrics/metrics';\nexport * from './metrics/metric-registry';\n\n// Cumulative CLASSES\nexport * from './metrics/cumulative/cumulative';\nexport * from './metrics/cumulative/derived-cumulative';\n\n// GAUGES CLASSES\nexport * from './metrics/gauges/derived-gauge';\nexport * from './metrics/gauges/gauge';\n\n// Stats singleton instance\nimport { BaseStats } from './stats/stats';\nimport { Stats } from './stats/types';\nconst globalStats: Stats = BaseStats.instance;\nexport { globalStats };\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"57225569b49c3bc853e1dc7d3c53ef0769fb2f6a","contentHash":"a98701e534a9e84321387ecedbe51a9298d6513b7a1fff548a4e0741c2f44819"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/types.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/types.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}}},"fnMap":{},"branchMap":{},"s":{"0":1},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/types.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/types.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as exportersTypes from '../exporters/types';\nimport * as configTypes from './config/types';\nimport * as modelTypes from './model/types';\n\n/** Main interface for tracing. */\nexport interface Tracing {\n  /** Object responsible for managing a trace. */\n  readonly tracer: modelTypes.TracerBase;\n\n  /** Service to send collected traces to. */\n  readonly exporter: exportersTypes.Exporter;\n\n  /** Gets active status  */\n  active: boolean;\n\n  /**\n   * Starts tracing.\n   * @param userConfig A configuration object to start tracing.\n   * @returns The started Tracing instance.\n   */\n  start(userConfig?: configTypes.Config): Tracing;\n\n  /** Stops tracing. */\n  stop(): void;\n\n  /**\n   * Registers an exporter to send the collected traces to.\n   * @param exporter The exporter to send the traces to.\n   * @returns The tracing object.\n   */\n  registerExporter(exporter: exportersTypes.Exporter): Tracing;\n\n  /**\n   * Unregisters an exporter.\n   * @param exporter The exporter to stop sending traces to.\n   */\n  unregisterExporter(exporter: exportersTypes.Exporter): Tracing;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"dbe421874106c07e2a602846239f257d352eabf1","contentHash":"3254ab6eb314e4e29e7d09744fb445712c1d801eaa6c646a44335f70966abe45"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/types.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/types.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":96}},"2":{"start":{"line":21,"column":0},"end":{"line":153,"column":74}},"3":{"start":{"line":25,"column":4},"end":{"line":25,"column":50}},"4":{"start":{"line":29,"column":4},"end":{"line":29,"column":64}},"5":{"start":{"line":37,"column":4},"end":{"line":37,"column":60}},"6":{"start":{"line":44,"column":4},"end":{"line":44,"column":78}},"7":{"start":{"line":52,"column":4},"end":{"line":52,"column":80}},"8":{"start":{"line":56,"column":4},"end":{"line":56,"column":64}},"9":{"start":{"line":61,"column":4},"end":{"line":61,"column":74}},"10":{"start":{"line":70,"column":4},"end":{"line":70,"column":80}},"11":{"start":{"line":75,"column":4},"end":{"line":75,"column":82}},"12":{"start":{"line":98,"column":4},"end":{"line":98,"column":84}},"13":{"start":{"line":106,"column":4},"end":{"line":106,"column":61}},"14":{"start":{"line":124,"column":4},"end":{"line":124,"column":71}},"15":{"start":{"line":128,"column":4},"end":{"line":128,"column":73}},"16":{"start":{"line":134,"column":4},"end":{"line":134,"column":63}},"17":{"start":{"line":143,"column":4},"end":{"line":143,"column":69}},"18":{"start":{"line":147,"column":4},"end":{"line":147,"column":65}},"19":{"start":{"line":152,"column":4},"end":{"line":152,"column":77}},"20":{"start":{"line":156,"column":0},"end":{"line":163,"column":83}},"21":{"start":{"line":158,"column":4},"end":{"line":158,"column":74}},"22":{"start":{"line":160,"column":4},"end":{"line":160,"column":60}},"23":{"start":{"line":162,"column":4},"end":{"line":162,"column":68}},"24":{"start":{"line":169,"column":0},"end":{"line":182,"column":59}},"25":{"start":{"line":171,"column":4},"end":{"line":171,"column":58}},"26":{"start":{"line":176,"column":4},"end":{"line":176,"column":48}},"27":{"start":{"line":181,"column":4},"end":{"line":181,"column":48}},"28":{"start":{"line":188,"column":0},"end":{"line":198,"column":59}},"29":{"start":{"line":193,"column":4},"end":{"line":193,"column":58}},"30":{"start":{"line":195,"column":4},"end":{"line":195,"column":70}},"31":{"start":{"line":197,"column":4},"end":{"line":197,"column":72}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":21,"column":1},"end":{"line":21,"column":2}},"loc":{"start":{"line":21,"column":26},"end":{"line":153,"column":1}},"line":21},"1":{"name":"(anonymous_1)","decl":{"start":{"line":156,"column":1},"end":{"line":156,"column":2}},"loc":{"start":{"line":156,"column":29},"end":{"line":163,"column":1}},"line":156},"2":{"name":"(anonymous_2)","decl":{"start":{"line":169,"column":1},"end":{"line":169,"column":2}},"loc":{"start":{"line":169,"column":21},"end":{"line":182,"column":1}},"line":169},"3":{"name":"(anonymous_3)","decl":{"start":{"line":188,"column":1},"end":{"line":188,"column":2}},"loc":{"start":{"line":188,"column":21},"end":{"line":198,"column":1}},"line":188}},"branchMap":{"0":{"loc":{"start":{"line":153,"column":19},"end":{"line":153,"column":72}},"type":"binary-expr","locations":[{"start":{"line":153,"column":19},"end":{"line":153,"column":40}},{"start":{"line":153,"column":45},"end":{"line":153,"column":71}}],"line":153},"1":{"loc":{"start":{"line":163,"column":22},"end":{"line":163,"column":81}},"type":"binary-expr","locations":[{"start":{"line":163,"column":22},"end":{"line":163,"column":46}},{"start":{"line":163,"column":51},"end":{"line":163,"column":80}}],"line":163},"2":{"loc":{"start":{"line":182,"column":14},"end":{"line":182,"column":57}},"type":"binary-expr","locations":[{"start":{"line":182,"column":14},"end":{"line":182,"column":30}},{"start":{"line":182,"column":35},"end":{"line":182,"column":56}}],"line":182},"3":{"loc":{"start":{"line":198,"column":14},"end":{"line":198,"column":57}},"type":"binary-expr","locations":[{"start":{"line":198,"column":14},"end":{"line":198,"column":30}},{"start":{"line":198,"column":35},"end":{"line":198,"column":56}}],"line":198}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1},"f":{"0":1,"1":1,"2":1,"3":1},"b":{"0":[1,1],"1":[1,1],"2":[1,1],"3":[1,1]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/types.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/types.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AA2BH,gDAAgD;AAChD,IAAY,aAoIX;AApID,WAAY,aAAa;IACvB;;OAEG;IACH,6CAAM,CAAA;IACN;;OAEG;IACH,2DAAa,CAAA;IACb;;;;;;OAMG;IACH,uDAAW,CAAA;IACX;;;;;OAKG;IACH,yEAAoB,CAAA;IACpB;;;;;;OAMG;IACH,2EAAqB,CAAA;IACrB;;OAEG;IACH,2DAAa,CAAA;IACb;;;OAGG;IACH,qEAAkB,CAAA;IAClB;;;;;;;OAOG;IACH,2EAAqB,CAAA;IACrB;;;OAGG;IACH,6EAAsB,CAAA;IACtB;;;;;;;;;;;;;;;;;;;;;OAqBG;IACH,+EAAuB,CAAA;IACvB;;;;;;OAMG;IACH,wDAAY,CAAA;IACZ;;;;;;;;;;;;;;;;OAgBG;IACH,kEAAiB,CAAA;IACjB;;OAEG;IACH,oEAAkB,CAAA;IAClB;;;;OAIG;IACH,0DAAa,CAAA;IACb;;;;;;;OAOG;IACH,gEAAgB,CAAA;IAChB;;OAEG;IACH,4DAAc,CAAA;IACd;;;OAGG;IACH,wEAAoB,CAAA;AACtB,CAAC,EApIW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAoIxB;AA6FD,iEAAiE;AACjE,IAAY,gBAOX;AAPD,WAAY,gBAAgB;IAC1B,0BAA0B;IAC1B,qEAAe,CAAA;IACf,gCAAgC;IAChC,uDAAQ,CAAA;IACR,oCAAoC;IACpC,+DAAY,CAAA;AACd,CAAC,EAPW,gBAAgB,GAAhB,wBAAgB,KAAhB,wBAAgB,QAO3B;AAED;;;GAGG;AACH,IAAY,QAaX;AAbD,WAAY,QAAQ;IAClB,kBAAkB;IAClB,qDAAe,CAAA;IACf;;;OAGG;IACH,2CAAU,CAAA;IACV;;;OAGG;IACH,2CAAU,CAAA;AACZ,CAAC,EAbW,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAanB;AAED;;;GAGG;AACH,IAAY,QAUX;AAVD,WAAY,QAAQ;IAClB;;;OAGG;IACH,qDAAe,CAAA;IACf,sDAAsD;IACtD,iEAAqB,CAAA;IACrB,uDAAuD;IACvD,mEAAsB,CAAA;AACxB,CAAC,EAVW,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAUnB","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as loggerTypes from '../../common/types';\nimport * as configTypes from '../config/types';\nimport { Propagation } from '../propagation/types';\nimport * as samplerTypes from '../sampler/types';\n\n/** Default type for functions */\n// tslint:disable:no-any\nexport type Func<T> = (...args: any[]) => T;\n\n/** Maps a label to a string, number or boolean. */\nexport interface Attributes {\n  [attributeKey: string]: string | number | boolean;\n}\n\n/**\n * The status of a Span by providing a standard CanonicalCode in conjunction\n * with an optional descriptive message.\n */\nexport interface Status {\n  /** The canonical code of this message. */\n  code: CanonicalCode;\n  /** A developer-facing error message. */\n  message?: string;\n}\n\n/** An enumeration of canonical status codes. */\nexport enum CanonicalCode {\n  /**\n   * Not an error; returned on success\n   */\n  OK = 0,\n  /**\n   * The operation was cancelled (typically by the caller).\n   */\n  CANCELLED = 1,\n  /**\n   * Unknown error.  An example of where this error may be returned is\n   * if a status value received from another address space belongs to\n   * an error-space that is not known in this address space.  Also\n   * errors raised by APIs that do not return enough error information\n   * may be converted to this error.\n   */\n  UNKNOWN = 2,\n  /**\n   * Client specified an invalid argument.  Note that this differs\n   * from FAILED_PRECONDITION.  INVALID_ARGUMENT indicates arguments\n   * that are problematic regardless of the state of the system\n   * (e.g., a malformed file name).\n   */\n  INVALID_ARGUMENT = 3,\n  /**\n   * Deadline expired before operation could complete.  For operations\n   * that change the state of the system, this error may be returned\n   * even if the operation has completed successfully.  For example, a\n   * successful response from a server could have been delayed long\n   * enough for the deadline to expire.\n   */\n  DEADLINE_EXCEEDED = 4,\n  /**\n   * Some requested entity (e.g., file or directory) was not found.\n   */\n  NOT_FOUND = 5,\n  /**\n   * Some entity that we attempted to create (e.g., file or directory)\n   * already exists.\n   */\n  ALREADY_EXISTS = 6,\n  /**\n   * The caller does not have permission to execute the specified\n   * operation.  PERMISSION_DENIED must not be used for rejections\n   * caused by exhausting some resource (use RESOURCE_EXHAUSTED\n   * instead for those errors).  PERMISSION_DENIED must not be\n   * used if the caller can not be identified (use UNAUTHENTICATED\n   * instead for those errors).\n   */\n  PERMISSION_DENIED = 7,\n  /**\n   * Some resource has been exhausted, perhaps a per-user quota, or\n   * perhaps the entire file system is out of space.\n   */\n  RESOURCE_EXHAUSTED = 8,\n  /**\n   * Operation was rejected because the system is not in a state\n   * required for the operation's execution.  For example, directory\n   * to be deleted may be non-empty, an rmdir operation is applied to\n   * a non-directory, etc.\n   *\n   * A litmus test that may help a service implementor in deciding\n   * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:\n   *\n   *  - Use UNAVAILABLE if the client can retry just the failing call.\n   *  - Use ABORTED if the client should retry at a higher-level\n   *    (e.g., restarting a read-modify-write sequence).\n   *  - Use FAILED_PRECONDITION if the client should not retry until\n   *    the system state has been explicitly fixed.  E.g., if an \"rmdir\"\n   *    fails because the directory is non-empty, FAILED_PRECONDITION\n   *    should be returned since the client should not retry unless\n   *    they have first fixed up the directory by deleting files from it.\n   *  - Use FAILED_PRECONDITION if the client performs conditional\n   *    REST Get/Update/Delete on a resource and the resource on the\n   *    server does not match the condition. E.g., conflicting\n   *    read-modify-write on the same resource.\n   */\n  FAILED_PRECONDITION = 9,\n  /**\n   * The operation was aborted, typically due to a concurrency issue\n   * like sequencer check failures, transaction aborts, etc.\n   *\n   * See litmus test above for deciding between FAILED_PRECONDITION,\n   * ABORTED, and UNAVAILABLE.\n   */\n  ABORTED = 10,\n  /**\n   * Operation was attempted past the valid range.  E.g., seeking or\n   * reading past end of file.\n   *\n   * Unlike INVALID_ARGUMENT, this error indicates a problem that may\n   * be fixed if the system state changes. For example, a 32-bit file\n   * system will generate INVALID_ARGUMENT if asked to read at an\n   * offset that is not in the range [0,2^32-1], but it will generate\n   * OUT_OF_RANGE if asked to read from an offset past the current\n   * file size.\n   *\n   * There is a fair bit of overlap between FAILED_PRECONDITION and\n   * OUT_OF_RANGE.  We recommend using OUT_OF_RANGE (the more specific\n   * error) when it applies so that callers who are iterating through\n   * a space can easily look for an OUT_OF_RANGE error to detect when\n   * they are done.\n   */\n  OUT_OF_RANGE = 11,\n  /**\n   * Operation is not implemented or not supported/enabled in this service.\n   */\n  UNIMPLEMENTED = 12,\n  /**\n   * Internal errors.  Means some invariants expected by underlying\n   * system has been broken.  If you see one of these errors,\n   * something is very broken.\n   */\n  INTERNAL = 13,\n  /**\n   * The service is currently unavailable.  This is a most likely a\n   * transient condition and may be corrected by retrying with\n   * a backoff.\n   *\n   * See litmus test above for deciding between FAILED_PRECONDITION,\n   * ABORTED, and UNAVAILABLE.\n   */\n  UNAVAILABLE = 14,\n  /**\n   * Unrecoverable data loss or corruption.\n   */\n  DATA_LOSS = 15,\n  /**\n   * The request does not have valid authentication credentials for the\n   * operation.\n   */\n  UNAUTHENTICATED = 16,\n}\n\n/** A text annotation with a set of attributes. */\nexport interface Annotation {\n  /** A user-supplied message describing the event. */\n  description: string;\n  /** A timestamp for the event event. */\n  timestamp: number;\n  /** A set of attributes on the annotation. */\n  attributes: Attributes;\n}\n\n/** An event describing a message sent/received between Spans. */\nexport interface MessageEvent {\n  /** A timestamp for the event. */\n  timestamp: number;\n  /** Indicates whether the message was sent or received. */\n  type: MessageEventType;\n  /**\n   * An identifier for the MessageEvent's message that can be used to match\n   * SENT and RECEIVED MessageEvents. Message event ids should start with 1 for\n   * both sent and received messages and increment by 1 for each message\n   * sent/received.\n   */\n  id: number;\n  /** The number of uncompressed bytes sent or received. */\n  uncompressedSize?: number;\n  /**\n   * The number of compressed bytes sent or received. If zero or\n   * undefined, assumed to be the same size as uncompressed.\n   */\n  compressedSize?: number;\n}\n\n/**\n * A pointer from the current span to another span in the same trace or in a\n * different trace.\n */\nexport interface Link {\n  /** The trace ID for a trace within a project. */\n  traceId: string;\n  /** The span ID for a span within a trace. */\n  spanId: string;\n  /** The relationship of the current span relative to the linked. */\n  type: LinkType;\n  /** A set of attributes on the link. */\n  attributes: Attributes;\n}\n\n/** Defines the trace options */\nexport interface TraceOptions {\n  /** Root span name */\n  name: string;\n  /** Trace context */\n  spanContext?: SpanContext;\n  /** Span kind */\n  kind?: SpanKind;\n  /** Determines the sampling rate. Ranges from 0.0 to 1.0 */\n  samplingRate?: number;\n}\n\n/** Defines the span options */\nexport interface SpanOptions {\n  /** Span name */\n  name: string;\n  /** Span kind */\n  kind?: SpanKind;\n  /** The new span's parent */\n  childOf?: Span;\n}\n\nexport type TraceState = string;\n\n/** Defines the span context */\nexport interface SpanContext {\n  /** Trace ID */\n  traceId: string;\n  /** Span ID */\n  spanId: string;\n  /** Options */\n  options?: number;\n  /** TraceState */\n  traceState?: TraceState;\n}\n\n/** Defines an end span event listener */\nexport interface SpanEventListener {\n  /** Happens when a span is started */\n  onStartSpan(span: Span): void;\n  /** Happens when a span is ended */\n  onEndSpan(span: Span): void;\n}\n\n/** An event describing a message sent/received between Spans. */\nexport enum MessageEventType {\n  /** Unknown event type. */\n  UNSPECIFIED = 0,\n  /** Indicates a sent message. */\n  SENT = 1,\n  /** Indicates a received message. */\n  RECEIVED = 2,\n}\n\n/**\n * Type of span. Can be used to specify additional relationships between spans\n * in addition to a parent/child relationship.\n */\nexport enum SpanKind {\n  /** Unspecified */\n  UNSPECIFIED = 0,\n  /**\n   * Indicates that the span covers server-side handling of an RPC or other\n   * remote network request.\n   */\n  SERVER = 1,\n  /**\n   * Indicates that the span covers the client-side wrapper around an RPC or\n   * other remote request.\n   */\n  CLIENT = 2,\n}\n\n/**\n * Type of link. The relationship of the current span relative to the linked\n * span.\n */\nexport enum LinkType {\n  /**\n   * The relationship of the two spans is unknown, or known but other\n   * than parent-child.\n   */\n  UNSPECIFIED = 0,\n  /** The linked span is a child of the current span. */\n  CHILD_LINKED_SPAN = 1,\n  /** The linked span is a parent of the current span. */\n  PARENT_LINKED_SPAN = 2,\n}\n\n/** Interface for Span */\nexport interface Span {\n  /** The Span ID of this span */\n  readonly id: string;\n\n  /** A tracer object, exposong the tracer makes it possible to create child\n   * spans from the span instance like. span.tracer.startChildSpan()\n   */\n  tracer: TracerBase;\n\n  /** If the parent span is in another process. */\n  remoteParent: boolean;\n\n  /** The span ID of this span's parent. If it's a root span, must be empty */\n  parentSpanId: string;\n\n  /** The resource name of the span */\n  name: string;\n\n  /** Kind of span. */\n  kind: SpanKind;\n\n  /** An object to log information to */\n  logger: loggerTypes.Logger;\n\n  /** A final status for this span */\n  status: Status;\n\n  /** A set of attributes, each in the format [KEY]:[VALUE] */\n  attributes: Attributes;\n\n  /** A text annotation with a set of attributes. */\n  annotations: Annotation[];\n\n  /** An event describing a message sent/received between Spans. */\n  messageEvents: MessageEvent[];\n\n  /** Pointers from the current span to another span */\n  links: Link[];\n\n  /** Recursively gets the descendant spans. */\n  allDescendants(): Span[];\n\n  /** The list of immediate child spans. */\n  spans: Span[];\n\n  /** The number of direct children */\n  numberOfChildren: number;\n\n  /** Trace id asscoiated with span. */\n  readonly traceId: string;\n\n  /** Trace state associated with span */\n  readonly traceState?: TraceState;\n\n  /** Indicates if span was started. */\n  readonly started: boolean;\n\n  /** Indicates if span was ended. */\n  readonly ended: boolean;\n\n  /**\n   * Gives a timestap that indicates the span's start time in RFC3339 UTC\n   * \"Zulu\" format.\n   */\n  readonly startTime: Date;\n\n  /**\n   * Gives a timestap that indicates the span's end time in RFC3339 UTC\n   * \"Zulu\" format.\n   */\n  readonly endTime: Date;\n\n  /**\n   * Gives a timestap that indicates the span's duration in RFC3339 UTC\n   * \"Zulu\" format.\n   */\n  readonly duration: number;\n\n  /** Gives the TraceContext of the span. */\n  readonly spanContext: SpanContext;\n\n  /** Trace Parameters */\n  activeTraceParams: configTypes.TraceParams;\n\n  /** The number of dropped attributes. */\n  droppedAttributesCount: number;\n\n  /** The number of dropped links. */\n  droppedLinksCount: number;\n\n  /** The number of dropped annotations. */\n  droppedAnnotationsCount: number;\n\n  /** The number of dropped message events. */\n  droppedMessageEventsCount: number;\n\n  /**\n   * Adds an atribute to the span.\n   * @param key Describes the value added.\n   * @param value The result of an operation.\n   */\n  addAttribute(key: string, value: string | number | boolean | object): void;\n\n  /**\n   * Adds an annotation to the span.\n   * @param description Describes the event.\n   * @param attributes A set of attributes on the annotation.\n   * @param timestamp A timestamp for this event.\n   */\n  addAnnotation(\n    description: string,\n    attributes?: Attributes,\n    timestamp?: number\n  ): void;\n\n  /**\n   * Adds a link to the span.\n   * @param traceId The trace ID for a trace within a project.\n   * @param spanId The span ID for a span within a trace.\n   * @param type The relationship of the current span relative to the linked.\n   * @param attributes A set of attributes on the link.\n   */\n  addLink(\n    traceId: string,\n    spanId: string,\n    type: LinkType,\n    attributes?: Attributes\n  ): void;\n\n  /**\n   * Adds a message event to the span.\n   * @param type The type of message event.\n   * @param id An identifier for the message event.\n   * @param timestamp A timestamp for this event.\n   * @param uncompressedSize The number of uncompressed bytes sent or received.\n   * @param compressedSize The number of compressed bytes sent or received. If\n   *     zero or undefined, assumed to be the same size as uncompressed.\n   */\n  addMessageEvent(\n    type: MessageEventType,\n    id: number,\n    timestamp?: number,\n    uncompressedSize?: number,\n    compressedSize?: number\n  ): void;\n\n  /**\n   * Sets a status to the span.\n   * @param code The canonical status code.\n   * @param message optional A developer-facing error message.\n   */\n  setStatus(code: CanonicalCode, message?: string): void;\n\n  /** Starts a span. */\n  start(): void;\n\n  /** Ends a span and all of its children, recursively. */\n  end(): void;\n\n  /** Forces to end a span. */\n  truncate(): void;\n\n  /** Starts a new Span instance as a child of this instance */\n  startChildSpan(options?: SpanOptions): Span;\n\n  /** Returns whether a span is root or not. */\n  isRootSpan(): boolean;\n}\n\n/** Interface for TracerBase */\nexport interface TracerBase extends SpanEventListener {\n  /** A sampler that will decide if the span will be sampled or not */\n  sampler: samplerTypes.Sampler;\n\n  /** A configuration for starting the tracer */\n  logger: loggerTypes.Logger;\n\n  /** A configuration object for trace parameters */\n  activeTraceParams: configTypes.TraceParams;\n\n  /** A propagation instance */\n  readonly propagation: Propagation;\n\n  /** Get the eventListeners from tracer instance */\n  readonly eventListeners: SpanEventListener[];\n\n  /** Get the active status from tracer instance */\n  readonly active: boolean;\n\n  /**\n   * Start a tracer instance\n   * @param config Configuration for tracer instace\n   * @returns A tracer instance started\n   */\n  start(config: configTypes.TracerConfig): this;\n\n  /** Stop the tracer instance */\n  stop(): this;\n\n  /**\n   * Start a new RootSpan to currentRootSpan\n   * @param options Options for tracer instance\n   * @param fn Callback function\n   * @returns The callback return\n   */\n  startRootSpan<T>(options: TraceOptions, fn: (root: Span) => T): T;\n\n  /**\n   * Register a OnEndSpanEventListener on the tracer instance\n   * @param listener An OnEndSpanEventListener instance\n   */\n  registerSpanEventListener(listener: SpanEventListener): void;\n\n  /**\n   * Unregisters an end span event listener.\n   * @param listener The listener to unregister.\n   */\n  unregisterSpanEventListener(listener: SpanEventListener): void;\n\n  /**\n   * Start a new Span instance to the currentRootSpan\n   * @param [options] A TraceOptions object to start a root span.\n   * @returns The new Span instance started\n   */\n  startChildSpan(options?: SpanOptions): Span;\n\n  /** Sets the current root span. */\n  setCurrentRootSpan(root: Span): void;\n}\n\n/** Interface for Tracer */\nexport interface Tracer extends TracerBase {\n  /** Get and set the currentRootSpan to tracer instance */\n  currentRootSpan: Span;\n\n  /** Clear the currentRootSpan from tracer instance */\n  clearCurrentTrace(): void;\n\n  /**\n   * Binds the trace context to the given function.\n   * This is necessary in order to create child spans correctly in functions\n   * that are called asynchronously (for example, in a network response\n   * handler).\n   * @param fn A function to which to bind the trace context.\n   */\n  wrap<T>(fn: Func<T>): Func<T>;\n\n  /**\n   * Binds the trace context to the given event emitter.\n   * This is necessary in order to create child spans correctly in event\n   * handlers.\n   * @param emitter An event emitter whose handlers should have\n   *     the trace context binded to them.\n   */\n  wrapEmitter(emitter: NodeJS.EventEmitter): void;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"917eb3a7401890fa18b615b30b5b66fe3d394281","contentHash":"0f653200541f3f4a1d1e62c82f851fa28f09d5d23606db3f1ecb9ed7fcab690b"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/config/types.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/config/types.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}}},"fnMap":{},"branchMap":{},"s":{"0":1},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/config/types.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/config/types.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '../../common/types';\nimport { Exporter } from '../../exporters/types';\nimport { Stats } from '../../stats/types';\nimport { PluginNames } from '../instrumentation/types';\nimport { Attributes } from '../model/types';\nimport { Propagation } from '../propagation/types';\n\n/** Interface configuration for a buffer. */\nexport interface BufferConfig {\n  /** Maximum size of a buffer. */\n  bufferSize?: number;\n  /** Max time for a buffer can wait before being sent */\n  bufferTimeout?: number;\n  /** A logger object  */\n  logger?: Logger;\n}\n\n/** Defines tracer configuration parameters */\nexport interface TracerConfig {\n  /** A set of default attributes each in the format [KEY]:[VALUE] */\n  defaultAttributes?: Attributes;\n  /** Determines the sampling rate. Ranges from 0.0 to 1.0 */\n  samplingRate?: number;\n  /** A logger object  */\n  logger?: Logger;\n  /** A propagation instance */\n  propagation?: Propagation;\n  /** Trace Parameters */\n  traceParams?: TraceParams;\n}\n\n/** Available configuration options. */\nexport interface TracingConfig {\n  /** level of logger - 0:disable, 1: error, 2: warn, 3: info, 4: debug  */\n  logLevel?: number;\n\n  /**\n   * The maximum number of characters reported on a label value.\n   */\n  maximumLabelValueSize?: number;\n\n  /**\n   * A list of trace instrumentations plugins to load.\n   * Each key is the name of the module to trace, and its\n   * value is the name of the package which has the plugin\n   * implementation.\n   * Ex.:\n   * plugins: {\n   *  'http': '@opencensus/opencensus-instrumentation-http',\n   *  'mongodb-core': '@opencensus/opencensus-instrumentation-mongodb-core',\n   *   ...\n   * }\n   * Any user-provided value will be added to the default list.\n   * It will override any default plugin for the same key.\n   */\n  plugins?: PluginNames;\n  /** An exporter object */\n  exporter?: Exporter;\n  /** An instance of a logger  */\n  logger?: Logger;\n  /** An instance of a stats  */\n  stats?: Stats;\n}\n\n/** Global configuration of trace service */\nexport interface TraceParams {\n  /**\n   * numberOfAnnontationEventsPerSpan is number of annotation events per\n   * span\n   */\n  numberOfAnnontationEventsPerSpan?: number;\n  /** numberOfMessageEventsPerSpan is number of message events per span */\n  numberOfMessageEventsPerSpan?: number;\n  /** numberOfAttributesPerSpan is number of attributes per span */\n  numberOfAttributesPerSpan?: number;\n  /** numberOfLinksPerSpan is number of links per span */\n  numberOfLinksPerSpan?: number;\n}\n\nexport type Config = TracingConfig & TracerConfig & BufferConfig;\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b76dadb318631546694a2ff58f5adab1df1d5549","contentHash":"884bfd8e077b376ff930738c90ddb154fb7f7c3961ea5b1083ca931f8dce236d"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/sampler/types.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/sampler/types.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}}},"fnMap":{},"branchMap":{},"s":{"0":1},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/sampler/types.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/sampler/types.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** This interface represent a sampler . */\nexport interface Sampler {\n  /**\n   * A string that uniquely describes the sampling behavior of this instance.\n   */\n  readonly description: string;\n\n  /**\n   * Checks if trace belong the sample.\n   * @param traceId Used to check the probability.\n   * @returns a boolean. True if the traceId is in probability\n   *     False if the traceId is not in probability.\n   */\n  shouldSample(traceId: string): boolean;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"55af8365ddcbffd8e553640fc67ceeb43b581c70","contentHash":"e3bd54e30245767ec55f18e3089ccdcd6f65a85c5a1f2179fb4a6065c0f9334f"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/instrumentation/types.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/instrumentation/types.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}}},"fnMap":{},"branchMap":{},"s":{"0":1},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/instrumentation/types.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/instrumentation/types.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Stats } from '../../stats/types';\nimport { Span, TracerBase } from '../model/types';\n\n/** Interface Plugin to apply patch. */\nexport interface Plugin {\n  /**\n   * Method that enables the instrumentation patch.\n   *\n   * @param moduleExports nodejs module exports from the module to patch\n   * @param tracer a tracer instance\n   * @param version version of the current instaled module to patch\n   * @param options plugin options\n   * @param basedir an optional module absolute path\n   * @param stats an optional stats instance\n   */\n  enable<T>(\n    moduleExports: T,\n    tracer: TracerBase,\n    version: string,\n    options: PluginConfig,\n    basedir?: string,\n    stats?: Stats\n  ): T;\n  /** Method to disable the instrumentation  */\n  disable(): void;\n}\n\n/**\n * Function that can be provided to plugin in order to add custom\n * attributes to spans\n */\nexport interface CustomAttributeFunction {\n  // tslint:disable-next-line:no-any\n  (span: Span, ...rest: any[]): void;\n}\n\nexport interface PluginConfig {\n  // tslint:disable-next-line:no-any\n  [key: string]: any;\n  applyCustomAttributesOnSpan?: CustomAttributeFunction;\n}\n\nexport interface NamedPluginConfig {\n  module: string;\n  config: PluginConfig;\n}\n\n/**\n * Type PluginNames: each key should be the name of the module to trace,\n * and its value should be the name of the package  which has the\n * plugin implementation.\n */\nexport interface PluginNames {\n  [pluginName: string]: string | NamedPluginConfig;\n}\n\nexport interface PluginInternalFilesVersion {\n  [pluginName: string]: string;\n}\n\n/**\n * Each key should be the name of the module to trace, and its value\n * a mapping of a property name to a internal plugin file name.\n */\nexport interface PluginInternalFiles {\n  [versions: string]: PluginInternalFilesVersion;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"c1709a72a1a5cc93dcbcfd14562ad56a02933d3c","contentHash":"75236e82209faf26be5c86f82465ae304fb879fbd81dc7c0a2fa8f6fe96699ba"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/propagation/types.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/propagation/types.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}}},"fnMap":{},"branchMap":{},"s":{"0":1},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/propagation/types.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/propagation/types.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SpanContext } from '../model/types';\n\n/**\n * An transport and environment neutral API for getting request headers.\n */\nexport interface HeaderGetter {\n  getHeader(name: string): string | string[] | undefined;\n}\n\n/**\n * A transport and environment neutral API for setting headers.\n */\nexport interface HeaderSetter {\n  setHeader(name: string, value: string): void;\n}\n\n/**\n *  Propagation interface\n */\nexport interface Propagation {\n  extract(getter: HeaderGetter): SpanContext | null;\n  inject(setter: HeaderSetter, spanContext: SpanContext): void;\n  generate(): SpanContext;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"2f0930ec8e000394b7cffe2117b139edb863ffd7","contentHash":"9ecf7d9037963d6b1ecba379ded247d4c450c6a40ed9f9bf849759234b9a02f0"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/exporters/types.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/exporters/types.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}}},"fnMap":{},"branchMap":{},"s":{"0":1},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/exporters/types.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/exporters/types.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Measurement, View } from '../stats/types';\nimport { TagKey, TagValue } from '../tags/types';\nimport * as configTypes from '../trace/config/types';\nimport * as modelTypes from '../trace/model/types';\n\n/** Defines a trace exporter interface. */\nexport interface Exporter extends modelTypes.SpanEventListener {\n  /**\n   * Sends a list of spans to the service.\n   * @param spans A list of spans to publish.\n   */\n  publish(spans: modelTypes.Span[]): Promise<number | string | void>;\n}\n\n/**\n * An interface that describes the possible events that will be emitted from a\n * Stats instance. Stats exporters should implement this interface.\n */\nexport interface StatsEventListener {\n  /**\n   * Is called whenever a new view is registered\n   * @deprecated since version 0.0.9 - use {@link start} instead\n   * @param view The registered view\n   */\n  onRegisterView(view: View): void;\n\n  /**\n   * Is called whenever a new measurement is recorded.\n   * @deprecated since version 0.0.9 - use {@link start} instead\n   * @param views The views related to the measurement\n   * @param measurement The recorded measurement\n   * @param tags The tags to which the value is applied\n   */\n  onRecord(\n    views: View[],\n    measurement: Measurement,\n    tags: Map<TagKey, TagValue>\n  ): void;\n\n  /**\n   * Starts the exporter that polls Metric from Metrics library and send\n   * batched data to backend.\n   */\n  start(): void;\n\n  /** Stops the exporter. */\n  stop(): void;\n}\n\nexport type ExporterConfig = configTypes.BufferConfig;\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"43ca8d24dd90667c7f92e625c001de4886ddb958","contentHash":"6b4a4085e8f93df1c223d464f4d3a20b89bcf45b6dd2fb8da19a42c6e0384377"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/types.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/types.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}}},"fnMap":{},"branchMap":{},"s":{"0":1},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/types.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/types.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// tslint:disable:no-any\nexport type LogFunction = (message: any, ...args: any[]) => void;\n\n/** Defines a logger interface. */\nexport interface Logger {\n  /** Logger verbosity level. If omitted, `debug` level is assumed. */\n  level?: string;\n\n  error: LogFunction;\n  warn: LogFunction;\n  info: LogFunction;\n  debug: LogFunction;\n}\n\n/** Defines a logger options interface. */\nexport interface LoggerOptions {\n  level?: string;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"bc63296ef56bfd30f5e09d20f5c25b4f5f46355f","contentHash":"5316a11f9509e098990e739b69e593c295b9ddf4ccdfc9fad1866c57b7ff4f60"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/types.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/types.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}}},"fnMap":{},"branchMap":{},"s":{"0":1},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/types.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/types.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MeasureUnit } from './../stats/types';\nimport { LabelKey, LabelValue, Metric } from './export/types';\n\n/** Provides a {@link Metric} with one or more {@link TimeSeries} */\nexport interface Meter {\n  /**\n   * Provides a Metric with one or more TimeSeries.\n   *\n   * @returns The Metric, or null if TimeSeries is not present in Metric.\n   */\n  getMetric(): Metric | null;\n}\n\n/** Options for every metric added to the MetricRegistry. */\nexport interface MetricOptions {\n  /** The description of the metric. */\n  readonly description?: string;\n  /** The unit of the metric. */\n  readonly unit?: MeasureUnit;\n  /** The list of the label keys. */\n  readonly labelKeys?: LabelKey[];\n  /** The map of constant labels for the Metric. */\n  readonly constantLabels?: Map<LabelKey, LabelValue>;\n\n  // TODO(mayurkale): Add resource information.\n  // https://github.com/census-instrumentation/opencensus-specs/pull/248\n}\n\n/** Interface for objects with \"length()\" method. */\nexport interface LengthMethodInterface {\n  length(): number;\n}\n\n/** Interface for objects with \"length\" attribute (e.g. Array). */\nexport interface LengthAttributeInterface {\n  length: number;\n}\n\n/** Interface for objects with \"size\" method. */\nexport interface SizeMethodInterface {\n  size(): number;\n}\n\n/** Interface for objects with \"size\" attribute (e.g. Map, Set). */\nexport interface SizeAttributeInterface {\n  size: number;\n}\n\n/** Interface for objects with \"getValue\" method. */\nexport interface ToValueInterface {\n  getValue(): number;\n}\n\nexport interface AccessorFunction {\n  (): number;\n}\n\nexport type AccessorInterface =\n  | LengthAttributeInterface\n  | LengthMethodInterface\n  | SizeAttributeInterface\n  | SizeMethodInterface\n  | ToValueInterface\n  | AccessorFunction;\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"ed4fdc6b4900d445df651ed6148072e83d31d80b","contentHash":"dc19774f04c54ce738e8439fc52fa9ae4bf1a00ea24e771614edc678d3a28378"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/cumulative/types.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/cumulative/types.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}}},"fnMap":{},"branchMap":{},"s":{"0":1},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/cumulative/types.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/cumulative/types.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TimeSeries, Timestamp } from '../export/types';\n\nexport interface CumulativePoint {\n  /** Reset cumulative metric. */\n  reset(): void;\n\n  /**\n   * Increment the cumulative metric.\n   * @param val The new value.\n   */\n  inc(val?: number): void;\n\n  /**\n   * Returns the TimeSeries with one or more Point.\n   *\n   * @param now The time at which the cumulative is recorded.\n   * @returns The TimeSeries.\n   */\n  getTimeSeries(now: Timestamp): TimeSeries;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"61bf0e54d844214cde58ad149b48c4e8a471915c","contentHash":"aaab6c3032d027d9ff7460b71776ddd6b57cc1afb5f0ca4aedc88f78616a8dab"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/gauges/types.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/gauges/types.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}}},"fnMap":{},"branchMap":{},"s":{"0":1},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/gauges/types.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/gauges/types.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TimeSeries, Timestamp } from '../export/types';\n\nexport interface Point {\n  /**\n   * Adds the given value to the current value. The values can be negative.\n   *\n   * @param amt The value to add.\n   */\n  add(amt: number): void;\n\n  /**\n   * Sets the given value.\n   *\n   * @param val The new value.\n   */\n  set(val: number): void;\n\n  /**\n   * Returns the TimeSeries with one or more Point.\n   *\n   * @param timestamp The time at which the gauge is recorded.\n   * @returns The TimeSeries.\n   */\n  getTimeSeries(timestamp: Timestamp): TimeSeries;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"826554e51bdf90d417b49adb55b235857890ac94","contentHash":"395cc5b7f5e1c2b0ae80cfbce973db180b96c327d3042732f12cc49c54bf0fc8"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/export/types.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/export/types.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":38}},"2":{"start":{"line":31,"column":0},"end":{"line":69,"column":95}},"3":{"start":{"line":33,"column":4},"end":{"line":33,"column":82}},"4":{"start":{"line":35,"column":4},"end":{"line":35,"column":82}},"5":{"start":{"line":37,"column":4},"end":{"line":37,"column":84}},"6":{"start":{"line":44,"column":4},"end":{"line":44,"column":96}},"7":{"start":{"line":49,"column":4},"end":{"line":49,"column":92}},"8":{"start":{"line":55,"column":4},"end":{"line":55,"column":94}},"9":{"start":{"line":60,"column":4},"end":{"line":60,"column":106}},"10":{"start":{"line":68,"column":4},"end":{"line":68,"column":74}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":31,"column":1},"end":{"line":31,"column":2}},"loc":{"start":{"line":31,"column":33},"end":{"line":69,"column":1}},"line":31}},"branchMap":{"0":{"loc":{"start":{"line":69,"column":26},"end":{"line":69,"column":93}},"type":"binary-expr","locations":[{"start":{"line":69,"column":26},"end":{"line":69,"column":54}},{"start":{"line":69,"column":59},"end":{"line":69,"column":92}}],"line":69}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1},"f":{"0":1},"b":{"0":[1,1]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/export/types.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/export/types.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAsCH;;;;;;;;;;GAUG;AACH,IAAY,oBAsCX;AAtCD,WAAY,oBAAoB;IAC9B,qCAAqC;IACrC,6EAAW,CAAA;IACX,wDAAwD;IACxD,6EAAW,CAAA;IACX,+DAA+D;IAC/D,+EAAY,CAAA;IACZ;;;;;OAKG;IACH,2FAAkB,CAAA;IAClB;;;OAGG;IACH,uFAAgB,CAAA;IAChB;;;;OAIG;IACH,yFAAiB,CAAA;IACjB;;;OAGG;IACH,qGAAuB,CAAA;IACvB;;;;;;OAMG;IACH,qEAAO,CAAA;AACT,CAAC,EAtCW,oBAAoB,GAApB,4BAAoB,KAApB,4BAAoB,QAsC/B","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Properties of a Metric which has one or more timeseries */\nexport interface Metric {\n  /**\n   * The descriptor of the Metric. This is an optimization for network wire\n   * size, from data-model perspective a Metric contains always\n   * a MetricDescriptor.\n   * In case of a streaming RPC can be sent only\n   * the first time a metric is reported to save network traffic.\n   */\n  readonly descriptor: MetricDescriptor;\n  /**\n   * One or more timeseries for a single metric, where each timeseries has\n   * one or more points.\n   */\n  readonly timeseries: TimeSeries[];\n}\n\n/** Properties of a Metric type and its schema */\nexport interface MetricDescriptor {\n  /**  The metric type, including its DNS name prefix. It must be unique. */\n  readonly name: string;\n  /**\n   * A detailed description of the metric, which can be used in documentation.\n   */\n  readonly description: string;\n  /**\n   * The unit in which the metric value is reported. Follows the format\n   * described by http://unitsofmeasure.org/ucum.html.\n   */\n  readonly unit: string;\n  /** MetricDescriptor type */\n  readonly type: MetricDescriptorType;\n  /** The label keys associated with the metric descriptor. */\n  readonly labelKeys: LabelKey[];\n}\n\n/**\n * The kind of metric. It describes how the data is reported.\n *\n * A gauge is an instantaneous measurement of a value.\n *\n * A cumulative measurement is a value accumulated over a time interval. In\n * a time series, cumulative measurements should have the same start time,\n * increasing values and increasing end times, until an event resets the\n * cumulative value to zero and sets a new start time for the following\n * points.\n */\nexport enum MetricDescriptorType {\n  /** Do not use this default value. */\n  UNSPECIFIED,\n  /** Integer gauge. The value can go both up and down. */\n  GAUGE_INT64,\n  /** Floating point gauge. The value can go both up and down. */\n  GAUGE_DOUBLE,\n  /**\n   * Distribution gauge measurement. The count and sum can go both up and\n   * down. Recorded values are always >= 0.\n   * Used in scenarios like a snapshot of time the current items in a queue\n   * have spent there.\n   */\n  GAUGE_DISTRIBUTION,\n  /**\n   * Integer cumulative measurement. The value cannot decrease, if resets\n   * then the start_time should also be reset.\n   */\n  CUMULATIVE_INT64,\n  /**\n   * Floating point cumulative measurement. The value cannot decrease, if\n   * resets then the start_time should also be reset. Recorded values are\n   * always >= 0.\n   */\n  CUMULATIVE_DOUBLE,\n  /**\n   * Distribution cumulative measurement. The count and sum cannot decrease,\n   * if resets then the start_time should also be reset.\n   */\n  CUMULATIVE_DISTRIBUTION,\n  /**\n   * Some frameworks implemented Histograms as a summary of observations\n   * (usually things like request durations and response sizes). While it\n   * also provides a total count of observations and a sum of all observed\n   * values, it calculates configurable percentiles over a sliding time\n   * window. This is not recommended, since it cannot be aggregated.\n   */\n  SUMMARY,\n}\n\n/** Properties of a LabelKey associated with a MetricDescriptor. */\nexport interface LabelKey {\n  /** The key for the label. */\n  readonly key: string;\n  /** A human-readable description of what this label key represents. */\n  readonly description: string;\n}\n\n/**\n * A collection of data points that describes the time-varying values\n * of a metric.\n */\nexport interface TimeSeries {\n  /**\n   * Must be present for cumulative metrics. The time when the cumulative value\n   * was reset to zero. Exclusive. The cumulative value is over the time\n   * interval (start_timestamp, timestamp]. If not specified, the backend can\n   * use the previous recorded value.\n   */\n  readonly startTimestamp?: Timestamp;\n  /**\n   * The set of label values that uniquely identify this timeseries. Applies to\n   * all points. The order of label values must match that of label keys in the\n   * metric descriptor.\n   */\n  readonly labelValues: LabelValue[];\n  /**\n   * The data points of this timeseries. Point.value type MUST match the\n   * MetricDescriptor.type.\n   */\n  readonly points: Point[];\n}\n\n/** The LabelValue type. null value indicates an unset. */\nexport interface LabelValue {\n  /** The value for the label. */\n  readonly value: string | null;\n}\n\n/** A timestamped measurement. */\nexport interface Point {\n  /**\n   * The moment when this point was recorded. Inclusive.\n   * If not specified, the timestamp will be decided by the backend.\n   */\n  readonly timestamp: Timestamp;\n  /**\n   * The actual point value.\n   * 64-bit integer or 64-bit double-precision floating-point number\n   * or distribution value\n   * or summary value. This is not recommended, since it cannot be aggregated.\n   */\n  readonly value: number | DistributionValue | SummaryValue;\n}\n\n/**\n * Distribution contains summary statistics for a population of values. It\n * optionally contains a histogram representing the distribution of those\n * values across a set of buckets.\n */\nexport interface DistributionValue {\n  /**\n   * The number of values in the population. Must be non-negative. This value\n   * must equal the sum of the values in bucket_counts if a histogram is\n   * provided.\n   */\n  readonly count: number;\n  /**\n   * The sum of the values in the population. If count is zero then this field\n   * must be zero.\n   */\n  readonly sum: number;\n  /**\n   * The sum of squared deviations from the mean of the values in the\n   * population. For values x_i this is:\n   *\n   *     Sum[i=1..n]((x_i - mean)^2)\n   *\n   * Knuth, \"The Art of Computer Programming\", Vol. 2, page 323, 3rd edition\n   * describes Welford's method for accumulating this sum in one pass.\n   *\n   * If count is zero then this field must be zero.\n   */\n  readonly sumOfSquaredDeviation: number;\n  /**\n   * Don't change bucket boundaries within a TimeSeries if your backend doesn't\n   * support this. To save network bandwidth this field can be sent only the\n   * first time a metric is sent when using a streaming RPC.\n   */\n  readonly bucketOptions: BucketOptions;\n  /** DistributionValue buckets */\n  readonly buckets: Bucket[];\n}\n\n/**\n * Properties of a BucketOptions.\n * A Distribution may optionally contain a histogram of the values in the\n * population. The bucket boundaries for that histogram are described by\n * BucketOptions.\n *\n * If bucket_options has no type, then there is no histogram associated with\n * the Distribution.\n */\nexport interface BucketOptions {\n  /** Bucket with explicit bounds. */\n  readonly explicit: Explicit;\n}\n\n/**\n * Properties of an Explicit.\n * Specifies a set of buckets with arbitrary upper-bounds.\n * This defines size(bounds) + 1 (= N) buckets. The boundaries for bucket\n * index i are:\n *\n * [0, bucket_bounds[i]) for i == 0\n * [bucket_bounds[i-1], bucket_bounds[i]) for 0 < i < N-1\n * [bucket_bounds[i-1], +infinity) for i == N-1\n */\nexport interface Explicit {\n  /** The values must be strictly increasing and > 0. */\n  readonly bounds: number[];\n  // TODO: If OpenMetrics decides to support (a, b] intervals we should add\n  // support for these by defining a boolean value here which decides what\n  // type of intervals to use.\n}\n\n/** Properties of a Bucket. */\nexport interface Bucket {\n  /**\n   * The number of values in each bucket of the histogram, as described in\n   * bucket_bounds.\n   */\n  readonly count: number;\n  /**\n   * If the distribution does not have a histogram, then omit this field.\n   */\n  readonly exemplar?: Exemplar;\n}\n\n/**\n * Exemplars are example points that may be used to annotate aggregated\n * Distribution values. They are metadata that gives information about a\n * particular value added to a Distribution bucket.\n */\nexport interface Exemplar {\n  /**\n   * Value of the exemplar point. It determines which bucket the exemplar\n   * belongs to.\n   */\n  readonly value: number;\n  /** The observation (sampling) time of the above value. */\n  readonly timestamp: Timestamp;\n  /** Contextual information about the example value. */\n  readonly attachments: { [key: string]: string };\n}\n\n/**\n * The start_timestamp only applies to the count and sum in the SummaryValue.\n */\nexport interface SummaryValue {\n  /**\n   * The total number of recorded values since start_time. Optional since\n   * some systems don't expose this.\n   */\n  readonly count: number;\n  /**\n   * The total sum of recorded values since start_time. Optional since some\n   * systems don't expose this. If count is zero then this field must be zero.\n   * This field must be unset if the sum is not available.\n   */\n  readonly sum: number;\n  /** Values calculated over an arbitrary time window. */\n  // TODO: Change it to required when Exemplar functionality will be added.\n  readonly snapshot?: Snapshot;\n}\n\n/**\n * The values in this message can be reset at arbitrary unknown times, with\n * the requirement that all of them are reset at the same time.\n */\nexport interface Snapshot {\n  /**\n   * The number of values in the snapshot. Optional since some systems don't\n   * expose this.\n   */\n  readonly count: number;\n  /**\n   * The sum of values in the snapshot. Optional since some systems don't\n   * expose this. If count is zero then this field must be zero or not set\n   * (if not supported).\n   */\n  readonly sum: number;\n  /**\n   * A list of values at different percentiles of the distribution calculated\n   * from the current snapshot. The percentiles must be strictly increasing.\n   */\n  readonly percentileValues: ValueAtPercentile[];\n}\n\n/**\n * Represents the value at a given percentile of a distribution.\n */\nexport interface ValueAtPercentile {\n  /** The percentile of a distribution. Must be in the interval (0.0, 100.0]. */\n  readonly percentile: number;\n  /** The value at the given percentile of a distribution. */\n  readonly value: number;\n}\n\nexport interface Timestamp {\n  /**\n   * Represents seconds of UTC time since Unix epoch\n   * 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n   * 9999-12-31T23:59:59Z inclusive.\n   */\n  seconds: number | null;\n  /**\n   * Non-negative fractions of a second at nanosecond resolution. Negative\n   * second values with fractions must still have non-negative nanos values\n   * that count forward in time. Must be from 0 to 999,999,999\n   * inclusive.\n   */\n  nanos: number | null;\n}\n\n/**\n * Keeps a set of MetricProducer that is used by exporters to determine the\n * metrics that need to be exported.\n */\nexport interface MetricProducerManager {\n  /** Adds the MetricProducer to the manager */\n  add(metricProducer: MetricProducer): void;\n  /** Removes the MetricProducer to the manager */\n  remove(metricProducer: MetricProducer): void;\n  /** Clears all MetricProducers */\n  removeAll(): void;\n  /** Gets all registered MetricProducers that should be exported */\n  getAllMetricProducer(): Set<MetricProducer>;\n}\n\n/**\n * A MetricProducer producer that can be registered for exporting using\n * MetricProducerManager.\n */\nexport interface MetricProducer {\n  /** Gets a collection of produced Metric`s to be exported */\n  getMetrics(): Metric[];\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"2bc8fb15da01750e70711385d27c8d23cdbec4d8","contentHash":"9256281f7ee726484fb410ae270c63d6b6645cd6fc8609a331cbf5c4a6691d37"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/tracer-base.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/tracer-base.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":32}},"2":{"start":{"line":19,"column":13},"end":{"line":19,"column":28}},"3":{"start":{"line":20,"column":15},"end":{"line":20,"column":53}},"4":{"start":{"line":21,"column":27},"end":{"line":21,"column":69}},"5":{"start":{"line":22,"column":18},"end":{"line":22,"column":47}},"6":{"start":{"line":23,"column":30},"end":{"line":23,"column":72}},"7":{"start":{"line":24,"column":25},"end":{"line":24,"column":62}},"8":{"start":{"line":25,"column":20},"end":{"line":25,"column":42}},"9":{"start":{"line":26,"column":14},"end":{"line":26,"column":32}},"10":{"start":{"line":34,"column":8},"end":{"line":34,"column":38}},"11":{"start":{"line":36,"column":8},"end":{"line":36,"column":30}},"12":{"start":{"line":38,"column":8},"end":{"line":38,"column":38}},"13":{"start":{"line":39,"column":8},"end":{"line":39,"column":33}},"14":{"start":{"line":40,"column":8},"end":{"line":40,"column":36}},"15":{"start":{"line":44,"column":8},"end":{"line":46,"column":9}},"16":{"start":{"line":45,"column":12},"end":{"line":45,"column":43}},"17":{"start":{"line":47,"column":8},"end":{"line":47,"column":50}},"18":{"start":{"line":58,"column":8},"end":{"line":58,"column":32}},"19":{"start":{"line":59,"column":8},"end":{"line":59,"column":29}},"20":{"start":{"line":60,"column":8},"end":{"line":60,"column":60}},"21":{"start":{"line":61,"column":8},"end":{"line":61,"column":115}},"22":{"start":{"line":62,"column":8},"end":{"line":67,"column":9}},"23":{"start":{"line":63,"column":12},"end":{"line":63,"column":154}},"24":{"start":{"line":64,"column":12},"end":{"line":64,"column":141}},"25":{"start":{"line":65,"column":12},"end":{"line":65,"column":147}},"26":{"start":{"line":66,"column":12},"end":{"line":66,"column":131}},"27":{"start":{"line":68,"column":8},"end":{"line":68,"column":20}},"28":{"start":{"line":72,"column":8},"end":{"line":72,"column":33}},"29":{"start":{"line":73,"column":8},"end":{"line":73,"column":20}},"30":{"start":{"line":77,"column":8},"end":{"line":77,"column":40}},"31":{"start":{"line":81,"column":8},"end":{"line":81,"column":32}},"32":{"start":{"line":89,"column":28},"end":{"line":95,"column":9}},"33":{"start":{"line":96,"column":29},"end":{"line":96,"column":47}},"34":{"start":{"line":97,"column":24},"end":{"line":97,"column":43}},"35":{"start":{"line":98,"column":21},"end":{"line":98,"column":43}},"36":{"start":{"line":99,"column":21},"end":{"line":99,"column":63}},"37":{"start":{"line":100,"column":27},"end":{"line":100,"column":49}},"38":{"start":{"line":102,"column":8},"end":{"line":123,"column":9}},"39":{"start":{"line":103,"column":35},"end":{"line":103,"column":78}},"40":{"start":{"line":105,"column":12},"end":{"line":116,"column":13}},"41":{"start":{"line":106,"column":33},"end":{"line":106,"column":110}},"42":{"start":{"line":108,"column":42},"end":{"line":108,"column":86}},"43":{"start":{"line":109,"column":16},"end":{"line":113,"column":17}},"44":{"start":{"line":110,"column":20},"end":{"line":112,"column":23}},"45":{"start":{"line":111,"column":24},"end":{"line":111,"column":75}},"46":{"start":{"line":114,"column":16},"end":{"line":114,"column":33}},"47":{"start":{"line":115,"column":16},"end":{"line":115,"column":36}},"48":{"start":{"line":118,"column":12},"end":{"line":118,"column":83}},"49":{"start":{"line":122,"column":12},"end":{"line":122,"column":86}},"50":{"start":{"line":124,"column":33},"end":{"line":124,"column":128}},"51":{"start":{"line":125,"column":8},"end":{"line":125,"column":36}},"52":{"start":{"line":129,"column":8},"end":{"line":130,"column":19}},"53":{"start":{"line":130,"column":12},"end":{"line":130,"column":19}},"54":{"start":{"line":131,"column":8},"end":{"line":131,"column":35}},"55":{"start":{"line":135,"column":8},"end":{"line":136,"column":19}},"56":{"start":{"line":136,"column":12},"end":{"line":136,"column":19}},"57":{"start":{"line":137,"column":8},"end":{"line":137,"column":33}},"58":{"start":{"line":144,"column":8},"end":{"line":144,"column":48}},"59":{"start":{"line":151,"column":22},"end":{"line":151,"column":67}},"60":{"start":{"line":152,"column":8},"end":{"line":154,"column":9}},"61":{"start":{"line":153,"column":12},"end":{"line":153,"column":49}},"62":{"start":{"line":157,"column":8},"end":{"line":157,"column":77}},"63":{"start":{"line":158,"column":8},"end":{"line":160,"column":9}},"64":{"start":{"line":159,"column":12},"end":{"line":159,"column":39}},"65":{"start":{"line":163,"column":8},"end":{"line":163,"column":75}},"66":{"start":{"line":164,"column":8},"end":{"line":166,"column":9}},"67":{"start":{"line":165,"column":12},"end":{"line":165,"column":37}},"68":{"start":{"line":173,"column":8},"end":{"line":176,"column":9}},"69":{"start":{"line":174,"column":12},"end":{"line":174,"column":91}},"70":{"start":{"line":175,"column":12},"end":{"line":175,"column":59}},"71":{"start":{"line":177,"column":21},"end":{"line":177,"column":60}},"72":{"start":{"line":179,"column":34},"end":{"line":179,"column":78}},"73":{"start":{"line":180,"column":8},"end":{"line":184,"column":9}},"74":{"start":{"line":181,"column":12},"end":{"line":183,"column":15}},"75":{"start":{"line":182,"column":16},"end":{"line":182,"column":63}},"76":{"start":{"line":185,"column":8},"end":{"line":185,"column":20}},"77":{"start":{"line":190,"column":8},"end":{"line":194,"column":9}},"78":{"start":{"line":193,"column":12},"end":{"line":193,"column":99}},"79":{"start":{"line":195,"column":31},"end":{"line":195,"column":35}},"80":{"start":{"line":197,"column":8},"end":{"line":202,"column":9}},"81":{"start":{"line":200,"column":12},"end":{"line":200,"column":85}},"82":{"start":{"line":201,"column":12},"end":{"line":201,"column":38}},"83":{"start":{"line":204,"column":8},"end":{"line":204,"column":50}},"84":{"start":{"line":207,"column":0},"end":{"line":207,"column":40}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":32,"column":4},"end":{"line":32,"column":5}},"loc":{"start":{"line":32,"column":18},"end":{"line":41,"column":5}},"line":32},"1":{"name":"(anonymous_1)","decl":{"start":{"line":43,"column":4},"end":{"line":43,"column":5}},"loc":{"start":{"line":43,"column":22},"end":{"line":48,"column":5}},"line":43},"2":{"name":"(anonymous_2)","decl":{"start":{"line":50,"column":4},"end":{"line":50,"column":5}},"loc":{"start":{"line":50,"column":29},"end":{"line":52,"column":5}},"line":50},"3":{"name":"(anonymous_3)","decl":{"start":{"line":57,"column":4},"end":{"line":57,"column":5}},"loc":{"start":{"line":57,"column":18},"end":{"line":69,"column":5}},"line":57},"4":{"name":"(anonymous_4)","decl":{"start":{"line":71,"column":4},"end":{"line":71,"column":5}},"loc":{"start":{"line":71,"column":11},"end":{"line":74,"column":5}},"line":71},"5":{"name":"(anonymous_5)","decl":{"start":{"line":76,"column":4},"end":{"line":76,"column":5}},"loc":{"start":{"line":76,"column":25},"end":{"line":78,"column":5}},"line":76},"6":{"name":"(anonymous_6)","decl":{"start":{"line":80,"column":4},"end":{"line":80,"column":5}},"loc":{"start":{"line":80,"column":17},"end":{"line":82,"column":5}},"line":80},"7":{"name":"(anonymous_7)","decl":{"start":{"line":88,"column":4},"end":{"line":88,"column":5}},"loc":{"start":{"line":88,"column":31},"end":{"line":126,"column":5}},"line":88},"8":{"name":"(anonymous_8)","decl":{"start":{"line":110,"column":59},"end":{"line":110,"column":60}},"loc":{"start":{"line":110,"column":66},"end":{"line":112,"column":21}},"line":110},"9":{"name":"(anonymous_9)","decl":{"start":{"line":128,"column":4},"end":{"line":128,"column":5}},"loc":{"start":{"line":128,"column":22},"end":{"line":132,"column":5}},"line":128},"10":{"name":"(anonymous_10)","decl":{"start":{"line":134,"column":4},"end":{"line":134,"column":5}},"loc":{"start":{"line":134,"column":20},"end":{"line":138,"column":5}},"line":134},"11":{"name":"(anonymous_11)","decl":{"start":{"line":143,"column":4},"end":{"line":143,"column":5}},"loc":{"start":{"line":143,"column":40},"end":{"line":145,"column":5}},"line":143},"12":{"name":"(anonymous_12)","decl":{"start":{"line":150,"column":4},"end":{"line":150,"column":5}},"loc":{"start":{"line":150,"column":42},"end":{"line":155,"column":5}},"line":150},"13":{"name":"(anonymous_13)","decl":{"start":{"line":156,"column":4},"end":{"line":156,"column":5}},"loc":{"start":{"line":156,"column":26},"end":{"line":161,"column":5}},"line":156},"14":{"name":"(anonymous_14)","decl":{"start":{"line":162,"column":4},"end":{"line":162,"column":5}},"loc":{"start":{"line":162,"column":24},"end":{"line":167,"column":5}},"line":162},"15":{"name":"(anonymous_15)","decl":{"start":{"line":172,"column":4},"end":{"line":172,"column":5}},"loc":{"start":{"line":172,"column":28},"end":{"line":186,"column":5}},"line":172},"16":{"name":"(anonymous_16)","decl":{"start":{"line":181,"column":51},"end":{"line":181,"column":52}},"loc":{"start":{"line":181,"column":58},"end":{"line":183,"column":13}},"line":181},"17":{"name":"(anonymous_17)","decl":{"start":{"line":188,"column":4},"end":{"line":188,"column":5}},"loc":{"start":{"line":188,"column":43},"end":{"line":205,"column":5}},"line":188}},"branchMap":{"0":{"loc":{"start":{"line":44,"column":8},"end":{"line":46,"column":9}},"type":"if","locations":[{"start":{"line":44,"column":8},"end":{"line":46,"column":9}},{"start":{"line":44,"column":8},"end":{"line":46,"column":9}}],"line":44},"1":{"loc":{"start":{"line":44,"column":12},"end":{"line":44,"column":50}},"type":"binary-expr","locations":[{"start":{"line":44,"column":12},"end":{"line":44,"column":23}},{"start":{"line":44,"column":27},"end":{"line":44,"column":50}}],"line":44},"2":{"loc":{"start":{"line":60,"column":22},"end":{"line":60,"column":59}},"type":"binary-expr","locations":[{"start":{"line":60,"column":22},"end":{"line":60,"column":40}},{"start":{"line":60,"column":44},"end":{"line":60,"column":59}}],"line":60},"3":{"loc":{"start":{"line":61,"column":59},"end":{"line":61,"column":113}},"type":"binary-expr","locations":[{"start":{"line":61,"column":59},"end":{"line":61,"column":78}},{"start":{"line":61,"column":82},"end":{"line":61,"column":113}}],"line":61},"4":{"loc":{"start":{"line":62,"column":8},"end":{"line":67,"column":9}},"type":"if","locations":[{"start":{"line":62,"column":8},"end":{"line":67,"column":9}},{"start":{"line":62,"column":8},"end":{"line":67,"column":9}}],"line":62},"5":{"loc":{"start":{"line":89,"column":28},"end":{"line":95,"column":9}},"type":"binary-expr","locations":[{"start":{"line":89,"column":28},"end":{"line":89,"column":47}},{"start":{"line":89,"column":51},"end":{"line":95,"column":9}}],"line":89},"6":{"loc":{"start":{"line":98,"column":21},"end":{"line":98,"column":43}},"type":"binary-expr","locations":[{"start":{"line":98,"column":21},"end":{"line":98,"column":33}},{"start":{"line":98,"column":37},"end":{"line":98,"column":43}}],"line":98},"7":{"loc":{"start":{"line":99,"column":21},"end":{"line":99,"column":63}},"type":"binary-expr","locations":[{"start":{"line":99,"column":21},"end":{"line":99,"column":33}},{"start":{"line":99,"column":37},"end":{"line":99,"column":63}}],"line":99},"8":{"loc":{"start":{"line":102,"column":8},"end":{"line":123,"column":9}},"type":"if","locations":[{"start":{"line":102,"column":8},"end":{"line":123,"column":9}},{"start":{"line":102,"column":8},"end":{"line":123,"column":9}}],"line":102},"9":{"loc":{"start":{"line":105,"column":12},"end":{"line":116,"column":13}},"type":"if","locations":[{"start":{"line":105,"column":12},"end":{"line":116,"column":13}},{"start":{"line":105,"column":12},"end":{"line":116,"column":13}}],"line":105},"10":{"loc":{"start":{"line":108,"column":42},"end":{"line":108,"column":86}},"type":"binary-expr","locations":[{"start":{"line":108,"column":42},"end":{"line":108,"column":53}},{"start":{"line":108,"column":57},"end":{"line":108,"column":86}}],"line":108},"11":{"loc":{"start":{"line":109,"column":16},"end":{"line":113,"column":17}},"type":"if","locations":[{"start":{"line":109,"column":16},"end":{"line":113,"column":17}},{"start":{"line":109,"column":16},"end":{"line":113,"column":17}}],"line":109},"12":{"loc":{"start":{"line":129,"column":8},"end":{"line":130,"column":19}},"type":"if","locations":[{"start":{"line":129,"column":8},"end":{"line":130,"column":19}},{"start":{"line":129,"column":8},"end":{"line":130,"column":19}}],"line":129},"13":{"loc":{"start":{"line":135,"column":8},"end":{"line":136,"column":19}},"type":"if","locations":[{"start":{"line":135,"column":8},"end":{"line":136,"column":19}},{"start":{"line":135,"column":8},"end":{"line":136,"column":19}}],"line":135},"14":{"loc":{"start":{"line":152,"column":8},"end":{"line":154,"column":9}},"type":"if","locations":[{"start":{"line":152,"column":8},"end":{"line":154,"column":9}},{"start":{"line":152,"column":8},"end":{"line":154,"column":9}}],"line":152},"15":{"loc":{"start":{"line":173,"column":8},"end":{"line":176,"column":9}},"type":"if","locations":[{"start":{"line":173,"column":8},"end":{"line":176,"column":9}},{"start":{"line":173,"column":8},"end":{"line":176,"column":9}}],"line":173},"16":{"loc":{"start":{"line":173,"column":12},"end":{"line":173,"column":40}},"type":"binary-expr","locations":[{"start":{"line":173,"column":12},"end":{"line":173,"column":20}},{"start":{"line":173,"column":24},"end":{"line":173,"column":40}}],"line":173},"17":{"loc":{"start":{"line":179,"column":34},"end":{"line":179,"column":78}},"type":"binary-expr","locations":[{"start":{"line":179,"column":34},"end":{"line":179,"column":45}},{"start":{"line":179,"column":49},"end":{"line":179,"column":78}}],"line":179},"18":{"loc":{"start":{"line":180,"column":8},"end":{"line":184,"column":9}},"type":"if","locations":[{"start":{"line":180,"column":8},"end":{"line":184,"column":9}},{"start":{"line":180,"column":8},"end":{"line":184,"column":9}}],"line":180},"19":{"loc":{"start":{"line":190,"column":8},"end":{"line":194,"column":9}},"type":"if","locations":[{"start":{"line":190,"column":8},"end":{"line":194,"column":9}},{"start":{"line":190,"column":8},"end":{"line":194,"column":9}}],"line":190},"20":{"loc":{"start":{"line":190,"column":12},"end":{"line":192,"column":41}},"type":"binary-expr","locations":[{"start":{"line":190,"column":12},"end":{"line":190,"column":19}},{"start":{"line":191,"column":12},"end":{"line":191,"column":46}},{"start":{"line":192,"column":12},"end":{"line":192,"column":41}}],"line":190},"21":{"loc":{"start":{"line":197,"column":8},"end":{"line":202,"column":9}},"type":"if","locations":[{"start":{"line":197,"column":8},"end":{"line":202,"column":9}},{"start":{"line":197,"column":8},"end":{"line":202,"column":9}}],"line":197},"22":{"loc":{"start":{"line":197,"column":12},"end":{"line":199,"column":53}},"type":"binary-expr","locations":[{"start":{"line":197,"column":12},"end":{"line":197,"column":19}},{"start":{"line":198,"column":12},"end":{"line":198,"column":31}},{"start":{"line":199,"column":12},"end":{"line":199,"column":53}}],"line":197}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":31,"11":31,"12":31,"13":31,"14":31,"15":0,"16":0,"17":0,"18":24,"19":24,"20":24,"21":24,"22":24,"23":6,"24":6,"25":6,"26":6,"27":24,"28":1,"29":1,"30":8,"31":213,"32":22,"33":22,"34":22,"35":22,"36":22,"37":22,"38":22,"39":21,"40":21,"41":18,"42":18,"43":18,"44":1,"45":2,"46":18,"47":18,"48":3,"49":1,"50":4,"51":4,"52":62,"53":0,"54":62,"55":1,"56":0,"57":1,"58":3,"59":1,"60":1,"61":1,"62":62,"63":62,"64":1,"65":1,"66":1,"67":1,"68":12,"69":2,"70":2,"71":10,"72":10,"73":10,"74":1,"75":2,"76":10,"77":21,"78":2,"79":19,"80":19,"81":2,"82":2,"83":17,"84":1},"f":{"0":31,"1":0,"2":13,"3":24,"4":1,"5":8,"6":213,"7":22,"8":2,"9":62,"10":1,"11":3,"12":1,"13":62,"14":1,"15":12,"16":2,"17":21},"b":{"0":[0,0],"1":[0,0],"2":[24,24],"3":[24,3],"4":[6,18],"5":[22,20],"6":[22,0],"7":[22,22],"8":[21,1],"9":[18,3],"10":[18,18],"11":[1,17],"12":[0,62],"13":[0,1],"14":[1,0],"15":[2,10],"16":[12,11],"17":[10,10],"18":[1,9],"19":[2,19],"20":[21,21,2],"21":[2,17],"22":[19,19,2]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/tracer-base.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/tracer-base.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as uuid from 'uuid';\nimport * as logger from '../../common/console-logger';\nimport * as loggerTypes from '../../common/types';\nimport * as configTypes from '../config/types';\nimport { TraceParams } from '../config/types';\nimport { noopPropagation } from '../propagation/noop-propagation';\nimport { Propagation } from '../propagation/types';\nimport {\n  DEFAULT_SAMPLING_RATE,\n  SamplerBuilder,\n  TraceParamsBuilder,\n} from '../sampler/sampler';\nimport * as samplerTypes from '../sampler/types';\nimport { NoRecordRootSpan } from './no-record/no-record-root-span';\nimport { NoRecordSpan } from './no-record/no-record-span';\nimport { RootSpan } from './root-span';\nimport * as types from './types';\n\n/**\n * This class represents a tracer.\n */\nexport class CoreTracerBase implements types.TracerBase {\n  /** Indicates if the tracer is active */\n  private activeLocal: boolean;\n  /** A configuration for starting the tracer */\n  private config!: configTypes.TracerConfig;\n  /** A list of end span event listeners */\n  private eventListenersLocal: types.SpanEventListener[] = [];\n  /** Bit to represent whether trace is sampled or not. */\n  private readonly IS_SAMPLED = 0x1;\n  /** A sampler used to make sample decisions */\n  sampler!: samplerTypes.Sampler;\n  /** An object to log information */\n  logger: loggerTypes.Logger = logger.logger();\n  /** A configuration object for trace parameters */\n  activeTraceParams: TraceParams;\n\n  /** Constructs a new TraceImpl instance. */\n  constructor() {\n    this.activeLocal = false;\n    this.activeTraceParams = {};\n  }\n\n  /** A propagation instance */\n  get propagation(): Propagation {\n    if (this.config && this.config.propagation) {\n      return this.config.propagation;\n    }\n    return noopPropagation;\n  }\n\n  /** Sets the current root span. */\n  setCurrentRootSpan(root: types.Span) {\n    // no-op, this is only required in case of tracer with cls.\n  }\n\n  /**\n   * Starts a tracer.\n   * @param config A tracer configuration object to start a tracer.\n   */\n  start(config: configTypes.TracerConfig): this {\n    this.activeLocal = true;\n    this.config = config;\n    this.logger = this.config.logger || logger.logger();\n    this.sampler = SamplerBuilder.getSampler(\n      config.samplingRate || DEFAULT_SAMPLING_RATE\n    );\n    if (config.traceParams) {\n      this.activeTraceParams.numberOfAnnontationEventsPerSpan = TraceParamsBuilder.getNumberOfAnnotationEventsPerSpan(\n        config.traceParams\n      );\n      this.activeTraceParams.numberOfAttributesPerSpan = TraceParamsBuilder.getNumberOfAttributesPerSpan(\n        config.traceParams\n      );\n      this.activeTraceParams.numberOfMessageEventsPerSpan = TraceParamsBuilder.getNumberOfMessageEventsPerSpan(\n        config.traceParams\n      );\n      this.activeTraceParams.numberOfLinksPerSpan = TraceParamsBuilder.getNumberOfLinksPerSpan(\n        config.traceParams\n      );\n    }\n    return this;\n  }\n\n  /** Stops the tracer. */\n  stop(): this {\n    this.activeLocal = false;\n    return this;\n  }\n\n  /** Gets the list of event listeners. */\n  get eventListeners(): types.SpanEventListener[] {\n    return this.eventListenersLocal;\n  }\n\n  /** Indicates if the tracer is active or not. */\n  get active(): boolean {\n    return this.activeLocal;\n  }\n\n  /**\n   * Starts a root span.\n   * @param options A TraceOptions object to start a root span.\n   * @param fn A callback function to run after starting a root span.\n   */\n  startRootSpan<T>(\n    options: types.TraceOptions,\n    fn: (root: types.Span) => T\n  ): T {\n    const spanContext: types.SpanContext = options.spanContext || {\n      spanId: '',\n      traceId: uuid\n        .v4()\n        .split('-')\n        .join(''),\n    };\n    const parentSpanId = spanContext.spanId;\n    const traceId = spanContext.traceId;\n    const name = options.name || 'span';\n    const kind = options.kind || types.SpanKind.UNSPECIFIED;\n    const traceState = spanContext.traceState;\n\n    // Tracer is active\n    if (this.active) {\n      const sampleDecision = this.makeSamplingDecision(options, traceId);\n      // Sampling is on\n      if (sampleDecision) {\n        const rootSpan = new RootSpan(\n          this,\n          name,\n          kind,\n          traceId,\n          parentSpanId,\n          traceState\n        );\n        // Add default attributes\n        const defaultAttributes = this.config && this.config.defaultAttributes;\n        if (defaultAttributes) {\n          Object.keys(defaultAttributes).forEach(key => {\n            rootSpan.addAttribute(key, defaultAttributes[key]);\n          });\n        }\n        rootSpan.start();\n        return fn(rootSpan);\n      }\n      // Sampling is off\n      this.logger.debug('Sampling is off, starting new no record root span');\n    } else {\n      // Tracer is inactive\n      this.logger.debug('Tracer is inactive, starting new no record root span');\n    }\n\n    const noRecordRootSpan = new NoRecordRootSpan(\n      this,\n      name,\n      kind,\n      traceId,\n      parentSpanId,\n      traceState\n    );\n    return fn(noRecordRootSpan);\n  }\n\n  /** Notifies listeners of the span start. */\n  onStartSpan(span: types.Span): void {\n    if (!this.active) return;\n    this.notifyStartSpan(span);\n  }\n\n  /** Notifies listeners of the span end. */\n  onEndSpan(span: types.Span): void {\n    if (!this.active) return;\n    this.notifyEndSpan(span);\n  }\n\n  /**\n   * Registers an end span event listener.\n   * @param listener The listener to register.\n   */\n  registerSpanEventListener(listener: types.SpanEventListener) {\n    this.eventListenersLocal.push(listener);\n  }\n\n  /**\n   * Unregisters an end span event listener.\n   * @param listener The listener to unregister.\n   */\n  unregisterSpanEventListener(listener: types.SpanEventListener) {\n    const index = this.eventListenersLocal.indexOf(listener, 0);\n    if (index > -1) {\n      this.eventListeners.splice(index, 1);\n    }\n  }\n\n  private notifyStartSpan(span: types.Span) {\n    this.logger.debug('starting to notify listeners the start of spans');\n    for (const listener of this.eventListenersLocal) {\n      listener.onStartSpan(span);\n    }\n  }\n\n  private notifyEndSpan(span: types.Span) {\n    this.logger.debug('starting to notify listeners the end of spans');\n    for (const listener of this.eventListenersLocal) {\n      listener.onEndSpan(span);\n    }\n  }\n\n  /**\n   * Starts a span.\n   * @param [options] A SpanOptions object to start a child span.\n   */\n  startChildSpan(options?: types.SpanOptions): types.Span {\n    if (!options || !options.childOf) {\n      this.logger.debug(\n        'no current trace found - must start a new root span first'\n      );\n      return new NoRecordSpan(this);\n    }\n    const span = options.childOf.startChildSpan(options);\n\n    // Add default attributes\n    const defaultAttributes = this.config && this.config.defaultAttributes;\n    if (defaultAttributes) {\n      Object.keys(defaultAttributes).forEach(key => {\n        span.addAttribute(key, defaultAttributes[key]);\n      });\n    }\n    return span;\n  }\n\n  /** Determine whether to sample request or not. */\n  private makeSamplingDecision(\n    options: types.TraceOptions,\n    traceId: string\n  ): boolean {\n    // If users set a specific sampler in the TraceOptions, use it.\n    if (\n      options &&\n      options.samplingRate !== undefined &&\n      options.samplingRate !== null\n    ) {\n      return SamplerBuilder.getSampler(options.samplingRate).shouldSample(\n        traceId\n      );\n    }\n    let propagatedSample = null;\n    // if there is a context propagation, keep the decision\n    if (\n      options &&\n      options.spanContext &&\n      options.spanContext.options !== undefined\n    ) {\n      propagatedSample = (options.spanContext.options & this.IS_SAMPLED) !== 0;\n      return !!propagatedSample;\n    }\n    // default global sampler\n    return this.sampler.shouldSample(traceId);\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"9249eaf3236d25e21c4b2850b6d8fddf52a98321","contentHash":"4242306f073d09daa25adac7a8cbf11d83a7ae2fa9eaf6747172999b854fb9d2"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/console-logger.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/console-logger.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":48}},"2":{"start":{"line":19,"column":13},"end":{"line":19,"column":28}},"3":{"start":{"line":20,"column":18},"end":{"line":20,"column":39}},"4":{"start":{"line":30,"column":18},"end":{"line":30,"column":20}},"5":{"start":{"line":31,"column":8},"end":{"line":45,"column":9}},"6":{"start":{"line":32,"column":12},"end":{"line":37,"column":13}},"7":{"start":{"line":33,"column":16},"end":{"line":33,"column":28}},"8":{"start":{"line":35,"column":17},"end":{"line":37,"column":13}},"9":{"start":{"line":36,"column":16},"end":{"line":36,"column":58}},"10":{"start":{"line":38,"column":12},"end":{"line":38,"column":59}},"11":{"start":{"line":40,"column":13},"end":{"line":45,"column":9}},"12":{"start":{"line":41,"column":12},"end":{"line":41,"column":37}},"13":{"start":{"line":44,"column":12},"end":{"line":44,"column":32}},"14":{"start":{"line":46,"column":8},"end":{"line":47,"column":35}},"15":{"start":{"line":47,"column":12},"end":{"line":47,"column":35}},"16":{"start":{"line":48,"column":8},"end":{"line":51,"column":11}},"17":{"start":{"line":60,"column":8},"end":{"line":60,"column":57}},"18":{"start":{"line":69,"column":8},"end":{"line":69,"column":56}},"19":{"start":{"line":78,"column":8},"end":{"line":78,"column":56}},"20":{"start":{"line":87,"column":8},"end":{"line":87,"column":57}},"21":{"start":{"line":90,"column":0},"end":{"line":90,"column":38}},"22":{"start":{"line":91,"column":0},"end":{"line":91,"column":68}},"23":{"start":{"line":97,"column":15},"end":{"line":99,"column":1}},"24":{"start":{"line":98,"column":4},"end":{"line":98,"column":38}},"25":{"start":{"line":100,"column":0},"end":{"line":100,"column":24}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":29,"column":4},"end":{"line":29,"column":5}},"loc":{"start":{"line":29,"column":25},"end":{"line":52,"column":5}},"line":29},"1":{"name":"(anonymous_1)","decl":{"start":{"line":59,"column":4},"end":{"line":59,"column":5}},"loc":{"start":{"line":59,"column":28},"end":{"line":61,"column":5}},"line":59},"2":{"name":"(anonymous_2)","decl":{"start":{"line":68,"column":4},"end":{"line":68,"column":5}},"loc":{"start":{"line":68,"column":27},"end":{"line":70,"column":5}},"line":68},"3":{"name":"(anonymous_3)","decl":{"start":{"line":77,"column":4},"end":{"line":77,"column":5}},"loc":{"start":{"line":77,"column":27},"end":{"line":79,"column":5}},"line":77},"4":{"name":"(anonymous_4)","decl":{"start":{"line":86,"column":4},"end":{"line":86,"column":5}},"loc":{"start":{"line":86,"column":28},"end":{"line":88,"column":5}},"line":86},"5":{"name":"(anonymous_5)","decl":{"start":{"line":97,"column":15},"end":{"line":97,"column":16}},"loc":{"start":{"line":97,"column":28},"end":{"line":99,"column":1}},"line":97}},"branchMap":{"0":{"loc":{"start":{"line":31,"column":8},"end":{"line":45,"column":9}},"type":"if","locations":[{"start":{"line":31,"column":8},"end":{"line":45,"column":9}},{"start":{"line":31,"column":8},"end":{"line":45,"column":9}}],"line":31},"1":{"loc":{"start":{"line":32,"column":12},"end":{"line":37,"column":13}},"type":"if","locations":[{"start":{"line":32,"column":12},"end":{"line":37,"column":13}},{"start":{"line":32,"column":12},"end":{"line":37,"column":13}}],"line":32},"2":{"loc":{"start":{"line":35,"column":17},"end":{"line":37,"column":13}},"type":"if","locations":[{"start":{"line":35,"column":17},"end":{"line":37,"column":13}},{"start":{"line":35,"column":17},"end":{"line":37,"column":13}}],"line":35},"3":{"loc":{"start":{"line":40,"column":13},"end":{"line":45,"column":9}},"type":"if","locations":[{"start":{"line":40,"column":13},"end":{"line":45,"column":9}},{"start":{"line":40,"column":13},"end":{"line":45,"column":9}}],"line":40},"4":{"loc":{"start":{"line":44,"column":18},"end":{"line":44,"column":31}},"type":"binary-expr","locations":[{"start":{"line":44,"column":18},"end":{"line":44,"column":25}},{"start":{"line":44,"column":29},"end":{"line":44,"column":31}}],"line":44},"5":{"loc":{"start":{"line":46,"column":8},"end":{"line":47,"column":35}},"type":"if","locations":[{"start":{"line":46,"column":8},"end":{"line":47,"column":35}},{"start":{"line":46,"column":8},"end":{"line":47,"column":35}}],"line":46},"6":{"loc":{"start":{"line":50,"column":19},"end":{"line":50,"column":40}},"type":"binary-expr","locations":[{"start":{"line":50,"column":19},"end":{"line":50,"column":28}},{"start":{"line":50,"column":32},"end":{"line":50,"column":40}}],"line":50}},"s":{"0":1,"1":1,"2":1,"3":1,"4":128,"5":128,"6":2,"7":0,"8":2,"9":0,"10":2,"11":126,"12":1,"13":125,"14":128,"15":3,"16":128,"17":4,"18":6,"19":2,"20":233,"21":1,"22":1,"23":1,"24":128,"25":1},"f":{"0":128,"1":4,"2":6,"3":2,"4":233,"5":128},"b":{"0":[2,126],"1":[0,2],"2":[0,2],"3":[1,125],"4":[125,125],"5":[3,125],"6":[128,125]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/console-logger.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/console-logger.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,6BAA6B;AAG7B,MAAM,SAAS,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AAExC;;GAEG;AACH,MAAa,aAAa;IAKxB;;;OAGG;IACH,YAAY,OAA+C;QACzD,IAAI,GAAG,GAAwB,EAAE,CAAC;QAClC,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YAC/B,IAAI,OAAO,GAAG,CAAC,EAAE;gBACf,OAAO,GAAG,CAAC,CAAC;aACb;iBAAM,IAAI,OAAO,GAAG,aAAa,CAAC,MAAM,CAAC,MAAM,EAAE;gBAChD,OAAO,GAAG,aAAa,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;aAC3C;YACD,GAAG,GAAG,EAAE,KAAK,EAAE,aAAa,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC;SAChD;aAAM,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YACtC,GAAG,GAAG,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC;SAC1B;aAAM;YACL,GAAG,GAAG,OAAO,IAAI,EAAE,CAAC;SACrB;QACD,IAAI,GAAG,CAAC,KAAK;YAAE,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC;QACtC,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;YACtB,MAAM,EAAE,aAAa,CAAC,MAAM;YAC5B,KAAK,EAAE,GAAG,CAAC,KAAK,IAAI,QAAQ;SAC7B,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,kCAAkC;IAClC,KAAK,CAAC,OAAY,EAAE,GAAG,IAAW;QAChC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;IACnD,CAAC;IAED;;;;OAIG;IACH,kCAAkC;IAClC,IAAI,CAAC,OAAY,EAAE,GAAG,IAAW;QAC/B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;IAClD,CAAC;IAED;;;;OAIG;IACH,kCAAkC;IAClC,IAAI,CAAC,OAAY,EAAE,GAAG,IAAW;QAC/B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;IAClD,CAAC;IAED;;;;OAIG;IACH,kCAAkC;IAClC,KAAK,CAAC,OAAY,EAAE,GAAG,IAAW;QAChC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;IACnD,CAAC;;AApEH,sCAqEC;AAnEQ,oBAAM,GAAG,CAAC,QAAQ,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;AAqE/D;;;;GAIG;AACH,MAAM,MAAM,GAAG,CACb,OAA+C,EACjC,EAAE;IAChB,OAAO,IAAI,aAAa,CAAC,OAAO,CAAC,CAAC;AACpC,CAAC,CAAC;AAEO,wBAAM","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as util from 'util';\nimport * as types from './types';\n\nconst logDriver = require('log-driver');\n\n/**\n * This class implements a console logger.\n */\nexport class ConsoleLogger implements types.Logger {\n  private logger: typeof logDriver;\n  static LEVELS = ['silent', 'error', 'warn', 'info', 'debug'];\n  level?: string;\n\n  /**\n   * Constructs a new ConsoleLogger instance\n   * @param options A logger configuration object.\n   */\n  constructor(options?: types.LoggerOptions | string | number) {\n    let opt: types.LoggerOptions = {};\n    if (typeof options === 'number') {\n      if (options < 0) {\n        options = 0;\n      } else if (options > ConsoleLogger.LEVELS.length) {\n        options = ConsoleLogger.LEVELS.length - 1;\n      }\n      opt = { level: ConsoleLogger.LEVELS[options] };\n    } else if (typeof options === 'string') {\n      opt = { level: options };\n    } else {\n      opt = options || {};\n    }\n    if (opt.level) this.level = opt.level;\n    this.logger = logDriver({\n      levels: ConsoleLogger.LEVELS,\n      level: opt.level || 'silent',\n    });\n  }\n\n  /**\n   * Logger error function.\n   * @param message message error to log in console\n   * @param args arguments to log in console\n   */\n  // tslint:disable-next-line:no-any\n  error(message: any, ...args: any[]): void {\n    this.logger.error(util.format(message, ...args));\n  }\n\n  /**\n   * Logger warning function.\n   * @param message message warning to log in console\n   * @param args arguments to log in console\n   */\n  // tslint:disable-next-line:no-any\n  warn(message: any, ...args: any[]): void {\n    this.logger.warn(util.format(message, ...args));\n  }\n\n  /**\n   * Logger info function.\n   * @param message message info to log in console\n   * @param args arguments to log in console\n   */\n  // tslint:disable-next-line:no-any\n  info(message: any, ...args: any[]): void {\n    this.logger.info(util.format(message, ...args));\n  }\n\n  /**\n   * Logger debug function.\n   * @param message message debug to log in console\n   * @param args arguments to log in console\n   */\n  // tslint:disable-next-line:no-any\n  debug(message: any, ...args: any[]): void {\n    this.logger.debug(util.format(message, ...args));\n  }\n}\n\n/**\n * Function logger exported to others classes. Inspired by:\n * https://github.com/cainus/logdriver/blob/bba1761737ca72f04d6b445629848538d038484a/index.js#L50\n * @param options A logger options or strig to logger in console\n */\nconst logger = (\n  options?: types.LoggerOptions | string | number\n): types.Logger => {\n  return new ConsoleLogger(options);\n};\n\nexport { logger };\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"abce73c51fdabd2c9018d10c2d6c7c54e501a5b6","contentHash":"e8f2eb9be1aa00e23f72fcdec58918277f7b2e6139d8539f09af9c914172a996"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/propagation/noop-propagation.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/propagation/noop-propagation.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":33}},"2":{"start":{"line":19,"column":15},"end":{"line":19,"column":32}},"3":{"start":{"line":20,"column":13},"end":{"line":20,"column":28}},"4":{"start":{"line":24,"column":8},"end":{"line":24,"column":20}},"5":{"start":{"line":28,"column":8},"end":{"line":34,"column":10}},"6":{"start":{"line":37,"column":0},"end":{"line":37,"column":48}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":23,"column":4},"end":{"line":23,"column":5}},"loc":{"start":{"line":23,"column":20},"end":{"line":25,"column":5}},"line":23},"1":{"name":"(anonymous_1)","decl":{"start":{"line":26,"column":4},"end":{"line":26,"column":5}},"loc":{"start":{"line":26,"column":32},"end":{"line":26,"column":35}},"line":26},"2":{"name":"(anonymous_2)","decl":{"start":{"line":27,"column":4},"end":{"line":27,"column":5}},"loc":{"start":{"line":27,"column":15},"end":{"line":35,"column":5}},"line":27}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":0,"5":0,"6":1},"f":{"0":0,"1":0,"2":0},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/propagation/noop-propagation.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/propagation/noop-propagation.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,iCAAiC;AACjC,6BAA6B;AAI7B,0CAA0C;AAC1C,MAAM,eAAe;IACnB,OAAO,CAAC,MAAoB;QAC1B,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,CAAC,MAAoB,EAAE,WAAwB,IAAS,CAAC;IAE/D,QAAQ;QACN,OAAO;YACL,OAAO,EAAE,IAAI;iBACV,EAAE,EAAE;iBACJ,KAAK,CAAC,GAAG,CAAC;iBACV,IAAI,CAAC,EAAE,CAAC;YACX,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC;SAC9C,CAAC;IACJ,CAAC;CACF;AAEY,QAAA,eAAe,GAAG,IAAI,eAAe,EAAE,CAAC","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as crypto from 'crypto';\nimport * as uuid from 'uuid';\nimport { SpanContext } from '../model/types';\nimport { HeaderGetter, HeaderSetter, Propagation } from './types';\n\n/** No-op implementation of Propagation */\nclass NoopPropagation implements Propagation {\n  extract(getter: HeaderGetter): SpanContext | null {\n    return null;\n  }\n\n  inject(setter: HeaderSetter, spanContext: SpanContext): void {}\n\n  generate(): SpanContext {\n    return {\n      traceId: uuid\n        .v4()\n        .split('-')\n        .join(''),\n      spanId: crypto.randomBytes(8).toString('hex'),\n    };\n  }\n}\n\nexport const noopPropagation = new NoopPropagation();\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"33a8a4916eeb1f08ab416a922cf468cfb3716c3e","contentHash":"6180ecf3aab8cb67713d2274f7e721c56dfc5edee10efb3ce09f28dbdfeeac12"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/sampler/sampler.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/sampler/sampler.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":337}},"2":{"start":{"line":22,"column":19},"end":{"line":22,"column":34}},"3":{"start":{"line":23,"column":25},"end":{"line":23,"column":27}},"4":{"start":{"line":27,"column":8},"end":{"line":27,"column":36}},"5":{"start":{"line":30,"column":8},"end":{"line":30,"column":20}},"6":{"start":{"line":33,"column":0},"end":{"line":33,"column":38}},"7":{"start":{"line":37,"column":8},"end":{"line":37,"column":35}},"8":{"start":{"line":40,"column":8},"end":{"line":40,"column":21}},"9":{"start":{"line":43,"column":0},"end":{"line":43,"column":36}},"10":{"start":{"line":50,"column":8},"end":{"line":50,"column":58}},"11":{"start":{"line":51,"column":8},"end":{"line":51,"column":53}},"12":{"start":{"line":60,"column":28},"end":{"line":62,"column":17}},"13":{"start":{"line":64,"column":27},"end":{"line":64,"column":52}},"14":{"start":{"line":65,"column":8},"end":{"line":70,"column":9}},"15":{"start":{"line":66,"column":12},"end":{"line":66,"column":24}},"16":{"start":{"line":69,"column":12},"end":{"line":69,"column":25}},"17":{"start":{"line":73,"column":0},"end":{"line":73,"column":48}},"18":{"start":{"line":85,"column":8},"end":{"line":90,"column":9}},"19":{"start":{"line":86,"column":12},"end":{"line":86,"column":41}},"20":{"start":{"line":88,"column":13},"end":{"line":90,"column":9}},"21":{"start":{"line":89,"column":12},"end":{"line":89,"column":40}},"22":{"start":{"line":91,"column":8},"end":{"line":91,"column":51}},"23":{"start":{"line":94,"column":0},"end":{"line":94,"column":40}},"24":{"start":{"line":95,"column":0},"end":{"line":95,"column":44}},"25":{"start":{"line":96,"column":0},"end":{"line":96,"column":42}},"26":{"start":{"line":101,"column":0},"end":{"line":101,"column":39}},"27":{"start":{"line":103,"column":0},"end":{"line":103,"column":46}},"28":{"start":{"line":105,"column":0},"end":{"line":105,"column":50}},"29":{"start":{"line":107,"column":0},"end":{"line":107,"column":45}},"30":{"start":{"line":109,"column":0},"end":{"line":109,"column":40}},"31":{"start":{"line":113,"column":8},"end":{"line":115,"column":63}},"32":{"start":{"line":118,"column":8},"end":{"line":120,"column":56}},"33":{"start":{"line":123,"column":8},"end":{"line":125,"column":59}},"34":{"start":{"line":128,"column":8},"end":{"line":130,"column":51}},"35":{"start":{"line":133,"column":0},"end":{"line":133,"column":48}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":26,"column":4},"end":{"line":26,"column":5}},"loc":{"start":{"line":26,"column":18},"end":{"line":28,"column":5}},"line":26},"1":{"name":"(anonymous_1)","decl":{"start":{"line":29,"column":4},"end":{"line":29,"column":5}},"loc":{"start":{"line":29,"column":26},"end":{"line":31,"column":5}},"line":29},"2":{"name":"(anonymous_2)","decl":{"start":{"line":36,"column":4},"end":{"line":36,"column":5}},"loc":{"start":{"line":36,"column":18},"end":{"line":38,"column":5}},"line":36},"3":{"name":"(anonymous_3)","decl":{"start":{"line":39,"column":4},"end":{"line":39,"column":5}},"loc":{"start":{"line":39,"column":26},"end":{"line":41,"column":5}},"line":39},"4":{"name":"(anonymous_4)","decl":{"start":{"line":49,"column":4},"end":{"line":49,"column":5}},"loc":{"start":{"line":49,"column":29},"end":{"line":52,"column":5}},"line":49},"5":{"name":"(anonymous_5)","decl":{"start":{"line":59,"column":4},"end":{"line":59,"column":5}},"loc":{"start":{"line":59,"column":26},"end":{"line":71,"column":5}},"line":59},"6":{"name":"(anonymous_6)","decl":{"start":{"line":84,"column":4},"end":{"line":84,"column":5}},"loc":{"start":{"line":84,"column":35},"end":{"line":92,"column":5}},"line":84},"7":{"name":"(anonymous_7)","decl":{"start":{"line":112,"column":4},"end":{"line":112,"column":5}},"loc":{"start":{"line":112,"column":63},"end":{"line":116,"column":5}},"line":112},"8":{"name":"(anonymous_8)","decl":{"start":{"line":117,"column":4},"end":{"line":117,"column":5}},"loc":{"start":{"line":117,"column":57},"end":{"line":121,"column":5}},"line":117},"9":{"name":"(anonymous_9)","decl":{"start":{"line":122,"column":4},"end":{"line":122,"column":5}},"loc":{"start":{"line":122,"column":60},"end":{"line":126,"column":5}},"line":122},"10":{"name":"(anonymous_10)","decl":{"start":{"line":127,"column":4},"end":{"line":127,"column":5}},"loc":{"start":{"line":127,"column":52},"end":{"line":131,"column":5}},"line":127}},"branchMap":{"0":{"loc":{"start":{"line":60,"column":28},"end":{"line":62,"column":17}},"type":"cond-expr","locations":[{"start":{"line":61,"column":14},"end":{"line":61,"column":66}},{"start":{"line":62,"column":14},"end":{"line":62,"column":17}}],"line":60},"1":{"loc":{"start":{"line":65,"column":8},"end":{"line":70,"column":9}},"type":"if","locations":[{"start":{"line":65,"column":8},"end":{"line":70,"column":9}},{"start":{"line":65,"column":8},"end":{"line":70,"column":9}}],"line":65},"2":{"loc":{"start":{"line":85,"column":8},"end":{"line":90,"column":9}},"type":"if","locations":[{"start":{"line":85,"column":8},"end":{"line":90,"column":9}},{"start":{"line":85,"column":8},"end":{"line":90,"column":9}}],"line":85},"3":{"loc":{"start":{"line":88,"column":13},"end":{"line":90,"column":9}},"type":"if","locations":[{"start":{"line":88,"column":13},"end":{"line":90,"column":9}},{"start":{"line":88,"column":13},"end":{"line":90,"column":9}}],"line":88},"4":{"loc":{"start":{"line":113,"column":15},"end":{"line":115,"column":62}},"type":"cond-expr","locations":[{"start":{"line":114,"column":14},"end":{"line":114,"column":54}},{"start":{"line":115,"column":14},"end":{"line":115,"column":62}}],"line":113},"5":{"loc":{"start":{"line":118,"column":15},"end":{"line":120,"column":55}},"type":"cond-expr","locations":[{"start":{"line":119,"column":14},"end":{"line":119,"column":53}},{"start":{"line":120,"column":14},"end":{"line":120,"column":55}}],"line":118},"6":{"loc":{"start":{"line":123,"column":15},"end":{"line":125,"column":58}},"type":"cond-expr","locations":[{"start":{"line":124,"column":14},"end":{"line":124,"column":57}},{"start":{"line":125,"column":14},"end":{"line":125,"column":58}}],"line":123},"7":{"loc":{"start":{"line":128,"column":15},"end":{"line":130,"column":50}},"type":"cond-expr","locations":[{"start":{"line":129,"column":14},"end":{"line":129,"column":48}},{"start":{"line":130,"column":14},"end":{"line":130,"column":50}}],"line":128}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":19,"6":1,"7":1,"8":3,"9":1,"10":5,"11":5,"12":7,"13":7,"14":7,"15":3,"16":4,"17":1,"18":32,"19":24,"20":8,"21":3,"22":5,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":7,"32":7,"33":7,"34":7,"35":1},"f":{"0":1,"1":19,"2":1,"3":3,"4":5,"5":7,"6":32,"7":7,"8":7,"9":7,"10":7},"b":{"0":[7,0],"1":[3,4],"2":[24,8],"3":[3,5],"4":[4,3],"5":[0,7],"6":[4,3],"7":[4,3]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/sampler/sampler.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/sampler/sampler.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TraceParams } from '../config/types';\nimport { Sampler } from './types';\n\n// We use 52-bits as our max number because it remains a javascript \"safe\n// integer\" for arithmetic and parsing while using the full hex range for\n// comparison to the lower order bytes on a traceId.\nconst MAX_NUMBER = 0xfffffffffffff;\nconst LOWER_BYTE_COUNT = 13;\n\n/**  Sampler that samples every trace. */\nexport class AlwaysSampler implements Sampler {\n  readonly description = 'always';\n\n  shouldSample(traceId: string): boolean {\n    return true;\n  }\n}\n\n/** Sampler that samples no traces. */\nexport class NeverSampler implements Sampler {\n  readonly description = 'never';\n\n  shouldSample(traceId: string): boolean {\n    return false;\n  }\n}\n\n/** Sampler that samples a given fraction of traces. */\nexport class ProbabilitySampler implements Sampler {\n  private idUpperBound: number;\n  readonly description: string;\n\n  /**\n   * Constructs a new Probability Sampler instance.\n   */\n  constructor(probability: number) {\n    this.description = `probability.(${probability})`;\n    this.idUpperBound = probability * MAX_NUMBER;\n  }\n\n  /**\n   * Checks if trace belong the sample.\n   * @param traceId Used to check the probability\n   * @returns a boolean. True if the traceId is in probability\n   * False if the traceId is not in probability.\n   */\n  shouldSample(traceId: string): boolean {\n    const LOWER_BYTES = traceId\n      ? ('0000000000000' + traceId).slice(-LOWER_BYTE_COUNT)\n      : '0';\n    // tslint:disable-next-line:ban Needed to parse hexadecimal.\n    const LOWER_LONG = parseInt(LOWER_BYTES, 16);\n\n    if (LOWER_LONG <= this.idUpperBound) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\n/** Builder class of Samplers */\nexport class SamplerBuilder {\n  private static readonly ALWAYS = new AlwaysSampler();\n  private static readonly NEVER = new NeverSampler();\n\n  /**\n   * If probability parameter is bigger then 1 return AlwaysSampler instance.\n   * If probability parameter is less than 0 returns NeverSampler instance.\n   * Else returns a Probability Sampler\n   *\n   * @param probability probability between 0 and 1\n   * @returns a Sampler object\n   */\n  static getSampler(probability: number): Sampler {\n    if (probability >= 1.0) {\n      return SamplerBuilder.ALWAYS;\n    } else if (probability <= 0) {\n      return SamplerBuilder.NEVER;\n    }\n    return new ProbabilitySampler(probability);\n  }\n}\n\n/**\n * The default sampler is a Probability sampler with the probability set to\n * 1/10000.\n */\nexport const DEFAULT_SAMPLING_RATE = 0.0001;\n\n/** Default Limit for Annotations per span */\nexport const DEFAULT_SPAN_MAX_NUM_ANNOTATIONS = 32;\n/** Default limit for Message events per span */\nexport const DEFAULT_SPAN_MAX_NUM_MESSAGE_EVENTS = 128;\n/** Default limit for Attributes per span */\nexport const DEFAULT_SPAN_MAX_NUM_ATTRIBUTES = 32;\n/** Default limit for Links per span */\nexport const DEFAULT_SPAN_MAX_NUM_LINKS = 32;\n\n/** Builder Class of TraceParams */\nexport class TraceParamsBuilder {\n  static getNumberOfAnnotationEventsPerSpan(\n    traceParameters: TraceParams\n  ): number {\n    return !traceParameters.numberOfAnnontationEventsPerSpan\n      ? DEFAULT_SPAN_MAX_NUM_ANNOTATIONS\n      : traceParameters.numberOfAnnontationEventsPerSpan;\n  }\n\n  static getNumberOfAttributesPerSpan(traceParameters: TraceParams): number {\n    return !traceParameters.numberOfAttributesPerSpan\n      ? DEFAULT_SPAN_MAX_NUM_ATTRIBUTES\n      : traceParameters.numberOfAttributesPerSpan;\n  }\n\n  static getNumberOfMessageEventsPerSpan(traceParameters: TraceParams): number {\n    return !traceParameters.numberOfMessageEventsPerSpan\n      ? DEFAULT_SPAN_MAX_NUM_MESSAGE_EVENTS\n      : traceParameters.numberOfMessageEventsPerSpan;\n  }\n\n  static getNumberOfLinksPerSpan(traceParameters: TraceParams): number {\n    return !traceParameters.numberOfLinksPerSpan\n      ? DEFAULT_SPAN_MAX_NUM_LINKS\n      : traceParameters.numberOfLinksPerSpan;\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"6a721472b9d485f4c74431ee2cd439194f21fc66","contentHash":"76889ffd8b11c2ad064d9c6da43ccb79ea3adf6f90f98cf5768ad641fce536a1"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/no-record/no-record-root-span.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/no-record/no-record-root-span.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":34}},"2":{"start":{"line":19,"column":15},"end":{"line":19,"column":56}},"3":{"start":{"line":20,"column":25},"end":{"line":20,"column":52}},"4":{"start":{"line":34,"column":8},"end":{"line":34,"column":22}},"5":{"start":{"line":35,"column":8},"end":{"line":35,"column":29}},"6":{"start":{"line":36,"column":8},"end":{"line":36,"column":36}},"7":{"start":{"line":37,"column":8},"end":{"line":37,"column":25}},"8":{"start":{"line":38,"column":8},"end":{"line":38,"column":25}},"9":{"start":{"line":39,"column":8},"end":{"line":39,"column":46}},"10":{"start":{"line":40,"column":8},"end":{"line":42,"column":9}},"11":{"start":{"line":41,"column":12},"end":{"line":41,"column":46}},"12":{"start":{"line":43,"column":8},"end":{"line":43,"column":60}},"13":{"start":{"line":47,"column":8},"end":{"line":47,"column":20}},"14":{"start":{"line":51,"column":8},"end":{"line":51,"column":33}},"15":{"start":{"line":55,"column":8},"end":{"line":55,"column":38}},"16":{"start":{"line":59,"column":8},"end":{"line":59,"column":36}},"17":{"start":{"line":63,"column":8},"end":{"line":63,"column":17}},"18":{"start":{"line":67,"column":8},"end":{"line":67,"column":22}},"19":{"start":{"line":71,"column":8},"end":{"line":71,"column":20}},"20":{"start":{"line":74,"column":0},"end":{"line":74,"column":44}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":33,"column":4},"end":{"line":33,"column":5}},"loc":{"start":{"line":33,"column":71},"end":{"line":44,"column":5}},"line":33},"1":{"name":"(anonymous_1)","decl":{"start":{"line":46,"column":4},"end":{"line":46,"column":5}},"loc":{"start":{"line":46,"column":17},"end":{"line":48,"column":5}},"line":46},"2":{"name":"(anonymous_2)","decl":{"start":{"line":50,"column":4},"end":{"line":50,"column":5}},"loc":{"start":{"line":50,"column":18},"end":{"line":52,"column":5}},"line":50},"3":{"name":"(anonymous_3)","decl":{"start":{"line":54,"column":4},"end":{"line":54,"column":5}},"loc":{"start":{"line":54,"column":23},"end":{"line":56,"column":5}},"line":54},"4":{"name":"(anonymous_4)","decl":{"start":{"line":58,"column":4},"end":{"line":58,"column":5}},"loc":{"start":{"line":58,"column":21},"end":{"line":60,"column":5}},"line":58},"5":{"name":"(anonymous_5)","decl":{"start":{"line":62,"column":4},"end":{"line":62,"column":5}},"loc":{"start":{"line":62,"column":27},"end":{"line":64,"column":5}},"line":62},"6":{"name":"(anonymous_6)","decl":{"start":{"line":66,"column":4},"end":{"line":66,"column":5}},"loc":{"start":{"line":66,"column":12},"end":{"line":68,"column":5}},"line":66},"7":{"name":"(anonymous_7)","decl":{"start":{"line":70,"column":4},"end":{"line":70,"column":5}},"loc":{"start":{"line":70,"column":10},"end":{"line":72,"column":5}},"line":70}},"branchMap":{"0":{"loc":{"start":{"line":40,"column":8},"end":{"line":42,"column":9}},"type":"if","locations":[{"start":{"line":40,"column":8},"end":{"line":42,"column":9}},{"start":{"line":40,"column":8},"end":{"line":42,"column":9}}],"line":40},"1":{"loc":{"start":{"line":43,"column":22},"end":{"line":43,"column":59}},"type":"binary-expr","locations":[{"start":{"line":43,"column":22},"end":{"line":43,"column":40}},{"start":{"line":43,"column":44},"end":{"line":43,"column":59}}],"line":43}},"s":{"0":1,"1":1,"2":1,"3":1,"4":5,"5":5,"6":5,"7":5,"8":5,"9":5,"10":5,"11":0,"12":5,"13":0,"14":1,"15":1,"16":1,"17":0,"18":0,"19":0,"20":1},"f":{"0":5,"1":0,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0},"b":{"0":[0,5],"1":[5,0]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/no-record/no-record-root-span.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/no-record/no-record-root-span.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,yDAAyD;AAEzD,qDAAgD;AAEhD,2EAA2E;AAC3E,MAAa,gBAAiB,SAAQ,6BAAY;IAahD;;;;;;;;;OASG;IACH,YACE,MAAwB,EACxB,IAAY,EACZ,IAAoB,EACpB,OAAe,EACf,YAAoB,EACpB,UAA6B;QAE7B,KAAK,CAAC,MAAM,CAAC,CAAC;QACd,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC;QAC5B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,iBAAiB,GAAG,YAAY,CAAC;QACtC,IAAI,UAAU,EAAE;YACd,IAAI,CAAC,eAAe,GAAG,UAAU,CAAC;SACnC;QACD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;IACtD,CAAC;IAED,6CAA6C;IAC7C,UAAU;QACR,OAAO,IAAI,CAAC;IACd,CAAC;IAED,2CAA2C;IAC3C,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED,sCAAsC;IACtC,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAChC,CAAC;IAED,2CAA2C;IAC3C,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;IAED,2CAA2C;IAC3C,IAAI,gBAAgB;QAClB,OAAO,CAAC,CAAC;IACX,CAAC;IAED,2CAA2C;IAC3C,KAAK;QACH,KAAK,CAAC,KAAK,EAAE,CAAC;IAChB,CAAC;IAED,2CAA2C;IAC3C,GAAG;QACD,KAAK,CAAC,GAAG,EAAE,CAAC;IACd,CAAC;CACF;AA7ED,4CA6EC","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as logger from '../../../common/console-logger';\nimport * as types from '../types';\nimport { NoRecordSpan } from './no-record-span';\n\n/** Implementation for the Span class that does not record trace events. */\nexport class NoRecordRootSpan extends NoRecordSpan {\n  /** Its trace ID. */\n  private traceIdLocal: string;\n  /** Its trace state. */\n  private traceStateLocal?: types.TraceState;\n  /**\n   * This span's parent Id.  This is a string and not a Span because the\n   * parent was likely started on another machine.\n   */\n  private parentSpanIdLocal: string;\n  /** A tracer object */\n  readonly tracer: types.TracerBase;\n\n  /**\n   * Constructs a new NoRecordRootSpanImpl instance.\n   * @param tracer A tracer object.\n   * @param name The displayed name for the new span.\n   * @param kind The kind of new span.\n   * @param traceId The trace Id.\n   * @param parentSpanId The id of the parent span, or empty if the new span is\n   *     a root span.\n   * @param traceState Optional traceState.\n   */\n  constructor(\n    tracer: types.TracerBase,\n    name: string,\n    kind: types.SpanKind,\n    traceId: string,\n    parentSpanId: string,\n    traceState?: types.TraceState\n  ) {\n    super(tracer);\n    this.tracer = tracer;\n    this.traceIdLocal = traceId;\n    this.name = name;\n    this.kind = kind;\n    this.parentSpanIdLocal = parentSpanId;\n    if (traceState) {\n      this.traceStateLocal = traceState;\n    }\n    this.logger = this.tracer.logger || logger.logger();\n  }\n\n  /** Returns whether a span is root or not. */\n  isRootSpan(): boolean {\n    return true;\n  }\n\n  /** No-op implementation of this method. */\n  get traceId(): string {\n    return this.traceIdLocal;\n  }\n\n  /** Gets the ID of the parent span. */\n  get parentSpanId(): string {\n    return this.parentSpanIdLocal;\n  }\n\n  /** No-op implementation of this method. */\n  get traceState(): types.TraceState | undefined {\n    return this.traceStateLocal;\n  }\n\n  /** No-op implementation of this method. */\n  get numberOfChildren(): number {\n    return 0;\n  }\n\n  /** No-op implementation of this method. */\n  start() {\n    super.start();\n  }\n\n  /** No-op implementation of this method. */\n  end() {\n    super.end();\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"7cfbadc1972b2c2015db4828889c79e8ce982cdc","contentHash":"c5c8fd1fcfcf429068cc92d42e6fac784da206ee3c654042a37b92b0c843eecc"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/no-record/no-record-span.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/no-record/no-record-span.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":30}},"2":{"start":{"line":19,"column":22},"end":{"line":19,"column":60}},"3":{"start":{"line":20,"column":15},"end":{"line":20,"column":48}},"4":{"start":{"line":21,"column":14},"end":{"line":21,"column":33}},"5":{"start":{"line":22,"column":18},"end":{"line":24,"column":1}},"6":{"start":{"line":30,"column":8},"end":{"line":30,"column":34}},"7":{"start":{"line":32,"column":8},"end":{"line":32,"column":32}},"8":{"start":{"line":34,"column":8},"end":{"line":34,"column":47}},"9":{"start":{"line":36,"column":8},"end":{"line":36,"column":29}},"10":{"start":{"line":38,"column":8},"end":{"line":38,"column":30}},"11":{"start":{"line":40,"column":8},"end":{"line":40,"column":32}},"12":{"start":{"line":42,"column":8},"end":{"line":42,"column":24}},"13":{"start":{"line":44,"column":8},"end":{"line":44,"column":34}},"14":{"start":{"line":46,"column":8},"end":{"line":46,"column":32}},"15":{"start":{"line":48,"column":8},"end":{"line":48,"column":47}},"16":{"start":{"line":50,"column":8},"end":{"line":50,"column":32}},"17":{"start":{"line":52,"column":8},"end":{"line":52,"column":36}},"18":{"start":{"line":54,"column":8},"end":{"line":54,"column":40}},"19":{"start":{"line":56,"column":8},"end":{"line":56,"column":35}},"20":{"start":{"line":58,"column":8},"end":{"line":58,"column":41}},"21":{"start":{"line":60,"column":8},"end":{"line":60,"column":43}},"22":{"start":{"line":61,"column":8},"end":{"line":61,"column":29}},"23":{"start":{"line":62,"column":8},"end":{"line":62,"column":40}},"24":{"start":{"line":63,"column":8},"end":{"line":69,"column":9}},"25":{"start":{"line":64,"column":12},"end":{"line":64,"column":36}},"26":{"start":{"line":65,"column":12},"end":{"line":65,"column":37}},"27":{"start":{"line":68,"column":12},"end":{"line":68,"column":29}},"28":{"start":{"line":70,"column":8},"end":{"line":70,"column":69}},"29":{"start":{"line":74,"column":8},"end":{"line":74,"column":21}},"30":{"start":{"line":78,"column":8},"end":{"line":78,"column":18}},"31":{"start":{"line":82,"column":8},"end":{"line":82,"column":25}},"32":{"start":{"line":86,"column":8},"end":{"line":88,"column":9}},"33":{"start":{"line":87,"column":12},"end":{"line":87,"column":22}},"34":{"start":{"line":89,"column":8},"end":{"line":89,"column":34}},"35":{"start":{"line":93,"column":8},"end":{"line":93,"column":33}},"36":{"start":{"line":97,"column":8},"end":{"line":97,"column":31}},"37":{"start":{"line":101,"column":8},"end":{"line":101,"column":26}},"38":{"start":{"line":105,"column":8},"end":{"line":105,"column":18}},"39":{"start":{"line":109,"column":8},"end":{"line":109,"column":18}},"40":{"start":{"line":113,"column":8},"end":{"line":113,"column":17}},"41":{"start":{"line":117,"column":8},"end":{"line":117,"column":26}},"42":{"start":{"line":121,"column":8},"end":{"line":126,"column":10}},"43":{"start":{"line":130,"column":8},"end":{"line":130,"column":17}},"44":{"start":{"line":144,"column":8},"end":{"line":144,"column":33}},"45":{"start":{"line":148,"column":8},"end":{"line":148,"column":34}},"46":{"start":{"line":149,"column":8},"end":{"line":149,"column":31}},"47":{"start":{"line":158,"column":30},"end":{"line":158,"column":65}},"48":{"start":{"line":159,"column":8},"end":{"line":160,"column":46}},"49":{"start":{"line":160,"column":12},"end":{"line":160,"column":46}},"50":{"start":{"line":161,"column":8},"end":{"line":162,"column":46}},"51":{"start":{"line":162,"column":12},"end":{"line":162,"column":46}},"52":{"start":{"line":163,"column":8},"end":{"line":163,"column":30}},"53":{"start":{"line":164,"column":8},"end":{"line":164,"column":29}},"54":{"start":{"line":167,"column":0},"end":{"line":167,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":28,"column":4},"end":{"line":28,"column":5}},"loc":{"start":{"line":28,"column":32},"end":{"line":71,"column":5}},"line":28},"1":{"name":"(anonymous_1)","decl":{"start":{"line":73,"column":4},"end":{"line":73,"column":5}},"loc":{"start":{"line":73,"column":17},"end":{"line":75,"column":5}},"line":73},"2":{"name":"(anonymous_2)","decl":{"start":{"line":77,"column":4},"end":{"line":77,"column":5}},"loc":{"start":{"line":77,"column":18},"end":{"line":79,"column":5}},"line":77},"3":{"name":"(anonymous_3)","decl":{"start":{"line":81,"column":4},"end":{"line":81,"column":5}},"loc":{"start":{"line":81,"column":21},"end":{"line":83,"column":5}},"line":81},"4":{"name":"(anonymous_4)","decl":{"start":{"line":85,"column":4},"end":{"line":85,"column":5}},"loc":{"start":{"line":85,"column":23},"end":{"line":90,"column":5}},"line":85},"5":{"name":"(anonymous_5)","decl":{"start":{"line":92,"column":4},"end":{"line":92,"column":5}},"loc":{"start":{"line":92,"column":18},"end":{"line":94,"column":5}},"line":92},"6":{"name":"(anonymous_6)","decl":{"start":{"line":96,"column":4},"end":{"line":96,"column":5}},"loc":{"start":{"line":96,"column":16},"end":{"line":98,"column":5}},"line":96},"7":{"name":"(anonymous_7)","decl":{"start":{"line":100,"column":4},"end":{"line":100,"column":5}},"loc":{"start":{"line":100,"column":20},"end":{"line":102,"column":5}},"line":100},"8":{"name":"(anonymous_8)","decl":{"start":{"line":104,"column":4},"end":{"line":104,"column":5}},"loc":{"start":{"line":104,"column":21},"end":{"line":106,"column":5}},"line":104},"9":{"name":"(anonymous_9)","decl":{"start":{"line":108,"column":4},"end":{"line":108,"column":5}},"loc":{"start":{"line":108,"column":16},"end":{"line":110,"column":5}},"line":108},"10":{"name":"(anonymous_10)","decl":{"start":{"line":112,"column":4},"end":{"line":112,"column":5}},"loc":{"start":{"line":112,"column":27},"end":{"line":114,"column":5}},"line":112},"11":{"name":"(anonymous_11)","decl":{"start":{"line":116,"column":4},"end":{"line":116,"column":5}},"loc":{"start":{"line":116,"column":18},"end":{"line":118,"column":5}},"line":116},"12":{"name":"(anonymous_12)","decl":{"start":{"line":120,"column":4},"end":{"line":120,"column":5}},"loc":{"start":{"line":120,"column":22},"end":{"line":127,"column":5}},"line":120},"13":{"name":"(anonymous_13)","decl":{"start":{"line":129,"column":4},"end":{"line":129,"column":5}},"loc":{"start":{"line":129,"column":19},"end":{"line":131,"column":5}},"line":129},"14":{"name":"(anonymous_14)","decl":{"start":{"line":133,"column":4},"end":{"line":133,"column":5}},"loc":{"start":{"line":133,"column":29},"end":{"line":133,"column":32}},"line":133},"15":{"name":"(anonymous_15)","decl":{"start":{"line":135,"column":4},"end":{"line":135,"column":5}},"loc":{"start":{"line":135,"column":58},"end":{"line":135,"column":61}},"line":135},"16":{"name":"(anonymous_16)","decl":{"start":{"line":137,"column":4},"end":{"line":137,"column":5}},"loc":{"start":{"line":137,"column":47},"end":{"line":137,"column":50}},"line":137},"17":{"name":"(anonymous_17)","decl":{"start":{"line":139,"column":4},"end":{"line":139,"column":5}},"loc":{"start":{"line":139,"column":79},"end":{"line":139,"column":82}},"line":139},"18":{"name":"(anonymous_18)","decl":{"start":{"line":141,"column":4},"end":{"line":141,"column":5}},"loc":{"start":{"line":141,"column":29},"end":{"line":141,"column":32}},"line":141},"19":{"name":"(anonymous_19)","decl":{"start":{"line":143,"column":4},"end":{"line":143,"column":5}},"loc":{"start":{"line":143,"column":12},"end":{"line":145,"column":5}},"line":143},"20":{"name":"(anonymous_20)","decl":{"start":{"line":147,"column":4},"end":{"line":147,"column":5}},"loc":{"start":{"line":147,"column":10},"end":{"line":150,"column":5}},"line":147},"21":{"name":"(anonymous_21)","decl":{"start":{"line":152,"column":4},"end":{"line":152,"column":5}},"loc":{"start":{"line":152,"column":15},"end":{"line":152,"column":18}},"line":152},"22":{"name":"(anonymous_22)","decl":{"start":{"line":157,"column":4},"end":{"line":157,"column":5}},"loc":{"start":{"line":157,"column":28},"end":{"line":165,"column":5}},"line":157}},"branchMap":{"0":{"loc":{"start":{"line":63,"column":8},"end":{"line":69,"column":9}},"type":"if","locations":[{"start":{"line":63,"column":8},"end":{"line":69,"column":9}},{"start":{"line":63,"column":8},"end":{"line":69,"column":9}}],"line":63},"1":{"loc":{"start":{"line":70,"column":22},"end":{"line":70,"column":68}},"type":"binary-expr","locations":[{"start":{"line":70,"column":23},"end":{"line":70,"column":32}},{"start":{"line":70,"column":36},"end":{"line":70,"column":52}},{"start":{"line":70,"column":57},"end":{"line":70,"column":68}}],"line":70},"2":{"loc":{"start":{"line":86,"column":8},"end":{"line":88,"column":9}},"type":"if","locations":[{"start":{"line":86,"column":8},"end":{"line":88,"column":9}},{"start":{"line":86,"column":8},"end":{"line":88,"column":9}}],"line":86},"3":{"loc":{"start":{"line":135,"column":43},"end":{"line":135,"column":56}},"type":"default-arg","locations":[{"start":{"line":135,"column":55},"end":{"line":135,"column":56}}],"line":135},"4":{"loc":{"start":{"line":139,"column":30},"end":{"line":139,"column":43}},"type":"default-arg","locations":[{"start":{"line":139,"column":42},"end":{"line":139,"column":43}}],"line":139},"5":{"loc":{"start":{"line":159,"column":8},"end":{"line":160,"column":46}},"type":"if","locations":[{"start":{"line":159,"column":8},"end":{"line":160,"column":46}},{"start":{"line":159,"column":8},"end":{"line":160,"column":46}}],"line":159},"6":{"loc":{"start":{"line":159,"column":12},"end":{"line":159,"column":35}},"type":"binary-expr","locations":[{"start":{"line":159,"column":12},"end":{"line":159,"column":19}},{"start":{"line":159,"column":23},"end":{"line":159,"column":35}}],"line":159},"7":{"loc":{"start":{"line":161,"column":8},"end":{"line":162,"column":46}},"type":"if","locations":[{"start":{"line":161,"column":8},"end":{"line":162,"column":46}},{"start":{"line":161,"column":8},"end":{"line":162,"column":46}}],"line":161},"8":{"loc":{"start":{"line":161,"column":12},"end":{"line":161,"column":35}},"type":"binary-expr","locations":[{"start":{"line":161,"column":12},"end":{"line":161,"column":19}},{"start":{"line":161,"column":23},"end":{"line":161,"column":35}}],"line":161}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":13,"7":13,"8":13,"9":13,"10":13,"11":13,"12":13,"13":13,"14":13,"15":13,"16":13,"17":13,"18":13,"19":13,"20":13,"21":13,"22":13,"23":13,"24":13,"25":2,"26":2,"27":11,"28":13,"29":0,"30":0,"31":1,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":2,"45":0,"46":0,"47":2,"48":2,"49":1,"50":2,"51":0,"52":2,"53":2,"54":1},"f":{"0":13,"1":0,"2":0,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":2,"15":6,"16":2,"17":2,"18":2,"19":2,"20":0,"21":0,"22":2},"b":{"0":[2,11],"1":[13,13,0],"2":[0,0],"3":[6],"4":[0],"5":[1,1],"6":[2,1],"7":[0,2],"8":[2,1]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/no-record/no-record-span.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/no-record/no-record-span.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { noopLogger } from '../../../common/noop-logger';\nimport { Logger } from '../../../common/types';\nimport { randomSpanId } from '../../../internal/util';\nimport * as configTypes from '../../config/types';\nimport * as types from '../types';\n\nconst STATUS_OK = {\n  code: types.CanonicalCode.OK,\n};\n\n/** Implementation for the SpanBase class that does not record trace events. */\nexport class NoRecordSpan implements types.Span {\n  /** Indicates if this span was started */\n  private startedLocal = false;\n  /** Indicates if this span was ended */\n  private endedLocal = false;\n  /** The Span ID of this span */\n  readonly id: string;\n  /** A tracer object */\n  readonly tracer: types.TracerBase;\n  /** An object to log information to */\n  logger: Logger = noopLogger;\n  /** A set of attributes, each in the format [KEY]:[VALUE] */\n  attributes: types.Attributes = {};\n  /** A text annotation with a set of attributes. */\n  annotations: types.Annotation[] = [];\n  /** An event describing a message sent/received between Spans */\n  messageEvents: types.MessageEvent[] = [];\n  /** Pointers from the current span to another span */\n  links: types.Link[] = [];\n  /** If the parent span is in another process. */\n  remoteParent = false;\n  /** This span's root span.  If it's a root span, it will point to this */\n  root: NoRecordSpan;\n  /** This span's parent. If it's a root span, must be empty */\n  parentSpan?: NoRecordSpan;\n  /** The resource name of the span */\n  name = 'no-record';\n  /** Kind of span. */\n  kind: types.SpanKind = types.SpanKind.UNSPECIFIED;\n  /** A final status for this span */\n  status: types.Status = STATUS_OK;\n  /** Trace Parameters */\n  activeTraceParams: configTypes.TraceParams = {};\n\n  /** The number of dropped attributes. */\n  droppedAttributesCount = 0;\n  /** The number of dropped links. */\n  droppedLinksCount = 0;\n  /** The number of dropped annotations. */\n  droppedAnnotationsCount = 0;\n  /** The number of dropped message events. */\n  droppedMessageEventsCount = 0;\n\n  /** Constructs a new SpanBaseModel instance. */\n  constructor(tracer: types.TracerBase, parent?: NoRecordSpan) {\n    this.tracer = tracer;\n    this.id = randomSpanId();\n    if (parent) {\n      this.root = parent.root;\n      this.parentSpan = parent;\n    } else {\n      this.root = this;\n    }\n    this.logger = (this.root && this.root.logger) || this.logger;\n  }\n\n  /** Returns whether a span is root or not. */\n  isRootSpan(): boolean {\n    return false;\n  }\n\n  /** Gets trace id of no-record span. */\n  get traceId(): string {\n    return '';\n  }\n\n  /** Gets the trace state */\n  get traceState(): types.TraceState | undefined {\n    return undefined;\n  }\n\n  /** Gets the ID of the parent span. */\n  get parentSpanId(): string {\n    if (!this.parentSpan) {\n      return '';\n    }\n    return this.parentSpan.id;\n  }\n\n  /** Indicates if span was started. */\n  get started(): boolean {\n    return this.startedLocal;\n  }\n\n  /** Indicates if span was ended. */\n  get ended(): boolean {\n    return this.endedLocal;\n  }\n\n  /** No-op implementation of this method. */\n  get startTime(): Date {\n    return new Date();\n  }\n\n  /** No-op implementation of this method. */\n  allDescendants(): types.Span[] {\n    return [];\n  }\n\n  /** No-op implementation of this method. */\n  get spans(): types.Span[] {\n    return [];\n  }\n\n  /** No-op implementation of this method. */\n  get numberOfChildren(): number {\n    return 0;\n  }\n\n  /** No-op implementation of this method. */\n  get endTime(): Date {\n    return new Date();\n  }\n\n  /** Gives the TraceContext of the span. */\n  get spanContext(): types.SpanContext {\n    return {\n      traceId: this.traceId,\n      spanId: this.id,\n      options: 0,\n      traceState: this.traceState,\n    };\n  }\n\n  /** No-op implementation of this method. */\n  get duration(): number {\n    return 0;\n  }\n\n  /** No-op implementation of this method. */\n  addAttribute(key: string, value: string | number | boolean | object) {}\n\n  /** No-op implementation of this method. */\n  addAnnotation(\n    description: string,\n    attributes?: types.Attributes,\n    timestamp = 0\n  ) {}\n\n  /** No-op implementation of this method. */\n  addLink(\n    traceId: string,\n    spanId: string,\n    type: types.LinkType,\n    attributes?: types.Attributes\n  ) {}\n\n  /** No-op implementation of this method. */\n  addMessageEvent(\n    type: types.MessageEventType,\n    id: number,\n    timestamp = 0,\n    uncompressedSize?: number,\n    compressedSize?: number\n  ) {}\n\n  /** No-op implementation of this method. */\n  setStatus(code: types.CanonicalCode, message?: string) {}\n\n  /** No-op implementation of this method. */\n  start() {\n    this.startedLocal = true;\n  }\n\n  /** No-op implementation of this method. */\n  end(): void {\n    this.startedLocal = false;\n    this.endedLocal = true;\n  }\n\n  /** No-op implementation of this method. */\n  truncate() {}\n\n  /**\n   * Starts a new no record child span in the no record root span.\n   * @param [options] A SpanOptions object to start a child span.\n   */\n  startChildSpan(options?: types.SpanOptions): types.Span {\n    const noRecordChild = new NoRecordSpan(this.tracer, this);\n    if (options && options.name) noRecordChild.name = options.name;\n    if (options && options.kind) noRecordChild.kind = options.kind;\n    noRecordChild.start();\n    return noRecordChild;\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"a56396d30b992211c4b6e23f9b3ee685c30ce829","contentHash":"52ac7eef295755cc5274602825bfdf50ab7c865ea5dbf03acf76710505744d59"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/noop-logger.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/noop-logger.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":28}},"2":{"start":{"line":30,"column":0},"end":{"line":30,"column":38}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":22,"column":4},"end":{"line":22,"column":5}},"loc":{"start":{"line":22,"column":28},"end":{"line":22,"column":31}},"line":22},"1":{"name":"(anonymous_1)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":19},"end":{"line":24,"column":22}},"line":24},"2":{"name":"(anonymous_2)","decl":{"start":{"line":26,"column":4},"end":{"line":26,"column":5}},"loc":{"start":{"line":26,"column":18},"end":{"line":26,"column":21}},"line":26},"3":{"name":"(anonymous_3)","decl":{"start":{"line":28,"column":4},"end":{"line":28,"column":5}},"loc":{"start":{"line":28,"column":18},"end":{"line":28,"column":21}},"line":28}},"branchMap":{},"s":{"0":1,"1":1,"2":1},"f":{"0":0,"1":0,"2":0,"3":0},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/noop-logger.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/noop-logger.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAIH,qCAAqC;AACrC,MAAM,UAAU;IACd,kCAAkC;IAClC,KAAK,CAAC,OAAe,EAAE,GAAG,IAAW,IAAG,CAAC;IACzC,kCAAkC;IAClC,KAAK,CAAC,GAAG,IAAW,IAAG,CAAC;IACxB,kCAAkC;IAClC,IAAI,CAAC,GAAG,IAAW,IAAG,CAAC;IACvB,kCAAkC;IAClC,IAAI,CAAC,GAAG,IAAW,IAAG,CAAC;CACxB;AAEY,QAAA,UAAU,GAAG,IAAI,UAAU,EAAE,CAAC","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from './types';\n\n/** No-op implementation of Logger */\nclass NoopLogger implements Logger {\n  // tslint:disable-next-line:no-any\n  debug(message: string, ...args: any[]) {}\n  // tslint:disable-next-line:no-any\n  error(...args: any[]) {}\n  // tslint:disable-next-line:no-any\n  warn(...args: any[]) {}\n  // tslint:disable-next-line:no-any\n  info(...args: any[]) {}\n}\n\nexport const noopLogger = new NoopLogger();\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"8f409aac41f22f679250f0078b03f64196f9d43f","contentHash":"34e04c1166a0380d162294407d70c405789e81137f64fa3a38c21f82839366f1"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/internal/util.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/internal/util.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":30}},"2":{"start":{"line":21,"column":15},"end":{"line":21,"column":32}},"3":{"start":{"line":22,"column":29},"end":{"line":22,"column":30}},"4":{"start":{"line":25,"column":21},"end":{"line":25,"column":55}},"5":{"start":{"line":26,"column":23},"end":{"line":26,"column":44}},"6":{"start":{"line":27,"column":20},"end":{"line":27,"column":38}},"7":{"start":{"line":28,"column":25},"end":{"line":30,"column":45}},"8":{"start":{"line":29,"column":12},"end":{"line":29,"column":40}},"9":{"start":{"line":30,"column":12},"end":{"line":30,"column":45}},"10":{"start":{"line":32,"column":4},"end":{"line":32,"column":46}},"11":{"start":{"line":34,"column":0},"end":{"line":34,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":29,"column":6},"end":{"line":29,"column":7}},"loc":{"start":{"line":29,"column":12},"end":{"line":29,"column":40}},"line":29},"1":{"name":"(anonymous_1)","decl":{"start":{"line":30,"column":6},"end":{"line":30,"column":7}},"loc":{"start":{"line":30,"column":12},"end":{"line":30,"column":45}},"line":30},"2":{"name":"randomSpanId","decl":{"start":{"line":31,"column":9},"end":{"line":31,"column":21}},"loc":{"start":{"line":31,"column":24},"end":{"line":33,"column":1}},"line":31}},"branchMap":{"0":{"loc":{"start":{"line":28,"column":25},"end":{"line":30,"column":45}},"type":"cond-expr","locations":[{"start":{"line":29,"column":6},"end":{"line":29,"column":40}},{"start":{"line":30,"column":6},"end":{"line":30,"column":45}}],"line":28}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":174,"9":0,"10":174,"11":1},"f":{"0":174,"1":0,"2":174},"b":{"0":[1,0]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/internal/util.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/internal/util.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,6CAA6C;AAC7C,4DAA4D;AAE5D,iCAAiC;AAEjC,MAAM,oBAAoB,GAAG,CAAC,CAAC;AAE/B,gFAAgF;AAChF,4BAA4B;AAC5B,MAAM,YAAY,GAAG,MAAM,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;AACxD,MAAM,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;AAC7C,MAAM,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC;AACvC,MAAM,gBAAgB,GAAG,cAAc;IACrC,CAAC,CAAC,GAAG,EAAE,CAAC,cAAc,CAAC,YAAY,CAAC;IACpC,CAAC,CAAC,GAAG,EAAE,CAAC,WAAW,CAAC,oBAAoB,CAAC,CAAC;AAE5C,SAAgB,YAAY;IAC1B,OAAO,gBAAgB,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAC5C,CAAC;AAFD,oCAEC","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Code snippets from Stackdriver Trace Agent\n// https://github.com/GoogleCloudPlatform/cloud-trace-nodejs\n\nimport * as crypto from 'crypto';\n\nconst SPAN_ID_RANDOM_BYTES = 8;\n\n// Use the faster crypto.randomFillSync when available (Node 7+) falling back to\n// using crypto.randomBytes.\nconst spanIdBuffer = Buffer.alloc(SPAN_ID_RANDOM_BYTES);\nconst randomFillSync = crypto.randomFillSync;\nconst randomBytes = crypto.randomBytes;\nconst spanRandomBuffer = randomFillSync\n  ? () => randomFillSync(spanIdBuffer)\n  : () => randomBytes(SPAN_ID_RANDOM_BYTES);\n\nexport function randomSpanId() {\n  return spanRandomBuffer().toString('hex');\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b0e94fda0a9f922c4ef91407b01e1feb660d2eac","contentHash":"c2d507fa76462175397c19ef0b0920c73c6532bd36db0161fe293f3c35daad3a"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/root-span.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/root-span.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":26}},"2":{"start":{"line":19,"column":15},"end":{"line":19,"column":53}},"3":{"start":{"line":20,"column":15},"end":{"line":20,"column":32}},"4":{"start":{"line":34,"column":8},"end":{"line":34,"column":22}},"5":{"start":{"line":35,"column":8},"end":{"line":35,"column":29}},"6":{"start":{"line":36,"column":8},"end":{"line":36,"column":36}},"7":{"start":{"line":37,"column":8},"end":{"line":37,"column":25}},"8":{"start":{"line":38,"column":8},"end":{"line":38,"column":25}},"9":{"start":{"line":39,"column":8},"end":{"line":39,"column":46}},"10":{"start":{"line":40,"column":8},"end":{"line":42,"column":9}},"11":{"start":{"line":41,"column":12},"end":{"line":41,"column":46}},"12":{"start":{"line":43,"column":8},"end":{"line":43,"column":55}},"13":{"start":{"line":44,"column":8},"end":{"line":44,"column":58}},"14":{"start":{"line":48,"column":8},"end":{"line":48,"column":20}},"15":{"start":{"line":52,"column":8},"end":{"line":52,"column":33}},"16":{"start":{"line":56,"column":8},"end":{"line":56,"column":36}},"17":{"start":{"line":59,"column":8},"end":{"line":59,"column":38}},"18":{"start":{"line":62,"column":0},"end":{"line":62,"column":28}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":33,"column":4},"end":{"line":33,"column":5}},"loc":{"start":{"line":33,"column":71},"end":{"line":45,"column":5}},"line":33},"1":{"name":"(anonymous_1)","decl":{"start":{"line":47,"column":4},"end":{"line":47,"column":5}},"loc":{"start":{"line":47,"column":17},"end":{"line":49,"column":5}},"line":47},"2":{"name":"(anonymous_2)","decl":{"start":{"line":51,"column":4},"end":{"line":51,"column":5}},"loc":{"start":{"line":51,"column":18},"end":{"line":53,"column":5}},"line":51},"3":{"name":"(anonymous_3)","decl":{"start":{"line":55,"column":4},"end":{"line":55,"column":5}},"loc":{"start":{"line":55,"column":21},"end":{"line":57,"column":5}},"line":55},"4":{"name":"(anonymous_4)","decl":{"start":{"line":58,"column":4},"end":{"line":58,"column":5}},"loc":{"start":{"line":58,"column":23},"end":{"line":60,"column":5}},"line":58}},"branchMap":{"0":{"loc":{"start":{"line":40,"column":8},"end":{"line":42,"column":9}},"type":"if","locations":[{"start":{"line":40,"column":8},"end":{"line":42,"column":9}},{"start":{"line":40,"column":8},"end":{"line":42,"column":9}}],"line":40},"1":{"loc":{"start":{"line":43,"column":22},"end":{"line":43,"column":54}},"type":"binary-expr","locations":[{"start":{"line":43,"column":22},"end":{"line":43,"column":35}},{"start":{"line":43,"column":39},"end":{"line":43,"column":54}}],"line":43}},"s":{"0":1,"1":1,"2":1,"3":1,"4":76,"5":76,"6":76,"7":76,"8":76,"9":76,"10":76,"11":2,"12":76,"13":76,"14":61,"15":278,"16":144,"17":61,"18":1},"f":{"0":76,"1":61,"2":278,"3":144,"4":61},"b":{"0":[2,74],"1":[76,0]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/root-span.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/root-span.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,sDAAsD;AACtD,iCAA8B;AAG9B,0BAA0B;AAC1B,MAAa,QAAS,SAAQ,WAAI;IAahC;;;;;;;;;OASG;IACH,YACE,MAAwB,EACxB,IAAY,EACZ,IAAoB,EACpB,OAAe,EACf,YAAoB,EACpB,UAA6B;QAE7B,KAAK,CAAC,MAAM,CAAC,CAAC;QACd,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC;QAC5B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,iBAAiB,GAAG,YAAY,CAAC;QACtC,IAAI,UAAU,EAAE;YACd,IAAI,CAAC,eAAe,GAAG,UAAU,CAAC;SACnC;QACD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;QAC/C,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;IACpD,CAAC;IAED,6CAA6C;IAC7C,UAAU;QACR,OAAO,IAAI,CAAC;IACd,CAAC;IAED,4CAA4C;IAC5C,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED,8CAA8C;IAC9C,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;IAED,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAChC,CAAC;CACF;AA9DD,4BA8DC","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as logger from '../../common/console-logger';\nimport { Span } from './span';\nimport * as types from './types';\n\n/** Defines a root span */\nexport class RootSpan extends Span {\n  /** Its trace ID. */\n  private traceIdLocal: string;\n  /** Its trace state. */\n  private traceStateLocal?: types.TraceState;\n  /**\n   * This span's parent Id.  This is a string and not a Span because the\n   * parent was likely started on another machine.\n   */\n  private parentSpanIdLocal: string;\n  /** A tracer object */\n  readonly tracer: types.TracerBase;\n\n  /**\n   * Constructs a new RootSpanImpl instance.\n   * @param tracer A tracer object.\n   * @param name The displayed name for the new span.\n   * @param kind The kind of new span.\n   * @param traceId The trace Id.\n   * @param parentSpanId The id of the parent span, or empty if the new span is\n   *     a root span.\n   * @param traceState An optional traceState.\n   */\n  constructor(\n    tracer: types.TracerBase,\n    name: string,\n    kind: types.SpanKind,\n    traceId: string,\n    parentSpanId: string,\n    traceState?: types.TraceState\n  ) {\n    super(tracer);\n    this.tracer = tracer;\n    this.traceIdLocal = traceId;\n    this.name = name;\n    this.kind = kind;\n    this.parentSpanIdLocal = parentSpanId;\n    if (traceState) {\n      this.traceStateLocal = traceState;\n    }\n    this.logger = tracer.logger || logger.logger();\n    this.activeTraceParams = tracer.activeTraceParams;\n  }\n\n  /** Returns whether a span is root or not. */\n  isRootSpan(): boolean {\n    return true;\n  }\n\n  /** Gets trace id from rootspan instance. */\n  get traceId(): string {\n    return this.traceIdLocal;\n  }\n\n  /** Gets trace state from rootspan instance */\n  get traceState(): types.TraceState | undefined {\n    return this.traceStateLocal;\n  }\n\n  get parentSpanId(): string {\n    return this.parentSpanIdLocal;\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"c1eff8810568a1b400967f32b10afde23b596a7f","contentHash":"05f94268b3d9adfb9088fdce13b07ead812a139e441b56db2617a1e2da2528bd"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/span.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/span.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":22}},"2":{"start":{"line":19,"column":22},"end":{"line":19,"column":57}},"3":{"start":{"line":20,"column":16},"end":{"line":20,"column":47}},"4":{"start":{"line":21,"column":15},"end":{"line":21,"column":45}},"5":{"start":{"line":22,"column":25},"end":{"line":22,"column":62}},"6":{"start":{"line":23,"column":14},"end":{"line":23,"column":32}},"7":{"start":{"line":24,"column":18},"end":{"line":26,"column":1}},"8":{"start":{"line":32,"column":8},"end":{"line":32,"column":34}},"9":{"start":{"line":34,"column":8},"end":{"line":34,"column":32}},"10":{"start":{"line":36,"column":8},"end":{"line":36,"column":47}},"11":{"start":{"line":38,"column":8},"end":{"line":38,"column":29}},"12":{"start":{"line":40,"column":8},"end":{"line":40,"column":30}},"13":{"start":{"line":42,"column":8},"end":{"line":42,"column":32}},"14":{"start":{"line":44,"column":8},"end":{"line":44,"column":24}},"15":{"start":{"line":46,"column":8},"end":{"line":46,"column":34}},"16":{"start":{"line":48,"column":8},"end":{"line":48,"column":27}},"17":{"start":{"line":50,"column":8},"end":{"line":50,"column":47}},"18":{"start":{"line":52,"column":8},"end":{"line":52,"column":32}},"19":{"start":{"line":54,"column":8},"end":{"line":54,"column":36}},"20":{"start":{"line":56,"column":8},"end":{"line":56,"column":40}},"21":{"start":{"line":58,"column":8},"end":{"line":58,"column":35}},"22":{"start":{"line":60,"column":8},"end":{"line":60,"column":41}},"23":{"start":{"line":62,"column":8},"end":{"line":62,"column":43}},"24":{"start":{"line":63,"column":8},"end":{"line":63,"column":29}},"25":{"start":{"line":64,"column":8},"end":{"line":64,"column":47}},"26":{"start":{"line":65,"column":8},"end":{"line":65,"column":40}},"27":{"start":{"line":66,"column":8},"end":{"line":66,"column":29}},"28":{"start":{"line":67,"column":8},"end":{"line":74,"column":9}},"29":{"start":{"line":68,"column":12},"end":{"line":68,"column":36}},"30":{"start":{"line":69,"column":12},"end":{"line":69,"column":37}},"31":{"start":{"line":70,"column":12},"end":{"line":70,"column":65}},"32":{"start":{"line":73,"column":12},"end":{"line":73,"column":29}},"33":{"start":{"line":75,"column":8},"end":{"line":75,"column":69}},"34":{"start":{"line":79,"column":8},"end":{"line":79,"column":21}},"35":{"start":{"line":83,"column":8},"end":{"line":83,"column":33}},"36":{"start":{"line":87,"column":8},"end":{"line":87,"column":36}},"37":{"start":{"line":94,"column":8},"end":{"line":96,"column":9}},"38":{"start":{"line":95,"column":12},"end":{"line":95,"column":31}},"39":{"start":{"line":97,"column":8},"end":{"line":97,"column":34}},"40":{"start":{"line":101,"column":8},"end":{"line":101,"column":33}},"41":{"start":{"line":105,"column":8},"end":{"line":105,"column":31}},"42":{"start":{"line":112,"column":8},"end":{"line":115,"column":9}},"43":{"start":{"line":113,"column":12},"end":{"line":113,"column":67}},"44":{"start":{"line":114,"column":12},"end":{"line":114,"column":30}},"45":{"start":{"line":116,"column":8},"end":{"line":116,"column":36}},"46":{"start":{"line":120,"column":8},"end":{"line":125,"column":15}},"47":{"start":{"line":121,"column":12},"end":{"line":121,"column":26}},"48":{"start":{"line":122,"column":25},"end":{"line":122,"column":45}},"49":{"start":{"line":123,"column":12},"end":{"line":123,"column":35}},"50":{"start":{"line":124,"column":12},"end":{"line":124,"column":23}},"51":{"start":{"line":129,"column":8},"end":{"line":129,"column":31}},"52":{"start":{"line":133,"column":8},"end":{"line":133,"column":38}},"53":{"start":{"line":140,"column":8},"end":{"line":143,"column":9}},"54":{"start":{"line":141,"column":12},"end":{"line":141,"column":65}},"55":{"start":{"line":142,"column":12},"end":{"line":142,"column":30}},"56":{"start":{"line":144,"column":8},"end":{"line":144,"column":34}},"57":{"start":{"line":150,"column":8},"end":{"line":153,"column":9}},"58":{"start":{"line":151,"column":12},"end":{"line":151,"column":66}},"59":{"start":{"line":152,"column":12},"end":{"line":152,"column":21}},"60":{"start":{"line":154,"column":8},"end":{"line":154,"column":35}},"61":{"start":{"line":158,"column":8},"end":{"line":163,"column":10}},"62":{"start":{"line":172,"column":8},"end":{"line":174,"column":9}},"63":{"start":{"line":173,"column":12},"end":{"line":173,"column":40}},"64":{"start":{"line":175,"column":8},"end":{"line":182,"column":9}},"65":{"start":{"line":177,"column":12},"end":{"line":177,"column":42}},"66":{"start":{"line":178,"column":41},"end":{"line":178,"column":77}},"67":{"start":{"line":179,"column":12},"end":{"line":181,"column":13}},"68":{"start":{"line":180,"column":16},"end":{"line":180,"column":61}},"69":{"start":{"line":183,"column":32},"end":{"line":183,"column":89}},"70":{"start":{"line":184,"column":8},"end":{"line":184,"column":47}},"71":{"start":{"line":193,"column":8},"end":{"line":197,"column":9}},"72":{"start":{"line":195,"column":12},"end":{"line":195,"column":37}},"73":{"start":{"line":196,"column":12},"end":{"line":196,"column":43}},"74":{"start":{"line":198,"column":8},"end":{"line":198,"column":70}},"75":{"start":{"line":208,"column":8},"end":{"line":211,"column":9}},"76":{"start":{"line":209,"column":12},"end":{"line":209,"column":31}},"77":{"start":{"line":210,"column":12},"end":{"line":210,"column":37}},"78":{"start":{"line":212,"column":8},"end":{"line":212,"column":63}},"79":{"start":{"line":224,"column":8},"end":{"line":228,"column":9}},"80":{"start":{"line":226,"column":12},"end":{"line":226,"column":39}},"81":{"start":{"line":227,"column":12},"end":{"line":227,"column":45}},"82":{"start":{"line":229,"column":8},"end":{"line":235,"column":11}},"83":{"start":{"line":243,"column":8},"end":{"line":243,"column":40}},"84":{"start":{"line":247,"column":8},"end":{"line":250,"column":9}},"85":{"start":{"line":248,"column":12},"end":{"line":248,"column":160}},"86":{"start":{"line":249,"column":12},"end":{"line":249,"column":19}},"87":{"start":{"line":252,"column":8},"end":{"line":257,"column":9}},"88":{"start":{"line":253,"column":12},"end":{"line":253,"column":78}},"89":{"start":{"line":256,"column":12},"end":{"line":256,"column":45}},"90":{"start":{"line":258,"column":8},"end":{"line":258,"column":33}},"91":{"start":{"line":259,"column":8},"end":{"line":265,"column":11}},"92":{"start":{"line":266,"column":8},"end":{"line":267,"column":49}},"93":{"start":{"line":267,"column":12},"end":{"line":267,"column":49}},"94":{"start":{"line":268,"column":8},"end":{"line":268,"column":38}},"95":{"start":{"line":272,"column":8},"end":{"line":275,"column":9}},"96":{"start":{"line":273,"column":12},"end":{"line":273,"column":156}},"97":{"start":{"line":274,"column":12},"end":{"line":274,"column":19}},"98":{"start":{"line":276,"column":8},"end":{"line":279,"column":9}},"99":{"start":{"line":277,"column":12},"end":{"line":277,"column":153}},"100":{"start":{"line":278,"column":12},"end":{"line":278,"column":19}},"101":{"start":{"line":280,"column":8},"end":{"line":280,"column":34}},"102":{"start":{"line":281,"column":8},"end":{"line":281,"column":31}},"103":{"start":{"line":282,"column":8},"end":{"line":282,"column":25}},"104":{"start":{"line":285,"column":8},"end":{"line":289,"column":9}},"105":{"start":{"line":286,"column":12},"end":{"line":288,"column":13}},"106":{"start":{"line":287,"column":16},"end":{"line":287,"column":32}},"107":{"start":{"line":290,"column":8},"end":{"line":290,"column":36}},"108":{"start":{"line":294,"column":8},"end":{"line":294,"column":19}},"109":{"start":{"line":295,"column":8},"end":{"line":298,"column":11}},"110":{"start":{"line":305,"column":8},"end":{"line":308,"column":9}},"111":{"start":{"line":306,"column":12},"end":{"line":306,"column":154}},"112":{"start":{"line":307,"column":12},"end":{"line":307,"column":66}},"113":{"start":{"line":309,"column":8},"end":{"line":312,"column":9}},"114":{"start":{"line":310,"column":12},"end":{"line":310,"column":159}},"115":{"start":{"line":311,"column":12},"end":{"line":311,"column":66}},"116":{"start":{"line":313,"column":22},"end":{"line":313,"column":49}},"117":{"start":{"line":314,"column":8},"end":{"line":315,"column":38}},"118":{"start":{"line":315,"column":12},"end":{"line":315,"column":38}},"119":{"start":{"line":316,"column":8},"end":{"line":317,"column":38}},"120":{"start":{"line":317,"column":12},"end":{"line":317,"column":38}},"121":{"start":{"line":318,"column":8},"end":{"line":318,"column":22}},"122":{"start":{"line":319,"column":8},"end":{"line":319,"column":36}},"123":{"start":{"line":320,"column":8},"end":{"line":320,"column":21}},"124":{"start":{"line":323,"column":0},"end":{"line":323,"column":20}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":30,"column":4},"end":{"line":30,"column":5}},"loc":{"start":{"line":30,"column":32},"end":{"line":76,"column":5}},"line":30},"1":{"name":"(anonymous_1)","decl":{"start":{"line":78,"column":4},"end":{"line":78,"column":5}},"loc":{"start":{"line":78,"column":17},"end":{"line":80,"column":5}},"line":78},"2":{"name":"(anonymous_2)","decl":{"start":{"line":82,"column":4},"end":{"line":82,"column":5}},"loc":{"start":{"line":82,"column":18},"end":{"line":84,"column":5}},"line":82},"3":{"name":"(anonymous_3)","decl":{"start":{"line":86,"column":4},"end":{"line":86,"column":5}},"loc":{"start":{"line":86,"column":21},"end":{"line":88,"column":5}},"line":86},"4":{"name":"(anonymous_4)","decl":{"start":{"line":93,"column":4},"end":{"line":93,"column":5}},"loc":{"start":{"line":93,"column":23},"end":{"line":98,"column":5}},"line":93},"5":{"name":"(anonymous_5)","decl":{"start":{"line":100,"column":4},"end":{"line":100,"column":5}},"loc":{"start":{"line":100,"column":18},"end":{"line":102,"column":5}},"line":100},"6":{"name":"(anonymous_6)","decl":{"start":{"line":104,"column":4},"end":{"line":104,"column":5}},"loc":{"start":{"line":104,"column":16},"end":{"line":106,"column":5}},"line":104},"7":{"name":"(anonymous_7)","decl":{"start":{"line":111,"column":4},"end":{"line":111,"column":5}},"loc":{"start":{"line":111,"column":20},"end":{"line":117,"column":5}},"line":111},"8":{"name":"(anonymous_8)","decl":{"start":{"line":119,"column":4},"end":{"line":119,"column":5}},"loc":{"start":{"line":119,"column":21},"end":{"line":126,"column":5}},"line":119},"9":{"name":"(anonymous_9)","decl":{"start":{"line":120,"column":38},"end":{"line":120,"column":39}},"loc":{"start":{"line":120,"column":52},"end":{"line":125,"column":9}},"line":120},"10":{"name":"(anonymous_10)","decl":{"start":{"line":128,"column":4},"end":{"line":128,"column":5}},"loc":{"start":{"line":128,"column":16},"end":{"line":130,"column":5}},"line":128},"11":{"name":"(anonymous_11)","decl":{"start":{"line":132,"column":4},"end":{"line":132,"column":5}},"loc":{"start":{"line":132,"column":27},"end":{"line":134,"column":5}},"line":132},"12":{"name":"(anonymous_12)","decl":{"start":{"line":139,"column":4},"end":{"line":139,"column":5}},"loc":{"start":{"line":139,"column":18},"end":{"line":145,"column":5}},"line":139},"13":{"name":"(anonymous_13)","decl":{"start":{"line":149,"column":4},"end":{"line":149,"column":5}},"loc":{"start":{"line":149,"column":19},"end":{"line":155,"column":5}},"line":149},"14":{"name":"(anonymous_14)","decl":{"start":{"line":157,"column":4},"end":{"line":157,"column":5}},"loc":{"start":{"line":157,"column":22},"end":{"line":164,"column":5}},"line":157},"15":{"name":"(anonymous_15)","decl":{"start":{"line":171,"column":4},"end":{"line":171,"column":5}},"loc":{"start":{"line":171,"column":29},"end":{"line":185,"column":5}},"line":171},"16":{"name":"(anonymous_16)","decl":{"start":{"line":192,"column":4},"end":{"line":192,"column":5}},"loc":{"start":{"line":192,"column":72},"end":{"line":199,"column":5}},"line":192},"17":{"name":"(anonymous_17)","decl":{"start":{"line":207,"column":4},"end":{"line":207,"column":5}},"loc":{"start":{"line":207,"column":52},"end":{"line":213,"column":5}},"line":207},"18":{"name":"(anonymous_18)","decl":{"start":{"line":223,"column":4},"end":{"line":223,"column":5}},"loc":{"start":{"line":223,"column":88},"end":{"line":236,"column":5}},"line":223},"19":{"name":"(anonymous_19)","decl":{"start":{"line":242,"column":4},"end":{"line":242,"column":5}},"loc":{"start":{"line":242,"column":29},"end":{"line":244,"column":5}},"line":242},"20":{"name":"(anonymous_20)","decl":{"start":{"line":246,"column":4},"end":{"line":246,"column":5}},"loc":{"start":{"line":246,"column":12},"end":{"line":269,"column":5}},"line":246},"21":{"name":"(anonymous_21)","decl":{"start":{"line":271,"column":4},"end":{"line":271,"column":5}},"loc":{"start":{"line":271,"column":10},"end":{"line":291,"column":5}},"line":271},"22":{"name":"(anonymous_22)","decl":{"start":{"line":293,"column":4},"end":{"line":293,"column":5}},"loc":{"start":{"line":293,"column":15},"end":{"line":299,"column":5}},"line":293},"23":{"name":"(anonymous_23)","decl":{"start":{"line":304,"column":4},"end":{"line":304,"column":5}},"loc":{"start":{"line":304,"column":28},"end":{"line":321,"column":5}},"line":304}},"branchMap":{"0":{"loc":{"start":{"line":67,"column":8},"end":{"line":74,"column":9}},"type":"if","locations":[{"start":{"line":67,"column":8},"end":{"line":74,"column":9}},{"start":{"line":67,"column":8},"end":{"line":74,"column":9}}],"line":67},"1":{"loc":{"start":{"line":75,"column":22},"end":{"line":75,"column":68}},"type":"binary-expr","locations":[{"start":{"line":75,"column":23},"end":{"line":75,"column":32}},{"start":{"line":75,"column":36},"end":{"line":75,"column":52}},{"start":{"line":75,"column":57},"end":{"line":75,"column":68}}],"line":75},"2":{"loc":{"start":{"line":94,"column":8},"end":{"line":96,"column":9}},"type":"if","locations":[{"start":{"line":94,"column":8},"end":{"line":96,"column":9}},{"start":{"line":94,"column":8},"end":{"line":96,"column":9}}],"line":94},"3":{"loc":{"start":{"line":112,"column":8},"end":{"line":115,"column":9}},"type":"if","locations":[{"start":{"line":112,"column":8},"end":{"line":115,"column":9}},{"start":{"line":112,"column":8},"end":{"line":115,"column":9}}],"line":112},"4":{"loc":{"start":{"line":140,"column":8},"end":{"line":143,"column":9}},"type":"if","locations":[{"start":{"line":140,"column":8},"end":{"line":143,"column":9}},{"start":{"line":140,"column":8},"end":{"line":143,"column":9}}],"line":140},"5":{"loc":{"start":{"line":150,"column":8},"end":{"line":153,"column":9}},"type":"if","locations":[{"start":{"line":150,"column":8},"end":{"line":153,"column":9}},{"start":{"line":150,"column":8},"end":{"line":153,"column":9}}],"line":150},"6":{"loc":{"start":{"line":172,"column":8},"end":{"line":174,"column":9}},"type":"if","locations":[{"start":{"line":172,"column":8},"end":{"line":174,"column":9}},{"start":{"line":172,"column":8},"end":{"line":174,"column":9}}],"line":172},"7":{"loc":{"start":{"line":175,"column":8},"end":{"line":182,"column":9}},"type":"if","locations":[{"start":{"line":175,"column":8},"end":{"line":182,"column":9}},{"start":{"line":175,"column":8},"end":{"line":182,"column":9}}],"line":175},"8":{"loc":{"start":{"line":179,"column":12},"end":{"line":181,"column":13}},"type":"if","locations":[{"start":{"line":179,"column":12},"end":{"line":181,"column":13}},{"start":{"line":179,"column":12},"end":{"line":181,"column":13}}],"line":179},"9":{"loc":{"start":{"line":183,"column":32},"end":{"line":183,"column":89}},"type":"cond-expr","locations":[{"start":{"line":183,"column":60},"end":{"line":183,"column":81}},{"start":{"line":183,"column":84},"end":{"line":183,"column":89}}],"line":183},"10":{"loc":{"start":{"line":192,"column":31},"end":{"line":192,"column":46}},"type":"default-arg","locations":[{"start":{"line":192,"column":44},"end":{"line":192,"column":46}}],"line":192},"11":{"loc":{"start":{"line":192,"column":48},"end":{"line":192,"column":70}},"type":"default-arg","locations":[{"start":{"line":192,"column":60},"end":{"line":192,"column":70}}],"line":192},"12":{"loc":{"start":{"line":193,"column":8},"end":{"line":197,"column":9}},"type":"if","locations":[{"start":{"line":193,"column":8},"end":{"line":197,"column":9}},{"start":{"line":193,"column":8},"end":{"line":197,"column":9}}],"line":193},"13":{"loc":{"start":{"line":207,"column":35},"end":{"line":207,"column":50}},"type":"default-arg","locations":[{"start":{"line":207,"column":48},"end":{"line":207,"column":50}}],"line":207},"14":{"loc":{"start":{"line":208,"column":8},"end":{"line":211,"column":9}},"type":"if","locations":[{"start":{"line":208,"column":8},"end":{"line":211,"column":9}},{"start":{"line":208,"column":8},"end":{"line":211,"column":9}}],"line":208},"15":{"loc":{"start":{"line":223,"column":30},"end":{"line":223,"column":52}},"type":"default-arg","locations":[{"start":{"line":223,"column":42},"end":{"line":223,"column":52}}],"line":223},"16":{"loc":{"start":{"line":224,"column":8},"end":{"line":228,"column":9}},"type":"if","locations":[{"start":{"line":224,"column":8},"end":{"line":228,"column":9}},{"start":{"line":224,"column":8},"end":{"line":228,"column":9}}],"line":224},"17":{"loc":{"start":{"line":247,"column":8},"end":{"line":250,"column":9}},"type":"if","locations":[{"start":{"line":247,"column":8},"end":{"line":250,"column":9}},{"start":{"line":247,"column":8},"end":{"line":250,"column":9}}],"line":247},"18":{"loc":{"start":{"line":252,"column":8},"end":{"line":257,"column":9}},"type":"if","locations":[{"start":{"line":252,"column":8},"end":{"line":257,"column":9}},{"start":{"line":252,"column":8},"end":{"line":257,"column":9}}],"line":252},"19":{"loc":{"start":{"line":266,"column":8},"end":{"line":267,"column":49}},"type":"if","locations":[{"start":{"line":266,"column":8},"end":{"line":267,"column":49}},{"start":{"line":266,"column":8},"end":{"line":267,"column":49}}],"line":266},"20":{"loc":{"start":{"line":272,"column":8},"end":{"line":275,"column":9}},"type":"if","locations":[{"start":{"line":272,"column":8},"end":{"line":275,"column":9}},{"start":{"line":272,"column":8},"end":{"line":275,"column":9}}],"line":272},"21":{"loc":{"start":{"line":276,"column":8},"end":{"line":279,"column":9}},"type":"if","locations":[{"start":{"line":276,"column":8},"end":{"line":279,"column":9}},{"start":{"line":276,"column":8},"end":{"line":279,"column":9}}],"line":276},"22":{"loc":{"start":{"line":286,"column":12},"end":{"line":288,"column":13}},"type":"if","locations":[{"start":{"line":286,"column":12},"end":{"line":288,"column":13}},{"start":{"line":286,"column":12},"end":{"line":288,"column":13}}],"line":286},"23":{"loc":{"start":{"line":286,"column":16},"end":{"line":286,"column":43}},"type":"binary-expr","locations":[{"start":{"line":286,"column":16},"end":{"line":286,"column":27}},{"start":{"line":286,"column":31},"end":{"line":286,"column":43}}],"line":286},"24":{"loc":{"start":{"line":305,"column":8},"end":{"line":308,"column":9}},"type":"if","locations":[{"start":{"line":305,"column":8},"end":{"line":308,"column":9}},{"start":{"line":305,"column":8},"end":{"line":308,"column":9}}],"line":305},"25":{"loc":{"start":{"line":309,"column":8},"end":{"line":312,"column":9}},"type":"if","locations":[{"start":{"line":309,"column":8},"end":{"line":312,"column":9}},{"start":{"line":309,"column":8},"end":{"line":312,"column":9}}],"line":309},"26":{"loc":{"start":{"line":314,"column":8},"end":{"line":315,"column":38}},"type":"if","locations":[{"start":{"line":314,"column":8},"end":{"line":315,"column":38}},{"start":{"line":314,"column":8},"end":{"line":315,"column":38}}],"line":314},"27":{"loc":{"start":{"line":314,"column":12},"end":{"line":314,"column":35}},"type":"binary-expr","locations":[{"start":{"line":314,"column":12},"end":{"line":314,"column":19}},{"start":{"line":314,"column":23},"end":{"line":314,"column":35}}],"line":314},"28":{"loc":{"start":{"line":316,"column":8},"end":{"line":317,"column":38}},"type":"if","locations":[{"start":{"line":316,"column":8},"end":{"line":317,"column":38}},{"start":{"line":316,"column":8},"end":{"line":317,"column":38}}],"line":316},"29":{"loc":{"start":{"line":316,"column":12},"end":{"line":316,"column":35}},"type":"binary-expr","locations":[{"start":{"line":316,"column":12},"end":{"line":316,"column":19}},{"start":{"line":316,"column":23},"end":{"line":316,"column":35}}],"line":316}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":160,"9":160,"10":160,"11":160,"12":160,"13":160,"14":160,"15":160,"16":160,"17":160,"18":160,"19":160,"20":160,"21":160,"22":160,"23":160,"24":160,"25":160,"26":160,"27":160,"28":160,"29":84,"30":84,"31":84,"32":76,"33":160,"34":77,"35":150,"36":80,"37":79,"38":0,"39":79,"40":218,"41":80,"42":5,"43":1,"44":1,"45":4,"46":11,"47":8,"48":8,"49":8,"50":8,"51":23,"52":20,"53":3,"54":1,"55":1,"56":2,"57":1,"58":1,"59":1,"60":0,"61":2,"62":92,"63":0,"64":92,"65":8,"66":8,"67":8,"68":8,"69":92,"70":92,"71":43,"72":8,"73":8,"74":43,"75":37,"76":3,"77":3,"78":37,"79":37,"80":3,"81":3,"82":37,"83":1,"84":137,"85":1,"86":1,"87":136,"88":77,"89":59,"90":136,"91":136,"92":136,"93":59,"94":136,"95":11,"96":1,"97":1,"98":10,"99":2,"100":2,"101":8,"102":8,"103":8,"104":8,"105":2,"106":2,"107":8,"108":2,"109":2,"110":61,"111":1,"112":1,"113":60,"114":1,"115":1,"116":59,"117":59,"118":59,"119":59,"120":35,"121":59,"122":59,"123":59,"124":1},"f":{"0":160,"1":77,"2":150,"3":80,"4":79,"5":218,"6":80,"7":5,"8":11,"9":8,"10":23,"11":20,"12":3,"13":1,"14":2,"15":92,"16":43,"17":37,"18":37,"19":1,"20":137,"21":11,"22":2,"23":61},"b":{"0":[84,76],"1":[160,160,0],"2":[0,79],"3":[1,4],"4":[1,2],"5":[1,0],"6":[0,92],"7":[8,84],"8":[8,0],"9":[2,90],"10":[1],"11":[1],"12":[8,35],"13":[37],"14":[3,34],"15":[36],"16":[3,34],"17":[1,136],"18":[77,59],"19":[59,77],"20":[1,10],"21":[2,8],"22":[2,0],"23":[2,2],"24":[1,60],"25":[1,59],"26":[59,0],"27":[59,59],"28":[35,24],"29":[59,59]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/span.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/span.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { noopLogger } from '../../common/noop-logger';\nimport { Logger } from '../../common/types';\nimport { Clock } from '../../internal/clock';\nimport { randomSpanId } from '../../internal/util';\nimport * as configTypes from '../config/types';\n\nimport { NoRecordSpan } from './no-record/no-record-span';\nimport * as types from './types';\n\nconst STATUS_OK = {\n  code: types.CanonicalCode.OK,\n};\n\n/** Defines a base model for spans. */\nexport class Span implements types.Span {\n  protected className: string;\n  /** The clock used to mesure the beginning and ending of a span */\n  private clock!: Clock;\n  /** Indicates if this span was started */\n  private startedLocal = false;\n  /** Indicates if this span was ended */\n  private endedLocal = false;\n  /** A list of child spans which are immediate, local children of this span */\n  private spansLocal: types.Span[];\n  /** The Span ID of this span */\n  readonly id: string;\n  /** A tracer object */\n  readonly tracer: types.TracerBase;\n  /** An object to log information to */\n  logger: Logger = noopLogger;\n  /** A set of attributes, each in the format [KEY]:[VALUE] */\n  attributes: types.Attributes = {};\n  /** A text annotation with a set of attributes. */\n  annotations: types.Annotation[] = [];\n  /** An event describing a message sent/received between Spans */\n  messageEvents: types.MessageEvent[] = [];\n  /** Pointers from the current span to another span */\n  links: types.Link[] = [];\n  /** If the parent span is in another process. */\n  remoteParent = false;\n  /** This span's root span.  If it's a root span, it will point to this */\n  root: Span;\n  /** This span's parent. If it's a root span, must be empty */\n  parentSpan?: Span;\n  /** The resource name of the span */\n  name = 'span';\n  /** Kind of span. */\n  kind: types.SpanKind = types.SpanKind.UNSPECIFIED;\n  /** A final status for this span */\n  status: types.Status = STATUS_OK;\n  /** Trace Parameters */\n  activeTraceParams: configTypes.TraceParams = {};\n\n  /** The number of dropped attributes. */\n  droppedAttributesCount = 0;\n  /** The number of dropped links. */\n  droppedLinksCount = 0;\n  /** The number of dropped annotations. */\n  droppedAnnotationsCount = 0;\n  /** The number of dropped message events. */\n  droppedMessageEventsCount = 0;\n\n  /** Constructs a new Span instance. */\n  constructor(tracer: types.TracerBase, parent?: Span) {\n    this.tracer = tracer;\n    this.className = this.constructor.name;\n    this.id = randomSpanId();\n    this.spansLocal = [];\n    if (parent) {\n      this.root = parent.root;\n      this.parentSpan = parent;\n      this.activeTraceParams = this.root.activeTraceParams;\n    } else {\n      this.root = this;\n    }\n    this.logger = (this.root && this.root.logger) || this.logger;\n  }\n\n  /** Returns whether a span is root or not. */\n  isRootSpan(): boolean {\n    return false;\n  }\n\n  /** Gets the trace ID. */\n  get traceId(): string {\n    return this.root.traceId;\n  }\n\n  /** Gets the trace state */\n  get traceState(): types.TraceState | undefined {\n    return this.root.traceState;\n  }\n\n  /**\n   * Gets the ID of the parent span.\n   * RootSpan doesn't have a parentSpan but it override this method.\n   */\n  get parentSpanId(): string {\n    if (!this.parentSpan) {\n      return 'no-parent';\n    }\n    return this.parentSpan.id;\n  }\n\n  /** Indicates if span was started. */\n  get started(): boolean {\n    return this.startedLocal;\n  }\n\n  /** Indicates if span was ended. */\n  get ended(): boolean {\n    return this.endedLocal;\n  }\n\n  /**\n   * Gives a timestamp that indicates the span's start time in RFC3339 UTC\n   * \"Zulu\" format.\n   */\n  get startTime(): Date {\n    if (!this.clock) {\n      this.logger.debug('calling startTime() on null clock');\n      return new Date();\n    }\n\n    return this.clock.startTime;\n  }\n\n  /** Recursively gets the descendant spans. */\n  allDescendants(): types.Span[] {\n    return this.spansLocal.reduce((acc: types.Span[], cur) => {\n      acc.push(cur);\n      const desc = cur.allDescendants();\n      acc = acc.concat(desc);\n      return acc;\n    }, []);\n  }\n\n  /** The list of immediate child spans. */\n  get spans(): types.Span[] {\n    return this.spansLocal;\n  }\n\n  /** The number of direct children. */\n  get numberOfChildren(): number {\n    return this.spansLocal.length;\n  }\n\n  /**\n   * Gives a timestamp that indicates the span's end time in RFC3339 UTC\n   * \"Zulu\" format.\n   */\n  get endTime(): Date {\n    if (!this.clock) {\n      this.logger.debug('calling endTime() on null clock');\n      return new Date();\n    }\n\n    return this.clock.endTime;\n  }\n\n  /**\n   * Gets the duration of the clock.\n   */\n  get duration(): number {\n    if (!this.clock) {\n      this.logger.debug('calling duration() on null clock');\n      return 0;\n    }\n\n    return this.clock.duration;\n  }\n\n  /** Gives the TraceContext of the span. */\n  get spanContext(): types.SpanContext {\n    return {\n      traceId: this.traceId,\n      spanId: this.id,\n      options: 0x1, // always traced\n      traceState: this.traceState,\n    };\n  }\n\n  /**\n   * Adds an atribute to the span.\n   * @param key Describes the value added.\n   * @param value The result of an operation. If the value is a typeof object\n   *     it has to be JSON.stringify-able, cannot contain circular dependencies.\n   */\n  addAttribute(key: string, value: string | number | boolean | object) {\n    if (this.attributes[key]) {\n      delete this.attributes[key];\n    }\n\n    if (\n      Object.keys(this.attributes).length >=\n      this.activeTraceParams.numberOfAttributesPerSpan!\n    ) {\n      this.droppedAttributesCount++;\n      const attributeKeyToDelete = Object.keys(this.attributes).shift();\n      if (attributeKeyToDelete) {\n        delete this.attributes[attributeKeyToDelete];\n      }\n    }\n    const serializedValue =\n      typeof value === 'object' ? JSON.stringify(value) : value;\n    this.attributes[key] = serializedValue;\n  }\n\n  /**\n   * Adds an annotation to the span.\n   * @param description Describes the event.\n   * @param attributes A set of attributes on the annotation.\n   * @param timestamp A time, in milliseconds. Defaults to Date.now()\n   */\n  addAnnotation(\n    description: string,\n    attributes: types.Attributes = {},\n    timestamp = Date.now()\n  ) {\n    if (\n      this.annotations.length >=\n      this.activeTraceParams.numberOfAnnontationEventsPerSpan!\n    ) {\n      this.annotations.shift();\n      this.droppedAnnotationsCount++;\n    }\n    this.annotations.push({ description, attributes, timestamp });\n  }\n\n  /**\n   * Adds a link to the span.\n   * @param traceId The trace ID for a trace within a project.\n   * @param spanId The span ID for a span within a trace.\n   * @param type The relationship of the current span relative to the linked.\n   * @param attributes A set of attributes on the link.\n   */\n  addLink(\n    traceId: string,\n    spanId: string,\n    type: types.LinkType,\n    attributes: types.Attributes = {}\n  ) {\n    if (this.links.length >= this.activeTraceParams.numberOfLinksPerSpan!) {\n      this.links.shift();\n      this.droppedLinksCount++;\n    }\n\n    this.links.push({ traceId, spanId, type, attributes });\n  }\n\n  /**\n   * Adds a message event to the span.\n   * @param type The type of message event.\n   * @param id An identifier for the message event.\n   * @param timestamp A time in milliseconds. Defaults to Date.now()\n   * @param uncompressedSize The number of uncompressed bytes sent or received\n   * @param compressedSize The number of compressed bytes sent or received. If\n   *     zero or undefined, assumed to be the same size as uncompressed.\n   */\n  addMessageEvent(\n    type: types.MessageEventType,\n    id: number,\n    timestamp = Date.now(),\n    uncompressedSize?: number,\n    compressedSize?: number\n  ) {\n    if (\n      this.messageEvents.length >=\n      this.activeTraceParams.numberOfMessageEventsPerSpan!\n    ) {\n      this.messageEvents.shift();\n      this.droppedMessageEventsCount++;\n    }\n\n    this.messageEvents.push({\n      type,\n      id,\n      timestamp,\n      uncompressedSize,\n      compressedSize,\n    });\n  }\n\n  /**\n   * Sets a status to the span.\n   * @param code The canonical status code.\n   * @param message optional A developer-facing error message.\n   */\n  setStatus(code: types.CanonicalCode, message?: string) {\n    this.status = { code, message };\n  }\n\n  /** Starts the span. */\n  start() {\n    if (this.started) {\n      this.logger.debug(\n        'calling %s.start() on already started %s %o',\n        this.className,\n        this.className,\n        { id: this.id, name: this.name, type: this.kind }\n      );\n      return;\n    }\n    // start child span's clock from root's current time to preserve integrity.\n    if (this.parentSpan) {\n      this.clock = new Clock(this.parentSpan.clock.currentDate);\n    } else {\n      this.clock = new Clock();\n    }\n    this.startedLocal = true;\n    this.logger.debug('starting %s  %o', this.className, {\n      traceId: this.traceId,\n      id: this.id,\n      name: this.name,\n      parentSpanId: this.parentSpanId,\n      traceState: this.traceState,\n    });\n\n    if (this.isRootSpan()) this.tracer.setCurrentRootSpan(this);\n    this.tracer.onStartSpan(this);\n  }\n\n  /** Ends the span and all of its children, recursively. */\n  end(): void {\n    if (this.ended) {\n      this.logger.debug(\n        'calling %s.end() on already ended %s %o',\n        this.className,\n        this.className,\n        { id: this.id, name: this.name, type: this.kind }\n      );\n      return;\n    }\n    if (!this.started) {\n      this.logger.error(\n        'calling %s.end() on un-started %s %o',\n        this.className,\n        this.className,\n        { id: this.id, name: this.name, type: this.kind }\n      );\n      return;\n    }\n    this.startedLocal = false;\n    this.endedLocal = true;\n    this.clock.end();\n\n    // TODO: Should ending a span force its children to end by default?\n    // Issue: https://github.com/open-telemetry/opentelemetry-node/issues/4\n    for (const span of this.spansLocal) {\n      if (!span.ended && span.started) {\n        span.truncate();\n      }\n    }\n\n    this.tracer.onEndSpan(this);\n  }\n\n  /** Forces the span to end. */\n  truncate() {\n    this.end();\n    this.logger.debug('truncating %s  %o', this.className, {\n      id: this.id,\n      name: this.name,\n    });\n  }\n\n  /**\n   * Starts a new child span.\n   * @param [options] A SpanOptions object to start a child span.\n   */\n  startChildSpan(options?: types.SpanOptions): types.Span {\n    if (this.ended) {\n      this.logger.debug(\n        'calling %s.startSpan() on ended %s %o',\n        this.className,\n        this.className,\n        { id: this.id, name: this.name, kind: this.kind }\n      );\n      return new NoRecordSpan(this.tracer);\n    }\n    if (!this.started) {\n      this.logger.debug(\n        'calling %s.startSpan() on un-started %s %o',\n        this.className,\n        this.className,\n        { id: this.id, name: this.name, kind: this.kind }\n      );\n      return new NoRecordSpan(this.tracer);\n    }\n\n    const child = new Span(this.tracer, this);\n    if (options && options.name) child.name = options.name;\n    if (options && options.kind) child.kind = options.kind;\n\n    child.start();\n    this.spansLocal.push(child);\n    return child;\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"daa13407c50fbb7876573bc771f86565e8e57b20","contentHash":"5cf095b060f2e4ea9ee2c51ac466c2bfaad73d1a51fcac5ef91a01c30076a639"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/internal/clock.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/internal/clock.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":23}},"2":{"start":{"line":26,"column":8},"end":{"line":26,"column":32}},"3":{"start":{"line":28,"column":8},"end":{"line":28,"column":27}},"4":{"start":{"line":31,"column":8},"end":{"line":31,"column":54}},"5":{"start":{"line":32,"column":8},"end":{"line":32,"column":44}},"6":{"start":{"line":36,"column":8},"end":{"line":38,"column":9}},"7":{"start":{"line":37,"column":12},"end":{"line":37,"column":19}},"8":{"start":{"line":39,"column":8},"end":{"line":39,"column":53}},"9":{"start":{"line":40,"column":8},"end":{"line":40,"column":31}},"10":{"start":{"line":44,"column":21},"end":{"line":44,"column":53}},"11":{"start":{"line":45,"column":19},"end":{"line":45,"column":42}},"12":{"start":{"line":46,"column":25},"end":{"line":46,"column":33}},"13":{"start":{"line":47,"column":8},"end":{"line":47,"column":61}},"14":{"start":{"line":51,"column":8},"end":{"line":53,"column":9}},"15":{"start":{"line":52,"column":12},"end":{"line":52,"column":21}},"16":{"start":{"line":54,"column":19},"end":{"line":54,"column":52}},"17":{"start":{"line":55,"column":8},"end":{"line":55,"column":24}},"18":{"start":{"line":59,"column":8},"end":{"line":59,"column":35}},"19":{"start":{"line":66,"column":8},"end":{"line":68,"column":9}},"20":{"start":{"line":67,"column":12},"end":{"line":67,"column":70}},"21":{"start":{"line":69,"column":8},"end":{"line":69,"column":26}},"22":{"start":{"line":73,"column":8},"end":{"line":73,"column":31}},"23":{"start":{"line":76,"column":0},"end":{"line":76,"column":22}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":27},"end":{"line":33,"column":5}},"line":24},"1":{"name":"(anonymous_1)","decl":{"start":{"line":35,"column":4},"end":{"line":35,"column":5}},"loc":{"start":{"line":35,"column":10},"end":{"line":41,"column":5}},"line":35},"2":{"name":"(anonymous_2)","decl":{"start":{"line":43,"column":4},"end":{"line":43,"column":5}},"loc":{"start":{"line":43,"column":22},"end":{"line":48,"column":5}},"line":43},"3":{"name":"(anonymous_3)","decl":{"start":{"line":50,"column":4},"end":{"line":50,"column":5}},"loc":{"start":{"line":50,"column":19},"end":{"line":56,"column":5}},"line":50},"4":{"name":"(anonymous_4)","decl":{"start":{"line":58,"column":4},"end":{"line":58,"column":5}},"loc":{"start":{"line":58,"column":20},"end":{"line":60,"column":5}},"line":58},"5":{"name":"(anonymous_5)","decl":{"start":{"line":65,"column":4},"end":{"line":65,"column":5}},"loc":{"start":{"line":65,"column":18},"end":{"line":70,"column":5}},"line":65},"6":{"name":"(anonymous_6)","decl":{"start":{"line":72,"column":4},"end":{"line":72,"column":5}},"loc":{"start":{"line":72,"column":16},"end":{"line":74,"column":5}},"line":72}},"branchMap":{"0":{"loc":{"start":{"line":31,"column":30},"end":{"line":31,"column":53}},"type":"binary-expr","locations":[{"start":{"line":31,"column":30},"end":{"line":31,"column":39}},{"start":{"line":31,"column":43},"end":{"line":31,"column":53}}],"line":31},"1":{"loc":{"start":{"line":36,"column":8},"end":{"line":38,"column":9}},"type":"if","locations":[{"start":{"line":36,"column":8},"end":{"line":38,"column":9}},{"start":{"line":36,"column":8},"end":{"line":38,"column":9}}],"line":36},"2":{"loc":{"start":{"line":51,"column":8},"end":{"line":53,"column":9}},"type":"if","locations":[{"start":{"line":51,"column":8},"end":{"line":53,"column":9}},{"start":{"line":51,"column":8},"end":{"line":53,"column":9}}],"line":51},"3":{"loc":{"start":{"line":66,"column":8},"end":{"line":68,"column":9}},"type":"if","locations":[{"start":{"line":66,"column":8},"end":{"line":68,"column":9}},{"start":{"line":66,"column":8},"end":{"line":68,"column":9}}],"line":66}},"s":{"0":1,"1":1,"2":136,"3":136,"4":136,"5":136,"6":8,"7":0,"8":8,"9":8,"10":77,"11":77,"12":77,"13":77,"14":2,"15":0,"16":2,"17":2,"18":83,"19":2,"20":2,"21":0,"22":2,"23":1},"f":{"0":136,"1":8,"2":77,"3":2,"4":83,"5":2,"6":2},"b":{"0":[136,59],"1":[0,8],"2":[0,2],"3":[2,0]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/internal/clock.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/internal/clock.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH;;GAEG;AACH,MAAa,KAAK;IAUhB,uCAAuC;IACvC,YAAY,SAAgB;QAV5B,wCAAwC;QAChC,eAAU,GAAG,KAAK,CAAC;QAK3B,uDAAuD;QAC/C,SAAI,GAAqB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAItC,yEAAyE;QACzE,+BAA+B;QAC/B,IAAI,CAAC,cAAc,GAAG,SAAS,IAAI,IAAI,IAAI,EAAE,CAAC;QAC9C,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;IACtC,CAAC;IAED,sBAAsB;IACtB,GAAG;QACD,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,OAAO;SACR;QACD,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC7C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;IACzB,CAAC;IAED,uEAAuE;IACvE,IAAI,WAAW;QACb,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC9C,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACnC,MAAM,QAAQ,GAAG,EAAE,GAAG,GAAG,CAAC;QAC1B,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,QAAQ,CAAC,CAAC;IACvD,CAAC;IAED,sCAAsC;IACtC,IAAI,QAAQ;QACV,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,OAAO,CAAC,CAAC;SACV;QACD,MAAM,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC7C,OAAO,EAAE,GAAG,GAAG,CAAC;IAClB,CAAC;IAED,wBAAwB;IACxB,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IAED;;;OAGG;IACH,IAAI,OAAO;QACT,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC3D;QACD,OAAO,IAAI,IAAI,EAAE,CAAC;IACpB,CAAC;IAED,wCAAwC;IACxC,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;CACF;AAhED,sBAgEC","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The Clock class is used to record the duration and endTime for spans.\n */\nexport class Clock {\n  /** Indicates if the clock is endend. */\n  private endedLocal = false;\n  /** Indicates the clock's start time. */\n  private startTimeLocal: Date;\n  /** The time in high resolution in a [seconds, nanoseconds]. */\n  private hrtimeLocal: [number, number];\n  /** The duration between start and end of the clock. */\n  private diff: [number, number] = [0, 0];\n\n  /** Constructs a new Clock instance. */\n  constructor(startTime?: Date) {\n    // In some cases clocks need to be relative to other resources, passing a\n    // startTime makes it possible.\n    this.startTimeLocal = startTime || new Date();\n    this.hrtimeLocal = process.hrtime();\n  }\n\n  /** Ends the clock. */\n  end(): void {\n    if (this.endedLocal) {\n      return;\n    }\n    this.diff = process.hrtime(this.hrtimeLocal);\n    this.endedLocal = true;\n  }\n\n  /** Gets the current date from ellapsed milliseconds and start time. */\n  get currentDate(): Date {\n    const diff = process.hrtime(this.hrtimeLocal);\n    const ns = diff[0] * 1e9 + diff[1];\n    const ellapsed = ns / 1e6;\n    return new Date(this.startTime.getTime() + ellapsed);\n  }\n\n  /** Gets the duration of the clock. */\n  get duration(): number {\n    if (!this.endedLocal) {\n      return 0;\n    }\n    const ns = this.diff[0] * 1e9 + this.diff[1];\n    return ns / 1e6;\n  }\n\n  /** Starts the clock. */\n  get startTime(): Date {\n    return this.startTimeLocal;\n  }\n\n  /**\n   * Gets the time so far.\n   * @returns A Date object with the current duration.\n   */\n  get endTime(): Date {\n    if (this.ended) {\n      return new Date(this.startTime.getTime() + this.duration);\n    }\n    return new Date();\n  }\n\n  /** Indicates if the clock was ended. */\n  get ended(): boolean {\n    return this.endedLocal;\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"485f389700d1e4d6f071775da7cc62ecbc32b60b","contentHash":"bfe79310eee2e6c420c851fb3b970b3716b969c7a2ff1efb552b9579dd67b73d"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/tracer.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/tracer.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":28}},"2":{"start":{"line":19,"column":12},"end":{"line":19,"column":41}},"3":{"start":{"line":20,"column":25},"end":{"line":20,"column":62}},"4":{"start":{"line":21,"column":22},"end":{"line":21,"column":46}},"5":{"start":{"line":34,"column":8},"end":{"line":34,"column":16}},"6":{"start":{"line":35,"column":8},"end":{"line":35,"column":49}},"7":{"start":{"line":36,"column":8},"end":{"line":36,"column":33}},"8":{"start":{"line":40,"column":8},"end":{"line":40,"column":51}},"9":{"start":{"line":44,"column":8},"end":{"line":44,"column":38}},"10":{"start":{"line":48,"column":8},"end":{"line":50,"column":9}},"11":{"start":{"line":49,"column":12},"end":{"line":49,"column":54}},"12":{"start":{"line":58,"column":21},"end":{"line":58,"column":25}},"13":{"start":{"line":59,"column":8},"end":{"line":63,"column":11}},"14":{"start":{"line":60,"column":12},"end":{"line":62,"column":15}},"15":{"start":{"line":61,"column":16},"end":{"line":61,"column":32}},"16":{"start":{"line":67,"column":8},"end":{"line":68,"column":19}},"17":{"start":{"line":68,"column":12},"end":{"line":68,"column":19}},"18":{"start":{"line":69,"column":8},"end":{"line":72,"column":9}},"19":{"start":{"line":71,"column":12},"end":{"line":71,"column":98}},"20":{"start":{"line":73,"column":8},"end":{"line":73,"column":39}},"21":{"start":{"line":77,"column":8},"end":{"line":78,"column":19}},"22":{"start":{"line":78,"column":12},"end":{"line":78,"column":19}},"23":{"start":{"line":79,"column":8},"end":{"line":82,"column":9}},"24":{"start":{"line":81,"column":12},"end":{"line":81,"column":96}},"25":{"start":{"line":83,"column":8},"end":{"line":83,"column":30}},"26":{"start":{"line":87,"column":8},"end":{"line":89,"column":9}},"27":{"start":{"line":88,"column":12},"end":{"line":88,"column":54}},"28":{"start":{"line":96,"column":8},"end":{"line":98,"column":9}},"29":{"start":{"line":97,"column":12},"end":{"line":97,"column":91}},"30":{"start":{"line":99,"column":8},"end":{"line":99,"column":138}},"31":{"start":{"line":109,"column":8},"end":{"line":111,"column":9}},"32":{"start":{"line":110,"column":12},"end":{"line":110,"column":22}},"33":{"start":{"line":112,"column":26},"end":{"line":112,"column":45}},"34":{"start":{"line":113,"column":8},"end":{"line":113,"column":34}},"35":{"start":{"line":123,"column":8},"end":{"line":125,"column":9}},"36":{"start":{"line":124,"column":12},"end":{"line":124,"column":19}},"37":{"start":{"line":126,"column":26},"end":{"line":126,"column":45}},"38":{"start":{"line":127,"column":8},"end":{"line":127,"column":39}},"39":{"start":{"line":130,"column":0},"end":{"line":130,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":33,"column":4},"end":{"line":33,"column":5}},"loc":{"start":{"line":33,"column":18},"end":{"line":37,"column":5}},"line":33},"1":{"name":"(anonymous_1)","decl":{"start":{"line":39,"column":4},"end":{"line":39,"column":5}},"loc":{"start":{"line":39,"column":26},"end":{"line":41,"column":5}},"line":39},"2":{"name":"(anonymous_2)","decl":{"start":{"line":43,"column":4},"end":{"line":43,"column":5}},"loc":{"start":{"line":43,"column":30},"end":{"line":45,"column":5}},"line":43},"3":{"name":"(anonymous_3)","decl":{"start":{"line":47,"column":4},"end":{"line":47,"column":5}},"loc":{"start":{"line":47,"column":29},"end":{"line":51,"column":5}},"line":47},"4":{"name":"(anonymous_4)","decl":{"start":{"line":57,"column":4},"end":{"line":57,"column":5}},"loc":{"start":{"line":57,"column":31},"end":{"line":64,"column":5}},"line":57},"5":{"name":"(anonymous_5)","decl":{"start":{"line":59,"column":48},"end":{"line":59,"column":49}},"loc":{"start":{"line":59,"column":54},"end":{"line":63,"column":9}},"line":59},"6":{"name":"(anonymous_6)","decl":{"start":{"line":60,"column":48},"end":{"line":60,"column":49}},"loc":{"start":{"line":60,"column":56},"end":{"line":62,"column":13}},"line":60},"7":{"name":"(anonymous_7)","decl":{"start":{"line":66,"column":4},"end":{"line":66,"column":5}},"loc":{"start":{"line":66,"column":22},"end":{"line":74,"column":5}},"line":66},"8":{"name":"(anonymous_8)","decl":{"start":{"line":76,"column":4},"end":{"line":76,"column":5}},"loc":{"start":{"line":76,"column":20},"end":{"line":84,"column":5}},"line":76},"9":{"name":"(anonymous_9)","decl":{"start":{"line":86,"column":4},"end":{"line":86,"column":5}},"loc":{"start":{"line":86,"column":24},"end":{"line":90,"column":5}},"line":86},"10":{"name":"(anonymous_10)","decl":{"start":{"line":95,"column":4},"end":{"line":95,"column":5}},"loc":{"start":{"line":95,"column":28},"end":{"line":100,"column":5}},"line":95},"11":{"name":"(anonymous_11)","decl":{"start":{"line":108,"column":4},"end":{"line":108,"column":5}},"loc":{"start":{"line":108,"column":13},"end":{"line":114,"column":5}},"line":108},"12":{"name":"(anonymous_12)","decl":{"start":{"line":122,"column":4},"end":{"line":122,"column":5}},"loc":{"start":{"line":122,"column":25},"end":{"line":128,"column":5}},"line":122}},"branchMap":{"0":{"loc":{"start":{"line":48,"column":8},"end":{"line":50,"column":9}},"type":"if","locations":[{"start":{"line":48,"column":8},"end":{"line":50,"column":9}},{"start":{"line":48,"column":8},"end":{"line":50,"column":9}}],"line":48},"1":{"loc":{"start":{"line":67,"column":8},"end":{"line":68,"column":19}},"type":"if","locations":[{"start":{"line":67,"column":8},"end":{"line":68,"column":19}},{"start":{"line":67,"column":8},"end":{"line":68,"column":19}}],"line":67},"2":{"loc":{"start":{"line":69,"column":8},"end":{"line":72,"column":9}},"type":"if","locations":[{"start":{"line":69,"column":8},"end":{"line":72,"column":9}},{"start":{"line":69,"column":8},"end":{"line":72,"column":9}}],"line":69},"3":{"loc":{"start":{"line":69,"column":12},"end":{"line":70,"column":57}},"type":"binary-expr","locations":[{"start":{"line":69,"column":12},"end":{"line":69,"column":33}},{"start":{"line":70,"column":12},"end":{"line":70,"column":57}}],"line":69},"4":{"loc":{"start":{"line":77,"column":8},"end":{"line":78,"column":19}},"type":"if","locations":[{"start":{"line":77,"column":8},"end":{"line":78,"column":19}},{"start":{"line":77,"column":8},"end":{"line":78,"column":19}}],"line":77},"5":{"loc":{"start":{"line":79,"column":8},"end":{"line":82,"column":9}},"type":"if","locations":[{"start":{"line":79,"column":8},"end":{"line":82,"column":9}},{"start":{"line":79,"column":8},"end":{"line":82,"column":9}}],"line":79},"6":{"loc":{"start":{"line":79,"column":12},"end":{"line":80,"column":57}},"type":"binary-expr","locations":[{"start":{"line":79,"column":12},"end":{"line":79,"column":33}},{"start":{"line":80,"column":12},"end":{"line":80,"column":57}}],"line":79},"7":{"loc":{"start":{"line":87,"column":8},"end":{"line":89,"column":9}},"type":"if","locations":[{"start":{"line":87,"column":8},"end":{"line":89,"column":9}},{"start":{"line":87,"column":8},"end":{"line":89,"column":9}}],"line":87},"8":{"loc":{"start":{"line":96,"column":8},"end":{"line":98,"column":9}},"type":"if","locations":[{"start":{"line":96,"column":8},"end":{"line":98,"column":9}},{"start":{"line":96,"column":8},"end":{"line":98,"column":9}}],"line":96},"9":{"loc":{"start":{"line":99,"column":61},"end":{"line":99,"column":124}},"type":"binary-expr","locations":[{"start":{"line":99,"column":61},"end":{"line":99,"column":81}},{"start":{"line":99,"column":85},"end":{"line":99,"column":124}}],"line":99},"10":{"loc":{"start":{"line":109,"column":8},"end":{"line":111,"column":9}},"type":"if","locations":[{"start":{"line":109,"column":8},"end":{"line":111,"column":9}},{"start":{"line":109,"column":8},"end":{"line":111,"column":9}}],"line":109},"11":{"loc":{"start":{"line":123,"column":8},"end":{"line":125,"column":9}},"type":"if","locations":[{"start":{"line":123,"column":8},"end":{"line":125,"column":9}},{"start":{"line":123,"column":8},"end":{"line":125,"column":9}}],"line":123}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":12,"6":12,"7":12,"8":97,"9":0,"10":46,"11":46,"12":5,"13":5,"14":5,"15":5,"16":115,"17":74,"18":41,"19":0,"20":41,"21":7,"22":7,"23":0,"24":0,"25":0,"26":13,"27":13,"28":2,"29":1,"30":2,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":1},"f":{"0":12,"1":97,"2":0,"3":46,"4":5,"5":5,"6":5,"7":115,"8":7,"9":13,"10":2,"11":0,"12":0},"b":{"0":[46,0],"1":[74,41],"2":[0,41],"3":[41,41],"4":[7,0],"5":[0,0],"6":[0,0],"7":[13,0],"8":[1,1],"9":[2,1],"10":[0,0],"11":[0,0]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/tracer.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/tracer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as cls from '../../internal/cls';\nimport { NoRecordSpan } from './no-record/no-record-span';\nimport { CoreTracerBase } from './tracer-base';\nimport * as types from './types';\n\n/**\n * This class represents a tracer with Continuation Local Storage (CLS).\n *\n * CLS helps keep tracking the root span over function calls automatically.\n * It is capable of storing, propagating and retrieving arbitrary\n * continuation-local data (also called \"context\").\n * CLS comes with some performance overhead, you can read more about it here:\n * https://github.com/othiym23/node-continuation-local-storage/issues/59\n */\nexport class CoreTracer extends CoreTracerBase implements types.Tracer {\n  /** Manage context automatic propagation */\n  private contextManager: cls.Namespace;\n\n  /** Constructs a new TraceImpl instance. */\n  constructor() {\n    super();\n    this.contextManager = cls.getNamespace();\n    this.clearCurrentTrace();\n  }\n\n  /** Gets the current root span. */\n  get currentRootSpan(): types.Span {\n    return this.contextManager.get('rootspan');\n  }\n\n  /** Sets the current root span. */\n  set currentRootSpan(root: types.Span) {\n    this.setCurrentRootSpan(root);\n  }\n\n  /** Sets the current root span. */\n  setCurrentRootSpan(root: types.Span) {\n    if (this.contextManager.active) {\n      this.contextManager.set('rootspan', root);\n    }\n  }\n\n  /**\n   * Starts a root span.\n   * @param options A TraceOptions object to start a root span.\n   * @param fn A callback function to run after starting a root span.\n   */\n  startRootSpan<T>(\n    options: types.TraceOptions,\n    fn: (root: types.Span) => T\n  ): T {\n    const self = this;\n    return self.contextManager.runAndReturn(() => {\n      return super.startRootSpan(options, root => {\n        return fn(root);\n      });\n    });\n  }\n\n  /** Notifies listeners of the span start. */\n  onStartSpan(span: types.Span): void {\n    if (!this.active) return;\n    if (\n      !this.currentRootSpan ||\n      this.currentRootSpan.traceId !== span.traceId\n    ) {\n      this.logger.debug(\n        'currentRootSpan != root on notifyStart. Need more investigation.'\n      );\n    }\n    return super.onStartSpan(span);\n  }\n\n  /** Notifies listeners of the span end. */\n  onEndSpan(span: types.Span): void {\n    if (!this.active) return;\n    if (\n      !this.currentRootSpan ||\n      this.currentRootSpan.traceId !== span.traceId\n    ) {\n      this.logger.debug(\n        'currentRootSpan != root on notifyEnd. Need more investigation.'\n      );\n    }\n    super.onEndSpan(span);\n  }\n\n  /** Clears the current root span. */\n  clearCurrentTrace() {\n    if (this.contextManager.active) {\n      this.contextManager.set('rootspan', null);\n    }\n  }\n\n  /**\n   * Starts a span.\n   * @param [options] A SpanOptions object to start a child span.\n   */\n  startChildSpan(options?: types.SpanOptions): types.Span {\n    if (!this.currentRootSpan) {\n      this.logger.debug(\n        'no current trace found - must start a new root span first'\n      );\n    }\n\n    return super.startChildSpan(\n      Object.assign(\n        { childOf: this.currentRootSpan || new NoRecordSpan(this) },\n        options\n      )\n    );\n  }\n\n  /**\n   * Binds the trace context to the given function.\n   * This is necessary in order to create child spans correctly in functions\n   * that are called asynchronously (for example, in a network response\n   * handler).\n   * @param fn A function to which to bind the trace context.\n   */\n  wrap<T>(fn: types.Func<T>): types.Func<T> {\n    if (!this.active) {\n      return fn;\n    }\n    const namespace = this.contextManager;\n    return namespace.bind<T>(fn);\n  }\n\n  /**\n   * Binds the trace context to the given event emitter.\n   * This is necessary in order to create child spans correctly in event\n   * handlers.\n   * @param emitter An event emitter whose handlers should have\n   *     the trace context binded to them.\n   */\n  wrapEmitter(emitter: NodeJS.EventEmitter): void {\n    if (!this.active) {\n      return;\n    }\n    const namespace = this.contextManager;\n    namespace.bindEmitter(emitter);\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"0e6508870975d90a8686a743923e4399c053c60b","contentHash":"5b76874c7dd34225ce2750f1f6ad3fa6b1f309cb621d57d9616973eb323d4199"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/internal/cls.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/internal/cls.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":141}},"2":{"start":{"line":19,"column":15},"end":{"line":19,"column":32}},"3":{"start":{"line":20,"column":22},"end":{"line":20,"column":62}},"4":{"start":{"line":22,"column":12},"end":{"line":24,"column":43}},"5":{"start":{"line":25,"column":24},"end":{"line":25,"column":39}},"6":{"start":{"line":32,"column":0},"end":{"line":32,"column":55}},"7":{"start":{"line":34,"column":4},"end":{"line":34,"column":48}},"8":{"start":{"line":36,"column":0},"end":{"line":36,"column":42}},"9":{"start":{"line":38,"column":4},"end":{"line":38,"column":42}},"10":{"start":{"line":40,"column":0},"end":{"line":40,"column":44}},"11":{"start":{"line":42,"column":4},"end":{"line":42,"column":45}},"12":{"start":{"line":44,"column":0},"end":{"line":44,"column":36}},"13":{"start":{"line":45,"column":0},"end":{"line":45,"column":43}}},"fnMap":{"0":{"name":"createNamespace","decl":{"start":{"line":33,"column":9},"end":{"line":33,"column":24}},"loc":{"start":{"line":33,"column":27},"end":{"line":35,"column":1}},"line":33},"1":{"name":"destroyNamespace","decl":{"start":{"line":37,"column":9},"end":{"line":37,"column":25}},"loc":{"start":{"line":37,"column":28},"end":{"line":39,"column":1}},"line":37},"2":{"name":"getNamespace","decl":{"start":{"line":41,"column":9},"end":{"line":41,"column":21}},"loc":{"start":{"line":41,"column":24},"end":{"line":43,"column":1}},"line":41}},"branchMap":{"0":{"loc":{"start":{"line":22,"column":12},"end":{"line":24,"column":43}},"type":"cond-expr","locations":[{"start":{"line":23,"column":6},"end":{"line":23,"column":25}},{"start":{"line":24,"column":6},"end":{"line":24,"column":43}}],"line":22},"1":{"loc":{"start":{"line":32,"column":33},"end":{"line":32,"column":54}},"type":"cond-expr","locations":[{"start":{"line":32,"column":49},"end":{"line":32,"column":50}},{"start":{"line":32,"column":53},"end":{"line":32,"column":54}}],"line":32}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":1,"11":14,"12":1,"13":1},"f":{"0":1,"1":0,"2":14},"b":{"0":[1,0],"1":[1,0]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/internal/cls.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/internal/cls.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAMH,iCAAiC;AAKjC,MAAM,aAAa,GAAY,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI;AAC7E,0CAA0C;AAE1C,MAAM,GAAG,GAAe,aAAa;IACnC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC;IACrB,CAAC,CAAC,OAAO,CAAC,4BAA4B,CAAC,CAAC;AAE1C,MAAM,eAAe,GAAG,eAAe,CAAC;AAExC;;;;;GAKG;AACU,QAAA,sBAAsB,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAE5D,SAAgB,eAAe;IAC7B,OAAO,GAAG,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC;AAC9C,CAAC;AAFD,0CAEC;AAED,SAAgB,gBAAgB;IAC9B,GAAG,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC;AACxC,CAAC;AAFD,4CAEC;AAED,SAAgB,YAAY;IAC1B,OAAO,GAAG,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;AAC3C,CAAC;AAFD,oCAEC;AAEY,QAAA,cAAc,GAAG,eAAe,EAAE,CAAC","sourcesContent":["/**\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Original file from Stackdriver Trace Agent for Node.js\n// https://github.com/GoogleCloudPlatform/cloud-trace-nodejs\n\nimport * as CLS from 'continuation-local-storage';\nimport * as semver from 'semver';\n\nexport type Namespace = CLS.Namespace;\nexport type Func<T> = CLS.Func<T>;\n\nconst useAsyncHooks: boolean = semver.satisfies(process.version, '>=8'); //&&\n// !!process.env.GCLOUD_TRACE_NEW_CONTEXT;\n\nconst cls: typeof CLS = useAsyncHooks\n  ? require('./cls-ah')\n  : require('continuation-local-storage');\n\nconst TRACE_NAMESPACE = 'opencensus.io';\n\n/**\n * Stack traces are captured when a root span is started. Because the stack\n * trace height varies on the context propagation mechanism, to keep published\n * stack traces uniform we need to remove the top-most frames when using the\n * c-l-s module. Keep track of this number here.\n */\nexport const ROOT_SPAN_STACK_OFFSET = useAsyncHooks ? 0 : 2;\n\nexport function createNamespace(): CLS.Namespace {\n  return cls.createNamespace(TRACE_NAMESPACE);\n}\n\nexport function destroyNamespace(): void {\n  cls.destroyNamespace(TRACE_NAMESPACE);\n}\n\nexport function getNamespace(): CLS.Namespace {\n  return cls.getNamespace(TRACE_NAMESPACE);\n}\n\nexport const contextManager = createNamespace();\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"290fbcd2da78707a5e7592a52d531acc63888e4d","contentHash":"583072720a5069a232fd6d81a874212dd54d76a9b9a887d5c54d0e5b80531f9c"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/internal/cls-ah.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/internal/cls-ah.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":99}},"2":{"start":{"line":21,"column":18},"end":{"line":21,"column":40}},"3":{"start":{"line":22,"column":16},"end":{"line":22,"column":34}},"4":{"start":{"line":23,"column":16},"end":{"line":23,"column":41}},"5":{"start":{"line":25,"column":15},"end":{"line":25,"column":24}},"6":{"start":{"line":26,"column":14},"end":{"line":26,"column":16}},"7":{"start":{"line":28,"column":0},"end":{"line":28,"column":57}},"8":{"start":{"line":30,"column":30},"end":{"line":36,"column":1}},"9":{"start":{"line":39,"column":8},"end":{"line":39,"column":43}},"10":{"start":{"line":42,"column":8},"end":{"line":42,"column":23}},"11":{"start":{"line":45,"column":8},"end":{"line":45,"column":43}},"12":{"start":{"line":48,"column":8},"end":{"line":48,"column":26}},"13":{"start":{"line":51,"column":8},"end":{"line":51,"column":23}},"14":{"start":{"line":52,"column":8},"end":{"line":52,"column":17}},"15":{"start":{"line":55,"column":8},"end":{"line":55,"column":30}},"16":{"start":{"line":56,"column":8},"end":{"line":56,"column":23}},"17":{"start":{"line":59,"column":27},"end":{"line":59,"column":34}},"18":{"start":{"line":60,"column":8},"end":{"line":60,"column":21}},"19":{"start":{"line":61,"column":8},"end":{"line":63,"column":9}},"20":{"start":{"line":62,"column":12},"end":{"line":62,"column":71}},"21":{"start":{"line":64,"column":20},"end":{"line":64,"column":24}},"22":{"start":{"line":65,"column":8},"end":{"line":65,"column":29}},"23":{"start":{"line":66,"column":8},"end":{"line":66,"column":19}},"24":{"start":{"line":72,"column":8},"end":{"line":74,"column":9}},"25":{"start":{"line":73,"column":12},"end":{"line":73,"column":22}},"26":{"start":{"line":75,"column":29},"end":{"line":75,"column":36}},"27":{"start":{"line":76,"column":31},"end":{"line":83,"column":9}},"28":{"start":{"line":77,"column":31},"end":{"line":77,"column":38}},"29":{"start":{"line":78,"column":12},"end":{"line":78,"column":35}},"30":{"start":{"line":80,"column":24},"end":{"line":80,"column":49}},"31":{"start":{"line":81,"column":12},"end":{"line":81,"column":33}},"32":{"start":{"line":82,"column":12},"end":{"line":82,"column":23}},"33":{"start":{"line":85,"column":8},"end":{"line":85,"column":39}},"34":{"start":{"line":86,"column":8},"end":{"line":91,"column":11}},"35":{"start":{"line":92,"column":8},"end":{"line":92,"column":30}},"36":{"start":{"line":100,"column":19},"end":{"line":100,"column":23}},"37":{"start":{"line":101,"column":8},"end":{"line":110,"column":11}},"38":{"start":{"line":102,"column":12},"end":{"line":109,"column":13}},"39":{"start":{"line":103,"column":16},"end":{"line":108,"column":19}},"40":{"start":{"line":104,"column":20},"end":{"line":107,"column":22}},"41":{"start":{"line":106,"column":24},"end":{"line":106,"column":72}},"42":{"start":{"line":113,"column":18},"end":{"line":113,"column":43}},"43":{"start":{"line":117,"column":4},"end":{"line":117,"column":31}},"44":{"start":{"line":121,"column":25},"end":{"line":121,"column":42}},"45":{"start":{"line":122,"column":4},"end":{"line":124,"column":5}},"46":{"start":{"line":123,"column":8},"end":{"line":123,"column":31}},"47":{"start":{"line":131,"column":4},"end":{"line":131,"column":25}},"48":{"start":{"line":134,"column":4},"end":{"line":134,"column":21}},"49":{"start":{"line":136,"column":0},"end":{"line":136,"column":42}},"50":{"start":{"line":138,"column":4},"end":{"line":138,"column":17}},"51":{"start":{"line":139,"column":4},"end":{"line":139,"column":25}},"52":{"start":{"line":141,"column":0},"end":{"line":141,"column":44}},"53":{"start":{"line":143,"column":4},"end":{"line":143,"column":21}},"54":{"start":{"line":145,"column":0},"end":{"line":145,"column":36}},"55":{"start":{"line":147,"column":4},"end":{"line":147,"column":39}},"56":{"start":{"line":149,"column":0},"end":{"line":149,"column":22}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":38,"column":4},"end":{"line":38,"column":5}},"loc":{"start":{"line":38,"column":15},"end":{"line":40,"column":5}},"line":38},"1":{"name":"(anonymous_1)","decl":{"start":{"line":41,"column":4},"end":{"line":41,"column":5}},"loc":{"start":{"line":41,"column":17},"end":{"line":43,"column":5}},"line":41},"2":{"name":"(anonymous_2)","decl":{"start":{"line":44,"column":4},"end":{"line":44,"column":5}},"loc":{"start":{"line":44,"column":20},"end":{"line":46,"column":5}},"line":44},"3":{"name":"(anonymous_3)","decl":{"start":{"line":47,"column":4},"end":{"line":47,"column":5}},"loc":{"start":{"line":47,"column":11},"end":{"line":49,"column":5}},"line":47},"4":{"name":"(anonymous_4)","decl":{"start":{"line":50,"column":4},"end":{"line":50,"column":5}},"loc":{"start":{"line":50,"column":14},"end":{"line":53,"column":5}},"line":50},"5":{"name":"(anonymous_5)","decl":{"start":{"line":54,"column":4},"end":{"line":54,"column":5}},"loc":{"start":{"line":54,"column":12},"end":{"line":57,"column":5}},"line":54},"6":{"name":"(anonymous_6)","decl":{"start":{"line":58,"column":4},"end":{"line":58,"column":5}},"loc":{"start":{"line":58,"column":21},"end":{"line":67,"column":5}},"line":58},"7":{"name":"(anonymous_7)","decl":{"start":{"line":68,"column":4},"end":{"line":68,"column":5}},"loc":{"start":{"line":68,"column":13},"end":{"line":93,"column":5}},"line":68},"8":{"name":"(anonymous_8)","decl":{"start":{"line":76,"column":31},"end":{"line":76,"column":32}},"loc":{"start":{"line":76,"column":43},"end":{"line":83,"column":9}},"line":76},"9":{"name":"(anonymous_9)","decl":{"start":{"line":99,"column":4},"end":{"line":99,"column":5}},"loc":{"start":{"line":99,"column":20},"end":{"line":111,"column":5}},"line":99},"10":{"name":"(anonymous_10)","decl":{"start":{"line":101,"column":38},"end":{"line":101,"column":39}},"loc":{"start":{"line":101,"column":48},"end":{"line":110,"column":9}},"line":101},"11":{"name":"(anonymous_11)","decl":{"start":{"line":103,"column":41},"end":{"line":103,"column":42}},"loc":{"start":{"line":103,"column":54},"end":{"line":108,"column":17}},"line":103},"12":{"name":"(anonymous_12)","decl":{"start":{"line":104,"column":27},"end":{"line":104,"column":28}},"loc":{"start":{"line":104,"column":48},"end":{"line":107,"column":21}},"line":104},"13":{"name":"init","decl":{"start":{"line":116,"column":9},"end":{"line":116,"column":13}},"loc":{"start":{"line":116,"column":54},"end":{"line":118,"column":1}},"line":116},"14":{"name":"before","decl":{"start":{"line":120,"column":9},"end":{"line":120,"column":15}},"loc":{"start":{"line":120,"column":21},"end":{"line":125,"column":1}},"line":120},"15":{"name":"destroy","decl":{"start":{"line":130,"column":9},"end":{"line":130,"column":16}},"loc":{"start":{"line":130,"column":22},"end":{"line":132,"column":1}},"line":130},"16":{"name":"createNamespace","decl":{"start":{"line":133,"column":9},"end":{"line":133,"column":24}},"loc":{"start":{"line":133,"column":27},"end":{"line":135,"column":1}},"line":133},"17":{"name":"destroyNamespace","decl":{"start":{"line":137,"column":9},"end":{"line":137,"column":25}},"loc":{"start":{"line":137,"column":28},"end":{"line":140,"column":1}},"line":137},"18":{"name":"getNamespace","decl":{"start":{"line":142,"column":9},"end":{"line":142,"column":21}},"loc":{"start":{"line":142,"column":24},"end":{"line":144,"column":1}},"line":142},"19":{"name":"reset","decl":{"start":{"line":146,"column":9},"end":{"line":146,"column":14}},"loc":{"start":{"line":146,"column":17},"end":{"line":148,"column":1}},"line":146}},"branchMap":{"0":{"loc":{"start":{"line":61,"column":8},"end":{"line":63,"column":9}},"type":"if","locations":[{"start":{"line":61,"column":8},"end":{"line":63,"column":9}},{"start":{"line":61,"column":8},"end":{"line":63,"column":9}}],"line":61},"1":{"loc":{"start":{"line":72,"column":8},"end":{"line":74,"column":9}},"type":"if","locations":[{"start":{"line":72,"column":8},"end":{"line":74,"column":9}},{"start":{"line":72,"column":8},"end":{"line":74,"column":9}}],"line":72},"2":{"loc":{"start":{"line":72,"column":12},"end":{"line":72,"column":35}},"type":"binary-expr","locations":[{"start":{"line":72,"column":12},"end":{"line":72,"column":23}},{"start":{"line":72,"column":27},"end":{"line":72,"column":35}}],"line":72},"3":{"loc":{"start":{"line":102,"column":12},"end":{"line":109,"column":13}},"type":"if","locations":[{"start":{"line":102,"column":12},"end":{"line":109,"column":13}},{"start":{"line":102,"column":12},"end":{"line":109,"column":13}}],"line":102},"4":{"loc":{"start":{"line":122,"column":4},"end":{"line":124,"column":5}},"type":"if","locations":[{"start":{"line":122,"column":4},"end":{"line":124,"column":5}},{"start":{"line":122,"column":4},"end":{"line":124,"column":5}}],"line":122}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":59,"11":0,"12":125,"13":70,"14":70,"15":0,"16":0,"17":15,"18":15,"19":15,"20":3,"21":15,"22":15,"23":15,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":1,"43":3208,"44":2994,"45":2994,"46":2992,"47":3162,"48":1,"49":1,"50":0,"51":0,"52":1,"53":14,"54":1,"55":0,"56":1},"f":{"0":0,"1":59,"2":0,"3":125,"4":70,"5":0,"6":15,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":3208,"14":2994,"15":3162,"16":1,"17":0,"18":14,"19":0},"b":{"0":[3,12],"1":[0,0],"2":[0,0],"3":[0,0],"4":[2992,2]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/internal/cls-ah.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/internal/cls-ah.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Original file from Stackdriver Trace Agent for Node.js\n// https://github.com/GoogleCloudPlatform/cloud-trace-nodejs\n\nimport * as asyncHook from 'async_hooks';\nimport {\n  Context,\n  Func,\n  Namespace as CLSNamespace,\n} from 'continuation-local-storage';\nimport { EventEmitter } from 'events';\nimport * as shimmer from 'shimmer';\n\nconst WRAPPED = Symbol('context_wrapped');\n/** A map of AsyncResource IDs to Context objects. */\nlet contexts: Map<number, Context> = new Map();\nlet current: Context = {};\n\n// Create the hook.\nasyncHook.createHook({ init, before, destroy }).enable();\n\n// A list of well-known EventEmitter methods that add event listeners.\nconst EVENT_EMITTER_METHODS: Array<keyof EventEmitter> = [\n  'addListener',\n  'on',\n  'once',\n  'prependListener',\n  'prependOnceListener',\n];\n\nclass AsyncHooksNamespace implements CLSNamespace {\n  get name(): string {\n    throw new Error('Not implemented');\n  }\n\n  get active(): Context {\n    return current;\n  }\n\n  createContext(): Context {\n    throw new Error('Not implemented');\n  }\n\n  get(k: string) {\n    return current[k];\n  }\n\n  set<T>(k: string, v: T): T {\n    current[k] = v;\n    return v;\n  }\n\n  run<T>(fn: Func<T>): Context {\n    this.runAndReturn(fn);\n    return current;\n  }\n\n  runAndReturn<T>(fn: Func<T>): T {\n    const oldContext = current;\n    current = {};\n    if (oldContext['current_tag_map']) {\n      current['current_tag_map'] = oldContext['current_tag_map'];\n    }\n    const res = fn();\n    current = oldContext;\n    return res;\n  }\n\n  bind<T>(cb: Func<T>): Func<T> {\n    // TODO(kjin): Monitor https://github.com/Microsoft/TypeScript/pull/15473.\n    // When it's landed and released, we can remove these `any` casts.\n    // tslint:disable-next-line:no-any\n    if (((cb as any)[WRAPPED] as boolean) || !current) {\n      return cb;\n    }\n    const boundContext = current;\n    const contextWrapper = function(this: {}) {\n      const oldContext = current;\n      current = boundContext;\n      // @ts-expect-error ts-migrate(2345) FIXME: Argument of type 'IArguments' is not assignable to... Remove this comment to see the full error message\n      const res = cb.apply(this, arguments) as T;\n      current = oldContext;\n      return res;\n    };\n    // tslint:disable-next-line:no-any\n    (contextWrapper as any)[WRAPPED] = true;\n    Object.defineProperty(contextWrapper, 'length', {\n      enumerable: false,\n      configurable: true,\n      writable: false,\n      value: cb.length,\n    });\n    return contextWrapper;\n  }\n\n  // This function is not technically needed and all tests currently pass\n  // without it (after removing call sites). While it is not a complete\n  // solution, restoring correct context before running every request/response\n  // event handler reduces the number of situations in which userspace queuing\n  // will cause us to lose context.\n  bindEmitter(ee: NodeJS.EventEmitter): void {\n    const ns = this;\n    EVENT_EMITTER_METHODS.forEach(method => {\n      if (ee[method]) {\n        shimmer.wrap(ee, method, oldMethod => {\n          return function(this: {}, event: string, cb: Func<void>) {\n            // @ts-expect-error ts-migrate(2684) FIXME: The 'this' context of type '((event: string | symb... Remove this comment to see the full error message\n            return oldMethod.call(this, event, ns.bind(cb));\n          };\n        });\n      }\n    });\n  }\n}\n\nconst namespace = new AsyncHooksNamespace();\n\n// AsyncWrap Hooks\n\n/** init is called during object construction. */\nfunction init(\n  uid: number,\n  provider: string,\n  parentUid: number,\n  parentHandle: {}\n) {\n  contexts.set(uid, current);\n}\n\n/** before is called just before the resource's callback is called. */\nfunction before(uid: number) {\n  const maybeCurrent = contexts.get(uid);\n  if (maybeCurrent !== undefined) {\n    current = maybeCurrent;\n  }\n}\n\n/**\n * destroy is called when the object is no longer used, so also delete\n * its entry in the map.\n */\nfunction destroy(uid: number) {\n  contexts.delete(uid);\n}\n\nexport function createNamespace(): CLSNamespace {\n  return namespace;\n}\n\nexport function destroyNamespace(): void {\n  current = {};\n  contexts = new Map();\n}\n\nexport function getNamespace(): CLSNamespace {\n  return namespace;\n}\n\nexport function reset(): void {\n  throw new Error('Not implemented');\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"f1ca5d6a82a96bd158cf7e53bfda529f4c706c54","contentHash":"6a1cfab678dcdbc93fca0919fbca80acfd25dc2f4758c0d0b37029a623f2aec2"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/instrumentation/base-plugin.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/instrumentation/base-plugin.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":28}},"2":{"start":{"line":19,"column":13},"end":{"line":19,"column":28}},"3":{"start":{"line":20,"column":15},"end":{"line":20,"column":32}},"4":{"start":{"line":21,"column":22},"end":{"line":21,"column":57}},"5":{"start":{"line":30,"column":8},"end":{"line":30,"column":47}},"6":{"start":{"line":31,"column":8},"end":{"line":31,"column":37}},"7":{"start":{"line":45,"column":8},"end":{"line":45,"column":43}},"8":{"start":{"line":46,"column":8},"end":{"line":46,"column":29}},"9":{"start":{"line":47,"column":8},"end":{"line":47,"column":31}},"10":{"start":{"line":48,"column":8},"end":{"line":49,"column":35}},"11":{"start":{"line":49,"column":12},"end":{"line":49,"column":35}},"12":{"start":{"line":50,"column":8},"end":{"line":50,"column":36}},"13":{"start":{"line":51,"column":8},"end":{"line":51,"column":31}},"14":{"start":{"line":52,"column":8},"end":{"line":52,"column":27}},"15":{"start":{"line":53,"column":8},"end":{"line":53,"column":61}},"16":{"start":{"line":70,"column":8},"end":{"line":70,"column":87}},"17":{"start":{"line":71,"column":8},"end":{"line":71,"column":33}},"18":{"start":{"line":75,"column":8},"end":{"line":75,"column":28}},"19":{"start":{"line":81,"column":21},"end":{"line":81,"column":23}},"20":{"start":{"line":82,"column":8},"end":{"line":95,"column":9}},"21":{"start":{"line":83,"column":12},"end":{"line":83,"column":77}},"22":{"start":{"line":84,"column":12},"end":{"line":91,"column":15}},"23":{"start":{"line":85,"column":16},"end":{"line":90,"column":17}},"24":{"start":{"line":86,"column":20},"end":{"line":88,"column":21}},"25":{"start":{"line":87,"column":24},"end":{"line":87,"column":184}},"26":{"start":{"line":89,"column":20},"end":{"line":89,"column":109}},"27":{"start":{"line":92,"column":12},"end":{"line":94,"column":13}},"28":{"start":{"line":93,"column":16},"end":{"line":93,"column":111}},"29":{"start":{"line":96,"column":8},"end":{"line":96,"column":22}},"30":{"start":{"line":102,"column":29},"end":{"line":102,"column":31}},"31":{"start":{"line":103,"column":8},"end":{"line":113,"column":9}},"32":{"start":{"line":104,"column":12},"end":{"line":112,"column":15}},"33":{"start":{"line":105,"column":16},"end":{"line":111,"column":17}},"34":{"start":{"line":106,"column":20},"end":{"line":106,"column":87}},"35":{"start":{"line":107,"column":20},"end":{"line":107,"column":105}},"36":{"start":{"line":110,"column":20},"end":{"line":110,"column":175}},"37":{"start":{"line":114,"column":8},"end":{"line":114,"column":28}},"38":{"start":{"line":117,"column":0},"end":{"line":117,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":28,"column":4},"end":{"line":28,"column":5}},"loc":{"start":{"line":28,"column":28},"end":{"line":32,"column":5}},"line":28},"1":{"name":"(anonymous_1)","decl":{"start":{"line":42,"column":4},"end":{"line":42,"column":5}},"loc":{"start":{"line":44,"column":61},"end":{"line":54,"column":5}},"line":44},"2":{"name":"(anonymous_2)","decl":{"start":{"line":69,"column":4},"end":{"line":69,"column":5}},"loc":{"start":{"line":69,"column":68},"end":{"line":72,"column":5}},"line":69},"3":{"name":"(anonymous_3)","decl":{"start":{"line":74,"column":4},"end":{"line":74,"column":5}},"loc":{"start":{"line":74,"column":14},"end":{"line":76,"column":5}},"line":74},"4":{"name":"(anonymous_4)","decl":{"start":{"line":80,"column":4},"end":{"line":80,"column":5}},"loc":{"start":{"line":80,"column":24},"end":{"line":97,"column":5}},"line":80},"5":{"name":"(anonymous_5)","decl":{"start":{"line":84,"column":55},"end":{"line":84,"column":56}},"loc":{"start":{"line":84,"column":71},"end":{"line":91,"column":13}},"line":84},"6":{"name":"(anonymous_6)","decl":{"start":{"line":101,"column":4},"end":{"line":101,"column":5}},"loc":{"start":{"line":101,"column":55},"end":{"line":115,"column":5}},"line":101},"7":{"name":"(anonymous_7)","decl":{"start":{"line":104,"column":50},"end":{"line":104,"column":51}},"loc":{"start":{"line":104,"column":64},"end":{"line":112,"column":13}},"line":104}},"branchMap":{"0":{"loc":{"start":{"line":48,"column":8},"end":{"line":49,"column":35}},"type":"if","locations":[{"start":{"line":48,"column":8},"end":{"line":49,"column":35}},{"start":{"line":48,"column":8},"end":{"line":49,"column":35}}],"line":48},"1":{"loc":{"start":{"line":82,"column":8},"end":{"line":95,"column":9}},"type":"if","locations":[{"start":{"line":82,"column":8},"end":{"line":95,"column":9}},{"start":{"line":82,"column":8},"end":{"line":95,"column":9}}],"line":82},"2":{"loc":{"start":{"line":85,"column":16},"end":{"line":90,"column":17}},"type":"if","locations":[{"start":{"line":85,"column":16},"end":{"line":90,"column":17}},{"start":{"line":85,"column":16},"end":{"line":90,"column":17}}],"line":85},"3":{"loc":{"start":{"line":86,"column":20},"end":{"line":88,"column":21}},"type":"if","locations":[{"start":{"line":86,"column":20},"end":{"line":88,"column":21}},{"start":{"line":86,"column":20},"end":{"line":88,"column":21}}],"line":86},"4":{"loc":{"start":{"line":92,"column":12},"end":{"line":94,"column":13}},"type":"if","locations":[{"start":{"line":92,"column":12},"end":{"line":94,"column":13}},{"start":{"line":92,"column":12},"end":{"line":94,"column":13}}],"line":92},"5":{"loc":{"start":{"line":103,"column":8},"end":{"line":113,"column":9}},"type":"if","locations":[{"start":{"line":103,"column":8},"end":{"line":113,"column":9}},{"start":{"line":103,"column":8},"end":{"line":113,"column":9}}],"line":103}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":1},"f":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/instrumentation/base-plugin.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/instrumentation/base-plugin.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as path from 'path';\nimport * as semver from 'semver';\nimport { noopLogger } from '../../common/noop-logger';\nimport { Logger } from '../../common/types';\nimport { Stats } from '../../stats/types';\nimport * as modelTypes from '../model/types';\nimport * as types from './types';\n\n/**\n * Maps a name (key) representing a internal file module and its exports\n */\nexport interface ModuleExportsMapping {\n  // tslint:disable-next-line:no-any\n  [key: string]: any;\n}\n\n/** This class represent the base to patch plugin. */\nexport abstract class BasePlugin implements types.Plugin {\n  /** Exports from the nodejs module to be instrumented */\n  // tslint:disable-next-line:no-any\n  protected moduleExports: any;\n  /** The module name */\n  protected moduleName: string;\n  /** A tracer object. */\n  protected tracer!: modelTypes.Tracer;\n  /** The module version. */\n  protected version!: string;\n  /** a logger */\n  protected logger: Logger = noopLogger;\n  /** list of internal files that need patch and are not exported by default */\n  protected readonly internalFileList!: types.PluginInternalFiles;\n  /**  internal files loaded */\n  protected internalFilesExports!: ModuleExportsMapping;\n  /** module directory - used to load internal files */\n  protected basedir!: string;\n  /** plugin options */\n  protected options!: types.PluginConfig;\n  /** A stats object. */\n  protected stats?: Stats;\n\n  /**\n   * Constructs a new BasePlugin instance.\n   * @param moduleName The module name.\n   */\n  constructor(moduleName: string) {\n    this.moduleName = moduleName;\n  }\n\n  /**\n   * Sets modified plugin to the context.\n   * @param moduleExports nodejs module exports to set as context\n   * @param tracer tracer relating to context\n   * @param version module version description\n   * @param options plugin options\n   * @param basedir module absolute path\n   * @param stats a stats instance\n   */\n  private setPluginContext(\n    // tslint:disable-next-line:no-any\n    moduleExports: any,\n    tracer: modelTypes.Tracer,\n    version: string,\n    options: types.PluginConfig,\n    basedir?: string,\n    stats?: Stats\n  ) {\n    this.moduleExports = moduleExports;\n    this.tracer = tracer;\n    this.version = version;\n    if (basedir) this.basedir = basedir;\n    this.logger = tracer.logger;\n    this.options = options;\n    this.stats = stats;\n    this.internalFilesExports = this.loadInternalFiles();\n  }\n\n  /**\n   * Method that enables the instrumentation patch.\n   *\n   * This method implements the GoF Template Method Pattern\n   * 'enable' is the invariant part of the pattern and\n   * 'applyPatch' the variant.\n   *\n   * @param moduleExports nodejs module exports from the module to patch\n   * @param tracer a tracer instance\n   * @param version version of the current instaled module to patch\n   * @param options plugin options\n   * @param basedir an optional module absolute path\n   * @param stats an optional stats instance\n   */\n  enable<T>(\n    moduleExports: T,\n    tracer: modelTypes.Tracer,\n    version: string,\n    options: types.PluginConfig,\n    basedir?: string,\n    stats?: Stats\n  ) {\n    this.setPluginContext(\n      moduleExports,\n      tracer,\n      version,\n      options,\n      basedir,\n      stats\n    );\n    return this.applyPatch();\n  }\n\n  /** Method to disable the instrumentation  */\n  disable() {\n    this.applyUnpatch();\n  }\n\n  /**\n   * This method implements the GoF Template Method Pattern,\n   * 'applyPatch' is the variant part, each instrumentation should\n   * implement its own version, 'enable' method is the invariant.\n   * It will be called when enable is called.\n   *\n   */\n  // tslint:disable-next-line:no-any\n  protected abstract applyPatch(): any;\n  protected abstract applyUnpatch(): void;\n\n  /**\n   * Load internal files according to version range\n   */\n  private loadInternalFiles(): ModuleExportsMapping {\n    let result: ModuleExportsMapping = {};\n    if (this.internalFileList) {\n      this.logger.debug('loadInternalFiles %o', this.internalFileList);\n      Object.keys(this.internalFileList).forEach(versionRange => {\n        if (semver.satisfies(this.version, versionRange)) {\n          if (result) {\n            this.logger.warn(\n              'Plugin for %s@%s, has overlap version range (%s) for internal files: %o',\n              this.moduleName,\n              this.version,\n              versionRange,\n              this.internalFileList\n            );\n          }\n          result = this.loadInternalModuleFiles(\n            this.internalFileList[versionRange],\n            this.basedir\n          );\n        }\n      });\n      if (Object.keys(result).length === 0) {\n        this.logger.debug(\n          'No internal file could be loaded for %s@%s',\n          this.moduleName,\n          this.version\n        );\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Load internal files from a module and  set internalFilesExports\n   */\n  private loadInternalModuleFiles(\n    extraModulesList: types.PluginInternalFilesVersion,\n    basedir: string\n  ): ModuleExportsMapping {\n    const extraModules: ModuleExportsMapping = {};\n    if (extraModulesList) {\n      Object.keys(extraModulesList).forEach(moduleName => {\n        try {\n          this.logger.debug('loading File %s', extraModulesList[moduleName]);\n          extraModules[moduleName] = require(path.join(\n            basedir,\n            extraModulesList[moduleName]\n          ));\n        } catch (e) {\n          this.logger.error(\n            'Could not load internal file %s of module %s. Error: %s',\n            path.join(basedir, extraModulesList[moduleName]),\n            this.moduleName,\n            e.message\n          );\n        }\n      });\n    }\n    return extraModules;\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"336db10be7e0d09ca3533cc6137e62a34f4d23b6","contentHash":"483e7311c34d4637deaf808c5653699a43b7d65f2faa26253d5940ed37c4a7d2"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/exporters/exporter-buffer.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/exporters/exporter-buffer.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":32}},"2":{"start":{"line":19,"column":15},"end":{"line":19,"column":50}},"3":{"start":{"line":20,"column":28},"end":{"line":20,"column":31}},"4":{"start":{"line":21,"column":31},"end":{"line":21,"column":36}},"5":{"start":{"line":31,"column":8},"end":{"line":31,"column":34}},"6":{"start":{"line":33,"column":8},"end":{"line":33,"column":45}},"7":{"start":{"line":35,"column":8},"end":{"line":35,"column":24}},"8":{"start":{"line":36,"column":8},"end":{"line":36,"column":33}},"9":{"start":{"line":37,"column":8},"end":{"line":37,"column":55}},"10":{"start":{"line":38,"column":8},"end":{"line":40,"column":40}},"11":{"start":{"line":41,"column":8},"end":{"line":43,"column":43}},"12":{"start":{"line":44,"column":8},"end":{"line":44,"column":20}},"13":{"start":{"line":51,"column":8},"end":{"line":51,"column":37}},"14":{"start":{"line":52,"column":8},"end":{"line":52,"column":20}},"15":{"start":{"line":55,"column":8},"end":{"line":55,"column":31}},"16":{"start":{"line":58,"column":8},"end":{"line":58,"column":26}},"17":{"start":{"line":65,"column":8},"end":{"line":65,"column":30}},"18":{"start":{"line":66,"column":8},"end":{"line":66,"column":60}},"19":{"start":{"line":67,"column":8},"end":{"line":69,"column":9}},"20":{"start":{"line":68,"column":12},"end":{"line":68,"column":25}},"21":{"start":{"line":70,"column":8},"end":{"line":75,"column":9}},"22":{"start":{"line":71,"column":12},"end":{"line":71,"column":38}},"23":{"start":{"line":74,"column":12},"end":{"line":74,"column":36}},"24":{"start":{"line":76,"column":8},"end":{"line":76,"column":20}},"25":{"start":{"line":80,"column":8},"end":{"line":80,"column":59}},"26":{"start":{"line":81,"column":8},"end":{"line":81,"column":33}},"27":{"start":{"line":85,"column":8},"end":{"line":85,"column":57}},"28":{"start":{"line":86,"column":8},"end":{"line":86,"column":44}},"29":{"start":{"line":87,"column":22},"end":{"line":99,"column":30}},"30":{"start":{"line":88,"column":12},"end":{"line":90,"column":13}},"31":{"start":{"line":89,"column":16},"end":{"line":89,"column":23}},"32":{"start":{"line":91,"column":12},"end":{"line":98,"column":13}},"33":{"start":{"line":92,"column":16},"end":{"line":92,"column":42}},"34":{"start":{"line":93,"column":16},"end":{"line":93,"column":40}},"35":{"start":{"line":96,"column":16},"end":{"line":96,"column":53}},"36":{"start":{"line":97,"column":16},"end":{"line":97,"column":29}},"37":{"start":{"line":101,"column":8},"end":{"line":101,"column":22}},"38":{"start":{"line":105,"column":8},"end":{"line":105,"column":42}},"39":{"start":{"line":106,"column":8},"end":{"line":106,"column":24}},"40":{"start":{"line":107,"column":8},"end":{"line":107,"column":20}},"41":{"start":{"line":110,"column":0},"end":{"line":110,"column":40}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":29,"column":4},"end":{"line":29,"column":5}},"loc":{"start":{"line":29,"column":34},"end":{"line":45,"column":5}},"line":29},"1":{"name":"(anonymous_1)","decl":{"start":{"line":50,"column":4},"end":{"line":50,"column":5}},"loc":{"start":{"line":50,"column":30},"end":{"line":53,"column":5}},"line":50},"2":{"name":"(anonymous_2)","decl":{"start":{"line":54,"column":4},"end":{"line":54,"column":5}},"loc":{"start":{"line":54,"column":20},"end":{"line":56,"column":5}},"line":54},"3":{"name":"(anonymous_3)","decl":{"start":{"line":57,"column":4},"end":{"line":57,"column":5}},"loc":{"start":{"line":57,"column":15},"end":{"line":59,"column":5}},"line":57},"4":{"name":"(anonymous_4)","decl":{"start":{"line":64,"column":4},"end":{"line":64,"column":5}},"loc":{"start":{"line":64,"column":22},"end":{"line":77,"column":5}},"line":64},"5":{"name":"(anonymous_5)","decl":{"start":{"line":79,"column":4},"end":{"line":79,"column":5}},"loc":{"start":{"line":79,"column":25},"end":{"line":82,"column":5}},"line":79},"6":{"name":"(anonymous_6)","decl":{"start":{"line":84,"column":4},"end":{"line":84,"column":5}},"loc":{"start":{"line":84,"column":23},"end":{"line":102,"column":5}},"line":84},"7":{"name":"(anonymous_7)","decl":{"start":{"line":87,"column":33},"end":{"line":87,"column":34}},"loc":{"start":{"line":87,"column":39},"end":{"line":99,"column":9}},"line":87},"8":{"name":"(anonymous_8)","decl":{"start":{"line":104,"column":4},"end":{"line":104,"column":5}},"loc":{"start":{"line":104,"column":12},"end":{"line":108,"column":5}},"line":104}},"branchMap":{"0":{"loc":{"start":{"line":37,"column":22},"end":{"line":37,"column":54}},"type":"binary-expr","locations":[{"start":{"line":37,"column":22},"end":{"line":37,"column":35}},{"start":{"line":37,"column":39},"end":{"line":37,"column":54}}],"line":37},"1":{"loc":{"start":{"line":38,"column":26},"end":{"line":40,"column":39}},"type":"cond-expr","locations":[{"start":{"line":39,"column":14},"end":{"line":39,"column":33}},{"start":{"line":40,"column":14},"end":{"line":40,"column":39}}],"line":38},"2":{"loc":{"start":{"line":41,"column":29},"end":{"line":43,"column":42}},"type":"cond-expr","locations":[{"start":{"line":42,"column":14},"end":{"line":42,"column":36}},{"start":{"line":43,"column":14},"end":{"line":43,"column":42}}],"line":41},"3":{"loc":{"start":{"line":67,"column":8},"end":{"line":69,"column":9}},"type":"if","locations":[{"start":{"line":67,"column":8},"end":{"line":69,"column":9}},{"start":{"line":67,"column":8},"end":{"line":69,"column":9}}],"line":67},"4":{"loc":{"start":{"line":70,"column":8},"end":{"line":75,"column":9}},"type":"if","locations":[{"start":{"line":70,"column":8},"end":{"line":75,"column":9}},{"start":{"line":70,"column":8},"end":{"line":75,"column":9}}],"line":70},"5":{"loc":{"start":{"line":88,"column":12},"end":{"line":90,"column":13}},"type":"if","locations":[{"start":{"line":88,"column":12},"end":{"line":90,"column":13}},{"start":{"line":88,"column":12},"end":{"line":90,"column":13}}],"line":88},"6":{"loc":{"start":{"line":91,"column":12},"end":{"line":98,"column":13}},"type":"if","locations":[{"start":{"line":91,"column":12},"end":{"line":98,"column":13}},{"start":{"line":91,"column":12},"end":{"line":98,"column":13}}],"line":91}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":7,"6":7,"7":7,"8":7,"9":7,"10":7,"11":7,"12":7,"13":1,"14":1,"15":2,"16":5,"17":8,"18":8,"19":8,"20":2,"21":8,"22":4,"23":4,"24":8,"25":4,"26":4,"27":4,"28":4,"29":4,"30":3,"31":1,"32":2,"33":0,"34":0,"35":2,"36":2,"37":4,"38":4,"39":4,"40":4,"41":1},"f":{"0":7,"1":1,"2":2,"3":5,"4":8,"5":4,"6":4,"7":3,"8":4},"b":{"0":[7,2],"1":[0,7],"2":[0,7],"3":[2,6],"4":[4,4],"5":[1,2],"6":[0,2]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/exporters/exporter-buffer.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/exporters/exporter-buffer.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,mDAAmD;AAMnD,MAAM,mBAAmB,GAAG,GAAG,CAAC;AAChC,MAAM,sBAAsB,GAAG,KAAK,CAAC;AAErC,mDAAmD;AACnD,MAAa,cAAc;IAgBzB;;;;OAIG;IACH,YAAY,QAAwB,EAAE,MAAgC;QAdtE,yDAAyD;QACjD,iBAAY,GAAG,KAAK,CAAC;QAC7B,mDAAmD;QAC3C,4BAAuB,GAAG,KAAK,CAAC;QAGxC,8BAA8B;QACtB,UAAK,GAAsB,EAAE,CAAC;QAQpC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;QAC/C,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YAChD,CAAC,CAAC,mBAAmB;YACrB,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QAC9B,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;YACtD,CAAC,CAAC,sBAAsB;YACxB,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QACjC,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;OAGG;IACH,aAAa,CAAC,UAAkB;QAC9B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,OAAO,IAAI,CAAC;IACd,CAAC;IAED,aAAa;QACX,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED;;;OAGG;IACH,WAAW,CAAC,IAAqB;QAC/B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC;QAEpD,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,EAAE;YACvC,IAAI,CAAC,KAAK,EAAE,CAAC;SACd;QAED,IAAI,IAAI,CAAC,uBAAuB,EAAE;YAChC,IAAI,CAAC,kBAAkB,EAAE,CAAC;SAC3B;aAAM;YACL,IAAI,CAAC,gBAAgB,EAAE,CAAC;SACzB;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED,+BAA+B;IACvB,kBAAkB;QACxB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC;QACnD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;IAC3B,CAAC;IAED,iEAAiE;IACzD,gBAAgB;QACtB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,6BAA6B,CAAC,CAAC;QACjD,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC;QAEpC,MAAM,KAAK,GAAG,UAAU,CAAC,GAAG,EAAE;YAC5B,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC3B,OAAO;aACR;YAED,IAAI,IAAI,CAAC,YAAY,EAAE;gBACrB,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;gBAC1B,IAAI,CAAC,gBAAgB,EAAE,CAAC;aACzB;iBAAM;gBACL,IAAI,CAAC,uBAAuB,GAAG,KAAK,CAAC;gBACrC,IAAI,CAAC,KAAK,EAAE,CAAC;aACd;QACH,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QACvB,mEAAmE;QACnE,KAAK,CAAC,KAAK,EAAE,CAAC;IAChB,CAAC;IAED,4CAA4C;IACpC,KAAK;QACX,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAClC,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAzGD,wCAyGC","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as logger from '../common/console-logger';\nimport * as loggerTypes from '../common/types';\nimport * as configTypes from '../trace/config/types';\nimport * as modelTypes from '../trace/model/types';\nimport * as types from './types';\n\nconst DEFAULT_BUFFER_SIZE = 100;\nconst DEFAULT_BUFFER_TIMEOUT = 20000;\n\n/** Controls the sending of traces to exporters. */\nexport class ExporterBuffer {\n  /** The service to send the collected spans. */\n  private exporter: types.Exporter;\n  /** Maximum size of a buffer. */\n  private bufferSize: number;\n  /** Max time for a buffer can wait before being sent */\n  private bufferTimeout: number;\n  /** Manage when the buffer timeout needs to be reseted */\n  private resetTimeout = false;\n  /** Indicates when the buffer timeout is running */\n  private bufferTimeoutInProgress = false;\n  /** An object to log information to */\n  private logger: loggerTypes.Logger;\n  /** Trace queue of a buffer */\n  private queue: modelTypes.Span[] = [];\n\n  /**\n   * Constructs a new Buffer instance.\n   * @param exporter The service to send the collected spans.\n   * @param config A buffer configuration object to create a buffer.\n   */\n  constructor(exporter: types.Exporter, config: configTypes.BufferConfig) {\n    this.exporter = exporter;\n    this.logger = config.logger || logger.logger();\n    this.bufferSize = isNaN(Number(config.bufferSize))\n      ? DEFAULT_BUFFER_SIZE\n      : Number(config.bufferSize);\n    this.bufferTimeout = isNaN(Number(config.bufferTimeout))\n      ? DEFAULT_BUFFER_TIMEOUT\n      : Number(config.bufferTimeout);\n    return this;\n  }\n\n  /**\n   * Set the buffer size value.\n   * @param bufferSize The new buffer size.\n   */\n  setBufferSize(bufferSize: number) {\n    this.bufferSize = bufferSize;\n    return this;\n  }\n\n  getBufferSize(): number {\n    return this.bufferSize;\n  }\n\n  getQueue(): modelTypes.Span[] {\n    return this.queue;\n  }\n\n  /**\n   * Add a span in the buffer.\n   * @param span Span to be added in the buffer.\n   */\n  addToBuffer(span: modelTypes.Span) {\n    this.queue.push(span);\n    this.logger.debug('ExporterBuffer: added new span');\n\n    if (this.queue.length > this.bufferSize) {\n      this.flush();\n    }\n\n    if (this.bufferTimeoutInProgress) {\n      this.resetBufferTimeout();\n    } else {\n      this.setBufferTimeout();\n    }\n\n    return this;\n  }\n\n  /** Reset the buffer timeout */\n  private resetBufferTimeout() {\n    this.logger.debug('ExporterBuffer: reset timeout');\n    this.resetTimeout = true;\n  }\n\n  /** Start the buffer timeout, when finished calls flush method */\n  private setBufferTimeout() {\n    this.logger.debug('ExporterBuffer: set timeout');\n    this.bufferTimeoutInProgress = true;\n\n    const timer = setTimeout(() => {\n      if (this.queue.length === 0) {\n        return;\n      }\n\n      if (this.resetTimeout) {\n        this.resetTimeout = false;\n        this.setBufferTimeout();\n      } else {\n        this.bufferTimeoutInProgress = false;\n        this.flush();\n      }\n    }, this.bufferTimeout);\n    // Don't let this timer be the only thing keeping the process alive\n    timer.unref();\n  }\n\n  /** Send the trace queue to all exporters */\n  private flush() {\n    this.exporter.publish(this.queue);\n    this.queue = [];\n    return this;\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d44d378b5ec23088ca451e1ac9001f795319141f","contentHash":"2c207b0a9ec28c2c8abfc1d4126d407db68baca49083e3d266af211d1e8aa6fc"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/exporters/console-exporter.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/exporters/console-exporter.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":87}},"2":{"start":{"line":19,"column":26},"end":{"line":19,"column":54}},"3":{"start":{"line":20,"column":15},"end":{"line":20,"column":50}},"4":{"start":{"line":26,"column":8},"end":{"line":26,"column":33}},"5":{"start":{"line":29,"column":0},"end":{"line":29,"column":36}},"6":{"start":{"line":38,"column":8},"end":{"line":38,"column":73}},"7":{"start":{"line":39,"column":8},"end":{"line":39,"column":55}},"8":{"start":{"line":49,"column":8},"end":{"line":50,"column":19}},"9":{"start":{"line":50,"column":12},"end":{"line":50,"column":19}},"10":{"start":{"line":51,"column":8},"end":{"line":51,"column":38}},"11":{"start":{"line":58,"column":8},"end":{"line":64,"column":11}},"12":{"start":{"line":59,"column":29},"end":{"line":59,"column":108}},"13":{"start":{"line":60,"column":30},"end":{"line":60,"column":116}},"14":{"start":{"line":60,"column":54},"end":{"line":60,"column":115}},"15":{"start":{"line":61,"column":27},"end":{"line":61,"column":29}},"16":{"start":{"line":62,"column":12},"end":{"line":62,"column":84}},"17":{"start":{"line":63,"column":12},"end":{"line":63,"column":37}},"18":{"start":{"line":65,"column":8},"end":{"line":65,"column":33}},"19":{"start":{"line":68,"column":0},"end":{"line":68,"column":42}},"20":{"start":{"line":76,"column":8},"end":{"line":76,"column":95}},"21":{"start":{"line":85,"column":8},"end":{"line":85,"column":73}},"22":{"start":{"line":97,"column":0},"end":{"line":97,"column":52}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":23,"column":4},"end":{"line":23,"column":5}},"loc":{"start":{"line":23,"column":22},"end":{"line":23,"column":25}},"line":23},"1":{"name":"(anonymous_1)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":20},"end":{"line":24,"column":23}},"line":24},"2":{"name":"(anonymous_2)","decl":{"start":{"line":25,"column":4},"end":{"line":25,"column":5}},"loc":{"start":{"line":25,"column":19},"end":{"line":27,"column":5}},"line":25},"3":{"name":"(anonymous_3)","decl":{"start":{"line":37,"column":4},"end":{"line":37,"column":5}},"loc":{"start":{"line":37,"column":24},"end":{"line":40,"column":5}},"line":37},"4":{"name":"(anonymous_4)","decl":{"start":{"line":41,"column":4},"end":{"line":41,"column":5}},"loc":{"start":{"line":41,"column":22},"end":{"line":41,"column":25}},"line":41},"5":{"name":"(anonymous_5)","decl":{"start":{"line":46,"column":4},"end":{"line":46,"column":5}},"loc":{"start":{"line":46,"column":20},"end":{"line":52,"column":5}},"line":46},"6":{"name":"(anonymous_6)","decl":{"start":{"line":57,"column":4},"end":{"line":57,"column":5}},"loc":{"start":{"line":57,"column":19},"end":{"line":66,"column":5}},"line":57},"7":{"name":"(anonymous_7)","decl":{"start":{"line":58,"column":18},"end":{"line":58,"column":19}},"loc":{"start":{"line":58,"column":26},"end":{"line":64,"column":9}},"line":58},"8":{"name":"(anonymous_8)","decl":{"start":{"line":60,"column":45},"end":{"line":60,"column":46}},"loc":{"start":{"line":60,"column":54},"end":{"line":60,"column":115}},"line":60},"9":{"name":"(anonymous_9)","decl":{"start":{"line":75,"column":4},"end":{"line":75,"column":5}},"loc":{"start":{"line":75,"column":25},"end":{"line":77,"column":5}},"line":75},"10":{"name":"(anonymous_10)","decl":{"start":{"line":84,"column":4},"end":{"line":84,"column":5}},"loc":{"start":{"line":84,"column":39},"end":{"line":86,"column":5}},"line":84},"11":{"name":"(anonymous_11)","decl":{"start":{"line":91,"column":4},"end":{"line":91,"column":5}},"loc":{"start":{"line":91,"column":12},"end":{"line":93,"column":5}},"line":91},"12":{"name":"(anonymous_12)","decl":{"start":{"line":95,"column":4},"end":{"line":95,"column":5}},"loc":{"start":{"line":95,"column":11},"end":{"line":95,"column":14}},"line":95}},"branchMap":{"0":{"loc":{"start":{"line":39,"column":22},"end":{"line":39,"column":54}},"type":"binary-expr","locations":[{"start":{"line":39,"column":22},"end":{"line":39,"column":35}},{"start":{"line":39,"column":39},"end":{"line":39,"column":54}}],"line":39},"1":{"loc":{"start":{"line":49,"column":8},"end":{"line":50,"column":19}},"type":"if","locations":[{"start":{"line":49,"column":8},"end":{"line":50,"column":19}},{"start":{"line":49,"column":8},"end":{"line":50,"column":19}}],"line":49}},"s":{"0":1,"1":1,"2":1,"3":1,"4":4,"5":1,"6":2,"7":2,"8":2,"9":0,"10":2,"11":2,"12":3,"13":3,"14":1,"15":3,"16":3,"17":3,"18":2,"19":1,"20":0,"21":0,"22":1},"f":{"0":0,"1":1,"2":4,"3":2,"4":0,"5":2,"6":2,"7":3,"8":1,"9":0,"10":0,"11":0,"12":0},"b":{"0":[2,2],"1":[0,2]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/exporters/console-exporter.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/exporters/console-exporter.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAMH,uDAAmD;AACnD,mDAAmD;AAGnD,4BAA4B;AAC5B,MAAa,YAAY;IAEvB,WAAW,CAAC,IAAqB,IAAG,CAAC;IACrC,SAAS,CAAC,IAAqB,IAAG,CAAC;IACnC,OAAO,CAAC,KAAwB;QAC9B,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;CACF;AAPD,oCAOC;AAED,iDAAiD;AACjD,MAAa,eAAe;IAK1B;;;;OAIG;IACH,YAAY,MAAsB;QAChC,IAAI,CAAC,MAAM,GAAG,IAAI,gCAAc,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAC/C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;IACjD,CAAC;IAED,WAAW,CAAC,IAAqB,IAAG,CAAC;IAErC;;;OAGG;IACH,SAAS,CAAC,IAAqB;QAC7B,yEAAyE;QACzE,uDAAuD;QACvD,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YAAE,OAAO;QAC/B,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IAED;;;OAGG;IACH,OAAO,CAAC,KAAwB;QAC9B,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACf,MAAM,QAAQ,GAAG,uBAAuB,IAAI,CAAC,OAAO,aAAa,IAAI,CAAC,EAAE,WAAW,IAAI,CAAC,IAAI,IAAI,CAAC;YACjG,MAAM,SAAS,GAAa,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CACjD,CAAC,gBAAgB,KAAK,CAAC,EAAE,WAAW,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAC9D,CAAC;YAEF,MAAM,MAAM,GAAa,EAAE,CAAC;YAC5B,MAAM,CAAC,IAAI,CAAC,QAAQ,GAAG,mBAAmB,GAAG,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACxE,OAAO,CAAC,GAAG,CAAC,GAAG,MAAM,EAAE,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;QACH,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;CACF;AA7CD,0CA6CC;AAED,sEAAsE;AACtE,MAAa,oBAAoB;IAC/B;;;OAGG;IACH,cAAc,CAAC,IAAU;QACvB,OAAO,CAAC,GAAG,CACT,oBAAoB,IAAI,CAAC,IAAI,yBAAyB,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAC1E,CAAC;IACJ,CAAC;IACD;;;;;OAKG;IACH,QAAQ,CACN,KAAa,EACb,WAAwB,EACxB,IAA2B;QAE3B,OAAO,CAAC,GAAG,CAAC,yBAAyB,WAAW,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;IACnE,CAAC;IAED;;;OAGG;IACH,KAAK;QACH,2CAA2C;IAC7C,CAAC;IAED,0BAA0B;IAC1B,IAAI,KAAU,CAAC;CAChB;AAlCD,oDAkCC","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as loggerTypes from '../common/types';\nimport { Measurement, View } from '../stats/types';\nimport { TagKey, TagValue } from '../tags/types';\nimport * as modelTypes from '../trace/model/types';\nimport { ExporterBuffer } from './exporter-buffer';\nimport * as logger from '../common/console-logger';\nimport { Exporter, ExporterConfig, StatsEventListener } from './types';\n\n/** Do not send span data */\nexport class NoopExporter implements Exporter {\n  logger?: loggerTypes.Logger;\n  onStartSpan(span: modelTypes.Span) {}\n  onEndSpan(span: modelTypes.Span) {}\n  publish(spans: modelTypes.Span[]) {\n    return Promise.resolve();\n  }\n}\n\n/** Format and sends span data to the console. */\nexport class ConsoleExporter implements Exporter {\n  /** Buffer object to store the spans. */\n  logger: loggerTypes.Logger;\n  private buffer: ExporterBuffer;\n\n  /**\n   * Constructs a new ConsoleExporter instance.\n   * @param config Exporter configuration object to create a console log\n   *     exporter.\n   */\n  constructor(config: ExporterConfig) {\n    this.buffer = new ExporterBuffer(this, config);\n    this.logger = config.logger || logger.logger();\n  }\n\n  onStartSpan(span: modelTypes.Span) {}\n\n  /**\n   * Event called when a span is ended.\n   * @param span Ended span.\n   */\n  onEndSpan(span: modelTypes.Span) {\n    // Add spans of a trace together when root is ended, skip non root spans.\n    // publish function will extract child spans from root.\n    if (!span.isRootSpan()) return;\n    this.buffer.addToBuffer(span);\n  }\n\n  /**\n   * Sends the spans information to the console.\n   * @param spans A list of spans to publish.\n   */\n  publish(spans: modelTypes.Span[]) {\n    spans.map(span => {\n      const ROOT_STR = `RootSpan: {traceId: ${span.traceId}, spanId: ${span.id}, name: ${span.name} }`;\n      const SPANS_STR: string[] = span.spans.map(child =>\n        [`\\t\\t{spanId: ${child.id}, name: ${child.name}}`].join('\\n')\n      );\n\n      const result: string[] = [];\n      result.push(ROOT_STR + '\\n\\tChildSpans:\\n' + `${SPANS_STR.join('\\n')}`);\n      console.log(`${result}`);\n    });\n    return Promise.resolve();\n  }\n}\n\n/** Exporter that receives stats data and shows in the log console. */\nexport class ConsoleStatsExporter implements StatsEventListener {\n  /**\n   * Event called when a view is registered\n   * @param view registered view\n   */\n  onRegisterView(view: View) {\n    console.log(\n      `View registered: ${view.name}, Measure registered: ${view.measure.name}`\n    );\n  }\n  /**\n   * Event called when a measurement is recorded\n   * @param view recorded view from measurement\n   * @param measurement recorded measurement\n   * @param tags The tags to which the value is applied\n   */\n  onRecord(\n    views: View[],\n    measurement: Measurement,\n    tags: Map<TagKey, TagValue>\n  ) {\n    console.log(`Measurement recorded: ${measurement.measure.name}`);\n  }\n\n  /**\n   * Starts the Console exporter that polls Metric from Metrics library and\n   * shows in the log console..\n   */\n  start(): void {\n    // TODO(mayurkale): dependency with PR#253.\n  }\n\n  /** Stops the exporter. */\n  stop(): void {}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b0bfc896c2109dacee73e810a3a54c727146adf6","contentHash":"5910e0eafdcb06c2f355ee9817d0534d732c654692a717dd702c68e8300f1533"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/view.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/view.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":26}},"2":{"start":{"line":19,"column":22},"end":{"line":19,"column":57}},"3":{"start":{"line":20,"column":20},"end":{"line":20,"column":50}},"4":{"start":{"line":21,"column":16},"end":{"line":21,"column":50}},"5":{"start":{"line":22,"column":21},"end":{"line":22,"column":50}},"6":{"start":{"line":23,"column":28},"end":{"line":23,"column":58}},"7":{"start":{"line":24,"column":23},"end":{"line":24,"column":48}},"8":{"start":{"line":25,"column":19},"end":{"line":25,"column":40}},"9":{"start":{"line":26,"column":16},"end":{"line":26,"column":34}},"10":{"start":{"line":27,"column":25},"end":{"line":27,"column":48}},"11":{"start":{"line":52,"column":8},"end":{"line":52,"column":41}},"12":{"start":{"line":54,"column":8},"end":{"line":54,"column":32}},"13":{"start":{"line":55,"column":8},"end":{"line":57,"column":9}},"14":{"start":{"line":56,"column":12},"end":{"line":56,"column":61}},"15":{"start":{"line":58,"column":8},"end":{"line":58,"column":38}},"16":{"start":{"line":59,"column":8},"end":{"line":59,"column":25}},"17":{"start":{"line":60,"column":8},"end":{"line":60,"column":39}},"18":{"start":{"line":61,"column":8},"end":{"line":61,"column":31}},"19":{"start":{"line":62,"column":8},"end":{"line":62,"column":54}},"20":{"start":{"line":63,"column":8},"end":{"line":63,"column":39}},"21":{"start":{"line":64,"column":8},"end":{"line":64,"column":36}},"22":{"start":{"line":65,"column":8},"end":{"line":67,"column":9}},"23":{"start":{"line":66,"column":12},"end":{"line":66,"column":95}},"24":{"start":{"line":68,"column":8},"end":{"line":68,"column":88}},"25":{"start":{"line":72,"column":8},"end":{"line":72,"column":28}},"26":{"start":{"line":86,"column":26},"end":{"line":86,"column":83}},"27":{"start":{"line":87,"column":28},"end":{"line":87,"column":59}},"28":{"start":{"line":88,"column":8},"end":{"line":90,"column":9}},"29":{"start":{"line":89,"column":12},"end":{"line":89,"column":93}},"30":{"start":{"line":91,"column":8},"end":{"line":91,"column":111}},"31":{"start":{"line":98,"column":8},"end":{"line":101,"column":36}},"32":{"start":{"line":99,"column":30},"end":{"line":99,"column":62}},"33":{"start":{"line":108,"column":36},"end":{"line":108,"column":72}},"34":{"start":{"line":109,"column":8},"end":{"line":122,"column":9}},"35":{"start":{"line":111,"column":50},"end":{"line":111,"column":71}},"36":{"start":{"line":112,"column":36},"end":{"line":112,"column":62}},"37":{"start":{"line":113,"column":41},"end":{"line":113,"column":72}},"38":{"start":{"line":114,"column":34},"end":{"line":114,"column":64}},"39":{"start":{"line":115,"column":16},"end":{"line":115,"column":287}},"40":{"start":{"line":117,"column":16},"end":{"line":117,"column":126}},"41":{"start":{"line":119,"column":16},"end":{"line":119,"column":128}},"42":{"start":{"line":121,"column":16},"end":{"line":121,"column":133}},"43":{"start":{"line":130,"column":25},"end":{"line":130,"column":46}},"44":{"start":{"line":133,"column":20},"end":{"line":133,"column":63}},"45":{"start":{"line":134,"column":8},"end":{"line":137,"column":9}},"46":{"start":{"line":136,"column":12},"end":{"line":136,"column":68}},"47":{"start":{"line":138,"column":27},"end":{"line":138,"column":29}},"48":{"start":{"line":139,"column":8},"end":{"line":149,"column":11}},"49":{"start":{"line":140,"column":34},"end":{"line":140,"column":66}},"50":{"start":{"line":141,"column":32},"end":{"line":141,"column":92}},"51":{"start":{"line":142,"column":26},"end":{"line":142,"column":72}},"52":{"start":{"line":143,"column":12},"end":{"line":148,"column":13}},"53":{"start":{"line":144,"column":16},"end":{"line":144,"column":82}},"54":{"start":{"line":147,"column":16},"end":{"line":147,"column":66}},"55":{"start":{"line":150,"column":8},"end":{"line":150,"column":65}},"56":{"start":{"line":159,"column":8},"end":{"line":181,"column":9}},"57":{"start":{"line":160,"column":69},"end":{"line":160,"column":73}},"58":{"start":{"line":161,"column":28},"end":{"line":161,"column":30}},"59":{"start":{"line":162,"column":12},"end":{"line":168,"column":13}},"60":{"start":{"line":163,"column":16},"end":{"line":167,"column":17}},"61":{"start":{"line":163,"column":34},"end":{"line":163,"column":35}},"62":{"start":{"line":164,"column":40},"end":{"line":164,"column":65}},"63":{"start":{"line":165,"column":42},"end":{"line":165,"column":83}},"64":{"start":{"line":166,"column":20},"end":{"line":166,"column":83}},"65":{"start":{"line":169,"column":26},"end":{"line":175,"column":13}},"66":{"start":{"line":176,"column":12},"end":{"line":176,"column":40}},"67":{"start":{"line":179,"column":26},"end":{"line":179,"column":36}},"68":{"start":{"line":180,"column":12},"end":{"line":180,"column":40}},"69":{"start":{"line":189,"column":8},"end":{"line":189,"column":76}},"70":{"start":{"line":193,"column":8},"end":{"line":203,"column":9}},"71":{"start":{"line":195,"column":12},"end":{"line":202,"column":14}},"72":{"start":{"line":205,"column":8},"end":{"line":205,"column":38}},"73":{"start":{"line":209,"column":28},"end":{"line":209,"column":54}},"74":{"start":{"line":210,"column":8},"end":{"line":214,"column":11}},"75":{"start":{"line":211,"column":12},"end":{"line":213,"column":13}},"76":{"start":{"line":212,"column":16},"end":{"line":212,"column":66}},"77":{"start":{"line":215,"column":27},"end":{"line":215,"column":76}},"78":{"start":{"line":215,"column":63},"end":{"line":215,"column":74}},"79":{"start":{"line":216,"column":8},"end":{"line":218,"column":9}},"80":{"start":{"line":217,"column":12},"end":{"line":217,"column":54}},"81":{"start":{"line":219,"column":8},"end":{"line":219,"column":27}},"82":{"start":{"line":222,"column":0},"end":{"line":222,"column":28}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":45,"column":4},"end":{"line":45,"column":5}},"loc":{"start":{"line":45,"column":109},"end":{"line":69,"column":5}},"line":45},"1":{"name":"(anonymous_1)","decl":{"start":{"line":71,"column":4},"end":{"line":71,"column":5}},"loc":{"start":{"line":71,"column":17},"end":{"line":73,"column":5}},"line":71},"2":{"name":"(anonymous_2)","decl":{"start":{"line":85,"column":4},"end":{"line":85,"column":5}},"loc":{"start":{"line":85,"column":54},"end":{"line":92,"column":5}},"line":85},"3":{"name":"(anonymous_3)","decl":{"start":{"line":97,"column":4},"end":{"line":97,"column":5}},"loc":{"start":{"line":97,"column":31},"end":{"line":102,"column":5}},"line":97},"4":{"name":"(anonymous_4)","decl":{"start":{"line":99,"column":17},"end":{"line":99,"column":18}},"loc":{"start":{"line":99,"column":30},"end":{"line":99,"column":62}},"line":99},"5":{"name":"(anonymous_5)","decl":{"start":{"line":107,"column":4},"end":{"line":107,"column":5}},"loc":{"start":{"line":107,"column":37},"end":{"line":123,"column":5}},"line":107},"6":{"name":"(anonymous_6)","decl":{"start":{"line":129,"column":4},"end":{"line":129,"column":5}},"loc":{"start":{"line":129,"column":21},"end":{"line":151,"column":5}},"line":129},"7":{"name":"(anonymous_7)","decl":{"start":{"line":139,"column":57},"end":{"line":139,"column":58}},"loc":{"start":{"line":139,"column":64},"end":{"line":149,"column":9}},"line":139},"8":{"name":"(anonymous_8)","decl":{"start":{"line":158,"column":4},"end":{"line":158,"column":5}},"loc":{"start":{"line":158,"column":29},"end":{"line":182,"column":5}},"line":158},"9":{"name":"(anonymous_9)","decl":{"start":{"line":188,"column":4},"end":{"line":188,"column":5}},"loc":{"start":{"line":188,"column":27},"end":{"line":190,"column":5}},"line":188},"10":{"name":"(anonymous_10)","decl":{"start":{"line":192,"column":4},"end":{"line":192,"column":5}},"loc":{"start":{"line":192,"column":48},"end":{"line":206,"column":5}},"line":192},"11":{"name":"(anonymous_11)","decl":{"start":{"line":208,"column":4},"end":{"line":208,"column":5}},"loc":{"start":{"line":208,"column":29},"end":{"line":220,"column":5}},"line":208},"12":{"name":"(anonymous_12)","decl":{"start":{"line":210,"column":28},"end":{"line":210,"column":29}},"loc":{"start":{"line":210,"column":38},"end":{"line":214,"column":9}},"line":210},"13":{"name":"(anonymous_13)","decl":{"start":{"line":215,"column":51},"end":{"line":215,"column":52}},"loc":{"start":{"line":215,"column":63},"end":{"line":215,"column":74}},"line":215}},"branchMap":{"0":{"loc":{"start":{"line":45,"column":85},"end":{"line":45,"column":107}},"type":"default-arg","locations":[{"start":{"line":45,"column":94},"end":{"line":45,"column":107}}],"line":45},"1":{"loc":{"start":{"line":55,"column":8},"end":{"line":57,"column":9}},"type":"if","locations":[{"start":{"line":55,"column":8},"end":{"line":57,"column":9}},{"start":{"line":55,"column":8},"end":{"line":57,"column":9}}],"line":55},"2":{"loc":{"start":{"line":55,"column":12},"end":{"line":55,"column":85}},"type":"binary-expr","locations":[{"start":{"line":55,"column":12},"end":{"line":55,"column":64}},{"start":{"line":55,"column":68},"end":{"line":55,"column":85}}],"line":55},"3":{"loc":{"start":{"line":65,"column":8},"end":{"line":67,"column":9}},"type":"if","locations":[{"start":{"line":65,"column":8},"end":{"line":67,"column":9}},{"start":{"line":65,"column":8},"end":{"line":67,"column":9}}],"line":65},"4":{"loc":{"start":{"line":88,"column":8},"end":{"line":90,"column":9}},"type":"if","locations":[{"start":{"line":88,"column":8},"end":{"line":90,"column":9}},{"start":{"line":88,"column":8},"end":{"line":90,"column":9}}],"line":88},"5":{"loc":{"start":{"line":99,"column":30},"end":{"line":99,"column":62}},"type":"cond-expr","locations":[{"start":{"line":99,"column":41},"end":{"line":99,"column":55}},{"start":{"line":99,"column":58},"end":{"line":99,"column":62}}],"line":99},"6":{"loc":{"start":{"line":109,"column":8},"end":{"line":122,"column":9}},"type":"switch","locations":[{"start":{"line":110,"column":12},"end":{"line":115,"column":287}},{"start":{"line":116,"column":12},"end":{"line":117,"column":126}},{"start":{"line":118,"column":12},"end":{"line":119,"column":128}},{"start":{"line":120,"column":12},"end":{"line":121,"column":133}}],"line":109},"7":{"loc":{"start":{"line":134,"column":8},"end":{"line":137,"column":9}},"type":"if","locations":[{"start":{"line":134,"column":8},"end":{"line":137,"column":9}},{"start":{"line":134,"column":8},"end":{"line":137,"column":9}}],"line":134},"8":{"loc":{"start":{"line":134,"column":12},"end":{"line":135,"column":62}},"type":"binary-expr","locations":[{"start":{"line":134,"column":12},"end":{"line":134,"column":61}},{"start":{"line":135,"column":12},"end":{"line":135,"column":62}}],"line":134},"9":{"loc":{"start":{"line":143,"column":12},"end":{"line":148,"column":13}},"type":"if","locations":[{"start":{"line":143,"column":12},"end":{"line":148,"column":13}},{"start":{"line":143,"column":12},"end":{"line":148,"column":13}}],"line":143},"10":{"loc":{"start":{"line":159,"column":8},"end":{"line":181,"column":9}},"type":"if","locations":[{"start":{"line":159,"column":8},"end":{"line":181,"column":9}},{"start":{"line":159,"column":8},"end":{"line":181,"column":9}}],"line":159},"11":{"loc":{"start":{"line":162,"column":12},"end":{"line":168,"column":13}},"type":"if","locations":[{"start":{"line":162,"column":12},"end":{"line":168,"column":13}},{"start":{"line":162,"column":12},"end":{"line":168,"column":13}}],"line":162},"12":{"loc":{"start":{"line":165,"column":42},"end":{"line":165,"column":83}},"type":"cond-expr","locations":[{"start":{"line":165,"column":54},"end":{"line":165,"column":71}},{"start":{"line":165,"column":74},"end":{"line":165,"column":83}}],"line":165},"13":{"loc":{"start":{"line":193,"column":8},"end":{"line":203,"column":9}},"type":"if","locations":[{"start":{"line":193,"column":8},"end":{"line":203,"column":9}},{"start":{"line":193,"column":8},"end":{"line":203,"column":9}}],"line":193},"14":{"loc":{"start":{"line":211,"column":12},"end":{"line":213,"column":13}},"type":"if","locations":[{"start":{"line":211,"column":12},"end":{"line":213,"column":13}},{"start":{"line":211,"column":12},"end":{"line":213,"column":13}}],"line":211},"15":{"loc":{"start":{"line":216,"column":8},"end":{"line":218,"column":9}},"type":"if","locations":[{"start":{"line":216,"column":8},"end":{"line":218,"column":9}},{"start":{"line":216,"column":8},"end":{"line":218,"column":9}}],"line":216}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":39,"12":39,"13":39,"14":0,"15":39,"16":39,"17":39,"18":39,"19":39,"20":38,"21":38,"22":38,"23":21,"24":38,"25":39,"26":103,"27":103,"28":103,"29":28,"30":103,"31":156,"32":310,"33":28,"34":28,"35":9,"36":9,"37":9,"38":9,"39":9,"40":4,"41":4,"42":11,"43":23,"44":23,"45":23,"46":19,"47":23,"48":23,"49":24,"50":24,"51":24,"52":24,"53":20,"54":4,"55":23,"56":24,"57":7,"58":7,"59":7,"60":7,"61":7,"62":28,"63":28,"64":28,"65":7,"66":7,"67":17,"68":17,"69":53,"70":28,"71":6,"72":22,"73":39,"74":39,"75":77,"76":0,"77":39,"78":77,"79":39,"80":1,"81":38,"82":1},"f":{"0":39,"1":39,"2":103,"3":156,"4":310,"5":28,"6":23,"7":24,"8":24,"9":53,"10":28,"11":39,"12":77,"13":77},"b":{"0":[39],"1":[0,39],"2":[39,9],"3":[21,17],"4":[28,75],"5":[302,8],"6":[9,4,4,11],"7":[19,4],"8":[23,23],"9":[20,4],"10":[7,17],"11":[7,0],"12":[28,0],"13":[6,22],"14":[0,77],"15":[1,38]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/view.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/view.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,0DAA0D;AAC1D,mDAG6B;AAE7B,mDAUiC;AAGjC,mDAAmD;AACnD,2DAAuD;AACvD,iDAA6C;AAC7C,yCAAsC;AACtC,mCAOiB;AAEjB,MAAM,gBAAgB,GAAG,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;AAEjD;;;GAGG;AACH,MAAa,QAAQ;IA4CnB;;;;;;;;;;;OAWG;IACH,YACE,IAAY,EACZ,OAAgB,EAChB,WAA4B,EAC5B,QAAkB,EAClB,WAAmB,EACnB,gBAA2B,EAC3B,MAAM,GAAG,aAAa;QArDxB;;;;;WAKG;QACK,2BAAsB,GAAuC,EAAE,CAAC;QAuBxE,sCAAsC;QACtC,eAAU,GAAG,KAAK,CAAC;QAyBjB,IAAI,WAAW,KAAK,uBAAe,CAAC,YAAY,IAAI,CAAC,gBAAgB,EAAE;YACrE,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;SAClD;QACD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC;QAC9B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;QAC9C,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAC5B,IAAI,gBAAgB,EAAE;YACpB,IAAI,CAAC,gBAAgB,GAAG,IAAI,oCAAgB,CAAC,gBAAgB,CAAC,CAAC;SAChE;QACD,IAAI,CAAC,gBAAgB,GAAG,0BAAW,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;IACnE,CAAC;IAED,+BAA+B;IAC/B,UAAU;QACR,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED;;;;;;;;;;OAUG;IACH,iBAAiB,CACf,WAAwB,EACxB,IAAY,EACZ,WAAuC;QAEvC,MAAM,SAAS,GAAG,mBAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QACjE,MAAM,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;QACpD,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,WAAW,CAAC,EAAE;YAC7C,IAAI,CAAC,sBAAsB,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,qBAAqB,CACnE,SAAS,CACV,CAAC;SACH;QAED,mBAAQ,CAAC,cAAc,CACrB,IAAI,CAAC,sBAAsB,CAAC,WAAW,CAAC,EACxC,WAAW,EACX,WAAW,CACZ,CAAC;IACJ,CAAC;IAED;;;OAGG;IACK,eAAe,CAAC,SAAiC;QACvD,OAAO,SAAS;aACb,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;aACnD,IAAI,EAAE;aACN,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAC5B,CAAC;IAED;;;OAGG;IACK,qBAAqB,CAC3B,SAAiC;QAEjC,MAAM,mBAAmB,GAAG,EAAE,SAAS,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;QAEjE,QAAQ,IAAI,CAAC,WAAW,EAAE;YACxB,KAAK,uBAAe,CAAC,YAAY;gBAC/B,MAAM,EAAE,OAAO,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,gBAAiB,CAAC;gBACzD,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;gBAC/C,MAAM,gBAAgB,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,YAAY,CAAC,CAAC;gBACzD,MAAM,SAAS,GAAG,IAAI,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;gBAEjD,uCACK,mBAAmB,KACtB,IAAI,EAAE,uBAAe,CAAC,YAAY,EAClC,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,KAAK,EAAE,CAAC,EACR,GAAG,EAAE,CAAC,EACN,IAAI,EAAE,CAAC,EACP,YAAY,EAAE,CAAC,EACf,qBAAqB,EAAE,CAAC,EACxB,OAAO,EAAE,WAAW,EACpB,YAAY,EAAE,gBAAgB,EAC9B,SAAS,IACT;YACJ,KAAK,uBAAe,CAAC,GAAG;gBACtB,uCAAY,mBAAmB,KAAE,IAAI,EAAE,uBAAe,CAAC,GAAG,EAAE,KAAK,EAAE,CAAC,IAAG;YACzE,KAAK,uBAAe,CAAC,KAAK;gBACxB,uCACK,mBAAmB,KACtB,IAAI,EAAE,uBAAe,CAAC,KAAK,EAC3B,KAAK,EAAE,CAAC,IACR;YACJ;gBACE,uCACK,mBAAmB,KACtB,IAAI,EAAE,uBAAe,CAAC,UAAU,EAChC,KAAK,EAAE,CAAC,IACR;SACL;IACH,CAAC;IAED;;;;OAIG;IACH,SAAS,CAAC,KAAa;QACrB,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,gBAAgB,CAAC;QACvC,IAAI,cAAyB,CAAC;QAE9B,2CAA2C;QAC3C,MAAM,GAAG,GAAc,yCAA6B,EAAE,CAAC;QACvD,IACE,IAAI,KAAK,4BAAoB,CAAC,WAAW;YACzC,IAAI,KAAK,4BAAoB,CAAC,YAAY,EAC1C;YACA,cAAc,GAAG,+BAAmB,CAAC,KAAK,CAAC,CAAC;SAC7C;QAED,MAAM,UAAU,GAAiB,EAAE,CAAC;QACpC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YACrD,MAAM,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC;YACvD,MAAM,WAAW,GAAiB,0BAAW,CAAC,sBAAsB,CAClE,SAAS,CACV,CAAC;YACF,MAAM,KAAK,GAAU,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC;YAEpE,IAAI,cAAc,EAAE;gBAClB,UAAU,CAAC,IAAI,CAAC,EAAE,cAAc,EAAE,WAAW,EAAE,MAAM,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;aACnE;iBAAM;gBACL,UAAU,CAAC,IAAI,CAAC,EAAE,WAAW,EAAE,MAAM,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;aACnD;QACH,CAAC,CAAC,CAAC;QAEH,OAAO,EAAE,UAAU,EAAE,IAAI,CAAC,gBAAgB,EAAE,UAAU,EAAE,CAAC;IAC3D,CAAC;IAED;;;;;OAKG;IACK,OAAO,CAAC,SAAoB,EAAE,IAAqB;QACzD,IAAI,IAAI,CAAC,IAAI,KAAK,uBAAe,CAAC,YAAY,EAAE;YAC9C,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,qBAAqB,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC;YAC9D,MAAM,OAAO,GAAG,EAAE,CAAC;YACnB,IAAI,IAAI,CAAC,YAAY,EAAE;gBACrB,KAAK,IAAI,MAAM,GAAG,CAAC,EAAE,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE;oBAChE,MAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;oBAC9C,MAAM,aAAa,GAAG,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;oBAChE,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC,CAAC;iBAChE;aACF;YACD,MAAM,KAAK,GAAsB;gBAC/B,KAAK;gBACL,GAAG;gBACH,qBAAqB;gBACrB,OAAO;gBACP,aAAa,EAAE,EAAE,QAAQ,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,EAAE;aACtD,CAAC;YACF,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;SAC7B;aAAM;YACL,MAAM,KAAK,GAAW,IAAI,CAAC,KAAK,CAAC;YACjC,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;SAC7B;IACH,CAAC;IAED;;;;OAIG;IACH,WAAW,CAAC,SAAiC;QAC3C,OAAO,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC;IACtE,CAAC;IAED,4DAA4D;IACpD,eAAe,CACrB,WAAmB,EACnB,aAA6B;QAE7B,IAAI,aAAa,EAAE;YACjB,2BAA2B;YAC3B,OAAO;gBACL,KAAK,EAAE,WAAW;gBAClB,QAAQ,EAAE;oBACR,KAAK,EAAE,aAAa,CAAC,KAAK;oBAC1B,SAAS,EAAE,+BAAmB,CAAC,aAAa,CAAC,SAAS,CAAC;oBACvD,WAAW,EAAE,aAAa,CAAC,WAAW;iBACvC;aACF,CAAC;SACH;QACD,2BAA2B;QAC3B,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC;IAChC,CAAC;IAED,sDAAsD;IAC9C,eAAe,CAAC,OAAiB;QACvC,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;QAC/C,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YAC3B,IAAI,CAAC,0BAAa,CAAC,MAAM,CAAC,EAAE;gBAC1B,MAAM,IAAI,KAAK,CAAC,wBAAwB,MAAM,EAAE,CAAC,CAAC;aACnD;QACH,CAAC,CAAC,CAAC;QACH,MAAM,UAAU,GAAG,IAAI,GAAG,CACxB,WAAW,CAAC,GAAG,CAAC,CAAC,MAAc,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CACjD,CAAC;QACF,IAAI,UAAU,CAAC,IAAI,KAAK,WAAW,CAAC,MAAM,EAAE;YAC1C,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;SAC3C;QACD,OAAO,WAAW,CAAC;IACrB,CAAC;CACF;AA9RD,4BA8RC","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as defaultLogger from '../common/console-logger';\nimport {\n  getTimestampWithProcessHRTime,\n  timestampFromMillis,\n} from '../common/time-util';\nimport * as loggerTypes from '../common/types';\nimport {\n  Bucket as metricBucket,\n  DistributionValue,\n  LabelValue,\n  Metric,\n  MetricDescriptor,\n  MetricDescriptorType,\n  Point,\n  TimeSeries,\n  Timestamp,\n} from '../metrics/export/types';\nimport { TagMap } from '../tags/tag-map';\nimport { TagKey, TagValue } from '../tags/types';\nimport { isValidTagKey } from '../tags/validation';\nimport { BucketBoundaries } from './bucket-boundaries';\nimport { MetricUtils } from './metric-utils';\nimport { Recorder } from './recorder';\nimport {\n  AggregationData,\n  AggregationType,\n  Measure,\n  Measurement,\n  StatsExemplar,\n  View,\n} from './types';\n\nconst RECORD_SEPARATOR = String.fromCharCode(30);\n\n/**\n * A View specifies an aggregation and a set of tag keys. The aggregation will\n * be broken down by the unique set of matching tag values for each measure.\n */\nexport class BaseView implements View {\n  /**\n   * A string by which the View will be referred to, e.g. \"rpc_latency\". Names\n   * MUST be unique within the library.\n   */\n  readonly name: string;\n  /** Describes the view, e.g. \"RPC latency distribution\" */\n  readonly description: string;\n  /** The Measure to which this view is applied. */\n  readonly measure: Measure;\n  /**\n   * A map of stringified tags representing columns labels or tag keys, concept\n   * similar to dimensions on multidimensional modeling, to AggregationData.\n   * If no Tags are provided, then, all data is recorded in a single\n   * aggregation.\n   */\n  private tagValueAggregationMap: { [key: string]: AggregationData } = {};\n  /**\n   * A list of tag keys that represents the possible column labels\n   */\n  private columns: TagKey[];\n  /**\n   * An Aggregation describes how data collected is aggregated.\n   * There are four aggregation types: count, sum, lastValue and distirbution.\n   */\n  readonly aggregation: AggregationType;\n  /** The start time for this view */\n  readonly startTime: number;\n  /** The bucket boundaries in a Distribution Aggregation */\n  private bucketBoundaries?: BucketBoundaries;\n  /**\n   * Cache a MetricDescriptor to avoid converting View to MetricDescriptor\n   * in the future.\n   */\n  private metricDescriptor: MetricDescriptor;\n  /**\n   * The end time for this view - represents the last time a value was recorded\n   */\n  endTime?: number;\n  /** true if the view was registered */\n  registered = false;\n  /** An object to log information to */\n  logger: loggerTypes.Logger;\n\n  /**\n   * Creates a new View instance. This constructor is used by Stats. User should\n   * prefer using Stats.createView() instead.\n   * @param name The view name\n   * @param measure The view measure\n   * @param aggregation The view aggregation type\n   * @param tagsKeys The Tags' keys that view will have\n   * @param description The view description\n   * @param bucketBoundaries The view bucket boundaries for a distribution\n   *     aggregation type\n   * @param logger\n   */\n  constructor(\n    name: string,\n    measure: Measure,\n    aggregation: AggregationType,\n    tagsKeys: TagKey[],\n    description: string,\n    bucketBoundaries?: number[],\n    logger = defaultLogger\n  ) {\n    if (aggregation === AggregationType.DISTRIBUTION && !bucketBoundaries) {\n      throw new Error('No bucketBoundaries specified');\n    }\n    this.logger = logger.logger();\n    this.name = name;\n    this.description = description;\n    this.measure = measure;\n    this.columns = this.validateTagKeys(tagsKeys);\n    this.aggregation = aggregation;\n    this.startTime = Date.now();\n    if (bucketBoundaries) {\n      this.bucketBoundaries = new BucketBoundaries(bucketBoundaries);\n    }\n    this.metricDescriptor = MetricUtils.viewToMetricDescriptor(this);\n  }\n\n  /** Gets the view's tag keys */\n  getColumns(): TagKey[] {\n    return this.columns;\n  }\n\n  /**\n   * Records a measurement in the proper view's row. This method is used by\n   * Stats. User should prefer using Stats.record() instead.\n   *\n   * Measurements with measurement type INT64 will have its value truncated.\n   * @param measurement The measurement to record\n   * @param tags The tags to which the value is applied\n   * @param attachments optional The contextual information associated with an\n   *     example value. The contextual information is represented as key - value\n   *     string pairs.\n   */\n  recordMeasurement(\n    measurement: Measurement,\n    tags: TagMap,\n    attachments?: { [key: string]: string }\n  ) {\n    const tagValues = Recorder.getTagValues(tags.tags, this.columns);\n    const encodedTags = this.encodeTagValues(tagValues);\n    if (!this.tagValueAggregationMap[encodedTags]) {\n      this.tagValueAggregationMap[encodedTags] = this.createAggregationData(\n        tagValues\n      );\n    }\n\n    Recorder.addMeasurement(\n      this.tagValueAggregationMap[encodedTags],\n      measurement,\n      attachments\n    );\n  }\n\n  /**\n   * Encodes a TagValue object into a value sorted string.\n   * @param tagValues The tagValues to encode\n   */\n  private encodeTagValues(tagValues: Array<TagValue | null>): string {\n    return tagValues\n      .map(tagValue => (tagValue ? tagValue.value : null))\n      .sort()\n      .join(RECORD_SEPARATOR);\n  }\n\n  /**\n   * Creates an empty aggregation data for a given tags.\n   * @param tagValues The tags for that aggregation data\n   */\n  private createAggregationData(\n    tagValues: Array<TagValue | null>\n  ): AggregationData {\n    const aggregationMetadata = { tagValues, timestamp: Date.now() };\n\n    switch (this.aggregation) {\n      case AggregationType.DISTRIBUTION:\n        const { buckets, bucketCounts } = this.bucketBoundaries!;\n        const bucketsCopy = Object.assign([], buckets);\n        const bucketCountsCopy = Object.assign([], bucketCounts);\n        const exemplars = new Array(bucketCounts.length);\n\n        return {\n          ...aggregationMetadata,\n          type: AggregationType.DISTRIBUTION,\n          startTime: this.startTime,\n          count: 0,\n          sum: 0,\n          mean: 0,\n          stdDeviation: 0,\n          sumOfSquaredDeviation: 0,\n          buckets: bucketsCopy,\n          bucketCounts: bucketCountsCopy,\n          exemplars,\n        };\n      case AggregationType.SUM:\n        return { ...aggregationMetadata, type: AggregationType.SUM, value: 0 };\n      case AggregationType.COUNT:\n        return {\n          ...aggregationMetadata,\n          type: AggregationType.COUNT,\n          value: 0,\n        };\n      default:\n        return {\n          ...aggregationMetadata,\n          type: AggregationType.LAST_VALUE,\n          value: 0,\n        };\n    }\n  }\n\n  /**\n   * Gets view`s metric\n   * @param start The start timestamp in epoch milliseconds\n   * @returns The Metric.\n   */\n  getMetric(start: number): Metric {\n    const { type } = this.metricDescriptor;\n    let startTimestamp: Timestamp;\n\n    // The moment when this point was recorded.\n    const now: Timestamp = getTimestampWithProcessHRTime();\n    if (\n      type !== MetricDescriptorType.GAUGE_INT64 &&\n      type !== MetricDescriptorType.GAUGE_DOUBLE\n    ) {\n      startTimestamp = timestampFromMillis(start);\n    }\n\n    const timeseries: TimeSeries[] = [];\n    Object.keys(this.tagValueAggregationMap).forEach(key => {\n      const { tagValues } = this.tagValueAggregationMap[key];\n      const labelValues: LabelValue[] = MetricUtils.tagValuesToLabelValues(\n        tagValues\n      );\n      const point: Point = this.toPoint(now, this.getSnapshot(tagValues));\n\n      if (startTimestamp) {\n        timeseries.push({ startTimestamp, labelValues, points: [point] });\n      } else {\n        timeseries.push({ labelValues, points: [point] });\n      }\n    });\n\n    return { descriptor: this.metricDescriptor, timeseries };\n  }\n\n  /**\n   * Converts snapshot to point\n   * @param timestamp The timestamp\n   * @param data The aggregated data\n   * @returns The Point.\n   */\n  private toPoint(timestamp: Timestamp, data: AggregationData): Point {\n    if (data.type === AggregationType.DISTRIBUTION) {\n      const { count, sum, sumOfSquaredDeviation, exemplars } = data;\n      const buckets = [];\n      if (data.bucketCounts) {\n        for (let bucket = 0; bucket < data.bucketCounts.length; bucket++) {\n          const bucketCount = data.bucketCounts[bucket];\n          const statsExemplar = exemplars ? exemplars[bucket] : undefined;\n          buckets.push(this.getMetricBucket(bucketCount, statsExemplar));\n        }\n      }\n      const value: DistributionValue = {\n        count,\n        sum,\n        sumOfSquaredDeviation,\n        buckets,\n        bucketOptions: { explicit: { bounds: data.buckets } },\n      };\n      return { timestamp, value };\n    } else {\n      const value: number = data.value;\n      return { timestamp, value };\n    }\n  }\n\n  /**\n   * Returns a snapshot of an AggregationData for that tags/labels values.\n   * @param tags The desired data's tags\n   * @returns The AggregationData.\n   */\n  getSnapshot(tagValues: Array<TagValue | null>): AggregationData {\n    return this.tagValueAggregationMap[this.encodeTagValues(tagValues)];\n  }\n\n  /** Returns a Bucket with count and examplar (if present) */\n  private getMetricBucket(\n    bucketCount: number,\n    statsExemplar?: StatsExemplar\n  ): metricBucket {\n    if (statsExemplar) {\n      // Bucket with an Exemplar.\n      return {\n        count: bucketCount,\n        exemplar: {\n          value: statsExemplar.value,\n          timestamp: timestampFromMillis(statsExemplar.timestamp),\n          attachments: statsExemplar.attachments,\n        },\n      };\n    }\n    // Bucket with no Exemplar.\n    return { count: bucketCount };\n  }\n\n  /** Determines whether the given TagKeys are valid. */\n  private validateTagKeys(tagKeys: TagKey[]): TagKey[] {\n    const tagKeysCopy = Object.assign([], tagKeys);\n    tagKeysCopy.forEach(tagKey => {\n      if (!isValidTagKey(tagKey)) {\n        throw new Error(`Invalid TagKey name: ${tagKey}`);\n      }\n    });\n    const tagKeysSet = new Set(\n      tagKeysCopy.map((tagKey: TagKey) => tagKey.name)\n    );\n    if (tagKeysSet.size !== tagKeysCopy.length) {\n      throw new Error('Columns have duplicate');\n    }\n    return tagKeysCopy;\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"0759359dcb5c39672d0c2fe4e06b9d8cff952928","contentHash":"205b81986702374cf8a8faffeef92765a417278cdf1483c7827bb933fd313fb1"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/time-util.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/time-util.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":97}},"2":{"start":{"line":19,"column":26},"end":{"line":19,"column":29}},"3":{"start":{"line":20,"column":24},"end":{"line":20,"column":33}},"4":{"start":{"line":21,"column":25},"end":{"line":21,"column":40}},"5":{"start":{"line":22,"column":13},"end":{"line":22,"column":27}},"6":{"start":{"line":23,"column":19},"end":{"line":23,"column":25}},"7":{"start":{"line":24,"column":23},"end":{"line":24,"column":24}},"8":{"start":{"line":25,"column":21},"end":{"line":25,"column":22}},"9":{"start":{"line":27,"column":4},"end":{"line":27,"column":31}},"10":{"start":{"line":28,"column":4},"end":{"line":28,"column":28}},"11":{"start":{"line":29,"column":20},"end":{"line":29,"column":30}},"12":{"start":{"line":30,"column":4},"end":{"line":30,"column":63}},"13":{"start":{"line":31,"column":4},"end":{"line":31,"column":69}},"14":{"start":{"line":38,"column":4},"end":{"line":38,"column":28}},"15":{"start":{"line":46,"column":38},"end":{"line":46,"column":58}},"16":{"start":{"line":48,"column":20},"end":{"line":48,"column":49}},"17":{"start":{"line":49,"column":18},"end":{"line":49,"column":46}},"18":{"start":{"line":50,"column":4},"end":{"line":52,"column":5}},"19":{"start":{"line":51,"column":8},"end":{"line":51,"column":73}},"20":{"start":{"line":53,"column":4},"end":{"line":53,"column":30}},"21":{"start":{"line":55,"column":0},"end":{"line":55,"column":70}},"22":{"start":{"line":63,"column":4},"end":{"line":66,"column":6}},"23":{"start":{"line":68,"column":0},"end":{"line":68,"column":50}},"24":{"start":{"line":69,"column":0},"end":{"line":69,"column":21}},"25":{"start":{"line":70,"column":0},"end":{"line":73,"column":2}}},"fnMap":{"0":{"name":"setHrtimeReference","decl":{"start":{"line":26,"column":9},"end":{"line":26,"column":27}},"loc":{"start":{"line":26,"column":30},"end":{"line":32,"column":1}},"line":26},"1":{"name":"resetHrtimeFunctionCache","decl":{"start":{"line":37,"column":9},"end":{"line":37,"column":33}},"loc":{"start":{"line":37,"column":36},"end":{"line":39,"column":1}},"line":37},"2":{"name":"getTimestampWithProcessHRTime","decl":{"start":{"line":45,"column":9},"end":{"line":45,"column":38}},"loc":{"start":{"line":45,"column":41},"end":{"line":54,"column":1}},"line":45},"3":{"name":"timestampFromMillis","decl":{"start":{"line":62,"column":9},"end":{"line":62,"column":28}},"loc":{"start":{"line":62,"column":41},"end":{"line":67,"column":1}},"line":62}},"branchMap":{"0":{"loc":{"start":{"line":50,"column":4},"end":{"line":52,"column":5}},"type":"if","locations":[{"start":{"line":50,"column":4},"end":{"line":52,"column":5}},{"start":{"line":50,"column":4},"end":{"line":52,"column":5}}],"line":50}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":161,"10":161,"11":161,"12":161,"13":161,"14":320,"15":129,"16":129,"17":129,"18":129,"19":1,"20":128,"21":1,"22":25,"23":1,"24":1,"25":1},"f":{"0":161,"1":320,"2":129,"3":25},"b":{"0":[1,128]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/time-util.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/time-util.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAIH,MAAM,iBAAiB,GAAG,GAAG,CAAC;AAC9B,MAAM,eAAe,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,MAAM,gBAAgB,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAEzC,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;AAC5B,IAAI,YAAY,GAAqB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC5C,IAAI,gBAAgB,GAAG,CAAC,CAAC;AACzB,IAAI,cAAc,GAAG,CAAC,CAAC;AAEvB,SAAS,kBAAkB;IACzB,wBAAwB,EAAE,CAAC;IAC3B,YAAY,GAAG,MAAM,EAAE,CAAC;IACxB,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IAC3B,gBAAgB,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,iBAAiB,CAAC,CAAC;IAC3D,cAAc,GAAG,CAAC,OAAO,GAAG,iBAAiB,CAAC,GAAG,eAAe,CAAC;AACnE,CAAC;AAED;;;GAGG;AACH,SAAS,wBAAwB;IAC/B,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;AAC1B,CAAC;AAED;;;;GAIG;AACH,SAAgB,6BAA6B;IAC3C,MAAM,CAAC,UAAU,EAAE,WAAW,CAAC,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC;IAEvD,6CAA6C;IAC7C,MAAM,OAAO,GAAG,gBAAgB,GAAG,UAAU,CAAC;IAC9C,MAAM,KAAK,GAAG,cAAc,GAAG,WAAW,CAAC;IAE3C,IAAI,KAAK,IAAI,gBAAgB,EAAE;QAC7B,OAAO,EAAE,OAAO,EAAE,OAAO,GAAG,CAAC,EAAE,KAAK,EAAE,KAAK,GAAG,gBAAgB,EAAE,CAAC;KAClE;IACD,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;AAC5B,CAAC;AAXD,sEAWC;AAED;;;;;GAKG;AACH,SAAgB,mBAAmB,CAAC,UAAkB;IACpD,OAAO;QACL,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,iBAAiB,CAAC;QACnD,KAAK,EAAE,CAAC,UAAU,GAAG,iBAAiB,CAAC,GAAG,eAAe;KAC1D,CAAC;AACJ,CAAC;AALD,kDAKC;AAED,kBAAkB,EAAE,CAAC;AAER,QAAA,SAAS,GAAG;IACvB,kBAAkB;IAClB,wBAAwB;CACzB,CAAC","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../metrics/export/types';\n\nconst MILLIS_PER_SECOND = 1e3;\nconst NANOS_PER_MILLI = 1e3 * 1e3;\nconst NANOS_PER_SECOND = 1e3 * 1e3 * 1e3;\n\nlet hrtime = process.hrtime;\nlet hrtimeOrigin: [number, number] = [0, 0];\nlet hrtimeRefSeconds = 0;\nlet hrtimeRefNanos = 0;\n\nfunction setHrtimeReference() {\n  resetHrtimeFunctionCache();\n  hrtimeOrigin = hrtime();\n  const refTime = Date.now();\n  hrtimeRefSeconds = Math.floor(refTime / MILLIS_PER_SECOND);\n  hrtimeRefNanos = (refTime % MILLIS_PER_SECOND) * NANOS_PER_MILLI;\n}\n\n/**\n * This is used to enable tests to mock process.hrtime while still allow us to\n * cache it.\n */\nfunction resetHrtimeFunctionCache() {\n  hrtime = process.hrtime;\n}\n\n/**\n * Gets the current timestamp with seconds and nanoseconds.\n *\n * @returns The Timestamp.\n */\nexport function getTimestampWithProcessHRTime(): Timestamp {\n  const [offsetSecs, offsetNanos] = hrtime(hrtimeOrigin);\n\n  // determine drift in seconds and nanoseconds\n  const seconds = hrtimeRefSeconds + offsetSecs;\n  const nanos = hrtimeRefNanos + offsetNanos;\n\n  if (nanos >= NANOS_PER_SECOND) {\n    return { seconds: seconds + 1, nanos: nanos % NANOS_PER_SECOND };\n  }\n  return { seconds, nanos };\n}\n\n/**\n * Creates a new timestamp from the given milliseconds.\n *\n * @param epochMilli the timestamp represented in milliseconds since epoch.\n * @returns new timestamp with specified fields.\n */\nexport function timestampFromMillis(epochMilli: number): Timestamp {\n  return {\n    seconds: Math.floor(epochMilli / MILLIS_PER_SECOND),\n    nanos: (epochMilli % MILLIS_PER_SECOND) * NANOS_PER_MILLI,\n  };\n}\n\nsetHrtimeReference();\n\nexport const TEST_ONLY = {\n  setHrtimeReference,\n  resetHrtimeFunctionCache,\n};\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"00ddad3425038b5ddc3253e62562f3bb880aeabf","contentHash":"dbfd591a201cb52b769992f799cbbff3d1c84ccd2e7652d127a3fc6e258f8f4e"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/bucket-boundaries.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/bucket-boundaries.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":34}},"2":{"start":{"line":19,"column":22},"end":{"line":19,"column":57}},"3":{"start":{"line":22,"column":8},"end":{"line":22,"column":38}},"4":{"start":{"line":23,"column":8},"end":{"line":23,"column":65}},"5":{"start":{"line":24,"column":8},"end":{"line":24,"column":63}},"6":{"start":{"line":30,"column":8},"end":{"line":30,"column":28}},"7":{"start":{"line":36,"column":8},"end":{"line":36,"column":33}},"8":{"start":{"line":44,"column":23},"end":{"line":44,"column":24}},"9":{"start":{"line":45,"column":8},"end":{"line":46,"column":22}},"10":{"start":{"line":46,"column":12},"end":{"line":46,"column":22}},"11":{"start":{"line":47,"column":23},"end":{"line":57,"column":14}},"12":{"start":{"line":48,"column":12},"end":{"line":55,"column":13}},"13":{"start":{"line":49,"column":37},"end":{"line":49,"column":64}},"14":{"start":{"line":50,"column":16},"end":{"line":50,"column":62}},"15":{"start":{"line":51,"column":16},"end":{"line":51,"column":43}},"16":{"start":{"line":54,"column":16},"end":{"line":54,"column":27}},"17":{"start":{"line":56,"column":12},"end":{"line":56,"column":31}},"18":{"start":{"line":58,"column":8},"end":{"line":60,"column":9}},"19":{"start":{"line":59,"column":12},"end":{"line":59,"column":114}},"20":{"start":{"line":61,"column":8},"end":{"line":61,"column":22}},"21":{"start":{"line":68,"column":8},"end":{"line":69,"column":22}},"22":{"start":{"line":69,"column":12},"end":{"line":69,"column":22}},"23":{"start":{"line":70,"column":29},"end":{"line":70,"column":58}},"24":{"start":{"line":71,"column":8},"end":{"line":71,"column":29}},"25":{"start":{"line":72,"column":8},"end":{"line":72,"column":28}},"26":{"start":{"line":80,"column":8},"end":{"line":87,"column":9}},"27":{"start":{"line":81,"column":12},"end":{"line":83,"column":13}},"28":{"start":{"line":82,"column":16},"end":{"line":82,"column":67}},"29":{"start":{"line":84,"column":12},"end":{"line":86,"column":13}},"30":{"start":{"line":85,"column":16},"end":{"line":85,"column":67}},"31":{"start":{"line":90,"column":0},"end":{"line":90,"column":44}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":21,"column":4},"end":{"line":21,"column":5}},"loc":{"start":{"line":21,"column":52},"end":{"line":25,"column":5}},"line":21},"1":{"name":"(anonymous_1)","decl":{"start":{"line":29,"column":4},"end":{"line":29,"column":5}},"loc":{"start":{"line":29,"column":20},"end":{"line":31,"column":5}},"line":29},"2":{"name":"(anonymous_2)","decl":{"start":{"line":35,"column":4},"end":{"line":35,"column":5}},"loc":{"start":{"line":35,"column":16},"end":{"line":37,"column":5}},"line":35},"3":{"name":"(anonymous_3)","decl":{"start":{"line":43,"column":4},"end":{"line":43,"column":5}},"loc":{"start":{"line":43,"column":47},"end":{"line":62,"column":5}},"line":43},"4":{"name":"(anonymous_4)","decl":{"start":{"line":47,"column":47},"end":{"line":47,"column":48}},"loc":{"start":{"line":47,"column":81},"end":{"line":57,"column":9}},"line":47},"5":{"name":"(anonymous_5)","decl":{"start":{"line":67,"column":4},"end":{"line":67,"column":5}},"loc":{"start":{"line":67,"column":29},"end":{"line":73,"column":5}},"line":67},"6":{"name":"(anonymous_6)","decl":{"start":{"line":79,"column":4},"end":{"line":79,"column":5}},"loc":{"start":{"line":79,"column":36},"end":{"line":88,"column":5}},"line":79}},"branchMap":{"0":{"loc":{"start":{"line":21,"column":28},"end":{"line":21,"column":50}},"type":"default-arg","locations":[{"start":{"line":21,"column":37},"end":{"line":21,"column":50}}],"line":21},"1":{"loc":{"start":{"line":45,"column":8},"end":{"line":46,"column":22}},"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":46,"column":22}},{"start":{"line":45,"column":8},"end":{"line":46,"column":22}}],"line":45},"2":{"loc":{"start":{"line":48,"column":12},"end":{"line":55,"column":13}},"type":"if","locations":[{"start":{"line":48,"column":12},"end":{"line":55,"column":13}},{"start":{"line":48,"column":12},"end":{"line":55,"column":13}}],"line":48},"3":{"loc":{"start":{"line":58,"column":8},"end":{"line":60,"column":9}},"type":"if","locations":[{"start":{"line":58,"column":8},"end":{"line":60,"column":9}},{"start":{"line":58,"column":8},"end":{"line":60,"column":9}}],"line":58},"4":{"loc":{"start":{"line":68,"column":8},"end":{"line":69,"column":22}},"type":"if","locations":[{"start":{"line":68,"column":8},"end":{"line":69,"column":22}},{"start":{"line":68,"column":8},"end":{"line":69,"column":22}}],"line":68},"5":{"loc":{"start":{"line":80,"column":8},"end":{"line":87,"column":9}},"type":"if","locations":[{"start":{"line":80,"column":8},"end":{"line":87,"column":9}},{"start":{"line":80,"column":8},"end":{"line":87,"column":9}}],"line":80},"6":{"loc":{"start":{"line":81,"column":12},"end":{"line":83,"column":13}},"type":"if","locations":[{"start":{"line":81,"column":12},"end":{"line":83,"column":13}},{"start":{"line":81,"column":12},"end":{"line":83,"column":13}}],"line":81},"7":{"loc":{"start":{"line":84,"column":12},"end":{"line":86,"column":13}},"type":"if","locations":[{"start":{"line":84,"column":12},"end":{"line":86,"column":13}},{"start":{"line":84,"column":12},"end":{"line":86,"column":13}}],"line":84}},"s":{"0":1,"1":1,"2":1,"3":24,"4":24,"5":24,"6":2,"7":2,"8":24,"9":24,"10":0,"11":24,"12":81,"13":72,"14":72,"15":72,"16":9,"17":81,"18":24,"19":2,"20":24,"21":24,"22":0,"23":24,"24":24,"25":24,"26":72,"27":48,"28":0,"29":48,"30":0,"31":1},"f":{"0":24,"1":2,"2":2,"3":24,"4":81,"5":24,"6":72},"b":{"0":[24],"1":[0,24],"2":[72,9],"3":[2,22],"4":[0,24],"5":[48,24],"6":[0,48],"7":[0,48]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/bucket-boundaries.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/bucket-boundaries.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,0DAA0D;AAI1D,MAAa,gBAAgB;IAM3B,YAAY,UAAoB,EAAE,MAAM,GAAG,aAAa;QACtD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC;QAC9B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,CAAC,CAAC;QACzD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACzD,CAAC;IAED;;OAEG;IACH,aAAa;QACX,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED;;OAEG;IACH,SAAS;QACP,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED;;;;OAIG;IACK,wBAAwB,CAAC,gBAA0B;QACzD,IAAI,QAAQ,GAAG,CAAC,CAAC;QACjB,IAAI,CAAC,gBAAgB;YAAE,OAAO,EAAE,CAAC;QACjC,MAAM,MAAM,GAAG,gBAAgB,CAAC,MAAM,CACpC,CAAC,WAAqB,EAAE,QAAgB,EAAE,KAAa,EAAE,EAAE;YACzD,IAAI,QAAQ,GAAG,CAAC,EAAE;gBAChB,MAAM,YAAY,GAAG,gBAAgB,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;gBACjD,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;gBAC9C,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC5B;iBAAM;gBACL,QAAQ,EAAE,CAAC;aACZ;YACD,OAAO,WAAW,CAAC;QACrB,CAAC,EACD,EAAE,CACH,CAAC;QACF,IAAI,QAAQ,EAAE;YACZ,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,YAAY,QAAQ,+DAA+D,CACpF,CAAC;SACH;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;;OAGG;IACK,eAAe,CAAC,OAAiB;QACvC,IAAI,CAAC,OAAO;YAAE,OAAO,EAAE,CAAC;QACxB,MAAM,YAAY,GAAG,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACnD,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACrB,OAAO,YAAY,CAAC;IACtB,CAAC;IAED;;;;OAIG;IACK,gBAAgB,CAAC,OAAe,EAAE,IAAY;QACpD,IAAI,IAAI,EAAE;YACR,IAAI,OAAO,GAAG,IAAI,EAAE;gBAClB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC;aACpD;YACD,IAAI,OAAO,KAAK,IAAI,EAAE;gBACpB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC;aACpD;SACF;IACH,CAAC;CACF;AAjFD,4CAiFC","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as defaultLogger from '../common/console-logger';\nimport * as loggerTypes from '../common/types';\nimport { Bucket } from './types';\n\nexport class BucketBoundaries {\n  readonly buckets: Bucket[];\n  readonly bucketCounts: number[];\n  /** An object to log information to */\n  private logger: loggerTypes.Logger;\n\n  constructor(boundaries: number[], logger = defaultLogger) {\n    this.logger = logger.logger();\n    this.buckets = this.dropNegativeBucketBounds(boundaries);\n    this.bucketCounts = this.getBucketCounts(this.buckets);\n  }\n\n  /**\n   * Gets bucket boundaries\n   */\n  getBoundaries(): Bucket[] {\n    return this.buckets;\n  }\n\n  /**\n   * Gets initial bucket counts\n   */\n  getCounts(): number[] {\n    return this.bucketCounts;\n  }\n\n  /**\n   * Drops negative (BucketBounds) are currently not supported by\n   * any of the backends that OC supports\n   * @param bucketBoundaries a list with the bucket boundaries\n   */\n  private dropNegativeBucketBounds(bucketBoundaries: number[]): Bucket[] {\n    let negative = 0;\n    if (!bucketBoundaries) return [];\n    const result = bucketBoundaries.reduce(\n      (accumulator: number[], boundary: number, index: number) => {\n        if (boundary > 0) {\n          const nextBoundary = bucketBoundaries[index + 1];\n          this.validateBoundary(boundary, nextBoundary);\n          accumulator.push(boundary);\n        } else {\n          negative++;\n        }\n        return accumulator;\n      },\n      []\n    );\n    if (negative) {\n      this.logger.warn(\n        `Dropping ${negative} negative bucket boundaries, the values must be strictly > 0.`\n      );\n    }\n    return result;\n  }\n\n  /**\n   * Gets initial list of bucket counters\n   * @param buckets Bucket boundaries\n   */\n  private getBucketCounts(buckets: Bucket[]): number[] {\n    if (!buckets) return [];\n    const bucketsCount = new Array(buckets.length + 1);\n    bucketsCount.fill(0);\n    return bucketsCount;\n  }\n\n  /**\n   * Checks boundaries order and duplicates\n   * @param current Boundary\n   * @param next Next boundary\n   */\n  private validateBoundary(current: number, next: number) {\n    if (next) {\n      if (current > next) {\n        this.logger.error('Bucket boundaries not sorted.');\n      }\n      if (current === next) {\n        this.logger.error('Bucket boundaries not unique.');\n      }\n    }\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b45b55d4768eeb80a139514f03459eb3a4cae472","contentHash":"bdc60311350239e15145e87b66796993e993ef626e941b5409367d3045955250"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/metric-utils.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/metric-utils.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":29}},"2":{"start":{"line":19,"column":16},"end":{"line":19,"column":50}},"3":{"start":{"line":20,"column":16},"end":{"line":20,"column":34}},"4":{"start":{"line":30,"column":8},"end":{"line":55,"column":9}},"5":{"start":{"line":31,"column":12},"end":{"line":38,"column":13}},"6":{"start":{"line":33,"column":20},"end":{"line":33,"column":73}},"7":{"start":{"line":35,"column":20},"end":{"line":35,"column":74}},"8":{"start":{"line":37,"column":20},"end":{"line":37,"column":76}},"9":{"start":{"line":40,"column":13},"end":{"line":55,"column":9}},"10":{"start":{"line":41,"column":12},"end":{"line":41,"column":65}},"11":{"start":{"line":43,"column":13},"end":{"line":55,"column":9}},"12":{"start":{"line":44,"column":12},"end":{"line":44,"column":72}},"13":{"start":{"line":46,"column":13},"end":{"line":55,"column":9}},"14":{"start":{"line":47,"column":12},"end":{"line":54,"column":13}},"15":{"start":{"line":49,"column":20},"end":{"line":49,"column":68}},"16":{"start":{"line":51,"column":20},"end":{"line":51,"column":69}},"17":{"start":{"line":53,"column":20},"end":{"line":53,"column":76}},"18":{"start":{"line":56,"column":8},"end":{"line":56,"column":67}},"19":{"start":{"line":64,"column":8},"end":{"line":72,"column":10}},"20":{"start":{"line":71,"column":23},"end":{"line":71,"column":60}},"21":{"start":{"line":80,"column":8},"end":{"line":82,"column":12}},"22":{"start":{"line":80,"column":42},"end":{"line":82,"column":9}},"23":{"start":{"line":85,"column":0},"end":{"line":85,"column":34}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":29,"column":4},"end":{"line":29,"column":5}},"loc":{"start":{"line":29,"column":41},"end":{"line":57,"column":5}},"line":29},"1":{"name":"(anonymous_1)","decl":{"start":{"line":63,"column":4},"end":{"line":63,"column":5}},"loc":{"start":{"line":63,"column":40},"end":{"line":73,"column":5}},"line":63},"2":{"name":"(anonymous_2)","decl":{"start":{"line":71,"column":12},"end":{"line":71,"column":13}},"loc":{"start":{"line":71,"column":23},"end":{"line":71,"column":60}},"line":71},"3":{"name":"(anonymous_3)","decl":{"start":{"line":79,"column":4},"end":{"line":79,"column":5}},"loc":{"start":{"line":79,"column":45},"end":{"line":83,"column":5}},"line":79},"4":{"name":"(anonymous_4)","decl":{"start":{"line":80,"column":29},"end":{"line":80,"column":30}},"loc":{"start":{"line":80,"column":42},"end":{"line":82,"column":9}},"line":80}},"branchMap":{"0":{"loc":{"start":{"line":30,"column":8},"end":{"line":55,"column":9}},"type":"if","locations":[{"start":{"line":30,"column":8},"end":{"line":55,"column":9}},{"start":{"line":30,"column":8},"end":{"line":55,"column":9}}],"line":30},"1":{"loc":{"start":{"line":31,"column":12},"end":{"line":38,"column":13}},"type":"switch","locations":[{"start":{"line":32,"column":16},"end":{"line":33,"column":73}},{"start":{"line":34,"column":16},"end":{"line":35,"column":74}},{"start":{"line":36,"column":16},"end":{"line":37,"column":76}}],"line":31},"2":{"loc":{"start":{"line":40,"column":13},"end":{"line":55,"column":9}},"type":"if","locations":[{"start":{"line":40,"column":13},"end":{"line":55,"column":9}},{"start":{"line":40,"column":13},"end":{"line":55,"column":9}}],"line":40},"3":{"loc":{"start":{"line":43,"column":13},"end":{"line":55,"column":9}},"type":"if","locations":[{"start":{"line":43,"column":13},"end":{"line":55,"column":9}},{"start":{"line":43,"column":13},"end":{"line":55,"column":9}}],"line":43},"4":{"loc":{"start":{"line":46,"column":13},"end":{"line":55,"column":9}},"type":"if","locations":[{"start":{"line":46,"column":13},"end":{"line":55,"column":9}},{"start":{"line":46,"column":13},"end":{"line":55,"column":9}}],"line":46},"5":{"loc":{"start":{"line":47,"column":12},"end":{"line":54,"column":13}},"type":"switch","locations":[{"start":{"line":48,"column":16},"end":{"line":49,"column":68}},{"start":{"line":50,"column":16},"end":{"line":51,"column":69}},{"start":{"line":52,"column":16},"end":{"line":53,"column":76}}],"line":47},"6":{"loc":{"start":{"line":81,"column":19},"end":{"line":81,"column":51}},"type":"cond-expr","locations":[{"start":{"line":81,"column":30},"end":{"line":81,"column":44}},{"start":{"line":81,"column":47},"end":{"line":81,"column":51}}],"line":81}},"s":{"0":1,"1":1,"2":1,"3":1,"4":38,"5":5,"6":1,"7":4,"8":0,"9":33,"10":5,"11":28,"12":9,"13":19,"14":19,"15":10,"16":9,"17":0,"18":0,"19":39,"20":76,"21":26,"22":56,"23":1},"f":{"0":38,"1":39,"2":76,"3":26,"4":56},"b":{"0":[5,33],"1":[1,4,0],"2":[5,28],"3":[9,19],"4":[19,0],"5":[10,9,0],"6":[52,4]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/metric-utils.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/metric-utils.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,mDAIiC;AAEjC,mCAAsE;AAEtE,+DAA+D;AAC/D,MAAa,WAAW;IACtB;;;;;OAKG;IACK,MAAM,CAAC,OAAO,CACpB,OAAgB,EAChB,WAA4B;QAE5B,IAAI,WAAW,KAAK,uBAAe,CAAC,GAAG,EAAE;YACvC,QAAQ,OAAO,CAAC,IAAI,EAAE;gBACpB,KAAK,mBAAW,CAAC,KAAK;oBACpB,OAAO,4BAAoB,CAAC,gBAAgB,CAAC;gBAC/C,KAAK,mBAAW,CAAC,MAAM;oBACrB,OAAO,4BAAoB,CAAC,iBAAiB,CAAC;gBAChD;oBACE,MAAM,IAAI,KAAK,CAAC,wBAAwB,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;aAC3D;SACF;aAAM,IAAI,WAAW,KAAK,uBAAe,CAAC,KAAK,EAAE;YAChD,OAAO,4BAAoB,CAAC,gBAAgB,CAAC;SAC9C;aAAM,IAAI,WAAW,KAAK,uBAAe,CAAC,YAAY,EAAE;YACvD,OAAO,4BAAoB,CAAC,uBAAuB,CAAC;SACrD;aAAM,IAAI,WAAW,KAAK,uBAAe,CAAC,UAAU,EAAE;YACrD,QAAQ,OAAO,CAAC,IAAI,EAAE;gBACpB,KAAK,mBAAW,CAAC,KAAK;oBACpB,OAAO,4BAAoB,CAAC,WAAW,CAAC;gBAC1C,KAAK,mBAAW,CAAC,MAAM;oBACrB,OAAO,4BAAoB,CAAC,YAAY,CAAC;gBAC3C;oBACE,MAAM,IAAI,KAAK,CAAC,wBAAwB,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;aAC3D;SACF;QACD,MAAM,IAAI,KAAK,CAAC,4BAA4B,WAAW,EAAE,CAAC,CAAC;IAC7D,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,sBAAsB,CAAC,IAAU;QACtC,OAAO;YACL,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI;YACvB,IAAI,EAAE,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC;YACzD,SAAS,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,GAAG;YAC9B,mCAAmC;YACnC,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,MAAM,CAAC,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC,CAClD;SACF,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,sBAAsB,CAC3B,SAAiC;QAEjC,OAAO,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAChC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI;SACxC,CAAC,CAAC,CAAC;IACN,CAAC;CACF;AAnED,kCAmEC","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  LabelValue,\n  MetricDescriptor,\n  MetricDescriptorType,\n} from '../metrics/export/types';\nimport { TagValue } from '../tags/types';\nimport { AggregationType, Measure, MeasureType, View } from './types';\n\n/** Utils to convert Stats data models to Metric data models */\nexport class MetricUtils {\n  /**\n   * Gets the corresponding metric type for the given stats type.\n   * @param measure The measure for which to find a metric type\n   * @param aggregation The aggregation for which to find a metric type\n   * @returns The Type of metric descriptor\n   */\n  private static getType(\n    measure: Measure,\n    aggregation: AggregationType\n  ): MetricDescriptorType {\n    if (aggregation === AggregationType.SUM) {\n      switch (measure.type) {\n        case MeasureType.INT64:\n          return MetricDescriptorType.CUMULATIVE_INT64;\n        case MeasureType.DOUBLE:\n          return MetricDescriptorType.CUMULATIVE_DOUBLE;\n        default:\n          throw new Error(`Unknown measure type ${measure.type}`);\n      }\n    } else if (aggregation === AggregationType.COUNT) {\n      return MetricDescriptorType.CUMULATIVE_INT64;\n    } else if (aggregation === AggregationType.DISTRIBUTION) {\n      return MetricDescriptorType.CUMULATIVE_DISTRIBUTION;\n    } else if (aggregation === AggregationType.LAST_VALUE) {\n      switch (measure.type) {\n        case MeasureType.INT64:\n          return MetricDescriptorType.GAUGE_INT64;\n        case MeasureType.DOUBLE:\n          return MetricDescriptorType.GAUGE_DOUBLE;\n        default:\n          throw new Error(`Unknown measure type ${measure.type}`);\n      }\n    }\n    throw new Error(`Unknown aggregation type ${aggregation}`);\n  }\n\n  /**\n   * Gets a MetricDescriptor for given view.\n   * @param view The view for which to build a metric descriptor\n   * @returns The MetricDescriptor.\n   */\n  static viewToMetricDescriptor(view: View): MetricDescriptor {\n    return {\n      name: view.name,\n      description: view.description,\n      unit: view.measure.unit,\n      type: MetricUtils.getType(view.measure, view.aggregation),\n      labelKeys: view.getColumns().map(\n        // TODO(mayurkale): add description\n        tagKey => ({ key: tagKey.name, description: '' })\n      ),\n    };\n  }\n\n  /**\n   * Converts tag values to label values.\n   * @param tagValues the list of tag values\n   * @returns The List of label values\n   */\n  static tagValuesToLabelValues(\n    tagValues: Array<TagValue | null>\n  ): LabelValue[] {\n    return tagValues.map(tagValue => ({\n      value: tagValue ? tagValue.value : null,\n    }));\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b84c4fd4bd6ce285e0bc225d2fbe2cf37f2eca55","contentHash":"c6367bfdab255e19f26386ea9a73a383cae8146a3be44c4d14e05965bfc7d5a5"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/types.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/types.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":77}},"2":{"start":{"line":24,"column":0},"end":{"line":31,"column":68}},"3":{"start":{"line":25,"column":4},"end":{"line":25,"column":30}},"4":{"start":{"line":26,"column":4},"end":{"line":26,"column":31}},"5":{"start":{"line":27,"column":4},"end":{"line":27,"column":32}},"6":{"start":{"line":28,"column":4},"end":{"line":28,"column":29}},"7":{"start":{"line":29,"column":4},"end":{"line":29,"column":29}},"8":{"start":{"line":30,"column":4},"end":{"line":30,"column":29}},"9":{"start":{"line":34,"column":0},"end":{"line":37,"column":68}},"10":{"start":{"line":35,"column":4},"end":{"line":35,"column":35}},"11":{"start":{"line":36,"column":4},"end":{"line":36,"column":37}},"12":{"start":{"line":43,"column":0},"end":{"line":48,"column":80}},"13":{"start":{"line":44,"column":4},"end":{"line":44,"column":60}},"14":{"start":{"line":45,"column":4},"end":{"line":45,"column":56}},"15":{"start":{"line":46,"column":4},"end":{"line":46,"column":70}},"16":{"start":{"line":47,"column":4},"end":{"line":47,"column":74}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":24,"column":1},"end":{"line":24,"column":2}},"loc":{"start":{"line":24,"column":24},"end":{"line":31,"column":1}},"line":24},"1":{"name":"(anonymous_1)","decl":{"start":{"line":34,"column":1},"end":{"line":34,"column":2}},"loc":{"start":{"line":34,"column":24},"end":{"line":37,"column":1}},"line":34},"2":{"name":"(anonymous_2)","decl":{"start":{"line":43,"column":1},"end":{"line":43,"column":2}},"loc":{"start":{"line":43,"column":28},"end":{"line":48,"column":1}},"line":43}},"branchMap":{"0":{"loc":{"start":{"line":31,"column":17},"end":{"line":31,"column":66}},"type":"binary-expr","locations":[{"start":{"line":31,"column":17},"end":{"line":31,"column":36}},{"start":{"line":31,"column":41},"end":{"line":31,"column":65}}],"line":31},"1":{"loc":{"start":{"line":37,"column":17},"end":{"line":37,"column":66}},"type":"binary-expr","locations":[{"start":{"line":37,"column":17},"end":{"line":37,"column":36}},{"start":{"line":37,"column":41},"end":{"line":37,"column":65}}],"line":37},"2":{"loc":{"start":{"line":48,"column":21},"end":{"line":48,"column":78}},"type":"binary-expr","locations":[{"start":{"line":48,"column":21},"end":{"line":48,"column":44}},{"start":{"line":48,"column":49},"end":{"line":48,"column":77}}],"line":48}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1},"f":{"0":1,"1":1,"2":1},"b":{"0":[1,1],"1":[1,1],"2":[1,1]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/types.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/types.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AA2IH;;;GAGG;AACH,IAAY,WAOX;AAPD,WAAY,WAAW;IACrB,yBAAU,CAAA;IACV,0BAAW,CAAA;IACX,2BAAY,CAAA;IACZ,wBAAS,CAAA;IACT,wBAAS,CAAA;IACT,wBAAS,CAAA;AACX,CAAC,EAPW,WAAW,GAAX,mBAAW,KAAX,mBAAW,QAOtB;AAED,0EAA0E;AAC1E,IAAY,WAGX;AAHD,WAAY,WAAW;IACrB,8BAAe,CAAA;IACf,gCAAiB,CAAA;AACnB,CAAC,EAHW,WAAW,GAAX,mBAAW,KAAX,mBAAW,QAGtB;AAkED;;;GAGG;AACH,IAAY,eAKX;AALD,WAAY,eAAe;IACzB,uDAAS,CAAA;IACT,mDAAO,CAAA;IACP,iEAAc,CAAA;IACd,qEAAgB,CAAA;AAClB,CAAC,EALW,eAAe,GAAf,uBAAe,KAAf,uBAAe,QAK1B","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StatsEventListener } from '../exporters/types';\nimport { Metric } from '../metrics/export/types';\nimport { TagMap } from '../tags/tag-map';\nimport { TagKey, TagValue } from '../tags/types';\n\n/** Default type for functions */\n// tslint:disable:no-any\ntype Func<T> = (...args: any[]) => T;\n\n/** Main interface for stats. */\nexport interface Stats {\n  /**\n   * Creates a view.\n   * @param name The view name\n   * @param measure The view measure\n   * @param aggregation The view aggregation type\n   * @param tagKeys The view columns (tag keys)\n   * @param description The view description\n   * @param bucketBoundaries The view bucket boundaries for a distribution\n   *     aggregation type\n   */\n  createView(\n    name: string,\n    measure: Measure,\n    aggregation: AggregationType,\n    tagKeys: TagKey[],\n    description: string,\n    bucketBoundaries?: number[]\n  ): View;\n\n  /**\n   * Registers a view to listen to new measurements in its measure.\n   * @param view The view to be registered\n   */\n  registerView(view: View): void;\n\n  /**\n   * Creates a measure of type Double.\n   * @param name The measure name\n   * @param unit The measure unit\n   * @param description The measure description\n   */\n  createMeasureDouble(\n    name: string,\n    unit: MeasureUnit,\n    description?: string\n  ): Measure;\n\n  /**\n   * Creates a measure of type Int64. Values must be integers up to\n   * Number.MAX_SAFE_INTERGER.\n   * @param name The measure name\n   * @param unit The measure unit\n   * @param description The measure description\n   */\n  createMeasureInt64(\n    name: string,\n    unit: MeasureUnit,\n    description?: string\n  ): Measure;\n\n  /**\n   * Updates all views with the new measurements.\n   * @param measurements A list of measurements to record\n   * @param tags optional The tags to which the value is applied.\n   *     tags could either be explicitly passed to the method, or implicitly\n   *     read from current execution context.\n   * @param attachments optional The contextual information associated with an\n   *     example value. The contextual information is represented as key - value\n   *     string pairs.\n   */\n  record(\n    measurements: Measurement[],\n    tags?: TagMap,\n    attachments?: { [key: string]: string }\n  ): void;\n\n  /**\n   * Remove all registered Views and exporters from the stats.\n   */\n  clear(): void;\n\n  /**\n   * Gets a collection of produced Metric`s to be exported.\n   * @returns The List of metrics.\n   */\n  getMetrics(): Metric[];\n\n  /**\n   * Registers an exporter to send stats data to a service.\n   * @param exporter An stats exporter\n   */\n  registerExporter(exporter: StatsEventListener): void;\n\n  /**\n   * Unregisters an exporter. It should be called whenever the exporter is not\n   * needed anymore.\n   * @param exporter An stats exporter\n   */\n  unregisterExporter(exporter: StatsEventListener): void;\n\n  /**\n   * Enters the scope of code where the given `TagMap` is in the current context\n   * (replacing the previous `TagMap`).\n   * @param tags The TagMap to be set to the current context.\n   * @param fn Callback function.\n   * @returns The callback return.\n   */\n  withTagContext<T>(tags: TagMap, fn: Func<T>): T;\n\n  /** Gets the current tag context. */\n  getCurrentTagContext(): TagMap;\n}\n\n/**\n * Describes the type of the individual values/measurements recorded by an\n * application. It includes information such as the type of measurement, the\n * units of measurement and descriptive names for the data. This provides the\n * fundamental type used for recording data.\n */\nexport interface Measure {\n  /**\n   * A string by which the measure will be referred to, e.g.\n   * \"rpc_server_latency\". Names MUST be unique within the library.\n   */\n  readonly name: string;\n  /** Describes the measure, e.g. \"RPC latency in seconds\". */\n  readonly description?: string;\n  /**\n   * Describes the unit used for the Measure. Follows the format described by\n   * http://unitsofmeasure.org/ucum.html.\n   */\n  readonly unit: MeasureUnit;\n  /** The type used for this Measure. */\n  readonly type: MeasureType;\n}\n\n/**\n * Describes the unit used for the Measure. Should follows the format described\n * by http://unitsofmeasure.org/ucum.html.\n */\nexport enum MeasureUnit {\n  UNIT = '1', // for general counts\n  BYTE = 'by', // bytes\n  KBYTE = 'kb', // Kbytes\n  SEC = 's', // seconds\n  MS = 'ms', // millisecond\n  NS = 'ns', // nanosecond\n}\n\n/** Describes the types of a Measure. It can be Int64 or a Double type. */\nexport enum MeasureType {\n  INT64 = 'INT64',\n  DOUBLE = 'DOUBLE',\n}\n\n/** Describes a data point to be collected for a Measure. */\nexport interface Measurement {\n  /** The measure to which the value is applied */\n  readonly measure: Measure;\n  /**\n   * The recorded value. If the measure has type INT64, value must be an integer\n   * up to Number.MAX_SAFE_INTERGER.\n   */\n  readonly value: number;\n}\n\n/**\n * Defines how individual measurements are broken down by tags and aggregated.\n */\nexport interface View {\n  /**\n   * A string by which the View will be referred to, e.g. \"rpc_latency\". Names\n   * MUST be unique within the library.\n   */\n  readonly name: string;\n  /** Describes the view, e.g. \"RPC latency distribution\" */\n  readonly description: string;\n  /** The Measure to which this view is applied. */\n  readonly measure: Measure;\n  /**\n   * An Aggregation describes how data collected is aggregated.\n   * There are four aggregation types: count, sum, lastValue and distirbution.\n   */\n  readonly aggregation: AggregationType;\n  /** The start time for this view */\n  readonly startTime: number;\n  /**\n   * The end time for this view - represents the last time a value was recorded\n   */\n  endTime?: number;\n  /** true if the view was registered */\n  registered: boolean;\n  /**\n   * Records a measurement in the proper view's row. This method is used by\n   * Stats. User should prefer using Stats.record() instead.\n   *\n   * Measurements with measurement type INT64 will have its value truncated.\n   * @param measurement The measurement to record\n   * @param tags The tags to which the value is applied\n   * @param attachments optional The contextual information associated with an\n   *     example value. THe contextual information is represented as key - value\n   *     string pairs.\n   */\n  recordMeasurement(\n    measurement: Measurement,\n    tags: TagMap,\n    attachments?: { [key: string]: string }\n  ): void;\n  /**\n   * Returns a snapshot of an AggregationData for that tags/labels values.\n   * @param tagValues The desired data's tag values.\n   */\n  getSnapshot(tagValues: Array<TagValue | null>): AggregationData;\n  /** Gets the view's tag keys */\n  getColumns(): TagKey[];\n  /** Gets view`s metric */\n  getMetric(start: number): Metric;\n}\n\n/**\n * Informs the type of the aggregation. It can be: count, sum, lastValue or\n * distribution.\n */\nexport enum AggregationType {\n  COUNT = 0,\n  SUM = 1,\n  LAST_VALUE = 2,\n  DISTRIBUTION = 3,\n}\n\n/** Defines how data is collected and aggregated */\nexport interface AggregationMetadata {\n  /** The aggregation type of the aggregation data */\n  readonly type: AggregationType;\n  /** The tagValues that this AggregationData collects and aggregates */\n  readonly tagValues: Array<TagValue | null>;\n  /** The latest timestamp a new data point was recorded */\n  timestamp: number;\n}\n\n/**\n * Data collected and aggregated with this AggregationData will be summed\n * up.\n */\nexport interface SumData extends AggregationMetadata {\n  type: AggregationType.SUM;\n  /** The current accumulated value */\n  value: number;\n}\n\n/**\n * This AggregationData counts the number of measurements recorded.\n */\nexport interface CountData extends AggregationMetadata {\n  type: AggregationType.COUNT;\n  /** The current counted value */\n  value: number;\n}\n\n/**\n * This AggregationData represents the last recorded value. This is useful\n * when giving support to Gauges.\n */\nexport interface LastValueData extends AggregationMetadata {\n  type: AggregationType.LAST_VALUE;\n  /** The last recorded value */\n  value: number;\n}\n\n/** This AggregationData contains a histogram of the collected values. */\nexport interface DistributionData extends AggregationMetadata {\n  type: AggregationType.DISTRIBUTION;\n  /** The first timestamp a datapoint was added */\n  readonly startTime: number;\n  /** Get the total count of all recorded values in the histogram */\n  count: number;\n  /** Sum of all recorded values in the histogram */\n  sum: number;\n  /** Get the computed mean value of all recorded values in the histogram */\n  mean: number;\n  /**\n   * Get the computed standard deviation of all recorded values in the\n   * histogram\n   */\n  stdDeviation: number;\n  /**\n   * Get the computed sum of squared deviations of all recorded values in the\n   * histogram.\n   */\n  sumOfSquaredDeviation: number;\n  /** Bucket distribution of the histogram */\n  buckets: Bucket[];\n  /** Buckets count */\n  bucketCounts?: number[];\n  /** If the distribution does not have a histogram, then omit this field. */\n  exemplars?: StatsExemplar[];\n}\n\n/**\n * Exemplars are example points that may be used to annotate aggregated\n * Distribution values. They are metadata that gives information about a\n * particular value added to a Distribution bucket.\n */\nexport interface StatsExemplar {\n  /**\n   * Value of the exemplar point. It determines which bucket the exemplar\n   * belongs to.\n   */\n  readonly value: number;\n  /** The observation (sampling) time of the above value. */\n  readonly timestamp: number;\n  /** Contextual information about the example value. */\n  readonly attachments: { [key: string]: string };\n}\n\nexport type Bucket = number;\nexport type AggregationData =\n  | SumData\n  | CountData\n  | LastValueData\n  | DistributionData;\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"29c525b031488ff88ca73f66eca5c5e353801e38","contentHash":"afe5a740d647327a8d80762a31ed4f53862fda8fe890a66568ddd682c878bf48"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/recorder.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/recorder.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":26}},"2":{"start":{"line":19,"column":16},"end":{"line":19,"column":34}},"3":{"start":{"line":20,"column":26},"end":{"line":20,"column":30}},"4":{"start":{"line":23,"column":8},"end":{"line":23,"column":47}},"5":{"start":{"line":24,"column":22},"end":{"line":26,"column":43}},"6":{"start":{"line":27,"column":8},"end":{"line":36,"column":9}},"7":{"start":{"line":29,"column":16},"end":{"line":29,"column":83}},"8":{"start":{"line":31,"column":16},"end":{"line":31,"column":61}},"9":{"start":{"line":33,"column":16},"end":{"line":33,"column":63}},"10":{"start":{"line":35,"column":16},"end":{"line":35,"column":67}},"11":{"start":{"line":40,"column":8},"end":{"line":41,"column":76}},"12":{"start":{"line":40,"column":37},"end":{"line":41,"column":74}},"13":{"start":{"line":44,"column":8},"end":{"line":44,"column":36}},"14":{"start":{"line":45,"column":26},"end":{"line":45,"column":86}},"15":{"start":{"line":45,"column":71},"end":{"line":45,"column":85}},"16":{"start":{"line":46,"column":8},"end":{"line":48,"column":9}},"17":{"start":{"line":47,"column":12},"end":{"line":47,"column":58}},"18":{"start":{"line":49,"column":8},"end":{"line":52,"column":9}},"19":{"start":{"line":51,"column":12},"end":{"line":51,"column":60}},"20":{"start":{"line":53,"column":8},"end":{"line":55,"column":9}},"21":{"start":{"line":54,"column":12},"end":{"line":54,"column":42}},"22":{"start":{"line":56,"column":8},"end":{"line":56,"column":38}},"23":{"start":{"line":57,"column":24},"end":{"line":57,"column":45}},"24":{"start":{"line":58,"column":8},"end":{"line":60,"column":73}},"25":{"start":{"line":61,"column":8},"end":{"line":63,"column":68}},"26":{"start":{"line":64,"column":8},"end":{"line":64,"column":115}},"27":{"start":{"line":67,"column":8},"end":{"line":75,"column":9}},"28":{"start":{"line":70,"column":12},"end":{"line":74,"column":14}},"29":{"start":{"line":76,"column":8},"end":{"line":76,"column":32}},"30":{"start":{"line":79,"column":8},"end":{"line":79,"column":31}},"31":{"start":{"line":80,"column":8},"end":{"line":80,"column":23}},"32":{"start":{"line":83,"column":8},"end":{"line":83,"column":29}},"33":{"start":{"line":84,"column":8},"end":{"line":84,"column":25}},"34":{"start":{"line":87,"column":8},"end":{"line":87,"column":36}},"35":{"start":{"line":88,"column":8},"end":{"line":88,"column":29}},"36":{"start":{"line":91,"column":0},"end":{"line":91,"column":28}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":22,"column":4},"end":{"line":22,"column":5}},"loc":{"start":{"line":22,"column":69},"end":{"line":37,"column":5}},"line":22},"1":{"name":"(anonymous_1)","decl":{"start":{"line":39,"column":4},"end":{"line":39,"column":5}},"loc":{"start":{"line":39,"column":39},"end":{"line":42,"column":5}},"line":39},"2":{"name":"(anonymous_2)","decl":{"start":{"line":40,"column":27},"end":{"line":40,"column":28}},"loc":{"start":{"line":40,"column":37},"end":{"line":41,"column":74}},"line":40},"3":{"name":"(anonymous_3)","decl":{"start":{"line":43,"column":4},"end":{"line":43,"column":5}},"loc":{"start":{"line":43,"column":67},"end":{"line":77,"column":5}},"line":43},"4":{"name":"(anonymous_4)","decl":{"start":{"line":45,"column":61},"end":{"line":45,"column":62}},"loc":{"start":{"line":45,"column":71},"end":{"line":45,"column":85}},"line":45},"5":{"name":"(anonymous_5)","decl":{"start":{"line":78,"column":4},"end":{"line":78,"column":5}},"loc":{"start":{"line":78,"column":36},"end":{"line":81,"column":5}},"line":78},"6":{"name":"(anonymous_6)","decl":{"start":{"line":82,"column":4},"end":{"line":82,"column":5}},"loc":{"start":{"line":82,"column":40},"end":{"line":85,"column":5}},"line":82},"7":{"name":"(anonymous_7)","decl":{"start":{"line":86,"column":4},"end":{"line":86,"column":5}},"loc":{"start":{"line":86,"column":48},"end":{"line":89,"column":5}},"line":86}},"branchMap":{"0":{"loc":{"start":{"line":24,"column":22},"end":{"line":26,"column":43}},"type":"cond-expr","locations":[{"start":{"line":25,"column":14},"end":{"line":25,"column":31}},{"start":{"line":26,"column":14},"end":{"line":26,"column":43}}],"line":24},"1":{"loc":{"start":{"line":27,"column":8},"end":{"line":36,"column":9}},"type":"switch","locations":[{"start":{"line":28,"column":12},"end":{"line":29,"column":83}},{"start":{"line":30,"column":12},"end":{"line":31,"column":61}},{"start":{"line":32,"column":12},"end":{"line":33,"column":63}},{"start":{"line":34,"column":12},"end":{"line":35,"column":67}}],"line":27},"2":{"loc":{"start":{"line":40,"column":37},"end":{"line":41,"column":74}},"type":"binary-expr","locations":[{"start":{"line":40,"column":37},"end":{"line":40,"column":53}},{"start":{"line":41,"column":57},"end":{"line":41,"column":74}}],"line":40},"3":{"loc":{"start":{"line":46,"column":8},"end":{"line":48,"column":9}},"type":"if","locations":[{"start":{"line":46,"column":8},"end":{"line":48,"column":9}},{"start":{"line":46,"column":8},"end":{"line":48,"column":9}}],"line":46},"4":{"loc":{"start":{"line":49,"column":8},"end":{"line":52,"column":9}},"type":"if","locations":[{"start":{"line":49,"column":8},"end":{"line":52,"column":9}},{"start":{"line":49,"column":8},"end":{"line":52,"column":9}}],"line":49},"5":{"loc":{"start":{"line":49,"column":12},"end":{"line":50,"column":62}},"type":"binary-expr","locations":[{"start":{"line":49,"column":12},"end":{"line":49,"column":41}},{"start":{"line":50,"column":12},"end":{"line":50,"column":62}}],"line":49},"6":{"loc":{"start":{"line":53,"column":8},"end":{"line":55,"column":9}},"type":"if","locations":[{"start":{"line":53,"column":8},"end":{"line":55,"column":9}},{"start":{"line":53,"column":8},"end":{"line":55,"column":9}}],"line":53},"7":{"loc":{"start":{"line":67,"column":8},"end":{"line":75,"column":9}},"type":"if","locations":[{"start":{"line":67,"column":8},"end":{"line":75,"column":9}},{"start":{"line":67,"column":8},"end":{"line":75,"column":9}}],"line":67},"8":{"loc":{"start":{"line":67,"column":12},"end":{"line":69,"column":59}},"type":"binary-expr","locations":[{"start":{"line":67,"column":12},"end":{"line":67,"column":23}},{"start":{"line":68,"column":12},"end":{"line":68,"column":38}},{"start":{"line":69,"column":12},"end":{"line":69,"column":59}}],"line":67}},"s":{"0":1,"1":1,"2":1,"3":1,"4":257,"5":257,"6":257,"7":85,"8":54,"9":55,"10":63,"11":111,"12":224,"13":85,"14":85,"15":161,"16":85,"17":0,"18":85,"19":85,"20":85,"21":19,"22":85,"23":85,"24":85,"25":85,"26":85,"27":85,"28":12,"29":85,"30":54,"31":54,"32":55,"33":55,"34":63,"35":63,"36":1},"f":{"0":257,"1":111,"2":224,"3":85,"4":161,"5":54,"6":55,"7":63},"b":{"0":[174,83],"1":[85,54,55,63],"2":[224,8],"3":[0,85],"4":[85,0],"5":[85,85],"6":[19,66],"7":[12,73],"8":[85,12,12]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/recorder.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/recorder.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TagKey, TagValue } from '../tags/types';\nimport {\n  AggregationData,\n  AggregationType,\n  CountData,\n  DistributionData,\n  LastValueData,\n  Measurement,\n  MeasureType,\n  SumData,\n} from './types';\n\nconst UNKNOWN_TAG_VALUE: TagValue | null = null;\n\nexport class Recorder {\n  static addMeasurement(\n    aggregationData: AggregationData,\n    measurement: Measurement,\n    attachments?: { [key: string]: string }\n  ): AggregationData {\n    aggregationData.timestamp = Date.now();\n    const value =\n      measurement.measure.type === MeasureType.DOUBLE\n        ? measurement.value\n        : Math.trunc(measurement.value);\n\n    switch (aggregationData.type) {\n      case AggregationType.DISTRIBUTION:\n        return this.addToDistribution(aggregationData, value, attachments);\n\n      case AggregationType.SUM:\n        return this.addToSum(aggregationData, value);\n\n      case AggregationType.COUNT:\n        return this.addToCount(aggregationData, value);\n\n      default:\n        return this.addToLastValue(aggregationData, value);\n    }\n  }\n\n  /** Gets the tag values from tags and columns */\n  static getTagValues(\n    tags: Map<TagKey, TagValue>,\n    columns: TagKey[]\n  ): Array<TagValue | null> {\n    return columns.map(\n      tagKey =>\n        tags.get(tagKey) ||\n        /** replace not found key values by null. */ UNKNOWN_TAG_VALUE\n    );\n  }\n\n  private static addToDistribution(\n    distributionData: DistributionData,\n    value: number,\n    attachments?: { [key: string]: string }\n  ): DistributionData {\n    distributionData.count += 1;\n\n    let bucketIndex = distributionData.buckets.findIndex(\n      bucket => bucket > value\n    );\n\n    if (bucketIndex < 0) {\n      bucketIndex = distributionData.buckets.length;\n    }\n\n    if (\n      distributionData.bucketCounts &&\n      distributionData.bucketCounts.length > bucketIndex\n    ) {\n      distributionData.bucketCounts[bucketIndex] += 1;\n    }\n\n    if (distributionData.count === 1) {\n      distributionData.mean = value;\n    }\n\n    distributionData.sum += value;\n\n    const oldMean = distributionData.mean;\n    distributionData.mean =\n      distributionData.mean +\n      (value - distributionData.mean) / distributionData.count;\n    distributionData.sumOfSquaredDeviation =\n      distributionData.sumOfSquaredDeviation +\n      (value - oldMean) * (value - distributionData.mean);\n    distributionData.stdDeviation = Math.sqrt(\n      distributionData.sumOfSquaredDeviation / distributionData.count\n    );\n\n    // No implicit recording for exemplars - if there are no attachments\n    // (contextual information), don't record exemplars.\n    if (\n      attachments &&\n      distributionData.exemplars &&\n      distributionData.exemplars.length > bucketIndex\n    ) {\n      distributionData.exemplars[bucketIndex] = {\n        value,\n        timestamp: distributionData.timestamp,\n        attachments,\n      };\n    }\n    return distributionData;\n  }\n\n  private static addToSum(sumData: SumData, value: number): SumData {\n    sumData.value += value;\n    return sumData;\n  }\n\n  private static addToCount(countData: CountData, value: number): CountData {\n    countData.value += 1;\n    return countData;\n  }\n\n  private static addToLastValue(\n    lastValueData: LastValueData,\n    value: number\n  ): LastValueData {\n    lastValueData.value = value;\n    return lastValueData;\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"ad734dd2ecc84f9eaedb4d17e68d41d662adab2e","contentHash":"e248ca41a994c3bfdd2b5e976c2dd23978e04870ce5335acceb61faa3e59b268"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/tagger.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/tagger.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":134}},"2":{"start":{"line":19,"column":18},"end":{"line":19,"column":38}},"3":{"start":{"line":20,"column":0},"end":{"line":20,"column":47}},"4":{"start":{"line":21,"column":28},"end":{"line":21,"column":45}},"5":{"start":{"line":24,"column":28},"end":{"line":24,"column":67}},"6":{"start":{"line":25,"column":4},"end":{"line":27,"column":5}},"7":{"start":{"line":26,"column":8},"end":{"line":26,"column":45}},"8":{"start":{"line":28,"column":4},"end":{"line":28,"column":34}},"9":{"start":{"line":30,"column":0},"end":{"line":30,"column":52}},"10":{"start":{"line":36,"column":4},"end":{"line":36,"column":64}},"11":{"start":{"line":38,"column":0},"end":{"line":38,"column":52}},"12":{"start":{"line":47,"column":23},"end":{"line":47,"column":59}},"13":{"start":{"line":48,"column":4},"end":{"line":58,"column":7}},"14":{"start":{"line":49,"column":27},"end":{"line":49,"column":49}},"15":{"start":{"line":50,"column":8},"end":{"line":52,"column":9}},"16":{"start":{"line":51,"column":12},"end":{"line":51,"column":45}},"17":{"start":{"line":53,"column":8},"end":{"line":55,"column":9}},"18":{"start":{"line":54,"column":12},"end":{"line":54,"column":45}},"19":{"start":{"line":56,"column":8},"end":{"line":56,"column":57}},"20":{"start":{"line":57,"column":8},"end":{"line":57,"column":20}},"21":{"start":{"line":60,"column":0},"end":{"line":60,"column":40}},"22":{"start":{"line":63,"column":4},"end":{"line":63,"column":68}},"23":{"start":{"line":65,"column":0},"end":{"line":65,"column":22}},"24":{"start":{"line":67,"column":21},"end":{"line":67,"column":43}},"25":{"start":{"line":68,"column":4},"end":{"line":70,"column":5}},"26":{"start":{"line":69,"column":8},"end":{"line":69,"column":88}},"27":{"start":{"line":71,"column":4},"end":{"line":71,"column":20}}},"fnMap":{"0":{"name":"getCurrentTagContext","decl":{"start":{"line":23,"column":9},"end":{"line":23,"column":29}},"loc":{"start":{"line":23,"column":46},"end":{"line":29,"column":1}},"line":23},"1":{"name":"setCurrentTagContext","decl":{"start":{"line":35,"column":9},"end":{"line":35,"column":29}},"loc":{"start":{"line":35,"column":52},"end":{"line":37,"column":1}},"line":35},"2":{"name":"withTagContext","decl":{"start":{"line":46,"column":9},"end":{"line":46,"column":23}},"loc":{"start":{"line":46,"column":50},"end":{"line":59,"column":1}},"line":46},"3":{"name":"(anonymous_3)","decl":{"start":{"line":48,"column":39},"end":{"line":48,"column":40}},"loc":{"start":{"line":48,"column":45},"end":{"line":58,"column":5}},"line":48},"4":{"name":"clear","decl":{"start":{"line":62,"column":9},"end":{"line":62,"column":14}},"loc":{"start":{"line":62,"column":31},"end":{"line":64,"column":1}},"line":62},"5":{"name":"makeDeepCopy","decl":{"start":{"line":66,"column":9},"end":{"line":66,"column":21}},"loc":{"start":{"line":66,"column":28},"end":{"line":72,"column":1}},"line":66}},"branchMap":{"0":{"loc":{"start":{"line":25,"column":4},"end":{"line":27,"column":5}},"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":27,"column":5}},{"start":{"line":25,"column":4},"end":{"line":27,"column":5}}],"line":25}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":28,"6":28,"7":16,"8":12,"9":1,"10":10,"11":1,"12":10,"13":10,"14":10,"15":10,"16":7,"17":10,"18":17,"19":10,"20":10,"21":1,"22":1,"23":1,"24":26,"25":26,"26":53,"27":26},"f":{"0":28,"1":10,"2":10,"3":10,"4":1,"5":26},"b":{"0":[16,12]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/tagger.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/tagger.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAGH,uCAAmC;AAEtB,QAAA,aAAa,GAAG,IAAI,gBAAM,EAAE,CAAC;AAC1C,MAAM,mBAAmB,GAAG,iBAAiB,CAAC;AAE9C,oCAAoC;AACpC,SAAgB,oBAAoB,CAAC,cAA6B;IAChE,MAAM,eAAe,GAAG,cAAc,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;IAChE,IAAI,eAAe,EAAE;QACnB,OAAO,YAAY,CAAC,eAAyB,CAAC,CAAC;KAChD;IACD,OAAO,IAAI,gBAAM,EAAE,CAAC;AACtB,CAAC;AAND,oDAMC;AAED;;;GAGG;AACH,SAAgB,oBAAoB,CAClC,cAA6B,EAC7B,IAAY;IAEZ,cAAc,CAAC,GAAG,CAAC,mBAAmB,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;AAC9D,CAAC;AALD,oDAKC;AAED;;;;;;GAMG;AACH,SAAgB,cAAc,CAC5B,cAA6B,EAC7B,IAAY,EACZ,EAAe;IAEf,MAAM,UAAU,GAAG,oBAAoB,CAAC,cAAc,CAAC,CAAC;IACxD,OAAO,cAAc,CAAC,YAAY,CAAC,GAAG,EAAE;QACtC,MAAM,UAAU,GAAG,IAAI,gBAAM,EAAE,CAAC;QAChC,KAAK,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC,IAAI,UAAU,CAAC,IAAI,EAAE;YAChD,UAAU,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;SAClC;QACD,KAAK,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE;YAC1C,UAAU,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;SAClC;QACD,oBAAoB,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC;QACjD,OAAO,EAAE,EAAE,CAAC;IACd,CAAC,CAAC,CAAC;AACL,CAAC;AAjBD,wCAiBC;AAED,qCAAqC;AACrC,SAAgB,KAAK,CAAC,cAA6B;IACjD,cAAc,CAAC,GAAG,CAAC,mBAAmB,EAAE,IAAI,gBAAM,EAAE,CAAC,CAAC;AACxD,CAAC;AAFD,sBAEC;AAED,SAAS,YAAY,CAAC,IAAY;IAChC,MAAM,QAAQ,GAAG,IAAI,gBAAM,EAAE,CAAC;IAC9B,KAAK,MAAM,CAAC,MAAM,EAAE,iBAAiB,CAAC,IAAI,IAAI,CAAC,gBAAgB,EAAE;QAC/D,QAAQ,CAAC,GAAG,CACV,MAAM,EACN,iBAAiB,CAAC,QAAQ,EAC1B,iBAAiB,CAAC,WAAW,CAC9B,CAAC;KACH;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as cls from '../internal/cls';\nimport { TagMap } from './tag-map';\n\nexport const EMPTY_TAG_MAP = new TagMap();\nconst CURRENT_TAG_MAP_KEY = 'current_tag_map';\n\n/** Gets the current tag context. */\nexport function getCurrentTagContext(contextManager: cls.Namespace): TagMap {\n  const tagsFromContext = contextManager.get(CURRENT_TAG_MAP_KEY);\n  if (tagsFromContext) {\n    return makeDeepCopy(tagsFromContext as TagMap);\n  }\n  return new TagMap();\n}\n\n/**\n * Sets the current tag context.\n * @param tags The TagMap.\n */\nexport function setCurrentTagContext(\n  contextManager: cls.Namespace,\n  tags: TagMap\n) {\n  contextManager.set(CURRENT_TAG_MAP_KEY, makeDeepCopy(tags));\n}\n\n/**\n * Enters the scope of code where the given `TagMap` is in the current context\n * (replacing the previous `TagMap`).\n * @param tags The TagMap to be set to the current context.\n * @param fn Callback function.\n * @returns The callback return.\n */\nexport function withTagContext<T>(\n  contextManager: cls.Namespace,\n  tags: TagMap,\n  fn: cls.Func<T>\n): T {\n  const oldContext = getCurrentTagContext(contextManager);\n  return contextManager.runAndReturn(() => {\n    const newContext = new TagMap();\n    for (const [tagKey, tagValue] of oldContext.tags) {\n      newContext.set(tagKey, tagValue);\n    }\n    for (const [tagKey, tagValue] of tags.tags) {\n      newContext.set(tagKey, tagValue);\n    }\n    setCurrentTagContext(contextManager, newContext);\n    return fn();\n  });\n}\n\n/** Clear the current tag context. */\nexport function clear(contextManager: cls.Namespace) {\n  contextManager.set(CURRENT_TAG_MAP_KEY, new TagMap());\n}\n\nfunction makeDeepCopy(tags: TagMap) {\n  const tagsCopy = new TagMap();\n  for (const [tagKey, valueWithMetadata] of tags.tagsWithMetadata) {\n    tagsCopy.set(\n      tagKey,\n      valueWithMetadata.tagValue,\n      valueWithMetadata.tagMetadata\n    );\n  }\n  return tagsCopy;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"9856401ebccace8cabaa1c8139ad5a9135873ec0","contentHash":"632ce724d707791035491528ed7c928961efa0ede05dab616a178ca5e1ac4518"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/propagation/text-format.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/propagation/text-format.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":98}},"2":{"start":{"line":27,"column":18},"end":{"line":27,"column":39}},"3":{"start":{"line":28,"column":16},"end":{"line":28,"column":35}},"4":{"start":{"line":29,"column":0},"end":{"line":29,"column":33}},"5":{"start":{"line":30,"column":34},"end":{"line":30,"column":38}},"6":{"start":{"line":31,"column":37},"end":{"line":31,"column":41}},"7":{"start":{"line":32,"column":32},"end":{"line":32,"column":35}},"8":{"start":{"line":33,"column":22},"end":{"line":33,"column":25}},"9":{"start":{"line":34,"column":33},"end":{"line":36,"column":1}},"10":{"start":{"line":43,"column":14},"end":{"line":43,"column":16}},"11":{"start":{"line":44,"column":21},"end":{"line":44,"column":22}},"12":{"start":{"line":45,"column":20},"end":{"line":45,"column":21}},"13":{"start":{"line":46,"column":17},"end":{"line":46,"column":40}},"14":{"start":{"line":47,"column":4},"end":{"line":56,"column":7}},"15":{"start":{"line":48,"column":8},"end":{"line":55,"column":9}},"16":{"start":{"line":49,"column":12},"end":{"line":50,"column":37}},"17":{"start":{"line":50,"column":16},"end":{"line":50,"column":37}},"18":{"start":{"line":51,"column":12},"end":{"line":51,"column":73}},"19":{"start":{"line":52,"column":12},"end":{"line":53,"column":88}},"20":{"start":{"line":54,"column":12},"end":{"line":54,"column":24}},"21":{"start":{"line":57,"column":4},"end":{"line":59,"column":5}},"22":{"start":{"line":58,"column":8},"end":{"line":58,"column":100}},"23":{"start":{"line":60,"column":4},"end":{"line":62,"column":5}},"24":{"start":{"line":61,"column":8},"end":{"line":61,"column":110}},"25":{"start":{"line":63,"column":4},"end":{"line":63,"column":15}},"26":{"start":{"line":65,"column":0},"end":{"line":65,"column":50}},"27":{"start":{"line":71,"column":17},"end":{"line":71,"column":39}},"28":{"start":{"line":72,"column":4},"end":{"line":73,"column":20}},"29":{"start":{"line":73,"column":8},"end":{"line":73,"column":20}},"30":{"start":{"line":74,"column":23},"end":{"line":74,"column":47}},"31":{"start":{"line":75,"column":4},"end":{"line":81,"column":7}},"32":{"start":{"line":76,"column":29},"end":{"line":76,"column":63}},"33":{"start":{"line":77,"column":8},"end":{"line":78,"column":52}},"34":{"start":{"line":78,"column":12},"end":{"line":78,"column":52}},"35":{"start":{"line":79,"column":30},"end":{"line":79,"column":42}},"36":{"start":{"line":80,"column":8},"end":{"line":80,"column":64}},"37":{"start":{"line":82,"column":4},"end":{"line":82,"column":16}},"38":{"start":{"line":84,"column":0},"end":{"line":84,"column":54}},"39":{"start":{"line":86,"column":23},"end":{"line":86,"column":65}},"40":{"start":{"line":87,"column":4},"end":{"line":89,"column":5}},"41":{"start":{"line":88,"column":8},"end":{"line":88,"column":93}},"42":{"start":{"line":90,"column":4},"end":{"line":90,"column":22}}},"fnMap":{"0":{"name":"serializeTextFormat","decl":{"start":{"line":42,"column":9},"end":{"line":42,"column":28}},"loc":{"start":{"line":42,"column":37},"end":{"line":64,"column":1}},"line":42},"1":{"name":"(anonymous_1)","decl":{"start":{"line":47,"column":17},"end":{"line":47,"column":18}},"loc":{"start":{"line":47,"column":47},"end":{"line":56,"column":5}},"line":47},"2":{"name":"deserializeTextFormat","decl":{"start":{"line":70,"column":9},"end":{"line":70,"column":30}},"loc":{"start":{"line":70,"column":36},"end":{"line":83,"column":1}},"line":70},"3":{"name":"(anonymous_3)","decl":{"start":{"line":75,"column":23},"end":{"line":75,"column":24}},"loc":{"start":{"line":75,"column":30},"end":{"line":81,"column":5}},"line":75},"4":{"name":"validateTag","decl":{"start":{"line":85,"column":9},"end":{"line":85,"column":20}},"loc":{"start":{"line":85,"column":39},"end":{"line":91,"column":1}},"line":85}},"branchMap":{"0":{"loc":{"start":{"line":48,"column":8},"end":{"line":55,"column":9}},"type":"if","locations":[{"start":{"line":48,"column":8},"end":{"line":55,"column":9}},{"start":{"line":48,"column":8},"end":{"line":55,"column":9}}],"line":48},"1":{"loc":{"start":{"line":49,"column":12},"end":{"line":50,"column":37}},"type":"if","locations":[{"start":{"line":49,"column":12},"end":{"line":50,"column":37}},{"start":{"line":49,"column":12},"end":{"line":50,"column":37}}],"line":49},"2":{"loc":{"start":{"line":57,"column":4},"end":{"line":59,"column":5}},"type":"if","locations":[{"start":{"line":57,"column":4},"end":{"line":59,"column":5}},{"start":{"line":57,"column":4},"end":{"line":59,"column":5}}],"line":57},"3":{"loc":{"start":{"line":60,"column":4},"end":{"line":62,"column":5}},"type":"if","locations":[{"start":{"line":60,"column":4},"end":{"line":62,"column":5}},{"start":{"line":60,"column":4},"end":{"line":62,"column":5}}],"line":60},"4":{"loc":{"start":{"line":72,"column":4},"end":{"line":73,"column":20}},"type":"if","locations":[{"start":{"line":72,"column":4},"end":{"line":73,"column":20}},{"start":{"line":72,"column":4},"end":{"line":73,"column":20}}],"line":72},"5":{"loc":{"start":{"line":77,"column":8},"end":{"line":78,"column":52}},"type":"if","locations":[{"start":{"line":77,"column":8},"end":{"line":78,"column":52}},{"start":{"line":77,"column":8},"end":{"line":78,"column":52}}],"line":77},"6":{"loc":{"start":{"line":87,"column":4},"end":{"line":89,"column":5}},"type":"if","locations":[{"start":{"line":87,"column":4},"end":{"line":89,"column":5}},{"start":{"line":87,"column":4},"end":{"line":89,"column":5}}],"line":87}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":5,"11":5,"12":5,"13":5,"14":5,"15":185,"16":184,"17":181,"18":184,"19":184,"20":184,"21":5,"22":1,"23":4,"24":0,"25":4,"26":1,"27":5,"28":5,"29":1,"30":4,"31":4,"32":6,"33":6,"34":1,"35":5,"36":5,"37":3,"38":1,"39":184,"40":184,"41":0,"42":184},"f":{"0":5,"1":185,"2":5,"3":6,"4":184},"b":{"0":[184,1],"1":[181,3],"2":[1,4],"3":[0,4],"4":[1,4],"5":[1,5],"6":[0,184]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/propagation/text-format.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/propagation/text-format.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH;;;;;;;GAOG;AAEH,wCAAoC;AACpC,oCAA0E;AAE7D,QAAA,kBAAkB,GAAG,GAAG,CAAC;AACtC,MAAM,yBAAyB,GAAG,IAAI,CAAC;AACvC,MAAM,4BAA4B,GAAG,IAAI,CAAC;AAC1C,MAAM,uBAAuB,GAAG,GAAG,CAAC;AACpC,MAAM,aAAa,GAAG,GAAG,CAAC;AAC1B,MAAM,wBAAwB,GAAG;IAC/B,MAAM,EAAE,cAAM,CAAC,qBAAqB;CACrC,CAAC;AAEF;;;;GAIG;AACH,SAAgB,mBAAmB,CAAC,MAAc;IAChD,IAAI,GAAG,GAAG,EAAE,CAAC;IACb,IAAI,UAAU,GAAG,CAAC,CAAC;IACnB,IAAI,SAAS,GAAG,CAAC,CAAC;IAClB,MAAM,IAAI,GAAG,MAAM,CAAC,gBAAgB,CAAC;IACrC,IAAI,CAAC,OAAO,CAAC,CAAC,gBAAsC,EAAE,MAAc,EAAE,EAAE;QACtE,IAAI,gBAAgB,CAAC,WAAW,CAAC,MAAM,KAAK,cAAM,CAAC,cAAc,EAAE;YACjE,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC;gBAAE,GAAG,IAAI,aAAa,CAAC;YACzC,UAAU,IAAI,WAAW,CAAC,MAAM,EAAE,gBAAgB,CAAC,QAAQ,CAAC,CAAC;YAC7D,GAAG;gBACD,MAAM,CAAC,IAAI,GAAG,uBAAuB,GAAG,gBAAgB,CAAC,QAAQ,CAAC,KAAK,CAAC;YAC1E,SAAS,EAAE,CAAC;SACb;IACH,CAAC,CAAC,CAAC;IAEH,IAAI,SAAS,GAAG,0BAAkB,EAAE;QAClC,MAAM,IAAI,KAAK,CACb,8CAA8C,0BAAkB,EAAE,CACnE,CAAC;KACH;IAED,IAAI,UAAU,GAAG,4BAA4B,EAAE;QAC7C,MAAM,IAAI,KAAK,CACb,sDAAsD,4BAA4B,EAAE,CACrF,CAAC;KACH;IAED,OAAO,GAAG,CAAC;AACb,CAAC;AA5BD,kDA4BC;AAED;;;GAGG;AACH,SAAgB,qBAAqB,CAAC,GAAW;IAC/C,MAAM,IAAI,GAAG,IAAI,gBAAM,EAAE,CAAC;IAC1B,IAAI,CAAC,GAAG;QAAE,OAAO,IAAI,CAAC;IACtB,MAAM,UAAU,GAAG,GAAG,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IAC5C,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QACvB,MAAM,YAAY,GAAG,GAAG,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC;QACxD,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,iBAAiB,GAAG,EAAE,CAAC,CAAC;QAEvE,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,YAAY,CAAC;QACnC,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,wBAAwB,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC;IACH,OAAO,IAAI,CAAC;AACd,CAAC;AAZD,sDAYC;AAED,SAAS,WAAW,CAAC,MAAc,EAAE,QAAkB;IACrD,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC;IAC9D,IAAI,UAAU,GAAG,yBAAyB,EAAE;QAC1C,MAAM,IAAI,KAAK,CACb,wCAAwC,yBAAyB,EAAE,CACpE,CAAC;KACH;IACD,OAAO,UAAU,CAAC;AACpB,CAAC","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This module contains the functions for serializing and deserializing\n * TagMap (TagContext) with W3C Correlation Context as the HTTP text format.\n * It allows tags to propagate across requests.\n *\n * OpenCensus uses W3C Correlation Context as the HTTP text format.\n * https://github.com/w3c/correlation-context/blob/master/correlation_context/HTTP_HEADER_FORMAT.md\n */\n\nimport { TagMap } from '../tag-map';\nimport { TagKey, TagTtl, TagValue, TagValueWithMetadata } from '../types';\n\nexport const MAX_NUMBER_OF_TAGS = 180;\nconst TAG_SERIALIZED_SIZE_LIMIT = 4096;\nconst TAGMAP_SERIALIZED_SIZE_LIMIT = 8192;\nconst TAG_KEY_VALUE_DELIMITER = '=';\nconst TAG_DELIMITER = ',';\nconst UNLIMITED_PROPAGATION_MD = {\n  tagTtl: TagTtl.UNLIMITED_PROPAGATION,\n};\n\n/**\n * Serializes a given TagMap to the on-the-wire format based on the W3C HTTP\n * text format standard.\n * @param tagMap The TagMap to serialize.\n */\nexport function serializeTextFormat(tagMap: TagMap): string {\n  let ret = '';\n  let totalChars = 0;\n  let totalTags = 0;\n  const tags = tagMap.tagsWithMetadata;\n  tags.forEach((tagsWithMetadata: TagValueWithMetadata, tagKey: TagKey) => {\n    if (tagsWithMetadata.tagMetadata.tagTtl !== TagTtl.NO_PROPAGATION) {\n      if (ret.length > 0) ret += TAG_DELIMITER;\n      totalChars += validateTag(tagKey, tagsWithMetadata.tagValue);\n      ret +=\n        tagKey.name + TAG_KEY_VALUE_DELIMITER + tagsWithMetadata.tagValue.value;\n      totalTags++;\n    }\n  });\n\n  if (totalTags > MAX_NUMBER_OF_TAGS) {\n    throw new Error(\n      `Number of tags in the TagMap exceeds limit ${MAX_NUMBER_OF_TAGS}`\n    );\n  }\n\n  if (totalChars > TAGMAP_SERIALIZED_SIZE_LIMIT) {\n    throw new Error(\n      `Size of TagMap exceeds the maximum serialized size ${TAGMAP_SERIALIZED_SIZE_LIMIT}`\n    );\n  }\n\n  return ret;\n}\n\n/**\n * Deserializes input to TagMap based on the W3C HTTP text format standard.\n * @param str The TagMap to deserialize.\n */\nexport function deserializeTextFormat(str: string): TagMap {\n  const tags = new TagMap();\n  if (!str) return tags;\n  const listOfTags = str.split(TAG_DELIMITER);\n  listOfTags.forEach(tag => {\n    const keyValuePair = tag.split(TAG_KEY_VALUE_DELIMITER);\n    if (keyValuePair.length !== 2) throw new Error(`Malformed tag ${tag}`);\n\n    const [name, value] = keyValuePair;\n    tags.set({ name }, { value }, UNLIMITED_PROPAGATION_MD);\n  });\n  return tags;\n}\n\nfunction validateTag(tagKey: TagKey, tagValue: TagValue) {\n  const charsOfTag = tagKey.name.length + tagValue.value.length;\n  if (charsOfTag > TAG_SERIALIZED_SIZE_LIMIT) {\n    throw new Error(\n      `Serialized size of tag exceeds limit ${TAG_SERIALIZED_SIZE_LIMIT}`\n    );\n  }\n  return charsOfTag;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"76f5c03966509843780eae978ff11cc379e2e7c8","contentHash":"b5dac2a2452bf32c487bf867f527aad1c8fdf490e2a9fda7b600676aac2695bb"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/resource/resource.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/resource/resource.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":30}},"2":{"start":{"line":19,"column":23},"end":{"line":19,"column":58}},"3":{"start":{"line":35,"column":8},"end":{"line":35,"column":83}},"4":{"start":{"line":46,"column":8},"end":{"line":47,"column":50}},"5":{"start":{"line":47,"column":12},"end":{"line":47,"column":50}},"6":{"start":{"line":48,"column":30},"end":{"line":48,"column":42}},"7":{"start":{"line":49,"column":8},"end":{"line":51,"column":9}},"8":{"start":{"line":49,"column":21},"end":{"line":49,"column":22}},"9":{"start":{"line":50,"column":12},"end":{"line":50,"column":72}},"10":{"start":{"line":52,"column":8},"end":{"line":52,"column":31}},"11":{"start":{"line":64,"column":8},"end":{"line":65,"column":24}},"12":{"start":{"line":65,"column":12},"end":{"line":65,"column":24}},"13":{"start":{"line":66,"column":8},"end":{"line":68,"column":9}},"14":{"start":{"line":67,"column":12},"end":{"line":67,"column":80}},"15":{"start":{"line":69,"column":8},"end":{"line":69,"column":33}},"16":{"start":{"line":84,"column":8},"end":{"line":85,"column":22}},"17":{"start":{"line":85,"column":12},"end":{"line":85,"column":22}},"18":{"start":{"line":86,"column":23},"end":{"line":86,"column":25}},"19":{"start":{"line":87,"column":26},"end":{"line":87,"column":70}},"20":{"start":{"line":88,"column":8},"end":{"line":107,"column":9}},"21":{"start":{"line":89,"column":33},"end":{"line":89,"column":82}},"22":{"start":{"line":90,"column":12},"end":{"line":92,"column":13}},"23":{"start":{"line":91,"column":16},"end":{"line":91,"column":25}},"24":{"start":{"line":93,"column":31},"end":{"line":93,"column":43}},"25":{"start":{"line":95,"column":12},"end":{"line":95,"column":29}},"26":{"start":{"line":96,"column":12},"end":{"line":99,"column":26}},"27":{"start":{"line":100,"column":12},"end":{"line":102,"column":13}},"28":{"start":{"line":101,"column":16},"end":{"line":101,"column":89}},"29":{"start":{"line":103,"column":12},"end":{"line":105,"column":13}},"30":{"start":{"line":104,"column":16},"end":{"line":104,"column":91}},"31":{"start":{"line":106,"column":12},"end":{"line":106,"column":32}},"32":{"start":{"line":108,"column":8},"end":{"line":108,"column":22}},"33":{"start":{"line":119,"column":8},"end":{"line":121,"column":9}},"34":{"start":{"line":120,"column":12},"end":{"line":120,"column":33}},"35":{"start":{"line":122,"column":8},"end":{"line":124,"column":9}},"36":{"start":{"line":123,"column":12},"end":{"line":123,"column":28}},"37":{"start":{"line":125,"column":8},"end":{"line":128,"column":10}},"38":{"start":{"line":138,"column":8},"end":{"line":139,"column":64}},"39":{"start":{"line":149,"column":8},"end":{"line":149,"column":61}},"40":{"start":{"line":153,"column":8},"end":{"line":153,"column":93}},"41":{"start":{"line":154,"column":8},"end":{"line":154,"column":102}},"42":{"start":{"line":157,"column":0},"end":{"line":157,"column":36}},"43":{"start":{"line":159,"column":0},"end":{"line":159,"column":30}},"44":{"start":{"line":161,"column":0},"end":{"line":161,"column":35}},"45":{"start":{"line":163,"column":0},"end":{"line":163,"column":44}},"46":{"start":{"line":164,"column":0},"end":{"line":164,"column":85}},"47":{"start":{"line":165,"column":0},"end":{"line":165,"column":94}},"48":{"start":{"line":166,"column":0},"end":{"line":168,"column":19}},"49":{"start":{"line":169,"column":0},"end":{"line":171,"column":19}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":34,"column":4},"end":{"line":34,"column":5}},"loc":{"start":{"line":34,"column":44},"end":{"line":36,"column":5}},"line":34},"1":{"name":"(anonymous_1)","decl":{"start":{"line":45,"column":4},"end":{"line":45,"column":5}},"loc":{"start":{"line":45,"column":37},"end":{"line":53,"column":5}},"line":45},"2":{"name":"(anonymous_2)","decl":{"start":{"line":63,"column":4},"end":{"line":63,"column":5}},"loc":{"start":{"line":63,"column":41},"end":{"line":70,"column":5}},"line":63},"3":{"name":"(anonymous_3)","decl":{"start":{"line":83,"column":4},"end":{"line":83,"column":5}},"loc":{"start":{"line":83,"column":45},"end":{"line":109,"column":5}},"line":83},"4":{"name":"(anonymous_4)","decl":{"start":{"line":118,"column":4},"end":{"line":118,"column":5}},"loc":{"start":{"line":118,"column":42},"end":{"line":129,"column":5}},"line":118},"5":{"name":"(anonymous_5)","decl":{"start":{"line":137,"column":4},"end":{"line":137,"column":5}},"loc":{"start":{"line":137,"column":25},"end":{"line":140,"column":5}},"line":137},"6":{"name":"(anonymous_6)","decl":{"start":{"line":148,"column":4},"end":{"line":148,"column":5}},"loc":{"start":{"line":148,"column":36},"end":{"line":150,"column":5}},"line":148},"7":{"name":"(anonymous_7)","decl":{"start":{"line":152,"column":4},"end":{"line":152,"column":5}},"loc":{"start":{"line":152,"column":19},"end":{"line":155,"column":5}},"line":152}},"branchMap":{"0":{"loc":{"start":{"line":46,"column":8},"end":{"line":47,"column":50}},"type":"if","locations":[{"start":{"line":46,"column":8},"end":{"line":47,"column":50}},{"start":{"line":46,"column":8},"end":{"line":47,"column":50}}],"line":46},"1":{"loc":{"start":{"line":64,"column":8},"end":{"line":65,"column":24}},"type":"if","locations":[{"start":{"line":64,"column":8},"end":{"line":65,"column":24}},{"start":{"line":64,"column":8},"end":{"line":65,"column":24}}],"line":64},"2":{"loc":{"start":{"line":66,"column":8},"end":{"line":68,"column":9}},"type":"if","locations":[{"start":{"line":66,"column":8},"end":{"line":68,"column":9}},{"start":{"line":66,"column":8},"end":{"line":68,"column":9}}],"line":66},"3":{"loc":{"start":{"line":84,"column":8},"end":{"line":85,"column":22}},"type":"if","locations":[{"start":{"line":84,"column":8},"end":{"line":85,"column":22}},{"start":{"line":84,"column":8},"end":{"line":85,"column":22}}],"line":84},"4":{"loc":{"start":{"line":90,"column":12},"end":{"line":92,"column":13}},"type":"if","locations":[{"start":{"line":90,"column":12},"end":{"line":92,"column":13}},{"start":{"line":90,"column":12},"end":{"line":92,"column":13}}],"line":90},"5":{"loc":{"start":{"line":100,"column":12},"end":{"line":102,"column":13}},"type":"if","locations":[{"start":{"line":100,"column":12},"end":{"line":102,"column":13}},{"start":{"line":100,"column":12},"end":{"line":102,"column":13}}],"line":100},"6":{"loc":{"start":{"line":103,"column":12},"end":{"line":105,"column":13}},"type":"if","locations":[{"start":{"line":103,"column":12},"end":{"line":105,"column":13}},{"start":{"line":103,"column":12},"end":{"line":105,"column":13}}],"line":103},"7":{"loc":{"start":{"line":119,"column":8},"end":{"line":121,"column":9}},"type":"if","locations":[{"start":{"line":119,"column":8},"end":{"line":121,"column":9}},{"start":{"line":119,"column":8},"end":{"line":121,"column":9}}],"line":119},"8":{"loc":{"start":{"line":122,"column":8},"end":{"line":124,"column":9}},"type":"if","locations":[{"start":{"line":122,"column":8},"end":{"line":124,"column":9}},{"start":{"line":122,"column":8},"end":{"line":124,"column":9}}],"line":122},"9":{"loc":{"start":{"line":126,"column":18},"end":{"line":126,"column":53}},"type":"binary-expr","locations":[{"start":{"line":126,"column":18},"end":{"line":126,"column":31}},{"start":{"line":126,"column":35},"end":{"line":126,"column":53}}],"line":126},"10":{"loc":{"start":{"line":138,"column":16},"end":{"line":139,"column":62}},"type":"binary-expr","locations":[{"start":{"line":138,"column":16},"end":{"line":138,"column":54}},{"start":{"line":139,"column":12},"end":{"line":139,"column":62}}],"line":138},"11":{"loc":{"start":{"line":149,"column":15},"end":{"line":149,"column":60}},"type":"binary-expr","locations":[{"start":{"line":149,"column":15},"end":{"line":149,"column":30}},{"start":{"line":149,"column":34},"end":{"line":149,"column":60}}],"line":149}},"s":{"0":1,"1":1,"2":1,"3":1,"4":4,"5":0,"6":4,"7":4,"8":4,"9":7,"10":4,"11":2,"12":1,"13":1,"14":0,"15":1,"16":2,"17":1,"18":1,"19":1,"20":1,"21":3,"22":3,"23":0,"24":3,"25":3,"26":3,"27":3,"28":0,"29":3,"30":0,"31":3,"32":1,"33":7,"34":0,"35":7,"36":0,"37":7,"38":7,"39":4,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1},"f":{"0":1,"1":4,"2":2,"3":2,"4":7,"5":7,"6":4,"7":1},"b":{"0":[0,4],"1":[1,1],"2":[0,1],"3":[1,1],"4":[0,3],"5":[0,3],"6":[0,3],"7":[0,7],"8":[0,7],"9":[7,4],"10":[7,7],"11":[4,4]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/resource/resource.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/resource/resource.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StringUtils } from '../internal/string-utils';\nimport { Labels, Resource } from './types';\n\n/**\n * Resource represents a resource, which capture identifying information about\n * the entities for which signals (stats or traces) are reported. It further\n * provides a framework for detection of resource information from the\n * environment and progressive population as signals propagate from the core\n * instrumentation library to a backend's exporter.\n */\nexport class CoreResource {\n  // Type, label keys, and label values should not exceed 256 characters.\n  private static readonly MAX_LENGTH = 255;\n\n  // OC_RESOURCE_LABELS is a comma-separated list of labels.\n  private static readonly COMMA_SEPARATOR = ',';\n\n  // OC_RESOURCE_LABELS contains key value pair separated by '='.\n  private static readonly LABEL_KEY_VALUE_SPLITTER = '=';\n\n  private static ENV_TYPE = CoreResource.parseResourceType(\n    process.env.OC_RESOURCE_TYPE\n  );\n  private static ENV_LABEL_MAP = CoreResource.parseResourceLabels(\n    process.env.OC_RESOURCE_LABELS\n  );\n  private static readonly ERROR_MESSAGE_INVALID_CHARS =\n    'should be a ASCII string with a length greater than 0 and not exceed ' +\n    CoreResource.MAX_LENGTH +\n    ' characters.';\n  private static readonly ERROR_MESSAGE_INVALID_VALUE =\n    'should be a ASCII string with a length not exceed ' +\n    CoreResource.MAX_LENGTH +\n    ' characters.';\n\n  /**\n   * Returns a Resource. This resource information is loaded from the\n   * OC_RESOURCE_TYPE and OC_RESOURCE_LABELS environment variables.\n   *\n   * @returns The resource.\n   */\n  static createFromEnvironmentVariables(): Resource {\n    return { type: CoreResource.ENV_TYPE, labels: CoreResource.ENV_LABEL_MAP };\n  }\n\n  /**\n   * Returns a Resource that runs all input resources sequentially and merges\n   * their results. In case a type of label key is already set, the first set\n   * value takes precedence.\n   *\n   * @param resources The list of the resources.\n   * @returns The resource.\n   */\n  static mergeResources(resources: Resource[]): Resource {\n    if (resources.length === 0) return { type: 'global', labels: {} };\n    let currentResource = resources[0];\n    for (let i = 1; i < resources.length; i++) {\n      currentResource = this.merge(currentResource, resources[i]);\n    }\n    return currentResource;\n  }\n\n  /**\n   * Creates a resource type from the OC_RESOURCE_TYPE environment variable.\n   *\n   * OC_RESOURCE_TYPE: A string that describes the type of the resource\n   * prefixed by a domain namespace, e.g. “kubernetes.io/container”.\n   *\n   * @param rawEnvType The resource type.\n   * @returns The sanitized resource type.\n   */\n  private static parseResourceType(rawEnvType?: string): string | null {\n    if (!rawEnvType) return null;\n    if (!CoreResource.isValidAndNotEmpty(rawEnvType)) {\n      throw new Error(`Type ${CoreResource.ERROR_MESSAGE_INVALID_CHARS}`);\n    }\n    return rawEnvType.trim();\n  }\n\n  /**\n   * Creates a label map from the OC_RESOURCE_LABELS environment variable.\n   *\n   * OC_RESOURCE_LABELS: A comma-separated list of labels describing the\n   * source in more detail, e.g. “key1=val1,key2=val2”. Domain names and paths\n   * are accepted as label keys. Values may be quoted or unquoted in general. If\n   * a value contains whitespaces, =, or \" characters, it must always be quoted.\n   *\n   * @param rawEnvLabels The resource labels as a comma-seperated list\n   * of key/value pairs.\n   * @returns The sanitized resource labels.\n   */\n  private static parseResourceLabels(rawEnvLabels?: string): Labels {\n    if (!rawEnvLabels) return {};\n\n    const labels: Labels = {};\n    const rawLabels: string[] = rawEnvLabels.split(this.COMMA_SEPARATOR, -1);\n    for (const rawLabel of rawLabels) {\n      const keyValuePair: string[] = rawLabel.split(\n        this.LABEL_KEY_VALUE_SPLITTER,\n        -1\n      );\n      if (keyValuePair.length !== 2) {\n        continue;\n      }\n      let [key, value] = keyValuePair;\n      // Leading and trailing whitespaces are trimmed.\n      key = key.trim();\n      value = value\n        .trim()\n        .split('^\"|\"$')\n        .join('');\n      if (!CoreResource.isValidAndNotEmpty(key)) {\n        throw new Error(\n          `Label key ${CoreResource.ERROR_MESSAGE_INVALID_CHARS}`\n        );\n      }\n      if (!CoreResource.isValid(value)) {\n        throw new Error(\n          `Label value ${CoreResource.ERROR_MESSAGE_INVALID_VALUE}`\n        );\n      }\n      labels[key] = value;\n    }\n    return labels;\n  }\n\n  /**\n   * Returns a new, merged Resource by merging two resources. In case of\n   * a collision, first resource takes precedence.\n   *\n   * @param resource The resource object.\n   * @param otherResource The resource object.\n   * @returns A new, merged Resource.\n   */\n  private static merge(resource: Resource, otherResource: Resource): Resource {\n    if (!resource) {\n      return otherResource;\n    }\n    if (!otherResource) {\n      return resource;\n    }\n    return {\n      type: resource.type || otherResource.type,\n      labels: Object.assign({}, otherResource.labels, resource.labels),\n    };\n  }\n\n  /**\n   * Determines whether the given String is a valid printable ASCII string with\n   * a length not exceed MAX_LENGTH characters.\n   *\n   * @param str The String to be validated.\n   * @returns Whether the String is valid.\n   */\n  private static isValid(name: string): boolean {\n    return (\n      name.length <= CoreResource.MAX_LENGTH &&\n      StringUtils.isPrintableString(name)\n    );\n  }\n\n  /**\n   * Determines whether the given String is a valid printable ASCII string with\n   * a length greater than 0 and not exceed MAX_LENGTH characters.\n   *\n   * @param str The String to be validated.\n   * @returns Whether the String is valid and not empty.\n   */\n  private static isValidAndNotEmpty(name: string): boolean {\n    return name.length > 0 && CoreResource.isValid(name);\n  }\n\n  /** TEST_ONLY */\n  static setup() {\n    CoreResource.ENV_TYPE = CoreResource.parseResourceType(\n      process.env.OC_RESOURCE_TYPE\n    );\n    CoreResource.ENV_LABEL_MAP = CoreResource.parseResourceLabels(\n      process.env.OC_RESOURCE_LABELS\n    );\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"7444ae025e9438d2672dadc5a52d5cdedd8fd45b","contentHash":"96b0daa8aff04826f77ffd62bc01a8c48021b302e4ef4f72ed63a285bb35b205"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/internal/string-utils.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/internal/string-utils.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":29}},"2":{"start":{"line":31,"column":8},"end":{"line":36,"column":9}},"3":{"start":{"line":31,"column":21},"end":{"line":31,"column":22}},"4":{"start":{"line":32,"column":23},"end":{"line":32,"column":36}},"5":{"start":{"line":33,"column":12},"end":{"line":35,"column":13}},"6":{"start":{"line":34,"column":16},"end":{"line":34,"column":29}},"7":{"start":{"line":37,"column":8},"end":{"line":37,"column":20}},"8":{"start":{"line":46,"column":8},"end":{"line":46,"column":38}},"9":{"start":{"line":49,"column":0},"end":{"line":49,"column":34}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":30,"column":4},"end":{"line":30,"column":5}},"loc":{"start":{"line":30,"column":34},"end":{"line":38,"column":5}},"line":30},"1":{"name":"(anonymous_1)","decl":{"start":{"line":45,"column":4},"end":{"line":45,"column":5}},"loc":{"start":{"line":45,"column":31},"end":{"line":47,"column":5}},"line":45}},"branchMap":{"0":{"loc":{"start":{"line":33,"column":12},"end":{"line":35,"column":13}},"type":"if","locations":[{"start":{"line":33,"column":12},"end":{"line":35,"column":13}},{"start":{"line":33,"column":12},"end":{"line":35,"column":13}}],"line":33},"1":{"loc":{"start":{"line":46,"column":15},"end":{"line":46,"column":37}},"type":"binary-expr","locations":[{"start":{"line":46,"column":15},"end":{"line":46,"column":24}},{"start":{"line":46,"column":28},"end":{"line":46,"column":37}}],"line":46}},"s":{"0":1,"1":1,"2":9,"3":9,"4":104,"5":104,"6":1,"7":8,"8":104,"9":1},"f":{"0":9,"1":104},"b":{"0":[1,103],"1":[104,103]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/internal/string-utils.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/internal/string-utils.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH;;;GAGG;AACH,MAAa,WAAW;IACtB;;;;;OAKG;IACH,MAAM,CAAC,iBAAiB,CAAC,GAAW;QAClC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnC,MAAM,EAAE,GAAW,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACjC,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,EAAE,CAAC,EAAE;gBACpC,OAAO,KAAK,CAAC;aACd;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,eAAe,CAAC,EAAU;QAC/B,OAAO,EAAE,IAAI,GAAG,IAAI,EAAE,IAAI,GAAG,CAAC;IAChC,CAAC;CACF;AA1BD,kCA0BC","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Internal utility methods for working with tag keys, tag values, and metric\n * names.\n */\nexport class StringUtils {\n  /**\n   * Determines whether the String contains only printable characters.\n   *\n   * @param str The String to be validated.\n   * @returns Whether the String contains only printable characters.\n   */\n  static isPrintableString(str: string): boolean {\n    for (let i = 0; i < str.length; i++) {\n      const ch: string = str.charAt(i);\n      if (!StringUtils.isPrintableChar(ch)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determines whether the Character is printable.\n   *\n   * @param ch The Character to be validated.\n   * @returns Whether the Character is printable.\n   */\n  static isPrintableChar(ch: string): boolean {\n    return ch >= ' ' && ch <= '~';\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"107aa9bd00533e3c58c4c21f2c0596a88c4b0a7d","contentHash":"209fc064913785bb855835dc4d4e8ea62012869bf3a960322bab06bd9ebef471"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/resource/types.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/resource/types.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}}},"fnMap":{},"branchMap":{},"s":{"0":1},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/resource/types.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/resource/types.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** A Resource describes the entity for which a signal was collected. */\nexport interface Resource {\n  /**\n   * An optional string which describes a well-known type of resource.\n   */\n  readonly type: string | null;\n\n  /**\n   * A dictionary of labels with string keys and values that provide information\n   * about the entity.\n   */\n  readonly labels: Labels;\n}\n\n/** Labels are maps of keys -> values */\nexport interface Labels {\n  [key: string]: string;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"716ca6bcdaa4ef8802605b79c70f17834e1a9fcd","contentHash":"8d9bf027ec3e7d0b65d61373bc46a40032a36c7e101acde6e1b41bb229a1a54b"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/version.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/version.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":25}},"2":{"start":{"line":20,"column":0},"end":{"line":20,"column":27}}},"fnMap":{},"branchMap":{},"s":{"0":1,"1":1,"2":1},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/version.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/version.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,kCAAkC;AACrB,QAAA,OAAO,GAAG,QAAQ,CAAC","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Export the core package version\nexport const version = '0.0.20';\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"cc9f455325662aa1d46103f7c166690fc5b41819","contentHash":"979e48ac356510bcc5fd35e2a79eca317f2112d61287e71d8a7302d4d30c39e1"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/metrics.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/metrics.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":25}},"2":{"start":{"line":19,"column":34},"end":{"line":19,"column":77}},"3":{"start":{"line":20,"column":27},"end":{"line":20,"column":56}},"4":{"start":{"line":27,"column":8},"end":{"line":27,"column":71}},"5":{"start":{"line":31,"column":8},"end":{"line":31,"column":60}},"6":{"start":{"line":34,"column":0},"end":{"line":34,"column":26}},"7":{"start":{"line":35,"column":0},"end":{"line":35,"column":69}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":26,"column":4},"end":{"line":26,"column":5}},"loc":{"start":{"line":26,"column":38},"end":{"line":28,"column":5}},"line":26},"1":{"name":"(anonymous_1)","decl":{"start":{"line":30,"column":4},"end":{"line":30,"column":5}},"loc":{"start":{"line":30,"column":31},"end":{"line":32,"column":5}},"line":30}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":0,"6":1,"7":1},"f":{"0":1,"1":0},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/metrics.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/metrics.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,8EAAiF;AAEjF,yDAAsD;AAGtD;;GAEG;AACH,MAAa,OAAO;IAGlB,wEAAwE;IACxE,MAAM,CAAC,wBAAwB;QAC7B,OAAO,uDAA6B,CAAC;IACvC,CAAC;IAED,0DAA0D;IAC1D,MAAM,CAAC,iBAAiB;QACtB,OAAO,OAAO,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,CAAC;IACtD,CAAC;;AAXH,0BAYC;AAXyB,wBAAgB,GAAG,IAAI,mCAAgB,EAAE,CAAC","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { metricProducerManagerInstance } from './export/metric-producer-manager';\nimport { MetricProducerManager } from './export/types';\nimport { MetricsComponent } from './metric-component';\nimport { MetricRegistry } from './metric-registry';\n\n/**\n * Class for accessing the default MetricsComponent.\n */\nexport class Metrics {\n  private static readonly METRIC_COMPONENT = new MetricsComponent();\n\n  /** @return {MetricProducerManager} The global MetricProducerManager. */\n  static getMetricProducerManager(): MetricProducerManager {\n    return metricProducerManagerInstance;\n  }\n\n  /** @return {MetricRegistry} The global MetricRegistry. */\n  static getMetricRegistry(): MetricRegistry {\n    return Metrics.METRIC_COMPONENT.getMetricRegistry();\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d67f1061aca43535cbb2da7ffcb13035a5375779","contentHash":"4f2f5eec67a8bbd254e9f6668a7d535760e5b3b95ad6e992883b3a923c42ab69"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/export/metric-producer-manager.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/export/metric-producer-manager.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":47}},"2":{"start":{"line":19,"column":22},"end":{"line":19,"column":57}},"3":{"start":{"line":26,"column":8},"end":{"line":26,"column":41}},"4":{"start":{"line":30,"column":8},"end":{"line":30,"column":79}},"5":{"start":{"line":38,"column":8},"end":{"line":38,"column":72}},"6":{"start":{"line":39,"column":8},"end":{"line":41,"column":9}},"7":{"start":{"line":40,"column":12},"end":{"line":40,"column":53}},"8":{"start":{"line":49,"column":8},"end":{"line":49,"column":72}},"9":{"start":{"line":50,"column":8},"end":{"line":50,"column":52}},"10":{"start":{"line":56,"column":8},"end":{"line":56,"column":37}},"11":{"start":{"line":67,"column":8},"end":{"line":67,"column":36}},"12":{"start":{"line":70,"column":0},"end":{"line":70,"column":75}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":25,"column":4},"end":{"line":25,"column":5}},"loc":{"start":{"line":25,"column":18},"end":{"line":27,"column":5}},"line":25},"1":{"name":"(anonymous_1)","decl":{"start":{"line":29,"column":4},"end":{"line":29,"column":5}},"loc":{"start":{"line":29,"column":26},"end":{"line":31,"column":5}},"line":29},"2":{"name":"(anonymous_2)","decl":{"start":{"line":37,"column":4},"end":{"line":37,"column":5}},"loc":{"start":{"line":37,"column":24},"end":{"line":42,"column":5}},"line":37},"3":{"name":"(anonymous_3)","decl":{"start":{"line":48,"column":4},"end":{"line":48,"column":5}},"loc":{"start":{"line":48,"column":27},"end":{"line":51,"column":5}},"line":48},"4":{"name":"(anonymous_4)","decl":{"start":{"line":55,"column":4},"end":{"line":55,"column":5}},"loc":{"start":{"line":55,"column":16},"end":{"line":57,"column":5}},"line":55},"5":{"name":"(anonymous_5)","decl":{"start":{"line":66,"column":4},"end":{"line":66,"column":5}},"loc":{"start":{"line":66,"column":27},"end":{"line":68,"column":5}},"line":66}},"branchMap":{"0":{"loc":{"start":{"line":30,"column":15},"end":{"line":30,"column":78}},"type":"binary-expr","locations":[{"start":{"line":30,"column":15},"end":{"line":30,"column":37}},{"start":{"line":30,"column":42},"end":{"line":30,"column":77}}],"line":30},"1":{"loc":{"start":{"line":39,"column":8},"end":{"line":41,"column":9}},"type":"if","locations":[{"start":{"line":39,"column":8},"end":{"line":41,"column":9}},{"start":{"line":39,"column":8},"end":{"line":41,"column":9}}],"line":39}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":11,"6":11,"7":9,"8":1,"9":1,"10":6,"11":6,"12":1},"f":{"0":1,"1":1,"2":11,"3":1,"4":6,"5":6},"b":{"0":[1,1],"1":[9,2]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/export/metric-producer-manager.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/export/metric-producer-manager.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,0DAA2D;AAG3D;;;GAGG;AACH,MAAM,yBAAyB;IAA/B;QAIU,oBAAe,GAAwB,IAAI,GAAG,EAAkB,CAAC;IA+C3E,CAAC;IA7CC,yBAAyB;IACzB,MAAM,KAAK,QAAQ;QACjB,OAAO,IAAI,CAAC,iBAAiB,IAAI,CAAC,IAAI,CAAC,iBAAiB,GAAG,IAAI,IAAI,EAAE,CAAC,CAAC;IACzE,CAAC;IAED;;;;OAIG;IACH,GAAG,CAAC,cAA8B;QAChC,6BAAe,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC;QAClD,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE;YAC7C,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;SAC1C;IACH,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,cAA8B;QACnC,6BAAe,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC;QAClD,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;IAC9C,CAAC;IAED;;OAEG;IACH,SAAS;QACP,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;IAC/B,CAAC;IAED;;;;;;;OAOG;IACH,oBAAoB;QAClB,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;CACF;AAEY,QAAA,6BAA6B,GAAG,yBAAyB,CAAC,QAAQ,CAAC","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { validateNotNull } from '../../common/validations';\nimport { MetricProducer, MetricProducerManager } from './types';\n\n/**\n * Keeps a set of MetricProducer that is used by exporters to determine the\n * metrics that need to be exported.\n */\nclass BaseMetricProducerManager implements MetricProducerManager {\n  /** Singleton instance */\n  private static singletonInstance: MetricProducerManager;\n\n  private metricProducers: Set<MetricProducer> = new Set<MetricProducer>();\n\n  /** Gets the instance. */\n  static get instance(): MetricProducerManager {\n    return this.singletonInstance || (this.singletonInstance = new this());\n  }\n\n  /**\n   * Adds the MetricProducer to the manager if it is not already present.\n   *\n   * @param metricProducer The MetricProducer to be added to the manager.\n   */\n  add(metricProducer: MetricProducer): void {\n    validateNotNull(metricProducer, 'metricProducer');\n    if (!this.metricProducers.has(metricProducer)) {\n      this.metricProducers.add(metricProducer);\n    }\n  }\n\n  /**\n   * Removes the MetricProducer to the manager if it is present.\n   *\n   * @param metricProducer The MetricProducer to be removed from the manager.\n   */\n  remove(metricProducer: MetricProducer): void {\n    validateNotNull(metricProducer, 'metricProducer');\n    this.metricProducers.delete(metricProducer);\n  }\n\n  /**\n   * Clears all MetricProducers.\n   */\n  removeAll(): void {\n    this.metricProducers.clear();\n  }\n\n  /**\n   * Returns all registered MetricProducers that should be exported.\n   *\n   * This method should be used by any metrics exporter that automatically\n   * exports data for MetricProducer registered with the MetricProducerManager.\n   *\n   * @return {Set<MetricProducer>} The Set of MetricProducers.\n   */\n  getAllMetricProducer(): Set<MetricProducer> {\n    return this.metricProducers;\n  }\n}\n\nexport const metricProducerManagerInstance = BaseMetricProducerManager.instance;\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"43f04843e2556726c4bc977376262f430a0c58ad","contentHash":"b62fac96673563e14ecbe2548b52997c94e7fb7c72448375da063b7e3adba44e"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/validations.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/validations.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":140}},"2":{"start":{"line":28,"column":4},"end":{"line":30,"column":5}},"3":{"start":{"line":29,"column":8},"end":{"line":29,"column":71}},"4":{"start":{"line":31,"column":4},"end":{"line":31,"column":21}},"5":{"start":{"line":33,"column":0},"end":{"line":33,"column":42}},"6":{"start":{"line":41,"column":26},"end":{"line":41,"column":100}},"7":{"start":{"line":41,"column":49},"end":{"line":41,"column":99}},"8":{"start":{"line":42,"column":4},"end":{"line":44,"column":5}},"9":{"start":{"line":43,"column":8},"end":{"line":43,"column":73}},"10":{"start":{"line":46,"column":0},"end":{"line":46,"column":68}},"11":{"start":{"line":49,"column":4},"end":{"line":53,"column":5}},"12":{"start":{"line":50,"column":8},"end":{"line":52,"column":9}},"13":{"start":{"line":51,"column":12},"end":{"line":51,"column":77}},"14":{"start":{"line":55,"column":0},"end":{"line":55,"column":62}},"15":{"start":{"line":58,"column":32},"end":{"line":58,"column":92}},"16":{"start":{"line":58,"column":85},"end":{"line":58,"column":90}},"17":{"start":{"line":59,"column":4},"end":{"line":61,"column":5}},"18":{"start":{"line":60,"column":8},"end":{"line":60,"column":139}},"19":{"start":{"line":63,"column":0},"end":{"line":63,"column":54}}},"fnMap":{"0":{"name":"validateNotNull","decl":{"start":{"line":27,"column":9},"end":{"line":27,"column":24}},"loc":{"start":{"line":27,"column":50},"end":{"line":32,"column":1}},"line":27},"1":{"name":"validateArrayElementsNotNull","decl":{"start":{"line":40,"column":9},"end":{"line":40,"column":37}},"loc":{"start":{"line":40,"column":59},"end":{"line":45,"column":1}},"line":40},"2":{"name":"(anonymous_2)","decl":{"start":{"line":41,"column":38},"end":{"line":41,"column":39}},"loc":{"start":{"line":41,"column":49},"end":{"line":41,"column":99}},"line":41},"3":{"name":"validateMapElementNotNull","decl":{"start":{"line":48,"column":9},"end":{"line":48,"column":34}},"loc":{"start":{"line":48,"column":54},"end":{"line":54,"column":1}},"line":48},"4":{"name":"validateDuplicateKeys","decl":{"start":{"line":57,"column":9},"end":{"line":57,"column":30}},"loc":{"start":{"line":57,"column":53},"end":{"line":62,"column":1}},"line":57},"5":{"name":"(anonymous_5)","decl":{"start":{"line":58,"column":80},"end":{"line":58,"column":81}},"loc":{"start":{"line":58,"column":85},"end":{"line":58,"column":90}},"line":58}},"branchMap":{"0":{"loc":{"start":{"line":28,"column":4},"end":{"line":30,"column":5}},"type":"if","locations":[{"start":{"line":28,"column":4},"end":{"line":30,"column":5}},{"start":{"line":28,"column":4},"end":{"line":30,"column":5}}],"line":28},"1":{"loc":{"start":{"line":28,"column":8},"end":{"line":28,"column":53}},"type":"binary-expr","locations":[{"start":{"line":28,"column":8},"end":{"line":28,"column":26}},{"start":{"line":28,"column":30},"end":{"line":28,"column":53}}],"line":28},"2":{"loc":{"start":{"line":41,"column":49},"end":{"line":41,"column":99}},"type":"binary-expr","locations":[{"start":{"line":41,"column":49},"end":{"line":41,"column":65}},{"start":{"line":41,"column":69},"end":{"line":41,"column":99}}],"line":41},"3":{"loc":{"start":{"line":42,"column":4},"end":{"line":44,"column":5}},"type":"if","locations":[{"start":{"line":42,"column":4},"end":{"line":44,"column":5}},{"start":{"line":42,"column":4},"end":{"line":44,"column":5}}],"line":42},"4":{"loc":{"start":{"line":50,"column":8},"end":{"line":52,"column":9}},"type":"if","locations":[{"start":{"line":50,"column":8},"end":{"line":52,"column":9}},{"start":{"line":50,"column":8},"end":{"line":52,"column":9}}],"line":50},"5":{"loc":{"start":{"line":50,"column":12},"end":{"line":50,"column":40}},"type":"binary-expr","locations":[{"start":{"line":50,"column":12},"end":{"line":50,"column":23}},{"start":{"line":50,"column":27},"end":{"line":50,"column":40}}],"line":50},"6":{"loc":{"start":{"line":59,"column":4},"end":{"line":61,"column":5}},"type":"if","locations":[{"start":{"line":59,"column":4},"end":{"line":61,"column":5}},{"start":{"line":59,"column":4},"end":{"line":61,"column":5}}],"line":59}},"s":{"0":1,"1":1,"2":152,"3":0,"4":152,"5":1,"6":114,"7":110,"8":114,"9":0,"10":1,"11":40,"12":11,"13":5,"14":1,"15":35,"16":34,"17":35,"18":6,"19":1},"f":{"0":152,"1":114,"2":110,"3":40,"4":35,"5":34},"b":{"0":[0,152],"1":[152,152],"2":[110,110],"3":[0,114],"4":[5,6],"5":[11,10],"6":[6,29]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/validations.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/validations.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAIH;;;;;;;GAOG;AACH,SAAgB,eAAe,CAAI,SAAY,EAAE,YAAoB;IACnE,IAAI,SAAS,KAAK,IAAI,IAAI,SAAS,KAAK,SAAS,EAAE;QACjD,MAAM,IAAI,KAAK,CAAC,qBAAqB,YAAY,YAAY,CAAC,CAAC;KAChE;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AALD,0CAKC;AAED;;;;;GAKG;AACH,SAAgB,4BAA4B,CAC1C,KAAU,EACV,YAAoB;IAEpB,MAAM,aAAa,GAAG,KAAK,CAAC,KAAK,CAC/B,OAAO,CAAC,EAAE,CAAC,OAAO,KAAK,IAAI,IAAI,OAAO,OAAO,KAAK,WAAW,CAC9D,CAAC;IACF,IAAI,CAAC,aAAa,EAAE;QAClB,MAAM,IAAI,KAAK,CAAC,GAAG,YAAY,gCAAgC,CAAC,CAAC;KAClE;AACH,CAAC;AAVD,oEAUC;AAED,0DAA0D;AAC1D,SAAgB,yBAAyB,CACvC,GAAc,EACd,YAAoB;IAEpB,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,GAAG,CAAC,OAAO,EAAE,EAAE;QACxC,IAAI,GAAG,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,EAAE;YAChC,MAAM,IAAI,KAAK,CAAC,GAAG,YAAY,gCAAgC,CAAC,CAAC;SAClE;KACF;AACH,CAAC;AATD,8DASC;AAED,sEAAsE;AACtE,SAAgB,qBAAqB,CACnC,IAAgB,EAChB,cAAyC;IAEzC,MAAM,mBAAmB,GAAG,IAAI,GAAG,CACjC,CAAC,GAAG,IAAI,EAAE,GAAG,cAAc,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CACpD,CAAC;IACF,IAAI,mBAAmB,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,GAAG,cAAc,CAAC,IAAI,EAAE;QAClE,MAAM,IAAI,KAAK,CACb,iHAAiH,CAClH,CAAC;KACH;AACH,CAAC;AAZD,sDAYC","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LabelKey, LabelValue } from '../metrics/export/types';\n\n/**\n * Validates that an object reference passed as a parameter to the calling\n * method is not null.\n *\n * @param reference An object reference.\n * @param errorMessage The exception message to use if the check fails.\n * @returns An object reference.\n */\nexport function validateNotNull<T>(reference: T, errorMessage: string): T {\n  if (reference === null || reference === undefined) {\n    throw new Error(`Missing mandatory ${errorMessage} parameter`);\n  }\n  return reference;\n}\n\n/**\n * Validates that an array passed as a parameter doesn't contain null element.\n *\n * @param list The argument list to check for null.\n * @param errorMessage The exception message to use if the check fails.\n */\nexport function validateArrayElementsNotNull<T>(\n  array: T[],\n  errorMessage: string\n) {\n  const areAllDefined = array.every(\n    element => element !== null && typeof element !== 'undefined'\n  );\n  if (!areAllDefined) {\n    throw new Error(`${errorMessage} elements should not be a NULL`);\n  }\n}\n\n/** Throws an error if any of the map elements is null. */\nexport function validateMapElementNotNull<K, V>(\n  map: Map<K, V>,\n  errorMessage: string\n) {\n  for (const [key, value] of map.entries()) {\n    if (key == null || value == null) {\n      throw new Error(`${errorMessage} elements should not be a NULL`);\n    }\n  }\n}\n\n/** Throws an error if any of the array element present in the map. */\nexport function validateDuplicateKeys(\n  keys: LabelKey[],\n  constantLabels: Map<LabelKey, LabelValue>\n) {\n  const keysAndConstantKeys = new Set(\n    [...keys, ...constantLabels.keys()].map(k => k.key)\n  );\n  if (keysAndConstantKeys.size !== keys.length + constantLabels.size) {\n    throw new Error(\n      `The keys from LabelKeys should not be present in constantLabels or LabelKeys should not contains duplicate keys`\n    );\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"f2c9b1f0349414061034755ecff7e3f3fc4bcb8c","contentHash":"e70fd3307582ad6c04f776dba3668a2e8f24e162a44ad4b8af623f94abec563a"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/metric-component.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/metric-component.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":34}},"2":{"start":{"line":19,"column":34},"end":{"line":19,"column":77}},"3":{"start":{"line":20,"column":26},"end":{"line":20,"column":54}},"4":{"start":{"line":26,"column":8},"end":{"line":26,"column":69}},"5":{"start":{"line":29,"column":8},"end":{"line":29,"column":109}},"6":{"start":{"line":37,"column":8},"end":{"line":37,"column":35}},"7":{"start":{"line":40,"column":0},"end":{"line":40,"column":44}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":25,"column":4},"end":{"line":25,"column":5}},"loc":{"start":{"line":25,"column":18},"end":{"line":30,"column":5}},"line":25},"1":{"name":"(anonymous_1)","decl":{"start":{"line":36,"column":4},"end":{"line":36,"column":5}},"loc":{"start":{"line":36,"column":24},"end":{"line":38,"column":5}},"line":36}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":3,"5":3,"6":2,"7":1},"f":{"0":3,"1":2},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/metric-component.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/metric-component.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,8EAAiF;AACjF,uDAAmD;AAEnD;;GAEG;AACH,MAAa,gBAAgB;IAG3B;QACE,IAAI,CAAC,cAAc,GAAG,IAAI,gCAAc,EAAE,CAAC;QAE3C,6DAA6D;QAC7D,yBAAyB;QACzB,uDAA6B,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,iBAAiB,EAAE,CAAC,CAAC;IAC7E,CAAC;IAED;;;;OAIG;IACH,iBAAiB;QACf,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;CACF;AAnBD,4CAmBC","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { metricProducerManagerInstance } from './export/metric-producer-manager';\nimport { MetricRegistry } from './metric-registry';\n\n/**\n * Class that holds the implementation instance for MetricRegistry.\n */\nexport class MetricsComponent {\n  private metricRegistry: MetricRegistry;\n\n  constructor() {\n    this.metricRegistry = new MetricRegistry();\n\n    // Register the MetricRegistry's MetricProducer to the global\n    // MetricProducerManager.\n    metricProducerManagerInstance.add(this.metricRegistry.getMetricProducer());\n  }\n\n  /**\n   * Returns the MetricRegistry.\n   *\n   * @return {MetricRegistry}.\n   */\n  getMetricRegistry(): MetricRegistry {\n    return this.metricRegistry;\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"7270faa6c94784570e2385686a5815a6daf249f3","contentHash":"6e265e334c1d7885d9d713c70f12a513e5bf98cdad5bdbaefa412bc96c956740"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/metric-registry.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/metric-registry.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":32}},"2":{"start":{"line":19,"column":20},"end":{"line":19,"column":50}},"3":{"start":{"line":20,"column":22},"end":{"line":20,"column":54}},"4":{"start":{"line":21,"column":16},"end":{"line":21,"column":41}},"5":{"start":{"line":22,"column":21},"end":{"line":22,"column":55}},"6":{"start":{"line":23,"column":29},"end":{"line":23,"column":71}},"7":{"start":{"line":24,"column":31},"end":{"line":24,"column":71}},"8":{"start":{"line":25,"column":16},"end":{"line":25,"column":41}},"9":{"start":{"line":26,"column":24},"end":{"line":26,"column":57}},"10":{"start":{"line":27,"column":16},"end":{"line":27,"column":41}},"11":{"start":{"line":33,"column":8},"end":{"line":33,"column":43}},"12":{"start":{"line":34,"column":8},"end":{"line":34,"column":84}},"13":{"start":{"line":46,"column":28},"end":{"line":46,"column":98}},"14":{"start":{"line":47,"column":21},"end":{"line":47,"column":77}},"15":{"start":{"line":48,"column":26},"end":{"line":48,"column":93}},"16":{"start":{"line":49,"column":31},"end":{"line":50,"column":49}},"17":{"start":{"line":52,"column":8},"end":{"line":52,"column":55}},"18":{"start":{"line":53,"column":30},"end":{"line":53,"column":58}},"19":{"start":{"line":54,"column":27},"end":{"line":54,"column":194}},"20":{"start":{"line":55,"column":8},"end":{"line":55,"column":46}},"21":{"start":{"line":56,"column":8},"end":{"line":56,"column":26}},"22":{"start":{"line":68,"column":28},"end":{"line":68,"column":98}},"23":{"start":{"line":69,"column":21},"end":{"line":69,"column":77}},"24":{"start":{"line":70,"column":26},"end":{"line":70,"column":93}},"25":{"start":{"line":71,"column":31},"end":{"line":72,"column":49}},"26":{"start":{"line":74,"column":8},"end":{"line":74,"column":55}},"27":{"start":{"line":75,"column":30},"end":{"line":75,"column":58}},"28":{"start":{"line":76,"column":28},"end":{"line":76,"column":196}},"29":{"start":{"line":77,"column":8},"end":{"line":77,"column":47}},"30":{"start":{"line":78,"column":8},"end":{"line":78,"column":27}},"31":{"start":{"line":90,"column":28},"end":{"line":90,"column":98}},"32":{"start":{"line":91,"column":21},"end":{"line":91,"column":77}},"33":{"start":{"line":92,"column":26},"end":{"line":92,"column":93}},"34":{"start":{"line":93,"column":31},"end":{"line":94,"column":49}},"35":{"start":{"line":96,"column":8},"end":{"line":96,"column":55}},"36":{"start":{"line":97,"column":30},"end":{"line":97,"column":58}},"37":{"start":{"line":98,"column":34},"end":{"line":98,"column":216}},"38":{"start":{"line":99,"column":8},"end":{"line":99,"column":53}},"39":{"start":{"line":100,"column":8},"end":{"line":100,"column":33}},"40":{"start":{"line":112,"column":28},"end":{"line":112,"column":98}},"41":{"start":{"line":113,"column":21},"end":{"line":113,"column":77}},"42":{"start":{"line":114,"column":26},"end":{"line":114,"column":93}},"43":{"start":{"line":115,"column":31},"end":{"line":116,"column":49}},"44":{"start":{"line":118,"column":8},"end":{"line":118,"column":55}},"45":{"start":{"line":119,"column":30},"end":{"line":119,"column":58}},"46":{"start":{"line":120,"column":35},"end":{"line":120,"column":218}},"47":{"start":{"line":121,"column":8},"end":{"line":121,"column":54}},"48":{"start":{"line":122,"column":8},"end":{"line":122,"column":34}},"49":{"start":{"line":134,"column":28},"end":{"line":134,"column":98}},"50":{"start":{"line":135,"column":21},"end":{"line":135,"column":77}},"51":{"start":{"line":136,"column":26},"end":{"line":136,"column":93}},"52":{"start":{"line":137,"column":31},"end":{"line":138,"column":49}},"53":{"start":{"line":140,"column":8},"end":{"line":140,"column":55}},"54":{"start":{"line":141,"column":30},"end":{"line":141,"column":58}},"55":{"start":{"line":142,"column":32},"end":{"line":142,"column":214}},"56":{"start":{"line":143,"column":8},"end":{"line":143,"column":51}},"57":{"start":{"line":144,"column":8},"end":{"line":144,"column":31}},"58":{"start":{"line":156,"column":28},"end":{"line":156,"column":98}},"59":{"start":{"line":157,"column":21},"end":{"line":157,"column":77}},"60":{"start":{"line":158,"column":26},"end":{"line":158,"column":93}},"61":{"start":{"line":159,"column":31},"end":{"line":160,"column":49}},"62":{"start":{"line":162,"column":8},"end":{"line":162,"column":55}},"63":{"start":{"line":163,"column":30},"end":{"line":163,"column":58}},"64":{"start":{"line":164,"column":33},"end":{"line":164,"column":216}},"65":{"start":{"line":165,"column":8},"end":{"line":165,"column":52}},"66":{"start":{"line":166,"column":8},"end":{"line":166,"column":32}},"67":{"start":{"line":176,"column":28},"end":{"line":176,"column":98}},"68":{"start":{"line":177,"column":21},"end":{"line":177,"column":77}},"69":{"start":{"line":178,"column":26},"end":{"line":178,"column":93}},"70":{"start":{"line":179,"column":31},"end":{"line":180,"column":49}},"71":{"start":{"line":182,"column":8},"end":{"line":182,"column":55}},"72":{"start":{"line":183,"column":30},"end":{"line":183,"column":58}},"73":{"start":{"line":184,"column":26},"end":{"line":184,"column":69}},"74":{"start":{"line":185,"column":39},"end":{"line":185,"column":247}},"75":{"start":{"line":186,"column":8},"end":{"line":186,"column":58}},"76":{"start":{"line":187,"column":8},"end":{"line":187,"column":38}},"77":{"start":{"line":197,"column":28},"end":{"line":197,"column":98}},"78":{"start":{"line":198,"column":21},"end":{"line":198,"column":77}},"79":{"start":{"line":199,"column":26},"end":{"line":199,"column":93}},"80":{"start":{"line":200,"column":31},"end":{"line":201,"column":49}},"81":{"start":{"line":203,"column":8},"end":{"line":203,"column":55}},"82":{"start":{"line":204,"column":30},"end":{"line":204,"column":58}},"83":{"start":{"line":205,"column":26},"end":{"line":205,"column":69}},"84":{"start":{"line":206,"column":40},"end":{"line":206,"column":249}},"85":{"start":{"line":207,"column":8},"end":{"line":207,"column":59}},"86":{"start":{"line":208,"column":8},"end":{"line":208,"column":39}},"87":{"start":{"line":217,"column":8},"end":{"line":219,"column":9}},"88":{"start":{"line":218,"column":12},"end":{"line":218,"column":91}},"89":{"start":{"line":220,"column":8},"end":{"line":220,"column":48}},"90":{"start":{"line":228,"column":8},"end":{"line":228,"column":35}},"91":{"start":{"line":232,"column":8},"end":{"line":232,"column":88}},"92":{"start":{"line":233,"column":8},"end":{"line":233,"column":96}},"93":{"start":{"line":234,"column":8},"end":{"line":234,"column":71}},"94":{"start":{"line":237,"column":0},"end":{"line":237,"column":40}},"95":{"start":{"line":238,"column":0},"end":{"line":238,"column":29}},"96":{"start":{"line":239,"column":0},"end":{"line":239,"column":38}},"97":{"start":{"line":240,"column":0},"end":{"line":240,"column":50}},"98":{"start":{"line":241,"column":0},"end":{"line":241,"column":40}},"99":{"start":{"line":242,"column":0},"end":{"line":242,"column":55}},"100":{"start":{"line":243,"column":0},"end":{"line":243,"column":39}},"101":{"start":{"line":244,"column":0},"end":{"line":244,"column":50}},"102":{"start":{"line":251,"column":8},"end":{"line":251,"column":16}},"103":{"start":{"line":252,"column":8},"end":{"line":252,"column":51}},"104":{"start":{"line":260,"column":8},"end":{"line":262,"column":38}},"105":{"start":{"line":261,"column":26},"end":{"line":261,"column":43}},"106":{"start":{"line":262,"column":29},"end":{"line":262,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":32,"column":4},"end":{"line":32,"column":5}},"loc":{"start":{"line":32,"column":18},"end":{"line":35,"column":5}},"line":32},"1":{"name":"(anonymous_1)","decl":{"start":{"line":45,"column":4},"end":{"line":45,"column":5}},"loc":{"start":{"line":45,"column":33},"end":{"line":57,"column":5}},"line":45},"2":{"name":"(anonymous_2)","decl":{"start":{"line":67,"column":4},"end":{"line":67,"column":5}},"loc":{"start":{"line":67,"column":34},"end":{"line":79,"column":5}},"line":67},"3":{"name":"(anonymous_3)","decl":{"start":{"line":89,"column":4},"end":{"line":89,"column":5}},"loc":{"start":{"line":89,"column":40},"end":{"line":101,"column":5}},"line":89},"4":{"name":"(anonymous_4)","decl":{"start":{"line":111,"column":4},"end":{"line":111,"column":5}},"loc":{"start":{"line":111,"column":41},"end":{"line":123,"column":5}},"line":111},"5":{"name":"(anonymous_5)","decl":{"start":{"line":133,"column":4},"end":{"line":133,"column":5}},"loc":{"start":{"line":133,"column":38},"end":{"line":145,"column":5}},"line":133},"6":{"name":"(anonymous_6)","decl":{"start":{"line":155,"column":4},"end":{"line":155,"column":5}},"loc":{"start":{"line":155,"column":39},"end":{"line":167,"column":5}},"line":155},"7":{"name":"(anonymous_7)","decl":{"start":{"line":175,"column":4},"end":{"line":175,"column":5}},"loc":{"start":{"line":175,"column":45},"end":{"line":188,"column":5}},"line":175},"8":{"name":"(anonymous_8)","decl":{"start":{"line":196,"column":4},"end":{"line":196,"column":5}},"loc":{"start":{"line":196,"column":46},"end":{"line":209,"column":5}},"line":196},"9":{"name":"(anonymous_9)","decl":{"start":{"line":216,"column":4},"end":{"line":216,"column":5}},"loc":{"start":{"line":216,"column":32},"end":{"line":221,"column":5}},"line":216},"10":{"name":"(anonymous_10)","decl":{"start":{"line":227,"column":4},"end":{"line":227,"column":5}},"loc":{"start":{"line":227,"column":24},"end":{"line":229,"column":5}},"line":227},"11":{"name":"(anonymous_11)","decl":{"start":{"line":231,"column":4},"end":{"line":231,"column":5}},"loc":{"start":{"line":231,"column":46},"end":{"line":235,"column":5}},"line":231},"12":{"name":"(anonymous_12)","decl":{"start":{"line":250,"column":4},"end":{"line":250,"column":5}},"loc":{"start":{"line":250,"column":35},"end":{"line":253,"column":5}},"line":250},"13":{"name":"(anonymous_13)","decl":{"start":{"line":259,"column":4},"end":{"line":259,"column":5}},"loc":{"start":{"line":259,"column":17},"end":{"line":263,"column":5}},"line":259},"14":{"name":"(anonymous_14)","decl":{"start":{"line":261,"column":17},"end":{"line":261,"column":18}},"loc":{"start":{"line":261,"column":26},"end":{"line":261,"column":43}},"line":261},"15":{"name":"(anonymous_15)","decl":{"start":{"line":262,"column":20},"end":{"line":262,"column":21}},"loc":{"start":{"line":262,"column":29},"end":{"line":262,"column":36}},"line":262}},"branchMap":{"0":{"loc":{"start":{"line":46,"column":28},"end":{"line":46,"column":98}},"type":"binary-expr","locations":[{"start":{"line":46,"column":29},"end":{"line":46,"column":36}},{"start":{"line":46,"column":40},"end":{"line":46,"column":59}},{"start":{"line":46,"column":64},"end":{"line":46,"column":98}}],"line":46},"1":{"loc":{"start":{"line":47,"column":21},"end":{"line":47,"column":77}},"type":"binary-expr","locations":[{"start":{"line":47,"column":22},"end":{"line":47,"column":29}},{"start":{"line":47,"column":33},"end":{"line":47,"column":45}},{"start":{"line":47,"column":50},"end":{"line":47,"column":77}}],"line":47},"2":{"loc":{"start":{"line":48,"column":26},"end":{"line":48,"column":93}},"type":"binary-expr","locations":[{"start":{"line":48,"column":27},"end":{"line":48,"column":34}},{"start":{"line":48,"column":38},"end":{"line":48,"column":55}},{"start":{"line":48,"column":60},"end":{"line":48,"column":93}}],"line":48},"3":{"loc":{"start":{"line":49,"column":31},"end":{"line":50,"column":49}},"type":"binary-expr","locations":[{"start":{"line":49,"column":32},"end":{"line":49,"column":39}},{"start":{"line":49,"column":43},"end":{"line":49,"column":65}},{"start":{"line":50,"column":12},"end":{"line":50,"column":49}}],"line":49},"4":{"loc":{"start":{"line":68,"column":28},"end":{"line":68,"column":98}},"type":"binary-expr","locations":[{"start":{"line":68,"column":29},"end":{"line":68,"column":36}},{"start":{"line":68,"column":40},"end":{"line":68,"column":59}},{"start":{"line":68,"column":64},"end":{"line":68,"column":98}}],"line":68},"5":{"loc":{"start":{"line":69,"column":21},"end":{"line":69,"column":77}},"type":"binary-expr","locations":[{"start":{"line":69,"column":22},"end":{"line":69,"column":29}},{"start":{"line":69,"column":33},"end":{"line":69,"column":45}},{"start":{"line":69,"column":50},"end":{"line":69,"column":77}}],"line":69},"6":{"loc":{"start":{"line":70,"column":26},"end":{"line":70,"column":93}},"type":"binary-expr","locations":[{"start":{"line":70,"column":27},"end":{"line":70,"column":34}},{"start":{"line":70,"column":38},"end":{"line":70,"column":55}},{"start":{"line":70,"column":60},"end":{"line":70,"column":93}}],"line":70},"7":{"loc":{"start":{"line":71,"column":31},"end":{"line":72,"column":49}},"type":"binary-expr","locations":[{"start":{"line":71,"column":32},"end":{"line":71,"column":39}},{"start":{"line":71,"column":43},"end":{"line":71,"column":65}},{"start":{"line":72,"column":12},"end":{"line":72,"column":49}}],"line":71},"8":{"loc":{"start":{"line":90,"column":28},"end":{"line":90,"column":98}},"type":"binary-expr","locations":[{"start":{"line":90,"column":29},"end":{"line":90,"column":36}},{"start":{"line":90,"column":40},"end":{"line":90,"column":59}},{"start":{"line":90,"column":64},"end":{"line":90,"column":98}}],"line":90},"9":{"loc":{"start":{"line":91,"column":21},"end":{"line":91,"column":77}},"type":"binary-expr","locations":[{"start":{"line":91,"column":22},"end":{"line":91,"column":29}},{"start":{"line":91,"column":33},"end":{"line":91,"column":45}},{"start":{"line":91,"column":50},"end":{"line":91,"column":77}}],"line":91},"10":{"loc":{"start":{"line":92,"column":26},"end":{"line":92,"column":93}},"type":"binary-expr","locations":[{"start":{"line":92,"column":27},"end":{"line":92,"column":34}},{"start":{"line":92,"column":38},"end":{"line":92,"column":55}},{"start":{"line":92,"column":60},"end":{"line":92,"column":93}}],"line":92},"11":{"loc":{"start":{"line":93,"column":31},"end":{"line":94,"column":49}},"type":"binary-expr","locations":[{"start":{"line":93,"column":32},"end":{"line":93,"column":39}},{"start":{"line":93,"column":43},"end":{"line":93,"column":65}},{"start":{"line":94,"column":12},"end":{"line":94,"column":49}}],"line":93},"12":{"loc":{"start":{"line":112,"column":28},"end":{"line":112,"column":98}},"type":"binary-expr","locations":[{"start":{"line":112,"column":29},"end":{"line":112,"column":36}},{"start":{"line":112,"column":40},"end":{"line":112,"column":59}},{"start":{"line":112,"column":64},"end":{"line":112,"column":98}}],"line":112},"13":{"loc":{"start":{"line":113,"column":21},"end":{"line":113,"column":77}},"type":"binary-expr","locations":[{"start":{"line":113,"column":22},"end":{"line":113,"column":29}},{"start":{"line":113,"column":33},"end":{"line":113,"column":45}},{"start":{"line":113,"column":50},"end":{"line":113,"column":77}}],"line":113},"14":{"loc":{"start":{"line":114,"column":26},"end":{"line":114,"column":93}},"type":"binary-expr","locations":[{"start":{"line":114,"column":27},"end":{"line":114,"column":34}},{"start":{"line":114,"column":38},"end":{"line":114,"column":55}},{"start":{"line":114,"column":60},"end":{"line":114,"column":93}}],"line":114},"15":{"loc":{"start":{"line":115,"column":31},"end":{"line":116,"column":49}},"type":"binary-expr","locations":[{"start":{"line":115,"column":32},"end":{"line":115,"column":39}},{"start":{"line":115,"column":43},"end":{"line":115,"column":65}},{"start":{"line":116,"column":12},"end":{"line":116,"column":49}}],"line":115},"16":{"loc":{"start":{"line":134,"column":28},"end":{"line":134,"column":98}},"type":"binary-expr","locations":[{"start":{"line":134,"column":29},"end":{"line":134,"column":36}},{"start":{"line":134,"column":40},"end":{"line":134,"column":59}},{"start":{"line":134,"column":64},"end":{"line":134,"column":98}}],"line":134},"17":{"loc":{"start":{"line":135,"column":21},"end":{"line":135,"column":77}},"type":"binary-expr","locations":[{"start":{"line":135,"column":22},"end":{"line":135,"column":29}},{"start":{"line":135,"column":33},"end":{"line":135,"column":45}},{"start":{"line":135,"column":50},"end":{"line":135,"column":77}}],"line":135},"18":{"loc":{"start":{"line":136,"column":26},"end":{"line":136,"column":93}},"type":"binary-expr","locations":[{"start":{"line":136,"column":27},"end":{"line":136,"column":34}},{"start":{"line":136,"column":38},"end":{"line":136,"column":55}},{"start":{"line":136,"column":60},"end":{"line":136,"column":93}}],"line":136},"19":{"loc":{"start":{"line":137,"column":31},"end":{"line":138,"column":49}},"type":"binary-expr","locations":[{"start":{"line":137,"column":32},"end":{"line":137,"column":39}},{"start":{"line":137,"column":43},"end":{"line":137,"column":65}},{"start":{"line":138,"column":12},"end":{"line":138,"column":49}}],"line":137},"20":{"loc":{"start":{"line":156,"column":28},"end":{"line":156,"column":98}},"type":"binary-expr","locations":[{"start":{"line":156,"column":29},"end":{"line":156,"column":36}},{"start":{"line":156,"column":40},"end":{"line":156,"column":59}},{"start":{"line":156,"column":64},"end":{"line":156,"column":98}}],"line":156},"21":{"loc":{"start":{"line":157,"column":21},"end":{"line":157,"column":77}},"type":"binary-expr","locations":[{"start":{"line":157,"column":22},"end":{"line":157,"column":29}},{"start":{"line":157,"column":33},"end":{"line":157,"column":45}},{"start":{"line":157,"column":50},"end":{"line":157,"column":77}}],"line":157},"22":{"loc":{"start":{"line":158,"column":26},"end":{"line":158,"column":93}},"type":"binary-expr","locations":[{"start":{"line":158,"column":27},"end":{"line":158,"column":34}},{"start":{"line":158,"column":38},"end":{"line":158,"column":55}},{"start":{"line":158,"column":60},"end":{"line":158,"column":93}}],"line":158},"23":{"loc":{"start":{"line":159,"column":31},"end":{"line":160,"column":49}},"type":"binary-expr","locations":[{"start":{"line":159,"column":32},"end":{"line":159,"column":39}},{"start":{"line":159,"column":43},"end":{"line":159,"column":65}},{"start":{"line":160,"column":12},"end":{"line":160,"column":49}}],"line":159},"24":{"loc":{"start":{"line":176,"column":28},"end":{"line":176,"column":98}},"type":"binary-expr","locations":[{"start":{"line":176,"column":29},"end":{"line":176,"column":36}},{"start":{"line":176,"column":40},"end":{"line":176,"column":59}},{"start":{"line":176,"column":64},"end":{"line":176,"column":98}}],"line":176},"25":{"loc":{"start":{"line":177,"column":21},"end":{"line":177,"column":77}},"type":"binary-expr","locations":[{"start":{"line":177,"column":22},"end":{"line":177,"column":29}},{"start":{"line":177,"column":33},"end":{"line":177,"column":45}},{"start":{"line":177,"column":50},"end":{"line":177,"column":77}}],"line":177},"26":{"loc":{"start":{"line":178,"column":26},"end":{"line":178,"column":93}},"type":"binary-expr","locations":[{"start":{"line":178,"column":27},"end":{"line":178,"column":34}},{"start":{"line":178,"column":38},"end":{"line":178,"column":55}},{"start":{"line":178,"column":60},"end":{"line":178,"column":93}}],"line":178},"27":{"loc":{"start":{"line":179,"column":31},"end":{"line":180,"column":49}},"type":"binary-expr","locations":[{"start":{"line":179,"column":32},"end":{"line":179,"column":39}},{"start":{"line":179,"column":43},"end":{"line":179,"column":65}},{"start":{"line":180,"column":12},"end":{"line":180,"column":49}}],"line":179},"28":{"loc":{"start":{"line":197,"column":28},"end":{"line":197,"column":98}},"type":"binary-expr","locations":[{"start":{"line":197,"column":29},"end":{"line":197,"column":36}},{"start":{"line":197,"column":40},"end":{"line":197,"column":59}},{"start":{"line":197,"column":64},"end":{"line":197,"column":98}}],"line":197},"29":{"loc":{"start":{"line":198,"column":21},"end":{"line":198,"column":77}},"type":"binary-expr","locations":[{"start":{"line":198,"column":22},"end":{"line":198,"column":29}},{"start":{"line":198,"column":33},"end":{"line":198,"column":45}},{"start":{"line":198,"column":50},"end":{"line":198,"column":77}}],"line":198},"30":{"loc":{"start":{"line":199,"column":26},"end":{"line":199,"column":93}},"type":"binary-expr","locations":[{"start":{"line":199,"column":27},"end":{"line":199,"column":34}},{"start":{"line":199,"column":38},"end":{"line":199,"column":55}},{"start":{"line":199,"column":60},"end":{"line":199,"column":93}}],"line":199},"31":{"loc":{"start":{"line":200,"column":31},"end":{"line":201,"column":49}},"type":"binary-expr","locations":[{"start":{"line":200,"column":32},"end":{"line":200,"column":39}},{"start":{"line":200,"column":43},"end":{"line":200,"column":65}},{"start":{"line":201,"column":12},"end":{"line":201,"column":49}}],"line":200},"32":{"loc":{"start":{"line":217,"column":8},"end":{"line":219,"column":9}},"type":"if","locations":[{"start":{"line":217,"column":8},"end":{"line":219,"column":9}},{"start":{"line":217,"column":8},"end":{"line":219,"column":9}}],"line":217}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":36,"12":36,"13":4,"14":4,"15":4,"16":4,"17":4,"18":3,"19":3,"20":3,"21":3,"22":7,"23":7,"24":7,"25":7,"26":7,"27":5,"28":5,"29":5,"30":4,"31":7,"32":7,"33":7,"34":7,"35":7,"36":5,"37":5,"38":5,"39":4,"40":3,"41":3,"42":3,"43":3,"44":3,"45":3,"46":3,"47":3,"48":2,"49":4,"50":4,"51":4,"52":4,"53":4,"54":3,"55":3,"56":3,"57":3,"58":3,"59":3,"60":3,"61":3,"62":3,"63":2,"64":2,"65":2,"66":2,"67":6,"68":6,"69":6,"70":6,"71":6,"72":4,"73":4,"74":4,"75":4,"76":3,"77":6,"78":6,"79":6,"80":6,"81":6,"82":4,"83":4,"84":4,"85":4,"86":3,"87":29,"88":5,"89":24,"90":22,"91":40,"92":40,"93":35,"94":1,"95":1,"96":1,"97":1,"98":1,"99":1,"100":1,"101":1,"102":36,"103":36,"104":16,"105":19,"106":19},"f":{"0":36,"1":4,"2":7,"3":7,"4":3,"5":4,"6":3,"7":6,"8":6,"9":29,"10":22,"11":40,"12":36,"13":16,"14":19,"15":19},"b":{"0":[4,3,2],"1":[4,3,2],"2":[4,3,1],"3":[4,3,3],"4":[7,6,3],"5":[7,6,3],"6":[7,6,3],"7":[7,6,5],"8":[7,6,3],"9":[7,6,3],"10":[7,6,2],"11":[7,6,5],"12":[3,3,0],"13":[3,3,0],"14":[3,3,0],"15":[3,3,3],"16":[4,3,2],"17":[4,3,2],"18":[4,3,1],"19":[4,3,3],"20":[3,2,2],"21":[3,2,2],"22":[3,2,1],"23":[3,2,2],"24":[6,5,3],"25":[6,5,3],"26":[6,5,2],"27":[6,5,4],"28":[6,5,3],"29":[6,5,3],"30":[6,5,2],"31":[6,5,4],"32":[5,24]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/metric-registry.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/metric-registry.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getTimestampWithProcessHRTime } from '../common/time-util';\nimport {\n  validateArrayElementsNotNull,\n  validateDuplicateKeys,\n  validateMapElementNotNull,\n  validateNotNull,\n} from '../common/validations';\nimport { MeasureUnit } from '../stats/types';\nimport { Cumulative } from './cumulative/cumulative';\nimport { DerivedCumulative } from './cumulative/derived-cumulative';\nimport { BaseMetricProducer } from './export/base-metric-producer';\nimport {\n  LabelKey,\n  LabelValue,\n  Metric,\n  MetricDescriptorType,\n  MetricProducer,\n  Timestamp,\n} from './export/types';\nimport { DerivedGauge } from './gauges/derived-gauge';\nimport { Gauge } from './gauges/gauge';\nimport { Meter, MetricOptions } from './types';\n\n/**\n * Creates and manages application's set of metrics.\n */\nexport class MetricRegistry {\n  private registeredMetrics: Map<string, Meter> = new Map();\n  private metricProducer: MetricProducer;\n\n  private static readonly NAME = 'name';\n  private static readonly LABEL_KEY = 'labelKey';\n  private static readonly CONSTANT_LABELS = 'constantLabels';\n  private static readonly DEFAULT_DESCRIPTION = '';\n  private static readonly DEFAULT_UNIT = MeasureUnit.UNIT;\n  private static readonly DEFAULT_LABEL_KEYS = [];\n  private static readonly DEFAULT_CONSTANT_LABEL = new Map();\n\n  constructor() {\n    this.metricProducer = new MetricProducerForRegistry(this.registeredMetrics);\n  }\n\n  /**\n   * Builds a new Int64 gauge to be added to the registry. This is more\n   * convenient form when you want to manually increase and decrease values as\n   * per your service requirements.\n   *\n   * @param name The name of the metric.\n   * @param options The options for the metric.\n   * @returns A Int64 Gauge metric.\n   */\n  addInt64Gauge(name: string, options?: MetricOptions): Gauge {\n    const description =\n      (options && options.description) || MetricRegistry.DEFAULT_DESCRIPTION;\n    const unit = (options && options.unit) || MetricRegistry.DEFAULT_UNIT;\n    const labelKeys =\n      (options && options.labelKeys) || MetricRegistry.DEFAULT_LABEL_KEYS;\n    const constantLabels =\n      (options && options.constantLabels) ||\n      MetricRegistry.DEFAULT_CONSTANT_LABEL;\n    // TODO(mayurkale): Add support for resource\n\n    this.validateLables(labelKeys, constantLabels);\n\n    const labelKeysCopy = Object.assign([], labelKeys);\n    const int64Gauge = new Gauge(\n      validateNotNull(name, MetricRegistry.NAME),\n      description,\n      unit,\n      MetricDescriptorType.GAUGE_INT64,\n      labelKeysCopy,\n      constantLabels\n    );\n    this.registerMetric(name, int64Gauge);\n    return int64Gauge;\n  }\n\n  /**\n   * Builds a new double gauge to be added to the registry. This is more\n   * convenient form when you want to manually increase and decrease values as\n   * per your service requirements.\n   *\n   * @param name The name of the metric.\n   * @param options The options for the metric.\n   * @returns A Double Gauge metric.\n   */\n  addDoubleGauge(name: string, options?: MetricOptions): Gauge {\n    const description =\n      (options && options.description) || MetricRegistry.DEFAULT_DESCRIPTION;\n    const unit = (options && options.unit) || MetricRegistry.DEFAULT_UNIT;\n    const labelKeys =\n      (options && options.labelKeys) || MetricRegistry.DEFAULT_LABEL_KEYS;\n    const constantLabels =\n      (options && options.constantLabels) ||\n      MetricRegistry.DEFAULT_CONSTANT_LABEL;\n    // TODO(mayurkale): Add support for resource\n\n    this.validateLables(labelKeys, constantLabels);\n\n    const labelKeysCopy = Object.assign([], labelKeys);\n    const doubleGauge = new Gauge(\n      validateNotNull(name, MetricRegistry.NAME),\n      description,\n      unit,\n      MetricDescriptorType.GAUGE_DOUBLE,\n      labelKeysCopy,\n      constantLabels\n    );\n    this.registerMetric(name, doubleGauge);\n    return doubleGauge;\n  }\n\n  /**\n   * Builds a new derived Int64 gauge to be added to the registry. This is more\n   * convenient form when you want to manually increase and decrease values as\n   * per your service requirements.\n   *\n   * @param name The name of the metric.\n   * @param options The options for the metric.\n   * @returns A Int64 DerivedGauge metric.\n   */\n  addDerivedInt64Gauge(name: string, options?: MetricOptions): DerivedGauge {\n    const description =\n      (options && options.description) || MetricRegistry.DEFAULT_DESCRIPTION;\n    const unit = (options && options.unit) || MetricRegistry.DEFAULT_UNIT;\n    const labelKeys =\n      (options && options.labelKeys) || MetricRegistry.DEFAULT_LABEL_KEYS;\n    const constantLabels =\n      (options && options.constantLabels) ||\n      MetricRegistry.DEFAULT_CONSTANT_LABEL;\n    // TODO(mayurkale): Add support for resource\n\n    this.validateLables(labelKeys, constantLabels);\n\n    const labelKeysCopy = Object.assign([], labelKeys);\n    const derivedInt64Gauge = new DerivedGauge(\n      validateNotNull(name, MetricRegistry.NAME),\n      description,\n      unit,\n      MetricDescriptorType.GAUGE_INT64,\n      labelKeysCopy,\n      constantLabels\n    );\n    this.registerMetric(name, derivedInt64Gauge);\n    return derivedInt64Gauge;\n  }\n\n  /**\n   * Builds a new derived double gauge to be added to the registry. This is more\n   * convenient form when you want to manually increase and decrease values as\n   * per your service requirements.\n   *\n   * @param name The name of the metric.\n   * @param options The options for the metric.\n   * @returns A Double DerivedGauge metric.\n   */\n  addDerivedDoubleGauge(name: string, options?: MetricOptions): DerivedGauge {\n    const description =\n      (options && options.description) || MetricRegistry.DEFAULT_DESCRIPTION;\n    const unit = (options && options.unit) || MetricRegistry.DEFAULT_UNIT;\n    const labelKeys =\n      (options && options.labelKeys) || MetricRegistry.DEFAULT_LABEL_KEYS;\n    const constantLabels =\n      (options && options.constantLabels) ||\n      MetricRegistry.DEFAULT_CONSTANT_LABEL;\n    // TODO(mayurkale): Add support for resource\n\n    this.validateLables(labelKeys, constantLabels);\n\n    const labelKeysCopy = Object.assign([], labelKeys);\n    const derivedDoubleGauge = new DerivedGauge(\n      validateNotNull(name, MetricRegistry.NAME),\n      description,\n      unit,\n      MetricDescriptorType.GAUGE_DOUBLE,\n      labelKeysCopy,\n      constantLabels\n    );\n    this.registerMetric(name, derivedDoubleGauge);\n    return derivedDoubleGauge;\n  }\n\n  /**\n   * Builds a new Int64 cumulative to be added to the registry. This API is\n   * useful when you want to manually increase and reset values as per service\n   * requirements.\n   *\n   * @param name The name of the metric.\n   * @param options The options for the metric.\n   * @returns A Int64 Cumulative metric.\n   */\n  addInt64Cumulative(name: string, options?: MetricOptions): Cumulative {\n    const description =\n      (options && options.description) || MetricRegistry.DEFAULT_DESCRIPTION;\n    const unit = (options && options.unit) || MetricRegistry.DEFAULT_UNIT;\n    const labelKeys =\n      (options && options.labelKeys) || MetricRegistry.DEFAULT_LABEL_KEYS;\n    const constantLabels =\n      (options && options.constantLabels) ||\n      MetricRegistry.DEFAULT_CONSTANT_LABEL;\n    // TODO(mayurkale): Add support for resource\n\n    this.validateLables(labelKeys, constantLabels);\n\n    const labelKeysCopy = Object.assign([], labelKeys);\n    const int64Cumulative = new Cumulative(\n      validateNotNull(name, MetricRegistry.NAME),\n      description,\n      unit,\n      MetricDescriptorType.CUMULATIVE_INT64,\n      labelKeysCopy,\n      constantLabels\n    );\n    this.registerMetric(name, int64Cumulative);\n    return int64Cumulative;\n  }\n\n  /**\n   * Builds a new double cumulative to be added to the registry. This API is\n   * useful when you want to manually increase and reset values as per service\n   * requirements.\n   *\n   * @param name The name of the metric.\n   * @param options The options for the metric.\n   * @returns A Double Cumulative metric.\n   */\n  addDoubleCumulative(name: string, options?: MetricOptions): Cumulative {\n    const description =\n      (options && options.description) || MetricRegistry.DEFAULT_DESCRIPTION;\n    const unit = (options && options.unit) || MetricRegistry.DEFAULT_UNIT;\n    const labelKeys =\n      (options && options.labelKeys) || MetricRegistry.DEFAULT_LABEL_KEYS;\n    const constantLabels =\n      (options && options.constantLabels) ||\n      MetricRegistry.DEFAULT_CONSTANT_LABEL;\n    // TODO(mayurkale): Add support for resource\n\n    this.validateLables(labelKeys, constantLabels);\n\n    const labelKeysCopy = Object.assign([], labelKeys);\n    const doubleCumulative = new Cumulative(\n      validateNotNull(name, MetricRegistry.NAME),\n      description,\n      unit,\n      MetricDescriptorType.CUMULATIVE_DOUBLE,\n      labelKeysCopy,\n      constantLabels\n    );\n    this.registerMetric(name, doubleCumulative);\n    return doubleCumulative;\n  }\n\n  /**\n   * Builds a new derived Int64 Cumulative to be added to the registry.\n   *\n   * @param name The name of the metric.\n   * @param options The options for the metric.\n   * @returns A Int64 DerivedCumulative metric.\n   */\n  addDerivedInt64Cumulative(\n    name: string,\n    options?: MetricOptions\n  ): DerivedCumulative {\n    const description =\n      (options && options.description) || MetricRegistry.DEFAULT_DESCRIPTION;\n    const unit = (options && options.unit) || MetricRegistry.DEFAULT_UNIT;\n    const labelKeys =\n      (options && options.labelKeys) || MetricRegistry.DEFAULT_LABEL_KEYS;\n    const constantLabels =\n      (options && options.constantLabels) ||\n      MetricRegistry.DEFAULT_CONSTANT_LABEL;\n    // TODO(mayurkale): Add support for resource\n\n    this.validateLables(labelKeys, constantLabels);\n\n    const labelKeysCopy = Object.assign([], labelKeys);\n    const startTime: Timestamp = getTimestampWithProcessHRTime();\n    const derivedInt64Cumulative = new DerivedCumulative(\n      validateNotNull(name, MetricRegistry.NAME),\n      description,\n      unit,\n      MetricDescriptorType.CUMULATIVE_INT64,\n      labelKeysCopy,\n      constantLabels,\n      startTime\n    );\n    this.registerMetric(name, derivedInt64Cumulative);\n    return derivedInt64Cumulative;\n  }\n\n  /**\n   * Builds a new derived Double Cumulative to be added to the registry.\n   *\n   * @param name The name of the metric.\n   * @param options The options for the metric.\n   * @returns A Double DerivedCumulative metric.\n   */\n  addDerivedDoubleCumulative(\n    name: string,\n    options?: MetricOptions\n  ): DerivedCumulative {\n    const description =\n      (options && options.description) || MetricRegistry.DEFAULT_DESCRIPTION;\n    const unit = (options && options.unit) || MetricRegistry.DEFAULT_UNIT;\n    const labelKeys =\n      (options && options.labelKeys) || MetricRegistry.DEFAULT_LABEL_KEYS;\n    const constantLabels =\n      (options && options.constantLabels) ||\n      MetricRegistry.DEFAULT_CONSTANT_LABEL;\n    // TODO(mayurkale): Add support for resource\n\n    this.validateLables(labelKeys, constantLabels);\n\n    const labelKeysCopy = Object.assign([], labelKeys);\n    const startTime: Timestamp = getTimestampWithProcessHRTime();\n    const derivedDoubleCumulative = new DerivedCumulative(\n      validateNotNull(name, MetricRegistry.NAME),\n      description,\n      unit,\n      MetricDescriptorType.CUMULATIVE_DOUBLE,\n      labelKeysCopy,\n      constantLabels,\n      startTime\n    );\n    this.registerMetric(name, derivedDoubleCumulative);\n    return derivedDoubleCumulative;\n  }\n\n  /**\n   * Registers metric to register.\n   *\n   * @param name The name of the metric.\n   * @param meter The metric to register.\n   */\n  private registerMetric(name: string, meter: Meter): void {\n    if (this.registeredMetrics.has(name)) {\n      throw new Error(\n        `A metric with the name ${name} has already been registered.`\n      );\n    }\n    this.registeredMetrics.set(name, meter);\n  }\n\n  /**\n   * Gets a metric producer for registry.\n   *\n   * @returns The metric producer.\n   */\n  getMetricProducer(): MetricProducer {\n    return this.metricProducer;\n  }\n\n  /** Validates labelKeys and constantLabels. */\n  private validateLables(\n    labelKeys: LabelKey[],\n    constantLabels: Map<LabelKey, LabelValue>\n  ) {\n    validateArrayElementsNotNull(labelKeys, MetricRegistry.LABEL_KEY);\n    validateMapElementNotNull(constantLabels, MetricRegistry.CONSTANT_LABELS);\n    validateDuplicateKeys(labelKeys, constantLabels);\n  }\n}\n\n/**\n * A MetricProducerForRegistry is a producer that can be registered for\n * exporting using MetricProducerManager.\n */\nclass MetricProducerForRegistry extends BaseMetricProducer {\n  private registeredMetrics: Map<string, Meter>;\n\n  constructor(registeredMetrics: Map<string, Meter>) {\n    super();\n    this.registeredMetrics = registeredMetrics;\n  }\n\n  /**\n   * Gets a collection of produced Metric`s to be exported.\n   *\n   * @returns The list of metrics.\n   */\n  getMetrics(): Metric[] {\n    return Array.from(this.registeredMetrics.values())\n      .map(meter => meter.getMetric())\n      .filter(meter => !!meter) as Metric[];\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b3d7a5046e8ec149ad8624a2acfe2082b98d473e","contentHash":"03fb5dc17b39f9cc2762517cb11147ad17dd05c8aea1d2e5ad1f5f96f5a08a8a"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/cumulative/cumulative.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/cumulative/cumulative.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":59}},"2":{"start":{"line":19,"column":20},"end":{"line":19,"column":53}},"3":{"start":{"line":20,"column":22},"end":{"line":20,"column":57}},"4":{"start":{"line":21,"column":16},"end":{"line":21,"column":35}},"5":{"start":{"line":39,"column":8},"end":{"line":39,"column":35}},"6":{"start":{"line":40,"column":8},"end":{"line":40,"column":45}},"7":{"start":{"line":41,"column":8},"end":{"line":41,"column":42}},"8":{"start":{"line":42,"column":8},"end":{"line":42,"column":48}},"9":{"start":{"line":43,"column":36},"end":{"line":43,"column":76}},"10":{"start":{"line":44,"column":8},"end":{"line":44,"column":64}},"11":{"start":{"line":45,"column":8},"end":{"line":51,"column":10}},"12":{"start":{"line":52,"column":8},"end":{"line":52,"column":88}},"13":{"start":{"line":66,"column":8},"end":{"line":66,"column":124}},"14":{"start":{"line":67,"column":8},"end":{"line":67,"column":52}},"15":{"start":{"line":76,"column":8},"end":{"line":76,"column":64}},"16":{"start":{"line":86,"column":8},"end":{"line":86,"column":66}},"17":{"start":{"line":87,"column":8},"end":{"line":87,"column":75}},"18":{"start":{"line":94,"column":8},"end":{"line":94,"column":38}},"19":{"start":{"line":105,"column":21},"end":{"line":105,"column":57}},"20":{"start":{"line":107,"column":8},"end":{"line":109,"column":9}},"21":{"start":{"line":108,"column":12},"end":{"line":108,"column":51}},"22":{"start":{"line":110,"column":8},"end":{"line":112,"column":9}},"23":{"start":{"line":111,"column":12},"end":{"line":111,"column":80}},"24":{"start":{"line":113,"column":22},"end":{"line":116,"column":10}},"25":{"start":{"line":117,"column":8},"end":{"line":117,"column":47}},"26":{"start":{"line":118,"column":8},"end":{"line":118,"column":21}},"27":{"start":{"line":126,"column":8},"end":{"line":128,"column":9}},"28":{"start":{"line":127,"column":12},"end":{"line":127,"column":24}},"29":{"start":{"line":129,"column":20},"end":{"line":129,"column":63}},"30":{"start":{"line":130,"column":8},"end":{"line":133,"column":10}},"31":{"start":{"line":132,"column":74},"end":{"line":132,"column":98}},"32":{"start":{"line":136,"column":0},"end":{"line":136,"column":32}},"33":{"start":{"line":142,"column":8},"end":{"line":142,"column":23}},"34":{"start":{"line":143,"column":8},"end":{"line":143,"column":39}},"35":{"start":{"line":144,"column":8},"end":{"line":144,"column":74}},"36":{"start":{"line":148,"column":8},"end":{"line":148,"column":23}},"37":{"start":{"line":149,"column":8},"end":{"line":149,"column":74}},"38":{"start":{"line":156,"column":8},"end":{"line":158,"column":9}},"39":{"start":{"line":157,"column":12},"end":{"line":157,"column":71}},"40":{"start":{"line":159,"column":8},"end":{"line":161,"column":9}},"41":{"start":{"line":160,"column":12},"end":{"line":160,"column":82}},"42":{"start":{"line":162,"column":25},"end":{"line":162,"column":68}},"43":{"start":{"line":163,"column":8},"end":{"line":163,"column":31}},"44":{"start":{"line":172,"column":8},"end":{"line":176,"column":10}},"45":{"start":{"line":179,"column":0},"end":{"line":179,"column":52}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":38,"column":4},"end":{"line":38,"column":5}},"loc":{"start":{"line":38,"column":74},"end":{"line":53,"column":5}},"line":38},"1":{"name":"(anonymous_1)","decl":{"start":{"line":65,"column":4},"end":{"line":65,"column":5}},"loc":{"start":{"line":65,"column":39},"end":{"line":68,"column":5}},"line":65},"2":{"name":"(anonymous_2)","decl":{"start":{"line":75,"column":4},"end":{"line":75,"column":5}},"loc":{"start":{"line":75,"column":27},"end":{"line":77,"column":5}},"line":75},"3":{"name":"(anonymous_3)","decl":{"start":{"line":85,"column":4},"end":{"line":85,"column":5}},"loc":{"start":{"line":85,"column":34},"end":{"line":88,"column":5}},"line":85},"4":{"name":"(anonymous_4)","decl":{"start":{"line":93,"column":4},"end":{"line":93,"column":5}},"loc":{"start":{"line":93,"column":12},"end":{"line":95,"column":5}},"line":93},"5":{"name":"(anonymous_5)","decl":{"start":{"line":104,"column":4},"end":{"line":104,"column":5}},"loc":{"start":{"line":104,"column":36},"end":{"line":119,"column":5}},"line":104},"6":{"name":"(anonymous_6)","decl":{"start":{"line":125,"column":4},"end":{"line":125,"column":5}},"loc":{"start":{"line":125,"column":16},"end":{"line":134,"column":5}},"line":125},"7":{"name":"(anonymous_7)","decl":{"start":{"line":132,"column":58},"end":{"line":132,"column":59}},"loc":{"start":{"line":132,"column":74},"end":{"line":132,"column":98}},"line":132},"8":{"name":"(anonymous_8)","decl":{"start":{"line":141,"column":4},"end":{"line":141,"column":5}},"loc":{"start":{"line":141,"column":29},"end":{"line":145,"column":5}},"line":141},"9":{"name":"(anonymous_9)","decl":{"start":{"line":147,"column":4},"end":{"line":147,"column":5}},"loc":{"start":{"line":147,"column":12},"end":{"line":150,"column":5}},"line":147},"10":{"name":"(anonymous_10)","decl":{"start":{"line":155,"column":4},"end":{"line":155,"column":5}},"loc":{"start":{"line":155,"column":13},"end":{"line":164,"column":5}},"line":155},"11":{"name":"(anonymous_11)","decl":{"start":{"line":171,"column":4},"end":{"line":171,"column":5}},"loc":{"start":{"line":171,"column":23},"end":{"line":177,"column":5}},"line":171}},"branchMap":{"0":{"loc":{"start":{"line":107,"column":8},"end":{"line":109,"column":9}},"type":"if","locations":[{"start":{"line":107,"column":8},"end":{"line":109,"column":9}},{"start":{"line":107,"column":8},"end":{"line":109,"column":9}}],"line":107},"1":{"loc":{"start":{"line":110,"column":8},"end":{"line":112,"column":9}},"type":"if","locations":[{"start":{"line":110,"column":8},"end":{"line":112,"column":9}},{"start":{"line":110,"column":8},"end":{"line":112,"column":9}}],"line":110},"2":{"loc":{"start":{"line":126,"column":8},"end":{"line":128,"column":9}},"type":"if","locations":[{"start":{"line":126,"column":8},"end":{"line":128,"column":9}},{"start":{"line":126,"column":8},"end":{"line":128,"column":9}}],"line":126},"3":{"loc":{"start":{"line":156,"column":8},"end":{"line":158,"column":9}},"type":"if","locations":[{"start":{"line":156,"column":8},"end":{"line":158,"column":9}},{"start":{"line":156,"column":8},"end":{"line":158,"column":9}}],"line":156},"4":{"loc":{"start":{"line":156,"column":12},"end":{"line":156,"column":79}},"type":"binary-expr","locations":[{"start":{"line":156,"column":13},"end":{"line":156,"column":16}},{"start":{"line":156,"column":20},"end":{"line":156,"column":41}},{"start":{"line":156,"column":47},"end":{"line":156,"column":64}},{"start":{"line":156,"column":68},"end":{"line":156,"column":78}}],"line":156},"5":{"loc":{"start":{"line":159,"column":8},"end":{"line":161,"column":9}},"type":"if","locations":[{"start":{"line":159,"column":8},"end":{"line":161,"column":9}},{"start":{"line":159,"column":8},"end":{"line":161,"column":9}}],"line":159},"6":{"loc":{"start":{"line":159,"column":12},"end":{"line":159,"column":26}},"type":"binary-expr","locations":[{"start":{"line":159,"column":12},"end":{"line":159,"column":15}},{"start":{"line":159,"column":19},"end":{"line":159,"column":26}}],"line":159},"7":{"loc":{"start":{"line":162,"column":25},"end":{"line":162,"column":68}},"type":"cond-expr","locations":[{"start":{"line":162,"column":61},"end":{"line":162,"column":62}},{"start":{"line":162,"column":65},"end":{"line":162,"column":68}}],"line":162},"8":{"loc":{"start":{"line":162,"column":25},"end":{"line":162,"column":58}},"type":"binary-expr","locations":[{"start":{"line":162,"column":25},"end":{"line":162,"column":37}},{"start":{"line":162,"column":41},"end":{"line":162,"column":58}}],"line":162}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":22,"6":22,"7":22,"8":22,"9":22,"10":22,"11":22,"12":22,"13":18,"14":18,"15":6,"16":1,"17":1,"18":1,"19":24,"20":24,"21":3,"22":21,"23":1,"24":20,"25":20,"26":20,"27":20,"28":2,"29":18,"30":18,"31":20,"32":1,"33":20,"34":20,"35":20,"36":1,"37":1,"38":26,"39":2,"40":24,"41":1,"42":23,"43":23,"44":20,"45":1},"f":{"0":22,"1":18,"2":6,"3":1,"4":1,"5":24,"6":20,"7":20,"8":20,"9":1,"10":26,"11":20},"b":{"0":[3,21],"1":[1,20],"2":[2,18],"3":[2,24],"4":[26,19,25,19],"5":[1,23],"6":[24,18],"7":[6,17],"8":[23,23]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/cumulative/cumulative.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/cumulative/cumulative.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getTimestampWithProcessHRTime } from '../../common/time-util';\nimport {\n  validateArrayElementsNotNull,\n  validateNotNull,\n} from '../../common/validations';\nimport {\n  LabelKey,\n  LabelValue,\n  Metric,\n  MetricDescriptor,\n  MetricDescriptorType,\n  TimeSeries,\n  Timestamp,\n} from '../export/types';\nimport { Meter } from '../types';\nimport { hashLabelValues, initializeDefaultLabels } from '../utils';\nimport { CumulativePoint } from './types';\n\n/**\n * Cumulative metric is used to record aggregated metrics that represents a\n * single numerical value accumulated over a time interval. The value can only\n * increase or be reset to zero on restart or reset the event.\n */\nexport class Cumulative implements Meter {\n  private readonly metricDescriptor: MetricDescriptor;\n  private labelKeysLength: number;\n  private defaultLabelValues: LabelValue[];\n  private registeredPoints: Map<string, CumulativePoint> = new Map();\n  private readonly constantLabelValues: LabelValue[];\n\n  /**\n   * Constructs a new Cumulative instance.\n   *\n   * @param name The name of the metric.\n   * @param description The description of the metric.\n   * @param unit The unit of the metric.\n   * @param type The type of metric.\n   * @param labelKeys The list of the label keys.\n   * @param constantLabels The map of constant labels for the Metric.\n   */\n  constructor(\n    name: string,\n    description: string,\n    unit: string,\n    type: MetricDescriptorType,\n    readonly labelKeys: LabelKey[],\n    readonly constantLabels: Map<LabelKey, LabelValue>\n  ) {\n    this.labelKeysLength = labelKeys.length;\n    const keysAndConstantKeys = [...labelKeys, ...constantLabels.keys()];\n    this.constantLabelValues = [...constantLabels.values()];\n\n    this.metricDescriptor = {\n      name,\n      description,\n      unit,\n      type,\n      labelKeys: keysAndConstantKeys,\n    };\n    this.defaultLabelValues = initializeDefaultLabels(this.labelKeysLength);\n  }\n\n  /**\n   * Creates a TimeSeries and returns a Point if the specified\n   * labelValues is not already associated with this cumulative, else returns an\n   * existing Point.\n   *\n   * It is recommended to keep a reference to the Point instead of always\n   * calling this method for manual operations.\n   *\n   * @param labelValues The list of the label values.\n   * @returns The value of single cumulative.\n   */\n  getOrCreateTimeSeries(labelValues: LabelValue[]): CumulativePoint {\n    validateArrayElementsNotNull(\n      validateNotNull(labelValues, 'labelValues'),\n      'labelValue'\n    );\n    return this.registerTimeSeries(labelValues);\n  }\n\n  /**\n   * Returns a Point for a cumulative with all labels not set, or default\n   * labels.\n   *\n   * @returns The value of single cumulative.\n   */\n  getDefaultTimeSeries(): CumulativePoint {\n    return this.registerTimeSeries(this.defaultLabelValues);\n  }\n\n  /**\n   * Removes the TimeSeries from the cumulative metric, if it is present. i.e.\n   * references to previous Point objects are invalid (not part of the\n   * metric).\n   *\n   * @param labelValues The list of label values.\n   */\n  removeTimeSeries(labelValues: LabelValue[]): void {\n    validateNotNull(labelValues, 'labelValues');\n    this.registeredPoints.delete(hashLabelValues(labelValues));\n  }\n\n  /**\n   * Removes all TimeSeries from the cumulative metric. i.e. references to all\n   * previous Point objects are invalid (not part of the metric).\n   */\n  clear(): void {\n    this.registeredPoints.clear();\n  }\n\n  /**\n   * Registers a TimeSeries and returns a Point if the specified\n   * labelValues is not already associated with this cumulative, else returns an\n   * existing Point.\n   *\n   * @param labelValues The list of the label values.\n   * @returns The value of single cumulative.\n   */\n  private registerTimeSeries(labelValues: LabelValue[]): CumulativePoint {\n    const hash = hashLabelValues(labelValues);\n    // return if the specified labelValues is already associated with the point.\n    if (this.registeredPoints.has(hash)) {\n      return this.registeredPoints.get(hash)!;\n    }\n    if (this.labelKeysLength !== labelValues.length) {\n      throw new Error(\"Label Keys and Label Values don't have same size\");\n    }\n\n    const point = new CumulativePointEntry([\n      ...labelValues,\n      ...this.constantLabelValues,\n    ]);\n    this.registeredPoints.set(hash, point);\n    return point;\n  }\n\n  /**\n   * Provides a Metric with one or more TimeSeries.\n   *\n   * @returns The Metric, or null if TimeSeries is not present in Metric.\n   */\n  getMetric(): Metric | null {\n    if (this.registeredPoints.size === 0) {\n      return null;\n    }\n    const now: Timestamp = getTimestampWithProcessHRTime();\n    return {\n      descriptor: this.metricDescriptor,\n      timeseries: Array.from(this.registeredPoints, ([_, point]) =>\n        point.getTimeSeries(now)\n      ),\n    };\n  }\n}\n\n/**\n * The value of a single point in the Cumulative.TimeSeries.\n */\nexport class CumulativePointEntry implements CumulativePoint {\n  private readonly labelValues: LabelValue[];\n  private startTimestamp: Timestamp;\n  private value = 0;\n\n  constructor(labelValues: LabelValue[]) {\n    this.labelValues = labelValues;\n    this.startTimestamp = getTimestampWithProcessHRTime();\n  }\n\n  /** Reset cumulative metric. */\n  reset(): void {\n    this.value = 0;\n    this.startTimestamp = getTimestampWithProcessHRTime();\n  }\n\n  /**\n   * Increment the cumulative metric.\n   * @param val The new value.\n   */\n  inc(val?: number): void {\n    if ((val && !Number.isFinite(val)) || (val !== undefined && isNaN(val))) {\n      throw new TypeError(`Value is not a valid number: ${val}`);\n    }\n    if (val && val < 0) {\n      throw new Error('It is not possible to decrease a cumulative metric');\n    }\n    const incValue = val === null || val === undefined ? 1 : val;\n    this.value += incValue;\n  }\n\n  /**\n   * Returns the TimeSeries with one or more Point.\n   *\n   * @param now The time at which the cumulative is recorded.\n   * @returns The TimeSeries.\n   */\n  getTimeSeries(now: Timestamp): TimeSeries {\n    return {\n      labelValues: this.labelValues,\n      points: [{ value: this.value, timestamp: now }],\n      startTimestamp: this.startTimestamp,\n    };\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"cf199607c02ac4453270a547593b96d049eb4b5f","contentHash":"ee1242ee7f9e8e8302612c3c4a0f88bd6fe2682e5e7d92f5ef2d3854bbbf5206"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/utils.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/utils.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":234}},"2":{"start":{"line":19,"column":24},"end":{"line":19,"column":27}},"3":{"start":{"line":20,"column":26},"end":{"line":22,"column":1}},"4":{"start":{"line":30,"column":4},"end":{"line":33,"column":31}},"5":{"start":{"line":31,"column":19},"end":{"line":31,"column":27}},"6":{"start":{"line":35,"column":0},"end":{"line":35,"column":42}},"7":{"start":{"line":43,"column":4},"end":{"line":43,"column":52}},"8":{"start":{"line":45,"column":0},"end":{"line":45,"column":58}},"9":{"start":{"line":55,"column":4},"end":{"line":55,"column":49}},"10":{"start":{"line":57,"column":0},"end":{"line":57,"column":64}},"11":{"start":{"line":62,"column":4},"end":{"line":62,"column":51}},"12":{"start":{"line":64,"column":0},"end":{"line":64,"column":58}},"13":{"start":{"line":69,"column":4},"end":{"line":69,"column":47}},"14":{"start":{"line":71,"column":0},"end":{"line":71,"column":60}},"15":{"start":{"line":75,"column":4},"end":{"line":75,"column":49}},"16":{"start":{"line":77,"column":0},"end":{"line":77,"column":54}},"17":{"start":{"line":81,"column":4},"end":{"line":81,"column":53}},"18":{"start":{"line":83,"column":0},"end":{"line":83,"column":48}}},"fnMap":{"0":{"name":"hashLabelValues","decl":{"start":{"line":29,"column":9},"end":{"line":29,"column":24}},"loc":{"start":{"line":29,"column":38},"end":{"line":34,"column":1}},"line":29},"1":{"name":"(anonymous_1)","decl":{"start":{"line":31,"column":13},"end":{"line":31,"column":14}},"loc":{"start":{"line":31,"column":19},"end":{"line":31,"column":27}},"line":31},"2":{"name":"initializeDefaultLabels","decl":{"start":{"line":42,"column":9},"end":{"line":42,"column":32}},"loc":{"start":{"line":42,"column":40},"end":{"line":44,"column":1}},"line":42},"3":{"name":"isLengthAttributeInterface","decl":{"start":{"line":52,"column":9},"end":{"line":52,"column":35}},"loc":{"start":{"line":54,"column":5},"end":{"line":56,"column":1}},"line":54},"4":{"name":"isLengthMethodInterface","decl":{"start":{"line":59,"column":9},"end":{"line":59,"column":32}},"loc":{"start":{"line":61,"column":5},"end":{"line":63,"column":1}},"line":61},"5":{"name":"isSizeAttributeInterface","decl":{"start":{"line":66,"column":9},"end":{"line":66,"column":33}},"loc":{"start":{"line":68,"column":5},"end":{"line":70,"column":1}},"line":68},"6":{"name":"isSizeMethodInterface","decl":{"start":{"line":74,"column":9},"end":{"line":74,"column":30}},"loc":{"start":{"line":74,"column":36},"end":{"line":76,"column":1}},"line":74},"7":{"name":"isToValueInterface","decl":{"start":{"line":80,"column":9},"end":{"line":80,"column":27}},"loc":{"start":{"line":80,"column":33},"end":{"line":82,"column":1}},"line":80}},"branchMap":{"0":{"loc":{"start":{"line":55,"column":11},"end":{"line":55,"column":48}},"type":"binary-expr","locations":[{"start":{"line":55,"column":11},"end":{"line":55,"column":14}},{"start":{"line":55,"column":18},"end":{"line":55,"column":48}}],"line":55},"1":{"loc":{"start":{"line":62,"column":11},"end":{"line":62,"column":50}},"type":"binary-expr","locations":[{"start":{"line":62,"column":11},"end":{"line":62,"column":14}},{"start":{"line":62,"column":18},"end":{"line":62,"column":50}}],"line":62},"2":{"loc":{"start":{"line":69,"column":11},"end":{"line":69,"column":46}},"type":"binary-expr","locations":[{"start":{"line":69,"column":11},"end":{"line":69,"column":14}},{"start":{"line":69,"column":18},"end":{"line":69,"column":46}}],"line":69},"3":{"loc":{"start":{"line":75,"column":11},"end":{"line":75,"column":48}},"type":"binary-expr","locations":[{"start":{"line":75,"column":11},"end":{"line":75,"column":14}},{"start":{"line":75,"column":18},"end":{"line":75,"column":48}}],"line":75},"4":{"loc":{"start":{"line":81,"column":11},"end":{"line":81,"column":52}},"type":"binary-expr","locations":[{"start":{"line":81,"column":11},"end":{"line":81,"column":14}},{"start":{"line":81,"column":18},"end":{"line":81,"column":52}}],"line":81}},"s":{"0":1,"1":1,"2":1,"3":1,"4":100,"5":112,"6":1,"7":54,"8":1,"9":18,"10":1,"11":16,"12":1,"13":16,"14":1,"15":7,"16":1,"17":24,"18":1},"f":{"0":100,"1":112,"2":54,"3":18,"4":16,"5":16,"6":7,"7":24},"b":{"0":[18,18],"1":[16,16],"2":[16,16],"3":[7,7],"4":[24,24]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/utils.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/utils.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAWH,MAAM,eAAe,GAAG,GAAG,CAAC;AAC5B,MAAM,iBAAiB,GAAe;IACpC,KAAK,EAAE,IAAI;CACZ,CAAC;AAEF;;;;;GAKG;AACH,SAAgB,eAAe,CAAC,WAAyB;IACvD,OAAO,WAAW;SACf,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC;SACnB,IAAI,EAAE;SACN,IAAI,CAAC,eAAe,CAAC,CAAC;AAC3B,CAAC;AALD,0CAKC;AAED;;;;;GAKG;AACH,SAAgB,uBAAuB,CAAC,KAAa;IACnD,OAAO,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;AAClD,CAAC;AAFD,0DAEC;AAED,yEAAyE;AACzE,4DAA4D;AAC5D,wEAAwE;AACxE,2EAA2E;AAC3E,oCAAoC;AAEpC,oEAAoE;AACpE,SAAgB,0BAA0B;AACxC,kCAAkC;AAClC,GAAQ;IAER,OAAO,GAAG,IAAI,OAAO,GAAG,CAAC,MAAM,KAAK,QAAQ,CAAC;AAC/C,CAAC;AALD,gEAKC;AAED,iEAAiE;AACjE,SAAgB,uBAAuB;AACrC,kCAAkC;AAClC,GAAQ;IAER,OAAO,GAAG,IAAI,OAAO,GAAG,CAAC,MAAM,KAAK,UAAU,CAAC;AACjD,CAAC;AALD,0DAKC;AAED,kEAAkE;AAClE,SAAgB,wBAAwB;AACtC,kCAAkC;AAClC,GAAQ;IAER,OAAO,GAAG,IAAI,OAAO,GAAG,CAAC,IAAI,KAAK,QAAQ,CAAC;AAC7C,CAAC;AALD,4DAKC;AAED,+DAA+D;AAC/D,kCAAkC;AAClC,SAAgB,qBAAqB,CAAC,GAAQ;IAC5C,OAAO,GAAG,IAAI,OAAO,GAAG,CAAC,IAAI,KAAK,UAAU,CAAC;AAC/C,CAAC;AAFD,sDAEC;AAED,4DAA4D;AAC5D,kCAAkC;AAClC,SAAgB,kBAAkB,CAAC,GAAQ;IACzC,OAAO,GAAG,IAAI,OAAO,GAAG,CAAC,QAAQ,KAAK,UAAU,CAAC;AACnD,CAAC;AAFD,gDAEC","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LabelValue } from './export/types';\nimport {\n  LengthAttributeInterface,\n  LengthMethodInterface,\n  SizeAttributeInterface,\n  SizeMethodInterface,\n  ToValueInterface,\n} from './types';\n\nconst COMMA_SEPARATOR = ',';\nconst UNSET_LABEL_VALUE: LabelValue = {\n  value: null,\n};\n\n/**\n * Returns a string(comma separated) from the list of label values.\n *\n * @param labelValues The list of the label values.\n * @returns The hashed label values string.\n */\nexport function hashLabelValues(labelValues: LabelValue[]): string {\n  return labelValues\n    .map(lv => lv.value)\n    .sort()\n    .join(COMMA_SEPARATOR);\n}\n\n/**\n * Returns default label values.\n *\n * @param count The number of label values.\n * @returns The list of the label values.\n */\nexport function initializeDefaultLabels(count: number): LabelValue[] {\n  return new Array(count).fill(UNSET_LABEL_VALUE);\n}\n\n// TODO(mayurkale): Consider to use unknown type instead of any for below\n// functions, unknown type is available since TypeScript 3.0\n// Fact: unknown acts like a type-safe version of any by requiring us to\n// perform some type of checking before we can use the value of the unknown\n// element or any of its properties.\n\n// Checks if the specified collection is a LengthAttributeInterface.\nexport function isLengthAttributeInterface(\n  // tslint:disable-next-line:no-any\n  obj: any\n): obj is LengthAttributeInterface {\n  return obj && typeof obj.length === 'number';\n}\n\n// Checks if the specified collection is a LengthMethodInterface.\nexport function isLengthMethodInterface(\n  // tslint:disable-next-line:no-any\n  obj: any\n): obj is LengthMethodInterface {\n  return obj && typeof obj.length === 'function';\n}\n\n// Checks if the specified collection is a SizeAttributeInterface.\nexport function isSizeAttributeInterface(\n  // tslint:disable-next-line:no-any\n  obj: any\n): obj is SizeAttributeInterface {\n  return obj && typeof obj.size === 'number';\n}\n\n// Checks if the specified collection is a SizeMethodInterface.\n// tslint:disable-next-line:no-any\nexport function isSizeMethodInterface(obj: any): obj is SizeMethodInterface {\n  return obj && typeof obj.size === 'function';\n}\n\n// Checks if the specified callbackFn is a ToValueInterface.\n// tslint:disable-next-line:no-any\nexport function isToValueInterface(obj: any): obj is ToValueInterface {\n  return obj && typeof obj.getValue === 'function';\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"acbeb6f7920ca1ab3878db9bb004ba21192b5d8e","contentHash":"e6bc90e24d2377abdb5d6c2336f7c66572d5ae9a2a4443c240154103c629d4dc"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/cumulative/derived-cumulative.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/cumulative/derived-cumulative.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":35}},"2":{"start":{"line":19,"column":20},"end":{"line":19,"column":53}},"3":{"start":{"line":20,"column":22},"end":{"line":20,"column":57}},"4":{"start":{"line":21,"column":13},"end":{"line":21,"column":32}},"5":{"start":{"line":40,"column":8},"end":{"line":40,"column":45}},"6":{"start":{"line":41,"column":8},"end":{"line":41,"column":42}},"7":{"start":{"line":42,"column":8},"end":{"line":42,"column":48}},"8":{"start":{"line":43,"column":36},"end":{"line":43,"column":76}},"9":{"start":{"line":44,"column":8},"end":{"line":44,"column":64}},"10":{"start":{"line":45,"column":8},"end":{"line":51,"column":10}},"11":{"start":{"line":52,"column":8},"end":{"line":52,"column":35}},"12":{"start":{"line":68,"column":8},"end":{"line":68,"column":124}},"13":{"start":{"line":69,"column":8},"end":{"line":69,"column":54}},"14":{"start":{"line":70,"column":21},"end":{"line":70,"column":54}},"15":{"start":{"line":71,"column":8},"end":{"line":73,"column":9}},"16":{"start":{"line":72,"column":12},"end":{"line":72,"column":92}},"17":{"start":{"line":74,"column":8},"end":{"line":76,"column":9}},"18":{"start":{"line":75,"column":12},"end":{"line":75,"column":80}},"19":{"start":{"line":77,"column":8},"end":{"line":97,"column":9}},"20":{"start":{"line":78,"column":12},"end":{"line":78,"column":37}},"21":{"start":{"line":80,"column":13},"end":{"line":97,"column":9}},"22":{"start":{"line":81,"column":12},"end":{"line":81,"column":54}},"23":{"start":{"line":81,"column":35},"end":{"line":81,"column":53}},"24":{"start":{"line":83,"column":13},"end":{"line":97,"column":9}},"25":{"start":{"line":84,"column":12},"end":{"line":84,"column":50}},"26":{"start":{"line":84,"column":35},"end":{"line":84,"column":49}},"27":{"start":{"line":86,"column":13},"end":{"line":97,"column":9}},"28":{"start":{"line":87,"column":12},"end":{"line":87,"column":52}},"29":{"start":{"line":87,"column":35},"end":{"line":87,"column":51}},"30":{"start":{"line":89,"column":13},"end":{"line":97,"column":9}},"31":{"start":{"line":90,"column":12},"end":{"line":90,"column":48}},"32":{"start":{"line":90,"column":35},"end":{"line":90,"column":47}},"33":{"start":{"line":92,"column":13},"end":{"line":97,"column":9}},"34":{"start":{"line":93,"column":12},"end":{"line":93,"column":50}},"35":{"start":{"line":93,"column":35},"end":{"line":93,"column":49}},"36":{"start":{"line":96,"column":12},"end":{"line":96,"column":61}},"37":{"start":{"line":98,"column":8},"end":{"line":102,"column":11}},"38":{"start":{"line":112,"column":8},"end":{"line":112,"column":66}},"39":{"start":{"line":113,"column":8},"end":{"line":113,"column":72}},"40":{"start":{"line":120,"column":8},"end":{"line":120,"column":38}},"41":{"start":{"line":128,"column":8},"end":{"line":130,"column":9}},"42":{"start":{"line":129,"column":12},"end":{"line":129,"column":24}},"43":{"start":{"line":131,"column":26},"end":{"line":131,"column":69}},"44":{"start":{"line":132,"column":8},"end":{"line":149,"column":10}},"45":{"start":{"line":135,"column":33},"end":{"line":135,"column":60}},"46":{"start":{"line":136,"column":30},"end":{"line":138,"column":47}},"47":{"start":{"line":139,"column":16},"end":{"line":139,"column":50}},"48":{"start":{"line":140,"column":16},"end":{"line":147,"column":18}},"49":{"start":{"line":152,"column":0},"end":{"line":152,"column":46}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":39,"column":4},"end":{"line":39,"column":5}},"loc":{"start":{"line":39,"column":85},"end":{"line":53,"column":5}},"line":39},"1":{"name":"(anonymous_1)","decl":{"start":{"line":67,"column":4},"end":{"line":67,"column":5}},"loc":{"start":{"line":67,"column":43},"end":{"line":103,"column":5}},"line":67},"2":{"name":"(anonymous_2)","decl":{"start":{"line":81,"column":29},"end":{"line":81,"column":30}},"loc":{"start":{"line":81,"column":35},"end":{"line":81,"column":53}},"line":81},"3":{"name":"(anonymous_3)","decl":{"start":{"line":84,"column":29},"end":{"line":84,"column":30}},"loc":{"start":{"line":84,"column":35},"end":{"line":84,"column":49}},"line":84},"4":{"name":"(anonymous_4)","decl":{"start":{"line":87,"column":29},"end":{"line":87,"column":30}},"loc":{"start":{"line":87,"column":35},"end":{"line":87,"column":51}},"line":87},"5":{"name":"(anonymous_5)","decl":{"start":{"line":90,"column":29},"end":{"line":90,"column":30}},"loc":{"start":{"line":90,"column":35},"end":{"line":90,"column":47}},"line":90},"6":{"name":"(anonymous_6)","decl":{"start":{"line":93,"column":29},"end":{"line":93,"column":30}},"loc":{"start":{"line":93,"column":35},"end":{"line":93,"column":49}},"line":93},"7":{"name":"(anonymous_7)","decl":{"start":{"line":111,"column":4},"end":{"line":111,"column":5}},"loc":{"start":{"line":111,"column":34},"end":{"line":114,"column":5}},"line":111},"8":{"name":"(anonymous_8)","decl":{"start":{"line":119,"column":4},"end":{"line":119,"column":5}},"loc":{"start":{"line":119,"column":12},"end":{"line":121,"column":5}},"line":119},"9":{"name":"(anonymous_9)","decl":{"start":{"line":127,"column":4},"end":{"line":127,"column":5}},"loc":{"start":{"line":127,"column":16},"end":{"line":150,"column":5}},"line":127},"10":{"name":"(anonymous_10)","decl":{"start":{"line":134,"column":58},"end":{"line":134,"column":59}},"loc":{"start":{"line":134,"column":84},"end":{"line":148,"column":13}},"line":134}},"branchMap":{"0":{"loc":{"start":{"line":71,"column":8},"end":{"line":73,"column":9}},"type":"if","locations":[{"start":{"line":71,"column":8},"end":{"line":73,"column":9}},{"start":{"line":71,"column":8},"end":{"line":73,"column":9}}],"line":71},"1":{"loc":{"start":{"line":74,"column":8},"end":{"line":76,"column":9}},"type":"if","locations":[{"start":{"line":74,"column":8},"end":{"line":76,"column":9}},{"start":{"line":74,"column":8},"end":{"line":76,"column":9}}],"line":74},"2":{"loc":{"start":{"line":77,"column":8},"end":{"line":97,"column":9}},"type":"if","locations":[{"start":{"line":77,"column":8},"end":{"line":97,"column":9}},{"start":{"line":77,"column":8},"end":{"line":97,"column":9}}],"line":77},"3":{"loc":{"start":{"line":80,"column":13},"end":{"line":97,"column":9}},"type":"if","locations":[{"start":{"line":80,"column":13},"end":{"line":97,"column":9}},{"start":{"line":80,"column":13},"end":{"line":97,"column":9}}],"line":80},"4":{"loc":{"start":{"line":83,"column":13},"end":{"line":97,"column":9}},"type":"if","locations":[{"start":{"line":83,"column":13},"end":{"line":97,"column":9}},{"start":{"line":83,"column":13},"end":{"line":97,"column":9}}],"line":83},"5":{"loc":{"start":{"line":86,"column":13},"end":{"line":97,"column":9}},"type":"if","locations":[{"start":{"line":86,"column":13},"end":{"line":97,"column":9}},{"start":{"line":86,"column":13},"end":{"line":97,"column":9}}],"line":86},"6":{"loc":{"start":{"line":89,"column":13},"end":{"line":97,"column":9}},"type":"if","locations":[{"start":{"line":89,"column":13},"end":{"line":97,"column":9}},{"start":{"line":89,"column":13},"end":{"line":97,"column":9}}],"line":89},"7":{"loc":{"start":{"line":92,"column":13},"end":{"line":97,"column":9}},"type":"if","locations":[{"start":{"line":92,"column":13},"end":{"line":97,"column":9}},{"start":{"line":92,"column":13},"end":{"line":97,"column":9}}],"line":92},"8":{"loc":{"start":{"line":128,"column":8},"end":{"line":130,"column":9}},"type":"if","locations":[{"start":{"line":128,"column":8},"end":{"line":130,"column":9}},{"start":{"line":128,"column":8},"end":{"line":130,"column":9}}],"line":128},"9":{"loc":{"start":{"line":136,"column":30},"end":{"line":138,"column":47}},"type":"cond-expr","locations":[{"start":{"line":137,"column":22},"end":{"line":137,"column":30}},{"start":{"line":138,"column":22},"end":{"line":138,"column":47}}],"line":136}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":18,"6":18,"7":18,"8":18,"9":18,"10":18,"11":18,"12":16,"13":16,"14":16,"15":16,"16":1,"17":15,"18":1,"19":14,"20":3,"21":11,"22":2,"23":2,"24":9,"25":1,"26":1,"27":8,"28":0,"29":0,"30":8,"31":5,"32":7,"33":3,"34":3,"35":3,"36":0,"37":14,"38":1,"39":1,"40":1,"41":17,"42":2,"43":15,"44":15,"45":17,"46":17,"47":17,"48":17,"49":1},"f":{"0":18,"1":16,"2":2,"3":1,"4":0,"5":7,"6":3,"7":1,"8":1,"9":17,"10":17},"b":{"0":[1,15],"1":[1,14],"2":[3,11],"3":[2,9],"4":[1,8],"5":[0,8],"6":[5,3],"7":[3,0],"8":[2,15],"9":[16,1]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/cumulative/derived-cumulative.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/cumulative/derived-cumulative.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getTimestampWithProcessHRTime } from '../../common/time-util';\nimport {\n  validateArrayElementsNotNull,\n  validateNotNull,\n} from '../../common/validations';\nimport {\n  LabelKey,\n  LabelValue,\n  Metric,\n  MetricDescriptor,\n  MetricDescriptorType,\n  TimeSeries,\n  Timestamp,\n} from '../export/types';\nimport { Meter } from '../types';\nimport { AccessorInterface } from '../types';\nimport * as util from '../utils';\n\ntype ValueExtractor = () => number;\n\n/**\n * An interface that describes the entry for every TimeSeries (Point) added to\n * the Cumulative metric.\n */\ninterface CumulativeEntry {\n  /** The list of the label values. */\n  readonly labelValues: LabelValue[];\n  /** The function to get the actual value of point. */\n  readonly extractor: ValueExtractor;\n  /** The previous value of the point. */\n  prevValue: number;\n}\n\n/**\n * DerivedCumulative metric is used to record aggregated metrics that\n * represents a single numerical value accumulated over a time interval.\n */\nexport class DerivedCumulative implements Meter {\n  private metricDescriptor: MetricDescriptor;\n  private labelKeysLength: number;\n  private registeredPoints: Map<string, CumulativeEntry> = new Map();\n  private extractor?: ValueExtractor;\n  private readonly constantLabelValues: LabelValue[];\n  private startTime: Timestamp;\n\n  /**\n   * Constructs a new DerivedCumulative instance.\n   *\n   * @param name The name of the metric.\n   * @param description The description of the metric.\n   * @param unit The unit of the metric.\n   * @param type The type of metric.\n   * @param labelKeys The list of the label keys.\n   * @param constantLabels The map of constant labels for the Metric.\n   * @param startTime The time when the cumulative metric start measuring the\n   *     value.\n   */\n  constructor(\n    name: string,\n    description: string,\n    unit: string,\n    type: MetricDescriptorType,\n    labelKeys: LabelKey[],\n    readonly constantLabels: Map<LabelKey, LabelValue>,\n    startTime: Timestamp\n  ) {\n    this.labelKeysLength = labelKeys.length;\n    const keysAndConstantKeys = [...labelKeys, ...constantLabels.keys()];\n    this.constantLabelValues = [...constantLabels.values()];\n\n    this.metricDescriptor = {\n      name,\n      description,\n      unit,\n      type,\n      labelKeys: keysAndConstantKeys,\n    };\n    this.startTime = startTime;\n  }\n\n  /**\n   * Creates a TimeSeries. The value of a single point in the TimeSeries is\n   * observed from an object or function. The ValueExtractor is invoked whenever\n   * metrics are collected, meaning the reported value is up-to-date.\n   *\n   * @param labelValues The list of the label values.\n   * @param objOrFn obj The obj to get the size or length or value from. If\n   *     multiple options are available, the value (ToValueInterface) takes\n   *     precedence first, followed by length and size. e.g value -> length ->\n   *     size.\n   *     fn is the function that will be called to get the current value\n   *     of the cumulative.\n   */\n  createTimeSeries(\n    labelValues: LabelValue[],\n    objOrFn: AccessorInterface\n  ): void {\n    validateArrayElementsNotNull(\n      validateNotNull(labelValues, 'labelValues'),\n      'labelValue'\n    );\n    validateNotNull(objOrFn, 'obj');\n\n    const hash = util.hashLabelValues(labelValues);\n    if (this.registeredPoints.has(hash)) {\n      throw new Error(\n        'A different time series with the same labels already exists.'\n      );\n    }\n    if (this.labelKeysLength !== labelValues.length) {\n      throw new Error(\"Label Keys and Label Values don't have same size\");\n    }\n\n    if (objOrFn instanceof Function) {\n      this.extractor = objOrFn;\n    } else if (util.isToValueInterface(objOrFn)) {\n      this.extractor = () => objOrFn.getValue();\n    } else if (util.isLengthAttributeInterface(objOrFn)) {\n      this.extractor = () => objOrFn.length;\n    } else if (util.isLengthMethodInterface(objOrFn)) {\n      this.extractor = () => objOrFn.length();\n    } else if (util.isSizeAttributeInterface(objOrFn)) {\n      this.extractor = () => objOrFn.size;\n    } else if (util.isSizeMethodInterface(objOrFn)) {\n      this.extractor = () => objOrFn.size();\n    } else {\n      throw new Error('Unknown interface/object type');\n    }\n\n    this.registeredPoints.set(hash, {\n      labelValues,\n      extractor: this.extractor,\n      prevValue: 0,\n    });\n  }\n\n  /**\n   * Removes the TimeSeries from the cumulative metric, if it is present. i.e.\n   * references to previous Point objects are invalid (not part of the\n   * metric).\n   *\n   * @param labelValues The list of label values.\n   */\n  removeTimeSeries(labelValues: LabelValue[]): void {\n    validateNotNull(labelValues, 'labelValues');\n    this.registeredPoints.delete(util.hashLabelValues(labelValues));\n  }\n\n  /**\n   * Removes all TimeSeries from the cumulative metric. i.e. references to all\n   * previous Point objects are invalid (not part of the metric).\n   */\n  clear(): void {\n    this.registeredPoints.clear();\n  }\n\n  /**\n   * Provides a Metric with one or more TimeSeries.\n   *\n   * @returns The Metric, or null if TimeSeries is not present in Metric.\n   */\n  getMetric(): Metric | null {\n    if (this.registeredPoints.size === 0) {\n      return null;\n    }\n    const timestamp: Timestamp = getTimestampWithProcessHRTime();\n    return {\n      descriptor: this.metricDescriptor,\n      timeseries: Array.from(\n        this.registeredPoints,\n        ([_, cumulativeEntry]): TimeSeries => {\n          const newValue = cumulativeEntry.extractor();\n          const value =\n            newValue > cumulativeEntry.prevValue\n              ? newValue\n              : cumulativeEntry.prevValue;\n          cumulativeEntry.prevValue = value;\n\n          return {\n            labelValues: [\n              ...cumulativeEntry.labelValues,\n              ...this.constantLabelValues,\n            ],\n            points: [{ value, timestamp }],\n            startTimestamp: this.startTime,\n          };\n        }\n      ),\n    };\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"0657d143b2eb84e8636a7b8f346c8a77f13cb725","contentHash":"85b9b25bb41304714210092659333485c7e5d725190c8792e586f0603c503235"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/export/base-metric-producer.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/export/base-metric-producer.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":36}},"2":{"start":{"line":25,"column":0},"end":{"line":25,"column":48}}},"fnMap":{},"branchMap":{},"s":{"0":1,"1":1,"2":1},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/export/base-metric-producer.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/export/base-metric-producer.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAIH;;;GAGG;AACH,MAAsB,kBAAkB;CAMvC;AAND,gDAMC","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Metric, MetricProducer } from './types';\n\n/**\n * A MetricProducer producer that can be registered for exporting using\n * MetricProducerManager.\n */\nexport abstract class BaseMetricProducer implements MetricProducer {\n  /**\n   * Gets a collection of produced Metric`s to be exported.\n   * @returns The List of metrics\n   */\n  abstract getMetrics(): Metric[];\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"0a97111aea49b38cd291876a7b117ab6c4ce50c6","contentHash":"88ab227758b3207578e77fbade7b3576932e6c5d5dfb87108dcdfc6562d994d5"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/gauges/derived-gauge.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/gauges/derived-gauge.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":30}},"2":{"start":{"line":19,"column":20},"end":{"line":19,"column":53}},"3":{"start":{"line":20,"column":22},"end":{"line":20,"column":57}},"4":{"start":{"line":21,"column":13},"end":{"line":21,"column":32}},"5":{"start":{"line":37,"column":8},"end":{"line":37,"column":45}},"6":{"start":{"line":38,"column":8},"end":{"line":38,"column":42}},"7":{"start":{"line":39,"column":8},"end":{"line":39,"column":48}},"8":{"start":{"line":40,"column":36},"end":{"line":40,"column":76}},"9":{"start":{"line":41,"column":8},"end":{"line":41,"column":64}},"10":{"start":{"line":42,"column":8},"end":{"line":48,"column":10}},"11":{"start":{"line":64,"column":8},"end":{"line":64,"column":148}},"12":{"start":{"line":65,"column":8},"end":{"line":65,"column":68}},"13":{"start":{"line":66,"column":21},"end":{"line":66,"column":54}},"14":{"start":{"line":67,"column":8},"end":{"line":69,"column":9}},"15":{"start":{"line":68,"column":12},"end":{"line":68,"column":78}},"16":{"start":{"line":70,"column":8},"end":{"line":72,"column":9}},"17":{"start":{"line":71,"column":12},"end":{"line":71,"column":69}},"18":{"start":{"line":73,"column":8},"end":{"line":93,"column":9}},"19":{"start":{"line":74,"column":12},"end":{"line":74,"column":37}},"20":{"start":{"line":76,"column":13},"end":{"line":93,"column":9}},"21":{"start":{"line":77,"column":12},"end":{"line":77,"column":54}},"22":{"start":{"line":77,"column":35},"end":{"line":77,"column":53}},"23":{"start":{"line":79,"column":13},"end":{"line":93,"column":9}},"24":{"start":{"line":80,"column":12},"end":{"line":80,"column":50}},"25":{"start":{"line":80,"column":35},"end":{"line":80,"column":49}},"26":{"start":{"line":82,"column":13},"end":{"line":93,"column":9}},"27":{"start":{"line":83,"column":12},"end":{"line":83,"column":52}},"28":{"start":{"line":83,"column":35},"end":{"line":83,"column":51}},"29":{"start":{"line":85,"column":13},"end":{"line":93,"column":9}},"30":{"start":{"line":86,"column":12},"end":{"line":86,"column":48}},"31":{"start":{"line":86,"column":35},"end":{"line":86,"column":47}},"32":{"start":{"line":88,"column":13},"end":{"line":93,"column":9}},"33":{"start":{"line":89,"column":12},"end":{"line":89,"column":50}},"34":{"start":{"line":89,"column":35},"end":{"line":89,"column":49}},"35":{"start":{"line":92,"column":12},"end":{"line":92,"column":74}},"36":{"start":{"line":94,"column":8},"end":{"line":94,"column":84}},"37":{"start":{"line":104,"column":8},"end":{"line":104,"column":78}},"38":{"start":{"line":105,"column":8},"end":{"line":105,"column":72}},"39":{"start":{"line":112,"column":8},"end":{"line":112,"column":38}},"40":{"start":{"line":120,"column":8},"end":{"line":122,"column":9}},"41":{"start":{"line":121,"column":12},"end":{"line":121,"column":24}},"42":{"start":{"line":123,"column":26},"end":{"line":123,"column":69}},"43":{"start":{"line":124,"column":8},"end":{"line":130,"column":10}},"44":{"start":{"line":126,"column":80},"end":{"line":129,"column":13}},"45":{"start":{"line":133,"column":0},"end":{"line":133,"column":36}},"46":{"start":{"line":134,"column":0},"end":{"line":134,"column":40}},"47":{"start":{"line":135,"column":0},"end":{"line":135,"column":42}},"48":{"start":{"line":136,"column":0},"end":{"line":136,"column":28}},"49":{"start":{"line":137,"column":0},"end":{"line":137,"column":93}},"50":{"start":{"line":138,"column":0},"end":{"line":138,"column":114}},"51":{"start":{"line":139,"column":0},"end":{"line":139,"column":79}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":36,"column":4},"end":{"line":36,"column":5}},"loc":{"start":{"line":36,"column":74},"end":{"line":49,"column":5}},"line":36},"1":{"name":"(anonymous_1)","decl":{"start":{"line":63,"column":4},"end":{"line":63,"column":5}},"loc":{"start":{"line":63,"column":43},"end":{"line":95,"column":5}},"line":63},"2":{"name":"(anonymous_2)","decl":{"start":{"line":77,"column":29},"end":{"line":77,"column":30}},"loc":{"start":{"line":77,"column":35},"end":{"line":77,"column":53}},"line":77},"3":{"name":"(anonymous_3)","decl":{"start":{"line":80,"column":29},"end":{"line":80,"column":30}},"loc":{"start":{"line":80,"column":35},"end":{"line":80,"column":49}},"line":80},"4":{"name":"(anonymous_4)","decl":{"start":{"line":83,"column":29},"end":{"line":83,"column":30}},"loc":{"start":{"line":83,"column":35},"end":{"line":83,"column":51}},"line":83},"5":{"name":"(anonymous_5)","decl":{"start":{"line":86,"column":29},"end":{"line":86,"column":30}},"loc":{"start":{"line":86,"column":35},"end":{"line":86,"column":47}},"line":86},"6":{"name":"(anonymous_6)","decl":{"start":{"line":89,"column":29},"end":{"line":89,"column":30}},"loc":{"start":{"line":89,"column":35},"end":{"line":89,"column":49}},"line":89},"7":{"name":"(anonymous_7)","decl":{"start":{"line":103,"column":4},"end":{"line":103,"column":5}},"loc":{"start":{"line":103,"column":34},"end":{"line":106,"column":5}},"line":103},"8":{"name":"(anonymous_8)","decl":{"start":{"line":111,"column":4},"end":{"line":111,"column":5}},"loc":{"start":{"line":111,"column":12},"end":{"line":113,"column":5}},"line":111},"9":{"name":"(anonymous_9)","decl":{"start":{"line":119,"column":4},"end":{"line":119,"column":5}},"loc":{"start":{"line":119,"column":16},"end":{"line":131,"column":5}},"line":119},"10":{"name":"(anonymous_10)","decl":{"start":{"line":126,"column":58},"end":{"line":126,"column":59}},"loc":{"start":{"line":126,"column":80},"end":{"line":129,"column":13}},"line":126}},"branchMap":{"0":{"loc":{"start":{"line":67,"column":8},"end":{"line":69,"column":9}},"type":"if","locations":[{"start":{"line":67,"column":8},"end":{"line":69,"column":9}},{"start":{"line":67,"column":8},"end":{"line":69,"column":9}}],"line":67},"1":{"loc":{"start":{"line":70,"column":8},"end":{"line":72,"column":9}},"type":"if","locations":[{"start":{"line":70,"column":8},"end":{"line":72,"column":9}},{"start":{"line":70,"column":8},"end":{"line":72,"column":9}}],"line":70},"2":{"loc":{"start":{"line":73,"column":8},"end":{"line":93,"column":9}},"type":"if","locations":[{"start":{"line":73,"column":8},"end":{"line":93,"column":9}},{"start":{"line":73,"column":8},"end":{"line":93,"column":9}}],"line":73},"3":{"loc":{"start":{"line":76,"column":13},"end":{"line":93,"column":9}},"type":"if","locations":[{"start":{"line":76,"column":13},"end":{"line":93,"column":9}},{"start":{"line":76,"column":13},"end":{"line":93,"column":9}}],"line":76},"4":{"loc":{"start":{"line":79,"column":13},"end":{"line":93,"column":9}},"type":"if","locations":[{"start":{"line":79,"column":13},"end":{"line":93,"column":9}},{"start":{"line":79,"column":13},"end":{"line":93,"column":9}}],"line":79},"5":{"loc":{"start":{"line":82,"column":13},"end":{"line":93,"column":9}},"type":"if","locations":[{"start":{"line":82,"column":13},"end":{"line":93,"column":9}},{"start":{"line":82,"column":13},"end":{"line":93,"column":9}}],"line":82},"6":{"loc":{"start":{"line":85,"column":13},"end":{"line":93,"column":9}},"type":"if","locations":[{"start":{"line":85,"column":13},"end":{"line":93,"column":9}},{"start":{"line":85,"column":13},"end":{"line":93,"column":9}}],"line":85},"7":{"loc":{"start":{"line":88,"column":13},"end":{"line":93,"column":9}},"type":"if","locations":[{"start":{"line":88,"column":13},"end":{"line":93,"column":9}},{"start":{"line":88,"column":13},"end":{"line":93,"column":9}}],"line":88},"8":{"loc":{"start":{"line":120,"column":8},"end":{"line":122,"column":9}},"type":"if","locations":[{"start":{"line":120,"column":8},"end":{"line":122,"column":9}},{"start":{"line":120,"column":8},"end":{"line":122,"column":9}}],"line":120}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":19,"6":19,"7":19,"8":19,"9":19,"10":19,"11":16,"12":16,"13":16,"14":16,"15":1,"16":15,"17":1,"18":14,"19":1,"20":13,"21":4,"22":4,"23":9,"24":1,"25":1,"26":8,"27":0,"28":0,"29":8,"30":4,"31":5,"32":4,"33":4,"34":4,"35":0,"36":14,"37":1,"38":1,"39":1,"40":16,"41":2,"42":14,"43":14,"44":16,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1},"f":{"0":19,"1":16,"2":4,"3":1,"4":0,"5":5,"6":4,"7":1,"8":1,"9":16,"10":16},"b":{"0":[1,15],"1":[1,14],"2":[1,13],"3":[4,9],"4":[1,8],"5":[0,8],"6":[4,4],"7":[4,0],"8":[2,14]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/gauges/derived-gauge.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/gauges/derived-gauge.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getTimestampWithProcessHRTime } from '../../common/time-util';\nimport {\n  validateArrayElementsNotNull,\n  validateNotNull,\n} from '../../common/validations';\nimport {\n  LabelKey,\n  LabelValue,\n  Metric,\n  MetricDescriptor,\n  MetricDescriptorType,\n  TimeSeries,\n  Timestamp,\n} from '../export/types';\nimport * as types from '../types';\nimport { AccessorInterface } from '../types';\nimport * as util from '../utils';\n\ntype ValueExtractor = () => number;\n\ninterface GaugeEntry {\n  readonly labelValues: LabelValue[];\n  readonly extractor: ValueExtractor;\n}\n\n/**\n * DerivedGauge metric\n */\nexport class DerivedGauge implements types.Meter {\n  private metricDescriptor: MetricDescriptor;\n  private labelKeysLength: number;\n  private registeredPoints: Map<string, GaugeEntry> = new Map();\n  private extractor?: ValueExtractor;\n  private readonly constantLabelValues: LabelValue[];\n\n  private static readonly LABEL_VALUE = 'labelValue';\n  private static readonly LABEL_VALUES = 'labelValues';\n  private static readonly OBJECT = 'obj';\n  private static readonly ERROR_MESSAGE_INVALID_SIZE =\n    \"Label Keys and Label Values don't have same size\";\n  private static readonly ERROR_MESSAGE_DUPLICATE_TIME_SERIES =\n    'A different time series with the same labels already exists.';\n  private static readonly ERROR_MESSAGE_UNKNOWN_INTERFACE =\n    'Unknown interface/object type';\n\n  /**\n   * Constructs a new DerivedGauge instance.\n   *\n   * @param name The name of the metric.\n   * @param description The description of the metric.\n   * @param unit The unit of the metric.\n   * @param type The type of metric.\n   * @param labelKeys The list of the label keys.\n   * @param constantLabels The map of constant labels for the Metric.\n   */\n  constructor(\n    name: string,\n    description: string,\n    unit: string,\n    type: MetricDescriptorType,\n    labelKeys: LabelKey[],\n    readonly constantLabels: Map<LabelKey, LabelValue>\n  ) {\n    this.labelKeysLength = labelKeys.length;\n    const keysAndConstantKeys = [...labelKeys, ...constantLabels.keys()];\n    this.constantLabelValues = [...constantLabels.values()];\n\n    this.metricDescriptor = {\n      name,\n      description,\n      unit,\n      type,\n      labelKeys: keysAndConstantKeys,\n    };\n  }\n\n  /**\n   * Creates a TimeSeries. The value of a single point in the TimeSeries is\n   * observed from a obj or a function. The ValueExtractor is invoked whenever\n   * metrics are collected, meaning the reported value is up-to-date.\n   *\n   * @param labelValues The list of the label values.\n   * @param objOrFn obj The obj to get the size or length or value from. If\n   *     multiple options are available, the value (ToValueInterface) takes\n   *     precedence first, followed by length and size. e.g value -> length ->\n   *     size.\n   *     fn is the function that will be called to get the current value\n   *     of the gauge.\n   */\n  createTimeSeries(\n    labelValues: LabelValue[],\n    objOrFn: AccessorInterface\n  ): void {\n    validateArrayElementsNotNull(\n      validateNotNull(labelValues, DerivedGauge.LABEL_VALUES),\n      DerivedGauge.LABEL_VALUE\n    );\n    validateNotNull(objOrFn, DerivedGauge.OBJECT);\n\n    const hash = util.hashLabelValues(labelValues);\n    if (this.registeredPoints.has(hash)) {\n      throw new Error(DerivedGauge.ERROR_MESSAGE_DUPLICATE_TIME_SERIES);\n    }\n    if (this.labelKeysLength !== labelValues.length) {\n      throw new Error(DerivedGauge.ERROR_MESSAGE_INVALID_SIZE);\n    }\n\n    if (objOrFn instanceof Function) {\n      this.extractor = objOrFn;\n    } else if (util.isToValueInterface(objOrFn)) {\n      this.extractor = () => objOrFn.getValue();\n    } else if (util.isLengthAttributeInterface(objOrFn)) {\n      this.extractor = () => objOrFn.length;\n    } else if (util.isLengthMethodInterface(objOrFn)) {\n      this.extractor = () => objOrFn.length();\n    } else if (util.isSizeAttributeInterface(objOrFn)) {\n      this.extractor = () => objOrFn.size;\n    } else if (util.isSizeMethodInterface(objOrFn)) {\n      this.extractor = () => objOrFn.size();\n    } else {\n      throw new Error(DerivedGauge.ERROR_MESSAGE_UNKNOWN_INTERFACE);\n    }\n\n    this.registeredPoints.set(hash, { labelValues, extractor: this.extractor });\n  }\n\n  /**\n   * Removes the TimeSeries from the gauge metric, if it is present. i.e.\n   * references to previous Point objects are invalid (not part of the\n   * metric).\n   *\n   * @param labelValues The list of label values.\n   */\n  removeTimeSeries(labelValues: LabelValue[]): void {\n    validateNotNull(labelValues, DerivedGauge.LABEL_VALUES);\n    this.registeredPoints.delete(util.hashLabelValues(labelValues));\n  }\n\n  /**\n   * Removes all TimeSeries from the gauge metric. i.e. references to all\n   * previous Point objects are invalid (not part of the metric).\n   */\n  clear(): void {\n    this.registeredPoints.clear();\n  }\n\n  /**\n   * Provides a Metric with one or more TimeSeries.\n   *\n   * @returns The Metric, or null if TimeSeries is not present in Metric.\n   */\n  getMetric(): Metric | null {\n    if (this.registeredPoints.size === 0) {\n      return null;\n    }\n    const timestamp: Timestamp = getTimestampWithProcessHRTime();\n    return {\n      descriptor: this.metricDescriptor,\n      timeseries: Array.from(\n        this.registeredPoints,\n        ([_, gaugeEntry]): TimeSeries => ({\n          labelValues: [...gaugeEntry.labelValues, ...this.constantLabelValues],\n          points: [{ value: gaugeEntry.extractor(), timestamp }],\n        })\n      ),\n    };\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"bf5ea5bfc00267d97e29e748a57a5381b6876c30","contentHash":"08363e473b5e27295abdf68fe844c7a07ff8a0b978432f14e433d11c00005266"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/gauges/gauge.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/gauges/gauge.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":44}},"2":{"start":{"line":19,"column":20},"end":{"line":19,"column":53}},"3":{"start":{"line":20,"column":22},"end":{"line":20,"column":57}},"4":{"start":{"line":21,"column":16},"end":{"line":21,"column":35}},"5":{"start":{"line":37,"column":8},"end":{"line":37,"column":35}},"6":{"start":{"line":38,"column":8},"end":{"line":38,"column":45}},"7":{"start":{"line":39,"column":8},"end":{"line":39,"column":42}},"8":{"start":{"line":40,"column":8},"end":{"line":40,"column":48}},"9":{"start":{"line":41,"column":36},"end":{"line":41,"column":76}},"10":{"start":{"line":42,"column":8},"end":{"line":42,"column":64}},"11":{"start":{"line":43,"column":8},"end":{"line":49,"column":10}},"12":{"start":{"line":50,"column":8},"end":{"line":50,"column":88}},"13":{"start":{"line":64,"column":8},"end":{"line":64,"column":134}},"14":{"start":{"line":65,"column":8},"end":{"line":65,"column":52}},"15":{"start":{"line":74,"column":8},"end":{"line":74,"column":64}},"16":{"start":{"line":84,"column":8},"end":{"line":84,"column":71}},"17":{"start":{"line":85,"column":8},"end":{"line":85,"column":75}},"18":{"start":{"line":92,"column":8},"end":{"line":92,"column":38}},"19":{"start":{"line":103,"column":21},"end":{"line":103,"column":57}},"20":{"start":{"line":105,"column":8},"end":{"line":107,"column":9}},"21":{"start":{"line":106,"column":12},"end":{"line":106,"column":51}},"22":{"start":{"line":108,"column":8},"end":{"line":110,"column":9}},"23":{"start":{"line":109,"column":12},"end":{"line":109,"column":62}},"24":{"start":{"line":111,"column":22},"end":{"line":111,"column":83}},"25":{"start":{"line":112,"column":8},"end":{"line":112,"column":47}},"26":{"start":{"line":113,"column":8},"end":{"line":113,"column":21}},"27":{"start":{"line":121,"column":8},"end":{"line":123,"column":9}},"28":{"start":{"line":122,"column":12},"end":{"line":122,"column":24}},"29":{"start":{"line":124,"column":26},"end":{"line":124,"column":69}},"30":{"start":{"line":125,"column":8},"end":{"line":128,"column":10}},"31":{"start":{"line":127,"column":74},"end":{"line":127,"column":104}},"32":{"start":{"line":131,"column":0},"end":{"line":131,"column":22}},"33":{"start":{"line":132,"column":0},"end":{"line":132,"column":33}},"34":{"start":{"line":133,"column":0},"end":{"line":133,"column":35}},"35":{"start":{"line":134,"column":0},"end":{"line":134,"column":86}},"36":{"start":{"line":140,"column":8},"end":{"line":140,"column":23}},"37":{"start":{"line":141,"column":8},"end":{"line":141,"column":39}},"38":{"start":{"line":149,"column":8},"end":{"line":149,"column":38}},"39":{"start":{"line":157,"column":8},"end":{"line":157,"column":25}},"40":{"start":{"line":166,"column":8},"end":{"line":169,"column":10}},"41":{"start":{"line":172,"column":0},"end":{"line":172,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":36,"column":4},"end":{"line":36,"column":5}},"loc":{"start":{"line":36,"column":74},"end":{"line":51,"column":5}},"line":36},"1":{"name":"(anonymous_1)","decl":{"start":{"line":63,"column":4},"end":{"line":63,"column":5}},"loc":{"start":{"line":63,"column":39},"end":{"line":66,"column":5}},"line":63},"2":{"name":"(anonymous_2)","decl":{"start":{"line":73,"column":4},"end":{"line":73,"column":5}},"loc":{"start":{"line":73,"column":27},"end":{"line":75,"column":5}},"line":73},"3":{"name":"(anonymous_3)","decl":{"start":{"line":83,"column":4},"end":{"line":83,"column":5}},"loc":{"start":{"line":83,"column":34},"end":{"line":86,"column":5}},"line":83},"4":{"name":"(anonymous_4)","decl":{"start":{"line":91,"column":4},"end":{"line":91,"column":5}},"loc":{"start":{"line":91,"column":12},"end":{"line":93,"column":5}},"line":91},"5":{"name":"(anonymous_5)","decl":{"start":{"line":102,"column":4},"end":{"line":102,"column":5}},"loc":{"start":{"line":102,"column":36},"end":{"line":114,"column":5}},"line":102},"6":{"name":"(anonymous_6)","decl":{"start":{"line":120,"column":4},"end":{"line":120,"column":5}},"loc":{"start":{"line":120,"column":16},"end":{"line":129,"column":5}},"line":120},"7":{"name":"(anonymous_7)","decl":{"start":{"line":127,"column":58},"end":{"line":127,"column":59}},"loc":{"start":{"line":127,"column":74},"end":{"line":127,"column":104}},"line":127},"8":{"name":"(anonymous_8)","decl":{"start":{"line":139,"column":4},"end":{"line":139,"column":5}},"loc":{"start":{"line":139,"column":29},"end":{"line":142,"column":5}},"line":139},"9":{"name":"(anonymous_9)","decl":{"start":{"line":148,"column":4},"end":{"line":148,"column":5}},"loc":{"start":{"line":148,"column":13},"end":{"line":150,"column":5}},"line":148},"10":{"name":"(anonymous_10)","decl":{"start":{"line":156,"column":4},"end":{"line":156,"column":5}},"loc":{"start":{"line":156,"column":13},"end":{"line":158,"column":5}},"line":156},"11":{"name":"(anonymous_11)","decl":{"start":{"line":165,"column":4},"end":{"line":165,"column":5}},"loc":{"start":{"line":165,"column":29},"end":{"line":170,"column":5}},"line":165}},"branchMap":{"0":{"loc":{"start":{"line":105,"column":8},"end":{"line":107,"column":9}},"type":"if","locations":[{"start":{"line":105,"column":8},"end":{"line":107,"column":9}},{"start":{"line":105,"column":8},"end":{"line":107,"column":9}}],"line":105},"1":{"loc":{"start":{"line":108,"column":8},"end":{"line":110,"column":9}},"type":"if","locations":[{"start":{"line":108,"column":8},"end":{"line":110,"column":9}},{"start":{"line":108,"column":8},"end":{"line":110,"column":9}}],"line":108},"2":{"loc":{"start":{"line":121,"column":8},"end":{"line":123,"column":9}},"type":"if","locations":[{"start":{"line":121,"column":8},"end":{"line":123,"column":9}},{"start":{"line":121,"column":8},"end":{"line":123,"column":9}}],"line":121}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":30,"6":30,"7":30,"8":30,"9":30,"10":30,"11":30,"12":30,"13":24,"14":24,"15":10,"16":2,"17":2,"18":2,"19":34,"20":34,"21":6,"22":28,"23":2,"24":26,"25":26,"26":26,"27":32,"28":4,"29":28,"30":28,"31":32,"32":1,"33":1,"34":1,"35":1,"36":26,"37":26,"38":31,"39":3,"40":32,"41":1},"f":{"0":30,"1":24,"2":10,"3":2,"4":2,"5":34,"6":32,"7":32,"8":26,"9":31,"10":3,"11":32},"b":{"0":[6,28],"1":[2,26],"2":[4,28]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/gauges/gauge.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/gauges/gauge.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getTimestampWithProcessHRTime } from '../../common/time-util';\nimport {\n  validateArrayElementsNotNull,\n  validateNotNull,\n} from '../../common/validations';\nimport {\n  LabelKey,\n  LabelValue,\n  Metric,\n  MetricDescriptor,\n  MetricDescriptorType,\n  TimeSeries,\n  Timestamp,\n} from '../export/types';\nimport { Meter } from '../types';\nimport { hashLabelValues, initializeDefaultLabels } from '../utils';\nimport * as types from './types';\n\n/**\n * Gauge metric\n */\nexport class Gauge implements Meter {\n  private readonly metricDescriptor: MetricDescriptor;\n  private labelKeysLength: number;\n  private defaultLabelValues: LabelValue[];\n  private registeredPoints: Map<string, types.Point> = new Map();\n  private readonly constantLabelValues: LabelValue[];\n\n  private static readonly LABEL_VALUE = 'labelValue';\n  private static readonly LABEL_VALUES = 'labelValues';\n  private static readonly ERROR_MESSAGE_INVALID_SIZE =\n    \"Label Keys and Label Values don't have same size\";\n\n  /**\n   * Constructs a new Gauge instance.\n   *\n   * @param name The name of the metric.\n   * @param description The description of the metric.\n   * @param unit The unit of the metric.\n   * @param type The type of metric.\n   * @param labelKeys The list of the label keys.\n   * @param constantLabels The map of constant labels for the Metric.\n   */\n  constructor(\n    name: string,\n    description: string,\n    unit: string,\n    type: MetricDescriptorType,\n    readonly labelKeys: LabelKey[],\n    readonly constantLabels: Map<LabelKey, LabelValue>\n  ) {\n    this.labelKeysLength = labelKeys.length;\n    const keysAndConstantKeys = [...labelKeys, ...constantLabels.keys()];\n    this.constantLabelValues = [...constantLabels.values()];\n\n    this.metricDescriptor = {\n      name,\n      description,\n      unit,\n      type,\n      labelKeys: keysAndConstantKeys,\n    };\n    this.defaultLabelValues = initializeDefaultLabels(this.labelKeysLength);\n  }\n\n  /**\n   * Creates a TimeSeries and returns a Point if the specified\n   * labelValues is not already associated with this gauge, else returns an\n   * existing Point.\n   *\n   * It is recommended to keep a reference to the Point instead of always\n   * calling this method for manual operations.\n   *\n   * @param labelValues The list of the label values.\n   * @returns The value of single gauge.\n   */\n  getOrCreateTimeSeries(labelValues: LabelValue[]): types.Point {\n    validateArrayElementsNotNull(\n      validateNotNull(labelValues, Gauge.LABEL_VALUES),\n      Gauge.LABEL_VALUE\n    );\n    return this.registerTimeSeries(labelValues);\n  }\n\n  /**\n   * Returns a Point for a gauge with all labels not set, or default\n   * labels.\n   *\n   * @returns The value of single gauge.\n   */\n  getDefaultTimeSeries(): types.Point {\n    return this.registerTimeSeries(this.defaultLabelValues);\n  }\n\n  /**\n   * Removes the TimeSeries from the gauge metric, if it is present. i.e.\n   * references to previous Point objects are invalid (not part of the\n   * metric).\n   *\n   * @param labelValues The list of label values.\n   */\n  removeTimeSeries(labelValues: LabelValue[]): void {\n    validateNotNull(labelValues, Gauge.LABEL_VALUES);\n    this.registeredPoints.delete(hashLabelValues(labelValues));\n  }\n\n  /**\n   * Removes all TimeSeries from the gauge metric. i.e. references to all\n   * previous Point objects are invalid (not part of the metric).\n   */\n  clear(): void {\n    this.registeredPoints.clear();\n  }\n\n  /**\n   * Registers a TimeSeries and returns a Point if the specified\n   * labelValues is not already associated with this gauge, else returns an\n   * existing Point.\n   *\n   * @param labelValues The list of the label values.\n   * @returns The value of single gauge.\n   */\n  private registerTimeSeries(labelValues: LabelValue[]): types.Point {\n    const hash = hashLabelValues(labelValues);\n    // return if the specified labelValues is already associated with the point.\n    if (this.registeredPoints.has(hash)) {\n      return this.registeredPoints.get(hash)!;\n    }\n    if (this.labelKeysLength !== labelValues.length) {\n      throw new Error(Gauge.ERROR_MESSAGE_INVALID_SIZE);\n    }\n\n    const point = new PointEntry([...labelValues, ...this.constantLabelValues]);\n    this.registeredPoints.set(hash, point);\n    return point;\n  }\n\n  /**\n   * Provides a Metric with one or more TimeSeries.\n   *\n   * @returns The Metric, or null if TimeSeries is not present in Metric.\n   */\n  getMetric(): Metric | null {\n    if (this.registeredPoints.size === 0) {\n      return null;\n    }\n    const timestamp: Timestamp = getTimestampWithProcessHRTime();\n    return {\n      descriptor: this.metricDescriptor,\n      timeseries: Array.from(this.registeredPoints, ([_, point]) =>\n        point.getTimeSeries(timestamp)\n      ),\n    };\n  }\n}\n\n/**\n * The value of a single point in the Gauge.TimeSeries.\n */\nexport class PointEntry implements types.Point {\n  private readonly labelValues: LabelValue[];\n  private value = 0;\n\n  constructor(labelValues: LabelValue[]) {\n    this.labelValues = labelValues;\n  }\n\n  /**\n   * Adds the given value to the current value. The values can be negative.\n   *\n   * @param amt The value to add.\n   */\n  add(amt: number): void {\n    this.value = this.value + amt;\n  }\n\n  /**\n   * Sets the given value.\n   *\n   * @param val The new value.\n   */\n  set(val: number): void {\n    this.value = val;\n  }\n\n  /**\n   * Returns the TimeSeries with one or more Point.\n   *\n   * @param timestamp The time at which the gauge is recorded.\n   * @returns The TimeSeries.\n   */\n  getTimeSeries(timestamp: Timestamp): TimeSeries {\n    return {\n      labelValues: this.labelValues,\n      points: [{ value: this.value, timestamp }],\n    };\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"f72bc7049c91fb12e2b1fe71d97235aebf4d18b8","contentHash":"066c734e1b6e76671df41f572d8373169551f9ddafb94fbe69beb55285105105"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/stats.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/stats.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":27}},"2":{"start":{"line":19,"column":22},"end":{"line":19,"column":57}},"3":{"start":{"line":20,"column":12},"end":{"line":20,"column":38}},"4":{"start":{"line":21,"column":18},"end":{"line":21,"column":47}},"5":{"start":{"line":22,"column":15},"end":{"line":22,"column":40}},"6":{"start":{"line":23,"column":26},"end":{"line":23,"column":54}},"7":{"start":{"line":24,"column":16},"end":{"line":24,"column":34}},"8":{"start":{"line":25,"column":15},"end":{"line":25,"column":32}},"9":{"start":{"line":33,"column":8},"end":{"line":33,"column":38}},"10":{"start":{"line":35,"column":8},"end":{"line":35,"column":34}},"11":{"start":{"line":36,"column":8},"end":{"line":36,"column":38}},"12":{"start":{"line":37,"column":8},"end":{"line":37,"column":49}},"13":{"start":{"line":40,"column":31},"end":{"line":40,"column":81}},"14":{"start":{"line":41,"column":8},"end":{"line":41,"column":73}},"15":{"start":{"line":45,"column":8},"end":{"line":45,"column":79}},"16":{"start":{"line":52,"column":8},"end":{"line":57,"column":9}},"17":{"start":{"line":53,"column":12},"end":{"line":53,"column":63}},"18":{"start":{"line":56,"column":12},"end":{"line":56,"column":61}},"19":{"start":{"line":58,"column":8},"end":{"line":58,"column":31}},"20":{"start":{"line":60,"column":8},"end":{"line":63,"column":9}},"21":{"start":{"line":62,"column":12},"end":{"line":62,"column":42}},"22":{"start":{"line":76,"column":21},"end":{"line":76,"column":108}},"23":{"start":{"line":77,"column":8},"end":{"line":77,"column":20}},"24":{"start":{"line":84,"column":8},"end":{"line":84,"column":48}},"25":{"start":{"line":85,"column":8},"end":{"line":90,"column":9}},"26":{"start":{"line":86,"column":12},"end":{"line":89,"column":13}},"27":{"start":{"line":88,"column":16},"end":{"line":88,"column":46}},"28":{"start":{"line":91,"column":8},"end":{"line":91,"column":25}},"29":{"start":{"line":99,"column":8},"end":{"line":102,"column":9}},"30":{"start":{"line":100,"column":12},"end":{"line":100,"column":120}},"31":{"start":{"line":100,"column":90},"end":{"line":100,"column":118}},"32":{"start":{"line":101,"column":12},"end":{"line":101,"column":28}},"33":{"start":{"line":111,"column":8},"end":{"line":111,"column":77}},"34":{"start":{"line":121,"column":8},"end":{"line":121,"column":76}},"35":{"start":{"line":129,"column":8},"end":{"line":129,"column":71}},"36":{"start":{"line":129,"column":48},"end":{"line":129,"column":69}},"37":{"start":{"line":136,"column":24},"end":{"line":136,"column":26}},"38":{"start":{"line":137,"column":8},"end":{"line":141,"column":9}},"39":{"start":{"line":138,"column":12},"end":{"line":140,"column":13}},"40":{"start":{"line":139,"column":16},"end":{"line":139,"column":61}},"41":{"start":{"line":142,"column":8},"end":{"line":142,"column":23}},"42":{"start":{"line":155,"column":8},"end":{"line":159,"column":9}},"43":{"start":{"line":156,"column":12},"end":{"line":157,"column":34}},"44":{"start":{"line":158,"column":12},"end":{"line":158,"column":19}},"45":{"start":{"line":160,"column":8},"end":{"line":163,"column":9}},"46":{"start":{"line":162,"column":12},"end":{"line":162,"column":47}},"47":{"start":{"line":164,"column":8},"end":{"line":178,"column":9}},"48":{"start":{"line":165,"column":26},"end":{"line":165,"column":72}},"49":{"start":{"line":166,"column":12},"end":{"line":168,"column":13}},"50":{"start":{"line":167,"column":16},"end":{"line":167,"column":22}},"51":{"start":{"line":170,"column":12},"end":{"line":172,"column":13}},"52":{"start":{"line":171,"column":16},"end":{"line":171,"column":71}},"53":{"start":{"line":174,"column":12},"end":{"line":177,"column":13}},"54":{"start":{"line":176,"column":16},"end":{"line":176,"column":65}},"55":{"start":{"line":184,"column":8},"end":{"line":184,"column":34}},"56":{"start":{"line":185,"column":8},"end":{"line":185,"column":38}},"57":{"start":{"line":195,"column":8},"end":{"line":195,"column":68}},"58":{"start":{"line":199,"column":8},"end":{"line":199,"column":64}},"59":{"start":{"line":202,"column":0},"end":{"line":202,"column":30}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":31,"column":4},"end":{"line":31,"column":5}},"loc":{"start":{"line":31,"column":40},"end":{"line":42,"column":5}},"line":31},"1":{"name":"(anonymous_1)","decl":{"start":{"line":44,"column":4},"end":{"line":44,"column":5}},"loc":{"start":{"line":44,"column":26},"end":{"line":46,"column":5}},"line":44},"2":{"name":"(anonymous_2)","decl":{"start":{"line":51,"column":4},"end":{"line":51,"column":5}},"loc":{"start":{"line":51,"column":23},"end":{"line":64,"column":5}},"line":51},"3":{"name":"(anonymous_3)","decl":{"start":{"line":75,"column":4},"end":{"line":75,"column":5}},"loc":{"start":{"line":75,"column":83},"end":{"line":78,"column":5}},"line":75},"4":{"name":"(anonymous_4)","decl":{"start":{"line":83,"column":4},"end":{"line":83,"column":5}},"loc":{"start":{"line":83,"column":31},"end":{"line":92,"column":5}},"line":83},"5":{"name":"(anonymous_5)","decl":{"start":{"line":98,"column":4},"end":{"line":98,"column":5}},"loc":{"start":{"line":98,"column":33},"end":{"line":103,"column":5}},"line":98},"6":{"name":"(anonymous_6)","decl":{"start":{"line":100,"column":71},"end":{"line":100,"column":72}},"loc":{"start":{"line":100,"column":90},"end":{"line":100,"column":118}},"line":100},"7":{"name":"(anonymous_7)","decl":{"start":{"line":110,"column":4},"end":{"line":110,"column":5}},"loc":{"start":{"line":110,"column":49},"end":{"line":112,"column":5}},"line":110},"8":{"name":"(anonymous_8)","decl":{"start":{"line":120,"column":4},"end":{"line":120,"column":5}},"loc":{"start":{"line":120,"column":48},"end":{"line":122,"column":5}},"line":120},"9":{"name":"(anonymous_9)","decl":{"start":{"line":128,"column":4},"end":{"line":128,"column":5}},"loc":{"start":{"line":128,"column":35},"end":{"line":130,"column":5}},"line":128},"10":{"name":"(anonymous_10)","decl":{"start":{"line":129,"column":33},"end":{"line":129,"column":34}},"loc":{"start":{"line":129,"column":48},"end":{"line":129,"column":69}},"line":129},"11":{"name":"(anonymous_11)","decl":{"start":{"line":135,"column":4},"end":{"line":135,"column":5}},"loc":{"start":{"line":135,"column":17},"end":{"line":143,"column":5}},"line":135},"12":{"name":"(anonymous_12)","decl":{"start":{"line":154,"column":4},"end":{"line":154,"column":5}},"loc":{"start":{"line":154,"column":44},"end":{"line":179,"column":5}},"line":154},"13":{"name":"(anonymous_13)","decl":{"start":{"line":183,"column":4},"end":{"line":183,"column":5}},"loc":{"start":{"line":183,"column":12},"end":{"line":186,"column":5}},"line":183},"14":{"name":"(anonymous_14)","decl":{"start":{"line":194,"column":4},"end":{"line":194,"column":5}},"loc":{"start":{"line":194,"column":29},"end":{"line":196,"column":5}},"line":194},"15":{"name":"(anonymous_15)","decl":{"start":{"line":198,"column":4},"end":{"line":198,"column":5}},"loc":{"start":{"line":198,"column":27},"end":{"line":200,"column":5}},"line":198}},"branchMap":{"0":{"loc":{"start":{"line":31,"column":16},"end":{"line":31,"column":38}},"type":"default-arg","locations":[{"start":{"line":31,"column":25},"end":{"line":31,"column":38}}],"line":31},"1":{"loc":{"start":{"line":45,"column":15},"end":{"line":45,"column":78}},"type":"binary-expr","locations":[{"start":{"line":45,"column":15},"end":{"line":45,"column":37}},{"start":{"line":45,"column":42},"end":{"line":45,"column":77}}],"line":45},"2":{"loc":{"start":{"line":52,"column":8},"end":{"line":57,"column":9}},"type":"if","locations":[{"start":{"line":52,"column":8},"end":{"line":57,"column":9}},{"start":{"line":52,"column":8},"end":{"line":57,"column":9}}],"line":52},"3":{"loc":{"start":{"line":99,"column":8},"end":{"line":102,"column":9}},"type":"if","locations":[{"start":{"line":99,"column":8},"end":{"line":102,"column":9}},{"start":{"line":99,"column":8},"end":{"line":102,"column":9}}],"line":99},"4":{"loc":{"start":{"line":155,"column":8},"end":{"line":159,"column":9}},"type":"if","locations":[{"start":{"line":155,"column":8},"end":{"line":159,"column":9}},{"start":{"line":155,"column":8},"end":{"line":159,"column":9}}],"line":155},"5":{"loc":{"start":{"line":160,"column":8},"end":{"line":163,"column":9}},"type":"if","locations":[{"start":{"line":160,"column":8},"end":{"line":163,"column":9}},{"start":{"line":160,"column":8},"end":{"line":163,"column":9}}],"line":160},"6":{"loc":{"start":{"line":166,"column":12},"end":{"line":168,"column":13}},"type":"if","locations":[{"start":{"line":166,"column":12},"end":{"line":168,"column":13}},{"start":{"line":166,"column":12},"end":{"line":168,"column":13}}],"line":166}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":17,"17":3,"18":14,"19":17,"20":17,"21":8,"22":16,"23":15,"24":12,"25":12,"26":3,"27":3,"28":12,"29":1,"30":1,"31":1,"32":1,"33":2,"34":5,"35":7,"36":9,"37":5,"38":5,"39":5,"40":12,"41":5,"42":7,"43":2,"44":2,"45":5,"46":3,"47":5,"48":6,"49":6,"50":0,"51":6,"52":6,"53":6,"54":8,"55":24,"56":24,"57":2,"58":3,"59":1},"f":{"0":1,"1":1,"2":17,"3":16,"4":12,"5":1,"6":1,"7":2,"8":5,"9":7,"10":9,"11":5,"12":7,"13":24,"14":2,"15":3},"b":{"0":[1],"1":[1,1],"2":[3,14],"3":[1,0],"4":[2,5],"5":[3,2],"6":[0,6]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/stats.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/stats.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as defaultLogger from '../common/console-logger';\nimport * as loggerTypes from '../common/types';\nimport { StatsEventListener } from '../exporters/types';\nimport * as cls from '../internal/cls';\nimport { Metric } from '../metrics/export/types';\nimport { Metrics } from '../metrics/metrics';\nimport { TagMap } from '../tags/tag-map';\nimport * as tagger from '../tags/tagger';\nimport { TagKey } from '../tags/types';\nimport { MetricProducerForStats } from './metric-producer';\nimport {\n  AggregationType,\n  Measure,\n  Measurement,\n  MeasureType,\n  MeasureUnit,\n  Stats,\n  View,\n} from './types';\nimport { BaseView } from './view';\n\nexport class BaseStats implements Stats {\n  /** A list of Stats exporters */\n  private statsEventListeners: StatsEventListener[] = [];\n  /** A map of Measures (name) to their corresponding Views */\n  private registeredViews: { [key: string]: View[] } = {};\n  /** An object to log information to */\n  private logger: loggerTypes.Logger;\n  /** Singleton instance */\n  private static singletonInstance: BaseStats;\n  /** Manage context automatic propagation */\n  private contextManager: cls.Namespace;\n\n  /**\n   * Creates stats\n   * @param logger\n   */\n  constructor(logger = defaultLogger) {\n    this.logger = logger.logger();\n    this.contextManager = cls.getNamespace();\n\n    // Create a new MetricProducerForStats and register it to\n    // MetricProducerManager when Stats is initialized.\n    const metricProducer = new MetricProducerForStats(this);\n    Metrics.getMetricProducerManager().add(metricProducer);\n  }\n\n  /** Gets the stats instance. */\n  static get instance(): Stats {\n    return this.singletonInstance || (this.singletonInstance = new this());\n  }\n\n  /**\n   * Registers a view to listen to new measurements in its measure.\n   * @param view The view to be registered\n   */\n  registerView(view: View): void {\n    if (this.registeredViews[view.measure.name]) {\n      this.registeredViews[view.measure.name].push(view);\n    } else {\n      this.registeredViews[view.measure.name] = [view];\n    }\n\n    view.registered = true;\n\n    // Notifies all exporters\n    for (const exporter of this.statsEventListeners) {\n      // tslint:disable-next-line:deprecation\n      exporter.onRegisterView(view);\n    }\n  }\n\n  /**\n   * Creates a view.\n   * @param name The view name\n   * @param measure The view measure\n   * @param aggregation The view aggregation type\n   * @param tagKeys The view columns (tag keys)\n   * @param description The view description\n   * @param bucketBoundaries An optional The view bucket boundaries for a\n   *     distribution aggregation type\n   */\n  createView(\n    name: string,\n    measure: Measure,\n    aggregation: AggregationType,\n    tagKeys: TagKey[],\n    description: string,\n    bucketBoundaries?: number[]\n  ): View {\n    const view = new BaseView(\n      name,\n      measure,\n      aggregation,\n      tagKeys,\n      description,\n      bucketBoundaries\n    );\n    return view;\n  }\n\n  /**\n   * Registers an exporter to send stats data to a service.\n   * @param exporter An stats exporter\n   */\n  registerExporter(exporter: StatsEventListener): void {\n    this.statsEventListeners.push(exporter);\n\n    for (const measureName of Object.keys(this.registeredViews)) {\n      for (const view of this.registeredViews[measureName]) {\n        // tslint:disable-next-line:deprecation\n        exporter.onRegisterView(view);\n      }\n    }\n    exporter.start();\n  }\n\n  /**\n   * Unregisters an exporter. It should be called whenever the exporter is not\n   * needed anymore.\n   * @param exporter An stats exporter\n   */\n  unregisterExporter(exporter: StatsEventListener): void {\n    if (exporter) {\n      this.statsEventListeners = this.statsEventListeners.filter(\n        currentExporter => currentExporter !== exporter\n      );\n      exporter.stop();\n    }\n  }\n\n  /**\n   * Creates a measure of type Double.\n   * @param name The measure name\n   * @param unit The measure unit\n   * @param description An optional measure description\n   */\n  createMeasureDouble(\n    name: string,\n    unit: MeasureUnit,\n    description?: string\n  ): Measure {\n    return { name, unit, type: MeasureType.DOUBLE, description };\n  }\n\n  /**\n   * Creates a measure of type Int64. Values must be integers up to\n   * Number.MAX_SAFE_INTERGER.\n   * @param name The measure name\n   * @param unit The measure unit\n   * @param description An optional measure description\n   */\n  createMeasureInt64(\n    name: string,\n    unit: MeasureUnit,\n    description?: string\n  ): Measure {\n    return { name, unit, type: MeasureType.INT64, description };\n  }\n\n  /**\n   * Verifies whether all measurements has positive value\n   * @param measurements A list of measurements\n   * @returns Whether values is positive\n   */\n  private hasNegativeValue(measurements: Measurement[]): boolean {\n    return measurements.some(measurement => measurement.value < 0);\n  }\n\n  /**\n   * Gets a collection of produced Metric`s to be exported.\n   * @returns The List of metrics.\n   */\n  getMetrics(): Metric[] {\n    const metrics: Metric[] = [];\n\n    for (const measureName of Object.keys(this.registeredViews)) {\n      for (const view of this.registeredViews[measureName]) {\n        metrics.push(view.getMetric(view.startTime));\n      }\n    }\n\n    return metrics;\n  }\n\n  /**\n   * Updates all views with the new measurements.\n   * @param measurements A list of measurements to record\n   * @param tags optional The tags to which the value is applied.\n   *     tags could either be explicitly passed to the method, or implicitly\n   *     read from current execution context.\n   * @param attachments optional The contextual information associated with an\n   *     example value. THe contextual information is represented as key - value\n   *     string pairs.\n   */\n  record(\n    measurements: Measurement[],\n    tags?: TagMap,\n    attachments?: { [key: string]: string }\n  ): void {\n    if (this.hasNegativeValue(measurements)) {\n      this.logger.warn(`Dropping measurments ${measurements}, value to record\n          must be non-negative.`);\n      return;\n    }\n\n    if (!tags) {\n      // Record against implicit (current) context\n      tags = this.getCurrentTagContext();\n    }\n\n    for (const measurement of measurements) {\n      const views = this.registeredViews[measurement.measure.name];\n      if (!views) {\n        break;\n      }\n      // Updates all views\n      for (const view of views) {\n        view.recordMeasurement(measurement, tags, attachments);\n      }\n\n      // Notifies all exporters\n      for (const exporter of this.statsEventListeners) {\n        // tslint:disable-next-line:deprecation\n        exporter.onRecord(views, measurement, tags.tags);\n      }\n    }\n  }\n\n  /**\n   * Remove all registered Views and exporters from the stats.\n   */\n  clear(): void {\n    this.registeredViews = {};\n    this.statsEventListeners = [];\n  }\n\n  /**\n   * Enters the scope of code where the given `TagMap` is in the current context\n   * (replacing the previous `TagMap`).\n   * @param tags The TagMap to be set to the current context.\n   * @param fn Callback function.\n   * @returns The callback return.\n   */\n  withTagContext<T>(tags: TagMap, fn: cls.Func<T>): T {\n    return tagger.withTagContext<T>(this.contextManager, tags, fn);\n  }\n\n  /** Gets the current tag context. */\n  getCurrentTagContext(): TagMap {\n    return tagger.getCurrentTagContext(this.contextManager);\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"08cda5c5585119d2fbb9fec7d56daac1b03533d4","contentHash":"9e3aef9eae3987ad08aa4ef12b781158aa8c143738d936da27fdc4386477bf97"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/metric-producer.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/metric-producer.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":40}},"2":{"start":{"line":19,"column":31},"end":{"line":19,"column":80}},"3":{"start":{"line":29,"column":8},"end":{"line":29,"column":16}},"4":{"start":{"line":30,"column":8},"end":{"line":30,"column":41}},"5":{"start":{"line":37,"column":8},"end":{"line":37,"column":46}},"6":{"start":{"line":40,"column":0},"end":{"line":40,"column":56}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":28,"column":4},"end":{"line":28,"column":5}},"loc":{"start":{"line":28,"column":30},"end":{"line":31,"column":5}},"line":28},"1":{"name":"(anonymous_1)","decl":{"start":{"line":36,"column":4},"end":{"line":36,"column":5}},"loc":{"start":{"line":36,"column":17},"end":{"line":38,"column":5}},"line":36}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":2,"4":2,"5":5,"6":1},"f":{"0":2,"1":5},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/metric-producer.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/metric-producer.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,iFAA4E;AAI5E;;;GAGG;AACH,MAAa,sBAAuB,SAAQ,yCAAkB;IAG5D;;OAEG;IACH,YAAY,YAAmB;QAC7B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACnC,CAAC;IAED;;;OAGG;IACH,UAAU;QACR,OAAO,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,CAAC;IACxC,CAAC;CACF;AAlBD,wDAkBC","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BaseMetricProducer } from '../metrics/export/base-metric-producer';\nimport { Metric } from '../metrics/export/types';\nimport { Stats } from './types';\n\n/**\n * A MetricProducer producer that can be registered for exporting using\n * MetricProducerManager.\n */\nexport class MetricProducerForStats extends BaseMetricProducer {\n  private statsManager: Stats;\n\n  /**\n   * @param statsManager The stats\n   */\n  constructor(statsManager: Stats) {\n    super();\n    this.statsManager = statsManager;\n  }\n\n  /**\n   * Gets a collection of produced Metric`s to be exported.\n   * @returns The List of metrics\n   */\n  getMetrics(): Metric[] {\n    return this.statsManager.getMetrics();\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"347c8b372e9479a345d3aca184a094f574ceacb6","contentHash":"0801fd2991476992bf646bfdbe9177c09c78aed2f0e23c1faf88386cb6022021"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-console-exporter.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-console-exporter.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":15},"end":{"line":18,"column":32}},"2":{"start":{"line":19,"column":14},"end":{"line":19,"column":31}},"3":{"start":{"line":20,"column":27},"end":{"line":20,"column":71}},"4":{"start":{"line":21,"column":20},"end":{"line":21,"column":59}},"5":{"start":{"line":22,"column":17},"end":{"line":22,"column":53}},"6":{"start":{"line":23,"column":15},"end":{"line":23,"column":69}},"7":{"start":{"line":24,"column":28},"end":{"line":27,"column":1}},"8":{"start":{"line":28,"column":13},"end":{"line":28,"column":25}},"9":{"start":{"line":29,"column":13},"end":{"line":29,"column":34}},"10":{"start":{"line":30,"column":16},"end":{"line":30,"column":50}},"11":{"start":{"line":31,"column":21},"end":{"line":31,"column":23}},"12":{"start":{"line":32,"column":0},"end":{"line":51,"column":3}},"13":{"start":{"line":34,"column":4},"end":{"line":41,"column":7}},"14":{"start":{"line":35,"column":8},"end":{"line":40,"column":11}},"15":{"start":{"line":36,"column":29},"end":{"line":36,"column":66}},"16":{"start":{"line":37,"column":29},"end":{"line":37,"column":96}},"17":{"start":{"line":38,"column":12},"end":{"line":38,"column":41}},"18":{"start":{"line":39,"column":12},"end":{"line":39,"column":28}},"19":{"start":{"line":43,"column":4},"end":{"line":50,"column":7}},"20":{"start":{"line":44,"column":8},"end":{"line":49,"column":11}},"21":{"start":{"line":45,"column":29},"end":{"line":45,"column":66}},"22":{"start":{"line":46,"column":29},"end":{"line":46,"column":96}},"23":{"start":{"line":47,"column":26},"end":{"line":47,"column":36}},"24":{"start":{"line":48,"column":12},"end":{"line":48,"column":43}},"25":{"start":{"line":52,"column":0},"end":{"line":96,"column":3}},"26":{"start":{"line":54,"column":4},"end":{"line":73,"column":7}},"27":{"start":{"line":55,"column":8},"end":{"line":72,"column":11}},"28":{"start":{"line":56,"column":30},"end":{"line":56,"column":57}},"29":{"start":{"line":57,"column":31},"end":{"line":57,"column":33}},"30":{"start":{"line":58,"column":12},"end":{"line":60,"column":15}},"31":{"start":{"line":59,"column":16},"end":{"line":59,"column":36}},"32":{"start":{"line":61,"column":29},"end":{"line":61,"column":88}},"33":{"start":{"line":62,"column":30},"end":{"line":62,"column":97}},"34":{"start":{"line":63,"column":12},"end":{"line":63,"column":42}},"35":{"start":{"line":64,"column":12},"end":{"line":64,"column":49}},"36":{"start":{"line":65,"column":30},"end":{"line":65,"column":97}},"37":{"start":{"line":66,"column":12},"end":{"line":66,"column":42}},"38":{"start":{"line":67,"column":12},"end":{"line":71,"column":15}},"39":{"start":{"line":68,"column":16},"end":{"line":68,"column":71}},"40":{"start":{"line":69,"column":16},"end":{"line":69,"column":66}},"41":{"start":{"line":70,"column":16},"end":{"line":70,"column":68}},"42":{"start":{"line":75,"column":4},"end":{"line":95,"column":7}},"43":{"start":{"line":76,"column":8},"end":{"line":94,"column":11}},"44":{"start":{"line":77,"column":30},"end":{"line":77,"column":57}},"45":{"start":{"line":78,"column":31},"end":{"line":78,"column":33}},"46":{"start":{"line":79,"column":12},"end":{"line":81,"column":15}},"47":{"start":{"line":80,"column":16},"end":{"line":80,"column":36}},"48":{"start":{"line":82,"column":29},"end":{"line":82,"column":88}},"49":{"start":{"line":83,"column":29},"end":{"line":83,"column":96}},"50":{"start":{"line":84,"column":12},"end":{"line":84,"column":29}},"51":{"start":{"line":85,"column":12},"end":{"line":85,"column":88}},"52":{"start":{"line":86,"column":26},"end":{"line":86,"column":36}},"53":{"start":{"line":87,"column":12},"end":{"line":93,"column":15}},"54":{"start":{"line":88,"column":16},"end":{"line":88,"column":71}},"55":{"start":{"line":89,"column":16},"end":{"line":89,"column":66}},"56":{"start":{"line":90,"column":16},"end":{"line":90,"column":68}},"57":{"start":{"line":91,"column":16},"end":{"line":91,"column":77}},"58":{"start":{"line":92,"column":16},"end":{"line":92,"column":75}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":32,"column":25},"end":{"line":32,"column":26}},"loc":{"start":{"line":32,"column":31},"end":{"line":51,"column":1}},"line":32},"1":{"name":"(anonymous_1)","decl":{"start":{"line":34,"column":28},"end":{"line":34,"column":29}},"loc":{"start":{"line":34,"column":34},"end":{"line":41,"column":5}},"line":34},"2":{"name":"(anonymous_2)","decl":{"start":{"line":35,"column":32},"end":{"line":35,"column":33}},"loc":{"start":{"line":35,"column":38},"end":{"line":40,"column":9}},"line":35},"3":{"name":"(anonymous_3)","decl":{"start":{"line":43,"column":26},"end":{"line":43,"column":27}},"loc":{"start":{"line":43,"column":32},"end":{"line":50,"column":5}},"line":43},"4":{"name":"(anonymous_4)","decl":{"start":{"line":44,"column":32},"end":{"line":44,"column":33}},"loc":{"start":{"line":44,"column":38},"end":{"line":49,"column":9}},"line":44},"5":{"name":"(anonymous_5)","decl":{"start":{"line":52,"column":31},"end":{"line":52,"column":32}},"loc":{"start":{"line":52,"column":37},"end":{"line":96,"column":1}},"line":52},"6":{"name":"(anonymous_6)","decl":{"start":{"line":54,"column":28},"end":{"line":54,"column":29}},"loc":{"start":{"line":54,"column":34},"end":{"line":73,"column":5}},"line":54},"7":{"name":"(anonymous_7)","decl":{"start":{"line":55,"column":32},"end":{"line":55,"column":33}},"loc":{"start":{"line":55,"column":38},"end":{"line":72,"column":9}},"line":55},"8":{"name":"(anonymous_8)","decl":{"start":{"line":58,"column":22},"end":{"line":58,"column":23}},"loc":{"start":{"line":58,"column":31},"end":{"line":60,"column":13}},"line":58},"9":{"name":"(anonymous_9)","decl":{"start":{"line":67,"column":39},"end":{"line":67,"column":40}},"loc":{"start":{"line":67,"column":51},"end":{"line":71,"column":13}},"line":67},"10":{"name":"(anonymous_10)","decl":{"start":{"line":75,"column":26},"end":{"line":75,"column":27}},"loc":{"start":{"line":75,"column":32},"end":{"line":95,"column":5}},"line":75},"11":{"name":"(anonymous_11)","decl":{"start":{"line":76,"column":52},"end":{"line":76,"column":53}},"loc":{"start":{"line":76,"column":58},"end":{"line":94,"column":9}},"line":76},"12":{"name":"(anonymous_12)","decl":{"start":{"line":79,"column":22},"end":{"line":79,"column":23}},"loc":{"start":{"line":79,"column":31},"end":{"line":81,"column":13}},"line":79},"13":{"name":"(anonymous_13)","decl":{"start":{"line":87,"column":48},"end":{"line":87,"column":49}},"loc":{"start":{"line":87,"column":54},"end":{"line":93,"column":13}},"line":87}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":13,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":2,"40":2,"41":2,"42":1,"43":1,"44":1,"45":1,"46":1,"47":9,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1},"f":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":13,"9":2,"10":1,"11":1,"12":9,"13":1},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-console-exporter.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-console-exporter.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport { SpanKind } from '../src';\nimport {\n  ConsoleExporter,\n  NoopExporter,\n} from '../src/exporters/console-exporter';\nimport { RootSpan } from '../src/trace/model/root-span';\nimport { CoreTracer } from '../src/trace/model/tracer';\n\nconst tracer = new CoreTracer().start({ samplingRate: 1.0 });\nconst defaultBufferConfig = {\n  bufferSize: 1,\n  bufferTimeout: 20000, // time in milliseconds\n};\nconst name = 'MySpanName';\nconst kind = SpanKind.SERVER;\nconst traceId = 'd4cda95b652f4a1592b449d5929fda1b';\nconst parentSpanId = '';\n\ndescribe('NoopExporter', () => {\n  /** Should do nothing when calling onEndSpan() */\n  describe('onEndSpan()', () => {\n    it('should do nothing', () => {\n      const exporter = new NoopExporter();\n      const rootSpan = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      exporter.onEndSpan(rootSpan);\n      assert.ok(true);\n    });\n  });\n\n  /** Should do anything when calling publish() */\n  describe('publish()', () => {\n    it('should do nothing', () => {\n      const exporter = new NoopExporter();\n      const rootSpan = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      const queue: RootSpan[] = [rootSpan];\n\n      return exporter.publish(queue);\n    });\n  });\n});\n\ndescribe('ConsoleLogExporter', () => {\n  /** Should end a span */\n  describe('onEndSpan()', () => {\n    it('should end a span', () => {\n      const intercept = require('intercept-stdout');\n      let capturedText = '';\n      intercept((txt: string) => {\n        capturedText += txt;\n      });\n\n      const exporter = new ConsoleExporter(defaultBufferConfig);\n\n      const rootSpan1 = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      exporter.onEndSpan(rootSpan1);\n      assert.strictEqual(capturedText, '');\n\n      const rootSpan2 = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      exporter.onEndSpan(rootSpan2);\n      [rootSpan1, rootSpan2].map(rootSpan => {\n        assert.ok(capturedText.indexOf(rootSpan.traceId) >= 0);\n        assert.ok(capturedText.indexOf(rootSpan.id) >= 0);\n        assert.ok(capturedText.indexOf(rootSpan.name) >= 0);\n      });\n    });\n  });\n\n  /** Should publish the rootspan in queue */\n  describe('publish()', () => {\n    it('should publish the rootspans in queue', () => {\n      const intercept = require('intercept-stdout');\n      let capturedText = '';\n      intercept((txt: string) => {\n        capturedText += txt;\n      });\n\n      const exporter = new ConsoleExporter(defaultBufferConfig);\n      const rootSpan = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      rootSpan.start();\n      rootSpan.startChildSpan({ name: 'name', kind: SpanKind.UNSPECIFIED });\n      const queue: RootSpan[] = [rootSpan];\n\n      return exporter.publish(queue).then(() => {\n        assert.ok(capturedText.indexOf(rootSpan.traceId) >= 0);\n        assert.ok(capturedText.indexOf(rootSpan.id) >= 0);\n        assert.ok(capturedText.indexOf(rootSpan.name) >= 0);\n        assert.ok(capturedText.indexOf(rootSpan.spans[0].name) >= 0);\n        assert.ok(capturedText.indexOf(rootSpan.spans[0].id) >= 0);\n      });\n    });\n  });\n});\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"ecd37dbad187ac2c926422976941dbf94b86dbce","contentHash":"753d25d10810bf5ed1ed68dee769a7389273e1d5699af9a5570248a972ac360b"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-console-logger.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-console-logger.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":15},"end":{"line":18,"column":32}},"2":{"start":{"line":19,"column":15},"end":{"line":19,"column":54}},"3":{"start":{"line":20,"column":25},"end":{"line":20,"column":64}},"4":{"start":{"line":21,"column":15},"end":{"line":21,"column":59}},"5":{"start":{"line":22,"column":17},"end":{"line":22,"column":19}},"6":{"start":{"line":25,"column":0},"end":{"line":106,"column":3}},"7":{"start":{"line":26,"column":22},"end":{"line":26,"column":49}},"8":{"start":{"line":27,"column":28},"end":{"line":30,"column":6}},"9":{"start":{"line":28,"column":8},"end":{"line":28,"column":25}},"10":{"start":{"line":29,"column":8},"end":{"line":29,"column":19}},"11":{"start":{"line":32,"column":4},"end":{"line":41,"column":7}},"12":{"start":{"line":33,"column":8},"end":{"line":36,"column":11}},"13":{"start":{"line":34,"column":12},"end":{"line":34,"column":28}},"14":{"start":{"line":35,"column":12},"end":{"line":35,"column":92}},"15":{"start":{"line":37,"column":8},"end":{"line":40,"column":11}},"16":{"start":{"line":38,"column":34},"end":{"line":38,"column":50}},"17":{"start":{"line":39,"column":12},"end":{"line":39,"column":63}},"18":{"start":{"line":43,"column":4},"end":{"line":73,"column":7}},"19":{"start":{"line":44,"column":30},"end":{"line":44,"column":54}},"20":{"start":{"line":45,"column":8},"end":{"line":51,"column":11}},"21":{"start":{"line":46,"column":12},"end":{"line":46,"column":28}},"22":{"start":{"line":47,"column":12},"end":{"line":47,"column":53}},"23":{"start":{"line":48,"column":12},"end":{"line":48,"column":30}},"24":{"start":{"line":49,"column":35},"end":{"line":49,"column":62}},"25":{"start":{"line":50,"column":12},"end":{"line":50,"column":43}},"26":{"start":{"line":52,"column":8},"end":{"line":58,"column":11}},"27":{"start":{"line":53,"column":12},"end":{"line":53,"column":28}},"28":{"start":{"line":54,"column":12},"end":{"line":54,"column":51}},"29":{"start":{"line":55,"column":12},"end":{"line":55,"column":30}},"30":{"start":{"line":56,"column":35},"end":{"line":56,"column":61}},"31":{"start":{"line":57,"column":12},"end":{"line":57,"column":51}},"32":{"start":{"line":59,"column":8},"end":{"line":65,"column":11}},"33":{"start":{"line":60,"column":12},"end":{"line":60,"column":28}},"34":{"start":{"line":61,"column":12},"end":{"line":61,"column":51}},"35":{"start":{"line":62,"column":12},"end":{"line":62,"column":30}},"36":{"start":{"line":63,"column":35},"end":{"line":63,"column":61}},"37":{"start":{"line":64,"column":12},"end":{"line":64,"column":51}},"38":{"start":{"line":66,"column":8},"end":{"line":72,"column":11}},"39":{"start":{"line":67,"column":12},"end":{"line":67,"column":28}},"40":{"start":{"line":68,"column":12},"end":{"line":68,"column":53}},"41":{"start":{"line":69,"column":12},"end":{"line":69,"column":30}},"42":{"start":{"line":70,"column":35},"end":{"line":70,"column":62}},"43":{"start":{"line":71,"column":12},"end":{"line":71,"column":51}},"44":{"start":{"line":75,"column":4},"end":{"line":105,"column":7}},"45":{"start":{"line":76,"column":30},"end":{"line":76,"column":46}},"46":{"start":{"line":77,"column":8},"end":{"line":83,"column":11}},"47":{"start":{"line":78,"column":12},"end":{"line":78,"column":28}},"48":{"start":{"line":79,"column":12},"end":{"line":79,"column":53}},"49":{"start":{"line":80,"column":12},"end":{"line":80,"column":30}},"50":{"start":{"line":81,"column":35},"end":{"line":81,"column":62}},"51":{"start":{"line":82,"column":12},"end":{"line":82,"column":51}},"52":{"start":{"line":84,"column":8},"end":{"line":90,"column":11}},"53":{"start":{"line":85,"column":12},"end":{"line":85,"column":28}},"54":{"start":{"line":86,"column":12},"end":{"line":86,"column":51}},"55":{"start":{"line":87,"column":12},"end":{"line":87,"column":30}},"56":{"start":{"line":88,"column":35},"end":{"line":88,"column":61}},"57":{"start":{"line":89,"column":12},"end":{"line":89,"column":51}},"58":{"start":{"line":91,"column":8},"end":{"line":97,"column":11}},"59":{"start":{"line":92,"column":12},"end":{"line":92,"column":28}},"60":{"start":{"line":93,"column":12},"end":{"line":93,"column":51}},"61":{"start":{"line":94,"column":12},"end":{"line":94,"column":30}},"62":{"start":{"line":95,"column":35},"end":{"line":95,"column":61}},"63":{"start":{"line":96,"column":12},"end":{"line":96,"column":51}},"64":{"start":{"line":98,"column":8},"end":{"line":104,"column":11}},"65":{"start":{"line":99,"column":12},"end":{"line":99,"column":28}},"66":{"start":{"line":100,"column":12},"end":{"line":100,"column":53}},"67":{"start":{"line":101,"column":12},"end":{"line":101,"column":30}},"68":{"start":{"line":102,"column":35},"end":{"line":102,"column":62}},"69":{"start":{"line":103,"column":12},"end":{"line":103,"column":51}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":25,"column":26},"end":{"line":25,"column":27}},"loc":{"start":{"line":25,"column":32},"end":{"line":106,"column":1}},"line":25},"1":{"name":"(anonymous_1)","decl":{"start":{"line":27,"column":38},"end":{"line":27,"column":39}},"loc":{"start":{"line":27,"column":47},"end":{"line":30,"column":5}},"line":27},"2":{"name":"(anonymous_2)","decl":{"start":{"line":32,"column":36},"end":{"line":32,"column":37}},"loc":{"start":{"line":32,"column":42},"end":{"line":41,"column":5}},"line":32},"3":{"name":"(anonymous_3)","decl":{"start":{"line":33,"column":45},"end":{"line":33,"column":46}},"loc":{"start":{"line":33,"column":51},"end":{"line":36,"column":9}},"line":33},"4":{"name":"(anonymous_4)","decl":{"start":{"line":37,"column":36},"end":{"line":37,"column":37}},"loc":{"start":{"line":37,"column":42},"end":{"line":40,"column":9}},"line":37},"5":{"name":"(anonymous_5)","decl":{"start":{"line":43,"column":29},"end":{"line":43,"column":30}},"loc":{"start":{"line":43,"column":35},"end":{"line":73,"column":5}},"line":43},"6":{"name":"(anonymous_6)","decl":{"start":{"line":45,"column":31},"end":{"line":45,"column":32}},"loc":{"start":{"line":45,"column":37},"end":{"line":51,"column":9}},"line":45},"7":{"name":"(anonymous_7)","decl":{"start":{"line":52,"column":34},"end":{"line":52,"column":35}},"loc":{"start":{"line":52,"column":40},"end":{"line":58,"column":9}},"line":52},"8":{"name":"(anonymous_8)","decl":{"start":{"line":59,"column":34},"end":{"line":59,"column":35}},"loc":{"start":{"line":59,"column":40},"end":{"line":65,"column":9}},"line":59},"9":{"name":"(anonymous_9)","decl":{"start":{"line":66,"column":35},"end":{"line":66,"column":36}},"loc":{"start":{"line":66,"column":41},"end":{"line":72,"column":9}},"line":66},"10":{"name":"(anonymous_10)","decl":{"start":{"line":75,"column":30},"end":{"line":75,"column":31}},"loc":{"start":{"line":75,"column":36},"end":{"line":105,"column":5}},"line":75},"11":{"name":"(anonymous_11)","decl":{"start":{"line":77,"column":35},"end":{"line":77,"column":36}},"loc":{"start":{"line":77,"column":41},"end":{"line":83,"column":9}},"line":77},"12":{"name":"(anonymous_12)","decl":{"start":{"line":84,"column":34},"end":{"line":84,"column":35}},"loc":{"start":{"line":84,"column":40},"end":{"line":90,"column":9}},"line":84},"13":{"name":"(anonymous_13)","decl":{"start":{"line":91,"column":34},"end":{"line":91,"column":35}},"loc":{"start":{"line":91,"column":40},"end":{"line":97,"column":9}},"line":91},"14":{"name":"(anonymous_14)","decl":{"start":{"line":98,"column":35},"end":{"line":98,"column":36}},"loc":{"start":{"line":98,"column":41},"end":{"line":104,"column":9}},"line":98}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":40,"10":40,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1},"f":{"0":1,"1":40,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-console-logger.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-console-logger.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport * as logger from '../src/common/console-logger';\nimport { ConsoleLogger } from '../src/common/console-logger';\n\nconst LEVELS = ['silent', 'error', 'warn', 'info', 'debug'];\nlet consoleTxt = '';\n\n// TODO: Review test cases: Maybe testing the info log level is sufficient\n// because it already shows that lower levels will log, and higher levels won't.\n\ndescribe('ConsoleLogger', () => {\n  const intercept = require('intercept-stdout');\n  const unhookIntercept = intercept((txt: string) => {\n    consoleTxt = txt;\n    return txt;\n  });\n\n  /** Should create a new ConsoleLogger */\n  describe('new ConsoleLogger()', () => {\n    it('should log with default levels', () => {\n      logger.logger();\n      assert.strictEqual(LEVELS.length, ConsoleLogger.LEVELS.length);\n    });\n\n    it('should log with error', () => {\n      const consoleLogger = logger.logger(1);\n      assert.strictEqual(LEVELS[1], consoleLogger.level);\n    });\n  });\n\n  /** Should logger only error log */\n  describe('error logger', () => {\n    const consoleLogger = logger.logger(LEVELS[1]);\n\n    it('should log error', () => {\n      consoleTxt = '';\n      consoleLogger.error('error test logger');\n      unhookIntercept();\n      const validateString = consoleTxt.indexOf('error');\n\n      assert.ok(validateString >= 0);\n    });\n\n    it('should not log warn', () => {\n      consoleTxt = '';\n      consoleLogger.warn('warn test logger');\n      unhookIntercept();\n\n      const validateString = consoleTxt.indexOf('warn');\n\n      assert.strictEqual(validateString, -1);\n    });\n\n    it('should not log info', () => {\n      consoleTxt = '';\n      consoleLogger.info('info test logger');\n      unhookIntercept();\n\n      const validateString = consoleTxt.indexOf('info');\n\n      assert.strictEqual(validateString, -1);\n    });\n\n    it('should not log debug', () => {\n      consoleTxt = '';\n      consoleLogger.debug('debug test logger');\n      unhookIntercept();\n      const validateString = consoleTxt.indexOf('debug');\n\n      assert.strictEqual(validateString, -1);\n    });\n  });\n\n  /** Should disable logger  */\n  describe('silent logger', () => {\n    const consoleLogger = logger.logger(0);\n\n    it('should not log error', () => {\n      consoleTxt = '';\n      consoleLogger.error('error test logger');\n      unhookIntercept();\n      const validateString = consoleTxt.indexOf('error');\n\n      assert.strictEqual(validateString, -1);\n    });\n\n    it('should not log warn', () => {\n      consoleTxt = '';\n      consoleLogger.warn('warn test logger');\n      unhookIntercept();\n\n      const validateString = consoleTxt.indexOf('warn');\n\n      assert.strictEqual(validateString, -1);\n    });\n\n    it('should not log info', () => {\n      consoleTxt = '';\n      consoleLogger.info('info test logger');\n      unhookIntercept();\n\n      const validateString = consoleTxt.indexOf('info');\n\n      assert.strictEqual(validateString, -1);\n    });\n\n    it('should not log debug', () => {\n      consoleTxt = '';\n      consoleLogger.debug('debug test logger');\n      unhookIntercept();\n      const validateString = consoleTxt.indexOf('debug');\n\n      assert.strictEqual(validateString, -1);\n    });\n  });\n});\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"7625c7424e460dffe2c48c41fb75942cd290e651","contentHash":"c9de5aa5ae23c9f74fbce01fd58acf94f425b550519d9a092cf0f19d69770358"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-cumulative.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-cumulative.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":15},"end":{"line":18,"column":32}},"2":{"start":{"line":19,"column":20},"end":{"line":19,"column":54}},"3":{"start":{"line":20,"column":21},"end":{"line":20,"column":68}},"4":{"start":{"line":21,"column":16},"end":{"line":21,"column":54}},"5":{"start":{"line":22,"column":20},"end":{"line":22,"column":33}},"6":{"start":{"line":23,"column":27},"end":{"line":23,"column":47}},"7":{"start":{"line":24,"column":13},"end":{"line":24,"column":16}},"8":{"start":{"line":25,"column":25},"end":{"line":25,"column":70}},"9":{"start":{"line":26,"column":26},"end":{"line":26,"column":72}},"10":{"start":{"line":27,"column":19},"end":{"line":27,"column":57}},"11":{"start":{"line":28,"column":25},"end":{"line":28,"column":43}},"12":{"start":{"line":29,"column":25},"end":{"line":29,"column":43}},"13":{"start":{"line":30,"column":27},"end":{"line":30,"column":63}},"14":{"start":{"line":31,"column":26},"end":{"line":33,"column":1}},"15":{"start":{"line":34,"column":30},"end":{"line":34,"column":39}},"16":{"start":{"line":35,"column":24},"end":{"line":35,"column":33}},"17":{"start":{"line":36,"column":0},"end":{"line":36,"column":82}},"18":{"start":{"line":37,"column":0},"end":{"line":311,"column":3}},"19":{"start":{"line":39,"column":25},"end":{"line":39,"column":39}},"20":{"start":{"line":40,"column":22},"end":{"line":40,"column":30}},"21":{"start":{"line":41,"column":23},"end":{"line":41,"column":58}},"22":{"start":{"line":42,"column":37},"end":{"line":48,"column":5}},"23":{"start":{"line":49,"column":4},"end":{"line":56,"column":7}},"24":{"start":{"line":50,"column":8},"end":{"line":50,"column":139}},"25":{"start":{"line":52,"column":8},"end":{"line":52,"column":42}},"26":{"start":{"line":52,"column":31},"end":{"line":52,"column":41}},"27":{"start":{"line":53,"column":8},"end":{"line":53,"column":39}},"28":{"start":{"line":53,"column":25},"end":{"line":53,"column":38}},"29":{"start":{"line":55,"column":8},"end":{"line":55,"column":51}},"30":{"start":{"line":57,"column":4},"end":{"line":62,"column":7}},"31":{"start":{"line":58,"column":8},"end":{"line":58,"column":38}},"32":{"start":{"line":59,"column":8},"end":{"line":59,"column":29}},"33":{"start":{"line":61,"column":8},"end":{"line":61,"column":57}},"34":{"start":{"line":63,"column":4},"end":{"line":163,"column":7}},"35":{"start":{"line":64,"column":8},"end":{"line":96,"column":11}},"36":{"start":{"line":65,"column":26},"end":{"line":65,"column":74}},"37":{"start":{"line":66,"column":12},"end":{"line":66,"column":24}},"38":{"start":{"line":67,"column":25},"end":{"line":67,"column":45}},"39":{"start":{"line":68,"column":12},"end":{"line":68,"column":80}},"40":{"start":{"line":69,"column":12},"end":{"line":69,"column":60}},"41":{"start":{"line":70,"column":12},"end":{"line":76,"column":15}},"42":{"start":{"line":78,"column":12},"end":{"line":78,"column":25}},"43":{"start":{"line":79,"column":27},"end":{"line":79,"column":75}},"44":{"start":{"line":80,"column":12},"end":{"line":80,"column":25}},"45":{"start":{"line":81,"column":12},"end":{"line":81,"column":42}},"46":{"start":{"line":82,"column":12},"end":{"line":82,"column":80}},"47":{"start":{"line":83,"column":12},"end":{"line":83,"column":60}},"48":{"start":{"line":84,"column":12},"end":{"line":95,"column":15}},"49":{"start":{"line":97,"column":8},"end":{"line":101,"column":11}},"50":{"start":{"line":98,"column":12},"end":{"line":100,"column":76}},"51":{"start":{"line":99,"column":16},"end":{"line":99,"column":67}},"52":{"start":{"line":102,"column":8},"end":{"line":107,"column":11}},"53":{"start":{"line":103,"column":26},"end":{"line":103,"column":74}},"54":{"start":{"line":104,"column":12},"end":{"line":106,"column":78}},"55":{"start":{"line":105,"column":16},"end":{"line":105,"column":31}},"56":{"start":{"line":108,"column":8},"end":{"line":113,"column":11}},"57":{"start":{"line":109,"column":26},"end":{"line":109,"column":74}},"58":{"start":{"line":110,"column":12},"end":{"line":112,"column":64}},"59":{"start":{"line":111,"column":16},"end":{"line":111,"column":31}},"60":{"start":{"line":114,"column":8},"end":{"line":119,"column":11}},"61":{"start":{"line":115,"column":26},"end":{"line":115,"column":74}},"62":{"start":{"line":116,"column":12},"end":{"line":118,"column":69}},"63":{"start":{"line":117,"column":16},"end":{"line":117,"column":35}},"64":{"start":{"line":120,"column":8},"end":{"line":135,"column":11}},"65":{"start":{"line":121,"column":26},"end":{"line":121,"column":74}},"66":{"start":{"line":122,"column":12},"end":{"line":122,"column":26}},"67":{"start":{"line":123,"column":12},"end":{"line":123,"column":26}},"68":{"start":{"line":124,"column":12},"end":{"line":124,"column":24}},"69":{"start":{"line":125,"column":27},"end":{"line":125,"column":47}},"70":{"start":{"line":126,"column":12},"end":{"line":126,"column":80}},"71":{"start":{"line":127,"column":12},"end":{"line":127,"column":60}},"72":{"start":{"line":128,"column":12},"end":{"line":134,"column":15}},"73":{"start":{"line":136,"column":8},"end":{"line":162,"column":11}},"74":{"start":{"line":137,"column":26},"end":{"line":137,"column":74}},"75":{"start":{"line":138,"column":12},"end":{"line":138,"column":26}},"76":{"start":{"line":139,"column":25},"end":{"line":139,"column":45}},"77":{"start":{"line":140,"column":12},"end":{"line":140,"column":80}},"78":{"start":{"line":141,"column":12},"end":{"line":141,"column":60}},"79":{"start":{"line":142,"column":12},"end":{"line":148,"column":15}},"80":{"start":{"line":150,"column":27},"end":{"line":150,"column":75}},"81":{"start":{"line":151,"column":12},"end":{"line":151,"column":27}},"82":{"start":{"line":152,"column":12},"end":{"line":152,"column":42}},"83":{"start":{"line":153,"column":12},"end":{"line":153,"column":80}},"84":{"start":{"line":154,"column":12},"end":{"line":154,"column":60}},"85":{"start":{"line":155,"column":12},"end":{"line":161,"column":15}},"86":{"start":{"line":164,"column":4},"end":{"line":285,"column":7}},"87":{"start":{"line":165,"column":8},"end":{"line":185,"column":11}},"88":{"start":{"line":166,"column":26},"end":{"line":166,"column":57}},"89":{"start":{"line":167,"column":12},"end":{"line":167,"column":26}},"90":{"start":{"line":169,"column":12},"end":{"line":169,"column":46}},"91":{"start":{"line":169,"column":35},"end":{"line":169,"column":45}},"92":{"start":{"line":170,"column":12},"end":{"line":170,"column":43}},"93":{"start":{"line":170,"column":29},"end":{"line":170,"column":42}},"94":{"start":{"line":172,"column":12},"end":{"line":172,"column":55}},"95":{"start":{"line":173,"column":27},"end":{"line":173,"column":47}},"96":{"start":{"line":174,"column":12},"end":{"line":174,"column":80}},"97":{"start":{"line":175,"column":12},"end":{"line":175,"column":60}},"98":{"start":{"line":176,"column":12},"end":{"line":184,"column":15}},"99":{"start":{"line":186,"column":8},"end":{"line":203,"column":11}},"100":{"start":{"line":187,"column":12},"end":{"line":190,"column":38}},"101":{"start":{"line":191,"column":26},"end":{"line":194,"column":14}},"102":{"start":{"line":195,"column":12},"end":{"line":195,"column":27}},"103":{"start":{"line":196,"column":27},"end":{"line":199,"column":14}},"104":{"start":{"line":200,"column":12},"end":{"line":200,"column":28}},"105":{"start":{"line":201,"column":27},"end":{"line":201,"column":47}},"106":{"start":{"line":202,"column":12},"end":{"line":202,"column":60}},"107":{"start":{"line":204,"column":8},"end":{"line":233,"column":11}},"108":{"start":{"line":205,"column":12},"end":{"line":208,"column":32}},"109":{"start":{"line":209,"column":26},"end":{"line":212,"column":14}},"110":{"start":{"line":213,"column":12},"end":{"line":213,"column":27}},"111":{"start":{"line":214,"column":27},"end":{"line":214,"column":47}},"112":{"start":{"line":215,"column":12},"end":{"line":215,"column":58}},"113":{"start":{"line":216,"column":12},"end":{"line":216,"column":60}},"114":{"start":{"line":217,"column":12},"end":{"line":221,"column":15}},"115":{"start":{"line":222,"column":12},"end":{"line":232,"column":15}},"116":{"start":{"line":234,"column":8},"end":{"line":257,"column":11}},"117":{"start":{"line":235,"column":12},"end":{"line":239,"column":38}},"118":{"start":{"line":240,"column":26},"end":{"line":240,"column":57}},"119":{"start":{"line":241,"column":12},"end":{"line":241,"column":27}},"120":{"start":{"line":242,"column":27},"end":{"line":242,"column":47}},"121":{"start":{"line":243,"column":12},"end":{"line":243,"column":74}},"122":{"start":{"line":244,"column":12},"end":{"line":244,"column":62}},"123":{"start":{"line":245,"column":12},"end":{"line":245,"column":60}},"124":{"start":{"line":246,"column":12},"end":{"line":256,"column":15}},"125":{"start":{"line":258,"column":8},"end":{"line":284,"column":11}},"126":{"start":{"line":259,"column":26},"end":{"line":259,"column":57}},"127":{"start":{"line":260,"column":12},"end":{"line":260,"column":27}},"128":{"start":{"line":261,"column":25},"end":{"line":261,"column":45}},"129":{"start":{"line":262,"column":12},"end":{"line":262,"column":80}},"130":{"start":{"line":263,"column":12},"end":{"line":263,"column":60}},"131":{"start":{"line":264,"column":12},"end":{"line":270,"column":15}},"132":{"start":{"line":272,"column":27},"end":{"line":272,"column":58}},"133":{"start":{"line":273,"column":12},"end":{"line":273,"column":28}},"134":{"start":{"line":274,"column":12},"end":{"line":274,"column":42}},"135":{"start":{"line":275,"column":12},"end":{"line":275,"column":80}},"136":{"start":{"line":276,"column":12},"end":{"line":276,"column":60}},"137":{"start":{"line":277,"column":12},"end":{"line":283,"column":15}},"138":{"start":{"line":286,"column":4},"end":{"line":296,"column":7}},"139":{"start":{"line":287,"column":8},"end":{"line":295,"column":11}},"140":{"start":{"line":288,"column":26},"end":{"line":288,"column":74}},"141":{"start":{"line":289,"column":12},"end":{"line":289,"column":26}},"142":{"start":{"line":290,"column":25},"end":{"line":290,"column":45}},"143":{"start":{"line":291,"column":12},"end":{"line":291,"column":80}},"144":{"start":{"line":292,"column":12},"end":{"line":292,"column":56}},"145":{"start":{"line":293,"column":12},"end":{"line":293,"column":42}},"146":{"start":{"line":294,"column":12},"end":{"line":294,"column":49}},"147":{"start":{"line":297,"column":4},"end":{"line":310,"column":7}},"148":{"start":{"line":298,"column":8},"end":{"line":309,"column":11}},"149":{"start":{"line":299,"column":26},"end":{"line":299,"column":74}},"150":{"start":{"line":300,"column":12},"end":{"line":300,"column":26}},"151":{"start":{"line":301,"column":27},"end":{"line":301,"column":75}},"152":{"start":{"line":302,"column":12},"end":{"line":302,"column":27}},"153":{"start":{"line":303,"column":25},"end":{"line":303,"column":45}},"154":{"start":{"line":304,"column":12},"end":{"line":304,"column":80}},"155":{"start":{"line":305,"column":12},"end":{"line":305,"column":60}},"156":{"start":{"line":306,"column":12},"end":{"line":306,"column":29}},"157":{"start":{"line":307,"column":12},"end":{"line":307,"column":42}},"158":{"start":{"line":308,"column":12},"end":{"line":308,"column":49}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":37,"column":23},"end":{"line":37,"column":24}},"loc":{"start":{"line":37,"column":29},"end":{"line":311,"column":1}},"line":37},"1":{"name":"(anonymous_1)","decl":{"start":{"line":49,"column":15},"end":{"line":49,"column":16}},"loc":{"start":{"line":49,"column":21},"end":{"line":56,"column":5}},"line":49},"2":{"name":"(anonymous_2)","decl":{"start":{"line":52,"column":25},"end":{"line":52,"column":26}},"loc":{"start":{"line":52,"column":31},"end":{"line":52,"column":41}},"line":52},"3":{"name":"(anonymous_3)","decl":{"start":{"line":53,"column":19},"end":{"line":53,"column":20}},"loc":{"start":{"line":53,"column":25},"end":{"line":53,"column":38}},"line":53},"4":{"name":"(anonymous_4)","decl":{"start":{"line":57,"column":14},"end":{"line":57,"column":15}},"loc":{"start":{"line":57,"column":20},"end":{"line":62,"column":5}},"line":57},"5":{"name":"(anonymous_5)","decl":{"start":{"line":63,"column":40},"end":{"line":63,"column":41}},"loc":{"start":{"line":63,"column":46},"end":{"line":163,"column":5}},"line":63},"6":{"name":"(anonymous_6)","decl":{"start":{"line":64,"column":37},"end":{"line":64,"column":38}},"loc":{"start":{"line":64,"column":43},"end":{"line":96,"column":9}},"line":64},"7":{"name":"(anonymous_7)","decl":{"start":{"line":97,"column":81},"end":{"line":97,"column":82}},"loc":{"start":{"line":97,"column":87},"end":{"line":101,"column":9}},"line":97},"8":{"name":"(anonymous_8)","decl":{"start":{"line":98,"column":26},"end":{"line":98,"column":27}},"loc":{"start":{"line":98,"column":32},"end":{"line":100,"column":13}},"line":98},"9":{"name":"(anonymous_9)","decl":{"start":{"line":102,"column":68},"end":{"line":102,"column":69}},"loc":{"start":{"line":102,"column":74},"end":{"line":107,"column":9}},"line":102},"10":{"name":"(anonymous_10)","decl":{"start":{"line":104,"column":26},"end":{"line":104,"column":27}},"loc":{"start":{"line":104,"column":32},"end":{"line":106,"column":13}},"line":104},"11":{"name":"(anonymous_11)","decl":{"start":{"line":108,"column":62},"end":{"line":108,"column":63}},"loc":{"start":{"line":108,"column":68},"end":{"line":113,"column":9}},"line":108},"12":{"name":"(anonymous_12)","decl":{"start":{"line":110,"column":26},"end":{"line":110,"column":27}},"loc":{"start":{"line":110,"column":32},"end":{"line":112,"column":13}},"line":110},"13":{"name":"(anonymous_13)","decl":{"start":{"line":114,"column":73},"end":{"line":114,"column":74}},"loc":{"start":{"line":114,"column":79},"end":{"line":119,"column":9}},"line":114},"14":{"name":"(anonymous_14)","decl":{"start":{"line":116,"column":26},"end":{"line":116,"column":27}},"loc":{"start":{"line":116,"column":32},"end":{"line":118,"column":13}},"line":116},"15":{"name":"(anonymous_15)","decl":{"start":{"line":120,"column":43},"end":{"line":120,"column":44}},"loc":{"start":{"line":120,"column":49},"end":{"line":135,"column":9}},"line":120},"16":{"name":"(anonymous_16)","decl":{"start":{"line":136,"column":54},"end":{"line":136,"column":55}},"loc":{"start":{"line":136,"column":60},"end":{"line":162,"column":9}},"line":136},"17":{"name":"(anonymous_17)","decl":{"start":{"line":164,"column":39},"end":{"line":164,"column":40}},"loc":{"start":{"line":164,"column":45},"end":{"line":285,"column":5}},"line":164},"18":{"name":"(anonymous_18)","decl":{"start":{"line":165,"column":51},"end":{"line":165,"column":52}},"loc":{"start":{"line":165,"column":57},"end":{"line":185,"column":9}},"line":165},"19":{"name":"(anonymous_19)","decl":{"start":{"line":169,"column":29},"end":{"line":169,"column":30}},"loc":{"start":{"line":169,"column":35},"end":{"line":169,"column":45}},"line":169},"20":{"name":"(anonymous_20)","decl":{"start":{"line":170,"column":23},"end":{"line":170,"column":24}},"loc":{"start":{"line":170,"column":29},"end":{"line":170,"column":42}},"line":170},"21":{"name":"(anonymous_21)","decl":{"start":{"line":186,"column":68},"end":{"line":186,"column":69}},"loc":{"start":{"line":186,"column":74},"end":{"line":203,"column":9}},"line":186},"22":{"name":"(anonymous_22)","decl":{"start":{"line":204,"column":41},"end":{"line":204,"column":42}},"loc":{"start":{"line":204,"column":47},"end":{"line":233,"column":9}},"line":204},"23":{"name":"(anonymous_23)","decl":{"start":{"line":234,"column":58},"end":{"line":234,"column":59}},"loc":{"start":{"line":234,"column":64},"end":{"line":257,"column":9}},"line":234},"24":{"name":"(anonymous_24)","decl":{"start":{"line":258,"column":63},"end":{"line":258,"column":64}},"loc":{"start":{"line":258,"column":69},"end":{"line":284,"column":9}},"line":258},"25":{"name":"(anonymous_25)","decl":{"start":{"line":286,"column":35},"end":{"line":286,"column":36}},"loc":{"start":{"line":286,"column":41},"end":{"line":296,"column":5}},"line":286},"26":{"name":"(anonymous_26)","decl":{"start":{"line":287,"column":39},"end":{"line":287,"column":40}},"loc":{"start":{"line":287,"column":45},"end":{"line":295,"column":9}},"line":287},"27":{"name":"(anonymous_27)","decl":{"start":{"line":297,"column":24},"end":{"line":297,"column":25}},"loc":{"start":{"line":297,"column":30},"end":{"line":310,"column":5}},"line":297},"28":{"name":"(anonymous_28)","decl":{"start":{"line":298,"column":42},"end":{"line":298,"column":43}},"loc":{"start":{"line":298,"column":48},"end":{"line":309,"column":9}},"line":298}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":14,"25":14,"26":42,"27":14,"28":14,"29":14,"30":1,"31":14,"32":14,"33":14,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"71":1,"72":1,"73":1,"74":1,"75":1,"76":1,"77":1,"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1,"86":1,"87":1,"88":1,"89":1,"90":1,"91":2,"92":1,"93":1,"94":1,"95":1,"96":1,"97":1,"98":1,"99":1,"100":1,"101":1,"102":1,"103":1,"104":1,"105":1,"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"112":1,"113":1,"114":1,"115":1,"116":1,"117":1,"118":1,"119":1,"120":1,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"136":1,"137":1,"138":1,"139":1,"140":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"149":1,"150":1,"151":1,"152":1,"153":1,"154":1,"155":1,"156":1,"157":1,"158":1},"f":{"0":1,"1":14,"2":42,"3":14,"4":14,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":2,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-cumulative.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-cumulative.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport { TEST_ONLY } from '../src/common/time-util';\nimport { Cumulative } from '../src/metrics/cumulative/cumulative';\nimport {\n  LabelKey,\n  LabelValue,\n  MetricDescriptorType,\n  Timestamp,\n} from '../src/metrics/export/types';\n\nconst METRIC_NAME = 'metric-name';\nconst METRIC_DESCRIPTION = 'metric-description';\nconst UNIT = '1';\nconst CUMULATIVE_INT64 = MetricDescriptorType.CUMULATIVE_INT64;\nconst CUMULATIVE_DOUBLE = MetricDescriptorType.CUMULATIVE_DOUBLE;\nconst LABEL_KEYS: LabelKey[] = [{ key: 'code', description: 'desc' }];\nconst LABEL_VALUES_200: LabelValue[] = [{ value: '200' }];\nconst LABEL_VALUES_400: LabelValue[] = [{ value: '400' }];\nconst LABEL_VALUES_EXRTA: LabelValue[] = [{ value: '200' }, { value: '400' }];\nconst UNSET_LABEL_VALUE: LabelValue = {\n  value: null,\n};\nconst EMPTY_CONSTANT_LABELS = new Map();\nconst CONSTANT_LABELS = new Map();\nCONSTANT_LABELS.set(\n  { key: 'host', description: 'host' },\n  { value: 'localhost' }\n);\n\ndescribe('CUMULATIVE', () => {\n  let instance: Cumulative;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n  const expectedMetricDescriptor = {\n    name: METRIC_NAME,\n    description: METRIC_DESCRIPTION,\n    unit: UNIT,\n    type: CUMULATIVE_INT64,\n    labelKeys: LABEL_KEYS,\n  };\n\n  beforeEach(() => {\n    instance = new Cumulative(\n      METRIC_NAME,\n      METRIC_DESCRIPTION,\n      UNIT,\n      CUMULATIVE_INT64,\n      LABEL_KEYS,\n      EMPTY_CONSTANT_LABELS\n    );\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  describe('getOrCreateTimeSeries()', () => {\n    it('should return a Metric', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      point.inc();\n\n      let metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 1, timestamp: mockedTime }],\n          startTimestamp: mockedTime,\n        },\n      ]);\n\n      // inc value and create new timeseries.\n      point.inc(5);\n      const point1 = instance.getOrCreateTimeSeries(LABEL_VALUES_400);\n      point1.inc();\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 2);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 6, timestamp: mockedTime }],\n          startTimestamp: mockedTime,\n        },\n        {\n          labelValues: LABEL_VALUES_400,\n          points: [{ value: 1, timestamp: mockedTime }],\n          startTimestamp: mockedTime,\n        },\n      ]);\n    });\n\n    it('should throw an error when the keys and values dont have same size', () => {\n      assert.throws(() => {\n        instance.getOrCreateTimeSeries(LABEL_VALUES_EXRTA);\n      }, /^Error: Label Keys and Label Values don't have same size$/);\n    });\n\n    it('should throw an error when the inc number is negative', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      assert.throws(() => {\n        point.inc(-10);\n      }, /^Error: It is not possible to decrease a cumulative metric$/);\n    });\n\n    it('should throw an error when the inc input is NaN', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      assert.throws(() => {\n        point.inc(NaN);\n      }, /^TypeError: Value is not a valid number: NaN$/);\n    });\n\n    it('should throw a TypeError when the inc number is not finite', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      assert.throws(() => {\n        point.inc(100 / 0);\n      }, /^TypeError: Value is not a valid number: Infinity$/);\n    });\n\n    it('should reset the point value', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      point.inc(10);\n      point.reset();\n      point.inc();\n      const metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 1, timestamp: mockedTime }],\n          startTimestamp: mockedTime,\n        },\n      ]);\n    });\n\n    it('should not create same timeseries again', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      point.inc(10);\n      let metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 10, timestamp: mockedTime }],\n          startTimestamp: mockedTime,\n        },\n      ]);\n      // create timeseries with same labels.\n      const point1 = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      point1.inc(30);\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 40, timestamp: mockedTime }],\n          startTimestamp: mockedTime,\n        },\n      ]);\n    });\n  });\n\n  describe('getDefaultTimeSeries()', () => {\n    it('should create new default timeseries', () => {\n      const point = instance.getDefaultTimeSeries();\n      point.inc(10);\n\n      // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n      process.hrtime = () => [100, 1e7];\n      Date.now = () => 1480000000000;\n      // Force the clock to recalibrate the time offset with the mocked time\n      TEST_ONLY.setHrtimeReference();\n\n      const metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: [UNSET_LABEL_VALUE],\n          points: [\n            { value: 10, timestamp: { seconds: 1480000100, nanos: 1e7 } },\n          ],\n          startTimestamp: mockedTime,\n        },\n      ]);\n    });\n\n    it('should return same timeseries for interchanged labels', () => {\n      instance = new Cumulative(\n        METRIC_NAME,\n        METRIC_DESCRIPTION,\n        UNIT,\n        CUMULATIVE_INT64,\n        [\n          { key: 'k1', description: 'desc' },\n          { key: 'k2', description: 'desc' },\n        ],\n        EMPTY_CONSTANT_LABELS\n      );\n      const point = instance.getOrCreateTimeSeries([\n        { value: '200' },\n        { value: '400' },\n      ]);\n      point.inc(200);\n      const point1 = instance.getOrCreateTimeSeries([\n        { value: '400' },\n        { value: '200' },\n      ]);\n      point1.inc(400);\n      const metric = instance.getMetric();\n      assert.strictEqual(metric!.timeseries.length, 1);\n    });\n\n    it('should add constant labels', () => {\n      instance = new Cumulative(\n        METRIC_NAME,\n        METRIC_DESCRIPTION,\n        UNIT,\n        CUMULATIVE_DOUBLE,\n        [\n          { key: 'k1', description: 'desc' },\n          { key: 'k2', description: 'desc' },\n        ],\n        CONSTANT_LABELS\n      );\n      const point = instance.getOrCreateTimeSeries([\n        { value: '200' },\n        { value: '400' },\n      ]);\n      point.inc(200);\n      const metric = instance.getMetric();\n      assert.strictEqual(metric!.descriptor.type, 5);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.descriptor.labelKeys, [\n        { key: 'k1', description: 'desc' },\n        { key: 'k2', description: 'desc' },\n        { key: 'host', description: 'host' },\n      ]);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: [\n            { value: '200' },\n            { value: '400' },\n            { value: 'localhost' },\n          ],\n          points: [{ value: 200, timestamp: mockedTime }],\n          startTimestamp: mockedTime,\n        },\n      ]);\n    });\n\n    it('should create same labelValues as labelKeys', () => {\n      instance = new Cumulative(\n        METRIC_NAME,\n        METRIC_DESCRIPTION,\n        UNIT,\n        CUMULATIVE_DOUBLE,\n        [\n          { key: 'k1', description: 'desc' },\n          { key: 'k2', description: 'desc' },\n          { key: 'k3', description: 'desc' },\n        ],\n        EMPTY_CONSTANT_LABELS\n      );\n      const point = instance.getDefaultTimeSeries();\n      point.inc(200);\n      const metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor.labelKeys.length, 3);\n      assert.deepStrictEqual(metric!.descriptor.type, 5);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: [\n            UNSET_LABEL_VALUE,\n            UNSET_LABEL_VALUE,\n            UNSET_LABEL_VALUE,\n          ],\n          points: [{ value: 200, timestamp: mockedTime }],\n          startTimestamp: mockedTime,\n        },\n      ]);\n    });\n\n    it('should use previously created default timeseries', () => {\n      const point = instance.getDefaultTimeSeries();\n      point.inc(300);\n      let metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: [UNSET_LABEL_VALUE],\n          points: [{ value: 300, timestamp: mockedTime }],\n          startTimestamp: mockedTime,\n        },\n      ]);\n      // get default timeseries again.\n      const point1 = instance.getDefaultTimeSeries();\n      point1.inc(400);\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: [UNSET_LABEL_VALUE],\n          points: [{ value: 700, timestamp: mockedTime }],\n          startTimestamp: mockedTime,\n        },\n      ]);\n    });\n  });\n\n  describe('removeTimeSeries()', () => {\n    it('should remove TimeSeries', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      point.inc(10);\n      let metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      instance.removeTimeSeries(LABEL_VALUES_200);\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric, null);\n    });\n  });\n\n  describe('clear()', () => {\n    it('should clear all TimeSeries', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      point.inc(10);\n      const point1 = instance.getOrCreateTimeSeries(LABEL_VALUES_400);\n      point1.inc(10);\n      let metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 2);\n      instance.clear();\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric, null);\n    });\n  });\n});\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"591b33205dcae42867bcd95878eb7796f61fd732","contentHash":"d73b8b8aca833c1a878c7785dcbfb281255f67de61c8413be479a99f9cbfa7a2"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-derived-cumulative.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-derived-cumulative.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":15},"end":{"line":18,"column":32}},"2":{"start":{"line":19,"column":20},"end":{"line":19,"column":54}},"3":{"start":{"line":20,"column":29},"end":{"line":20,"column":84}},"4":{"start":{"line":21,"column":16},"end":{"line":21,"column":54}},"5":{"start":{"line":22,"column":20},"end":{"line":22,"column":33}},"6":{"start":{"line":23,"column":27},"end":{"line":23,"column":47}},"7":{"start":{"line":24,"column":13},"end":{"line":24,"column":16}},"8":{"start":{"line":25,"column":25},"end":{"line":25,"column":70}},"9":{"start":{"line":26,"column":26},"end":{"line":26,"column":72}},"10":{"start":{"line":27,"column":19},"end":{"line":27,"column":57}},"11":{"start":{"line":28,"column":25},"end":{"line":28,"column":43}},"12":{"start":{"line":29,"column":25},"end":{"line":29,"column":43}},"13":{"start":{"line":30,"column":27},"end":{"line":30,"column":63}},"14":{"start":{"line":31,"column":30},"end":{"line":31,"column":39}},"15":{"start":{"line":32,"column":24},"end":{"line":32,"column":33}},"16":{"start":{"line":33,"column":0},"end":{"line":33,"column":82}},"17":{"start":{"line":34,"column":0},"end":{"line":273,"column":3}},"18":{"start":{"line":36,"column":25},"end":{"line":36,"column":39}},"19":{"start":{"line":37,"column":22},"end":{"line":37,"column":30}},"20":{"start":{"line":38,"column":23},"end":{"line":38,"column":58}},"21":{"start":{"line":39,"column":37},"end":{"line":45,"column":5}},"22":{"start":{"line":46,"column":21},"end":{"line":46,"column":56}},"23":{"start":{"line":47,"column":4},"end":{"line":54,"column":7}},"24":{"start":{"line":48,"column":8},"end":{"line":48,"column":164}},"25":{"start":{"line":50,"column":8},"end":{"line":50,"column":42}},"26":{"start":{"line":50,"column":31},"end":{"line":50,"column":41}},"27":{"start":{"line":51,"column":8},"end":{"line":51,"column":39}},"28":{"start":{"line":51,"column":25},"end":{"line":51,"column":38}},"29":{"start":{"line":53,"column":8},"end":{"line":53,"column":51}},"30":{"start":{"line":55,"column":4},"end":{"line":60,"column":7}},"31":{"start":{"line":56,"column":8},"end":{"line":56,"column":38}},"32":{"start":{"line":57,"column":8},"end":{"line":57,"column":29}},"33":{"start":{"line":59,"column":8},"end":{"line":59,"column":57}},"34":{"start":{"line":61,"column":4},"end":{"line":238,"column":7}},"35":{"start":{"line":62,"column":8},"end":{"line":66,"column":11}},"36":{"start":{"line":63,"column":12},"end":{"line":65,"column":76}},"37":{"start":{"line":64,"column":16},"end":{"line":64,"column":73}},"38":{"start":{"line":67,"column":8},"end":{"line":106,"column":11}},"39":{"start":{"line":68,"column":24},"end":{"line":68,"column":33}},"40":{"start":{"line":69,"column":12},"end":{"line":69,"column":36}},"41":{"start":{"line":70,"column":12},"end":{"line":70,"column":61}},"42":{"start":{"line":71,"column":12},"end":{"line":71,"column":38}},"43":{"start":{"line":72,"column":25},"end":{"line":72,"column":45}},"44":{"start":{"line":73,"column":12},"end":{"line":73,"column":48}},"45":{"start":{"line":74,"column":12},"end":{"line":74,"column":80}},"46":{"start":{"line":75,"column":12},"end":{"line":75,"column":60}},"47":{"start":{"line":76,"column":12},"end":{"line":82,"column":15}},"48":{"start":{"line":84,"column":12},"end":{"line":84,"column":38}},"49":{"start":{"line":85,"column":12},"end":{"line":85,"column":38}},"50":{"start":{"line":87,"column":24},"end":{"line":87,"column":49}},"51":{"start":{"line":88,"column":12},"end":{"line":90,"column":15}},"52":{"start":{"line":89,"column":28},"end":{"line":89,"column":38}},"53":{"start":{"line":91,"column":12},"end":{"line":91,"column":42}},"54":{"start":{"line":92,"column":12},"end":{"line":92,"column":80}},"55":{"start":{"line":93,"column":12},"end":{"line":93,"column":60}},"56":{"start":{"line":94,"column":12},"end":{"line":105,"column":15}},"57":{"start":{"line":107,"column":8},"end":{"line":126,"column":11}},"58":{"start":{"line":110,"column":20},"end":{"line":110,"column":30}},"59":{"start":{"line":113,"column":26},"end":{"line":113,"column":44}},"60":{"start":{"line":114,"column":12},"end":{"line":114,"column":63}},"61":{"start":{"line":115,"column":27},"end":{"line":115,"column":47}},"62":{"start":{"line":116,"column":12},"end":{"line":116,"column":48}},"63":{"start":{"line":117,"column":12},"end":{"line":117,"column":80}},"64":{"start":{"line":118,"column":12},"end":{"line":118,"column":60}},"65":{"start":{"line":119,"column":12},"end":{"line":125,"column":15}},"66":{"start":{"line":127,"column":8},"end":{"line":164,"column":11}},"67":{"start":{"line":130,"column":20},"end":{"line":130,"column":35}},"68":{"start":{"line":133,"column":20},"end":{"line":133,"column":38}},"69":{"start":{"line":136,"column":20},"end":{"line":136,"column":33}},"70":{"start":{"line":139,"column":26},"end":{"line":139,"column":44}},"71":{"start":{"line":140,"column":12},"end":{"line":140,"column":27}},"72":{"start":{"line":141,"column":12},"end":{"line":143,"column":15}},"73":{"start":{"line":142,"column":16},"end":{"line":142,"column":41}},"74":{"start":{"line":144,"column":25},"end":{"line":144,"column":45}},"75":{"start":{"line":145,"column":12},"end":{"line":145,"column":48}},"76":{"start":{"line":146,"column":12},"end":{"line":146,"column":80}},"77":{"start":{"line":147,"column":12},"end":{"line":147,"column":60}},"78":{"start":{"line":148,"column":12},"end":{"line":154,"column":15}},"79":{"start":{"line":156,"column":12},"end":{"line":156,"column":27}},"80":{"start":{"line":157,"column":12},"end":{"line":157,"column":27}},"81":{"start":{"line":158,"column":12},"end":{"line":158,"column":27}},"82":{"start":{"line":159,"column":12},"end":{"line":159,"column":42}},"83":{"start":{"line":160,"column":12},"end":{"line":160,"column":60}},"84":{"start":{"line":161,"column":12},"end":{"line":163,"column":15}},"85":{"start":{"line":165,"column":8},"end":{"line":191,"column":11}},"86":{"start":{"line":168,"column":20},"end":{"line":168,"column":31}},"87":{"start":{"line":171,"column":26},"end":{"line":171,"column":44}},"88":{"start":{"line":172,"column":35},"end":{"line":172,"column":180}},"89":{"start":{"line":173,"column":12},"end":{"line":173,"column":69}},"90":{"start":{"line":174,"column":27},"end":{"line":174,"column":53}},"91":{"start":{"line":175,"column":12},"end":{"line":175,"column":48}},"92":{"start":{"line":176,"column":12},"end":{"line":182,"column":15}},"93":{"start":{"line":183,"column":12},"end":{"line":183,"column":60}},"94":{"start":{"line":184,"column":12},"end":{"line":190,"column":15}},"95":{"start":{"line":192,"column":8},"end":{"line":217,"column":11}},"96":{"start":{"line":193,"column":24},"end":{"line":193,"column":33}},"97":{"start":{"line":194,"column":12},"end":{"line":194,"column":61}},"98":{"start":{"line":195,"column":12},"end":{"line":195,"column":36}},"99":{"start":{"line":196,"column":12},"end":{"line":196,"column":38}},"100":{"start":{"line":197,"column":25},"end":{"line":197,"column":45}},"101":{"start":{"line":198,"column":12},"end":{"line":198,"column":80}},"102":{"start":{"line":199,"column":12},"end":{"line":199,"column":60}},"103":{"start":{"line":200,"column":12},"end":{"line":206,"column":15}},"104":{"start":{"line":207,"column":12},"end":{"line":207,"column":24}},"105":{"start":{"line":208,"column":12},"end":{"line":208,"column":42}},"106":{"start":{"line":209,"column":12},"end":{"line":209,"column":60}},"107":{"start":{"line":210,"column":12},"end":{"line":216,"column":15}},"108":{"start":{"line":218,"column":8},"end":{"line":237,"column":11}},"109":{"start":{"line":219,"column":24},"end":{"line":219,"column":33}},"110":{"start":{"line":220,"column":12},"end":{"line":220,"column":61}},"111":{"start":{"line":221,"column":12},"end":{"line":221,"column":36}},"112":{"start":{"line":222,"column":27},"end":{"line":222,"column":47}},"113":{"start":{"line":223,"column":12},"end":{"line":223,"column":48}},"114":{"start":{"line":224,"column":12},"end":{"line":224,"column":80}},"115":{"start":{"line":225,"column":12},"end":{"line":225,"column":60}},"116":{"start":{"line":226,"column":12},"end":{"line":232,"column":15}},"117":{"start":{"line":234,"column":12},"end":{"line":236,"column":88}},"118":{"start":{"line":235,"column":16},"end":{"line":235,"column":65}},"119":{"start":{"line":239,"column":4},"end":{"line":251,"column":7}},"120":{"start":{"line":240,"column":8},"end":{"line":250,"column":11}},"121":{"start":{"line":241,"column":24},"end":{"line":241,"column":26}},"122":{"start":{"line":242,"column":12},"end":{"line":242,"column":61}},"123":{"start":{"line":243,"column":12},"end":{"line":243,"column":29}},"124":{"start":{"line":244,"column":25},"end":{"line":244,"column":45}},"125":{"start":{"line":245,"column":12},"end":{"line":245,"column":48}},"126":{"start":{"line":246,"column":12},"end":{"line":246,"column":80}},"127":{"start":{"line":247,"column":12},"end":{"line":247,"column":56}},"128":{"start":{"line":248,"column":12},"end":{"line":248,"column":42}},"129":{"start":{"line":249,"column":12},"end":{"line":249,"column":49}},"130":{"start":{"line":252,"column":4},"end":{"line":272,"column":7}},"131":{"start":{"line":253,"column":8},"end":{"line":271,"column":11}},"132":{"start":{"line":254,"column":24},"end":{"line":254,"column":33}},"133":{"start":{"line":255,"column":12},"end":{"line":257,"column":15}},"134":{"start":{"line":256,"column":28},"end":{"line":256,"column":36}},"135":{"start":{"line":258,"column":12},"end":{"line":258,"column":36}},"136":{"start":{"line":259,"column":24},"end":{"line":259,"column":26}},"137":{"start":{"line":260,"column":12},"end":{"line":262,"column":15}},"138":{"start":{"line":261,"column":28},"end":{"line":261,"column":38}},"139":{"start":{"line":263,"column":12},"end":{"line":263,"column":29}},"140":{"start":{"line":264,"column":25},"end":{"line":264,"column":45}},"141":{"start":{"line":265,"column":12},"end":{"line":265,"column":48}},"142":{"start":{"line":266,"column":12},"end":{"line":266,"column":80}},"143":{"start":{"line":267,"column":12},"end":{"line":267,"column":60}},"144":{"start":{"line":268,"column":12},"end":{"line":268,"column":29}},"145":{"start":{"line":269,"column":12},"end":{"line":269,"column":42}},"146":{"start":{"line":270,"column":12},"end":{"line":270,"column":49}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":34,"column":30},"end":{"line":34,"column":31}},"loc":{"start":{"line":34,"column":36},"end":{"line":273,"column":1}},"line":34},"1":{"name":"(anonymous_1)","decl":{"start":{"line":47,"column":15},"end":{"line":47,"column":16}},"loc":{"start":{"line":47,"column":21},"end":{"line":54,"column":5}},"line":47},"2":{"name":"(anonymous_2)","decl":{"start":{"line":50,"column":25},"end":{"line":50,"column":26}},"loc":{"start":{"line":50,"column":31},"end":{"line":50,"column":41}},"line":50},"3":{"name":"(anonymous_3)","decl":{"start":{"line":51,"column":19},"end":{"line":51,"column":20}},"loc":{"start":{"line":51,"column":25},"end":{"line":51,"column":38}},"line":51},"4":{"name":"(anonymous_4)","decl":{"start":{"line":55,"column":14},"end":{"line":55,"column":15}},"loc":{"start":{"line":55,"column":20},"end":{"line":60,"column":5}},"line":55},"5":{"name":"(anonymous_5)","decl":{"start":{"line":61,"column":35},"end":{"line":61,"column":36}},"loc":{"start":{"line":61,"column":41},"end":{"line":238,"column":5}},"line":61},"6":{"name":"(anonymous_6)","decl":{"start":{"line":62,"column":81},"end":{"line":62,"column":82}},"loc":{"start":{"line":62,"column":87},"end":{"line":66,"column":9}},"line":62},"7":{"name":"(anonymous_7)","decl":{"start":{"line":63,"column":26},"end":{"line":63,"column":27}},"loc":{"start":{"line":63,"column":32},"end":{"line":65,"column":13}},"line":63},"8":{"name":"(anonymous_8)","decl":{"start":{"line":67,"column":37},"end":{"line":67,"column":38}},"loc":{"start":{"line":67,"column":43},"end":{"line":106,"column":9}},"line":67},"9":{"name":"(anonymous_9)","decl":{"start":{"line":89,"column":22},"end":{"line":89,"column":23}},"loc":{"start":{"line":89,"column":28},"end":{"line":89,"column":38}},"line":89},"10":{"name":"(anonymous_10)","decl":{"start":{"line":107,"column":61},"end":{"line":107,"column":62}},"loc":{"start":{"line":107,"column":67},"end":{"line":126,"column":9}},"line":107},"11":{"name":"(anonymous_11)","decl":{"start":{"line":109,"column":16},"end":{"line":109,"column":17}},"loc":{"start":{"line":109,"column":27},"end":{"line":111,"column":17}},"line":109},"12":{"name":"(anonymous_12)","decl":{"start":{"line":127,"column":59},"end":{"line":127,"column":60}},"loc":{"start":{"line":127,"column":65},"end":{"line":164,"column":9}},"line":127},"13":{"name":"(anonymous_13)","decl":{"start":{"line":129,"column":16},"end":{"line":129,"column":17}},"loc":{"start":{"line":129,"column":30},"end":{"line":131,"column":17}},"line":129},"14":{"name":"(anonymous_14)","decl":{"start":{"line":132,"column":16},"end":{"line":132,"column":17}},"loc":{"start":{"line":132,"column":34},"end":{"line":134,"column":17}},"line":132},"15":{"name":"(anonymous_15)","decl":{"start":{"line":135,"column":16},"end":{"line":135,"column":17}},"loc":{"start":{"line":135,"column":25},"end":{"line":137,"column":17}},"line":135},"16":{"name":"(anonymous_16)","decl":{"start":{"line":141,"column":56},"end":{"line":141,"column":57}},"loc":{"start":{"line":141,"column":62},"end":{"line":143,"column":13}},"line":141},"17":{"name":"(anonymous_17)","decl":{"start":{"line":165,"column":62},"end":{"line":165,"column":63}},"loc":{"start":{"line":165,"column":68},"end":{"line":191,"column":9}},"line":165},"18":{"name":"(anonymous_18)","decl":{"start":{"line":167,"column":16},"end":{"line":167,"column":17}},"loc":{"start":{"line":167,"column":27},"end":{"line":169,"column":17}},"line":167},"19":{"name":"(anonymous_19)","decl":{"start":{"line":192,"column":56},"end":{"line":192,"column":57}},"loc":{"start":{"line":192,"column":62},"end":{"line":217,"column":9}},"line":192},"20":{"name":"(anonymous_20)","decl":{"start":{"line":218,"column":54},"end":{"line":218,"column":55}},"loc":{"start":{"line":218,"column":60},"end":{"line":237,"column":9}},"line":218},"21":{"name":"(anonymous_21)","decl":{"start":{"line":234,"column":26},"end":{"line":234,"column":27}},"loc":{"start":{"line":234,"column":32},"end":{"line":236,"column":13}},"line":234},"22":{"name":"(anonymous_22)","decl":{"start":{"line":239,"column":35},"end":{"line":239,"column":36}},"loc":{"start":{"line":239,"column":41},"end":{"line":251,"column":5}},"line":239},"23":{"name":"(anonymous_23)","decl":{"start":{"line":240,"column":39},"end":{"line":240,"column":40}},"loc":{"start":{"line":240,"column":45},"end":{"line":250,"column":9}},"line":240},"24":{"name":"(anonymous_24)","decl":{"start":{"line":252,"column":24},"end":{"line":252,"column":25}},"loc":{"start":{"line":252,"column":30},"end":{"line":272,"column":5}},"line":252},"25":{"name":"(anonymous_25)","decl":{"start":{"line":253,"column":42},"end":{"line":253,"column":43}},"loc":{"start":{"line":253,"column":48},"end":{"line":271,"column":9}},"line":253},"26":{"name":"(anonymous_26)","decl":{"start":{"line":256,"column":22},"end":{"line":256,"column":23}},"loc":{"start":{"line":256,"column":28},"end":{"line":256,"column":36}},"line":256},"27":{"name":"(anonymous_27)","decl":{"start":{"line":261,"column":22},"end":{"line":261,"column":23}},"loc":{"start":{"line":261,"column":28},"end":{"line":261,"column":38}},"line":261}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":9,"25":9,"26":20,"27":9,"28":9,"29":9,"30":1,"31":9,"32":9,"33":9,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":2,"69":4,"70":1,"71":1,"72":1,"73":2,"74":1,"75":1,"76":1,"77":1,"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1,"86":1,"87":1,"88":1,"89":1,"90":1,"91":1,"92":1,"93":1,"94":1,"95":1,"96":1,"97":1,"98":1,"99":1,"100":1,"101":1,"102":1,"103":1,"104":1,"105":1,"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"112":1,"113":1,"114":1,"115":1,"116":1,"117":1,"118":1,"119":1,"120":1,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"136":1,"137":1,"138":1,"139":1,"140":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1},"f":{"0":1,"1":9,"2":20,"3":9,"4":9,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":2,"15":4,"16":2,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-derived-cumulative.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-derived-cumulative.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport { TEST_ONLY } from '../src/common/time-util';\nimport { DerivedCumulative } from '../src/metrics/cumulative/derived-cumulative';\nimport {\n  LabelKey,\n  LabelValue,\n  MetricDescriptorType,\n  Timestamp,\n} from '../src/metrics/export/types';\n\nconst METRIC_NAME = 'metric-name';\nconst METRIC_DESCRIPTION = 'metric-description';\nconst UNIT = '1';\nconst CUMULATIVE_INT64 = MetricDescriptorType.CUMULATIVE_INT64;\nconst CUMULATIVE_DOUBLE = MetricDescriptorType.CUMULATIVE_DOUBLE;\nconst LABEL_KEYS: LabelKey[] = [{ key: 'code', description: 'desc' }];\nconst LABEL_VALUES_200: LabelValue[] = [{ value: '200' }];\nconst LABEL_VALUES_400: LabelValue[] = [{ value: '400' }];\nconst LABEL_VALUES_EXRTA: LabelValue[] = [{ value: '200' }, { value: '400' }];\nconst EMPTY_CONSTANT_LABELS = new Map();\nconst CONSTANT_LABELS = new Map();\nCONSTANT_LABELS.set(\n  { key: 'host', description: 'host' },\n  { value: 'localhost' }\n);\n\ndescribe('DerivedCumulative', () => {\n  let instance: DerivedCumulative;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n  const expectedMetricDescriptor = {\n    name: METRIC_NAME,\n    description: METRIC_DESCRIPTION,\n    unit: UNIT,\n    type: CUMULATIVE_INT64,\n    labelKeys: LABEL_KEYS,\n  };\n  const startime: Timestamp = { seconds: 1400000100, nanos: 1e7 };\n\n  beforeEach(() => {\n    instance = new DerivedCumulative(\n      METRIC_NAME,\n      METRIC_DESCRIPTION,\n      UNIT,\n      CUMULATIVE_INT64,\n      LABEL_KEYS,\n      EMPTY_CONSTANT_LABELS,\n      startime\n    );\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  describe('createTimeSeries()', () => {\n    it('should throw an error when the keys and values dont have same size', () => {\n      assert.throws(() => {\n        instance.createTimeSeries(LABEL_VALUES_EXRTA, new Map());\n      }, /^Error: Label Keys and Label Values don't have same size$/);\n    });\n\n    it('should return a Metric', () => {\n      const map = new Map();\n      map.set('key', 'value');\n      instance.createTimeSeries(LABEL_VALUES_200, map);\n      map.set('key1', 'value1');\n\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 2, timestamp: mockedTime }],\n          startTimestamp: startime,\n        },\n      ]);\n      // add data in collection\n      map.set('key2', 'value2');\n      map.set('key3', 'value3');\n\n      // add new timeseries with length-method\n      const arr = new Array(5).fill('test');\n      instance.createTimeSeries(LABEL_VALUES_400, {\n        size: () => arr.length,\n      });\n\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 2);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 4, timestamp: mockedTime }],\n          startTimestamp: startime,\n        },\n        {\n          labelValues: LABEL_VALUES_400,\n          points: [{ value: 5, timestamp: mockedTime }],\n          startTimestamp: startime,\n        },\n      ]);\n    });\n\n    it('should return a Metric (INT64) - custom object', () => {\n      class QueueManager {\n        getValue(): number {\n          return 45;\n        }\n      }\n      const queue = new QueueManager();\n      instance.createTimeSeries(LABEL_VALUES_200, queue);\n      const metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 45, timestamp: mockedTime }],\n          startTimestamp: startime,\n        },\n      ]);\n    });\n\n    it('should return a Metric value from a function', () => {\n      class QueueManager {\n        private depth = 0;\n        get pendingJobs() {\n          return this.depth;\n        }\n        addJob() {\n          this.depth++;\n        }\n      }\n      const queue = new QueueManager();\n      queue.addJob();\n      instance.createTimeSeries(LABEL_VALUES_200, () => {\n        return queue.pendingJobs;\n      });\n\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 1, timestamp: mockedTime }],\n          startTimestamp: startime,\n        },\n      ]);\n      // Simulate a adding multiple jobs in queue\n      queue.addJob();\n      queue.addJob();\n      queue.addJob();\n      metric = instance.getMetric();\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries[0].points, [\n        { value: 4, timestamp: mockedTime },\n      ]);\n    });\n\n    it('should return a Metric (Double) - custom object', () => {\n      class QueueManager {\n        getValue(): number {\n          return 0.7;\n        }\n      }\n      const queue = new QueueManager();\n      const doubleInstance = new DerivedCumulative(\n        METRIC_NAME,\n        METRIC_DESCRIPTION,\n        UNIT,\n        CUMULATIVE_DOUBLE,\n        LABEL_KEYS,\n        EMPTY_CONSTANT_LABELS,\n        startime\n      );\n      doubleInstance.createTimeSeries(LABEL_VALUES_200, queue);\n      const metric = doubleInstance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, {\n        name: METRIC_NAME,\n        description: METRIC_DESCRIPTION,\n        unit: UNIT,\n        type: CUMULATIVE_DOUBLE,\n        labelKeys: LABEL_KEYS,\n      });\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 0.7, timestamp: mockedTime }],\n          startTimestamp: startime,\n        },\n      ]);\n    });\n\n    it('should ignore dropping (decreasing) value', () => {\n      const map = new Map();\n      instance.createTimeSeries(LABEL_VALUES_200, map);\n      map.set('key', 'value');\n      map.set('key1', 'value1');\n      let metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 2, timestamp: mockedTime }],\n          startTimestamp: startime,\n        },\n      ]);\n\n      map.clear();\n      metric = instance.getMetric();\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 2, timestamp: mockedTime }],\n          startTimestamp: startime,\n        },\n      ]);\n    });\n\n    it('should not create same timeseries again', () => {\n      const map = new Map();\n      instance.createTimeSeries(LABEL_VALUES_200, map);\n      map.set('key', 'value');\n      const metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 1, timestamp: mockedTime }],\n          startTimestamp: startime,\n        },\n      ]);\n\n      // create timeseries with same labels.\n      assert.throws(() => {\n        instance.createTimeSeries(LABEL_VALUES_200, map);\n      }, /^Error: A different time series with the same labels already exists.$/);\n    });\n  });\n\n  describe('removeTimeSeries()', () => {\n    it('should remove TimeSeries', () => {\n      const arr: string[] = [];\n      instance.createTimeSeries(LABEL_VALUES_200, arr);\n      arr.push('test');\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      instance.removeTimeSeries(LABEL_VALUES_200);\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric, null);\n    });\n  });\n\n  describe('clear()', () => {\n    it('should clear all TimeSeries', () => {\n      const map = new Map();\n      instance.createTimeSeries(LABEL_VALUES_200, {\n        size: () => map.size,\n      });\n      map.set('key', 'value');\n\n      const arr: string[] = [];\n      instance.createTimeSeries(LABEL_VALUES_400, {\n        size: () => arr.length,\n      });\n      arr.push('test');\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 2);\n      instance.clear();\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric, null);\n    });\n  });\n});\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"12e56ccc217f83adb4653476711025585633fd01","contentHash":"bad5c95979b4f8bd0f50437cab0ffabdceba4df9586fe03fc9289a475e915543"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-derived-gauge.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-derived-gauge.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":15},"end":{"line":18,"column":32}},"2":{"start":{"line":19,"column":20},"end":{"line":19,"column":54}},"3":{"start":{"line":20,"column":16},"end":{"line":20,"column":54}},"4":{"start":{"line":21,"column":24},"end":{"line":21,"column":70}},"5":{"start":{"line":22,"column":20},"end":{"line":22,"column":33}},"6":{"start":{"line":23,"column":27},"end":{"line":23,"column":47}},"7":{"start":{"line":24,"column":13},"end":{"line":24,"column":16}},"8":{"start":{"line":25,"column":20},"end":{"line":25,"column":60}},"9":{"start":{"line":26,"column":21},"end":{"line":26,"column":62}},"10":{"start":{"line":27,"column":19},"end":{"line":27,"column":57}},"11":{"start":{"line":28,"column":25},"end":{"line":28,"column":43}},"12":{"start":{"line":29,"column":25},"end":{"line":29,"column":43}},"13":{"start":{"line":30,"column":27},"end":{"line":30,"column":63}},"14":{"start":{"line":31,"column":30},"end":{"line":31,"column":39}},"15":{"start":{"line":32,"column":24},"end":{"line":32,"column":33}},"16":{"start":{"line":33,"column":0},"end":{"line":33,"column":82}},"17":{"start":{"line":34,"column":0},"end":{"line":335,"column":3}},"18":{"start":{"line":36,"column":25},"end":{"line":36,"column":39}},"19":{"start":{"line":37,"column":22},"end":{"line":37,"column":30}},"20":{"start":{"line":38,"column":23},"end":{"line":38,"column":58}},"21":{"start":{"line":39,"column":37},"end":{"line":45,"column":5}},"22":{"start":{"line":46,"column":4},"end":{"line":53,"column":7}},"23":{"start":{"line":47,"column":8},"end":{"line":47,"column":139}},"24":{"start":{"line":49,"column":8},"end":{"line":49,"column":42}},"25":{"start":{"line":49,"column":31},"end":{"line":49,"column":41}},"26":{"start":{"line":50,"column":8},"end":{"line":50,"column":39}},"27":{"start":{"line":50,"column":25},"end":{"line":50,"column":38}},"28":{"start":{"line":52,"column":8},"end":{"line":52,"column":51}},"29":{"start":{"line":54,"column":4},"end":{"line":59,"column":7}},"30":{"start":{"line":55,"column":8},"end":{"line":55,"column":38}},"31":{"start":{"line":56,"column":8},"end":{"line":56,"column":29}},"32":{"start":{"line":58,"column":8},"end":{"line":58,"column":57}},"33":{"start":{"line":60,"column":4},"end":{"line":300,"column":7}},"34":{"start":{"line":61,"column":8},"end":{"line":65,"column":11}},"35":{"start":{"line":62,"column":12},"end":{"line":64,"column":76}},"36":{"start":{"line":63,"column":16},"end":{"line":63,"column":73}},"37":{"start":{"line":66,"column":8},"end":{"line":126,"column":11}},"38":{"start":{"line":67,"column":24},"end":{"line":67,"column":33}},"39":{"start":{"line":68,"column":12},"end":{"line":68,"column":36}},"40":{"start":{"line":69,"column":12},"end":{"line":69,"column":61}},"41":{"start":{"line":70,"column":12},"end":{"line":70,"column":38}},"42":{"start":{"line":71,"column":25},"end":{"line":71,"column":45}},"43":{"start":{"line":72,"column":12},"end":{"line":72,"column":48}},"44":{"start":{"line":73,"column":12},"end":{"line":73,"column":80}},"45":{"start":{"line":74,"column":12},"end":{"line":74,"column":60}},"46":{"start":{"line":75,"column":12},"end":{"line":88,"column":15}},"47":{"start":{"line":90,"column":12},"end":{"line":90,"column":38}},"48":{"start":{"line":91,"column":12},"end":{"line":91,"column":38}},"49":{"start":{"line":93,"column":24},"end":{"line":93,"column":49}},"50":{"start":{"line":94,"column":12},"end":{"line":96,"column":15}},"51":{"start":{"line":95,"column":28},"end":{"line":95,"column":38}},"52":{"start":{"line":97,"column":12},"end":{"line":97,"column":42}},"53":{"start":{"line":98,"column":12},"end":{"line":98,"column":80}},"54":{"start":{"line":99,"column":12},"end":{"line":99,"column":60}},"55":{"start":{"line":100,"column":12},"end":{"line":125,"column":15}},"56":{"start":{"line":127,"column":8},"end":{"line":153,"column":11}},"57":{"start":{"line":130,"column":20},"end":{"line":130,"column":30}},"58":{"start":{"line":133,"column":24},"end":{"line":133,"column":42}},"59":{"start":{"line":134,"column":12},"end":{"line":134,"column":61}},"60":{"start":{"line":135,"column":27},"end":{"line":135,"column":47}},"61":{"start":{"line":136,"column":12},"end":{"line":136,"column":48}},"62":{"start":{"line":137,"column":12},"end":{"line":137,"column":80}},"63":{"start":{"line":138,"column":12},"end":{"line":138,"column":60}},"64":{"start":{"line":139,"column":12},"end":{"line":152,"column":15}},"65":{"start":{"line":154,"column":8},"end":{"line":201,"column":11}},"66":{"start":{"line":157,"column":20},"end":{"line":157,"column":35}},"67":{"start":{"line":160,"column":20},"end":{"line":160,"column":38}},"68":{"start":{"line":163,"column":20},"end":{"line":163,"column":33}},"69":{"start":{"line":166,"column":26},"end":{"line":166,"column":44}},"70":{"start":{"line":167,"column":12},"end":{"line":167,"column":27}},"71":{"start":{"line":168,"column":12},"end":{"line":170,"column":15}},"72":{"start":{"line":169,"column":16},"end":{"line":169,"column":41}},"73":{"start":{"line":171,"column":25},"end":{"line":171,"column":45}},"74":{"start":{"line":172,"column":12},"end":{"line":172,"column":48}},"75":{"start":{"line":173,"column":12},"end":{"line":173,"column":80}},"76":{"start":{"line":174,"column":12},"end":{"line":174,"column":60}},"77":{"start":{"line":175,"column":12},"end":{"line":188,"column":15}},"78":{"start":{"line":190,"column":12},"end":{"line":190,"column":27}},"79":{"start":{"line":191,"column":12},"end":{"line":191,"column":27}},"80":{"start":{"line":192,"column":12},"end":{"line":192,"column":27}},"81":{"start":{"line":193,"column":12},"end":{"line":193,"column":42}},"82":{"start":{"line":194,"column":12},"end":{"line":194,"column":60}},"83":{"start":{"line":195,"column":12},"end":{"line":200,"column":15}},"84":{"start":{"line":202,"column":8},"end":{"line":235,"column":11}},"85":{"start":{"line":205,"column":20},"end":{"line":205,"column":31}},"86":{"start":{"line":208,"column":24},"end":{"line":208,"column":42}},"87":{"start":{"line":209,"column":35},"end":{"line":209,"column":155}},"88":{"start":{"line":210,"column":12},"end":{"line":210,"column":67}},"89":{"start":{"line":211,"column":27},"end":{"line":211,"column":53}},"90":{"start":{"line":212,"column":12},"end":{"line":212,"column":48}},"91":{"start":{"line":213,"column":12},"end":{"line":219,"column":15}},"92":{"start":{"line":220,"column":12},"end":{"line":220,"column":60}},"93":{"start":{"line":221,"column":12},"end":{"line":234,"column":15}},"94":{"start":{"line":236,"column":8},"end":{"line":272,"column":11}},"95":{"start":{"line":239,"column":20},"end":{"line":239,"column":31}},"96":{"start":{"line":242,"column":24},"end":{"line":242,"column":42}},"97":{"start":{"line":243,"column":35},"end":{"line":243,"column":149}},"98":{"start":{"line":244,"column":12},"end":{"line":244,"column":67}},"99":{"start":{"line":245,"column":27},"end":{"line":245,"column":53}},"100":{"start":{"line":246,"column":12},"end":{"line":246,"column":48}},"101":{"start":{"line":247,"column":12},"end":{"line":253,"column":15}},"102":{"start":{"line":254,"column":12},"end":{"line":254,"column":60}},"103":{"start":{"line":255,"column":12},"end":{"line":271,"column":15}},"104":{"start":{"line":273,"column":8},"end":{"line":299,"column":11}},"105":{"start":{"line":274,"column":24},"end":{"line":274,"column":33}},"106":{"start":{"line":275,"column":12},"end":{"line":275,"column":61}},"107":{"start":{"line":276,"column":12},"end":{"line":276,"column":36}},"108":{"start":{"line":277,"column":27},"end":{"line":277,"column":47}},"109":{"start":{"line":278,"column":12},"end":{"line":278,"column":48}},"110":{"start":{"line":279,"column":12},"end":{"line":279,"column":80}},"111":{"start":{"line":280,"column":12},"end":{"line":280,"column":60}},"112":{"start":{"line":281,"column":12},"end":{"line":294,"column":15}},"113":{"start":{"line":296,"column":12},"end":{"line":298,"column":88}},"114":{"start":{"line":297,"column":16},"end":{"line":297,"column":65}},"115":{"start":{"line":301,"column":4},"end":{"line":313,"column":7}},"116":{"start":{"line":302,"column":8},"end":{"line":312,"column":11}},"117":{"start":{"line":303,"column":24},"end":{"line":303,"column":26}},"118":{"start":{"line":304,"column":12},"end":{"line":304,"column":61}},"119":{"start":{"line":305,"column":12},"end":{"line":305,"column":29}},"120":{"start":{"line":306,"column":25},"end":{"line":306,"column":45}},"121":{"start":{"line":307,"column":12},"end":{"line":307,"column":48}},"122":{"start":{"line":308,"column":12},"end":{"line":308,"column":80}},"123":{"start":{"line":309,"column":12},"end":{"line":309,"column":56}},"124":{"start":{"line":310,"column":12},"end":{"line":310,"column":42}},"125":{"start":{"line":311,"column":12},"end":{"line":311,"column":49}},"126":{"start":{"line":314,"column":4},"end":{"line":334,"column":7}},"127":{"start":{"line":315,"column":8},"end":{"line":333,"column":11}},"128":{"start":{"line":316,"column":24},"end":{"line":316,"column":33}},"129":{"start":{"line":317,"column":12},"end":{"line":319,"column":15}},"130":{"start":{"line":318,"column":28},"end":{"line":318,"column":36}},"131":{"start":{"line":320,"column":12},"end":{"line":320,"column":36}},"132":{"start":{"line":321,"column":24},"end":{"line":321,"column":26}},"133":{"start":{"line":322,"column":12},"end":{"line":324,"column":15}},"134":{"start":{"line":323,"column":28},"end":{"line":323,"column":38}},"135":{"start":{"line":325,"column":12},"end":{"line":325,"column":29}},"136":{"start":{"line":326,"column":25},"end":{"line":326,"column":45}},"137":{"start":{"line":327,"column":12},"end":{"line":327,"column":48}},"138":{"start":{"line":328,"column":12},"end":{"line":328,"column":80}},"139":{"start":{"line":329,"column":12},"end":{"line":329,"column":60}},"140":{"start":{"line":330,"column":12},"end":{"line":330,"column":29}},"141":{"start":{"line":331,"column":12},"end":{"line":331,"column":42}},"142":{"start":{"line":332,"column":12},"end":{"line":332,"column":49}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":34,"column":25},"end":{"line":34,"column":26}},"loc":{"start":{"line":34,"column":31},"end":{"line":335,"column":1}},"line":34},"1":{"name":"(anonymous_1)","decl":{"start":{"line":46,"column":15},"end":{"line":46,"column":16}},"loc":{"start":{"line":46,"column":21},"end":{"line":53,"column":5}},"line":46},"2":{"name":"(anonymous_2)","decl":{"start":{"line":49,"column":25},"end":{"line":49,"column":26}},"loc":{"start":{"line":49,"column":31},"end":{"line":49,"column":41}},"line":49},"3":{"name":"(anonymous_3)","decl":{"start":{"line":50,"column":19},"end":{"line":50,"column":20}},"loc":{"start":{"line":50,"column":25},"end":{"line":50,"column":38}},"line":50},"4":{"name":"(anonymous_4)","decl":{"start":{"line":54,"column":14},"end":{"line":54,"column":15}},"loc":{"start":{"line":54,"column":20},"end":{"line":59,"column":5}},"line":54},"5":{"name":"(anonymous_5)","decl":{"start":{"line":60,"column":35},"end":{"line":60,"column":36}},"loc":{"start":{"line":60,"column":41},"end":{"line":300,"column":5}},"line":60},"6":{"name":"(anonymous_6)","decl":{"start":{"line":61,"column":81},"end":{"line":61,"column":82}},"loc":{"start":{"line":61,"column":87},"end":{"line":65,"column":9}},"line":61},"7":{"name":"(anonymous_7)","decl":{"start":{"line":62,"column":26},"end":{"line":62,"column":27}},"loc":{"start":{"line":62,"column":32},"end":{"line":64,"column":13}},"line":62},"8":{"name":"(anonymous_8)","decl":{"start":{"line":66,"column":37},"end":{"line":66,"column":38}},"loc":{"start":{"line":66,"column":43},"end":{"line":126,"column":9}},"line":66},"9":{"name":"(anonymous_9)","decl":{"start":{"line":95,"column":22},"end":{"line":95,"column":23}},"loc":{"start":{"line":95,"column":28},"end":{"line":95,"column":38}},"line":95},"10":{"name":"(anonymous_10)","decl":{"start":{"line":127,"column":61},"end":{"line":127,"column":62}},"loc":{"start":{"line":127,"column":67},"end":{"line":153,"column":9}},"line":127},"11":{"name":"(anonymous_11)","decl":{"start":{"line":129,"column":16},"end":{"line":129,"column":17}},"loc":{"start":{"line":129,"column":27},"end":{"line":131,"column":17}},"line":129},"12":{"name":"(anonymous_12)","decl":{"start":{"line":154,"column":59},"end":{"line":154,"column":60}},"loc":{"start":{"line":154,"column":65},"end":{"line":201,"column":9}},"line":154},"13":{"name":"(anonymous_13)","decl":{"start":{"line":156,"column":16},"end":{"line":156,"column":17}},"loc":{"start":{"line":156,"column":30},"end":{"line":158,"column":17}},"line":156},"14":{"name":"(anonymous_14)","decl":{"start":{"line":159,"column":16},"end":{"line":159,"column":17}},"loc":{"start":{"line":159,"column":34},"end":{"line":161,"column":17}},"line":159},"15":{"name":"(anonymous_15)","decl":{"start":{"line":162,"column":16},"end":{"line":162,"column":17}},"loc":{"start":{"line":162,"column":25},"end":{"line":164,"column":17}},"line":162},"16":{"name":"(anonymous_16)","decl":{"start":{"line":168,"column":56},"end":{"line":168,"column":57}},"loc":{"start":{"line":168,"column":62},"end":{"line":170,"column":13}},"line":168},"17":{"name":"(anonymous_17)","decl":{"start":{"line":202,"column":62},"end":{"line":202,"column":63}},"loc":{"start":{"line":202,"column":68},"end":{"line":235,"column":9}},"line":202},"18":{"name":"(anonymous_18)","decl":{"start":{"line":204,"column":16},"end":{"line":204,"column":17}},"loc":{"start":{"line":204,"column":27},"end":{"line":206,"column":17}},"line":204},"19":{"name":"(anonymous_19)","decl":{"start":{"line":236,"column":62},"end":{"line":236,"column":63}},"loc":{"start":{"line":236,"column":68},"end":{"line":272,"column":9}},"line":236},"20":{"name":"(anonymous_20)","decl":{"start":{"line":238,"column":16},"end":{"line":238,"column":17}},"loc":{"start":{"line":238,"column":27},"end":{"line":240,"column":17}},"line":238},"21":{"name":"(anonymous_21)","decl":{"start":{"line":273,"column":54},"end":{"line":273,"column":55}},"loc":{"start":{"line":273,"column":60},"end":{"line":299,"column":9}},"line":273},"22":{"name":"(anonymous_22)","decl":{"start":{"line":296,"column":26},"end":{"line":296,"column":27}},"loc":{"start":{"line":296,"column":32},"end":{"line":298,"column":13}},"line":296},"23":{"name":"(anonymous_23)","decl":{"start":{"line":301,"column":35},"end":{"line":301,"column":36}},"loc":{"start":{"line":301,"column":41},"end":{"line":313,"column":5}},"line":301},"24":{"name":"(anonymous_24)","decl":{"start":{"line":302,"column":39},"end":{"line":302,"column":40}},"loc":{"start":{"line":302,"column":45},"end":{"line":312,"column":9}},"line":302},"25":{"name":"(anonymous_25)","decl":{"start":{"line":314,"column":24},"end":{"line":314,"column":25}},"loc":{"start":{"line":314,"column":30},"end":{"line":334,"column":5}},"line":314},"26":{"name":"(anonymous_26)","decl":{"start":{"line":315,"column":42},"end":{"line":315,"column":43}},"loc":{"start":{"line":315,"column":48},"end":{"line":333,"column":9}},"line":315},"27":{"name":"(anonymous_27)","decl":{"start":{"line":318,"column":22},"end":{"line":318,"column":23}},"loc":{"start":{"line":318,"column":28},"end":{"line":318,"column":36}},"line":318},"28":{"name":"(anonymous_28)","decl":{"start":{"line":323,"column":22},"end":{"line":323,"column":23}},"loc":{"start":{"line":323,"column":28},"end":{"line":323,"column":38}},"line":323}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":9,"24":9,"25":19,"26":9,"27":9,"28":9,"29":1,"30":9,"31":9,"32":9,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":2,"68":4,"69":1,"70":1,"71":1,"72":2,"73":1,"74":1,"75":1,"76":1,"77":1,"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1,"86":1,"87":1,"88":1,"89":1,"90":1,"91":1,"92":1,"93":1,"94":1,"95":1,"96":1,"97":1,"98":1,"99":1,"100":1,"101":1,"102":1,"103":1,"104":1,"105":1,"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"112":1,"113":1,"114":1,"115":1,"116":1,"117":1,"118":1,"119":1,"120":1,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"136":1,"137":1,"138":1,"139":1,"140":1,"141":1,"142":1},"f":{"0":1,"1":9,"2":19,"3":9,"4":9,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":2,"15":4,"16":2,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-derived-gauge.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-derived-gauge.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport { TEST_ONLY } from '../src/common/time-util';\nimport {\n  LabelKey,\n  LabelValue,\n  MetricDescriptorType,\n  Timestamp,\n} from '../src/metrics/export/types';\nimport { DerivedGauge } from '../src/metrics/gauges/derived-gauge';\n\nconst METRIC_NAME = 'metric-name';\nconst METRIC_DESCRIPTION = 'metric-description';\nconst UNIT = '1';\nconst GAUGE_INT64 = MetricDescriptorType.GAUGE_INT64;\nconst GAUGE_DOUBLE = MetricDescriptorType.GAUGE_DOUBLE;\nconst LABEL_KEYS: LabelKey[] = [{ key: 'code', description: 'desc' }];\nconst LABEL_VALUES_200: LabelValue[] = [{ value: '200' }];\nconst LABEL_VALUES_400: LabelValue[] = [{ value: '400' }];\nconst LABEL_VALUES_EXRTA: LabelValue[] = [{ value: '200' }, { value: '400' }];\nconst EMPTY_CONSTANT_LABELS = new Map();\nconst CONSTANT_LABELS = new Map();\nCONSTANT_LABELS.set(\n  { key: 'host', description: 'host' },\n  { value: 'localhost' }\n);\n\ndescribe('DerivedGauge', () => {\n  let instance: DerivedGauge;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n  const expectedMetricDescriptor = {\n    name: METRIC_NAME,\n    description: METRIC_DESCRIPTION,\n    unit: UNIT,\n    type: GAUGE_INT64,\n    labelKeys: LABEL_KEYS,\n  };\n\n  beforeEach(() => {\n    instance = new DerivedGauge(\n      METRIC_NAME,\n      METRIC_DESCRIPTION,\n      UNIT,\n      GAUGE_INT64,\n      LABEL_KEYS,\n      EMPTY_CONSTANT_LABELS\n    );\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  describe('createTimeSeries()', () => {\n    it('should throw an error when the keys and values dont have same size', () => {\n      assert.throws(() => {\n        instance.createTimeSeries(LABEL_VALUES_EXRTA, new Map());\n      }, /^Error: Label Keys and Label Values don't have same size$/);\n    });\n    it('should return a Metric', () => {\n      const map = new Map();\n      map.set('key', 'value');\n      instance.createTimeSeries(LABEL_VALUES_200, map);\n      map.set('key1', 'value1');\n\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [\n            {\n              value: 2,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n      // add data in collection\n      map.set('key2', 'value2');\n      map.set('key3', 'value3');\n\n      // add new timeseries with length-method\n      const arr = new Array(5).fill('test');\n      instance.createTimeSeries(LABEL_VALUES_400, {\n        size: () => arr.length,\n      });\n\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 2);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [\n            {\n              value: 4,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n        {\n          labelValues: LABEL_VALUES_400,\n          points: [\n            {\n              value: 5,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n    });\n    it('should return a Metric (INT64) - custom object', () => {\n      class QueueManager {\n        getValue(): number {\n          return 45;\n        }\n      }\n      const obj = new QueueManager();\n      instance.createTimeSeries(LABEL_VALUES_200, obj);\n      const metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [\n            {\n              value: 45,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n    });\n\n    it('should return a Metric value from a function', () => {\n      class QueueManager {\n        private depth = 0;\n        get pendingJobs() {\n          return this.depth;\n        }\n        addJob() {\n          this.depth++;\n        }\n      }\n      const queue = new QueueManager();\n      queue.addJob();\n      instance.createTimeSeries(LABEL_VALUES_200, () => {\n        return queue.pendingJobs;\n      });\n\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [\n            {\n              value: 1,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n      // Simulate a adding multiple jobs in queue\n      queue.addJob();\n      queue.addJob();\n      queue.addJob();\n      metric = instance.getMetric();\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries[0].points, [\n        {\n          value: 4,\n          timestamp: { nanos: mockedTime.nanos, seconds: mockedTime.seconds },\n        },\n      ]);\n    });\n\n    it('should return a Metric (Double) - custom object', () => {\n      class QueueManager {\n        getValue(): number {\n          return 0.7;\n        }\n      }\n      const obj = new QueueManager();\n      const doubleInstance = new DerivedGauge(\n        METRIC_NAME,\n        METRIC_DESCRIPTION,\n        UNIT,\n        GAUGE_DOUBLE,\n        LABEL_KEYS,\n        EMPTY_CONSTANT_LABELS\n      );\n      doubleInstance.createTimeSeries(LABEL_VALUES_200, obj);\n      const metric = doubleInstance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, {\n        name: METRIC_NAME,\n        description: METRIC_DESCRIPTION,\n        unit: UNIT,\n        type: GAUGE_DOUBLE,\n        labelKeys: LABEL_KEYS,\n      });\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [\n            {\n              value: 0.7,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n    });\n\n    it('should return a Metric (Double) - custom object', () => {\n      class QueueManager {\n        getValue(): number {\n          return 0.7;\n        }\n      }\n      const obj = new QueueManager();\n      const doubleInstance = new DerivedGauge(\n        METRIC_NAME,\n        METRIC_DESCRIPTION,\n        UNIT,\n        GAUGE_DOUBLE,\n        LABEL_KEYS,\n        CONSTANT_LABELS\n      );\n      doubleInstance.createTimeSeries(LABEL_VALUES_200, obj);\n      const metric = doubleInstance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, {\n        name: METRIC_NAME,\n        description: METRIC_DESCRIPTION,\n        unit: UNIT,\n        type: GAUGE_DOUBLE,\n        labelKeys: [...LABEL_KEYS, ...Array.from(CONSTANT_LABELS.keys())],\n      });\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: [\n            ...LABEL_VALUES_200,\n            ...Array.from(CONSTANT_LABELS.values()),\n          ],\n          points: [\n            {\n              value: 0.7,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n    });\n\n    it('should not create same timeseries again', () => {\n      const map = new Map();\n      instance.createTimeSeries(LABEL_VALUES_200, map);\n      map.set('key', 'value');\n      const metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [\n            {\n              value: 1,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n\n      // create timeseries with same labels.\n      assert.throws(() => {\n        instance.createTimeSeries(LABEL_VALUES_200, map);\n      }, /^Error: A different time series with the same labels already exists.$/);\n    });\n  });\n  describe('removeTimeSeries()', () => {\n    it('should remove TimeSeries', () => {\n      const arr: string[] = [];\n      instance.createTimeSeries(LABEL_VALUES_200, arr);\n      arr.push('test');\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      instance.removeTimeSeries(LABEL_VALUES_200);\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric, null);\n    });\n  });\n  describe('clear()', () => {\n    it('should clear all TimeSeries', () => {\n      const map = new Map();\n      instance.createTimeSeries(LABEL_VALUES_200, {\n        size: () => map.size,\n      });\n      map.set('key', 'value');\n\n      const arr: string[] = [];\n      instance.createTimeSeries(LABEL_VALUES_400, {\n        size: () => arr.length,\n      });\n      arr.push('test');\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 2);\n      instance.clear();\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric, null);\n    });\n  });\n});\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"6fe202b5ad2f2f748db0c8edf85210027ae12ae4","contentHash":"e0bdca694fd970d57f125ced32a66ed6038c04fb28a74ed89873ac6ae36c753c"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-exporter-buffer.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-exporter-buffer.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":15},"end":{"line":18,"column":32}},"2":{"start":{"line":19,"column":14},"end":{"line":19,"column":31}},"3":{"start":{"line":20,"column":15},"end":{"line":20,"column":54}},"4":{"start":{"line":21,"column":27},"end":{"line":21,"column":71}},"5":{"start":{"line":22,"column":26},"end":{"line":22,"column":69}},"6":{"start":{"line":23,"column":20},"end":{"line":23,"column":59}},"7":{"start":{"line":24,"column":17},"end":{"line":24,"column":53}},"8":{"start":{"line":25,"column":17},"end":{"line":25,"column":54}},"9":{"start":{"line":26,"column":28},"end":{"line":26,"column":29}},"10":{"start":{"line":27,"column":31},"end":{"line":27,"column":35}},"11":{"start":{"line":28,"column":15},"end":{"line":28,"column":50}},"12":{"start":{"line":29,"column":28},"end":{"line":33,"column":1}},"13":{"start":{"line":34,"column":13},"end":{"line":34,"column":25}},"14":{"start":{"line":35,"column":13},"end":{"line":35,"column":34}},"15":{"start":{"line":36,"column":16},"end":{"line":36,"column":50}},"16":{"start":{"line":37,"column":21},"end":{"line":37,"column":23}},"17":{"start":{"line":38,"column":24},"end":{"line":52,"column":1}},"18":{"start":{"line":39,"column":22},"end":{"line":39,"column":24}},"19":{"start":{"line":40,"column":4},"end":{"line":50,"column":5}},"20":{"start":{"line":40,"column":17},"end":{"line":40,"column":18}},"21":{"start":{"line":41,"column":25},"end":{"line":41,"column":103}},"22":{"start":{"line":42,"column":8},"end":{"line":42,"column":25}},"23":{"start":{"line":43,"column":8},"end":{"line":48,"column":9}},"24":{"start":{"line":43,"column":21},"end":{"line":43,"column":22}},"25":{"start":{"line":44,"column":12},"end":{"line":47,"column":15}},"26":{"start":{"line":49,"column":8},"end":{"line":49,"column":33}},"27":{"start":{"line":51,"column":4},"end":{"line":51,"column":21}},"28":{"start":{"line":53,"column":0},"end":{"line":115,"column":3}},"29":{"start":{"line":58,"column":4},"end":{"line":63,"column":7}},"30":{"start":{"line":59,"column":8},"end":{"line":62,"column":11}},"31":{"start":{"line":60,"column":27},"end":{"line":60,"column":94}},"32":{"start":{"line":61,"column":12},"end":{"line":61,"column":74}},"33":{"start":{"line":67,"column":4},"end":{"line":75,"column":7}},"34":{"start":{"line":68,"column":8},"end":{"line":74,"column":11}},"35":{"start":{"line":69,"column":27},"end":{"line":69,"column":94}},"36":{"start":{"line":70,"column":34},"end":{"line":70,"column":58}},"37":{"start":{"line":71,"column":33},"end":{"line":71,"column":68}},"38":{"start":{"line":72,"column":12},"end":{"line":72,"column":80}},"39":{"start":{"line":73,"column":12},"end":{"line":73,"column":76}},"40":{"start":{"line":79,"column":4},"end":{"line":85,"column":7}},"41":{"start":{"line":80,"column":8},"end":{"line":84,"column":11}},"42":{"start":{"line":81,"column":27},"end":{"line":81,"column":94}},"43":{"start":{"line":82,"column":12},"end":{"line":82,"column":100}},"44":{"start":{"line":83,"column":12},"end":{"line":83,"column":60}},"45":{"start":{"line":89,"column":4},"end":{"line":100,"column":7}},"46":{"start":{"line":90,"column":8},"end":{"line":99,"column":11}},"47":{"start":{"line":91,"column":27},"end":{"line":91,"column":94}},"48":{"start":{"line":92,"column":30},"end":{"line":92,"column":66}},"49":{"start":{"line":93,"column":12},"end":{"line":95,"column":13}},"50":{"start":{"line":94,"column":16},"end":{"line":94,"column":45}},"51":{"start":{"line":96,"column":12},"end":{"line":96,"column":81}},"52":{"start":{"line":97,"column":12},"end":{"line":97,"column":100}},"53":{"start":{"line":98,"column":12},"end":{"line":98,"column":60}},"54":{"start":{"line":104,"column":4},"end":{"line":114,"column":7}},"55":{"start":{"line":105,"column":8},"end":{"line":113,"column":25}},"56":{"start":{"line":106,"column":27},"end":{"line":106,"column":94}},"57":{"start":{"line":107,"column":12},"end":{"line":107,"column":100}},"58":{"start":{"line":108,"column":12},"end":{"line":108,"column":60}},"59":{"start":{"line":109,"column":12},"end":{"line":112,"column":45}},"60":{"start":{"line":110,"column":16},"end":{"line":110,"column":64}},"61":{"start":{"line":111,"column":16},"end":{"line":111,"column":23}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":38,"column":24},"end":{"line":38,"column":25}},"loc":{"start":{"line":38,"column":33},"end":{"line":52,"column":1}},"line":38},"1":{"name":"(anonymous_1)","decl":{"start":{"line":53,"column":27},"end":{"line":53,"column":28}},"loc":{"start":{"line":53,"column":33},"end":{"line":115,"column":1}},"line":53},"2":{"name":"(anonymous_2)","decl":{"start":{"line":58,"column":37},"end":{"line":58,"column":38}},"loc":{"start":{"line":58,"column":43},"end":{"line":63,"column":5}},"line":58},"3":{"name":"(anonymous_3)","decl":{"start":{"line":59,"column":46},"end":{"line":59,"column":47}},"loc":{"start":{"line":59,"column":52},"end":{"line":62,"column":9}},"line":59},"4":{"name":"(anonymous_4)","decl":{"start":{"line":67,"column":30},"end":{"line":67,"column":31}},"loc":{"start":{"line":67,"column":36},"end":{"line":75,"column":5}},"line":67},"5":{"name":"(anonymous_5)","decl":{"start":{"line":68,"column":36},"end":{"line":68,"column":37}},"loc":{"start":{"line":68,"column":42},"end":{"line":74,"column":9}},"line":68},"6":{"name":"(anonymous_6)","decl":{"start":{"line":79,"column":28},"end":{"line":79,"column":29}},"loc":{"start":{"line":79,"column":34},"end":{"line":85,"column":5}},"line":79},"7":{"name":"(anonymous_7)","decl":{"start":{"line":80,"column":48},"end":{"line":80,"column":49}},"loc":{"start":{"line":80,"column":54},"end":{"line":84,"column":9}},"line":80},"8":{"name":"(anonymous_8)","decl":{"start":{"line":89,"column":41},"end":{"line":89,"column":42}},"loc":{"start":{"line":89,"column":47},"end":{"line":100,"column":5}},"line":89},"9":{"name":"(anonymous_9)","decl":{"start":{"line":90,"column":33},"end":{"line":90,"column":34}},"loc":{"start":{"line":90,"column":39},"end":{"line":99,"column":9}},"line":90},"10":{"name":"(anonymous_10)","decl":{"start":{"line":104,"column":52},"end":{"line":104,"column":53}},"loc":{"start":{"line":104,"column":58},"end":{"line":114,"column":5}},"line":104},"11":{"name":"(anonymous_11)","decl":{"start":{"line":105,"column":38},"end":{"line":105,"column":39}},"loc":{"start":{"line":105,"column":46},"end":{"line":113,"column":9}},"line":105},"12":{"name":"(anonymous_12)","decl":{"start":{"line":109,"column":23},"end":{"line":109,"column":24}},"loc":{"start":{"line":109,"column":29},"end":{"line":112,"column":13}},"line":109}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":3,"22":3,"23":3,"24":3,"25":30,"26":3,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":3,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1},"f":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-exporter-buffer.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-exporter-buffer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport { SpanKind } from '../src';\nimport * as logger from '../src/common/console-logger';\nimport { NoopExporter } from '../src/exporters/console-exporter';\nimport { ExporterBuffer } from '../src/exporters/exporter-buffer';\nimport { RootSpan } from '../src/trace/model/root-span';\nimport { CoreTracer } from '../src/trace/model/tracer';\n\nconst exporter = new NoopExporter();\nconst DEFAULT_BUFFER_SIZE = 3;\nconst DEFAULT_BUFFER_TIMEOUT = 2000; // time in milliseconds\nconst tracer = new CoreTracer().start({});\n\nconst defaultBufferConfig = {\n  bufferSize: DEFAULT_BUFFER_SIZE,\n  bufferTimeout: DEFAULT_BUFFER_TIMEOUT,\n  logger: logger.logger(),\n};\n\nconst name = 'MySpanName';\nconst kind = SpanKind.SERVER;\nconst traceId = 'd4cda95b652f4a1592b449d5929fda1b';\nconst parentSpanId = '';\n\nconst createRootSpans = (num: number): RootSpan[] => {\n  const rootSpans = [];\n  for (let i = 0; i < num; i++) {\n    const rootSpan = new RootSpan(\n      tracer,\n      `rootSpan.${i}`,\n      kind,\n      traceId,\n      parentSpanId\n    );\n    rootSpan.start();\n    for (let j = 0; j < 10; j++) {\n      rootSpan.startChildSpan({\n        name: `childSpan.${i}.${j}`,\n        kind: SpanKind.CLIENT,\n      });\n    }\n    rootSpans.push(rootSpan);\n  }\n  return rootSpans;\n};\n\ndescribe('ExporterBuffer', () => {\n  /**\n   * Should create a Buffer with exporter, DEFAULT_BUFFER_SIZE and\n   * DEFAULT_BUFFER_TIMEOUT\n   */\n  describe('new ExporterBuffer()', () => {\n    it('should create a Buffer instance', () => {\n      const buffer = new ExporterBuffer(exporter, defaultBufferConfig);\n      assert.ok(buffer instanceof ExporterBuffer);\n    });\n  });\n\n  /**\n   * Should return the Buffer\n   */\n  describe('setBufferSize', () => {\n    it('should set BufferSize', () => {\n      const buffer = new ExporterBuffer(exporter, defaultBufferConfig);\n      const newBufferSize = DEFAULT_BUFFER_SIZE + 10;\n      const bufferResize = buffer.setBufferSize(newBufferSize);\n      assert.ok(bufferResize instanceof ExporterBuffer);\n      assert.strictEqual(bufferResize.getBufferSize(), newBufferSize);\n    });\n  });\n\n  /**\n   * Should add one item to the Buffer\n   */\n  describe('addToBuffer', () => {\n    it('should add one item to the Buffer', () => {\n      const buffer = new ExporterBuffer(exporter, defaultBufferConfig);\n      buffer.addToBuffer(\n        new RootSpan(tracer, name, kind, traceId, parentSpanId)\n      );\n      assert.strictEqual(buffer.getQueue().length, 1);\n    });\n  });\n\n  /**\n   * Should force flush\n   */\n  describe('addToBuffer force flush ', () => {\n    it('should force flush', () => {\n      const buffer = new ExporterBuffer(exporter, defaultBufferConfig);\n      const rootSpans = createRootSpans(DEFAULT_BUFFER_SIZE);\n      for (const rootSpan of rootSpans) {\n        buffer.addToBuffer(rootSpan);\n      }\n      assert.strictEqual(buffer.getQueue().length, buffer.getBufferSize());\n      buffer.addToBuffer(\n        new RootSpan(tracer, name, kind, traceId, parentSpanId)\n      );\n      assert.strictEqual(buffer.getQueue().length, 0);\n    });\n  });\n\n  /**\n   * Should flush by timeout\n   */\n  describe('addToBuffer force flush by timeout ', () => {\n    it('should flush by timeout', done => {\n      const buffer = new ExporterBuffer(exporter, defaultBufferConfig);\n      buffer.addToBuffer(\n        new RootSpan(tracer, name, kind, traceId, parentSpanId)\n      );\n      assert.strictEqual(buffer.getQueue().length, 1);\n      setTimeout(() => {\n        assert.strictEqual(buffer.getQueue().length, 0);\n        done();\n      }, DEFAULT_BUFFER_TIMEOUT + 100);\n    }).timeout(5000);\n  });\n});\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"db154710c62c307802e64b5c5c768f5355a93b5c","contentHash":"0ff9cdd6d8434c1a7fb0aa04b06123d5225b7e7a7000a30860737457f23e1c4f"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-gauge.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-gauge.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":15},"end":{"line":18,"column":32}},"2":{"start":{"line":19,"column":20},"end":{"line":19,"column":54}},"3":{"start":{"line":20,"column":16},"end":{"line":20,"column":54}},"4":{"start":{"line":21,"column":16},"end":{"line":21,"column":54}},"5":{"start":{"line":22,"column":20},"end":{"line":22,"column":33}},"6":{"start":{"line":23,"column":27},"end":{"line":23,"column":47}},"7":{"start":{"line":24,"column":13},"end":{"line":24,"column":16}},"8":{"start":{"line":25,"column":20},"end":{"line":25,"column":60}},"9":{"start":{"line":26,"column":21},"end":{"line":26,"column":62}},"10":{"start":{"line":27,"column":19},"end":{"line":27,"column":57}},"11":{"start":{"line":28,"column":25},"end":{"line":28,"column":43}},"12":{"start":{"line":29,"column":25},"end":{"line":29,"column":43}},"13":{"start":{"line":30,"column":27},"end":{"line":30,"column":63}},"14":{"start":{"line":31,"column":26},"end":{"line":33,"column":1}},"15":{"start":{"line":34,"column":30},"end":{"line":34,"column":39}},"16":{"start":{"line":35,"column":24},"end":{"line":35,"column":33}},"17":{"start":{"line":36,"column":0},"end":{"line":36,"column":82}},"18":{"start":{"line":37,"column":0},"end":{"line":347,"column":3}},"19":{"start":{"line":39,"column":25},"end":{"line":39,"column":39}},"20":{"start":{"line":40,"column":22},"end":{"line":40,"column":30}},"21":{"start":{"line":41,"column":23},"end":{"line":41,"column":58}},"22":{"start":{"line":42,"column":37},"end":{"line":48,"column":5}},"23":{"start":{"line":49,"column":4},"end":{"line":56,"column":7}},"24":{"start":{"line":50,"column":8},"end":{"line":50,"column":124}},"25":{"start":{"line":52,"column":8},"end":{"line":52,"column":42}},"26":{"start":{"line":52,"column":31},"end":{"line":52,"column":41}},"27":{"start":{"line":53,"column":8},"end":{"line":53,"column":39}},"28":{"start":{"line":53,"column":25},"end":{"line":53,"column":38}},"29":{"start":{"line":55,"column":8},"end":{"line":55,"column":51}},"30":{"start":{"line":57,"column":4},"end":{"line":62,"column":7}},"31":{"start":{"line":58,"column":8},"end":{"line":58,"column":38}},"32":{"start":{"line":59,"column":8},"end":{"line":59,"column":29}},"33":{"start":{"line":61,"column":8},"end":{"line":61,"column":57}},"34":{"start":{"line":63,"column":4},"end":{"line":166,"column":7}},"35":{"start":{"line":64,"column":8},"end":{"line":68,"column":11}},"36":{"start":{"line":65,"column":12},"end":{"line":67,"column":76}},"37":{"start":{"line":66,"column":16},"end":{"line":66,"column":67}},"38":{"start":{"line":69,"column":8},"end":{"line":123,"column":11}},"39":{"start":{"line":70,"column":26},"end":{"line":70,"column":74}},"40":{"start":{"line":71,"column":12},"end":{"line":71,"column":26}},"41":{"start":{"line":72,"column":25},"end":{"line":72,"column":45}},"42":{"start":{"line":73,"column":12},"end":{"line":73,"column":48}},"43":{"start":{"line":74,"column":12},"end":{"line":74,"column":80}},"44":{"start":{"line":75,"column":12},"end":{"line":75,"column":60}},"45":{"start":{"line":76,"column":12},"end":{"line":89,"column":15}},"46":{"start":{"line":91,"column":12},"end":{"line":91,"column":25}},"47":{"start":{"line":92,"column":27},"end":{"line":92,"column":75}},"48":{"start":{"line":93,"column":12},"end":{"line":93,"column":27}},"49":{"start":{"line":94,"column":12},"end":{"line":94,"column":42}},"50":{"start":{"line":95,"column":12},"end":{"line":95,"column":80}},"51":{"start":{"line":96,"column":12},"end":{"line":96,"column":60}},"52":{"start":{"line":97,"column":12},"end":{"line":122,"column":15}},"53":{"start":{"line":124,"column":8},"end":{"line":165,"column":11}},"54":{"start":{"line":125,"column":26},"end":{"line":125,"column":74}},"55":{"start":{"line":126,"column":12},"end":{"line":126,"column":26}},"56":{"start":{"line":127,"column":25},"end":{"line":127,"column":45}},"57":{"start":{"line":128,"column":12},"end":{"line":128,"column":48}},"58":{"start":{"line":129,"column":12},"end":{"line":129,"column":80}},"59":{"start":{"line":130,"column":12},"end":{"line":130,"column":60}},"60":{"start":{"line":131,"column":12},"end":{"line":144,"column":15}},"61":{"start":{"line":146,"column":27},"end":{"line":146,"column":75}},"62":{"start":{"line":147,"column":12},"end":{"line":147,"column":27}},"63":{"start":{"line":148,"column":12},"end":{"line":148,"column":42}},"64":{"start":{"line":149,"column":12},"end":{"line":149,"column":80}},"65":{"start":{"line":150,"column":12},"end":{"line":150,"column":60}},"66":{"start":{"line":151,"column":12},"end":{"line":164,"column":15}},"67":{"start":{"line":167,"column":4},"end":{"line":319,"column":7}},"68":{"start":{"line":168,"column":8},"end":{"line":189,"column":11}},"69":{"start":{"line":169,"column":26},"end":{"line":169,"column":57}},"70":{"start":{"line":170,"column":12},"end":{"line":170,"column":26}},"71":{"start":{"line":171,"column":27},"end":{"line":171,"column":47}},"72":{"start":{"line":172,"column":12},"end":{"line":172,"column":48}},"73":{"start":{"line":173,"column":12},"end":{"line":173,"column":80}},"74":{"start":{"line":174,"column":12},"end":{"line":174,"column":60}},"75":{"start":{"line":175,"column":12},"end":{"line":188,"column":15}},"76":{"start":{"line":190,"column":8},"end":{"line":207,"column":11}},"77":{"start":{"line":191,"column":12},"end":{"line":194,"column":38}},"78":{"start":{"line":195,"column":26},"end":{"line":198,"column":14}},"79":{"start":{"line":199,"column":12},"end":{"line":199,"column":27}},"80":{"start":{"line":200,"column":27},"end":{"line":203,"column":14}},"81":{"start":{"line":204,"column":12},"end":{"line":204,"column":28}},"82":{"start":{"line":205,"column":27},"end":{"line":205,"column":47}},"83":{"start":{"line":206,"column":12},"end":{"line":206,"column":60}},"84":{"start":{"line":208,"column":8},"end":{"line":243,"column":11}},"85":{"start":{"line":209,"column":12},"end":{"line":212,"column":32}},"86":{"start":{"line":213,"column":26},"end":{"line":216,"column":14}},"87":{"start":{"line":217,"column":12},"end":{"line":217,"column":27}},"88":{"start":{"line":218,"column":27},"end":{"line":218,"column":47}},"89":{"start":{"line":219,"column":12},"end":{"line":219,"column":60}},"90":{"start":{"line":220,"column":12},"end":{"line":224,"column":15}},"91":{"start":{"line":225,"column":12},"end":{"line":242,"column":15}},"92":{"start":{"line":244,"column":8},"end":{"line":275,"column":11}},"93":{"start":{"line":245,"column":12},"end":{"line":249,"column":38}},"94":{"start":{"line":250,"column":26},"end":{"line":250,"column":57}},"95":{"start":{"line":251,"column":12},"end":{"line":251,"column":27}},"96":{"start":{"line":252,"column":27},"end":{"line":252,"column":47}},"97":{"start":{"line":253,"column":12},"end":{"line":253,"column":48}},"98":{"start":{"line":254,"column":12},"end":{"line":254,"column":74}},"99":{"start":{"line":255,"column":12},"end":{"line":255,"column":62}},"100":{"start":{"line":256,"column":12},"end":{"line":256,"column":60}},"101":{"start":{"line":257,"column":12},"end":{"line":274,"column":15}},"102":{"start":{"line":276,"column":8},"end":{"line":318,"column":11}},"103":{"start":{"line":277,"column":26},"end":{"line":277,"column":57}},"104":{"start":{"line":278,"column":12},"end":{"line":278,"column":27}},"105":{"start":{"line":279,"column":25},"end":{"line":279,"column":45}},"106":{"start":{"line":280,"column":12},"end":{"line":280,"column":48}},"107":{"start":{"line":281,"column":12},"end":{"line":281,"column":80}},"108":{"start":{"line":282,"column":12},"end":{"line":282,"column":60}},"109":{"start":{"line":283,"column":12},"end":{"line":296,"column":15}},"110":{"start":{"line":298,"column":27},"end":{"line":298,"column":58}},"111":{"start":{"line":299,"column":12},"end":{"line":299,"column":28}},"112":{"start":{"line":300,"column":12},"end":{"line":300,"column":42}},"113":{"start":{"line":301,"column":12},"end":{"line":301,"column":48}},"114":{"start":{"line":302,"column":12},"end":{"line":302,"column":80}},"115":{"start":{"line":303,"column":12},"end":{"line":303,"column":60}},"116":{"start":{"line":304,"column":12},"end":{"line":317,"column":15}},"117":{"start":{"line":320,"column":4},"end":{"line":331,"column":7}},"118":{"start":{"line":321,"column":8},"end":{"line":330,"column":11}},"119":{"start":{"line":322,"column":26},"end":{"line":322,"column":74}},"120":{"start":{"line":323,"column":12},"end":{"line":323,"column":26}},"121":{"start":{"line":324,"column":25},"end":{"line":324,"column":45}},"122":{"start":{"line":325,"column":12},"end":{"line":325,"column":48}},"123":{"start":{"line":326,"column":12},"end":{"line":326,"column":80}},"124":{"start":{"line":327,"column":12},"end":{"line":327,"column":56}},"125":{"start":{"line":328,"column":12},"end":{"line":328,"column":42}},"126":{"start":{"line":329,"column":12},"end":{"line":329,"column":49}},"127":{"start":{"line":332,"column":4},"end":{"line":346,"column":7}},"128":{"start":{"line":333,"column":8},"end":{"line":345,"column":11}},"129":{"start":{"line":334,"column":26},"end":{"line":334,"column":74}},"130":{"start":{"line":335,"column":12},"end":{"line":335,"column":26}},"131":{"start":{"line":336,"column":27},"end":{"line":336,"column":75}},"132":{"start":{"line":337,"column":12},"end":{"line":337,"column":27}},"133":{"start":{"line":338,"column":25},"end":{"line":338,"column":45}},"134":{"start":{"line":339,"column":12},"end":{"line":339,"column":48}},"135":{"start":{"line":340,"column":12},"end":{"line":340,"column":80}},"136":{"start":{"line":341,"column":12},"end":{"line":341,"column":60}},"137":{"start":{"line":342,"column":12},"end":{"line":342,"column":29}},"138":{"start":{"line":343,"column":12},"end":{"line":343,"column":42}},"139":{"start":{"line":344,"column":12},"end":{"line":344,"column":49}},"140":{"start":{"line":348,"column":0},"end":{"line":603,"column":3}},"141":{"start":{"line":350,"column":25},"end":{"line":350,"column":39}},"142":{"start":{"line":351,"column":22},"end":{"line":351,"column":30}},"143":{"start":{"line":352,"column":23},"end":{"line":352,"column":58}},"144":{"start":{"line":353,"column":37},"end":{"line":359,"column":5}},"145":{"start":{"line":360,"column":4},"end":{"line":367,"column":7}},"146":{"start":{"line":361,"column":8},"end":{"line":361,"column":125}},"147":{"start":{"line":363,"column":8},"end":{"line":363,"column":42}},"148":{"start":{"line":363,"column":31},"end":{"line":363,"column":41}},"149":{"start":{"line":364,"column":8},"end":{"line":364,"column":39}},"150":{"start":{"line":364,"column":25},"end":{"line":364,"column":38}},"151":{"start":{"line":366,"column":8},"end":{"line":366,"column":51}},"152":{"start":{"line":368,"column":4},"end":{"line":373,"column":7}},"153":{"start":{"line":369,"column":8},"end":{"line":369,"column":38}},"154":{"start":{"line":370,"column":8},"end":{"line":370,"column":29}},"155":{"start":{"line":372,"column":8},"end":{"line":372,"column":57}},"156":{"start":{"line":374,"column":4},"end":{"line":476,"column":7}},"157":{"start":{"line":375,"column":8},"end":{"line":379,"column":11}},"158":{"start":{"line":376,"column":12},"end":{"line":378,"column":76}},"159":{"start":{"line":377,"column":16},"end":{"line":377,"column":67}},"160":{"start":{"line":380,"column":8},"end":{"line":433,"column":11}},"161":{"start":{"line":381,"column":26},"end":{"line":381,"column":74}},"162":{"start":{"line":382,"column":12},"end":{"line":382,"column":29}},"163":{"start":{"line":383,"column":25},"end":{"line":383,"column":45}},"164":{"start":{"line":384,"column":12},"end":{"line":384,"column":48}},"165":{"start":{"line":385,"column":12},"end":{"line":385,"column":80}},"166":{"start":{"line":386,"column":12},"end":{"line":386,"column":60}},"167":{"start":{"line":387,"column":12},"end":{"line":400,"column":15}},"168":{"start":{"line":402,"column":12},"end":{"line":402,"column":28}},"169":{"start":{"line":403,"column":27},"end":{"line":403,"column":75}},"170":{"start":{"line":404,"column":12},"end":{"line":404,"column":29}},"171":{"start":{"line":405,"column":12},"end":{"line":405,"column":42}},"172":{"start":{"line":406,"column":12},"end":{"line":406,"column":60}},"173":{"start":{"line":407,"column":12},"end":{"line":432,"column":15}},"174":{"start":{"line":434,"column":8},"end":{"line":475,"column":11}},"175":{"start":{"line":435,"column":26},"end":{"line":435,"column":74}},"176":{"start":{"line":436,"column":12},"end":{"line":436,"column":28}},"177":{"start":{"line":437,"column":25},"end":{"line":437,"column":45}},"178":{"start":{"line":438,"column":12},"end":{"line":438,"column":48}},"179":{"start":{"line":439,"column":12},"end":{"line":439,"column":80}},"180":{"start":{"line":440,"column":12},"end":{"line":440,"column":60}},"181":{"start":{"line":441,"column":12},"end":{"line":454,"column":15}},"182":{"start":{"line":456,"column":27},"end":{"line":456,"column":75}},"183":{"start":{"line":457,"column":12},"end":{"line":457,"column":30}},"184":{"start":{"line":458,"column":12},"end":{"line":458,"column":42}},"185":{"start":{"line":459,"column":12},"end":{"line":459,"column":80}},"186":{"start":{"line":460,"column":12},"end":{"line":460,"column":60}},"187":{"start":{"line":461,"column":12},"end":{"line":474,"column":15}},"188":{"start":{"line":477,"column":4},"end":{"line":575,"column":7}},"189":{"start":{"line":478,"column":8},"end":{"line":499,"column":11}},"190":{"start":{"line":479,"column":26},"end":{"line":479,"column":57}},"191":{"start":{"line":480,"column":12},"end":{"line":480,"column":28}},"192":{"start":{"line":481,"column":27},"end":{"line":481,"column":47}},"193":{"start":{"line":482,"column":12},"end":{"line":482,"column":48}},"194":{"start":{"line":483,"column":12},"end":{"line":483,"column":80}},"195":{"start":{"line":484,"column":12},"end":{"line":484,"column":60}},"196":{"start":{"line":485,"column":12},"end":{"line":498,"column":15}},"197":{"start":{"line":500,"column":8},"end":{"line":542,"column":11}},"198":{"start":{"line":501,"column":26},"end":{"line":501,"column":57}},"199":{"start":{"line":502,"column":12},"end":{"line":502,"column":29}},"200":{"start":{"line":503,"column":25},"end":{"line":503,"column":45}},"201":{"start":{"line":504,"column":12},"end":{"line":504,"column":48}},"202":{"start":{"line":505,"column":12},"end":{"line":505,"column":80}},"203":{"start":{"line":506,"column":12},"end":{"line":506,"column":60}},"204":{"start":{"line":507,"column":12},"end":{"line":520,"column":15}},"205":{"start":{"line":522,"column":27},"end":{"line":522,"column":58}},"206":{"start":{"line":523,"column":12},"end":{"line":523,"column":30}},"207":{"start":{"line":524,"column":12},"end":{"line":524,"column":42}},"208":{"start":{"line":525,"column":12},"end":{"line":525,"column":48}},"209":{"start":{"line":526,"column":12},"end":{"line":526,"column":80}},"210":{"start":{"line":527,"column":12},"end":{"line":527,"column":60}},"211":{"start":{"line":528,"column":12},"end":{"line":541,"column":15}},"212":{"start":{"line":543,"column":8},"end":{"line":574,"column":11}},"213":{"start":{"line":544,"column":12},"end":{"line":548,"column":38}},"214":{"start":{"line":549,"column":26},"end":{"line":549,"column":57}},"215":{"start":{"line":550,"column":12},"end":{"line":550,"column":28}},"216":{"start":{"line":551,"column":27},"end":{"line":551,"column":47}},"217":{"start":{"line":552,"column":12},"end":{"line":552,"column":48}},"218":{"start":{"line":553,"column":12},"end":{"line":553,"column":74}},"219":{"start":{"line":554,"column":12},"end":{"line":554,"column":62}},"220":{"start":{"line":555,"column":12},"end":{"line":555,"column":60}},"221":{"start":{"line":556,"column":12},"end":{"line":573,"column":15}},"222":{"start":{"line":576,"column":4},"end":{"line":587,"column":7}},"223":{"start":{"line":577,"column":8},"end":{"line":586,"column":11}},"224":{"start":{"line":578,"column":26},"end":{"line":578,"column":74}},"225":{"start":{"line":579,"column":12},"end":{"line":579,"column":29}},"226":{"start":{"line":580,"column":25},"end":{"line":580,"column":45}},"227":{"start":{"line":581,"column":12},"end":{"line":581,"column":48}},"228":{"start":{"line":582,"column":12},"end":{"line":582,"column":80}},"229":{"start":{"line":583,"column":12},"end":{"line":583,"column":56}},"230":{"start":{"line":584,"column":12},"end":{"line":584,"column":42}},"231":{"start":{"line":585,"column":12},"end":{"line":585,"column":49}},"232":{"start":{"line":588,"column":4},"end":{"line":602,"column":7}},"233":{"start":{"line":589,"column":8},"end":{"line":601,"column":11}},"234":{"start":{"line":590,"column":26},"end":{"line":590,"column":74}},"235":{"start":{"line":591,"column":12},"end":{"line":591,"column":29}},"236":{"start":{"line":592,"column":27},"end":{"line":592,"column":75}},"237":{"start":{"line":593,"column":12},"end":{"line":593,"column":29}},"238":{"start":{"line":594,"column":25},"end":{"line":594,"column":45}},"239":{"start":{"line":595,"column":12},"end":{"line":595,"column":48}},"240":{"start":{"line":596,"column":12},"end":{"line":596,"column":80}},"241":{"start":{"line":597,"column":12},"end":{"line":597,"column":60}},"242":{"start":{"line":598,"column":12},"end":{"line":598,"column":29}},"243":{"start":{"line":599,"column":12},"end":{"line":599,"column":42}},"244":{"start":{"line":600,"column":12},"end":{"line":600,"column":49}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":37,"column":24},"end":{"line":37,"column":25}},"loc":{"start":{"line":37,"column":30},"end":{"line":347,"column":1}},"line":37},"1":{"name":"(anonymous_1)","decl":{"start":{"line":49,"column":15},"end":{"line":49,"column":16}},"loc":{"start":{"line":49,"column":21},"end":{"line":56,"column":5}},"line":49},"2":{"name":"(anonymous_2)","decl":{"start":{"line":52,"column":25},"end":{"line":52,"column":26}},"loc":{"start":{"line":52,"column":31},"end":{"line":52,"column":41}},"line":52},"3":{"name":"(anonymous_3)","decl":{"start":{"line":53,"column":19},"end":{"line":53,"column":20}},"loc":{"start":{"line":53,"column":25},"end":{"line":53,"column":38}},"line":53},"4":{"name":"(anonymous_4)","decl":{"start":{"line":57,"column":14},"end":{"line":57,"column":15}},"loc":{"start":{"line":57,"column":20},"end":{"line":62,"column":5}},"line":57},"5":{"name":"(anonymous_5)","decl":{"start":{"line":63,"column":40},"end":{"line":63,"column":41}},"loc":{"start":{"line":63,"column":46},"end":{"line":166,"column":5}},"line":63},"6":{"name":"(anonymous_6)","decl":{"start":{"line":64,"column":81},"end":{"line":64,"column":82}},"loc":{"start":{"line":64,"column":87},"end":{"line":68,"column":9}},"line":64},"7":{"name":"(anonymous_7)","decl":{"start":{"line":65,"column":26},"end":{"line":65,"column":27}},"loc":{"start":{"line":65,"column":32},"end":{"line":67,"column":13}},"line":65},"8":{"name":"(anonymous_8)","decl":{"start":{"line":69,"column":37},"end":{"line":69,"column":38}},"loc":{"start":{"line":69,"column":43},"end":{"line":123,"column":9}},"line":69},"9":{"name":"(anonymous_9)","decl":{"start":{"line":124,"column":54},"end":{"line":124,"column":55}},"loc":{"start":{"line":124,"column":60},"end":{"line":165,"column":9}},"line":124},"10":{"name":"(anonymous_10)","decl":{"start":{"line":167,"column":39},"end":{"line":167,"column":40}},"loc":{"start":{"line":167,"column":45},"end":{"line":319,"column":5}},"line":167},"11":{"name":"(anonymous_11)","decl":{"start":{"line":168,"column":51},"end":{"line":168,"column":52}},"loc":{"start":{"line":168,"column":57},"end":{"line":189,"column":9}},"line":168},"12":{"name":"(anonymous_12)","decl":{"start":{"line":190,"column":68},"end":{"line":190,"column":69}},"loc":{"start":{"line":190,"column":74},"end":{"line":207,"column":9}},"line":190},"13":{"name":"(anonymous_13)","decl":{"start":{"line":208,"column":41},"end":{"line":208,"column":42}},"loc":{"start":{"line":208,"column":47},"end":{"line":243,"column":9}},"line":208},"14":{"name":"(anonymous_14)","decl":{"start":{"line":244,"column":58},"end":{"line":244,"column":59}},"loc":{"start":{"line":244,"column":64},"end":{"line":275,"column":9}},"line":244},"15":{"name":"(anonymous_15)","decl":{"start":{"line":276,"column":63},"end":{"line":276,"column":64}},"loc":{"start":{"line":276,"column":69},"end":{"line":318,"column":9}},"line":276},"16":{"name":"(anonymous_16)","decl":{"start":{"line":320,"column":35},"end":{"line":320,"column":36}},"loc":{"start":{"line":320,"column":41},"end":{"line":331,"column":5}},"line":320},"17":{"name":"(anonymous_17)","decl":{"start":{"line":321,"column":39},"end":{"line":321,"column":40}},"loc":{"start":{"line":321,"column":45},"end":{"line":330,"column":9}},"line":321},"18":{"name":"(anonymous_18)","decl":{"start":{"line":332,"column":24},"end":{"line":332,"column":25}},"loc":{"start":{"line":332,"column":30},"end":{"line":346,"column":5}},"line":332},"19":{"name":"(anonymous_19)","decl":{"start":{"line":333,"column":42},"end":{"line":333,"column":43}},"loc":{"start":{"line":333,"column":48},"end":{"line":345,"column":9}},"line":333},"20":{"name":"(anonymous_20)","decl":{"start":{"line":348,"column":25},"end":{"line":348,"column":26}},"loc":{"start":{"line":348,"column":31},"end":{"line":603,"column":1}},"line":348},"21":{"name":"(anonymous_21)","decl":{"start":{"line":360,"column":15},"end":{"line":360,"column":16}},"loc":{"start":{"line":360,"column":21},"end":{"line":367,"column":5}},"line":360},"22":{"name":"(anonymous_22)","decl":{"start":{"line":363,"column":25},"end":{"line":363,"column":26}},"loc":{"start":{"line":363,"column":31},"end":{"line":363,"column":41}},"line":363},"23":{"name":"(anonymous_23)","decl":{"start":{"line":364,"column":19},"end":{"line":364,"column":20}},"loc":{"start":{"line":364,"column":25},"end":{"line":364,"column":38}},"line":364},"24":{"name":"(anonymous_24)","decl":{"start":{"line":368,"column":14},"end":{"line":368,"column":15}},"loc":{"start":{"line":368,"column":20},"end":{"line":373,"column":5}},"line":368},"25":{"name":"(anonymous_25)","decl":{"start":{"line":374,"column":40},"end":{"line":374,"column":41}},"loc":{"start":{"line":374,"column":46},"end":{"line":476,"column":5}},"line":374},"26":{"name":"(anonymous_26)","decl":{"start":{"line":375,"column":81},"end":{"line":375,"column":82}},"loc":{"start":{"line":375,"column":87},"end":{"line":379,"column":9}},"line":375},"27":{"name":"(anonymous_27)","decl":{"start":{"line":376,"column":26},"end":{"line":376,"column":27}},"loc":{"start":{"line":376,"column":32},"end":{"line":378,"column":13}},"line":376},"28":{"name":"(anonymous_28)","decl":{"start":{"line":380,"column":37},"end":{"line":380,"column":38}},"loc":{"start":{"line":380,"column":43},"end":{"line":433,"column":9}},"line":380},"29":{"name":"(anonymous_29)","decl":{"start":{"line":434,"column":54},"end":{"line":434,"column":55}},"loc":{"start":{"line":434,"column":60},"end":{"line":475,"column":9}},"line":434},"30":{"name":"(anonymous_30)","decl":{"start":{"line":477,"column":39},"end":{"line":477,"column":40}},"loc":{"start":{"line":477,"column":45},"end":{"line":575,"column":5}},"line":477},"31":{"name":"(anonymous_31)","decl":{"start":{"line":478,"column":51},"end":{"line":478,"column":52}},"loc":{"start":{"line":478,"column":57},"end":{"line":499,"column":9}},"line":478},"32":{"name":"(anonymous_32)","decl":{"start":{"line":500,"column":63},"end":{"line":500,"column":64}},"loc":{"start":{"line":500,"column":69},"end":{"line":542,"column":9}},"line":500},"33":{"name":"(anonymous_33)","decl":{"start":{"line":543,"column":58},"end":{"line":543,"column":59}},"loc":{"start":{"line":543,"column":64},"end":{"line":574,"column":9}},"line":543},"34":{"name":"(anonymous_34)","decl":{"start":{"line":576,"column":35},"end":{"line":576,"column":36}},"loc":{"start":{"line":576,"column":41},"end":{"line":587,"column":5}},"line":576},"35":{"name":"(anonymous_35)","decl":{"start":{"line":577,"column":39},"end":{"line":577,"column":40}},"loc":{"start":{"line":577,"column":45},"end":{"line":586,"column":9}},"line":577},"36":{"name":"(anonymous_36)","decl":{"start":{"line":588,"column":24},"end":{"line":588,"column":25}},"loc":{"start":{"line":588,"column":30},"end":{"line":602,"column":5}},"line":588},"37":{"name":"(anonymous_37)","decl":{"start":{"line":589,"column":42},"end":{"line":589,"column":43}},"loc":{"start":{"line":589,"column":48},"end":{"line":601,"column":9}},"line":589}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":10,"25":10,"26":22,"27":10,"28":10,"29":10,"30":1,"31":10,"32":10,"33":10,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"71":1,"72":1,"73":1,"74":1,"75":1,"76":1,"77":1,"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1,"86":1,"87":1,"88":1,"89":1,"90":1,"91":1,"92":1,"93":1,"94":1,"95":1,"96":1,"97":1,"98":1,"99":1,"100":1,"101":1,"102":1,"103":1,"104":1,"105":1,"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"112":1,"113":1,"114":1,"115":1,"116":1,"117":1,"118":1,"119":1,"120":1,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"136":1,"137":1,"138":1,"139":1,"140":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":8,"147":8,"148":18,"149":8,"150":8,"151":8,"152":1,"153":8,"154":8,"155":8,"156":1,"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"172":1,"173":1,"174":1,"175":1,"176":1,"177":1,"178":1,"179":1,"180":1,"181":1,"182":1,"183":1,"184":1,"185":1,"186":1,"187":1,"188":1,"189":1,"190":1,"191":1,"192":1,"193":1,"194":1,"195":1,"196":1,"197":1,"198":1,"199":1,"200":1,"201":1,"202":1,"203":1,"204":1,"205":1,"206":1,"207":1,"208":1,"209":1,"210":1,"211":1,"212":1,"213":1,"214":1,"215":1,"216":1,"217":1,"218":1,"219":1,"220":1,"221":1,"222":1,"223":1,"224":1,"225":1,"226":1,"227":1,"228":1,"229":1,"230":1,"231":1,"232":1,"233":1,"234":1,"235":1,"236":1,"237":1,"238":1,"239":1,"240":1,"241":1,"242":1,"243":1,"244":1},"f":{"0":1,"1":10,"2":22,"3":10,"4":10,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":8,"22":18,"23":8,"24":8,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-gauge.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-gauge.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\n\nimport { TEST_ONLY } from '../src/common/time-util';\nimport {\n  LabelKey,\n  LabelValue,\n  MetricDescriptorType,\n  Timestamp,\n} from '../src/metrics/export/types';\nimport { Gauge } from '../src/metrics/gauges/gauge';\n\nconst METRIC_NAME = 'metric-name';\nconst METRIC_DESCRIPTION = 'metric-description';\nconst UNIT = '1';\nconst GAUGE_INT64 = MetricDescriptorType.GAUGE_INT64;\nconst GAUGE_DOUBLE = MetricDescriptorType.GAUGE_DOUBLE;\nconst LABEL_KEYS: LabelKey[] = [{ key: 'code', description: 'desc' }];\nconst LABEL_VALUES_200: LabelValue[] = [{ value: '200' }];\nconst LABEL_VALUES_400: LabelValue[] = [{ value: '400' }];\nconst LABEL_VALUES_EXRTA: LabelValue[] = [{ value: '200' }, { value: '400' }];\nconst UNSET_LABEL_VALUE: LabelValue = {\n  value: null,\n};\nconst EMPTY_CONSTANT_LABELS = new Map();\nconst CONSTANT_LABELS = new Map();\nCONSTANT_LABELS.set(\n  { key: 'host', description: 'host' },\n  { value: 'localhost' }\n);\n\ndescribe('GAUGE_INT64', () => {\n  let instance: Gauge;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n  const expectedMetricDescriptor = {\n    name: METRIC_NAME,\n    description: METRIC_DESCRIPTION,\n    unit: UNIT,\n    type: GAUGE_INT64,\n    labelKeys: LABEL_KEYS,\n  };\n\n  beforeEach(() => {\n    instance = new Gauge(\n      METRIC_NAME,\n      METRIC_DESCRIPTION,\n      UNIT,\n      GAUGE_INT64,\n      LABEL_KEYS,\n      EMPTY_CONSTANT_LABELS\n    );\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  describe('getOrCreateTimeSeries()', () => {\n    it('should throw an error when the keys and values dont have same size', () => {\n      assert.throws(() => {\n        instance.getOrCreateTimeSeries(LABEL_VALUES_EXRTA);\n      }, /^Error: Label Keys and Label Values don't have same size$/);\n    });\n    it('should return a Metric', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      point.add(10);\n\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [\n            {\n              value: 10,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n\n      // add value and create new timeseries.\n      point.add(5);\n      const point1 = instance.getOrCreateTimeSeries(LABEL_VALUES_400);\n      point1.set(-8);\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 2);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [\n            {\n              value: 15,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n        {\n          labelValues: LABEL_VALUES_400,\n          points: [\n            {\n              value: -8,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n    });\n    it('should not create same timeseries again', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      point.add(10);\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [\n            {\n              value: 10,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n      // create timeseries with same labels.\n      const point1 = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      point1.add(30);\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [\n            {\n              value: 40,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n    });\n  });\n  describe('getDefaultTimeSeries()', () => {\n    it('should create new default timeseries', () => {\n      const point = instance.getDefaultTimeSeries();\n      point.add(10);\n      const metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: [UNSET_LABEL_VALUE],\n          points: [\n            {\n              value: 10,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n    });\n    it('should return same timeseries for interchanged labels', () => {\n      instance = new Gauge(\n        METRIC_NAME,\n        METRIC_DESCRIPTION,\n        UNIT,\n        GAUGE_INT64,\n        [\n          { key: 'k1', description: 'desc' },\n          { key: 'k2', description: 'desc' },\n        ],\n        EMPTY_CONSTANT_LABELS\n      );\n      const point = instance.getOrCreateTimeSeries([\n        { value: '200' },\n        { value: '400' },\n      ]);\n      point.add(200);\n      const point1 = instance.getOrCreateTimeSeries([\n        { value: '400' },\n        { value: '200' },\n      ]);\n      point1.add(400);\n      const metric = instance.getMetric();\n      assert.strictEqual(metric!.timeseries.length, 1);\n    });\n\n    it('should add constant labels', () => {\n      instance = new Gauge(\n        METRIC_NAME,\n        METRIC_DESCRIPTION,\n        UNIT,\n        GAUGE_INT64,\n        [\n          { key: 'k1', description: 'desc' },\n          { key: 'k2', description: 'desc' },\n        ],\n        CONSTANT_LABELS\n      );\n      const point = instance.getOrCreateTimeSeries([\n        { value: '200' },\n        { value: '400' },\n      ]);\n      point.add(200);\n      const metric = instance.getMetric();\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.descriptor.labelKeys, [\n        { key: 'k1', description: 'desc' },\n        { key: 'k2', description: 'desc' },\n        { key: 'host', description: 'host' },\n      ]);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: [\n            { value: '200' },\n            { value: '400' },\n            { value: 'localhost' },\n          ],\n          points: [\n            {\n              value: 200,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n    });\n\n    it('should create same labelValues as labelKeys', () => {\n      instance = new Gauge(\n        METRIC_NAME,\n        METRIC_DESCRIPTION,\n        UNIT,\n        GAUGE_INT64,\n        [\n          { key: 'k1', description: 'desc' },\n          { key: 'k2', description: 'desc' },\n          { key: 'k3', description: 'desc' },\n        ],\n        EMPTY_CONSTANT_LABELS\n      );\n      const point = instance.getDefaultTimeSeries();\n      point.add(200);\n      const metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor.labelKeys.length, 3);\n      assert.deepStrictEqual(metric!.descriptor.type, 1);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: [\n            UNSET_LABEL_VALUE,\n            UNSET_LABEL_VALUE,\n            UNSET_LABEL_VALUE,\n          ],\n          points: [\n            {\n              value: 200,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n    });\n    it('should use previously created default timeseries', () => {\n      const point = instance.getDefaultTimeSeries();\n      point.add(300);\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: [UNSET_LABEL_VALUE],\n          points: [\n            {\n              value: 300,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n      // get default timeseries again.\n      const point1 = instance.getDefaultTimeSeries();\n      point1.add(400);\n      metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: [UNSET_LABEL_VALUE],\n          points: [\n            {\n              value: 700,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n    });\n  });\n  describe('removeTimeSeries()', () => {\n    it('should remove TimeSeries', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      point.add(10);\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      instance.removeTimeSeries(LABEL_VALUES_200);\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric, null);\n    });\n  });\n  describe('clear()', () => {\n    it('should clear all TimeSeries', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      point.add(10);\n      const point1 = instance.getOrCreateTimeSeries(LABEL_VALUES_400);\n      point1.add(10);\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 2);\n      instance.clear();\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric, null);\n    });\n  });\n});\n\ndescribe('GAUGE_DOUBLE', () => {\n  let instance: Gauge;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n  const expectedMetricDescriptor = {\n    name: METRIC_NAME,\n    description: METRIC_DESCRIPTION,\n    unit: UNIT,\n    type: GAUGE_DOUBLE,\n    labelKeys: LABEL_KEYS,\n  };\n\n  beforeEach(() => {\n    instance = new Gauge(\n      METRIC_NAME,\n      METRIC_DESCRIPTION,\n      UNIT,\n      GAUGE_DOUBLE,\n      LABEL_KEYS,\n      EMPTY_CONSTANT_LABELS\n    );\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  describe('getOrCreateTimeSeries()', () => {\n    it('should throw an error when the keys and values dont have same size', () => {\n      assert.throws(() => {\n        instance.getOrCreateTimeSeries(LABEL_VALUES_EXRTA);\n      }, /^Error: Label Keys and Label Values don't have same size$/);\n    });\n    it('should return a Metric', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      point.add(10.34);\n\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [\n            {\n              value: 10.34,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n      // add value and create new timeseries.\n      point.add(5.12);\n      const point1 = instance.getOrCreateTimeSeries(LABEL_VALUES_400);\n      point1.set(-8.3);\n      metric = instance.getMetric();\n      assert.strictEqual(metric!.timeseries.length, 2);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [\n            {\n              value: 15.46,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n        {\n          labelValues: LABEL_VALUES_400,\n          points: [\n            {\n              value: -8.3,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n    });\n    it('should not create same timeseries again', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      point.add(12.1);\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [\n            {\n              value: 12.1,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n      // create timeseries with same labels.\n      const point1 = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      point1.add(30.18);\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [\n            {\n              value: 42.28,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n    });\n  });\n  describe('getDefaultTimeSeries()', () => {\n    it('should create new default timeseries', () => {\n      const point = instance.getDefaultTimeSeries();\n      point.add(10.1);\n      const metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: [UNSET_LABEL_VALUE],\n          points: [\n            {\n              value: 10.1,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n    });\n    it('should use previously created default timeseries', () => {\n      const point = instance.getDefaultTimeSeries();\n      point.add(300.1);\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: [UNSET_LABEL_VALUE],\n          points: [\n            {\n              value: 300.1,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n      // get default timeseries again.\n      const point1 = instance.getDefaultTimeSeries();\n      point1.add(400.1);\n      metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: [UNSET_LABEL_VALUE],\n          points: [\n            {\n              value: 700.2,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n    });\n    it('should create same labelValues as labelKeys', () => {\n      instance = new Gauge(\n        METRIC_NAME,\n        METRIC_DESCRIPTION,\n        UNIT,\n        GAUGE_DOUBLE,\n        [\n          { key: 'k1', description: 'desc' },\n          { key: 'k2', description: 'desc' },\n          { key: 'k3', description: 'desc' },\n        ],\n        EMPTY_CONSTANT_LABELS\n      );\n      const point = instance.getDefaultTimeSeries();\n      point.add(10.1);\n      const metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor.labelKeys.length, 3);\n      assert.deepStrictEqual(metric!.descriptor.type, 2);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: [\n            UNSET_LABEL_VALUE,\n            UNSET_LABEL_VALUE,\n            UNSET_LABEL_VALUE,\n          ],\n          points: [\n            {\n              value: 10.1,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n    });\n  });\n  describe('removeTimeSeries()', () => {\n    it('should remove TimeSeries', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      point.add(10.23);\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      instance.removeTimeSeries(LABEL_VALUES_200);\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric, null);\n    });\n  });\n  describe('clear()', () => {\n    it('should clear all TimeSeries', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      point.add(10.34);\n      const point1 = instance.getOrCreateTimeSeries(LABEL_VALUES_400);\n      point1.add(15.2);\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 2);\n      instance.clear();\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric, null);\n    });\n  });\n});\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"8cae024d7e55dc44e37cf084a14197e781e6678a","contentHash":"da38ae19bc890650b5342728e74d4c912538213764680d084f237f7854e27af6"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-metric-component.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-metric-component.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":15},"end":{"line":18,"column":32}},"2":{"start":{"line":19,"column":34},"end":{"line":19,"column":90}},"3":{"start":{"line":20,"column":27},"end":{"line":20,"column":69}},"4":{"start":{"line":21,"column":26},"end":{"line":21,"column":67}},"5":{"start":{"line":22,"column":0},"end":{"line":37,"column":3}},"6":{"start":{"line":24,"column":4},"end":{"line":27,"column":7}},"7":{"start":{"line":25,"column":8},"end":{"line":25,"column":76}},"8":{"start":{"line":26,"column":8},"end":{"line":26,"column":69}},"9":{"start":{"line":28,"column":4},"end":{"line":30,"column":7}},"10":{"start":{"line":29,"column":8},"end":{"line":29,"column":100}},"11":{"start":{"line":31,"column":4},"end":{"line":36,"column":7}},"12":{"start":{"line":32,"column":8},"end":{"line":32,"column":115}},"13":{"start":{"line":33,"column":8},"end":{"line":35,"column":76}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":22,"column":31},"end":{"line":22,"column":32}},"loc":{"start":{"line":22,"column":37},"end":{"line":37,"column":1}},"line":22},"1":{"name":"(anonymous_1)","decl":{"start":{"line":24,"column":15},"end":{"line":24,"column":16}},"loc":{"start":{"line":24,"column":21},"end":{"line":27,"column":5}},"line":24},"2":{"name":"(anonymous_2)","decl":{"start":{"line":28,"column":50},"end":{"line":28,"column":51}},"loc":{"start":{"line":28,"column":56},"end":{"line":30,"column":5}},"line":28},"3":{"name":"(anonymous_3)","decl":{"start":{"line":31,"column":65},"end":{"line":31,"column":66}},"loc":{"start":{"line":31,"column":71},"end":{"line":36,"column":5}},"line":31}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":2,"8":2,"9":1,"10":1,"11":1,"12":1,"13":1},"f":{"0":1,"1":2,"2":1,"3":1},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-metric-component.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-metric-component.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,iCAAiC;AACjC,2FAA8F;AAC9F,sEAAmE;AACnE,oEAAgE;AAEhE,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,IAAI,gBAAkC,CAAC;IAEvC,UAAU,CAAC,GAAG,EAAE;QACd,uDAA6B,CAAC,SAAS,EAAE,CAAC;QAC1C,gBAAgB,GAAG,IAAI,mCAAgB,EAAE,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;QACjD,MAAM,CAAC,EAAE,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,YAAY,gCAAc,CAAC,CAAC;IAC5E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wDAAwD,EAAE,GAAG,EAAE;QAChE,MAAM,CAAC,WAAW,CAChB,uDAA6B,CAAC,oBAAoB,EAAE,CAAC,IAAI,EACzD,CAAC,CACF,CAAC;QACF,MAAM,CAAC,EAAE,CACP,uDAA6B;aAC1B,oBAAoB,EAAE;aACtB,GAAG,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,CAAC,iBAAiB,EAAE,CAAC,CACjE,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport { metricProducerManagerInstance } from '../src/metrics/export/metric-producer-manager';\nimport { MetricsComponent } from '../src/metrics/metric-component';\nimport { MetricRegistry } from '../src/metrics/metric-registry';\n\ndescribe('MetricsComponent()', () => {\n  let metricsComponent: MetricsComponent;\n\n  beforeEach(() => {\n    metricProducerManagerInstance.removeAll();\n    metricsComponent = new MetricsComponent();\n  });\n\n  it('should return a MetricRegistry instance', () => {\n    assert.ok(metricsComponent.getMetricRegistry() instanceof MetricRegistry);\n  });\n\n  it('should register metricRegistry to MetricProducerManger', () => {\n    assert.strictEqual(\n      metricProducerManagerInstance.getAllMetricProducer().size,\n      1\n    );\n    assert.ok(\n      metricProducerManagerInstance\n        .getAllMetricProducer()\n        .has(metricsComponent.getMetricRegistry().getMetricProducer())\n    );\n  });\n});\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"5f87402cac87808fe471fbc84dd15c7695e03cb3","contentHash":"dbb8ffee2ff6111358d130a48219d918a9127558d53332e53ca8dd226ee58e67"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-metric-producer-manager.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-metric-producer-manager.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":15},"end":{"line":18,"column":32}},"2":{"start":{"line":19,"column":34},"end":{"line":19,"column":90}},"3":{"start":{"line":20,"column":26},"end":{"line":20,"column":67}},"4":{"start":{"line":21,"column":0},"end":{"line":63,"column":3}},"5":{"start":{"line":22,"column":21},"end":{"line":22,"column":59}},"6":{"start":{"line":23,"column":27},"end":{"line":23,"column":55}},"7":{"start":{"line":24,"column":26},"end":{"line":24,"column":64}},"8":{"start":{"line":25,"column":32},"end":{"line":25,"column":65}},"9":{"start":{"line":26,"column":4},"end":{"line":28,"column":7}},"10":{"start":{"line":27,"column":8},"end":{"line":27,"column":76}},"11":{"start":{"line":29,"column":4},"end":{"line":52,"column":7}},"12":{"start":{"line":30,"column":8},"end":{"line":35,"column":11}},"13":{"start":{"line":31,"column":12},"end":{"line":31,"column":88}},"14":{"start":{"line":32,"column":39},"end":{"line":32,"column":117}},"15":{"start":{"line":33,"column":12},"end":{"line":33,"column":60}},"16":{"start":{"line":34,"column":12},"end":{"line":34,"column":59}},"17":{"start":{"line":36,"column":8},"end":{"line":43,"column":11}},"18":{"start":{"line":37,"column":12},"end":{"line":37,"column":88}},"19":{"start":{"line":38,"column":12},"end":{"line":38,"column":88}},"20":{"start":{"line":39,"column":12},"end":{"line":39,"column":88}},"21":{"start":{"line":40,"column":39},"end":{"line":40,"column":117}},"22":{"start":{"line":41,"column":12},"end":{"line":41,"column":59}},"23":{"start":{"line":42,"column":12},"end":{"line":42,"column":62}},"24":{"start":{"line":44,"column":8},"end":{"line":51,"column":11}},"25":{"start":{"line":45,"column":12},"end":{"line":45,"column":88}},"26":{"start":{"line":46,"column":12},"end":{"line":46,"column":93}},"27":{"start":{"line":47,"column":39},"end":{"line":47,"column":117}},"28":{"start":{"line":48,"column":12},"end":{"line":48,"column":59}},"29":{"start":{"line":49,"column":12},"end":{"line":49,"column":62}},"30":{"start":{"line":50,"column":12},"end":{"line":50,"column":67}},"31":{"start":{"line":53,"column":4},"end":{"line":62,"column":7}},"32":{"start":{"line":54,"column":8},"end":{"line":61,"column":11}},"33":{"start":{"line":55,"column":12},"end":{"line":55,"column":88}},"34":{"start":{"line":56,"column":39},"end":{"line":56,"column":117}},"35":{"start":{"line":57,"column":12},"end":{"line":57,"column":59}},"36":{"start":{"line":58,"column":12},"end":{"line":58,"column":62}},"37":{"start":{"line":59,"column":12},"end":{"line":59,"column":91}},"38":{"start":{"line":60,"column":12},"end":{"line":60,"column":59}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":21,"column":36},"end":{"line":21,"column":37}},"loc":{"start":{"line":21,"column":42},"end":{"line":63,"column":1}},"line":21},"1":{"name":"(anonymous_1)","decl":{"start":{"line":26,"column":15},"end":{"line":26,"column":16}},"loc":{"start":{"line":26,"column":21},"end":{"line":28,"column":5}},"line":26},"2":{"name":"(anonymous_2)","decl":{"start":{"line":29,"column":22},"end":{"line":29,"column":23}},"loc":{"start":{"line":29,"column":28},"end":{"line":52,"column":5}},"line":29},"3":{"name":"(anonymous_3)","decl":{"start":{"line":30,"column":33},"end":{"line":30,"column":34}},"loc":{"start":{"line":30,"column":39},"end":{"line":35,"column":9}},"line":30},"4":{"name":"(anonymous_4)","decl":{"start":{"line":36,"column":79},"end":{"line":36,"column":80}},"loc":{"start":{"line":36,"column":85},"end":{"line":43,"column":9}},"line":36},"5":{"name":"(anonymous_5)","decl":{"start":{"line":44,"column":80},"end":{"line":44,"column":81}},"loc":{"start":{"line":44,"column":86},"end":{"line":51,"column":9}},"line":44},"6":{"name":"(anonymous_6)","decl":{"start":{"line":53,"column":25},"end":{"line":53,"column":26}},"loc":{"start":{"line":53,"column":31},"end":{"line":62,"column":5}},"line":53},"7":{"name":"(anonymous_7)","decl":{"start":{"line":54,"column":36},"end":{"line":54,"column":37}},"loc":{"start":{"line":54,"column":42},"end":{"line":61,"column":9}},"line":54}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":4,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1},"f":{"0":1,"1":4,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-metric-producer-manager.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-metric-producer-manager.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,iCAAiC;AACjC,2FAA8F;AAC9F,oEAAgE;AAEhE,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;IACvC,MAAM,QAAQ,GAAmB,IAAI,gCAAc,EAAE,CAAC;IACtD,MAAM,cAAc,GAAG,QAAQ,CAAC,iBAAiB,EAAE,CAAC;IACpD,MAAM,aAAa,GAAmB,IAAI,gCAAc,EAAE,CAAC;IAC3D,MAAM,mBAAmB,GAAG,aAAa,CAAC,iBAAiB,EAAE,CAAC;IAE9D,UAAU,CAAC,GAAG,EAAE;QACd,uDAA6B,CAAC,SAAS,EAAE,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE;QACrB,EAAE,CAAC,oBAAoB,EAAE,GAAG,EAAE;YAC5B,uDAA6B,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;YAClD,MAAM,kBAAkB,GAAG,uDAA6B,CAAC,oBAAoB,EAAE,CAAC;YAEhF,MAAM,CAAC,cAAc,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;YAChD,MAAM,CAAC,WAAW,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kEAAkE,EAAE,GAAG,EAAE;YAC1E,uDAA6B,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;YAClD,uDAA6B,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;YAClD,uDAA6B,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;YAClD,MAAM,kBAAkB,GAAG,uDAA6B,CAAC,oBAAoB,EAAE,CAAC;YAEhF,MAAM,CAAC,WAAW,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YAC/C,MAAM,CAAC,EAAE,CAAC,kBAAkB,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mEAAmE,EAAE,GAAG,EAAE;YAC3E,uDAA6B,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;YAClD,uDAA6B,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;YACvD,MAAM,kBAAkB,GAAG,uDAA6B,CAAC,oBAAoB,EAAE,CAAC;YAEhF,MAAM,CAAC,WAAW,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YAC/C,MAAM,CAAC,EAAE,CAAC,kBAAkB,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC;YAClD,MAAM,CAAC,EAAE,CAAC,kBAAkB,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;QACxB,EAAE,CAAC,uBAAuB,EAAE,GAAG,EAAE;YAC/B,uDAA6B,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;YAElD,MAAM,kBAAkB,GAAG,uDAA6B,CAAC,oBAAoB,EAAE,CAAC;YAChF,MAAM,CAAC,WAAW,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YAC/C,MAAM,CAAC,EAAE,CAAC,kBAAkB,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC;YAElD,uDAA6B,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;YACrD,MAAM,CAAC,WAAW,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport { metricProducerManagerInstance } from '../src/metrics/export/metric-producer-manager';\nimport { MetricRegistry } from '../src/metrics/metric-registry';\n\ndescribe('MetricProducerManager()', () => {\n  const registry: MetricRegistry = new MetricRegistry();\n  const metricProducer = registry.getMetricProducer();\n  const registryOther: MetricRegistry = new MetricRegistry();\n  const metricProducerOther = registryOther.getMetricProducer();\n\n  beforeEach(() => {\n    metricProducerManagerInstance.removeAll();\n  });\n\n  describe('add()', () => {\n    it('add metricproducer', () => {\n      metricProducerManagerInstance.add(metricProducer);\n      const metricProducerList = metricProducerManagerInstance.getAllMetricProducer();\n\n      assert.notStrictEqual(metricProducerList, null);\n      assert.strictEqual(metricProducerList.size, 1);\n    });\n\n    it('should not add same metricproducer metricProducerManagerInstance', () => {\n      metricProducerManagerInstance.add(metricProducer);\n      metricProducerManagerInstance.add(metricProducer);\n      metricProducerManagerInstance.add(metricProducer);\n      const metricProducerList = metricProducerManagerInstance.getAllMetricProducer();\n\n      assert.strictEqual(metricProducerList.size, 1);\n      assert.ok(metricProducerList.has(metricProducer));\n    });\n\n    it('should add different metricproducer metricProducerManagerInstance', () => {\n      metricProducerManagerInstance.add(metricProducer);\n      metricProducerManagerInstance.add(metricProducerOther);\n      const metricProducerList = metricProducerManagerInstance.getAllMetricProducer();\n\n      assert.strictEqual(metricProducerList.size, 2);\n      assert.ok(metricProducerList.has(metricProducer));\n      assert.ok(metricProducerList.has(metricProducerOther));\n    });\n  });\n\n  describe('remove()', () => {\n    it('remove metricproducer', () => {\n      metricProducerManagerInstance.add(metricProducer);\n\n      const metricProducerList = metricProducerManagerInstance.getAllMetricProducer();\n      assert.strictEqual(metricProducerList.size, 1);\n      assert.ok(metricProducerList.has(metricProducer));\n\n      metricProducerManagerInstance.remove(metricProducer);\n      assert.strictEqual(metricProducerList.size, 0);\n    });\n  });\n});\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"6ce703de605a11d4697490c5241bc4e511e6df41","contentHash":"e59fa59869ea4ef642c9e141ea3f8c7a2b5e481f68d0bac4b0fedbe0fba53f25"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-metric-producer.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-metric-producer.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":15},"end":{"line":18,"column":32}},"2":{"start":{"line":19,"column":14},"end":{"line":19,"column":31}},"3":{"start":{"line":20,"column":16},"end":{"line":20,"column":54}},"4":{"start":{"line":21,"column":26},"end":{"line":21,"column":65}},"5":{"start":{"line":22,"column":0},"end":{"line":158,"column":3}},"6":{"start":{"line":23,"column":35},"end":{"line":23,"column":98}},"7":{"start":{"line":25,"column":22},"end":{"line":25,"column":39}},"8":{"start":{"line":26,"column":22},"end":{"line":26,"column":39}},"9":{"start":{"line":27,"column":22},"end":{"line":27,"column":39}},"10":{"start":{"line":28,"column":24},"end":{"line":28,"column":42}},"11":{"start":{"line":29,"column":26},"end":{"line":29,"column":134}},"12":{"start":{"line":30,"column":20},"end":{"line":30,"column":64}},"13":{"start":{"line":31,"column":19},"end":{"line":31,"column":37}},"14":{"start":{"line":32,"column":4},"end":{"line":32,"column":52}},"15":{"start":{"line":33,"column":4},"end":{"line":33,"column":52}},"16":{"start":{"line":34,"column":22},"end":{"line":37,"column":5}},"17":{"start":{"line":38,"column":24},"end":{"line":41,"column":5}},"18":{"start":{"line":42,"column":25},"end":{"line":42,"column":62}},"19":{"start":{"line":43,"column":25},"end":{"line":43,"column":63}},"20":{"start":{"line":45,"column":38},"end":{"line":51,"column":5}},"21":{"start":{"line":52,"column":38},"end":{"line":58,"column":5}},"22":{"start":{"line":59,"column":38},"end":{"line":65,"column":5}},"23":{"start":{"line":66,"column":38},"end":{"line":72,"column":5}},"24":{"start":{"line":73,"column":4},"end":{"line":84,"column":7}},"25":{"start":{"line":74,"column":21},"end":{"line":74,"column":124}},"26":{"start":{"line":75,"column":8},"end":{"line":75,"column":45}},"27":{"start":{"line":76,"column":8},"end":{"line":76,"column":53}},"28":{"start":{"line":77,"column":24},"end":{"line":77,"column":59}},"29":{"start":{"line":78,"column":8},"end":{"line":78,"column":46}},"30":{"start":{"line":79,"column":90},"end":{"line":79,"column":97}},"31":{"start":{"line":80,"column":8},"end":{"line":80,"column":83}},"32":{"start":{"line":81,"column":8},"end":{"line":81,"column":56}},"33":{"start":{"line":82,"column":8},"end":{"line":82,"column":78}},"34":{"start":{"line":83,"column":8},"end":{"line":83,"column":69}},"35":{"start":{"line":85,"column":4},"end":{"line":104,"column":7}},"36":{"start":{"line":86,"column":21},"end":{"line":86,"column":126}},"37":{"start":{"line":87,"column":8},"end":{"line":87,"column":45}},"38":{"start":{"line":88,"column":8},"end":{"line":88,"column":53}},"39":{"start":{"line":89,"column":22},"end":{"line":89,"column":57}},"40":{"start":{"line":90,"column":8},"end":{"line":90,"column":46}},"41":{"start":{"line":91,"column":162},"end":{"line":91,"column":169}},"42":{"start":{"line":92,"column":8},"end":{"line":92,"column":83}},"43":{"start":{"line":93,"column":8},"end":{"line":93,"column":56}},"44":{"start":{"line":94,"column":8},"end":{"line":94,"column":78}},"45":{"start":{"line":95,"column":8},"end":{"line":95,"column":69}},"46":{"start":{"line":96,"column":8},"end":{"line":96,"column":83}},"47":{"start":{"line":97,"column":8},"end":{"line":97,"column":56}},"48":{"start":{"line":98,"column":8},"end":{"line":98,"column":78}},"49":{"start":{"line":99,"column":8},"end":{"line":99,"column":68}},"50":{"start":{"line":101,"column":8},"end":{"line":101,"column":53}},"51":{"start":{"line":102,"column":8},"end":{"line":102,"column":54}},"52":{"start":{"line":103,"column":8},"end":{"line":103,"column":76}},"53":{"start":{"line":105,"column":4},"end":{"line":124,"column":7}},"54":{"start":{"line":106,"column":21},"end":{"line":106,"column":131}},"55":{"start":{"line":107,"column":8},"end":{"line":107,"column":45}},"56":{"start":{"line":108,"column":8},"end":{"line":108,"column":53}},"57":{"start":{"line":109,"column":8},"end":{"line":109,"column":53}},"58":{"start":{"line":110,"column":24},"end":{"line":110,"column":59}},"59":{"start":{"line":111,"column":8},"end":{"line":111,"column":46}},"60":{"start":{"line":112,"column":234},"end":{"line":112,"column":241}},"61":{"start":{"line":113,"column":8},"end":{"line":113,"column":83}},"62":{"start":{"line":114,"column":8},"end":{"line":114,"column":56}},"63":{"start":{"line":115,"column":8},"end":{"line":115,"column":56}},"64":{"start":{"line":116,"column":8},"end":{"line":116,"column":78}},"65":{"start":{"line":117,"column":8},"end":{"line":117,"column":69}},"66":{"start":{"line":118,"column":8},"end":{"line":118,"column":83}},"67":{"start":{"line":119,"column":8},"end":{"line":119,"column":56}},"68":{"start":{"line":120,"column":8},"end":{"line":120,"column":83}},"69":{"start":{"line":121,"column":8},"end":{"line":121,"column":56}},"70":{"start":{"line":122,"column":8},"end":{"line":122,"column":78}},"71":{"start":{"line":123,"column":8},"end":{"line":123,"column":70}},"72":{"start":{"line":125,"column":4},"end":{"line":157,"column":7}},"73":{"start":{"line":126,"column":34},"end":{"line":126,"column":59}},"74":{"start":{"line":127,"column":24},"end":{"line":127,"column":33}},"75":{"start":{"line":128,"column":21},"end":{"line":128,"column":142}},"76":{"start":{"line":129,"column":8},"end":{"line":129,"column":45}},"77":{"start":{"line":130,"column":8},"end":{"line":133,"column":9}},"78":{"start":{"line":131,"column":32},"end":{"line":131,"column":65}},"79":{"start":{"line":132,"column":12},"end":{"line":132,"column":56}},"80":{"start":{"line":134,"column":24},"end":{"line":134,"column":59}},"81":{"start":{"line":135,"column":8},"end":{"line":135,"column":46}},"82":{"start":{"line":136,"column":306},"end":{"line":136,"column":313}},"83":{"start":{"line":137,"column":8},"end":{"line":137,"column":83}},"84":{"start":{"line":138,"column":8},"end":{"line":138,"column":56}},"85":{"start":{"line":139,"column":8},"end":{"line":139,"column":78}},"86":{"start":{"line":140,"column":8},"end":{"line":140,"column":69}},"87":{"start":{"line":141,"column":8},"end":{"line":141,"column":83}},"88":{"start":{"line":142,"column":8},"end":{"line":142,"column":56}},"89":{"start":{"line":143,"column":8},"end":{"line":143,"column":83}},"90":{"start":{"line":144,"column":8},"end":{"line":144,"column":56}},"91":{"start":{"line":145,"column":8},"end":{"line":145,"column":78}},"92":{"start":{"line":146,"column":8},"end":{"line":146,"column":70}},"93":{"start":{"line":147,"column":8},"end":{"line":147,"column":83}},"94":{"start":{"line":148,"column":8},"end":{"line":148,"column":56}},"95":{"start":{"line":149,"column":8},"end":{"line":149,"column":78}},"96":{"start":{"line":150,"column":8},"end":{"line":156,"column":11}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":22,"column":38},"end":{"line":22,"column":39}},"loc":{"start":{"line":22,"column":44},"end":{"line":158,"column":1}},"line":22},"1":{"name":"(anonymous_1)","decl":{"start":{"line":73,"column":31},"end":{"line":73,"column":32}},"loc":{"start":{"line":73,"column":37},"end":{"line":84,"column":5}},"line":73},"2":{"name":"(anonymous_2)","decl":{"start":{"line":85,"column":33},"end":{"line":85,"column":34}},"loc":{"start":{"line":85,"column":39},"end":{"line":104,"column":5}},"line":85},"3":{"name":"(anonymous_3)","decl":{"start":{"line":105,"column":37},"end":{"line":105,"column":38}},"loc":{"start":{"line":105,"column":43},"end":{"line":124,"column":5}},"line":105},"4":{"name":"(anonymous_4)","decl":{"start":{"line":125,"column":40},"end":{"line":125,"column":41}},"loc":{"start":{"line":125,"column":46},"end":{"line":157,"column":5}},"line":125}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"71":1,"72":1,"73":1,"74":1,"75":1,"76":1,"77":1,"78":5,"79":5,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1,"86":1,"87":1,"88":1,"89":1,"90":1,"91":1,"92":1,"93":1,"94":1,"95":1,"96":1},"f":{"0":1,"1":1,"2":1,"3":1,"4":1},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-metric-producer.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-metric-producer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\n\nimport {\n  AggregationType,\n  globalStats,\n  Measurement,\n  MeasureUnit,\n  TagMap,\n  View,\n} from '../src';\nimport {\n  LabelKey,\n  LabelValue,\n  MetricDescriptorType,\n} from '../src/metrics/export/types';\nimport { MetricProducerForStats } from '../src/stats/metric-producer';\n\ndescribe('Metric producer for stats', () => {\n  const metricProducerForStats = new MetricProducerForStats(globalStats);\n\n  // constants for view name\n  const viewName1 = 'test/view/name1';\n  const viewName2 = 'test/view/name2';\n  const viewName3 = 'test/view/name2';\n  const description = 'test description';\n\n  const measureDouble = globalStats.createMeasureDouble(\n    'opencensus.io/test/double',\n    MeasureUnit.UNIT,\n    'Measure Double'\n  );\n  const tagKeys = [{ name: 'testKey1' }, { name: 'testKey2' }];\n  const tagMap = new TagMap();\n  tagMap.set(tagKeys[0], { value: 'testValue1' });\n  tagMap.set(tagKeys[1], { value: 'testValue2' });\n  const labelKeys: LabelKey[] = [\n    { key: 'testKey1', description: '' },\n    { key: 'testKey2', description: '' },\n  ];\n  const labelValues: LabelValue[] = [\n    { value: 'testValue1' },\n    { value: 'testValue2' },\n  ];\n  const measurement1: Measurement = { measure: measureDouble, value: 25 };\n  const measurement2: Measurement = { measure: measureDouble, value: 300 };\n\n  // expected constants\n  const expectedMetricDescriptor1 = {\n    name: viewName1,\n    description,\n    labelKeys,\n    unit: MeasureUnit.UNIT,\n    type: MetricDescriptorType.CUMULATIVE_DOUBLE,\n  };\n  const expectedMetricDescriptor2 = {\n    name: viewName2,\n    description,\n    labelKeys,\n    unit: MeasureUnit.UNIT,\n    type: MetricDescriptorType.CUMULATIVE_INT64,\n  };\n  const expectedMetricDescriptor3 = {\n    name: viewName3,\n    description,\n    labelKeys,\n    unit: MeasureUnit.UNIT,\n    type: MetricDescriptorType.GAUGE_DOUBLE,\n  };\n  const expectedMetricDescriptor4 = {\n    name: viewName3,\n    description,\n    labelKeys,\n    unit: MeasureUnit.UNIT,\n    type: MetricDescriptorType.CUMULATIVE_DISTRIBUTION,\n  };\n\n  it('should add sum stats', () => {\n    const view: View = globalStats.createView(\n      viewName1,\n      measureDouble,\n      AggregationType.SUM,\n      tagKeys,\n      description\n    );\n    globalStats.registerView(view);\n    view.recordMeasurement(measurement1, tagMap);\n\n    const metrics = metricProducerForStats.getMetrics();\n\n    assert.strictEqual(metrics.length, 1);\n    const [\n      { descriptor: actualMetricDescriptor1, timeseries: actualTimeSeries1 },\n    ] = metrics;\n    assert.deepStrictEqual(actualMetricDescriptor1, expectedMetricDescriptor1);\n    assert.strictEqual(actualTimeSeries1.length, 1);\n    assert.deepStrictEqual(actualTimeSeries1[0].labelValues, labelValues);\n    assert.strictEqual(actualTimeSeries1[0].points[0].value, 25);\n  });\n\n  it('should add count stats', () => {\n    const view: View = globalStats.createView(\n      viewName2,\n      measureDouble,\n      AggregationType.COUNT,\n      tagKeys,\n      description\n    );\n    globalStats.registerView(view);\n    view.recordMeasurement(measurement1, tagMap);\n\n    let metrics = metricProducerForStats.getMetrics();\n\n    assert.strictEqual(metrics.length, 2);\n    const [\n      { descriptor: actualMetricDescriptor1, timeseries: actualTimeSeries1 },\n      { descriptor: actualMetricDescriptor2, timeseries: actualTimeSeries2 },\n    ] = metrics;\n    assert.deepStrictEqual(actualMetricDescriptor1, expectedMetricDescriptor1);\n    assert.strictEqual(actualTimeSeries1.length, 1);\n    assert.deepStrictEqual(actualTimeSeries1[0].labelValues, labelValues);\n    assert.strictEqual(actualTimeSeries1[0].points[0].value, 25);\n    assert.deepStrictEqual(actualMetricDescriptor2, expectedMetricDescriptor2);\n    assert.strictEqual(actualTimeSeries2.length, 1);\n    assert.deepStrictEqual(actualTimeSeries2[0].labelValues, labelValues);\n    assert.strictEqual(actualTimeSeries2[0].points[0].value, 1);\n\n    // update count view\n    view.recordMeasurement(measurement2, tagMap);\n    metrics = metricProducerForStats.getMetrics();\n    assert.deepStrictEqual(metrics[1].timeseries[0].points[0].value, 2);\n  });\n\n  it('should add lastValue stats', () => {\n    const view: View = globalStats.createView(\n      viewName3,\n      measureDouble,\n      AggregationType.LAST_VALUE,\n      tagKeys,\n      description\n    );\n    globalStats.registerView(view);\n    view.recordMeasurement(measurement1, tagMap);\n    view.recordMeasurement(measurement2, tagMap);\n\n    const metrics = metricProducerForStats.getMetrics();\n\n    assert.strictEqual(metrics.length, 3);\n    const [\n      { descriptor: actualMetricDescriptor1, timeseries: actualTimeSeries1 },\n      { descriptor: actualMetricDescriptor2, timeseries: actualTimeSeries2 },\n      { descriptor: actualMetricDescriptor3, timeseries: actualTimeSeries3 },\n    ] = metrics;\n    assert.deepStrictEqual(actualMetricDescriptor1, expectedMetricDescriptor1);\n    assert.strictEqual(actualTimeSeries1.length, 1);\n    assert.strictEqual(actualTimeSeries1.length, 1);\n    assert.deepStrictEqual(actualTimeSeries1[0].labelValues, labelValues);\n    assert.strictEqual(actualTimeSeries1[0].points[0].value, 25);\n    assert.deepStrictEqual(actualMetricDescriptor2, expectedMetricDescriptor2);\n    assert.strictEqual(actualTimeSeries2.length, 1);\n    assert.deepStrictEqual(actualMetricDescriptor3, expectedMetricDescriptor3);\n    assert.strictEqual(actualTimeSeries3.length, 1);\n    assert.deepStrictEqual(actualTimeSeries3[0].labelValues, labelValues);\n    assert.strictEqual(actualTimeSeries3[0].points[0].value, 300);\n  });\n\n  it('should add distribution stats', () => {\n    const measurementValues = [1.1, 2.3, 3.2, 4.3, 5.2];\n    const buckets = [2, 4, 6];\n    const view: View = globalStats.createView(\n      viewName3,\n      measureDouble,\n      AggregationType.DISTRIBUTION,\n      tagKeys,\n      description,\n      buckets\n    );\n    globalStats.registerView(view);\n    for (const value of measurementValues) {\n      const measurement: Measurement = { measure: measureDouble, value };\n      view.recordMeasurement(measurement, tagMap);\n    }\n\n    const metrics = metricProducerForStats.getMetrics();\n\n    assert.strictEqual(metrics.length, 4);\n    const [\n      { descriptor: actualMetricDescriptor1, timeseries: actualTimeSeries1 },\n      { descriptor: actualMetricDescriptor2, timeseries: actualTimeSeries2 },\n      { descriptor: actualMetricDescriptor3, timeseries: actualTimeSeries3 },\n      { descriptor: actualMetricDescriptor4, timeseries: actualTimeSeries4 },\n    ] = metrics;\n    assert.deepStrictEqual(actualMetricDescriptor1, expectedMetricDescriptor1);\n    assert.strictEqual(actualTimeSeries1.length, 1);\n    assert.deepStrictEqual(actualTimeSeries1[0].labelValues, labelValues);\n    assert.strictEqual(actualTimeSeries1[0].points[0].value, 25);\n    assert.deepStrictEqual(actualMetricDescriptor2, expectedMetricDescriptor2);\n    assert.strictEqual(actualTimeSeries2.length, 1);\n    assert.deepStrictEqual(actualMetricDescriptor3, expectedMetricDescriptor3);\n    assert.strictEqual(actualTimeSeries3.length, 1);\n    assert.deepStrictEqual(actualTimeSeries3[0].labelValues, labelValues);\n    assert.strictEqual(actualTimeSeries3[0].points[0].value, 300);\n    assert.deepStrictEqual(actualMetricDescriptor4, expectedMetricDescriptor4);\n    assert.strictEqual(actualTimeSeries4.length, 1);\n    assert.deepStrictEqual(actualTimeSeries4[0].labelValues, labelValues);\n    assert.deepStrictEqual(actualTimeSeries4[0].points[0].value, {\n      bucketOptions: { explicit: { bounds: [2, 4, 6] } },\n      buckets: [{ count: 1 }, { count: 2 }, { count: 2 }, { count: 0 }],\n      count: 5,\n      sum: 16.099999999999998,\n      sumOfSquaredDeviation: 10.427999999999997,\n    });\n  });\n});\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"350a2263c1fde1c09680b2d576dc7cf7e63a7bdb","contentHash":"1a188e8cfcd1497037d9e5378dd969df0ce332a963e306cfc88e182bb643f496"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-metric-registry.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-metric-registry.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":15},"end":{"line":18,"column":32}},"2":{"start":{"line":19,"column":20},"end":{"line":19,"column":54}},"3":{"start":{"line":20,"column":16},"end":{"line":20,"column":54}},"4":{"start":{"line":21,"column":26},"end":{"line":21,"column":67}},"5":{"start":{"line":22,"column":16},"end":{"line":22,"column":45}},"6":{"start":{"line":23,"column":20},"end":{"line":23,"column":33}},"7":{"start":{"line":24,"column":27},"end":{"line":24,"column":47}},"8":{"start":{"line":25,"column":13},"end":{"line":25,"column":37}},"9":{"start":{"line":26,"column":19},"end":{"line":26,"column":57}},"10":{"start":{"line":27,"column":25},"end":{"line":27,"column":43}},"11":{"start":{"line":28,"column":25},"end":{"line":28,"column":43}},"12":{"start":{"line":29,"column":23},"end":{"line":33,"column":1}},"13":{"start":{"line":34,"column":0},"end":{"line":107,"column":3}},"14":{"start":{"line":36,"column":25},"end":{"line":36,"column":39}},"15":{"start":{"line":37,"column":22},"end":{"line":37,"column":30}},"16":{"start":{"line":38,"column":23},"end":{"line":38,"column":58}},"17":{"start":{"line":39,"column":4},"end":{"line":46,"column":7}},"18":{"start":{"line":40,"column":8},"end":{"line":40,"column":58}},"19":{"start":{"line":42,"column":8},"end":{"line":42,"column":42}},"20":{"start":{"line":42,"column":31},"end":{"line":42,"column":41}},"21":{"start":{"line":43,"column":8},"end":{"line":43,"column":39}},"22":{"start":{"line":43,"column":25},"end":{"line":43,"column":38}},"23":{"start":{"line":45,"column":8},"end":{"line":45,"column":51}},"24":{"start":{"line":47,"column":4},"end":{"line":52,"column":7}},"25":{"start":{"line":48,"column":8},"end":{"line":48,"column":38}},"26":{"start":{"line":49,"column":8},"end":{"line":49,"column":29}},"27":{"start":{"line":51,"column":8},"end":{"line":51,"column":57}},"28":{"start":{"line":53,"column":4},"end":{"line":75,"column":7}},"29":{"start":{"line":54,"column":27},"end":{"line":54,"column":78}},"30":{"start":{"line":55,"column":27},"end":{"line":55,"column":77}},"31":{"start":{"line":56,"column":8},"end":{"line":56,"column":28}},"32":{"start":{"line":57,"column":24},"end":{"line":57,"column":65}},"33":{"start":{"line":58,"column":8},"end":{"line":58,"column":46}},"34":{"start":{"line":59,"column":45},"end":{"line":59,"column":52}},"35":{"start":{"line":60,"column":8},"end":{"line":66,"column":11}},"36":{"start":{"line":67,"column":8},"end":{"line":67,"column":49}},"37":{"start":{"line":68,"column":29},"end":{"line":68,"column":39}},"38":{"start":{"line":69,"column":24},"end":{"line":69,"column":30}},"39":{"start":{"line":70,"column":8},"end":{"line":70,"column":45}},"40":{"start":{"line":71,"column":8},"end":{"line":74,"column":11}},"41":{"start":{"line":76,"column":4},"end":{"line":98,"column":7}},"42":{"start":{"line":77,"column":27},"end":{"line":77,"column":62}},"43":{"start":{"line":78,"column":27},"end":{"line":78,"column":60}},"44":{"start":{"line":79,"column":8},"end":{"line":79,"column":28}},"45":{"start":{"line":80,"column":24},"end":{"line":80,"column":65}},"46":{"start":{"line":81,"column":8},"end":{"line":81,"column":46}},"47":{"start":{"line":82,"column":45},"end":{"line":82,"column":52}},"48":{"start":{"line":83,"column":8},"end":{"line":89,"column":11}},"49":{"start":{"line":90,"column":8},"end":{"line":90,"column":49}},"50":{"start":{"line":91,"column":29},"end":{"line":91,"column":39}},"51":{"start":{"line":92,"column":24},"end":{"line":92,"column":30}},"52":{"start":{"line":93,"column":8},"end":{"line":93,"column":45}},"53":{"start":{"line":94,"column":8},"end":{"line":97,"column":11}},"54":{"start":{"line":99,"column":4},"end":{"line":106,"column":7}},"55":{"start":{"line":100,"column":31},"end":{"line":100,"column":40}},"56":{"start":{"line":101,"column":8},"end":{"line":101,"column":59}},"57":{"start":{"line":102,"column":26},"end":{"line":102,"column":62}},"58":{"start":{"line":103,"column":8},"end":{"line":105,"column":135}},"59":{"start":{"line":104,"column":12},"end":{"line":104,"column":79}},"60":{"start":{"line":108,"column":0},"end":{"line":193,"column":3}},"61":{"start":{"line":110,"column":25},"end":{"line":110,"column":39}},"62":{"start":{"line":111,"column":22},"end":{"line":111,"column":30}},"63":{"start":{"line":112,"column":23},"end":{"line":112,"column":58}},"64":{"start":{"line":113,"column":4},"end":{"line":120,"column":7}},"65":{"start":{"line":114,"column":8},"end":{"line":114,"column":58}},"66":{"start":{"line":116,"column":8},"end":{"line":116,"column":42}},"67":{"start":{"line":116,"column":31},"end":{"line":116,"column":41}},"68":{"start":{"line":117,"column":8},"end":{"line":117,"column":39}},"69":{"start":{"line":117,"column":25},"end":{"line":117,"column":38}},"70":{"start":{"line":119,"column":8},"end":{"line":119,"column":51}},"71":{"start":{"line":121,"column":4},"end":{"line":126,"column":7}},"72":{"start":{"line":122,"column":8},"end":{"line":122,"column":38}},"73":{"start":{"line":123,"column":8},"end":{"line":123,"column":29}},"74":{"start":{"line":125,"column":8},"end":{"line":125,"column":57}},"75":{"start":{"line":127,"column":4},"end":{"line":151,"column":7}},"76":{"start":{"line":128,"column":28},"end":{"line":128,"column":80}},"77":{"start":{"line":129,"column":27},"end":{"line":129,"column":78}},"78":{"start":{"line":130,"column":8},"end":{"line":130,"column":28}},"79":{"start":{"line":131,"column":28},"end":{"line":131,"column":79}},"80":{"start":{"line":132,"column":8},"end":{"line":132,"column":29}},"81":{"start":{"line":133,"column":24},"end":{"line":133,"column":65}},"82":{"start":{"line":134,"column":8},"end":{"line":134,"column":46}},"83":{"start":{"line":135,"column":45},"end":{"line":135,"column":52}},"84":{"start":{"line":136,"column":8},"end":{"line":142,"column":11}},"85":{"start":{"line":143,"column":8},"end":{"line":143,"column":49}},"86":{"start":{"line":144,"column":29},"end":{"line":144,"column":39}},"87":{"start":{"line":145,"column":24},"end":{"line":145,"column":30}},"88":{"start":{"line":146,"column":8},"end":{"line":146,"column":45}},"89":{"start":{"line":147,"column":8},"end":{"line":150,"column":11}},"90":{"start":{"line":152,"column":4},"end":{"line":157,"column":7}},"91":{"start":{"line":153,"column":8},"end":{"line":153,"column":61}},"92":{"start":{"line":154,"column":8},"end":{"line":156,"column":87}},"93":{"start":{"line":155,"column":12},"end":{"line":155,"column":65}},"94":{"start":{"line":158,"column":4},"end":{"line":169,"column":7}},"95":{"start":{"line":159,"column":29},"end":{"line":159,"column":38}},"96":{"start":{"line":160,"column":8},"end":{"line":160,"column":48}},"97":{"start":{"line":161,"column":8},"end":{"line":163,"column":68}},"98":{"start":{"line":162,"column":12},"end":{"line":162,"column":69}},"99":{"start":{"line":164,"column":8},"end":{"line":164,"column":35}},"100":{"start":{"line":165,"column":8},"end":{"line":165,"column":39}},"101":{"start":{"line":166,"column":8},"end":{"line":168,"column":68}},"102":{"start":{"line":167,"column":12},"end":{"line":167,"column":69}},"103":{"start":{"line":170,"column":4},"end":{"line":192,"column":7}},"104":{"start":{"line":171,"column":28},"end":{"line":171,"column":64}},"105":{"start":{"line":172,"column":27},"end":{"line":172,"column":61}},"106":{"start":{"line":173,"column":8},"end":{"line":173,"column":28}},"107":{"start":{"line":174,"column":24},"end":{"line":174,"column":65}},"108":{"start":{"line":175,"column":8},"end":{"line":175,"column":46}},"109":{"start":{"line":176,"column":45},"end":{"line":176,"column":52}},"110":{"start":{"line":177,"column":8},"end":{"line":183,"column":11}},"111":{"start":{"line":184,"column":8},"end":{"line":184,"column":49}},"112":{"start":{"line":185,"column":29},"end":{"line":185,"column":39}},"113":{"start":{"line":186,"column":24},"end":{"line":186,"column":30}},"114":{"start":{"line":187,"column":8},"end":{"line":187,"column":45}},"115":{"start":{"line":188,"column":8},"end":{"line":191,"column":11}},"116":{"start":{"line":194,"column":0},"end":{"line":284,"column":3}},"117":{"start":{"line":196,"column":25},"end":{"line":196,"column":39}},"118":{"start":{"line":197,"column":22},"end":{"line":197,"column":30}},"119":{"start":{"line":198,"column":23},"end":{"line":198,"column":58}},"120":{"start":{"line":199,"column":4},"end":{"line":206,"column":7}},"121":{"start":{"line":200,"column":8},"end":{"line":200,"column":58}},"122":{"start":{"line":202,"column":8},"end":{"line":202,"column":42}},"123":{"start":{"line":202,"column":31},"end":{"line":202,"column":41}},"124":{"start":{"line":203,"column":8},"end":{"line":203,"column":39}},"125":{"start":{"line":203,"column":25},"end":{"line":203,"column":38}},"126":{"start":{"line":205,"column":8},"end":{"line":205,"column":51}},"127":{"start":{"line":207,"column":4},"end":{"line":212,"column":7}},"128":{"start":{"line":208,"column":8},"end":{"line":208,"column":38}},"129":{"start":{"line":209,"column":8},"end":{"line":209,"column":29}},"130":{"start":{"line":211,"column":8},"end":{"line":211,"column":57}},"131":{"start":{"line":213,"column":4},"end":{"line":237,"column":7}},"132":{"start":{"line":214,"column":20},"end":{"line":214,"column":29}},"133":{"start":{"line":215,"column":8},"end":{"line":215,"column":32}},"134":{"start":{"line":216,"column":34},"end":{"line":216,"column":92}},"135":{"start":{"line":217,"column":8},"end":{"line":217,"column":66}},"136":{"start":{"line":218,"column":8},"end":{"line":218,"column":34}},"137":{"start":{"line":219,"column":24},"end":{"line":219,"column":65}},"138":{"start":{"line":220,"column":8},"end":{"line":220,"column":46}},"139":{"start":{"line":221,"column":45},"end":{"line":221,"column":52}},"140":{"start":{"line":222,"column":8},"end":{"line":228,"column":11}},"141":{"start":{"line":229,"column":8},"end":{"line":229,"column":49}},"142":{"start":{"line":230,"column":29},"end":{"line":230,"column":39}},"143":{"start":{"line":231,"column":24},"end":{"line":231,"column":30}},"144":{"start":{"line":232,"column":8},"end":{"line":232,"column":43}},"145":{"start":{"line":233,"column":8},"end":{"line":236,"column":11}},"146":{"start":{"line":238,"column":4},"end":{"line":243,"column":7}},"147":{"start":{"line":239,"column":8},"end":{"line":239,"column":67}},"148":{"start":{"line":240,"column":8},"end":{"line":242,"column":87}},"149":{"start":{"line":241,"column":12},"end":{"line":241,"column":71}},"150":{"start":{"line":244,"column":4},"end":{"line":251,"column":7}},"151":{"start":{"line":245,"column":31},"end":{"line":245,"column":40}},"152":{"start":{"line":246,"column":8},"end":{"line":246,"column":59}},"153":{"start":{"line":247,"column":26},"end":{"line":247,"column":62}},"154":{"start":{"line":248,"column":8},"end":{"line":250,"column":135}},"155":{"start":{"line":249,"column":12},"end":{"line":249,"column":86}},"156":{"start":{"line":252,"column":4},"end":{"line":258,"column":7}},"157":{"start":{"line":253,"column":31},"end":{"line":253,"column":40}},"158":{"start":{"line":254,"column":8},"end":{"line":254,"column":48}},"159":{"start":{"line":255,"column":8},"end":{"line":257,"column":68}},"160":{"start":{"line":256,"column":12},"end":{"line":256,"column":75}},"161":{"start":{"line":259,"column":4},"end":{"line":283,"column":7}},"162":{"start":{"line":260,"column":20},"end":{"line":260,"column":29}},"163":{"start":{"line":261,"column":8},"end":{"line":261,"column":32}},"164":{"start":{"line":262,"column":34},"end":{"line":262,"column":76}},"165":{"start":{"line":263,"column":8},"end":{"line":263,"column":52}},"166":{"start":{"line":264,"column":8},"end":{"line":264,"column":34}},"167":{"start":{"line":265,"column":24},"end":{"line":265,"column":65}},"168":{"start":{"line":266,"column":8},"end":{"line":266,"column":46}},"169":{"start":{"line":267,"column":45},"end":{"line":267,"column":52}},"170":{"start":{"line":268,"column":8},"end":{"line":274,"column":11}},"171":{"start":{"line":275,"column":8},"end":{"line":275,"column":49}},"172":{"start":{"line":276,"column":29},"end":{"line":276,"column":39}},"173":{"start":{"line":277,"column":24},"end":{"line":277,"column":30}},"174":{"start":{"line":278,"column":8},"end":{"line":278,"column":43}},"175":{"start":{"line":279,"column":8},"end":{"line":282,"column":11}},"176":{"start":{"line":285,"column":0},"end":{"line":337,"column":3}},"177":{"start":{"line":287,"column":25},"end":{"line":287,"column":39}},"178":{"start":{"line":288,"column":22},"end":{"line":288,"column":30}},"179":{"start":{"line":289,"column":23},"end":{"line":289,"column":58}},"180":{"start":{"line":290,"column":4},"end":{"line":297,"column":7}},"181":{"start":{"line":291,"column":8},"end":{"line":291,"column":58}},"182":{"start":{"line":293,"column":8},"end":{"line":293,"column":42}},"183":{"start":{"line":293,"column":31},"end":{"line":293,"column":41}},"184":{"start":{"line":294,"column":8},"end":{"line":294,"column":39}},"185":{"start":{"line":294,"column":25},"end":{"line":294,"column":38}},"186":{"start":{"line":296,"column":8},"end":{"line":296,"column":51}},"187":{"start":{"line":298,"column":4},"end":{"line":303,"column":7}},"188":{"start":{"line":299,"column":8},"end":{"line":299,"column":38}},"189":{"start":{"line":300,"column":8},"end":{"line":300,"column":29}},"190":{"start":{"line":302,"column":8},"end":{"line":302,"column":57}},"191":{"start":{"line":304,"column":4},"end":{"line":330,"column":7}},"192":{"start":{"line":307,"column":16},"end":{"line":307,"column":27}},"193":{"start":{"line":310,"column":35},"end":{"line":310,"column":94}},"194":{"start":{"line":311,"column":8},"end":{"line":311,"column":82}},"195":{"start":{"line":312,"column":24},"end":{"line":312,"column":65}},"196":{"start":{"line":313,"column":8},"end":{"line":313,"column":46}},"197":{"start":{"line":314,"column":45},"end":{"line":314,"column":52}},"198":{"start":{"line":315,"column":8},"end":{"line":321,"column":11}},"199":{"start":{"line":322,"column":8},"end":{"line":322,"column":49}},"200":{"start":{"line":323,"column":29},"end":{"line":323,"column":39}},"201":{"start":{"line":324,"column":24},"end":{"line":324,"column":30}},"202":{"start":{"line":325,"column":8},"end":{"line":325,"column":45}},"203":{"start":{"line":326,"column":8},"end":{"line":329,"column":11}},"204":{"start":{"line":331,"column":4},"end":{"line":336,"column":7}},"205":{"start":{"line":332,"column":8},"end":{"line":332,"column":68}},"206":{"start":{"line":333,"column":8},"end":{"line":335,"column":87}},"207":{"start":{"line":334,"column":12},"end":{"line":334,"column":72}},"208":{"start":{"line":338,"column":0},"end":{"line":411,"column":3}},"209":{"start":{"line":340,"column":25},"end":{"line":340,"column":39}},"210":{"start":{"line":341,"column":22},"end":{"line":341,"column":30}},"211":{"start":{"line":342,"column":23},"end":{"line":342,"column":58}},"212":{"start":{"line":343,"column":4},"end":{"line":350,"column":7}},"213":{"start":{"line":344,"column":8},"end":{"line":344,"column":58}},"214":{"start":{"line":346,"column":8},"end":{"line":346,"column":42}},"215":{"start":{"line":346,"column":31},"end":{"line":346,"column":41}},"216":{"start":{"line":347,"column":8},"end":{"line":347,"column":39}},"217":{"start":{"line":347,"column":25},"end":{"line":347,"column":38}},"218":{"start":{"line":349,"column":8},"end":{"line":349,"column":51}},"219":{"start":{"line":351,"column":4},"end":{"line":356,"column":7}},"220":{"start":{"line":352,"column":8},"end":{"line":352,"column":38}},"221":{"start":{"line":353,"column":8},"end":{"line":353,"column":29}},"222":{"start":{"line":355,"column":8},"end":{"line":355,"column":57}},"223":{"start":{"line":357,"column":4},"end":{"line":379,"column":7}},"224":{"start":{"line":358,"column":27},"end":{"line":358,"column":83}},"225":{"start":{"line":359,"column":27},"end":{"line":359,"column":77}},"226":{"start":{"line":360,"column":8},"end":{"line":360,"column":25}},"227":{"start":{"line":361,"column":24},"end":{"line":361,"column":65}},"228":{"start":{"line":362,"column":8},"end":{"line":362,"column":46}},"229":{"start":{"line":363,"column":45},"end":{"line":363,"column":52}},"230":{"start":{"line":364,"column":8},"end":{"line":370,"column":11}},"231":{"start":{"line":371,"column":8},"end":{"line":371,"column":49}},"232":{"start":{"line":372,"column":29},"end":{"line":372,"column":39}},"233":{"start":{"line":373,"column":24},"end":{"line":373,"column":30}},"234":{"start":{"line":374,"column":8},"end":{"line":374,"column":43}},"235":{"start":{"line":375,"column":8},"end":{"line":378,"column":11}},"236":{"start":{"line":380,"column":4},"end":{"line":402,"column":7}},"237":{"start":{"line":381,"column":27},"end":{"line":381,"column":67}},"238":{"start":{"line":382,"column":27},"end":{"line":382,"column":60}},"239":{"start":{"line":383,"column":8},"end":{"line":383,"column":28}},"240":{"start":{"line":384,"column":24},"end":{"line":384,"column":65}},"241":{"start":{"line":385,"column":8},"end":{"line":385,"column":46}},"242":{"start":{"line":386,"column":45},"end":{"line":386,"column":52}},"243":{"start":{"line":387,"column":8},"end":{"line":393,"column":11}},"244":{"start":{"line":394,"column":8},"end":{"line":394,"column":49}},"245":{"start":{"line":395,"column":29},"end":{"line":395,"column":39}},"246":{"start":{"line":396,"column":24},"end":{"line":396,"column":30}},"247":{"start":{"line":397,"column":8},"end":{"line":397,"column":45}},"248":{"start":{"line":398,"column":8},"end":{"line":401,"column":11}},"249":{"start":{"line":403,"column":4},"end":{"line":410,"column":7}},"250":{"start":{"line":404,"column":31},"end":{"line":404,"column":40}},"251":{"start":{"line":405,"column":8},"end":{"line":405,"column":59}},"252":{"start":{"line":406,"column":26},"end":{"line":406,"column":62}},"253":{"start":{"line":407,"column":8},"end":{"line":409,"column":135}},"254":{"start":{"line":408,"column":12},"end":{"line":408,"column":84}},"255":{"start":{"line":412,"column":0},"end":{"line":486,"column":3}},"256":{"start":{"line":414,"column":25},"end":{"line":414,"column":39}},"257":{"start":{"line":415,"column":22},"end":{"line":415,"column":30}},"258":{"start":{"line":416,"column":23},"end":{"line":416,"column":58}},"259":{"start":{"line":417,"column":4},"end":{"line":424,"column":7}},"260":{"start":{"line":418,"column":8},"end":{"line":418,"column":58}},"261":{"start":{"line":420,"column":8},"end":{"line":420,"column":42}},"262":{"start":{"line":420,"column":31},"end":{"line":420,"column":41}},"263":{"start":{"line":421,"column":8},"end":{"line":421,"column":39}},"264":{"start":{"line":421,"column":25},"end":{"line":421,"column":38}},"265":{"start":{"line":423,"column":8},"end":{"line":423,"column":51}},"266":{"start":{"line":425,"column":4},"end":{"line":430,"column":7}},"267":{"start":{"line":426,"column":8},"end":{"line":426,"column":38}},"268":{"start":{"line":427,"column":8},"end":{"line":427,"column":29}},"269":{"start":{"line":429,"column":8},"end":{"line":429,"column":57}},"270":{"start":{"line":431,"column":4},"end":{"line":453,"column":7}},"271":{"start":{"line":432,"column":27},"end":{"line":432,"column":84}},"272":{"start":{"line":433,"column":27},"end":{"line":433,"column":77}},"273":{"start":{"line":434,"column":8},"end":{"line":434,"column":28}},"274":{"start":{"line":435,"column":24},"end":{"line":435,"column":65}},"275":{"start":{"line":436,"column":8},"end":{"line":436,"column":46}},"276":{"start":{"line":437,"column":45},"end":{"line":437,"column":52}},"277":{"start":{"line":438,"column":8},"end":{"line":444,"column":11}},"278":{"start":{"line":445,"column":8},"end":{"line":445,"column":49}},"279":{"start":{"line":446,"column":29},"end":{"line":446,"column":39}},"280":{"start":{"line":447,"column":24},"end":{"line":447,"column":30}},"281":{"start":{"line":448,"column":8},"end":{"line":448,"column":45}},"282":{"start":{"line":449,"column":8},"end":{"line":452,"column":11}},"283":{"start":{"line":454,"column":4},"end":{"line":477,"column":7}},"284":{"start":{"line":455,"column":27},"end":{"line":455,"column":68}},"285":{"start":{"line":456,"column":27},"end":{"line":456,"column":60}},"286":{"start":{"line":457,"column":8},"end":{"line":457,"column":25}},"287":{"start":{"line":458,"column":8},"end":{"line":458,"column":31}},"288":{"start":{"line":459,"column":24},"end":{"line":459,"column":65}},"289":{"start":{"line":460,"column":8},"end":{"line":460,"column":46}},"290":{"start":{"line":461,"column":45},"end":{"line":461,"column":52}},"291":{"start":{"line":462,"column":8},"end":{"line":468,"column":11}},"292":{"start":{"line":469,"column":8},"end":{"line":469,"column":49}},"293":{"start":{"line":470,"column":29},"end":{"line":470,"column":39}},"294":{"start":{"line":471,"column":24},"end":{"line":471,"column":30}},"295":{"start":{"line":472,"column":8},"end":{"line":472,"column":48}},"296":{"start":{"line":473,"column":8},"end":{"line":476,"column":11}},"297":{"start":{"line":478,"column":4},"end":{"line":485,"column":7}},"298":{"start":{"line":479,"column":31},"end":{"line":479,"column":40}},"299":{"start":{"line":480,"column":8},"end":{"line":480,"column":59}},"300":{"start":{"line":481,"column":26},"end":{"line":481,"column":62}},"301":{"start":{"line":482,"column":8},"end":{"line":484,"column":135}},"302":{"start":{"line":483,"column":12},"end":{"line":483,"column":85}},"303":{"start":{"line":487,"column":0},"end":{"line":580,"column":3}},"304":{"start":{"line":489,"column":25},"end":{"line":489,"column":39}},"305":{"start":{"line":490,"column":22},"end":{"line":490,"column":30}},"306":{"start":{"line":491,"column":23},"end":{"line":491,"column":58}},"307":{"start":{"line":492,"column":4},"end":{"line":499,"column":7}},"308":{"start":{"line":493,"column":8},"end":{"line":493,"column":58}},"309":{"start":{"line":495,"column":8},"end":{"line":495,"column":42}},"310":{"start":{"line":495,"column":31},"end":{"line":495,"column":41}},"311":{"start":{"line":496,"column":8},"end":{"line":496,"column":39}},"312":{"start":{"line":496,"column":25},"end":{"line":496,"column":38}},"313":{"start":{"line":498,"column":8},"end":{"line":498,"column":51}},"314":{"start":{"line":500,"column":4},"end":{"line":505,"column":7}},"315":{"start":{"line":501,"column":8},"end":{"line":501,"column":38}},"316":{"start":{"line":502,"column":8},"end":{"line":502,"column":29}},"317":{"start":{"line":504,"column":8},"end":{"line":504,"column":57}},"318":{"start":{"line":506,"column":4},"end":{"line":530,"column":7}},"319":{"start":{"line":507,"column":20},"end":{"line":507,"column":29}},"320":{"start":{"line":508,"column":8},"end":{"line":508,"column":32}},"321":{"start":{"line":509,"column":39},"end":{"line":509,"column":102}},"322":{"start":{"line":510,"column":8},"end":{"line":510,"column":71}},"323":{"start":{"line":511,"column":8},"end":{"line":511,"column":34}},"324":{"start":{"line":512,"column":24},"end":{"line":512,"column":65}},"325":{"start":{"line":513,"column":8},"end":{"line":513,"column":46}},"326":{"start":{"line":514,"column":45},"end":{"line":514,"column":52}},"327":{"start":{"line":515,"column":8},"end":{"line":521,"column":11}},"328":{"start":{"line":522,"column":8},"end":{"line":522,"column":49}},"329":{"start":{"line":523,"column":8},"end":{"line":529,"column":11}},"330":{"start":{"line":531,"column":4},"end":{"line":536,"column":7}},"331":{"start":{"line":532,"column":8},"end":{"line":532,"column":72}},"332":{"start":{"line":533,"column":8},"end":{"line":535,"column":87}},"333":{"start":{"line":534,"column":12},"end":{"line":534,"column":76}},"334":{"start":{"line":537,"column":4},"end":{"line":547,"column":7}},"335":{"start":{"line":538,"column":31},"end":{"line":538,"column":40}},"336":{"start":{"line":539,"column":8},"end":{"line":539,"column":59}},"337":{"start":{"line":540,"column":26},"end":{"line":540,"column":62}},"338":{"start":{"line":541,"column":8},"end":{"line":546,"column":135}},"339":{"start":{"line":542,"column":12},"end":{"line":545,"column":15}},"340":{"start":{"line":548,"column":4},"end":{"line":554,"column":7}},"341":{"start":{"line":549,"column":31},"end":{"line":549,"column":40}},"342":{"start":{"line":550,"column":8},"end":{"line":550,"column":48}},"343":{"start":{"line":551,"column":8},"end":{"line":553,"column":68}},"344":{"start":{"line":552,"column":12},"end":{"line":552,"column":80}},"345":{"start":{"line":555,"column":4},"end":{"line":579,"column":7}},"346":{"start":{"line":556,"column":20},"end":{"line":556,"column":29}},"347":{"start":{"line":557,"column":8},"end":{"line":557,"column":32}},"348":{"start":{"line":558,"column":39},"end":{"line":558,"column":86}},"349":{"start":{"line":559,"column":8},"end":{"line":559,"column":57}},"350":{"start":{"line":560,"column":8},"end":{"line":560,"column":34}},"351":{"start":{"line":561,"column":24},"end":{"line":561,"column":65}},"352":{"start":{"line":562,"column":8},"end":{"line":562,"column":46}},"353":{"start":{"line":563,"column":45},"end":{"line":563,"column":52}},"354":{"start":{"line":564,"column":8},"end":{"line":570,"column":11}},"355":{"start":{"line":571,"column":8},"end":{"line":571,"column":49}},"356":{"start":{"line":572,"column":8},"end":{"line":578,"column":11}},"357":{"start":{"line":581,"column":0},"end":{"line":691,"column":3}},"358":{"start":{"line":583,"column":25},"end":{"line":583,"column":39}},"359":{"start":{"line":584,"column":22},"end":{"line":584,"column":30}},"360":{"start":{"line":585,"column":23},"end":{"line":585,"column":58}},"361":{"start":{"line":586,"column":4},"end":{"line":593,"column":7}},"362":{"start":{"line":587,"column":8},"end":{"line":587,"column":58}},"363":{"start":{"line":589,"column":8},"end":{"line":589,"column":42}},"364":{"start":{"line":589,"column":31},"end":{"line":589,"column":41}},"365":{"start":{"line":590,"column":8},"end":{"line":590,"column":39}},"366":{"start":{"line":590,"column":25},"end":{"line":590,"column":38}},"367":{"start":{"line":592,"column":8},"end":{"line":592,"column":51}},"368":{"start":{"line":594,"column":4},"end":{"line":599,"column":7}},"369":{"start":{"line":595,"column":8},"end":{"line":595,"column":38}},"370":{"start":{"line":596,"column":8},"end":{"line":596,"column":29}},"371":{"start":{"line":598,"column":8},"end":{"line":598,"column":57}},"372":{"start":{"line":600,"column":4},"end":{"line":629,"column":7}},"373":{"start":{"line":603,"column":16},"end":{"line":603,"column":28}},"374":{"start":{"line":606,"column":22},"end":{"line":606,"column":40}},"375":{"start":{"line":607,"column":40},"end":{"line":607,"column":104}},"376":{"start":{"line":608,"column":8},"end":{"line":610,"column":11}},"377":{"start":{"line":609,"column":12},"end":{"line":609,"column":31}},"378":{"start":{"line":611,"column":24},"end":{"line":611,"column":65}},"379":{"start":{"line":612,"column":8},"end":{"line":612,"column":46}},"380":{"start":{"line":613,"column":45},"end":{"line":613,"column":52}},"381":{"start":{"line":614,"column":8},"end":{"line":620,"column":11}},"382":{"start":{"line":621,"column":8},"end":{"line":621,"column":49}},"383":{"start":{"line":622,"column":8},"end":{"line":628,"column":11}},"384":{"start":{"line":630,"column":4},"end":{"line":635,"column":7}},"385":{"start":{"line":631,"column":8},"end":{"line":631,"column":73}},"386":{"start":{"line":632,"column":8},"end":{"line":634,"column":87}},"387":{"start":{"line":633,"column":12},"end":{"line":633,"column":77}},"388":{"start":{"line":636,"column":4},"end":{"line":646,"column":7}},"389":{"start":{"line":637,"column":31},"end":{"line":637,"column":40}},"390":{"start":{"line":638,"column":8},"end":{"line":638,"column":59}},"391":{"start":{"line":639,"column":26},"end":{"line":639,"column":62}},"392":{"start":{"line":640,"column":8},"end":{"line":645,"column":135}},"393":{"start":{"line":641,"column":12},"end":{"line":644,"column":15}},"394":{"start":{"line":647,"column":4},"end":{"line":653,"column":7}},"395":{"start":{"line":648,"column":31},"end":{"line":648,"column":40}},"396":{"start":{"line":649,"column":8},"end":{"line":649,"column":48}},"397":{"start":{"line":650,"column":8},"end":{"line":652,"column":68}},"398":{"start":{"line":651,"column":12},"end":{"line":651,"column":81}},"399":{"start":{"line":654,"column":4},"end":{"line":690,"column":7}},"400":{"start":{"line":657,"column":16},"end":{"line":657,"column":36}},"401":{"start":{"line":660,"column":16},"end":{"line":660,"column":36}},"402":{"start":{"line":663,"column":16},"end":{"line":663,"column":31}},"403":{"start":{"line":666,"column":20},"end":{"line":666,"column":36}},"404":{"start":{"line":667,"column":40},"end":{"line":667,"column":88}},"405":{"start":{"line":668,"column":8},"end":{"line":670,"column":11}},"406":{"start":{"line":669,"column":12},"end":{"line":669,"column":29}},"407":{"start":{"line":671,"column":8},"end":{"line":671,"column":18}},"408":{"start":{"line":672,"column":24},"end":{"line":672,"column":65}},"409":{"start":{"line":673,"column":8},"end":{"line":673,"column":46}},"410":{"start":{"line":674,"column":45},"end":{"line":674,"column":52}},"411":{"start":{"line":675,"column":8},"end":{"line":681,"column":11}},"412":{"start":{"line":682,"column":8},"end":{"line":682,"column":49}},"413":{"start":{"line":683,"column":8},"end":{"line":689,"column":11}},"414":{"start":{"line":692,"column":0},"end":{"line":771,"column":3}},"415":{"start":{"line":694,"column":25},"end":{"line":694,"column":39}},"416":{"start":{"line":695,"column":22},"end":{"line":695,"column":30}},"417":{"start":{"line":696,"column":23},"end":{"line":696,"column":58}},"418":{"start":{"line":697,"column":4},"end":{"line":704,"column":7}},"419":{"start":{"line":698,"column":8},"end":{"line":698,"column":58}},"420":{"start":{"line":700,"column":8},"end":{"line":700,"column":42}},"421":{"start":{"line":700,"column":31},"end":{"line":700,"column":41}},"422":{"start":{"line":701,"column":8},"end":{"line":701,"column":39}},"423":{"start":{"line":701,"column":25},"end":{"line":701,"column":38}},"424":{"start":{"line":703,"column":8},"end":{"line":703,"column":51}},"425":{"start":{"line":705,"column":4},"end":{"line":710,"column":7}},"426":{"start":{"line":706,"column":8},"end":{"line":706,"column":38}},"427":{"start":{"line":707,"column":8},"end":{"line":707,"column":29}},"428":{"start":{"line":709,"column":8},"end":{"line":709,"column":57}},"429":{"start":{"line":711,"column":4},"end":{"line":770,"column":7}},"430":{"start":{"line":712,"column":27},"end":{"line":712,"column":81}},"431":{"start":{"line":713,"column":8},"end":{"line":713,"column":68}},"432":{"start":{"line":714,"column":28},"end":{"line":714,"column":83}},"433":{"start":{"line":715,"column":8},"end":{"line":715,"column":69}},"434":{"start":{"line":716,"column":20},"end":{"line":716,"column":45}},"435":{"start":{"line":717,"column":34},"end":{"line":717,"column":95}},"436":{"start":{"line":718,"column":8},"end":{"line":720,"column":11}},"437":{"start":{"line":719,"column":24},"end":{"line":719,"column":34}},"438":{"start":{"line":721,"column":32},"end":{"line":721,"column":91}},"439":{"start":{"line":722,"column":8},"end":{"line":722,"column":70}},"440":{"start":{"line":723,"column":24},"end":{"line":723,"column":65}},"441":{"start":{"line":724,"column":8},"end":{"line":724,"column":46}},"442":{"start":{"line":725,"column":234},"end":{"line":725,"column":241}},"443":{"start":{"line":726,"column":8},"end":{"line":732,"column":11}},"444":{"start":{"line":733,"column":8},"end":{"line":739,"column":11}},"445":{"start":{"line":740,"column":8},"end":{"line":746,"column":11}},"446":{"start":{"line":747,"column":8},"end":{"line":753,"column":11}},"447":{"start":{"line":754,"column":8},"end":{"line":754,"column":50}},"448":{"start":{"line":755,"column":8},"end":{"line":755,"column":60}},"449":{"start":{"line":756,"column":8},"end":{"line":756,"column":64}},"450":{"start":{"line":757,"column":8},"end":{"line":757,"column":91}},"451":{"start":{"line":758,"column":8},"end":{"line":758,"column":87}},"452":{"start":{"line":759,"column":8},"end":{"line":759,"column":50}},"453":{"start":{"line":760,"column":8},"end":{"line":760,"column":60}},"454":{"start":{"line":761,"column":8},"end":{"line":761,"column":64}},"455":{"start":{"line":762,"column":8},"end":{"line":762,"column":50}},"456":{"start":{"line":763,"column":8},"end":{"line":763,"column":60}},"457":{"start":{"line":764,"column":8},"end":{"line":764,"column":62}},"458":{"start":{"line":765,"column":8},"end":{"line":765,"column":103}},"459":{"start":{"line":766,"column":8},"end":{"line":766,"column":103}},"460":{"start":{"line":767,"column":8},"end":{"line":767,"column":50}},"461":{"start":{"line":768,"column":8},"end":{"line":768,"column":60}},"462":{"start":{"line":769,"column":8},"end":{"line":769,"column":62}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":34,"column":26},"end":{"line":34,"column":27}},"loc":{"start":{"line":34,"column":32},"end":{"line":107,"column":1}},"line":34},"1":{"name":"(anonymous_1)","decl":{"start":{"line":39,"column":15},"end":{"line":39,"column":16}},"loc":{"start":{"line":39,"column":21},"end":{"line":46,"column":5}},"line":39},"2":{"name":"(anonymous_2)","decl":{"start":{"line":42,"column":25},"end":{"line":42,"column":26}},"loc":{"start":{"line":42,"column":31},"end":{"line":42,"column":41}},"line":42},"3":{"name":"(anonymous_3)","decl":{"start":{"line":43,"column":19},"end":{"line":43,"column":20}},"loc":{"start":{"line":43,"column":25},"end":{"line":43,"column":38}},"line":43},"4":{"name":"(anonymous_4)","decl":{"start":{"line":47,"column":14},"end":{"line":47,"column":15}},"loc":{"start":{"line":47,"column":20},"end":{"line":52,"column":5}},"line":47},"5":{"name":"(anonymous_5)","decl":{"start":{"line":53,"column":33},"end":{"line":53,"column":34}},"loc":{"start":{"line":53,"column":39},"end":{"line":75,"column":5}},"line":53},"6":{"name":"(anonymous_6)","decl":{"start":{"line":76,"column":49},"end":{"line":76,"column":50}},"loc":{"start":{"line":76,"column":55},"end":{"line":98,"column":5}},"line":76},"7":{"name":"(anonymous_7)","decl":{"start":{"line":99,"column":88},"end":{"line":99,"column":89}},"loc":{"start":{"line":99,"column":94},"end":{"line":106,"column":5}},"line":99},"8":{"name":"(anonymous_8)","decl":{"start":{"line":103,"column":22},"end":{"line":103,"column":23}},"loc":{"start":{"line":103,"column":28},"end":{"line":105,"column":9}},"line":103},"9":{"name":"(anonymous_9)","decl":{"start":{"line":108,"column":27},"end":{"line":108,"column":28}},"loc":{"start":{"line":108,"column":33},"end":{"line":193,"column":1}},"line":108},"10":{"name":"(anonymous_10)","decl":{"start":{"line":113,"column":15},"end":{"line":113,"column":16}},"loc":{"start":{"line":113,"column":21},"end":{"line":120,"column":5}},"line":113},"11":{"name":"(anonymous_11)","decl":{"start":{"line":116,"column":25},"end":{"line":116,"column":26}},"loc":{"start":{"line":116,"column":31},"end":{"line":116,"column":41}},"line":116},"12":{"name":"(anonymous_12)","decl":{"start":{"line":117,"column":19},"end":{"line":117,"column":20}},"loc":{"start":{"line":117,"column":25},"end":{"line":117,"column":38}},"line":117},"13":{"name":"(anonymous_13)","decl":{"start":{"line":121,"column":14},"end":{"line":121,"column":15}},"loc":{"start":{"line":121,"column":20},"end":{"line":126,"column":5}},"line":121},"14":{"name":"(anonymous_14)","decl":{"start":{"line":127,"column":33},"end":{"line":127,"column":34}},"loc":{"start":{"line":127,"column":39},"end":{"line":151,"column":5}},"line":127},"15":{"name":"(anonymous_15)","decl":{"start":{"line":152,"column":62},"end":{"line":152,"column":63}},"loc":{"start":{"line":152,"column":68},"end":{"line":157,"column":5}},"line":152},"16":{"name":"(anonymous_16)","decl":{"start":{"line":154,"column":22},"end":{"line":154,"column":23}},"loc":{"start":{"line":154,"column":28},"end":{"line":156,"column":9}},"line":154},"17":{"name":"(anonymous_17)","decl":{"start":{"line":158,"column":75},"end":{"line":158,"column":76}},"loc":{"start":{"line":158,"column":81},"end":{"line":169,"column":5}},"line":158},"18":{"name":"(anonymous_18)","decl":{"start":{"line":161,"column":22},"end":{"line":161,"column":23}},"loc":{"start":{"line":161,"column":28},"end":{"line":163,"column":9}},"line":161},"19":{"name":"(anonymous_19)","decl":{"start":{"line":166,"column":22},"end":{"line":166,"column":23}},"loc":{"start":{"line":166,"column":28},"end":{"line":168,"column":9}},"line":166},"20":{"name":"(anonymous_20)","decl":{"start":{"line":170,"column":49},"end":{"line":170,"column":50}},"loc":{"start":{"line":170,"column":55},"end":{"line":192,"column":5}},"line":170},"21":{"name":"(anonymous_21)","decl":{"start":{"line":194,"column":33},"end":{"line":194,"column":34}},"loc":{"start":{"line":194,"column":39},"end":{"line":284,"column":1}},"line":194},"22":{"name":"(anonymous_22)","decl":{"start":{"line":199,"column":15},"end":{"line":199,"column":16}},"loc":{"start":{"line":199,"column":21},"end":{"line":206,"column":5}},"line":199},"23":{"name":"(anonymous_23)","decl":{"start":{"line":202,"column":25},"end":{"line":202,"column":26}},"loc":{"start":{"line":202,"column":31},"end":{"line":202,"column":41}},"line":202},"24":{"name":"(anonymous_24)","decl":{"start":{"line":203,"column":19},"end":{"line":203,"column":20}},"loc":{"start":{"line":203,"column":25},"end":{"line":203,"column":38}},"line":203},"25":{"name":"(anonymous_25)","decl":{"start":{"line":207,"column":14},"end":{"line":207,"column":15}},"loc":{"start":{"line":207,"column":20},"end":{"line":212,"column":5}},"line":207},"26":{"name":"(anonymous_26)","decl":{"start":{"line":213,"column":33},"end":{"line":213,"column":34}},"loc":{"start":{"line":213,"column":39},"end":{"line":237,"column":5}},"line":213},"27":{"name":"(anonymous_27)","decl":{"start":{"line":238,"column":62},"end":{"line":238,"column":63}},"loc":{"start":{"line":238,"column":68},"end":{"line":243,"column":5}},"line":238},"28":{"name":"(anonymous_28)","decl":{"start":{"line":240,"column":22},"end":{"line":240,"column":23}},"loc":{"start":{"line":240,"column":28},"end":{"line":242,"column":9}},"line":240},"29":{"name":"(anonymous_29)","decl":{"start":{"line":244,"column":88},"end":{"line":244,"column":89}},"loc":{"start":{"line":244,"column":94},"end":{"line":251,"column":5}},"line":244},"30":{"name":"(anonymous_30)","decl":{"start":{"line":248,"column":22},"end":{"line":248,"column":23}},"loc":{"start":{"line":248,"column":28},"end":{"line":250,"column":9}},"line":248},"31":{"name":"(anonymous_31)","decl":{"start":{"line":252,"column":75},"end":{"line":252,"column":76}},"loc":{"start":{"line":252,"column":81},"end":{"line":258,"column":5}},"line":252},"32":{"name":"(anonymous_32)","decl":{"start":{"line":255,"column":22},"end":{"line":255,"column":23}},"loc":{"start":{"line":255,"column":28},"end":{"line":257,"column":9}},"line":255},"33":{"name":"(anonymous_33)","decl":{"start":{"line":259,"column":49},"end":{"line":259,"column":50}},"loc":{"start":{"line":259,"column":55},"end":{"line":283,"column":5}},"line":259},"34":{"name":"(anonymous_34)","decl":{"start":{"line":285,"column":34},"end":{"line":285,"column":35}},"loc":{"start":{"line":285,"column":40},"end":{"line":337,"column":1}},"line":285},"35":{"name":"(anonymous_35)","decl":{"start":{"line":290,"column":15},"end":{"line":290,"column":16}},"loc":{"start":{"line":290,"column":21},"end":{"line":297,"column":5}},"line":290},"36":{"name":"(anonymous_36)","decl":{"start":{"line":293,"column":25},"end":{"line":293,"column":26}},"loc":{"start":{"line":293,"column":31},"end":{"line":293,"column":41}},"line":293},"37":{"name":"(anonymous_37)","decl":{"start":{"line":294,"column":19},"end":{"line":294,"column":20}},"loc":{"start":{"line":294,"column":25},"end":{"line":294,"column":38}},"line":294},"38":{"name":"(anonymous_38)","decl":{"start":{"line":298,"column":14},"end":{"line":298,"column":15}},"loc":{"start":{"line":298,"column":20},"end":{"line":303,"column":5}},"line":298},"39":{"name":"(anonymous_39)","decl":{"start":{"line":304,"column":33},"end":{"line":304,"column":34}},"loc":{"start":{"line":304,"column":39},"end":{"line":330,"column":5}},"line":304},"40":{"name":"(anonymous_40)","decl":{"start":{"line":306,"column":12},"end":{"line":306,"column":13}},"loc":{"start":{"line":306,"column":23},"end":{"line":308,"column":13}},"line":306},"41":{"name":"(anonymous_41)","decl":{"start":{"line":331,"column":62},"end":{"line":331,"column":63}},"loc":{"start":{"line":331,"column":68},"end":{"line":336,"column":5}},"line":331},"42":{"name":"(anonymous_42)","decl":{"start":{"line":333,"column":22},"end":{"line":333,"column":23}},"loc":{"start":{"line":333,"column":28},"end":{"line":335,"column":9}},"line":333},"43":{"name":"(anonymous_43)","decl":{"start":{"line":338,"column":31},"end":{"line":338,"column":32}},"loc":{"start":{"line":338,"column":37},"end":{"line":411,"column":1}},"line":338},"44":{"name":"(anonymous_44)","decl":{"start":{"line":343,"column":15},"end":{"line":343,"column":16}},"loc":{"start":{"line":343,"column":21},"end":{"line":350,"column":5}},"line":343},"45":{"name":"(anonymous_45)","decl":{"start":{"line":346,"column":25},"end":{"line":346,"column":26}},"loc":{"start":{"line":346,"column":31},"end":{"line":346,"column":41}},"line":346},"46":{"name":"(anonymous_46)","decl":{"start":{"line":347,"column":19},"end":{"line":347,"column":20}},"loc":{"start":{"line":347,"column":25},"end":{"line":347,"column":38}},"line":347},"47":{"name":"(anonymous_47)","decl":{"start":{"line":351,"column":14},"end":{"line":351,"column":15}},"loc":{"start":{"line":351,"column":20},"end":{"line":356,"column":5}},"line":351},"48":{"name":"(anonymous_48)","decl":{"start":{"line":357,"column":33},"end":{"line":357,"column":34}},"loc":{"start":{"line":357,"column":39},"end":{"line":379,"column":5}},"line":357},"49":{"name":"(anonymous_49)","decl":{"start":{"line":380,"column":49},"end":{"line":380,"column":50}},"loc":{"start":{"line":380,"column":55},"end":{"line":402,"column":5}},"line":380},"50":{"name":"(anonymous_50)","decl":{"start":{"line":403,"column":88},"end":{"line":403,"column":89}},"loc":{"start":{"line":403,"column":94},"end":{"line":410,"column":5}},"line":403},"51":{"name":"(anonymous_51)","decl":{"start":{"line":407,"column":22},"end":{"line":407,"column":23}},"loc":{"start":{"line":407,"column":28},"end":{"line":409,"column":9}},"line":407},"52":{"name":"(anonymous_52)","decl":{"start":{"line":412,"column":32},"end":{"line":412,"column":33}},"loc":{"start":{"line":412,"column":38},"end":{"line":486,"column":1}},"line":412},"53":{"name":"(anonymous_53)","decl":{"start":{"line":417,"column":15},"end":{"line":417,"column":16}},"loc":{"start":{"line":417,"column":21},"end":{"line":424,"column":5}},"line":417},"54":{"name":"(anonymous_54)","decl":{"start":{"line":420,"column":25},"end":{"line":420,"column":26}},"loc":{"start":{"line":420,"column":31},"end":{"line":420,"column":41}},"line":420},"55":{"name":"(anonymous_55)","decl":{"start":{"line":421,"column":19},"end":{"line":421,"column":20}},"loc":{"start":{"line":421,"column":25},"end":{"line":421,"column":38}},"line":421},"56":{"name":"(anonymous_56)","decl":{"start":{"line":425,"column":14},"end":{"line":425,"column":15}},"loc":{"start":{"line":425,"column":20},"end":{"line":430,"column":5}},"line":425},"57":{"name":"(anonymous_57)","decl":{"start":{"line":431,"column":33},"end":{"line":431,"column":34}},"loc":{"start":{"line":431,"column":39},"end":{"line":453,"column":5}},"line":431},"58":{"name":"(anonymous_58)","decl":{"start":{"line":454,"column":49},"end":{"line":454,"column":50}},"loc":{"start":{"line":454,"column":55},"end":{"line":477,"column":5}},"line":454},"59":{"name":"(anonymous_59)","decl":{"start":{"line":478,"column":88},"end":{"line":478,"column":89}},"loc":{"start":{"line":478,"column":94},"end":{"line":485,"column":5}},"line":478},"60":{"name":"(anonymous_60)","decl":{"start":{"line":482,"column":22},"end":{"line":482,"column":23}},"loc":{"start":{"line":482,"column":28},"end":{"line":484,"column":9}},"line":482},"61":{"name":"(anonymous_61)","decl":{"start":{"line":487,"column":38},"end":{"line":487,"column":39}},"loc":{"start":{"line":487,"column":44},"end":{"line":580,"column":1}},"line":487},"62":{"name":"(anonymous_62)","decl":{"start":{"line":492,"column":15},"end":{"line":492,"column":16}},"loc":{"start":{"line":492,"column":21},"end":{"line":499,"column":5}},"line":492},"63":{"name":"(anonymous_63)","decl":{"start":{"line":495,"column":25},"end":{"line":495,"column":26}},"loc":{"start":{"line":495,"column":31},"end":{"line":495,"column":41}},"line":495},"64":{"name":"(anonymous_64)","decl":{"start":{"line":496,"column":19},"end":{"line":496,"column":20}},"loc":{"start":{"line":496,"column":25},"end":{"line":496,"column":38}},"line":496},"65":{"name":"(anonymous_65)","decl":{"start":{"line":500,"column":14},"end":{"line":500,"column":15}},"loc":{"start":{"line":500,"column":20},"end":{"line":505,"column":5}},"line":500},"66":{"name":"(anonymous_66)","decl":{"start":{"line":506,"column":33},"end":{"line":506,"column":34}},"loc":{"start":{"line":506,"column":39},"end":{"line":530,"column":5}},"line":506},"67":{"name":"(anonymous_67)","decl":{"start":{"line":531,"column":62},"end":{"line":531,"column":63}},"loc":{"start":{"line":531,"column":68},"end":{"line":536,"column":5}},"line":531},"68":{"name":"(anonymous_68)","decl":{"start":{"line":533,"column":22},"end":{"line":533,"column":23}},"loc":{"start":{"line":533,"column":28},"end":{"line":535,"column":9}},"line":533},"69":{"name":"(anonymous_69)","decl":{"start":{"line":537,"column":88},"end":{"line":537,"column":89}},"loc":{"start":{"line":537,"column":94},"end":{"line":547,"column":5}},"line":537},"70":{"name":"(anonymous_70)","decl":{"start":{"line":541,"column":22},"end":{"line":541,"column":23}},"loc":{"start":{"line":541,"column":28},"end":{"line":546,"column":9}},"line":541},"71":{"name":"(anonymous_71)","decl":{"start":{"line":548,"column":75},"end":{"line":548,"column":76}},"loc":{"start":{"line":548,"column":81},"end":{"line":554,"column":5}},"line":548},"72":{"name":"(anonymous_72)","decl":{"start":{"line":551,"column":22},"end":{"line":551,"column":23}},"loc":{"start":{"line":551,"column":28},"end":{"line":553,"column":9}},"line":551},"73":{"name":"(anonymous_73)","decl":{"start":{"line":555,"column":49},"end":{"line":555,"column":50}},"loc":{"start":{"line":555,"column":55},"end":{"line":579,"column":5}},"line":555},"74":{"name":"(anonymous_74)","decl":{"start":{"line":581,"column":39},"end":{"line":581,"column":40}},"loc":{"start":{"line":581,"column":45},"end":{"line":691,"column":1}},"line":581},"75":{"name":"(anonymous_75)","decl":{"start":{"line":586,"column":15},"end":{"line":586,"column":16}},"loc":{"start":{"line":586,"column":21},"end":{"line":593,"column":5}},"line":586},"76":{"name":"(anonymous_76)","decl":{"start":{"line":589,"column":25},"end":{"line":589,"column":26}},"loc":{"start":{"line":589,"column":31},"end":{"line":589,"column":41}},"line":589},"77":{"name":"(anonymous_77)","decl":{"start":{"line":590,"column":19},"end":{"line":590,"column":20}},"loc":{"start":{"line":590,"column":25},"end":{"line":590,"column":38}},"line":590},"78":{"name":"(anonymous_78)","decl":{"start":{"line":594,"column":14},"end":{"line":594,"column":15}},"loc":{"start":{"line":594,"column":20},"end":{"line":599,"column":5}},"line":594},"79":{"name":"(anonymous_79)","decl":{"start":{"line":600,"column":33},"end":{"line":600,"column":34}},"loc":{"start":{"line":600,"column":39},"end":{"line":629,"column":5}},"line":600},"80":{"name":"(anonymous_80)","decl":{"start":{"line":602,"column":12},"end":{"line":602,"column":13}},"loc":{"start":{"line":602,"column":24},"end":{"line":604,"column":13}},"line":602},"81":{"name":"(anonymous_81)","decl":{"start":{"line":608,"column":67},"end":{"line":608,"column":68}},"loc":{"start":{"line":608,"column":73},"end":{"line":610,"column":9}},"line":608},"82":{"name":"(anonymous_82)","decl":{"start":{"line":630,"column":62},"end":{"line":630,"column":63}},"loc":{"start":{"line":630,"column":68},"end":{"line":635,"column":5}},"line":630},"83":{"name":"(anonymous_83)","decl":{"start":{"line":632,"column":22},"end":{"line":632,"column":23}},"loc":{"start":{"line":632,"column":28},"end":{"line":634,"column":9}},"line":632},"84":{"name":"(anonymous_84)","decl":{"start":{"line":636,"column":88},"end":{"line":636,"column":89}},"loc":{"start":{"line":636,"column":94},"end":{"line":646,"column":5}},"line":636},"85":{"name":"(anonymous_85)","decl":{"start":{"line":640,"column":22},"end":{"line":640,"column":23}},"loc":{"start":{"line":640,"column":28},"end":{"line":645,"column":9}},"line":640},"86":{"name":"(anonymous_86)","decl":{"start":{"line":647,"column":75},"end":{"line":647,"column":76}},"loc":{"start":{"line":647,"column":81},"end":{"line":653,"column":5}},"line":647},"87":{"name":"(anonymous_87)","decl":{"start":{"line":650,"column":22},"end":{"line":650,"column":23}},"loc":{"start":{"line":650,"column":28},"end":{"line":652,"column":9}},"line":650},"88":{"name":"(anonymous_88)","decl":{"start":{"line":654,"column":49},"end":{"line":654,"column":50}},"loc":{"start":{"line":654,"column":55},"end":{"line":690,"column":5}},"line":654},"89":{"name":"(anonymous_89)","decl":{"start":{"line":656,"column":12},"end":{"line":656,"column":13}},"loc":{"start":{"line":656,"column":26},"end":{"line":658,"column":13}},"line":656},"90":{"name":"(anonymous_90)","decl":{"start":{"line":659,"column":12},"end":{"line":659,"column":13}},"loc":{"start":{"line":659,"column":24},"end":{"line":661,"column":13}},"line":659},"91":{"name":"(anonymous_91)","decl":{"start":{"line":662,"column":12},"end":{"line":662,"column":13}},"loc":{"start":{"line":662,"column":18},"end":{"line":664,"column":13}},"line":662},"92":{"name":"(anonymous_92)","decl":{"start":{"line":668,"column":53},"end":{"line":668,"column":54}},"loc":{"start":{"line":668,"column":59},"end":{"line":670,"column":9}},"line":668},"93":{"name":"(anonymous_93)","decl":{"start":{"line":692,"column":32},"end":{"line":692,"column":33}},"loc":{"start":{"line":692,"column":38},"end":{"line":771,"column":1}},"line":692},"94":{"name":"(anonymous_94)","decl":{"start":{"line":697,"column":15},"end":{"line":697,"column":16}},"loc":{"start":{"line":697,"column":21},"end":{"line":704,"column":5}},"line":697},"95":{"name":"(anonymous_95)","decl":{"start":{"line":700,"column":25},"end":{"line":700,"column":26}},"loc":{"start":{"line":700,"column":31},"end":{"line":700,"column":41}},"line":700},"96":{"name":"(anonymous_96)","decl":{"start":{"line":701,"column":19},"end":{"line":701,"column":20}},"loc":{"start":{"line":701,"column":25},"end":{"line":701,"column":38}},"line":701},"97":{"name":"(anonymous_97)","decl":{"start":{"line":705,"column":14},"end":{"line":705,"column":15}},"loc":{"start":{"line":705,"column":20},"end":{"line":710,"column":5}},"line":705},"98":{"name":"(anonymous_98)","decl":{"start":{"line":711,"column":32},"end":{"line":711,"column":33}},"loc":{"start":{"line":711,"column":38},"end":{"line":770,"column":5}},"line":711},"99":{"name":"(anonymous_99)","decl":{"start":{"line":719,"column":18},"end":{"line":719,"column":19}},"loc":{"start":{"line":719,"column":24},"end":{"line":719,"column":34}},"line":719}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":3,"19":3,"20":5,"21":3,"22":3,"23":3,"24":1,"25":3,"26":3,"27":3,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":4,"66":4,"67":6,"68":4,"69":4,"70":4,"71":1,"72":4,"73":4,"74":4,"75":1,"76":1,"77":1,"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1,"86":1,"87":1,"88":1,"89":1,"90":1,"91":1,"92":1,"93":1,"94":1,"95":1,"96":1,"97":1,"98":1,"99":1,"100":1,"101":1,"102":1,"103":1,"104":1,"105":1,"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"112":1,"113":1,"114":1,"115":1,"116":1,"117":1,"118":1,"119":1,"120":1,"121":5,"122":5,"123":7,"124":5,"125":5,"126":5,"127":1,"128":5,"129":5,"130":5,"131":1,"132":1,"133":1,"134":1,"135":1,"136":1,"137":1,"138":1,"139":1,"140":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"149":1,"150":1,"151":1,"152":1,"153":1,"154":1,"155":1,"156":1,"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"172":1,"173":1,"174":1,"175":1,"176":1,"177":1,"178":1,"179":1,"180":1,"181":2,"182":2,"183":3,"184":2,"185":2,"186":2,"187":1,"188":2,"189":2,"190":2,"191":1,"192":1,"193":1,"194":1,"195":1,"196":1,"197":1,"198":1,"199":1,"200":1,"201":1,"202":1,"203":1,"204":1,"205":1,"206":1,"207":1,"208":1,"209":1,"210":1,"211":1,"212":1,"213":3,"214":3,"215":7,"216":3,"217":3,"218":3,"219":1,"220":3,"221":3,"222":3,"223":1,"224":1,"225":1,"226":1,"227":1,"228":1,"229":1,"230":1,"231":1,"232":1,"233":1,"234":1,"235":1,"236":1,"237":1,"238":1,"239":1,"240":1,"241":1,"242":1,"243":1,"244":1,"245":1,"246":1,"247":1,"248":1,"249":1,"250":1,"251":1,"252":1,"253":1,"254":1,"255":1,"256":1,"257":1,"258":1,"259":1,"260":3,"261":3,"262":7,"263":3,"264":3,"265":3,"266":1,"267":3,"268":3,"269":3,"270":1,"271":1,"272":1,"273":1,"274":1,"275":1,"276":1,"277":1,"278":1,"279":1,"280":1,"281":1,"282":1,"283":1,"284":1,"285":1,"286":1,"287":1,"288":1,"289":1,"290":1,"291":1,"292":1,"293":1,"294":1,"295":1,"296":1,"297":1,"298":1,"299":1,"300":1,"301":1,"302":1,"303":1,"304":1,"305":1,"306":1,"307":1,"308":5,"309":5,"310":11,"311":5,"312":5,"313":5,"314":1,"315":5,"316":5,"317":5,"318":1,"319":1,"320":1,"321":1,"322":1,"323":1,"324":1,"325":1,"326":1,"327":1,"328":1,"329":1,"330":1,"331":1,"332":1,"333":1,"334":1,"335":1,"336":1,"337":1,"338":1,"339":1,"340":1,"341":1,"342":1,"343":1,"344":1,"345":1,"346":1,"347":1,"348":1,"349":1,"350":1,"351":1,"352":1,"353":1,"354":1,"355":1,"356":1,"357":1,"358":1,"359":1,"360":1,"361":1,"362":5,"363":5,"364":11,"365":5,"366":5,"367":5,"368":1,"369":5,"370":5,"371":5,"372":1,"373":1,"374":1,"375":1,"376":1,"377":1,"378":1,"379":1,"380":1,"381":1,"382":1,"383":1,"384":1,"385":1,"386":1,"387":1,"388":1,"389":1,"390":1,"391":1,"392":1,"393":1,"394":1,"395":1,"396":1,"397":1,"398":1,"399":1,"400":1,"401":1,"402":1,"403":1,"404":1,"405":1,"406":1,"407":1,"408":1,"409":1,"410":1,"411":1,"412":1,"413":1,"414":1,"415":1,"416":1,"417":1,"418":1,"419":1,"420":1,"421":6,"422":1,"423":1,"424":1,"425":1,"426":1,"427":1,"428":1,"429":1,"430":1,"431":1,"432":1,"433":1,"434":1,"435":1,"436":1,"437":1,"438":1,"439":1,"440":1,"441":1,"442":1,"443":1,"444":1,"445":1,"446":1,"447":1,"448":1,"449":1,"450":1,"451":1,"452":1,"453":1,"454":1,"455":1,"456":1,"457":1,"458":1,"459":1,"460":1,"461":1,"462":1},"f":{"0":1,"1":3,"2":5,"3":3,"4":3,"5":1,"6":1,"7":1,"8":1,"9":1,"10":4,"11":6,"12":4,"13":4,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":5,"23":7,"24":5,"25":5,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":2,"36":3,"37":2,"38":2,"39":1,"40":1,"41":1,"42":1,"43":1,"44":3,"45":7,"46":3,"47":3,"48":1,"49":1,"50":1,"51":1,"52":1,"53":3,"54":7,"55":3,"56":3,"57":1,"58":1,"59":1,"60":1,"61":1,"62":5,"63":11,"64":5,"65":5,"66":1,"67":1,"68":1,"69":1,"70":1,"71":1,"72":1,"73":1,"74":1,"75":5,"76":11,"77":5,"78":5,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1,"86":1,"87":1,"88":1,"89":1,"90":1,"91":1,"92":1,"93":1,"94":1,"95":6,"96":1,"97":1,"98":1,"99":1},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-metric-registry.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-metric-registry.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport { TEST_ONLY } from '../src/common/time-util';\nimport {\n  LabelKey,\n  LabelValue,\n  MetricDescriptorType,\n  Timestamp,\n} from '../src/metrics/export/types';\nimport { MetricRegistry } from '../src/metrics/metric-registry';\nimport { MeasureUnit } from '../src/stats/types';\n\nconst METRIC_NAME = 'metric-name';\nconst METRIC_DESCRIPTION = 'metric-description';\nconst UNIT = MeasureUnit.UNIT;\nconst LABEL_KEYS: LabelKey[] = [{ key: 'code', description: 'desc' }];\nconst LABEL_VALUES_200: LabelValue[] = [{ value: '200' }];\nconst LABEL_VALUES_400: LabelValue[] = [{ value: '400' }];\n\nconst METRIC_OPTIONS = {\n  description: METRIC_DESCRIPTION,\n  unit: UNIT,\n  labelKeys: LABEL_KEYS,\n};\n\ndescribe('addInt64Gauge', () => {\n  let registry: MetricRegistry;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n\n  beforeEach(() => {\n    registry = new MetricRegistry();\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  it('should return a metric', () => {\n    const int64Gauge = registry.addInt64Gauge(METRIC_NAME, METRIC_OPTIONS);\n    const pointEntry = int64Gauge.getOrCreateTimeSeries(LABEL_VALUES_200);\n    pointEntry.add(100);\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: METRIC_DESCRIPTION,\n      labelKeys: LABEL_KEYS,\n      unit: UNIT,\n      type: MetricDescriptorType.GAUGE_INT64,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    const [{ points }] = timeseries;\n    const [point] = points;\n    assert.strictEqual(point.value, 100);\n    assert.deepStrictEqual(point.timestamp, {\n      seconds: mockedTime.seconds,\n      nanos: mockedTime.nanos,\n    });\n  });\n\n  it('should return a metric without options', () => {\n    const int64Gauge = registry.addInt64Gauge(METRIC_NAME);\n    const pointEntry = int64Gauge.getDefaultTimeSeries();\n    pointEntry.add(100);\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: '',\n      labelKeys: [],\n      unit: '1',\n      type: MetricDescriptorType.GAUGE_INT64,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    const [{ points }] = timeseries;\n    const [point] = points;\n    assert.strictEqual(point.value, 100);\n    assert.deepStrictEqual(point.timestamp, {\n      seconds: mockedTime.seconds,\n      nanos: mockedTime.nanos,\n    });\n  });\n\n  it('should throw an error when the duplicate keys in labelKeys and constantLabels', () => {\n    const constantLabels = new Map();\n    constantLabels.set({ key: 'k1' }, { value: 'v1' });\n    const labelKeys = [{ key: 'k1', description: 'desc' }];\n    assert.throws(() => {\n      registry.addInt64Gauge(METRIC_NAME, { constantLabels, labelKeys });\n    }, /^Error: The keys from LabelKeys should not be present in constantLabels or LabelKeys should not contains duplicate keys$/);\n  });\n});\n\ndescribe('addDoubleGauge', () => {\n  let registry: MetricRegistry;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n\n  beforeEach(() => {\n    registry = new MetricRegistry();\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  it('should return a metric', () => {\n    const doubleGauge = registry.addDoubleGauge(METRIC_NAME, METRIC_OPTIONS);\n    const pointEntry = doubleGauge.getOrCreateTimeSeries(LABEL_VALUES_200);\n    pointEntry.add(5.5);\n\n    const pointEntry1 = doubleGauge.getOrCreateTimeSeries(LABEL_VALUES_200);\n    pointEntry1.set(0.7);\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: METRIC_DESCRIPTION,\n      labelKeys: LABEL_KEYS,\n      unit: UNIT,\n      type: MetricDescriptorType.GAUGE_DOUBLE,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    const [{ points }] = timeseries;\n    const [point] = points;\n    assert.strictEqual(point.value, 0.7);\n    assert.deepStrictEqual(point.timestamp, {\n      seconds: mockedTime.seconds,\n      nanos: mockedTime.nanos,\n    });\n  });\n\n  it('should throw an error when the register same metric', () => {\n    registry.addDoubleGauge(METRIC_NAME, METRIC_OPTIONS);\n    assert.throws(() => {\n      registry.addDoubleGauge(METRIC_NAME, METRIC_OPTIONS);\n    }, /^Error: A metric with the name metric-name has already been registered.$/);\n  });\n\n  it('should throw an error when the constant labels elements are null', () => {\n    let constantLabels = new Map();\n    constantLabels.set({ key: 'k1' }, null);\n    assert.throws(() => {\n      registry.addDoubleGauge(METRIC_NAME, { constantLabels });\n    }, /^Error: constantLabels elements should not be a NULL$/);\n\n    constantLabels = new Map();\n    constantLabels.set(null, null);\n    assert.throws(() => {\n      registry.addDoubleGauge(METRIC_NAME, { constantLabels });\n    }, /^Error: constantLabels elements should not be a NULL$/);\n  });\n\n  it('should return a metric without options', () => {\n    const doubleGauge = registry.addDoubleGauge(METRIC_NAME);\n    const pointEntry = doubleGauge.getDefaultTimeSeries();\n    pointEntry.add(5.5);\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: '',\n      labelKeys: [],\n      unit: '1',\n      type: MetricDescriptorType.GAUGE_DOUBLE,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    const [{ points }] = timeseries;\n    const [point] = points;\n    assert.strictEqual(point.value, 5.5);\n    assert.deepStrictEqual(point.timestamp, {\n      seconds: mockedTime.seconds,\n      nanos: mockedTime.nanos,\n    });\n  });\n});\n\ndescribe('addDerivedInt64Gauge', () => {\n  let registry: MetricRegistry;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n\n  beforeEach(() => {\n    registry = new MetricRegistry();\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  it('should return a metric', () => {\n    const map = new Map();\n    map.set('key', 'value');\n    const derivedInt64Gauge = registry.addDerivedInt64Gauge(\n      METRIC_NAME,\n      METRIC_OPTIONS\n    );\n    derivedInt64Gauge.createTimeSeries(LABEL_VALUES_200, map);\n    map.set('key1', 'value1');\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: METRIC_DESCRIPTION,\n      labelKeys: LABEL_KEYS,\n      unit: UNIT,\n      type: MetricDescriptorType.GAUGE_INT64,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    const [{ points }] = timeseries;\n    const [point] = points;\n    assert.strictEqual(point.value, 2);\n    assert.deepStrictEqual(point.timestamp, {\n      seconds: mockedTime.seconds,\n      nanos: mockedTime.nanos,\n    });\n  });\n\n  it('should throw an error when the register same metric', () => {\n    registry.addDerivedInt64Gauge(METRIC_NAME, METRIC_OPTIONS);\n    assert.throws(() => {\n      registry.addDerivedInt64Gauge(METRIC_NAME, METRIC_OPTIONS);\n    }, /^Error: A metric with the name metric-name has already been registered.$/);\n  });\n\n  it('should throw an error when the duplicate keys in labelKeys and constantLabels', () => {\n    const constantLabels = new Map();\n    constantLabels.set({ key: 'k1' }, { value: 'v1' });\n    const labelKeys = [{ key: 'k1', description: 'desc' }];\n    assert.throws(() => {\n      registry.addDerivedInt64Gauge(METRIC_NAME, { constantLabels, labelKeys });\n    }, /^Error: The keys from LabelKeys should not be present in constantLabels or LabelKeys should not contains duplicate keys$/);\n  });\n\n  it('should throw an error when the constant labels elements are null', () => {\n    const constantLabels = new Map();\n    constantLabels.set({ key: 'k1' }, null);\n    assert.throws(() => {\n      registry.addDerivedInt64Gauge(METRIC_NAME, { constantLabels });\n    }, /^Error: constantLabels elements should not be a NULL$/);\n  });\n\n  it('should return a metric without options', () => {\n    const map = new Map();\n    map.set('key', 'value');\n    const derivedInt64Gauge = registry.addDerivedInt64Gauge(METRIC_NAME);\n    derivedInt64Gauge.createTimeSeries([], map);\n    map.set('key1', 'value1');\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: '',\n      labelKeys: [],\n      unit: '1',\n      type: MetricDescriptorType.GAUGE_INT64,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    const [{ points }] = timeseries;\n    const [point] = points;\n    assert.strictEqual(point.value, 2);\n    assert.deepStrictEqual(point.timestamp, {\n      seconds: mockedTime.seconds,\n      nanos: mockedTime.nanos,\n    });\n  });\n});\n\ndescribe('addDerivedDoubleGauge', () => {\n  let registry: MetricRegistry;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n\n  beforeEach(() => {\n    registry = new MetricRegistry();\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  it('should return a metric', () => {\n    class QueueManager {\n      getValue(): number {\n        return 0.7;\n      }\n    }\n    const derivedDoubleGauge = registry.addDerivedDoubleGauge(\n      METRIC_NAME,\n      METRIC_OPTIONS\n    );\n    derivedDoubleGauge.createTimeSeries(LABEL_VALUES_200, new QueueManager());\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: METRIC_DESCRIPTION,\n      labelKeys: LABEL_KEYS,\n      unit: UNIT,\n      type: MetricDescriptorType.GAUGE_DOUBLE,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    const [{ points }] = timeseries;\n    const [point] = points;\n    assert.strictEqual(point.value, 0.7);\n    assert.deepStrictEqual(point.timestamp, {\n      seconds: mockedTime.seconds,\n      nanos: mockedTime.nanos,\n    });\n  });\n\n  it('should throw an error when the register same metric', () => {\n    registry.addDerivedDoubleGauge(METRIC_NAME, METRIC_OPTIONS);\n    assert.throws(() => {\n      registry.addDerivedDoubleGauge(METRIC_NAME, METRIC_OPTIONS);\n    }, /^Error: A metric with the name metric-name has already been registered.$/);\n  });\n});\n\ndescribe('addInt64Cumulative', () => {\n  let registry: MetricRegistry;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n\n  beforeEach(() => {\n    registry = new MetricRegistry();\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  it('should return a metric', () => {\n    const int64Gauge = registry.addInt64Cumulative(METRIC_NAME, METRIC_OPTIONS);\n    const pointEntry = int64Gauge.getOrCreateTimeSeries(LABEL_VALUES_200);\n    pointEntry.inc();\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: METRIC_DESCRIPTION,\n      labelKeys: LABEL_KEYS,\n      unit: UNIT,\n      type: MetricDescriptorType.CUMULATIVE_INT64,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    const [{ points }] = timeseries;\n    const [point] = points;\n    assert.strictEqual(point.value, 1);\n    assert.deepStrictEqual(point.timestamp, {\n      seconds: mockedTime.seconds,\n      nanos: mockedTime.nanos,\n    });\n  });\n\n  it('should return a metric without options', () => {\n    const int64Gauge = registry.addInt64Cumulative(METRIC_NAME);\n    const pointEntry = int64Gauge.getDefaultTimeSeries();\n    pointEntry.inc(100);\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: '',\n      labelKeys: [],\n      unit: UNIT,\n      type: MetricDescriptorType.CUMULATIVE_INT64,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    const [{ points }] = timeseries;\n    const [point] = points;\n    assert.strictEqual(point.value, 100);\n    assert.deepStrictEqual(point.timestamp, {\n      seconds: mockedTime.seconds,\n      nanos: mockedTime.nanos,\n    });\n  });\n\n  it('should throw an error when the duplicate keys in labelKeys and constantLabels', () => {\n    const constantLabels = new Map();\n    constantLabels.set({ key: 'k1' }, { value: 'v1' });\n    const labelKeys = [{ key: 'k1', description: 'desc' }];\n    assert.throws(() => {\n      registry.addInt64Cumulative(METRIC_NAME, { constantLabels, labelKeys });\n    }, /^Error: The keys from LabelKeys should not be present in constantLabels or LabelKeys should not contains duplicate keys$/);\n  });\n});\n\ndescribe('addDoubleCumulative', () => {\n  let registry: MetricRegistry;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n\n  beforeEach(() => {\n    registry = new MetricRegistry();\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  it('should return a metric', () => {\n    const int64Gauge = registry.addDoubleCumulative(\n      METRIC_NAME,\n      METRIC_OPTIONS\n    );\n    const pointEntry = int64Gauge.getOrCreateTimeSeries(LABEL_VALUES_200);\n    pointEntry.inc(1.1);\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: METRIC_DESCRIPTION,\n      labelKeys: LABEL_KEYS,\n      unit: UNIT,\n      type: MetricDescriptorType.CUMULATIVE_DOUBLE,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    const [{ points }] = timeseries;\n    const [point] = points;\n    assert.strictEqual(point.value, 1.1);\n    assert.deepStrictEqual(point.timestamp, {\n      seconds: mockedTime.seconds,\n      nanos: mockedTime.nanos,\n    });\n  });\n\n  it('should return a metric without options', () => {\n    const int64Gauge = registry.addDoubleCumulative(METRIC_NAME);\n    const pointEntry = int64Gauge.getDefaultTimeSeries();\n    pointEntry.inc();\n    pointEntry.inc(100.12);\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: '',\n      labelKeys: [],\n      unit: UNIT,\n      type: MetricDescriptorType.CUMULATIVE_DOUBLE,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    const [{ points }] = timeseries;\n    const [point] = points;\n    assert.strictEqual(point.value, 101.12);\n    assert.deepStrictEqual(point.timestamp, {\n      seconds: mockedTime.seconds,\n      nanos: mockedTime.nanos,\n    });\n  });\n\n  it('should throw an error when the duplicate keys in labelKeys and constantLabels', () => {\n    const constantLabels = new Map();\n    constantLabels.set({ key: 'k1' }, { value: 'v1' });\n    const labelKeys = [{ key: 'k1', description: 'desc' }];\n    assert.throws(() => {\n      registry.addDoubleCumulative(METRIC_NAME, { constantLabels, labelKeys });\n    }, /^Error: The keys from LabelKeys should not be present in constantLabels or LabelKeys should not contains duplicate keys$/);\n  });\n});\n\ndescribe('addDerivedInt64Cumulative', () => {\n  let registry: MetricRegistry;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n\n  beforeEach(() => {\n    registry = new MetricRegistry();\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  it('should return a metric', () => {\n    const map = new Map();\n    map.set('key', 'value');\n    const derivedInt64Cumulative = registry.addDerivedInt64Cumulative(\n      METRIC_NAME,\n      METRIC_OPTIONS\n    );\n    derivedInt64Cumulative.createTimeSeries(LABEL_VALUES_200, map);\n    map.set('key1', 'value1');\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: METRIC_DESCRIPTION,\n      labelKeys: LABEL_KEYS,\n      unit: UNIT,\n      type: MetricDescriptorType.CUMULATIVE_INT64,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    assert.deepStrictEqual(timeseries, [\n      {\n        labelValues: LABEL_VALUES_200,\n        points: [{ value: 2, timestamp: mockedTime }],\n        startTimestamp: mockedTime,\n      },\n    ]);\n  });\n\n  it('should throw an error when the register same metric', () => {\n    registry.addDerivedInt64Cumulative(METRIC_NAME, METRIC_OPTIONS);\n    assert.throws(() => {\n      registry.addDerivedInt64Cumulative(METRIC_NAME, METRIC_OPTIONS);\n    }, /^Error: A metric with the name metric-name has already been registered.$/);\n  });\n\n  it('should throw an error when the duplicate keys in labelKeys and constantLabels', () => {\n    const constantLabels = new Map();\n    constantLabels.set({ key: 'k1' }, { value: 'v1' });\n    const labelKeys = [{ key: 'k1', description: 'desc' }];\n    assert.throws(() => {\n      registry.addDerivedInt64Cumulative(METRIC_NAME, {\n        constantLabels,\n        labelKeys,\n      });\n    }, /^Error: The keys from LabelKeys should not be present in constantLabels or LabelKeys should not contains duplicate keys$/);\n  });\n\n  it('should throw an error when the constant labels elements are null', () => {\n    const constantLabels = new Map();\n    constantLabels.set({ key: 'k1' }, null);\n    assert.throws(() => {\n      registry.addDerivedInt64Cumulative(METRIC_NAME, { constantLabels });\n    }, /^Error: constantLabels elements should not be a NULL$/);\n  });\n\n  it('should return a metric without options', () => {\n    const map = new Map();\n    map.set('key', 'value');\n    const derivedInt64Cumulative = registry.addDerivedInt64Cumulative(\n      METRIC_NAME\n    );\n    derivedInt64Cumulative.createTimeSeries([], map);\n    map.set('key1', 'value1');\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: '',\n      labelKeys: [],\n      unit: '1',\n      type: MetricDescriptorType.CUMULATIVE_INT64,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    assert.deepStrictEqual(timeseries, [\n      {\n        labelValues: [],\n        points: [{ value: 2, timestamp: mockedTime }],\n        startTimestamp: mockedTime,\n      },\n    ]);\n  });\n});\n\ndescribe('addDerivedDoubleCumulative', () => {\n  let registry: MetricRegistry;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n\n  beforeEach(() => {\n    registry = new MetricRegistry();\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  it('should return a metric', () => {\n    class QueueManager {\n      get Value(): number {\n        return 45.5;\n      }\n    }\n    const queue = new QueueManager();\n    const derivedDoubleCumulative = registry.addDerivedDoubleCumulative(\n      METRIC_NAME,\n      METRIC_OPTIONS\n    );\n    derivedDoubleCumulative.createTimeSeries(LABEL_VALUES_200, () => {\n      return queue.Value;\n    });\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: METRIC_DESCRIPTION,\n      labelKeys: LABEL_KEYS,\n      unit: UNIT,\n      type: MetricDescriptorType.CUMULATIVE_DOUBLE,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    assert.deepStrictEqual(timeseries, [\n      {\n        labelValues: LABEL_VALUES_200,\n        points: [{ value: 45.5, timestamp: mockedTime }],\n        startTimestamp: mockedTime,\n      },\n    ]);\n  });\n\n  it('should throw an error when the register same metric', () => {\n    registry.addDerivedDoubleCumulative(METRIC_NAME, METRIC_OPTIONS);\n    assert.throws(() => {\n      registry.addDerivedDoubleCumulative(METRIC_NAME, METRIC_OPTIONS);\n    }, /^Error: A metric with the name metric-name has already been registered.$/);\n  });\n\n  it('should throw an error when the duplicate keys in labelKeys and constantLabels', () => {\n    const constantLabels = new Map();\n    constantLabels.set({ key: 'k1' }, { value: 'v1' });\n    const labelKeys = [{ key: 'k1', description: 'desc' }];\n    assert.throws(() => {\n      registry.addDerivedDoubleCumulative(METRIC_NAME, {\n        constantLabels,\n        labelKeys,\n      });\n    }, /^Error: The keys from LabelKeys should not be present in constantLabels or LabelKeys should not contains duplicate keys$/);\n  });\n\n  it('should throw an error when the constant labels elements are null', () => {\n    const constantLabels = new Map();\n    constantLabels.set({ key: 'k1' }, null);\n    assert.throws(() => {\n      registry.addDerivedDoubleCumulative(METRIC_NAME, { constantLabels });\n    }, /^Error: constantLabels elements should not be a NULL$/);\n  });\n\n  it('should return a metric without options', () => {\n    class MemoryInfo {\n      current = 45.5;\n      get Value(): number {\n        return this.current;\n      }\n      inc() {\n        this.current++;\n      }\n    }\n    const mem = new MemoryInfo();\n    const derivedDoubleCumulative = registry.addDerivedDoubleCumulative(\n      METRIC_NAME\n    );\n    derivedDoubleCumulative.createTimeSeries([], () => {\n      return mem.Value;\n    });\n    mem.inc();\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: '',\n      labelKeys: [],\n      unit: '1',\n      type: MetricDescriptorType.CUMULATIVE_DOUBLE,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    assert.deepStrictEqual(timeseries, [\n      {\n        labelValues: [],\n        points: [{ value: 46.5, timestamp: mockedTime }],\n        startTimestamp: mockedTime,\n      },\n    ]);\n  });\n});\n\ndescribe('Add multiple gauges', () => {\n  let registry: MetricRegistry;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n\n  beforeEach(() => {\n    registry = new MetricRegistry();\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  it('should return metrics', () => {\n    const int64Gauge = registry.addInt64Gauge('metric-name1', METRIC_OPTIONS);\n    int64Gauge.getOrCreateTimeSeries(LABEL_VALUES_200).add(100);\n\n    const doubleGauge = registry.addDoubleGauge('metric-name2', METRIC_OPTIONS);\n    doubleGauge.getOrCreateTimeSeries(LABEL_VALUES_200).add(5.5);\n\n    const arr = new Array(5).fill('test');\n    const derivedInt64Gauge = registry.addDerivedInt64Gauge(\n      'metric-name3',\n      METRIC_OPTIONS\n    );\n    derivedInt64Gauge.createTimeSeries(LABEL_VALUES_400, {\n      size: () => arr.length,\n    });\n\n    const int64Cumulative = registry.addInt64Cumulative(\n      'metric-name4',\n      METRIC_OPTIONS\n    );\n    int64Cumulative.getOrCreateTimeSeries(LABEL_VALUES_200).inc();\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 4);\n    const [\n      { descriptor: descriptor1, timeseries: timeseries1 },\n      { descriptor: descriptor2, timeseries: timeseries2 },\n      { descriptor: descriptor3, timeseries: timeseries3 },\n      { descriptor: descriptor4, timeseries: timeseries4 },\n    ] = metrics;\n    assert.deepStrictEqual(descriptor1, {\n      name: 'metric-name1',\n      description: METRIC_DESCRIPTION,\n      labelKeys: LABEL_KEYS,\n      unit: UNIT,\n      type: MetricDescriptorType.GAUGE_INT64,\n    });\n    assert.deepStrictEqual(descriptor2, {\n      name: 'metric-name2',\n      description: METRIC_DESCRIPTION,\n      labelKeys: LABEL_KEYS,\n      unit: UNIT,\n      type: MetricDescriptorType.GAUGE_DOUBLE,\n    });\n    assert.deepStrictEqual(descriptor3, {\n      name: 'metric-name3',\n      description: METRIC_DESCRIPTION,\n      labelKeys: LABEL_KEYS,\n      unit: UNIT,\n      type: MetricDescriptorType.GAUGE_INT64,\n    });\n    assert.deepStrictEqual(descriptor4, {\n      name: 'metric-name4',\n      description: METRIC_DESCRIPTION,\n      labelKeys: LABEL_KEYS,\n      unit: UNIT,\n      type: MetricDescriptorType.CUMULATIVE_INT64,\n    });\n    assert.strictEqual(timeseries1.length, 1);\n    assert.strictEqual(timeseries1[0].points.length, 1);\n    assert.strictEqual(timeseries1[0].points[0].value, 100);\n    assert.strictEqual(\n      timeseries1[0].points[0].timestamp.seconds,\n      mockedTime.seconds\n    );\n    assert.strictEqual(\n      timeseries1[0].points[0].timestamp.nanos,\n      mockedTime.nanos\n    );\n    assert.strictEqual(timeseries2.length, 1);\n    assert.strictEqual(timeseries2[0].points.length, 1);\n    assert.strictEqual(timeseries2[0].points[0].value, 5.5);\n    assert.strictEqual(timeseries3.length, 1);\n    assert.strictEqual(timeseries3[0].points.length, 1);\n    assert.strictEqual(timeseries3[0].points[0].value, 5);\n    assert.deepStrictEqual(\n      timeseries1[0].points[0].timestamp,\n      timeseries2[0].points[0].timestamp\n    );\n    assert.deepStrictEqual(\n      timeseries2[0].points[0].timestamp,\n      timeseries3[0].points[0].timestamp\n    );\n    assert.strictEqual(timeseries4.length, 1);\n    assert.strictEqual(timeseries4[0].points.length, 1);\n    assert.strictEqual(timeseries4[0].points[0].value, 1);\n  });\n});\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"f8a4b248829f1e11407987304a8e5755b08bb592","contentHash":"f11f3e5a421240dcb65b24f38201e9671a25f0e3f97e69d93844347ff9f3b648"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-metric-utils.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-metric-utils.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":15},"end":{"line":18,"column":32}},"2":{"start":{"line":19,"column":14},"end":{"line":19,"column":31}},"3":{"start":{"line":20,"column":16},"end":{"line":20,"column":54}},"4":{"start":{"line":21,"column":16},"end":{"line":21,"column":45}},"5":{"start":{"line":22,"column":0},"end":{"line":66,"column":3}},"6":{"start":{"line":23,"column":4},"end":{"line":42,"column":7}},"7":{"start":{"line":24,"column":33},"end":{"line":24,"column":51}},"8":{"start":{"line":25,"column":24},"end":{"line":29,"column":9}},"9":{"start":{"line":30,"column":24},"end":{"line":30,"column":68}},"10":{"start":{"line":31,"column":21},"end":{"line":31,"column":129}},"11":{"start":{"line":32,"column":33},"end":{"line":32,"column":79}},"12":{"start":{"line":33,"column":8},"end":{"line":33,"column":36}},"13":{"start":{"line":34,"column":8},"end":{"line":34,"column":61}},"14":{"start":{"line":35,"column":8},"end":{"line":35,"column":76}},"15":{"start":{"line":36,"column":8},"end":{"line":36,"column":93}},"16":{"start":{"line":37,"column":8},"end":{"line":37,"column":75}},"17":{"start":{"line":38,"column":8},"end":{"line":41,"column":11}},"18":{"start":{"line":43,"column":4},"end":{"line":56,"column":7}},"19":{"start":{"line":44,"column":21},"end":{"line":49,"column":9}},"20":{"start":{"line":50,"column":8},"end":{"line":55,"column":11}},"21":{"start":{"line":57,"column":4},"end":{"line":65,"column":7}},"22":{"start":{"line":58,"column":21},"end":{"line":58,"column":60}},"23":{"start":{"line":59,"column":8},"end":{"line":64,"column":11}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":22,"column":23},"end":{"line":22,"column":24}},"loc":{"start":{"line":22,"column":29},"end":{"line":66,"column":1}},"line":22},"1":{"name":"(anonymous_1)","decl":{"start":{"line":23,"column":50},"end":{"line":23,"column":51}},"loc":{"start":{"line":23,"column":56},"end":{"line":42,"column":5}},"line":23},"2":{"name":"(anonymous_2)","decl":{"start":{"line":43,"column":52},"end":{"line":43,"column":53}},"loc":{"start":{"line":43,"column":58},"end":{"line":56,"column":5}},"line":43},"3":{"name":"(anonymous_3)","decl":{"start":{"line":57,"column":72},"end":{"line":57,"column":73}},"loc":{"start":{"line":57,"column":78},"end":{"line":65,"column":5}},"line":57}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1},"f":{"0":1,"1":1,"2":1,"3":1},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-metric-utils.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-metric-utils.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,iCAAiC;AAEjC,gCAA+C;AAC/C,uDAAmE;AACnE,8CAK4B;AAE5B,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;IAC1B,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;QACjD,MAAM,gBAAgB,GAAG,kBAAkB,CAAC;QAC5C,MAAM,OAAO,GAAY;YACvB,IAAI,EAAE,cAAc;YACpB,IAAI,EAAE,mBAAW,CAAC,MAAM;YACxB,IAAI,EAAE,mBAAW,CAAC,IAAI;SACvB,CAAC;QACF,MAAM,OAAO,GAAG,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC;QAC7D,MAAM,IAAI,GAAG,IAAI,cAAQ,CACvB,gBAAgB,EAChB,OAAO,EACP,uBAAe,CAAC,UAAU,EAC1B,OAAO,EACP,gBAAgB,CACjB,CAAC;QACF,MAAM,gBAAgB,GAAG,iBAAW,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;QAElE,MAAM,CAAC,EAAE,CAAC,gBAAgB,CAAC,CAAC;QAC5B,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QACrD,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,EAAE,mBAAW,CAAC,IAAI,CAAC,CAAC;QAC5D,MAAM,CAAC,WAAW,CAChB,gBAAgB,CAAC,IAAI,EACrB,4BAAoB,CAAC,YAAY,CAClC,CAAC;QACF,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,WAAW,EAAE,gBAAgB,CAAC,CAAC;QACnE,MAAM,CAAC,eAAe,CAAC,gBAAgB,CAAC,SAAS,EAAE;YACjD,EAAE,GAAG,EAAE,UAAU,EAAE,WAAW,EAAE,EAAE,EAAE;YACpC,EAAE,GAAG,EAAE,UAAU,EAAE,WAAW,EAAE,EAAE,EAAE;SACrC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;QACnD,MAAM,IAAI,GAAG;YACX,EAAE,KAAK,EAAE,QAAQ,EAAE;YACnB,EAAE,KAAK,EAAE,QAAQ,EAAE;YACnB,EAAE,KAAK,EAAE,EAAE,EAAE;YACb,IAAI;SACL,CAAC;QACF,MAAM,CAAC,eAAe,CAAC,iBAAW,CAAC,sBAAsB,CAAC,IAAI,CAAC,EAAE;YAC/D,EAAE,KAAK,EAAE,QAAQ,EAAE;YACnB,EAAE,KAAK,EAAE,QAAQ,EAAE;YACnB,EAAE,KAAK,EAAE,EAAE,EAAE;YACb,EAAE,KAAK,EAAE,IAAI,EAAE;SAChB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+DAA+D,EAAE,GAAG,EAAE;QACvE,MAAM,IAAI,GAAG,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QACrD,MAAM,CAAC,eAAe,CAAC,iBAAW,CAAC,sBAAsB,CAAC,IAAI,CAAC,EAAE;YAC/D,EAAE,KAAK,EAAE,QAAQ,EAAE;YACnB,EAAE,KAAK,EAAE,IAAI,EAAE;YACf,EAAE,KAAK,EAAE,IAAI,EAAE;YACf,EAAE,KAAK,EAAE,IAAI,EAAE;SAChB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\n\nimport { BaseView, MetricUtils } from '../src';\nimport { MetricDescriptorType } from '../src/metrics/export/types';\nimport {\n  AggregationType,\n  Measure,\n  MeasureType,\n  MeasureUnit,\n} from '../src/stats/types';\n\ndescribe('MetricUtil', () => {\n  it('should convert view to MetricDescriptor', () => {\n    const VIEW_DESCRIPTION = 'view description';\n    const measure: Measure = {\n      name: 'Test Measure',\n      type: MeasureType.DOUBLE,\n      unit: MeasureUnit.UNIT,\n    };\n    const tagKeys = [{ name: 'testKey1' }, { name: 'testKey2' }];\n    const view = new BaseView(\n      'test/view/name',\n      measure,\n      AggregationType.LAST_VALUE,\n      tagKeys,\n      VIEW_DESCRIPTION\n    );\n    const metricDescriptor = MetricUtils.viewToMetricDescriptor(view);\n\n    assert.ok(metricDescriptor);\n    assert.strictEqual(metricDescriptor.name, view.name);\n    assert.strictEqual(metricDescriptor.unit, MeasureUnit.UNIT);\n    assert.strictEqual(\n      metricDescriptor.type,\n      MetricDescriptorType.GAUGE_DOUBLE\n    );\n    assert.strictEqual(metricDescriptor.description, VIEW_DESCRIPTION);\n    assert.deepStrictEqual(metricDescriptor.labelKeys, [\n      { key: 'testKey1', description: '' },\n      { key: 'testKey2', description: '' },\n    ]);\n  });\n\n  it('should convert tag values to label values', () => {\n    const tags = [\n      { value: 'value1' },\n      { value: 'value2' },\n      { value: '' },\n      null,\n    ];\n    assert.deepStrictEqual(MetricUtils.tagValuesToLabelValues(tags), [\n      { value: 'value1' },\n      { value: 'value2' },\n      { value: '' },\n      { value: null },\n    ]);\n  });\n\n  it('should convert tag values to label values with null tag value', () => {\n    const tags = [{ value: 'value1' }, null, null, null];\n    assert.deepStrictEqual(MetricUtils.tagValuesToLabelValues(tags), [\n      { value: 'value1' },\n      { value: null },\n      { value: null },\n      { value: null },\n    ]);\n  });\n});\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"4b59fe033e888554795291a5afc070270fbd50db","contentHash":"4e3abea273da8765af055f688366b8408e108eb334d0dc6e998bf79d9137a82f"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-no-record-root-span.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-no-record-root-span.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":15},"end":{"line":18,"column":32}},"2":{"start":{"line":19,"column":14},"end":{"line":19,"column":31}},"3":{"start":{"line":20,"column":30},"end":{"line":20,"column":89}},"4":{"start":{"line":21,"column":15},"end":{"line":21,"column":37}},"5":{"start":{"line":22,"column":0},"end":{"line":39,"column":3}},"6":{"start":{"line":23,"column":4},"end":{"line":38,"column":7}},"7":{"start":{"line":24,"column":33},"end":{"line":24,"column":129}},"8":{"start":{"line":25,"column":8},"end":{"line":25,"column":55}},"9":{"start":{"line":26,"column":8},"end":{"line":26,"column":76}},"10":{"start":{"line":27,"column":8},"end":{"line":31,"column":11}},"11":{"start":{"line":32,"column":8},"end":{"line":32,"column":83}},"12":{"start":{"line":33,"column":8},"end":{"line":33,"column":88}},"13":{"start":{"line":34,"column":8},"end":{"line":34,"column":67}},"14":{"start":{"line":35,"column":8},"end":{"line":35,"column":59}},"15":{"start":{"line":36,"column":8},"end":{"line":36,"column":42}},"16":{"start":{"line":37,"column":8},"end":{"line":37,"column":67}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":22,"column":31},"end":{"line":22,"column":32}},"loc":{"start":{"line":22,"column":37},"end":{"line":39,"column":1}},"line":22},"1":{"name":"(anonymous_1)","decl":{"start":{"line":23,"column":23},"end":{"line":23,"column":24}},"loc":{"start":{"line":23,"column":29},"end":{"line":38,"column":5}},"line":23}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1},"f":{"0":1,"1":1},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-no-record-root-span.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-no-record-root-span.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,iCAAiC;AACjC,gCAMgB;AAChB,0FAAoF;AAEpF,MAAM,MAAM,GAAG,IAAI,gBAAU,EAAE,CAAC;AAEhC,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,EAAE,CAAC,cAAc,EAAE,GAAG,EAAE;QACtB,MAAM,gBAAgB,GAAG,IAAI,sCAAgB,CAC3C,MAAM,EACN,MAAM,EACN,cAAQ,CAAC,MAAM,EACf,SAAS,EACT,EAAE,CACH,CAAC;QACF,gBAAgB,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;QAC/C,gBAAgB,CAAC,aAAa,CAAC,cAAc,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC;QACpE,gBAAgB,CAAC,aAAa,CAAC,cAAc,EAAE;YAC7C,QAAQ,EAAE,KAAK;YACf,QAAQ,EAAE,GAAG;YACb,SAAS,EAAE,IAAI;SAChB,CAAC,CAAC;QACH,gBAAgB,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,EAAE,cAAQ,CAAC,iBAAiB,CAAC,CAAC;QACrE,gBAAgB,CAAC,eAAe,CAAC,sBAAgB,CAAC,QAAQ,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;QAC1E,gBAAgB,CAAC,YAAY,CAAC,oBAAoB,EAAE,KAAK,CAAC,CAAC;QAC3D,gBAAgB,CAAC,SAAS,CAAC,mBAAa,CAAC,EAAE,CAAC,CAAC;QAC7C,gBAAgB,CAAC,cAAc,EAAE,CAAC;QAClC,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport {\n  CanonicalCode,\n  CoreTracer,\n  LinkType,\n  MessageEventType,\n  SpanKind,\n} from '../src';\nimport { NoRecordRootSpan } from '../src/trace/model/no-record/no-record-root-span';\n\nconst tracer = new CoreTracer();\n\ndescribe('NoRecordRootSpan()', () => {\n  it('do not crash', () => {\n    const noRecordRootSpan = new NoRecordRootSpan(\n      tracer,\n      'name',\n      SpanKind.SERVER,\n      'traceid',\n      ''\n    );\n    noRecordRootSpan.addAnnotation('MyAnnotation');\n    noRecordRootSpan.addAnnotation('MyAnnotation', { myString: 'bar' });\n    noRecordRootSpan.addAnnotation('MyAnnotation', {\n      myString: 'bar',\n      myNumber: 123,\n      myBoolean: true,\n    });\n    noRecordRootSpan.addLink('aaaaa', 'aaa', LinkType.CHILD_LINKED_SPAN);\n    noRecordRootSpan.addMessageEvent(MessageEventType.RECEIVED, 1, 123456789);\n    noRecordRootSpan.addAttribute('my_first_attribute', 'foo');\n    noRecordRootSpan.setStatus(CanonicalCode.OK);\n    noRecordRootSpan.startChildSpan();\n    assert.strictEqual(noRecordRootSpan.traceState, undefined);\n  });\n});\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"7897910ce44182d08dccad3c818843db6f020b27","contentHash":"1f5646d1c4621dc00d36b4f7e0de7babac3c2ff7b32e6c99f5a73f4e0a63b58a"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-no-record-span.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-no-record-span.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":15},"end":{"line":18,"column":32}},"2":{"start":{"line":19,"column":22},"end":{"line":19,"column":63}},"3":{"start":{"line":20,"column":14},"end":{"line":20,"column":31}},"4":{"start":{"line":21,"column":25},"end":{"line":21,"column":79}},"5":{"start":{"line":22,"column":0},"end":{"line":39,"column":3}},"6":{"start":{"line":23,"column":4},"end":{"line":38,"column":7}},"7":{"start":{"line":24,"column":23},"end":{"line":24,"column":57}},"8":{"start":{"line":25,"column":29},"end":{"line":25,"column":70}},"9":{"start":{"line":26,"column":8},"end":{"line":26,"column":51}},"10":{"start":{"line":27,"column":8},"end":{"line":27,"column":72}},"11":{"start":{"line":28,"column":8},"end":{"line":32,"column":11}},"12":{"start":{"line":33,"column":8},"end":{"line":33,"column":79}},"13":{"start":{"line":34,"column":8},"end":{"line":34,"column":84}},"14":{"start":{"line":35,"column":8},"end":{"line":35,"column":63}},"15":{"start":{"line":36,"column":8},"end":{"line":36,"column":55}},"16":{"start":{"line":37,"column":8},"end":{"line":37,"column":63}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":22,"column":27},"end":{"line":22,"column":28}},"loc":{"start":{"line":22,"column":33},"end":{"line":39,"column":1}},"line":22},"1":{"name":"(anonymous_1)","decl":{"start":{"line":23,"column":23},"end":{"line":23,"column":24}},"loc":{"start":{"line":23,"column":29},"end":{"line":38,"column":5}},"line":23}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1},"f":{"0":1,"1":1},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-no-record-span.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-no-record-span.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,iCAAiC;AACjC,gEAAgE;AAChE,gCAAmE;AACnE,gFAA2E;AAE3E,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC9B,EAAE,CAAC,cAAc,EAAE,GAAG,EAAE;QACtB,MAAM,MAAM,GAAG,IAAI,4BAAc,EAAE,CAAC;QACpC,MAAM,YAAY,GAAG,IAAI,6BAAY,CAAC,MAAM,CAAC,CAAC;QAC9C,YAAY,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;QAC3C,YAAY,CAAC,aAAa,CAAC,cAAc,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC;QAChE,YAAY,CAAC,aAAa,CAAC,cAAc,EAAE;YACzC,QAAQ,EAAE,KAAK;YACf,QAAQ,EAAE,GAAG;YACb,SAAS,EAAE,IAAI;SAChB,CAAC,CAAC;QACH,YAAY,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,EAAE,cAAQ,CAAC,iBAAiB,CAAC,CAAC;QACjE,YAAY,CAAC,eAAe,CAAC,sBAAgB,CAAC,QAAQ,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;QACtE,YAAY,CAAC,YAAY,CAAC,oBAAoB,EAAE,KAAK,CAAC,CAAC;QACvD,YAAY,CAAC,SAAS,CAAC,mBAAa,CAAC,EAAE,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport { CoreTracerBase } from '../src/trace/model/tracer-base';\nimport { CanonicalCode, LinkType, MessageEventType } from '../src';\nimport { NoRecordSpan } from '../src/trace/model/no-record/no-record-span';\n\ndescribe('NoRecordSpan()', () => {\n  it('do not crash', () => {\n    const tracer = new CoreTracerBase();\n    const noRecordSpan = new NoRecordSpan(tracer);\n    noRecordSpan.addAnnotation('MyAnnotation');\n    noRecordSpan.addAnnotation('MyAnnotation', { myString: 'bar' });\n    noRecordSpan.addAnnotation('MyAnnotation', {\n      myString: 'bar',\n      myNumber: 123,\n      myBoolean: true,\n    });\n    noRecordSpan.addLink('aaaaa', 'aaa', LinkType.CHILD_LINKED_SPAN);\n    noRecordSpan.addMessageEvent(MessageEventType.RECEIVED, 1, 123456789);\n    noRecordSpan.addAttribute('my_first_attribute', 'foo');\n    noRecordSpan.setStatus(CanonicalCode.OK);\n    assert.strictEqual(noRecordSpan.traceState, undefined);\n  });\n});\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"09e411f1ca9cb8b5efe631505830b9d388583bd0","contentHash":"665429d612c87eb5f0ea9151207f49a126d40c64aedba1a9eed5a4c9bc2940a9"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-recorder.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-recorder.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":15},"end":{"line":18,"column":32}},"2":{"start":{"line":19,"column":14},"end":{"line":19,"column":31}},"3":{"start":{"line":20,"column":16},"end":{"line":20,"column":45}},"4":{"start":{"line":22,"column":16},"end":{"line":22,"column":17}},"5":{"start":{"line":24,"column":4},"end":{"line":24,"column":64}},"6":{"start":{"line":27,"column":22},"end":{"line":27,"column":60}},"7":{"start":{"line":27,"column":50},"end":{"line":27,"column":59}},"8":{"start":{"line":28,"column":4},"end":{"line":28,"column":62}},"9":{"start":{"line":29,"column":4},"end":{"line":29,"column":56}},"10":{"start":{"line":30,"column":25},"end":{"line":30,"column":50}},"11":{"start":{"line":31,"column":4},"end":{"line":31,"column":75}},"12":{"start":{"line":32,"column":41},"end":{"line":34,"column":42}},"13":{"start":{"line":33,"column":22},"end":{"line":33,"column":55}},"14":{"start":{"line":34,"column":31},"end":{"line":34,"column":41}},"15":{"start":{"line":35,"column":4},"end":{"line":35,"column":108}},"16":{"start":{"line":36,"column":33},"end":{"line":36,"column":88}},"17":{"start":{"line":37,"column":4},"end":{"line":37,"column":91}},"18":{"start":{"line":39,"column":0},"end":{"line":224,"column":3}},"19":{"start":{"line":40,"column":21},"end":{"line":47,"column":5}},"20":{"start":{"line":48,"column":22},"end":{"line":48,"column":46}},"21":{"start":{"line":49,"column":22},"end":{"line":57,"column":5}},"22":{"start":{"line":58,"column":4},"end":{"line":223,"column":5}},"23":{"start":{"line":59,"column":8},"end":{"line":77,"column":11}},"24":{"start":{"line":60,"column":12},"end":{"line":76,"column":13}},"25":{"start":{"line":61,"column":16},"end":{"line":75,"column":19}},"26":{"start":{"line":62,"column":38},"end":{"line":67,"column":21}},"27":{"start":{"line":68,"column":32},"end":{"line":68,"column":33}},"28":{"start":{"line":69,"column":20},"end":{"line":74,"column":21}},"29":{"start":{"line":70,"column":24},"end":{"line":70,"column":32}},"30":{"start":{"line":71,"column":44},"end":{"line":71,"column":62}},"31":{"start":{"line":72,"column":55},"end":{"line":72,"column":108}},"32":{"start":{"line":73,"column":24},"end":{"line":73,"column":80}},"33":{"start":{"line":78,"column":8},"end":{"line":95,"column":11}},"34":{"start":{"line":79,"column":12},"end":{"line":94,"column":13}},"35":{"start":{"line":80,"column":16},"end":{"line":93,"column":19}},"36":{"start":{"line":81,"column":42},"end":{"line":86,"column":21}},"37":{"start":{"line":87,"column":20},"end":{"line":92,"column":21}},"38":{"start":{"line":88,"column":44},"end":{"line":88,"column":62}},"39":{"start":{"line":89,"column":42},"end":{"line":89,"column":113}},"40":{"start":{"line":90,"column":55},"end":{"line":90,"column":112}},"41":{"start":{"line":91,"column":24},"end":{"line":91,"column":84}},"42":{"start":{"line":96,"column":8},"end":{"line":115,"column":11}},"43":{"start":{"line":97,"column":12},"end":{"line":114,"column":13}},"44":{"start":{"line":98,"column":16},"end":{"line":113,"column":19}},"45":{"start":{"line":99,"column":36},"end":{"line":104,"column":21}},"46":{"start":{"line":105,"column":30},"end":{"line":105,"column":31}},"47":{"start":{"line":106,"column":20},"end":{"line":112,"column":21}},"48":{"start":{"line":107,"column":24},"end":{"line":108,"column":100}},"49":{"start":{"line":109,"column":44},"end":{"line":109,"column":62}},"50":{"start":{"line":110,"column":55},"end":{"line":110,"column":106}},"51":{"start":{"line":111,"column":24},"end":{"line":111,"column":78}},"52":{"start":{"line":116,"column":8},"end":{"line":141,"column":11}},"53":{"start":{"line":117,"column":12},"end":{"line":140,"column":13}},"54":{"start":{"line":118,"column":16},"end":{"line":139,"column":19}},"55":{"start":{"line":119,"column":45},"end":{"line":131,"column":21}},"56":{"start":{"line":132,"column":39},"end":{"line":132,"column":41}},"57":{"start":{"line":133,"column":20},"end":{"line":138,"column":21}},"58":{"start":{"line":134,"column":24},"end":{"line":134,"column":113}},"59":{"start":{"line":135,"column":44},"end":{"line":135,"column":62}},"60":{"start":{"line":136,"column":55},"end":{"line":136,"column":115}},"61":{"start":{"line":137,"column":24},"end":{"line":137,"column":83}},"62":{"start":{"line":142,"column":8},"end":{"line":175,"column":11}},"63":{"start":{"line":143,"column":32},"end":{"line":143,"column":64}},"64":{"start":{"line":144,"column":12},"end":{"line":174,"column":15}},"65":{"start":{"line":145,"column":41},"end":{"line":158,"column":17}},"66":{"start":{"line":159,"column":30},"end":{"line":159,"column":31}},"67":{"start":{"line":160,"column":36},"end":{"line":160,"column":54}},"68":{"start":{"line":161,"column":40},"end":{"line":161,"column":113}},"69":{"start":{"line":162,"column":16},"end":{"line":162,"column":59}},"70":{"start":{"line":163,"column":16},"end":{"line":163,"column":60}},"71":{"start":{"line":164,"column":16},"end":{"line":164,"column":75}},"72":{"start":{"line":165,"column":16},"end":{"line":165,"column":83}},"73":{"start":{"line":166,"column":16},"end":{"line":166,"column":80}},"74":{"start":{"line":167,"column":16},"end":{"line":167,"column":80}},"75":{"start":{"line":168,"column":16},"end":{"line":172,"column":19}},"76":{"start":{"line":173,"column":16},"end":{"line":173,"column":80}},"77":{"start":{"line":176,"column":8},"end":{"line":222,"column":11}},"78":{"start":{"line":177,"column":27},"end":{"line":177,"column":45}},"79":{"start":{"line":178,"column":27},"end":{"line":178,"column":45}},"80":{"start":{"line":179,"column":31},"end":{"line":179,"column":53}},"81":{"start":{"line":180,"column":29},"end":{"line":180,"column":53}},"82":{"start":{"line":181,"column":29},"end":{"line":181,"column":53}},"83":{"start":{"line":182,"column":33},"end":{"line":182,"column":61}},"84":{"start":{"line":183,"column":38},"end":{"line":183,"column":77}},"85":{"start":{"line":184,"column":45},"end":{"line":184,"column":91}},"86":{"start":{"line":186,"column":12},"end":{"line":188,"column":15}},"87":{"start":{"line":187,"column":16},"end":{"line":187,"column":44}},"88":{"start":{"line":189,"column":12},"end":{"line":196,"column":15}},"89":{"start":{"line":190,"column":32},"end":{"line":190,"column":48}},"90":{"start":{"line":191,"column":16},"end":{"line":191,"column":45}},"91":{"start":{"line":192,"column":16},"end":{"line":192,"column":45}},"92":{"start":{"line":193,"column":34},"end":{"line":193,"column":83}},"93":{"start":{"line":194,"column":16},"end":{"line":194,"column":56}},"94":{"start":{"line":195,"column":16},"end":{"line":195,"column":72}},"95":{"start":{"line":197,"column":12},"end":{"line":204,"column":15}},"96":{"start":{"line":198,"column":32},"end":{"line":198,"column":48}},"97":{"start":{"line":199,"column":16},"end":{"line":199,"column":64}},"98":{"start":{"line":200,"column":16},"end":{"line":200,"column":71}},"99":{"start":{"line":201,"column":34},"end":{"line":201,"column":83}},"100":{"start":{"line":202,"column":16},"end":{"line":202,"column":56}},"101":{"start":{"line":203,"column":16},"end":{"line":203,"column":72}},"102":{"start":{"line":205,"column":12},"end":{"line":212,"column":15}},"103":{"start":{"line":206,"column":32},"end":{"line":206,"column":60}},"104":{"start":{"line":207,"column":16},"end":{"line":207,"column":45}},"105":{"start":{"line":208,"column":16},"end":{"line":208,"column":45}},"106":{"start":{"line":209,"column":34},"end":{"line":209,"column":83}},"107":{"start":{"line":210,"column":16},"end":{"line":210,"column":56}},"108":{"start":{"line":211,"column":16},"end":{"line":211,"column":78}},"109":{"start":{"line":213,"column":12},"end":{"line":221,"column":15}},"110":{"start":{"line":214,"column":32},"end":{"line":214,"column":48}},"111":{"start":{"line":215,"column":16},"end":{"line":215,"column":45}},"112":{"start":{"line":216,"column":16},"end":{"line":216,"column":45}},"113":{"start":{"line":217,"column":16},"end":{"line":217,"column":53}},"114":{"start":{"line":218,"column":34},"end":{"line":218,"column":83}},"115":{"start":{"line":219,"column":16},"end":{"line":219,"column":56}},"116":{"start":{"line":220,"column":16},"end":{"line":220,"column":72}}},"fnMap":{"0":{"name":"isAlmostEqual","decl":{"start":{"line":23,"column":9},"end":{"line":23,"column":22}},"loc":{"start":{"line":23,"column":50},"end":{"line":25,"column":1}},"line":23},"1":{"name":"assertDistributionData","decl":{"start":{"line":26,"column":9},"end":{"line":26,"column":31}},"loc":{"start":{"line":26,"column":58},"end":{"line":38,"column":1}},"line":26},"2":{"name":"(anonymous_2)","decl":{"start":{"line":27,"column":36},"end":{"line":27,"column":37}},"loc":{"start":{"line":27,"column":50},"end":{"line":27,"column":59}},"line":27},"3":{"name":"(anonymous_3)","decl":{"start":{"line":33,"column":13},"end":{"line":33,"column":14}},"loc":{"start":{"line":33,"column":22},"end":{"line":33,"column":55}},"line":33},"4":{"name":"(anonymous_4)","decl":{"start":{"line":34,"column":16},"end":{"line":34,"column":17}},"loc":{"start":{"line":34,"column":31},"end":{"line":34,"column":41}},"line":34},"5":{"name":"(anonymous_5)","decl":{"start":{"line":39,"column":21},"end":{"line":39,"column":22}},"loc":{"start":{"line":39,"column":27},"end":{"line":224,"column":1}},"line":39},"6":{"name":"(anonymous_6)","decl":{"start":{"line":59,"column":73},"end":{"line":59,"column":74}},"loc":{"start":{"line":59,"column":79},"end":{"line":77,"column":9}},"line":59},"7":{"name":"(anonymous_7)","decl":{"start":{"line":61,"column":83},"end":{"line":61,"column":84}},"loc":{"start":{"line":61,"column":89},"end":{"line":75,"column":17}},"line":61},"8":{"name":"(anonymous_8)","decl":{"start":{"line":78,"column":78},"end":{"line":78,"column":79}},"loc":{"start":{"line":78,"column":84},"end":{"line":95,"column":9}},"line":78},"9":{"name":"(anonymous_9)","decl":{"start":{"line":80,"column":83},"end":{"line":80,"column":84}},"loc":{"start":{"line":80,"column":89},"end":{"line":93,"column":17}},"line":80},"10":{"name":"(anonymous_10)","decl":{"start":{"line":96,"column":71},"end":{"line":96,"column":72}},"loc":{"start":{"line":96,"column":77},"end":{"line":115,"column":9}},"line":96},"11":{"name":"(anonymous_11)","decl":{"start":{"line":98,"column":83},"end":{"line":98,"column":84}},"loc":{"start":{"line":98,"column":89},"end":{"line":113,"column":17}},"line":98},"12":{"name":"(anonymous_12)","decl":{"start":{"line":116,"column":80},"end":{"line":116,"column":81}},"loc":{"start":{"line":116,"column":86},"end":{"line":141,"column":9}},"line":116},"13":{"name":"(anonymous_13)","decl":{"start":{"line":118,"column":83},"end":{"line":118,"column":84}},"loc":{"start":{"line":118,"column":89},"end":{"line":139,"column":17}},"line":118},"14":{"name":"(anonymous_14)","decl":{"start":{"line":142,"column":71},"end":{"line":142,"column":72}},"loc":{"start":{"line":142,"column":77},"end":{"line":175,"column":9}},"line":142},"15":{"name":"(anonymous_15)","decl":{"start":{"line":144,"column":71},"end":{"line":144,"column":72}},"loc":{"start":{"line":144,"column":77},"end":{"line":174,"column":13}},"line":144},"16":{"name":"(anonymous_16)","decl":{"start":{"line":176,"column":35},"end":{"line":176,"column":36}},"loc":{"start":{"line":176,"column":41},"end":{"line":222,"column":9}},"line":176},"17":{"name":"(anonymous_17)","decl":{"start":{"line":186,"column":23},"end":{"line":186,"column":24}},"loc":{"start":{"line":186,"column":29},"end":{"line":188,"column":13}},"line":186},"18":{"name":"(anonymous_18)","decl":{"start":{"line":189,"column":65},"end":{"line":189,"column":66}},"loc":{"start":{"line":189,"column":71},"end":{"line":196,"column":13}},"line":189},"19":{"name":"(anonymous_19)","decl":{"start":{"line":197,"column":85},"end":{"line":197,"column":86}},"loc":{"start":{"line":197,"column":91},"end":{"line":204,"column":13}},"line":197},"20":{"name":"(anonymous_20)","decl":{"start":{"line":205,"column":81},"end":{"line":205,"column":82}},"loc":{"start":{"line":205,"column":87},"end":{"line":212,"column":13}},"line":205},"21":{"name":"(anonymous_21)","decl":{"start":{"line":213,"column":81},"end":{"line":213,"column":82}},"loc":{"start":{"line":213,"column":87},"end":{"line":221,"column":13}},"line":213}},"branchMap":{"0":{"loc":{"start":{"line":89,"column":42},"end":{"line":89,"column":113}},"type":"cond-expr","locations":[{"start":{"line":89,"column":88},"end":{"line":89,"column":93}},{"start":{"line":89,"column":96},"end":{"line":89,"column":113}}],"line":89},"1":{"loc":{"start":{"line":108,"column":28},"end":{"line":108,"column":99}},"type":"cond-expr","locations":[{"start":{"line":108,"column":74},"end":{"line":108,"column":79}},{"start":{"line":108,"column":82},"end":{"line":108,"column":99}}],"line":108},"2":{"loc":{"start":{"line":134,"column":40},"end":{"line":134,"column":111}},"type":"cond-expr","locations":[{"start":{"line":134,"column":86},"end":{"line":134,"column":91}},{"start":{"line":134,"column":94},"end":{"line":134,"column":111}}],"line":134}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":114,"6":38,"7":72,"8":38,"9":38,"10":38,"11":38,"12":38,"13":110,"14":72,"15":38,"16":38,"17":38,"18":1,"19":1,"20":1,"21":1,"22":1,"23":2,"24":2,"25":8,"26":8,"27":8,"28":8,"29":38,"30":38,"31":38,"32":38,"33":2,"34":2,"35":8,"36":8,"37":8,"38":38,"39":38,"40":38,"41":38,"42":2,"43":2,"44":8,"45":8,"46":8,"47":8,"48":38,"49":38,"50":38,"51":38,"52":2,"53":2,"54":8,"55":8,"56":8,"57":8,"58":38,"59":38,"60":38,"61":38,"62":2,"63":2,"64":2,"65":2,"66":2,"67":2,"68":2,"69":2,"70":2,"71":2,"72":2,"73":2,"74":2,"75":2,"76":2,"77":2,"78":2,"79":2,"80":2,"81":2,"82":2,"83":2,"84":2,"85":2,"86":2,"87":8,"88":2,"89":2,"90":2,"91":2,"92":2,"93":2,"94":2,"95":2,"96":2,"97":2,"98":2,"99":2,"100":2,"101":2,"102":2,"103":2,"104":2,"105":2,"106":2,"107":2,"108":2,"109":2,"110":2,"111":2,"112":2,"113":2,"114":2,"115":2,"116":2},"f":{"0":114,"1":38,"2":72,"3":110,"4":72,"5":1,"6":2,"7":8,"8":2,"9":8,"10":2,"11":8,"12":2,"13":8,"14":2,"15":2,"16":2,"17":8,"18":2,"19":2,"20":2,"21":2},"b":{"0":[19,19],"1":[19,19],"2":[19,19]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-recorder.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-recorder.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport { Recorder, TagMap, TagTtl } from '../src';\nimport {\n  AggregationType,\n  CountData,\n  DistributionData,\n  LastValueData,\n  Measure,\n  Measurement,\n  MeasureType,\n  MeasureUnit,\n  SumData,\n} from '../src/stats/types';\n\n/** The order of how close values must be to be considerated almost equal */\nconst EPSILON = 6;\n\ninterface RecorderTestCase {\n  values: number[];\n  description: string;\n}\n\nfunction isAlmostEqual(\n  actual: number,\n  expected: number,\n  epsilon: number\n): boolean {\n  return Math.abs(actual - expected) < Math.pow(10, -epsilon);\n}\n\nfunction assertDistributionData(\n  distributionData: DistributionData,\n  values: number[]\n) {\n  const valuesSum = values.reduce((acc, cur) => acc + cur);\n\n  assert.strictEqual(distributionData.count, values.length);\n  assert.strictEqual(distributionData.sum, valuesSum);\n\n  const expectedMean = valuesSum / values.length;\n  assert.ok(isAlmostEqual(distributionData.mean, expectedMean, EPSILON));\n\n  const expectedSumSquaredDeviations = values\n    .map(value => Math.pow(value - expectedMean, 2))\n    .reduce((acc, curr) => acc + curr);\n  assert.ok(\n    isAlmostEqual(\n      distributionData.sumOfSquaredDeviation,\n      expectedSumSquaredDeviations,\n      EPSILON\n    )\n  );\n\n  const expectedStdDeviation = Math.sqrt(\n    expectedSumSquaredDeviations / values.length\n  );\n  assert.ok(\n    isAlmostEqual(distributionData.stdDeviation, expectedStdDeviation, EPSILON)\n  );\n}\n\ndescribe('Recorder', () => {\n  const measures: Measure[] = [\n    {\n      name: 'Test Measure 1',\n      type: MeasureType.DOUBLE,\n      unit: MeasureUnit.UNIT,\n    },\n    { name: 'Test Measure 2', type: MeasureType.INT64, unit: MeasureUnit.UNIT },\n  ];\n  const tagValues = [{ value: 'testValue' }];\n  const testCases: RecorderTestCase[] = [\n    { values: [1.1, 2.5, 3.2, 4.7, 5.2], description: 'with positive values' },\n    {\n      values: [-1.5, -2.3, -3.7, -4.3, -5.9],\n      description: 'with negative values',\n    },\n    { values: [0, 0, 0, 0], description: 'with zeros' },\n    { values: [1.1, -2.3, 3.2, -4.3, 5.2], description: 'with mixed values' },\n  ];\n\n  for (const measure of measures) {\n    describe(`for count aggregation data of ${measure.type} values`, () => {\n      for (const testCase of testCases) {\n        it(`should record measurements ${testCase.description} correctly`, () => {\n          const countData: CountData = {\n            type: AggregationType.COUNT,\n            tagValues,\n            timestamp: Date.now(),\n            value: 0,\n          };\n          let count = 0;\n          for (const value of testCase.values) {\n            count++;\n            const measurement: Measurement = { measure, value };\n            const updatedAggregationData = Recorder.addMeasurement(\n              countData,\n              measurement\n            ) as CountData;\n\n            assert.strictEqual(updatedAggregationData.value, count);\n          }\n        });\n      }\n    });\n\n    describe(`for last value aggregation data of ${measure.type} values`, () => {\n      for (const testCase of testCases) {\n        it(`should record measurements ${testCase.description} correctly`, () => {\n          const lastValueData: LastValueData = {\n            type: AggregationType.LAST_VALUE,\n            tagValues,\n            timestamp: Date.now(),\n            value: 0,\n          };\n          for (const value of testCase.values) {\n            const measurement: Measurement = { measure, value };\n            const lastValue =\n              measure.type === MeasureType.DOUBLE ? value : Math.trunc(value);\n\n            const updatedAggregationData = Recorder.addMeasurement(\n              lastValueData,\n              measurement\n            ) as LastValueData;\n            assert.strictEqual(updatedAggregationData.value, lastValue);\n          }\n        });\n      }\n    });\n\n    describe(`for sum aggregation data of ${measure.type} values`, () => {\n      for (const testCase of testCases) {\n        it(`should record measurements ${testCase.description} correctly`, () => {\n          const sumData: SumData = {\n            type: AggregationType.SUM,\n            tagValues,\n            timestamp: Date.now(),\n            value: 0,\n          };\n          let acc = 0;\n          for (const value of testCase.values) {\n            acc +=\n              measure.type === MeasureType.DOUBLE ? value : Math.trunc(value);\n            const measurement: Measurement = { measure, value };\n            const updatedAggregationData = Recorder.addMeasurement(\n              sumData,\n              measurement\n            ) as SumData;\n\n            assert.strictEqual(updatedAggregationData.value, acc);\n          }\n        });\n      }\n    });\n\n    describe(`for distribution aggregation data of ${measure.type} values`, () => {\n      for (const testCase of testCases) {\n        it(`should record measurements ${testCase.description} correctly`, () => {\n          const distributionData: DistributionData = {\n            type: AggregationType.DISTRIBUTION,\n            tagValues,\n            timestamp: Date.now(),\n            startTime: Date.now(),\n            count: 0,\n            sum: 0,\n            mean: 0,\n            stdDeviation: 0,\n            sumOfSquaredDeviation: 0,\n            buckets: [2, 4, 6],\n            bucketCounts: [0, 0, 0, 0],\n          };\n          const sentValues = [];\n          for (const value of testCase.values) {\n            sentValues.push(\n              measure.type === MeasureType.DOUBLE ? value : Math.trunc(value)\n            );\n            const measurement: Measurement = { measure, value };\n            const updatedAggregationData = Recorder.addMeasurement(\n              distributionData,\n              measurement\n            ) as DistributionData;\n            assertDistributionData(updatedAggregationData, sentValues);\n          }\n        });\n      }\n    });\n\n    describe('for distribution aggregation data with attachments', () => {\n      const attachments = { k1: 'v1', k2: 'v2', k3: 'v3' };\n      it('should record measurements and attachments correctly', () => {\n        const distributionData: DistributionData = {\n          type: AggregationType.DISTRIBUTION,\n          tagValues,\n          timestamp: Date.now(),\n          startTime: Date.now(),\n          count: 0,\n          sum: 0,\n          mean: 0,\n          stdDeviation: 0,\n          sumOfSquaredDeviation: 0,\n          buckets: [2, 4, 6],\n          bucketCounts: [0, 0, 0, 0],\n          exemplars: new Array(4),\n        };\n        const value = 5;\n        const measurement: Measurement = { measure, value };\n        const aggregationData = Recorder.addMeasurement(\n          distributionData,\n          measurement,\n          attachments\n        ) as DistributionData;\n\n        assert.strictEqual(aggregationData.sum, 5);\n        assert.strictEqual(aggregationData.mean, 5);\n        assert.deepStrictEqual(aggregationData.buckets, [2, 4, 6]);\n        assert.deepStrictEqual(aggregationData.bucketCounts, [0, 0, 1, 0]);\n        assert.deepStrictEqual(aggregationData.exemplars![0], undefined);\n        assert.deepStrictEqual(aggregationData.exemplars![1], undefined);\n        assert.deepStrictEqual(aggregationData!.exemplars![2], {\n          value: 5,\n          timestamp: aggregationData.timestamp,\n          attachments,\n        });\n        assert.deepStrictEqual(aggregationData.exemplars![3], undefined);\n      });\n    });\n\n    describe('getTagValues()', () => {\n      const CALLER = { name: 'caller' };\n      const METHOD = { name: 'method' };\n      const ORIGINATOR = { name: 'originator' };\n      const CALLER_V = { value: 'some caller' };\n      const METHOD_V = { value: 'some method' };\n      const ORIGINATOR_V = { value: 'some originator' };\n      const NO_PROPAGATION_MD = { tagTtl: TagTtl.NO_PROPAGATION };\n      const UNLIMITED_PROPAGATION_MD = { tagTtl: TagTtl.UNLIMITED_PROPAGATION };\n      let tagMap: TagMap;\n\n      beforeEach(() => {\n        tagMap = new TagMap();\n      });\n\n      it('should return tag values from tags and columns', () => {\n        const columns = [CALLER, METHOD];\n        tagMap.set(CALLER, CALLER_V);\n        tagMap.set(METHOD, METHOD_V);\n        const tagValues = Recorder.getTagValues(tagMap.tags, columns);\n        assert.strictEqual(tagValues.length, 2);\n        assert.deepStrictEqual(tagValues, [CALLER_V, METHOD_V]);\n      });\n\n      it('should return tag values from tags and columns when using metadata', () => {\n        const columns = [CALLER, METHOD];\n        tagMap.set(CALLER, CALLER_V, NO_PROPAGATION_MD);\n        tagMap.set(METHOD, METHOD_V, UNLIMITED_PROPAGATION_MD);\n        const tagValues = Recorder.getTagValues(tagMap.tags, columns);\n        assert.strictEqual(tagValues.length, 2);\n        assert.deepStrictEqual(tagValues, [CALLER_V, METHOD_V]);\n      });\n\n      it('should return tag values from tags and columns with extra keys', () => {\n        const columns = [CALLER, METHOD, ORIGINATOR];\n        tagMap.set(CALLER, CALLER_V);\n        tagMap.set(METHOD, METHOD_V);\n        const tagValues = Recorder.getTagValues(tagMap.tags, columns);\n        assert.strictEqual(tagValues.length, 3);\n        assert.deepStrictEqual(tagValues, [CALLER_V, METHOD_V, null]);\n      });\n\n      it('should return tag values from tags and columns with extra tags', () => {\n        const columns = [CALLER, METHOD];\n        tagMap.set(CALLER, CALLER_V);\n        tagMap.set(METHOD, METHOD_V);\n        tagMap.set(ORIGINATOR, ORIGINATOR_V);\n        const tagValues = Recorder.getTagValues(tagMap.tags, columns);\n        assert.strictEqual(tagValues.length, 2);\n        assert.deepStrictEqual(tagValues, [CALLER_V, METHOD_V]);\n      });\n    });\n  }\n});\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"3a436cb50c5fe295aaf7076eae18486a9ed15741","contentHash":"27765e43c2245f69d05311856d0d85c33ffcb97915937f443aacc0cec004118f"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-resource.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-resource.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":15},"end":{"line":18,"column":32}},"2":{"start":{"line":19,"column":19},"end":{"line":19,"column":54}},"3":{"start":{"line":20,"column":0},"end":{"line":43,"column":3}},"4":{"start":{"line":21,"column":4},"end":{"line":26,"column":7}},"5":{"start":{"line":22,"column":8},"end":{"line":22,"column":58}},"6":{"start":{"line":23,"column":8},"end":{"line":24,"column":103}},"7":{"start":{"line":25,"column":8},"end":{"line":25,"column":40}},"8":{"start":{"line":27,"column":4},"end":{"line":30,"column":7}},"9":{"start":{"line":28,"column":8},"end":{"line":28,"column":44}},"10":{"start":{"line":29,"column":8},"end":{"line":29,"column":46}},"11":{"start":{"line":31,"column":4},"end":{"line":42,"column":7}},"12":{"start":{"line":32,"column":25},"end":{"line":32,"column":81}},"13":{"start":{"line":33,"column":29},"end":{"line":33,"column":44}},"14":{"start":{"line":34,"column":31},"end":{"line":38,"column":9}},"15":{"start":{"line":39,"column":8},"end":{"line":39,"column":62}},"16":{"start":{"line":40,"column":8},"end":{"line":40,"column":64}},"17":{"start":{"line":41,"column":8},"end":{"line":41,"column":61}},"18":{"start":{"line":44,"column":0},"end":{"line":95,"column":3}},"19":{"start":{"line":45,"column":29},"end":{"line":45,"column":55}},"20":{"start":{"line":46,"column":31},"end":{"line":49,"column":5}},"21":{"start":{"line":50,"column":23},"end":{"line":50,"column":65}},"22":{"start":{"line":51,"column":23},"end":{"line":54,"column":5}},"23":{"start":{"line":55,"column":4},"end":{"line":62,"column":7}},"24":{"start":{"line":56,"column":26},"end":{"line":56,"column":56}},"25":{"start":{"line":57,"column":25},"end":{"line":57,"column":74}},"26":{"start":{"line":58,"column":31},"end":{"line":58,"column":49}},"27":{"start":{"line":59,"column":8},"end":{"line":59,"column":48}},"28":{"start":{"line":60,"column":8},"end":{"line":60,"column":67}},"29":{"start":{"line":61,"column":8},"end":{"line":61,"column":64}},"30":{"start":{"line":63,"column":4},"end":{"line":74,"column":7}},"31":{"start":{"line":64,"column":26},"end":{"line":68,"column":9}},"32":{"start":{"line":69,"column":25},"end":{"line":69,"column":74}},"33":{"start":{"line":70,"column":31},"end":{"line":70,"column":49}},"34":{"start":{"line":71,"column":8},"end":{"line":71,"column":48}},"35":{"start":{"line":72,"column":8},"end":{"line":72,"column":67}},"36":{"start":{"line":73,"column":8},"end":{"line":73,"column":64}},"37":{"start":{"line":75,"column":4},"end":{"line":86,"column":7}},"38":{"start":{"line":76,"column":26},"end":{"line":80,"column":9}},"39":{"start":{"line":81,"column":25},"end":{"line":81,"column":74}},"40":{"start":{"line":82,"column":31},"end":{"line":82,"column":57}},"41":{"start":{"line":83,"column":8},"end":{"line":83,"column":48}},"42":{"start":{"line":84,"column":8},"end":{"line":84,"column":67}},"43":{"start":{"line":85,"column":8},"end":{"line":85,"column":64}},"44":{"start":{"line":87,"column":4},"end":{"line":94,"column":7}},"45":{"start":{"line":88,"column":26},"end":{"line":88,"column":70}},"46":{"start":{"line":89,"column":25},"end":{"line":89,"column":74}},"47":{"start":{"line":90,"column":31},"end":{"line":90,"column":59}},"48":{"start":{"line":91,"column":8},"end":{"line":91,"column":53}},"49":{"start":{"line":92,"column":8},"end":{"line":92,"column":67}},"50":{"start":{"line":93,"column":8},"end":{"line":93,"column":64}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":20,"column":23},"end":{"line":20,"column":24}},"loc":{"start":{"line":20,"column":29},"end":{"line":43,"column":1}},"line":20},"1":{"name":"(anonymous_1)","decl":{"start":{"line":21,"column":11},"end":{"line":21,"column":12}},"loc":{"start":{"line":21,"column":17},"end":{"line":26,"column":5}},"line":21},"2":{"name":"(anonymous_2)","decl":{"start":{"line":27,"column":10},"end":{"line":27,"column":11}},"loc":{"start":{"line":27,"column":16},"end":{"line":30,"column":5}},"line":27},"3":{"name":"(anonymous_3)","decl":{"start":{"line":31,"column":72},"end":{"line":31,"column":73}},"loc":{"start":{"line":31,"column":78},"end":{"line":42,"column":5}},"line":31},"4":{"name":"(anonymous_4)","decl":{"start":{"line":44,"column":29},"end":{"line":44,"column":30}},"loc":{"start":{"line":44,"column":35},"end":{"line":95,"column":1}},"line":44},"5":{"name":"(anonymous_5)","decl":{"start":{"line":55,"column":50},"end":{"line":55,"column":51}},"loc":{"start":{"line":55,"column":56},"end":{"line":62,"column":5}},"line":55},"6":{"name":"(anonymous_6)","decl":{"start":{"line":63,"column":69},"end":{"line":63,"column":70}},"loc":{"start":{"line":63,"column":75},"end":{"line":74,"column":5}},"line":63},"7":{"name":"(anonymous_7)","decl":{"start":{"line":75,"column":69},"end":{"line":75,"column":70}},"loc":{"start":{"line":75,"column":75},"end":{"line":86,"column":5}},"line":75},"8":{"name":"(anonymous_8)","decl":{"start":{"line":87,"column":62},"end":{"line":87,"column":63}},"loc":{"start":{"line":87,"column":68},"end":{"line":94,"column":5}},"line":87}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1},"f":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-resource.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-resource.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\n\nimport { CoreResource } from '../src/resource/resource';\nimport { Labels, Resource } from '../src/resource/types';\n\ndescribe('Resource()', () => {\n  before(() => {\n    process.env.OC_RESOURCE_TYPE = 'k8s.io/container';\n    process.env.OC_RESOURCE_LABELS =\n      'k8s.io/pod/name=\"pod-xyz-123\",k8s.io/container/name=\"c1\",k8s.io/namespace/name=\"default\"';\n    CoreResource.setup();\n  });\n\n  after(() => {\n    delete process.env.OC_RESOURCE_TYPE;\n    delete process.env.OC_RESOURCE_LABELS;\n  });\n\n  it('should return resource information from environment variables', () => {\n    const resource = CoreResource.createFromEnvironmentVariables();\n    const actualLabels = resource.labels;\n    const expectedLabels: Labels = {\n      'k8s.io/container/name': '\"c1\"',\n      'k8s.io/namespace/name': '\"default\"',\n      'k8s.io/pod/name': '\"pod-xyz-123\"',\n    };\n\n    assert.strictEqual(resource.type, 'k8s.io/container');\n    assert.strictEqual(Object.keys(actualLabels).length, 3);\n    assert.deepStrictEqual(actualLabels, expectedLabels);\n  });\n});\n\ndescribe('mergeResources()', () => {\n  const DEFAULT_RESOURCE: Resource = { type: null, labels: {} };\n  const DEFAULT_RESOURCE_1: Resource = {\n    type: 'default',\n    labels: { a: '100' },\n  };\n  const RESOURCE_1: Resource = { type: 't1', labels: { a: '1', b: '2' } };\n  const RESOURCE_2: Resource = {\n    type: 't2',\n    labels: { a: '1', b: '3', c: '4' },\n  };\n\n  it('merge resources with default, resource1', () => {\n    const resources: Resource[] = [DEFAULT_RESOURCE, RESOURCE_1];\n    const resource = CoreResource.mergeResources(resources);\n    const expectedLabels: Labels = { a: '1', b: '2' };\n\n    assert.strictEqual(resource.type, 't1');\n    assert.strictEqual(Object.keys(resource.labels).length, 2);\n    assert.deepStrictEqual(resource.labels, expectedLabels);\n  });\n\n  it('merge resources with default, resource1, resource2 = empty', () => {\n    const resources: Resource[] = [\n      DEFAULT_RESOURCE,\n      RESOURCE_1,\n      { type: null, labels: {} },\n    ];\n    const resource = CoreResource.mergeResources(resources);\n    const expectedLabels: Labels = { a: '1', b: '2' };\n\n    assert.strictEqual(resource.type, 't1');\n    assert.strictEqual(Object.keys(resource.labels).length, 2);\n    assert.deepStrictEqual(resource.labels, expectedLabels);\n  });\n\n  it('merge resources with default, resource1 = empty, resource2', () => {\n    const resources: Resource[] = [\n      DEFAULT_RESOURCE,\n      { type: null, labels: {} },\n      RESOURCE_2,\n    ];\n    const resource = CoreResource.mergeResources(resources);\n    const expectedLabels: Labels = { a: '1', b: '3', c: '4' };\n\n    assert.strictEqual(resource.type, 't2');\n    assert.strictEqual(Object.keys(resource.labels).length, 3);\n    assert.deepStrictEqual(resource.labels, expectedLabels);\n  });\n\n  it('merge resources with default1, resource1, resource2', () => {\n    const resources: Resource[] = [DEFAULT_RESOURCE_1, RESOURCE_1, RESOURCE_2];\n    const resource = CoreResource.mergeResources(resources);\n    const expectedLabels: Labels = { a: '100', b: '2', c: '4' };\n\n    assert.strictEqual(resource.type, 'default');\n    assert.strictEqual(Object.keys(resource.labels).length, 3);\n    assert.deepStrictEqual(resource.labels, expectedLabels);\n  });\n});\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"80beadbca6bf6383e2ddf64a0c7bf73e8f8720c9","contentHash":"fb4b9b51ec6a1540313567ff5555ceffe3325e8804cd84c496791f553e30aab4"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-root-span.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-root-span.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":15},"end":{"line":18,"column":32}},"2":{"start":{"line":19,"column":25},"end":{"line":19,"column":79}},"3":{"start":{"line":20,"column":20},"end":{"line":20,"column":59}},"4":{"start":{"line":21,"column":15},"end":{"line":21,"column":49}},"5":{"start":{"line":22,"column":17},"end":{"line":22,"column":53}},"6":{"start":{"line":23,"column":14},"end":{"line":23,"column":49}},"7":{"start":{"line":24,"column":15},"end":{"line":24,"column":40}},"8":{"start":{"line":25,"column":0},"end":{"line":317,"column":3}},"9":{"start":{"line":26,"column":17},"end":{"line":26,"column":29}},"10":{"start":{"line":27,"column":17},"end":{"line":27,"column":38}},"11":{"start":{"line":28,"column":20},"end":{"line":28,"column":54}},"12":{"start":{"line":29,"column":25},"end":{"line":29,"column":27}},"13":{"start":{"line":33,"column":4},"end":{"line":38,"column":7}},"14":{"start":{"line":34,"column":8},"end":{"line":37,"column":11}},"15":{"start":{"line":35,"column":25},"end":{"line":35,"column":92}},"16":{"start":{"line":36,"column":12},"end":{"line":36,"column":60}},"17":{"start":{"line":42,"column":4},"end":{"line":58,"column":7}},"18":{"start":{"line":43,"column":8},"end":{"line":57,"column":11}},"19":{"start":{"line":44,"column":25},"end":{"line":44,"column":82}},"20":{"start":{"line":45,"column":12},"end":{"line":45,"column":25}},"21":{"start":{"line":46,"column":25},"end":{"line":49,"column":14}},"22":{"start":{"line":50,"column":12},"end":{"line":50,"column":53}},"23":{"start":{"line":51,"column":12},"end":{"line":51,"column":52}},"24":{"start":{"line":52,"column":12},"end":{"line":52,"column":65}},"25":{"start":{"line":53,"column":12},"end":{"line":53,"column":64}},"26":{"start":{"line":54,"column":12},"end":{"line":56,"column":13}},"27":{"start":{"line":55,"column":16},"end":{"line":55,"column":55}},"28":{"start":{"line":59,"column":4},"end":{"line":77,"column":7}},"29":{"start":{"line":60,"column":8},"end":{"line":76,"column":11}},"30":{"start":{"line":61,"column":25},"end":{"line":61,"column":92}},"31":{"start":{"line":62,"column":12},"end":{"line":62,"column":25}},"32":{"start":{"line":63,"column":12},"end":{"line":63,"column":57}},"33":{"start":{"line":64,"column":12},"end":{"line":67,"column":15}},"34":{"start":{"line":68,"column":12},"end":{"line":68,"column":57}},"35":{"start":{"line":69,"column":12},"end":{"line":74,"column":13}},"36":{"start":{"line":69,"column":25},"end":{"line":69,"column":26}},"37":{"start":{"line":70,"column":16},"end":{"line":73,"column":19}},"38":{"start":{"line":75,"column":12},"end":{"line":75,"column":58}},"39":{"start":{"line":78,"column":4},"end":{"line":112,"column":7}},"40":{"start":{"line":79,"column":8},"end":{"line":111,"column":11}},"41":{"start":{"line":80,"column":25},"end":{"line":80,"column":92}},"42":{"start":{"line":81,"column":12},"end":{"line":81,"column":25}},"43":{"start":{"line":82,"column":12},"end":{"line":82,"column":57}},"44":{"start":{"line":83,"column":27},"end":{"line":86,"column":14}},"45":{"start":{"line":87,"column":12},"end":{"line":87,"column":57}},"46":{"start":{"line":88,"column":12},"end":{"line":88,"column":59}},"47":{"start":{"line":89,"column":27},"end":{"line":92,"column":14}},"48":{"start":{"line":93,"column":12},"end":{"line":93,"column":57}},"49":{"start":{"line":94,"column":32},"end":{"line":97,"column":14}},"50":{"start":{"line":98,"column":12},"end":{"line":98,"column":57}},"51":{"start":{"line":99,"column":12},"end":{"line":99,"column":59}},"52":{"start":{"line":100,"column":12},"end":{"line":100,"column":59}},"53":{"start":{"line":101,"column":12},"end":{"line":101,"column":64}},"54":{"start":{"line":102,"column":12},"end":{"line":102,"column":53}},"55":{"start":{"line":103,"column":12},"end":{"line":103,"column":54}},"56":{"start":{"line":104,"column":12},"end":{"line":104,"column":54}},"57":{"start":{"line":105,"column":12},"end":{"line":105,"column":68}},"58":{"start":{"line":106,"column":12},"end":{"line":106,"column":55}},"59":{"start":{"line":107,"column":12},"end":{"line":107,"column":61}},"60":{"start":{"line":108,"column":12},"end":{"line":108,"column":55}},"61":{"start":{"line":109,"column":12},"end":{"line":109,"column":60}},"62":{"start":{"line":110,"column":12},"end":{"line":110,"column":64}},"63":{"start":{"line":116,"column":4},"end":{"line":127,"column":7}},"64":{"start":{"line":117,"column":8},"end":{"line":126,"column":11}},"65":{"start":{"line":118,"column":25},"end":{"line":118,"column":92}},"66":{"start":{"line":119,"column":12},"end":{"line":119,"column":25}},"67":{"start":{"line":120,"column":12},"end":{"line":120,"column":71}},"68":{"start":{"line":121,"column":26},"end":{"line":124,"column":14}},"69":{"start":{"line":125,"column":12},"end":{"line":125,"column":60}},"70":{"start":{"line":131,"column":4},"end":{"line":137,"column":7}},"71":{"start":{"line":132,"column":8},"end":{"line":136,"column":11}},"72":{"start":{"line":133,"column":25},"end":{"line":133,"column":92}},"73":{"start":{"line":134,"column":12},"end":{"line":134,"column":25}},"74":{"start":{"line":135,"column":12},"end":{"line":135,"column":36}},"75":{"start":{"line":141,"column":4},"end":{"line":157,"column":7}},"76":{"start":{"line":143,"column":8},"end":{"line":150,"column":11}},"77":{"start":{"line":144,"column":12},"end":{"line":144,"column":87}},"78":{"start":{"line":145,"column":12},"end":{"line":145,"column":25}},"79":{"start":{"line":146,"column":12},"end":{"line":149,"column":15}},"80":{"start":{"line":151,"column":8},"end":{"line":153,"column":11}},"81":{"start":{"line":152,"column":12},"end":{"line":152,"column":51}},"82":{"start":{"line":154,"column":8},"end":{"line":156,"column":11}},"83":{"start":{"line":155,"column":12},"end":{"line":155,"column":36}},"84":{"start":{"line":161,"column":4},"end":{"line":170,"column":7}},"85":{"start":{"line":162,"column":8},"end":{"line":169,"column":11}},"86":{"start":{"line":163,"column":25},"end":{"line":163,"column":92}},"87":{"start":{"line":164,"column":25},"end":{"line":167,"column":14}},"88":{"start":{"line":168,"column":12},"end":{"line":168,"column":69}},"89":{"start":{"line":174,"column":4},"end":{"line":185,"column":7}},"90":{"start":{"line":175,"column":8},"end":{"line":184,"column":11}},"91":{"start":{"line":176,"column":25},"end":{"line":176,"column":92}},"92":{"start":{"line":177,"column":12},"end":{"line":177,"column":25}},"93":{"start":{"line":178,"column":12},"end":{"line":178,"column":23}},"94":{"start":{"line":179,"column":25},"end":{"line":182,"column":14}},"95":{"start":{"line":183,"column":12},"end":{"line":183,"column":69}},"96":{"start":{"line":189,"column":4},"end":{"line":196,"column":7}},"97":{"start":{"line":190,"column":8},"end":{"line":195,"column":11}},"98":{"start":{"line":191,"column":25},"end":{"line":191,"column":92}},"99":{"start":{"line":192,"column":12},"end":{"line":192,"column":25}},"100":{"start":{"line":193,"column":12},"end":{"line":193,"column":23}},"101":{"start":{"line":194,"column":12},"end":{"line":194,"column":34}},"102":{"start":{"line":200,"column":4},"end":{"line":206,"column":7}},"103":{"start":{"line":201,"column":8},"end":{"line":205,"column":11}},"104":{"start":{"line":202,"column":25},"end":{"line":202,"column":92}},"105":{"start":{"line":203,"column":12},"end":{"line":203,"column":23}},"106":{"start":{"line":204,"column":12},"end":{"line":204,"column":35}},"107":{"start":{"line":210,"column":4},"end":{"line":227,"column":7}},"108":{"start":{"line":211,"column":8},"end":{"line":226,"column":11}},"109":{"start":{"line":212,"column":25},"end":{"line":212,"column":92}},"110":{"start":{"line":213,"column":12},"end":{"line":213,"column":25}},"111":{"start":{"line":214,"column":26},"end":{"line":217,"column":14}},"112":{"start":{"line":218,"column":12},"end":{"line":221,"column":15}},"113":{"start":{"line":222,"column":12},"end":{"line":222,"column":23}},"114":{"start":{"line":223,"column":12},"end":{"line":225,"column":13}},"115":{"start":{"line":224,"column":16},"end":{"line":224,"column":38}},"116":{"start":{"line":231,"column":4},"end":{"line":240,"column":7}},"117":{"start":{"line":232,"column":8},"end":{"line":239,"column":11}},"118":{"start":{"line":233,"column":29},"end":{"line":233,"column":96}},"119":{"start":{"line":234,"column":12},"end":{"line":234,"column":29}},"120":{"start":{"line":235,"column":12},"end":{"line":238,"column":15}},"121":{"start":{"line":236,"column":16},"end":{"line":236,"column":82}},"122":{"start":{"line":237,"column":16},"end":{"line":237,"column":100}},"123":{"start":{"line":244,"column":4},"end":{"line":268,"column":7}},"124":{"start":{"line":245,"column":8},"end":{"line":257,"column":11}},"125":{"start":{"line":248,"column":16},"end":{"line":250,"column":44}},"126":{"start":{"line":252,"column":29},"end":{"line":252,"column":96}},"127":{"start":{"line":253,"column":12},"end":{"line":253,"column":29}},"128":{"start":{"line":254,"column":12},"end":{"line":254,"column":71}},"129":{"start":{"line":255,"column":12},"end":{"line":255,"column":55}},"130":{"start":{"line":256,"column":12},"end":{"line":256,"column":69}},"131":{"start":{"line":258,"column":8},"end":{"line":267,"column":11}},"132":{"start":{"line":259,"column":29},"end":{"line":259,"column":96}},"133":{"start":{"line":260,"column":12},"end":{"line":260,"column":29}},"134":{"start":{"line":261,"column":12},"end":{"line":261,"column":55}},"135":{"start":{"line":262,"column":12},"end":{"line":262,"column":55}},"136":{"start":{"line":263,"column":12},"end":{"line":263,"column":68}},"137":{"start":{"line":264,"column":12},"end":{"line":264,"column":88}},"138":{"start":{"line":265,"column":12},"end":{"line":265,"column":75}},"139":{"start":{"line":266,"column":12},"end":{"line":266,"column":61}},"140":{"start":{"line":272,"column":4},"end":{"line":287,"column":7}},"141":{"start":{"line":273,"column":8},"end":{"line":286,"column":11}},"142":{"start":{"line":276,"column":16},"end":{"line":276,"column":85}},"143":{"start":{"line":278,"column":29},"end":{"line":278,"column":96}},"144":{"start":{"line":279,"column":12},"end":{"line":279,"column":29}},"145":{"start":{"line":280,"column":25},"end":{"line":280,"column":58}},"146":{"start":{"line":281,"column":12},"end":{"line":281,"column":25}},"147":{"start":{"line":282,"column":12},"end":{"line":282,"column":90}},"148":{"start":{"line":283,"column":12},"end":{"line":283,"column":49}},"149":{"start":{"line":284,"column":12},"end":{"line":284,"column":62}},"150":{"start":{"line":285,"column":12},"end":{"line":285,"column":57}},"151":{"start":{"line":291,"column":4},"end":{"line":304,"column":7}},"152":{"start":{"line":292,"column":8},"end":{"line":303,"column":11}},"153":{"start":{"line":295,"column":16},"end":{"line":295,"column":58}},"154":{"start":{"line":297,"column":29},"end":{"line":297,"column":96}},"155":{"start":{"line":298,"column":12},"end":{"line":298,"column":29}},"156":{"start":{"line":299,"column":12},"end":{"line":299,"column":76}},"157":{"start":{"line":300,"column":12},"end":{"line":300,"column":57}},"158":{"start":{"line":301,"column":12},"end":{"line":301,"column":70}},"159":{"start":{"line":302,"column":12},"end":{"line":302,"column":65}},"160":{"start":{"line":305,"column":4},"end":{"line":316,"column":7}},"161":{"start":{"line":306,"column":8},"end":{"line":310,"column":11}},"162":{"start":{"line":307,"column":25},"end":{"line":307,"column":92}},"163":{"start":{"line":308,"column":12},"end":{"line":308,"column":60}},"164":{"start":{"line":309,"column":12},"end":{"line":309,"column":59}},"165":{"start":{"line":311,"column":8},"end":{"line":315,"column":11}},"166":{"start":{"line":312,"column":25},"end":{"line":312,"column":106}},"167":{"start":{"line":313,"column":12},"end":{"line":313,"column":60}},"168":{"start":{"line":314,"column":12},"end":{"line":314,"column":62}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":25,"column":21},"end":{"line":25,"column":22}},"loc":{"start":{"line":25,"column":27},"end":{"line":317,"column":1}},"line":25},"1":{"name":"(anonymous_1)","decl":{"start":{"line":33,"column":31},"end":{"line":33,"column":32}},"loc":{"start":{"line":33,"column":37},"end":{"line":38,"column":5}},"line":33},"2":{"name":"(anonymous_2)","decl":{"start":{"line":34,"column":48},"end":{"line":34,"column":49}},"loc":{"start":{"line":34,"column":54},"end":{"line":37,"column":9}},"line":34},"3":{"name":"(anonymous_3)","decl":{"start":{"line":42,"column":28},"end":{"line":42,"column":29}},"loc":{"start":{"line":42,"column":34},"end":{"line":58,"column":5}},"line":42},"4":{"name":"(anonymous_4)","decl":{"start":{"line":43,"column":58},"end":{"line":43,"column":59}},"loc":{"start":{"line":43,"column":64},"end":{"line":57,"column":9}},"line":43},"5":{"name":"(anonymous_5)","decl":{"start":{"line":59,"column":39},"end":{"line":59,"column":40}},"loc":{"start":{"line":59,"column":45},"end":{"line":77,"column":5}},"line":59},"6":{"name":"(anonymous_6)","decl":{"start":{"line":60,"column":65},"end":{"line":60,"column":66}},"loc":{"start":{"line":60,"column":71},"end":{"line":76,"column":9}},"line":60},"7":{"name":"(anonymous_7)","decl":{"start":{"line":78,"column":29},"end":{"line":78,"column":30}},"loc":{"start":{"line":78,"column":35},"end":{"line":112,"column":5}},"line":78},"8":{"name":"(anonymous_8)","decl":{"start":{"line":79,"column":61},"end":{"line":79,"column":62}},"loc":{"start":{"line":79,"column":67},"end":{"line":111,"column":9}},"line":79},"9":{"name":"(anonymous_9)","decl":{"start":{"line":116,"column":30},"end":{"line":116,"column":31}},"loc":{"start":{"line":116,"column":36},"end":{"line":127,"column":5}},"line":116},"10":{"name":"(anonymous_10)","decl":{"start":{"line":117,"column":57},"end":{"line":117,"column":58}},"loc":{"start":{"line":117,"column":63},"end":{"line":126,"column":9}},"line":117},"11":{"name":"(anonymous_11)","decl":{"start":{"line":131,"column":24},"end":{"line":131,"column":25}},"loc":{"start":{"line":131,"column":30},"end":{"line":137,"column":5}},"line":131},"12":{"name":"(anonymous_12)","decl":{"start":{"line":132,"column":47},"end":{"line":132,"column":48}},"loc":{"start":{"line":132,"column":53},"end":{"line":136,"column":9}},"line":132},"13":{"name":"(anonymous_13)","decl":{"start":{"line":141,"column":28},"end":{"line":141,"column":29}},"loc":{"start":{"line":141,"column":34},"end":{"line":157,"column":5}},"line":141},"14":{"name":"(anonymous_14)","decl":{"start":{"line":143,"column":15},"end":{"line":143,"column":16}},"loc":{"start":{"line":143,"column":21},"end":{"line":150,"column":9}},"line":143},"15":{"name":"(anonymous_15)","decl":{"start":{"line":151,"column":42},"end":{"line":151,"column":43}},"loc":{"start":{"line":151,"column":48},"end":{"line":153,"column":9}},"line":151},"16":{"name":"(anonymous_16)","decl":{"start":{"line":154,"column":43},"end":{"line":154,"column":44}},"loc":{"start":{"line":154,"column":49},"end":{"line":156,"column":9}},"line":154},"17":{"name":"(anonymous_17)","decl":{"start":{"line":161,"column":50},"end":{"line":161,"column":51}},"loc":{"start":{"line":161,"column":56},"end":{"line":170,"column":5}},"line":161},"18":{"name":"(anonymous_18)","decl":{"start":{"line":162,"column":41},"end":{"line":162,"column":42}},"loc":{"start":{"line":162,"column":47},"end":{"line":169,"column":9}},"line":162},"19":{"name":"(anonymous_19)","decl":{"start":{"line":174,"column":49},"end":{"line":174,"column":50}},"loc":{"start":{"line":174,"column":55},"end":{"line":185,"column":5}},"line":174},"20":{"name":"(anonymous_20)","decl":{"start":{"line":175,"column":41},"end":{"line":175,"column":42}},"loc":{"start":{"line":175,"column":47},"end":{"line":184,"column":9}},"line":175},"21":{"name":"(anonymous_21)","decl":{"start":{"line":189,"column":22},"end":{"line":189,"column":23}},"loc":{"start":{"line":189,"column":28},"end":{"line":196,"column":5}},"line":189},"22":{"name":"(anonymous_22)","decl":{"start":{"line":190,"column":47},"end":{"line":190,"column":48}},"loc":{"start":{"line":190,"column":53},"end":{"line":195,"column":9}},"line":190},"23":{"name":"(anonymous_23)","decl":{"start":{"line":200,"column":44},"end":{"line":200,"column":45}},"loc":{"start":{"line":200,"column":50},"end":{"line":206,"column":5}},"line":200},"24":{"name":"(anonymous_24)","decl":{"start":{"line":201,"column":38},"end":{"line":201,"column":39}},"loc":{"start":{"line":201,"column":44},"end":{"line":205,"column":9}},"line":201},"25":{"name":"(anonymous_25)","decl":{"start":{"line":210,"column":43},"end":{"line":210,"column":44}},"loc":{"start":{"line":210,"column":49},"end":{"line":227,"column":5}},"line":210},"26":{"name":"(anonymous_26)","decl":{"start":{"line":211,"column":51},"end":{"line":211,"column":52}},"loc":{"start":{"line":211,"column":57},"end":{"line":226,"column":9}},"line":211},"27":{"name":"(anonymous_27)","decl":{"start":{"line":231,"column":30},"end":{"line":231,"column":31}},"loc":{"start":{"line":231,"column":36},"end":{"line":240,"column":5}},"line":231},"28":{"name":"(anonymous_28)","decl":{"start":{"line":232,"column":38},"end":{"line":232,"column":39}},"loc":{"start":{"line":232,"column":44},"end":{"line":239,"column":9}},"line":232},"29":{"name":"(anonymous_29)","decl":{"start":{"line":235,"column":48},"end":{"line":235,"column":49}},"loc":{"start":{"line":235,"column":59},"end":{"line":238,"column":13}},"line":235},"30":{"name":"(anonymous_30)","decl":{"start":{"line":244,"column":32},"end":{"line":244,"column":33}},"loc":{"start":{"line":244,"column":38},"end":{"line":268,"column":5}},"line":244},"31":{"name":"(anonymous_31)","decl":{"start":{"line":245,"column":39},"end":{"line":245,"column":40}},"loc":{"start":{"line":245,"column":45},"end":{"line":257,"column":9}},"line":245},"32":{"name":"instanceOfAnnotation","decl":{"start":{"line":247,"column":21},"end":{"line":247,"column":41}},"loc":{"start":{"line":247,"column":50},"end":{"line":251,"column":13}},"line":247},"33":{"name":"(anonymous_33)","decl":{"start":{"line":258,"column":72},"end":{"line":258,"column":73}},"loc":{"start":{"line":258,"column":78},"end":{"line":267,"column":9}},"line":258},"34":{"name":"(anonymous_34)","decl":{"start":{"line":272,"column":26},"end":{"line":272,"column":27}},"loc":{"start":{"line":272,"column":32},"end":{"line":287,"column":5}},"line":272},"35":{"name":"(anonymous_35)","decl":{"start":{"line":273,"column":32},"end":{"line":273,"column":33}},"loc":{"start":{"line":273,"column":38},"end":{"line":286,"column":9}},"line":273},"36":{"name":"instanceOfLink","decl":{"start":{"line":275,"column":21},"end":{"line":275,"column":35}},"loc":{"start":{"line":275,"column":44},"end":{"line":277,"column":13}},"line":275},"37":{"name":"(anonymous_37)","decl":{"start":{"line":291,"column":34},"end":{"line":291,"column":35}},"loc":{"start":{"line":291,"column":40},"end":{"line":304,"column":5}},"line":291},"38":{"name":"(anonymous_38)","decl":{"start":{"line":292,"column":41},"end":{"line":292,"column":42}},"loc":{"start":{"line":292,"column":47},"end":{"line":303,"column":9}},"line":292},"39":{"name":"instanceOfLink","decl":{"start":{"line":294,"column":21},"end":{"line":294,"column":35}},"loc":{"start":{"line":294,"column":44},"end":{"line":296,"column":13}},"line":294},"40":{"name":"(anonymous_40)","decl":{"start":{"line":305,"column":33},"end":{"line":305,"column":34}},"loc":{"start":{"line":305,"column":39},"end":{"line":316,"column":5}},"line":305},"41":{"name":"(anonymous_41)","decl":{"start":{"line":306,"column":60},"end":{"line":306,"column":61}},"loc":{"start":{"line":306,"column":66},"end":{"line":310,"column":9}},"line":306},"42":{"name":"(anonymous_42)","decl":{"start":{"line":311,"column":64},"end":{"line":311,"column":65}},"loc":{"start":{"line":311,"column":70},"end":{"line":315,"column":9}},"line":311}},"branchMap":{"0":{"loc":{"start":{"line":248,"column":24},"end":{"line":250,"column":42}},"type":"binary-expr","locations":[{"start":{"line":248,"column":24},"end":{"line":248,"column":47}},{"start":{"line":249,"column":20},"end":{"line":249,"column":41}},{"start":{"line":250,"column":20},"end":{"line":250,"column":42}}],"line":248},"1":{"loc":{"start":{"line":276,"column":23},"end":{"line":276,"column":84}},"type":"binary-expr","locations":[{"start":{"line":276,"column":23},"end":{"line":276,"column":42}},{"start":{"line":276,"column":46},"end":{"line":276,"column":64}},{"start":{"line":276,"column":68},"end":{"line":276,"column":84}}],"line":276},"2":{"loc":{"start":{"line":295,"column":23},"end":{"line":295,"column":57}},"type":"binary-expr","locations":[{"start":{"line":295,"column":23},"end":{"line":295,"column":39}},{"start":{"line":295,"column":43},"end":{"line":295,"column":57}}],"line":295}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":10,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"71":1,"72":1,"73":1,"74":1,"75":1,"76":1,"77":1,"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1,"86":1,"87":1,"88":1,"89":1,"90":1,"91":1,"92":1,"93":1,"94":1,"95":1,"96":1,"97":1,"98":1,"99":1,"100":1,"101":1,"102":1,"103":1,"104":1,"105":1,"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"112":1,"113":1,"114":1,"115":2,"116":1,"117":1,"118":1,"119":1,"120":1,"121":3,"122":3,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"136":1,"137":1,"138":1,"139":1,"140":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"149":1,"150":1,"151":1,"152":1,"153":1,"154":1,"155":1,"156":1,"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1},"f":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":3,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1},"b":{"0":[1,1,1],"1":[1,1,1],"2":[1,1]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-root-span.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-root-span.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport { NoRecordSpan } from '../src/trace/model/no-record/no-record-span';\nimport { RootSpan } from '../src/trace/model/root-span';\nimport { Span } from '../src/trace/model/span';\nimport { CoreTracer } from '../src/trace/model/tracer';\nimport * as types from '../src/trace/model/types';\nimport { Annotation, Link } from '../src/trace/model/types';\n\nconst tracer = new CoreTracer();\n\ndescribe('RootSpan', () => {\n  const name = 'MySpanName';\n  const kind = types.SpanKind.SERVER;\n  const traceId = 'd4cda95b652f4a1592b449d5929fda1b';\n  const parentSpanId = '';\n\n  /**\n   * Should create a RootSpan instance\n   */\n  describe('new RootSpan()', () => {\n    it('should create a RootSpan instance', () => {\n      const root = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      assert.ok(root instanceof RootSpan);\n    });\n  });\n\n  /**\n   * Should get span list from rootspan instance\n   */\n  describe('get spans()', () => {\n    it('should get span list from rootspan instance', () => {\n      const root = new RootSpan(tracer, name, kind, traceId, '');\n      root.start();\n      const span = root.startChildSpan({\n        name: 'spanName',\n        kind: types.SpanKind.CLIENT,\n      });\n\n      assert.strictEqual(root.spans.length, 1);\n      assert.strictEqual(span, root.spans[0]);\n      assert.strictEqual(span.kind, types.SpanKind.CLIENT);\n      assert.strictEqual(root.parentSpanId, parentSpanId);\n\n      for (const span of root.spans) {\n        assert.ok(span instanceof Span);\n      }\n    });\n  });\n\n  describe('get numberOfChildren()', () => {\n    it('should get numberOfChildren from rootspan instance', () => {\n      const root = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      root.start();\n      assert.strictEqual(root.numberOfChildren, 0);\n      root.startChildSpan({\n        name: 'spanName',\n        kind: types.SpanKind.UNSPECIFIED,\n      });\n      assert.strictEqual(root.numberOfChildren, 1);\n\n      for (let i = 0; i < 10; i++) {\n        root.startChildSpan({\n          name: 'spanName' + i,\n          kind: types.SpanKind.UNSPECIFIED,\n        });\n      }\n      assert.strictEqual(root.numberOfChildren, 11);\n    });\n  });\n\n  describe('nested spans', () => {\n    it('should get nested spans from rootspan instance', () => {\n      const root = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      root.start();\n      assert.strictEqual(root.numberOfChildren, 0);\n      const child1 = root.startChildSpan({\n        name: 'child1',\n        kind: types.SpanKind.UNSPECIFIED,\n      });\n      assert.strictEqual(root.numberOfChildren, 1);\n      assert.strictEqual(child1.numberOfChildren, 0);\n      const child2 = root.startChildSpan({\n        name: 'child2',\n        kind: types.SpanKind.UNSPECIFIED,\n      });\n      assert.strictEqual(root.numberOfChildren, 2);\n      const grandchild1 = child1.startChildSpan({\n        name: 'grandchild1',\n        kind: types.SpanKind.UNSPECIFIED,\n      });\n      assert.strictEqual(root.numberOfChildren, 2);\n      assert.strictEqual(child1.numberOfChildren, 1);\n      assert.strictEqual(child2.numberOfChildren, 0);\n      assert.strictEqual(grandchild1.numberOfChildren, 0);\n\n      assert.strictEqual(root.spans.length, 2);\n      assert.strictEqual(child1, root.spans[0]);\n      assert.strictEqual(child2, root.spans[1]);\n      assert.strictEqual(grandchild1.parentSpanId, child1.id);\n\n      assert.strictEqual(child1.spans.length, 1);\n      assert.strictEqual(grandchild1, child1.spans[0]);\n\n      assert.strictEqual(child2.spans.length, 0);\n      assert.strictEqual(grandchild1.spans.length, 0);\n\n      assert.strictEqual(root.allDescendants().length, 3);\n    });\n  });\n\n  /**\n   * Should get trace id from rootspan instance\n   */\n  describe('new traceId()', () => {\n    it('should get trace id from rootspan instance', () => {\n      const root = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      root.start();\n      assert.strictEqual(root.traceId, root.spanContext.traceId);\n\n      const child = root.startChildSpan({\n        name: 'child',\n        kind: types.SpanKind.UNSPECIFIED,\n      });\n      assert.strictEqual(root.traceId, child.traceId);\n    });\n  });\n\n  /**\n   * Should create and start a RootSpan instance\n   */\n  describe('start()', () => {\n    it('should start a RootSpan instance', () => {\n      const root = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      root.start();\n      assert.ok(root.started);\n    });\n  });\n\n  /**\n   * Should create and start a new span instance\n   */\n  describe('startSpan()', () => {\n    let root: RootSpan, span: types.Span;\n\n    before(() => {\n      root = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      root.start();\n      span = root.startChildSpan({\n        name: 'spanName',\n        kind: types.SpanKind.UNSPECIFIED,\n      });\n    });\n\n    it('should create span instance', () => {\n      assert.ok(span instanceof Span);\n    });\n\n    it('should start a span instance', () => {\n      assert.ok(span.started);\n    });\n  });\n\n  /**\n   * Should not start a span from a not started rootspan\n   */\n  describe('startSpan() before start rootspan', () => {\n    it('should create NoRecordSpan', () => {\n      const root = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      const span = root.startChildSpan({\n        name: 'spanName',\n        kind: types.SpanKind.UNSPECIFIED,\n      });\n      assert.ok(span instanceof NoRecordSpan);\n    });\n  });\n\n  /**\n   * Should not create a span from a ended rootspan\n   */\n  describe('startSpan() after rootspan ended', () => {\n    it('should create NoRecordSpan', () => {\n      const root = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      root.start();\n      root.end();\n      const span = root.startChildSpan({\n        name: 'spanName',\n        kind: types.SpanKind.UNSPECIFIED,\n      });\n      assert.ok(span instanceof NoRecordSpan);\n    });\n  });\n\n  /**\n   * Should end a rootspan instance\n   */\n  describe('end()', () => {\n    it('should end the rootspan instance', () => {\n      const root = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      root.start();\n      root.end();\n      assert.ok(root.ended);\n    });\n  });\n\n  /**\n   * Should not end a rootspan which was not started\n   */\n  describe('end() before start rootspan', () => {\n    it('should not end rootspan', () => {\n      const root = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      root.end();\n      assert.ok(!root.ended);\n    });\n  });\n\n  /**\n   * Should end all spans inside rootspan\n   */\n  describe('end() before end all spans', () => {\n    it('should end all spans inside rootspan', () => {\n      const root = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      root.start();\n      const child = root.startChildSpan({\n        name: 'child',\n        kind: types.SpanKind.UNSPECIFIED,\n      });\n      child.startChildSpan({\n        name: 'grandchild',\n        kind: types.SpanKind.UNSPECIFIED,\n      });\n      root.end();\n\n      for (const span of root.allDescendants()) {\n        assert.ok(span.ended);\n      }\n    });\n  });\n\n  /**\n   * Should add an attrinbutes\n   */\n  describe('addAtribute()', () => {\n    it('should add an attribute', () => {\n      const rootSpan = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      rootSpan.start();\n\n      ['String', 'Number', 'Boolean'].map(attType => {\n        rootSpan.addAttribute('testKey' + attType, 'testValue' + attType);\n        assert.strictEqual(\n          rootSpan.attributes['testKey' + attType],\n          'testValue' + attType\n        );\n      });\n    });\n  });\n\n  /**\n   * Should add an annotation\n   */\n  describe('addAnnotation()', () => {\n    it('should add an annotation', () => {\n      // tslint:disable:no-any\n      function instanceOfAnnotation(object: any): object is Annotation {\n        return (\n          'description' in object &&\n          'timestamp' in object &&\n          'attributes' in object\n        );\n      }\n\n      const rootSpan = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      rootSpan.start();\n\n      rootSpan.addAnnotation('description test', {}, Date.now());\n\n      assert.ok(rootSpan.annotations.length > 0);\n      assert.ok(instanceOfAnnotation(rootSpan.annotations[0]));\n    });\n\n    it('should add an annotation without attributes and timestamp', () => {\n      const rootSpan = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      rootSpan.start();\n\n      rootSpan.addAnnotation('description test');\n\n      assert.ok(rootSpan.annotations.length > 0);\n      assert.strictEqual(rootSpan.droppedAnnotationsCount, 0);\n      assert.strictEqual(\n        rootSpan.annotations[0].description,\n        'description test'\n      );\n      assert.deepStrictEqual(rootSpan.annotations[0].attributes, {});\n      assert.ok(rootSpan.annotations[0].timestamp > 0);\n    });\n  });\n\n  /**\n   * Should add a Link.\n   */\n  describe('addLink()', () => {\n    it('should add a Link', () => {\n      // tslint:disable:no-any\n      function instanceOfLink(object: any): object is Link {\n        return 'traceId' in object && 'spanId' in object && 'type' in object;\n      }\n\n      const rootSpan = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      rootSpan.start();\n\n      const span = new Span(tracer, rootSpan);\n      span.start();\n\n      rootSpan.addLink(\n        rootSpan.traceId,\n        span.id,\n        types.LinkType.CHILD_LINKED_SPAN\n      );\n\n      assert.ok(rootSpan.links.length > 0);\n      assert.strictEqual(rootSpan.droppedLinksCount, 0);\n      assert.ok(instanceOfLink(rootSpan.links[0]));\n    });\n  });\n\n  /**\n   * Should add a Message Event.\n   */\n  describe('addMessageEvent()', () => {\n    it('should add a Message Event', () => {\n      // tslint:disable:no-any\n      function instanceOfLink(object: any): object is Link {\n        return 'type' in object && 'id' in object;\n      }\n\n      const rootSpan = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      rootSpan.start();\n      rootSpan.addMessageEvent(types.MessageEventType.UNSPECIFIED, 1);\n\n      assert.ok(rootSpan.messageEvents.length > 0);\n      assert.strictEqual(rootSpan.droppedMessageEventsCount, 0);\n      assert.ok(instanceOfLink(rootSpan.messageEvents[0]));\n    });\n  });\n\n  describe('get traceState()', () => {\n    it('should handle optional / undefined traceState', () => {\n      const root = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      assert.ok(root instanceof RootSpan);\n      assert.strictEqual(root.traceState, undefined);\n    });\n\n    it('should create a RootSpan instance with traceState', () => {\n      const root = new RootSpan(\n        tracer,\n        name,\n        kind,\n        traceId,\n        parentSpanId,\n        'traceState'\n      );\n      assert.ok(root instanceof RootSpan);\n      assert.strictEqual(root.traceState, 'traceState');\n    });\n  });\n});\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"9610d3d080fd1245eae0f202e4c8c1a88238a022","contentHash":"a908ccf602bb5435b4135ba5cd34c231e950c1348922c73dc26df3185bee9ef7"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-sampler.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-sampler.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":15},"end":{"line":18,"column":32}},"2":{"start":{"line":19,"column":14},"end":{"line":19,"column":31}},"3":{"start":{"line":20,"column":20},"end":{"line":20,"column":59}},"4":{"start":{"line":21,"column":17},"end":{"line":21,"column":53}},"5":{"start":{"line":22,"column":18},"end":{"line":22,"column":57}},"6":{"start":{"line":23,"column":15},"end":{"line":23,"column":40}},"7":{"start":{"line":24,"column":24},"end":{"line":29,"column":1}},"8":{"start":{"line":30,"column":0},"end":{"line":120,"column":3}},"9":{"start":{"line":31,"column":17},"end":{"line":31,"column":29}},"10":{"start":{"line":32,"column":17},"end":{"line":32,"column":38}},"11":{"start":{"line":33,"column":20},"end":{"line":33,"column":54}},"12":{"start":{"line":34,"column":25},"end":{"line":34,"column":27}},"13":{"start":{"line":38,"column":4},"end":{"line":53,"column":7}},"14":{"start":{"line":39,"column":8},"end":{"line":45,"column":11}},"15":{"start":{"line":40,"column":25},"end":{"line":40,"column":92}},"16":{"start":{"line":41,"column":28},"end":{"line":41,"column":66}},"17":{"start":{"line":42,"column":40},"end":{"line":42,"column":74}},"18":{"start":{"line":43,"column":12},"end":{"line":43,"column":62}},"19":{"start":{"line":44,"column":12},"end":{"line":44,"column":43}},"20":{"start":{"line":46,"column":8},"end":{"line":52,"column":11}},"21":{"start":{"line":47,"column":25},"end":{"line":47,"column":92}},"22":{"start":{"line":48,"column":28},"end":{"line":48,"column":68}},"23":{"start":{"line":49,"column":40},"end":{"line":49,"column":74}},"24":{"start":{"line":50,"column":12},"end":{"line":50,"column":62}},"25":{"start":{"line":51,"column":12},"end":{"line":51,"column":43}},"26":{"start":{"line":57,"column":4},"end":{"line":72,"column":7}},"27":{"start":{"line":58,"column":8},"end":{"line":64,"column":11}},"28":{"start":{"line":59,"column":25},"end":{"line":59,"column":92}},"29":{"start":{"line":60,"column":28},"end":{"line":60,"column":66}},"30":{"start":{"line":61,"column":40},"end":{"line":61,"column":74}},"31":{"start":{"line":62,"column":12},"end":{"line":62,"column":61}},"32":{"start":{"line":63,"column":12},"end":{"line":63,"column":44}},"33":{"start":{"line":65,"column":8},"end":{"line":71,"column":11}},"34":{"start":{"line":66,"column":25},"end":{"line":66,"column":92}},"35":{"start":{"line":67,"column":28},"end":{"line":67,"column":67}},"36":{"start":{"line":68,"column":40},"end":{"line":68,"column":74}},"37":{"start":{"line":69,"column":12},"end":{"line":69,"column":61}},"38":{"start":{"line":70,"column":12},"end":{"line":70,"column":44}},"39":{"start":{"line":73,"column":4},"end":{"line":99,"column":7}},"40":{"start":{"line":74,"column":8},"end":{"line":77,"column":11}},"41":{"start":{"line":75,"column":28},"end":{"line":75,"column":68}},"42":{"start":{"line":76,"column":12},"end":{"line":76,"column":71}},"43":{"start":{"line":78,"column":8},"end":{"line":98,"column":11}},"44":{"start":{"line":79,"column":28},"end":{"line":79,"column":68}},"45":{"start":{"line":80,"column":33},"end":{"line":84,"column":13}},"46":{"start":{"line":85,"column":12},"end":{"line":88,"column":15}},"47":{"start":{"line":86,"column":44},"end":{"line":86,"column":73}},"48":{"start":{"line":87,"column":16},"end":{"line":87,"column":93}},"49":{"start":{"line":89,"column":36},"end":{"line":93,"column":13}},"50":{"start":{"line":94,"column":12},"end":{"line":97,"column":15}},"51":{"start":{"line":95,"column":44},"end":{"line":95,"column":73}},"52":{"start":{"line":96,"column":16},"end":{"line":96,"column":95}},"53":{"start":{"line":100,"column":4},"end":{"line":104,"column":7}},"54":{"start":{"line":101,"column":8},"end":{"line":103,"column":11}},"55":{"start":{"line":102,"column":12},"end":{"line":102,"column":117}},"56":{"start":{"line":105,"column":4},"end":{"line":109,"column":7}},"57":{"start":{"line":106,"column":8},"end":{"line":108,"column":11}},"58":{"start":{"line":107,"column":12},"end":{"line":107,"column":113}},"59":{"start":{"line":110,"column":4},"end":{"line":114,"column":7}},"60":{"start":{"line":111,"column":8},"end":{"line":113,"column":11}},"61":{"start":{"line":112,"column":12},"end":{"line":112,"column":111}},"62":{"start":{"line":115,"column":4},"end":{"line":119,"column":7}},"63":{"start":{"line":116,"column":8},"end":{"line":118,"column":11}},"64":{"start":{"line":117,"column":12},"end":{"line":117,"column":105}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":30,"column":20},"end":{"line":30,"column":21}},"loc":{"start":{"line":30,"column":26},"end":{"line":120,"column":1}},"line":30},"1":{"name":"(anonymous_1)","decl":{"start":{"line":38,"column":38},"end":{"line":38,"column":39}},"loc":{"start":{"line":38,"column":44},"end":{"line":53,"column":5}},"line":38},"2":{"name":"(anonymous_2)","decl":{"start":{"line":39,"column":51},"end":{"line":39,"column":52}},"loc":{"start":{"line":39,"column":57},"end":{"line":45,"column":9}},"line":39},"3":{"name":"(anonymous_3)","decl":{"start":{"line":46,"column":52},"end":{"line":46,"column":53}},"loc":{"start":{"line":46,"column":58},"end":{"line":52,"column":9}},"line":46},"4":{"name":"(anonymous_4)","decl":{"start":{"line":57,"column":37},"end":{"line":57,"column":38}},"loc":{"start":{"line":57,"column":43},"end":{"line":72,"column":5}},"line":57},"5":{"name":"(anonymous_5)","decl":{"start":{"line":58,"column":50},"end":{"line":58,"column":51}},"loc":{"start":{"line":58,"column":56},"end":{"line":64,"column":9}},"line":58},"6":{"name":"(anonymous_6)","decl":{"start":{"line":65,"column":63},"end":{"line":65,"column":64}},"loc":{"start":{"line":65,"column":69},"end":{"line":71,"column":9}},"line":65},"7":{"name":"(anonymous_7)","decl":{"start":{"line":73,"column":43},"end":{"line":73,"column":44}},"loc":{"start":{"line":73,"column":49},"end":{"line":99,"column":5}},"line":73},"8":{"name":"(anonymous_8)","decl":{"start":{"line":74,"column":50},"end":{"line":74,"column":51}},"loc":{"start":{"line":74,"column":56},"end":{"line":77,"column":9}},"line":74},"9":{"name":"(anonymous_9)","decl":{"start":{"line":78,"column":80},"end":{"line":78,"column":81}},"loc":{"start":{"line":78,"column":86},"end":{"line":98,"column":9}},"line":78},"10":{"name":"(anonymous_10)","decl":{"start":{"line":85,"column":33},"end":{"line":85,"column":34}},"loc":{"start":{"line":85,"column":44},"end":{"line":88,"column":13}},"line":85},"11":{"name":"(anonymous_11)","decl":{"start":{"line":94,"column":36},"end":{"line":94,"column":37}},"loc":{"start":{"line":94,"column":47},"end":{"line":97,"column":13}},"line":94},"12":{"name":"(anonymous_12)","decl":{"start":{"line":100,"column":51},"end":{"line":100,"column":52}},"loc":{"start":{"line":100,"column":57},"end":{"line":104,"column":5}},"line":100},"13":{"name":"(anonymous_13)","decl":{"start":{"line":101,"column":32},"end":{"line":101,"column":33}},"loc":{"start":{"line":101,"column":38},"end":{"line":103,"column":9}},"line":101},"14":{"name":"(anonymous_14)","decl":{"start":{"line":105,"column":48},"end":{"line":105,"column":49}},"loc":{"start":{"line":105,"column":54},"end":{"line":109,"column":5}},"line":105},"15":{"name":"(anonymous_15)","decl":{"start":{"line":106,"column":30},"end":{"line":106,"column":31}},"loc":{"start":{"line":106,"column":36},"end":{"line":108,"column":9}},"line":106},"16":{"name":"(anonymous_16)","decl":{"start":{"line":110,"column":45},"end":{"line":110,"column":46}},"loc":{"start":{"line":110,"column":51},"end":{"line":114,"column":5}},"line":110},"17":{"name":"(anonymous_17)","decl":{"start":{"line":111,"column":31},"end":{"line":111,"column":32}},"loc":{"start":{"line":111,"column":37},"end":{"line":113,"column":9}},"line":111},"18":{"name":"(anonymous_18)","decl":{"start":{"line":115,"column":40},"end":{"line":115,"column":41}},"loc":{"start":{"line":115,"column":46},"end":{"line":119,"column":5}},"line":115},"19":{"name":"(anonymous_19)","decl":{"start":{"line":116,"column":30},"end":{"line":116,"column":31}},"loc":{"start":{"line":116,"column":36},"end":{"line":118,"column":9}},"line":116}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":3,"48":3,"49":1,"50":1,"51":3,"52":3,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1},"f":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":3,"11":3,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-sampler.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-sampler.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,iCAAiC;AACjC,gCAAkC;AAElC,4DAAwD;AACxD,sDAAuD;AACvD,0DAGsC;AAEtC,MAAM,MAAM,GAAG,IAAI,mBAAU,EAAE,CAAC;AAEhC,MAAM,eAAe,GAAgB;IACnC,gCAAgC,EAAE,EAAE;IACpC,yBAAyB,EAAE,EAAE;IAC7B,oBAAoB,EAAE,CAAC;IACvB,4BAA4B,EAAE,CAAC;CAChC,CAAC;AAEF,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;IACvB,MAAM,IAAI,GAAG,YAAY,CAAC;IAC1B,MAAM,IAAI,GAAG,cAAQ,CAAC,MAAM,CAAC;IAC7B,MAAM,OAAO,GAAG,kCAAkC,CAAC;IACnD,MAAM,YAAY,GAAG,EAAE,CAAC;IAExB;;OAEG;IACH,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACrC,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;YAC9C,MAAM,IAAI,GAAG,IAAI,oBAAQ,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC;YACrE,MAAM,OAAO,GAAG,wBAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAC7C,MAAM,mBAAmB,GAAG,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC/D,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;YAClD,MAAM,CAAC,EAAE,CAAC,mBAAmB,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;YAC/C,MAAM,IAAI,GAAG,IAAI,oBAAQ,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC;YACrE,MAAM,OAAO,GAAG,wBAAc,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YAC/C,MAAM,mBAAmB,GAAG,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC/D,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;YAClD,MAAM,CAAC,EAAE,CAAC,mBAAmB,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH;;OAEG;IACH,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;QACpC,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;YAC7C,MAAM,IAAI,GAAG,IAAI,oBAAQ,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC;YACrE,MAAM,OAAO,GAAG,wBAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAC7C,MAAM,mBAAmB,GAAG,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC/D,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;YACjD,MAAM,CAAC,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;YAC1D,MAAM,IAAI,GAAG,IAAI,oBAAQ,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC;YACrE,MAAM,OAAO,GAAG,wBAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9C,MAAM,mBAAmB,GAAG,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC/D,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;YACjD,MAAM,CAAC,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,4BAA4B,EAAE,GAAG,EAAE;QAC1C,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;YAC7C,MAAM,OAAO,GAAG,wBAAc,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YAC/C,MAAM,CAAC,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,mEAAmE,EAAE,GAAG,EAAE;YAC3E,MAAM,OAAO,GAAG,wBAAc,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YAE/C,MAAM,YAAY,GAAG;gBACnB,kCAAkC;gBAClC,kCAAkC;gBAClC,kCAAkC;aACnC,CAAC;YACF,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;gBAC7B,MAAM,mBAAmB,GAAG,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;gBAC1D,MAAM,CAAC,EAAE,CACP,mBAAmB,EACnB,mCAAmC,OAAO,EAAE,CAC7C,CAAC;YACJ,CAAC,CAAC,CAAC;YAEH,MAAM,eAAe,GAAG;gBACtB,kCAAkC;gBAClC,kCAAkC;gBAClC,kCAAkC;aACnC,CAAC;YACF,eAAe,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;gBAChC,MAAM,mBAAmB,GAAG,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;gBAC1D,MAAM,CAAC,EAAE,CACP,CAAC,mBAAmB,EACpB,oCAAoC,OAAO,EAAE,CAC9C,CAAC;YACJ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,QAAQ,CAAC,oCAAoC,EAAE,GAAG,EAAE;QAClD,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;YAC3B,MAAM,CAAC,WAAW,CAChB,4BAAkB,CAAC,kCAAkC,CAAC,eAAe,CAAC,EACtE,EAAE,CACH,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,QAAQ,CAAC,iCAAiC,EAAE,GAAG,EAAE;QAC/C,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE;YACzB,MAAM,CAAC,WAAW,CAChB,4BAAkB,CAAC,+BAA+B,CAAC,eAAe,CAAC,EACnE,CAAC,CACF,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,QAAQ,CAAC,8BAA8B,EAAE,GAAG,EAAE;QAC5C,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE;YAC1B,MAAM,CAAC,WAAW,CAChB,4BAAkB,CAAC,4BAA4B,CAAC,eAAe,CAAC,EAChE,EAAE,CACH,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACvC,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE;YACzB,MAAM,CAAC,WAAW,CAChB,4BAAkB,CAAC,uBAAuB,CAAC,eAAe,CAAC,EAC3D,CAAC,CACF,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport { SpanKind } from '../src';\nimport { TraceParams } from '../src/trace/config/types';\nimport { RootSpan } from '../src/trace/model/root-span';\nimport { CoreTracer } from '../src/trace/model/tracer';\nimport {\n  SamplerBuilder,\n  TraceParamsBuilder,\n} from '../src/trace/sampler/sampler';\n\nconst tracer = new CoreTracer();\n\nconst traceParameters: TraceParams = {\n  numberOfAnnontationEventsPerSpan: 12,\n  numberOfAttributesPerSpan: 10,\n  numberOfLinksPerSpan: 7,\n  numberOfMessageEventsPerSpan: 5,\n};\n\ndescribe('Sampler', () => {\n  const name = 'MySpanName';\n  const kind = SpanKind.SERVER;\n  const traceId = 'd4cda95b652f4a1592b449d5929fda1b';\n  const parentSpanId = '';\n\n  /**\n   * Should return true\n   */\n  describe('shouldSample() always', () => {\n    it('should return a always sampler for 1', () => {\n      const root = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      const sampler = SamplerBuilder.getSampler(1);\n      const samplerShouldSample = sampler.shouldSample(root.traceId);\n      assert.strictEqual(sampler.description, 'always');\n      assert.ok(samplerShouldSample);\n    });\n    it('should return a always sampler for >1', () => {\n      const root = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      const sampler = SamplerBuilder.getSampler(100);\n      const samplerShouldSample = sampler.shouldSample(root.traceId);\n      assert.strictEqual(sampler.description, 'always');\n      assert.ok(samplerShouldSample);\n    });\n  });\n  /**\n   * Should return false\n   */\n  describe('shouldSample() never', () => {\n    it('should return a never sampler for 0', () => {\n      const root = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      const sampler = SamplerBuilder.getSampler(0);\n      const samplerShouldSample = sampler.shouldSample(root.traceId);\n      assert.strictEqual(sampler.description, 'never');\n      assert.ok(!samplerShouldSample);\n    });\n    it('should return a never sampler for negative value', () => {\n      const root = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      const sampler = SamplerBuilder.getSampler(-1);\n      const samplerShouldSample = sampler.shouldSample(root.traceId);\n      assert.strictEqual(sampler.description, 'never');\n      assert.ok(!samplerShouldSample);\n    });\n  });\n\n  describe('shouldSample() probability', () => {\n    it('should return a probability sampler', () => {\n      const sampler = SamplerBuilder.getSampler(0.7);\n      assert.ok(sampler.description.indexOf('probability') >= 0);\n    });\n    it('should accept and reject traces based on last 26 bytes of traceId', () => {\n      const sampler = SamplerBuilder.getSampler(0.5);\n\n      const shouldSample = [\n        '11111111111111111110000000000000',\n        '1111111111111111111000ffffffffff',\n        '11111111111111111117ffffffffffff',\n      ];\n      shouldSample.forEach(traceId => {\n        const samplerShouldSample = sampler.shouldSample(traceId);\n        assert.ok(\n          samplerShouldSample,\n          `should have sampled but didn't: ${traceId}`\n        );\n      });\n\n      const shouldNotSample = [\n        '11111111111111111118000000000000',\n        '11111111111111111118000fffffffff',\n        '1111111111111111111fffffffffffff',\n      ];\n      shouldNotSample.forEach(traceId => {\n        const samplerShouldSample = sampler.shouldSample(traceId);\n        assert.ok(\n          !samplerShouldSample,\n          `should not have sampled but did: ${traceId}`\n        );\n      });\n    });\n  });\n  describe('getNumberOfAnnotationEventsPerSpan', () => {\n    it('should return  12', () => {\n      assert.strictEqual(\n        TraceParamsBuilder.getNumberOfAnnotationEventsPerSpan(traceParameters),\n        12\n      );\n    });\n  });\n  describe('getNumberOfMessageEventsPerSpan', () => {\n    it('should return 5', () => {\n      assert.strictEqual(\n        TraceParamsBuilder.getNumberOfMessageEventsPerSpan(traceParameters),\n        5\n      );\n    });\n  });\n  describe('getNumberOfAttributesPerSpan', () => {\n    it('should return 10', () => {\n      assert.strictEqual(\n        TraceParamsBuilder.getNumberOfAttributesPerSpan(traceParameters),\n        10\n      );\n    });\n  });\n  describe('getNumberOfLinksPerSpan', () => {\n    it('should return 7', () => {\n      assert.strictEqual(\n        TraceParamsBuilder.getNumberOfLinksPerSpan(traceParameters),\n        7\n      );\n    });\n  });\n});\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"a6f65054ddc728056720d96f5ddf7b8d1b4c848e","contentHash":"b2ec228dcb826a10a2564b90c0408d44047c9aa773bcaa4b5efcf52dcdc966b2"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-span.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-span.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":15},"end":{"line":18,"column":32}},"2":{"start":{"line":19,"column":20},"end":{"line":19,"column":59}},"3":{"start":{"line":20,"column":15},"end":{"line":20,"column":49}},"4":{"start":{"line":21,"column":17},"end":{"line":21,"column":53}},"5":{"start":{"line":22,"column":14},"end":{"line":22,"column":49}},"6":{"start":{"line":25,"column":15},"end":{"line":25,"column":40}},"7":{"start":{"line":26,"column":0},"end":{"line":31,"column":2}},"8":{"start":{"line":32,"column":0},"end":{"line":360,"column":3}},"9":{"start":{"line":33,"column":17},"end":{"line":33,"column":29}},"10":{"start":{"line":34,"column":17},"end":{"line":34,"column":38}},"11":{"start":{"line":35,"column":20},"end":{"line":35,"column":54}},"12":{"start":{"line":36,"column":25},"end":{"line":36,"column":27}},"13":{"start":{"line":40,"column":4},"end":{"line":53,"column":7}},"14":{"start":{"line":41,"column":8},"end":{"line":45,"column":11}},"15":{"start":{"line":42,"column":29},"end":{"line":42,"column":96}},"16":{"start":{"line":43,"column":25},"end":{"line":43,"column":58}},"17":{"start":{"line":44,"column":12},"end":{"line":44,"column":51}},"18":{"start":{"line":46,"column":8},"end":{"line":52,"column":11}},"19":{"start":{"line":47,"column":29},"end":{"line":47,"column":96}},"20":{"start":{"line":48,"column":12},"end":{"line":48,"column":29}},"21":{"start":{"line":49,"column":25},"end":{"line":49,"column":58}},"22":{"start":{"line":50,"column":12},"end":{"line":50,"column":25}},"23":{"start":{"line":51,"column":12},"end":{"line":51,"column":80}},"24":{"start":{"line":57,"column":4},"end":{"line":64,"column":7}},"25":{"start":{"line":58,"column":8},"end":{"line":63,"column":11}},"26":{"start":{"line":59,"column":29},"end":{"line":59,"column":96}},"27":{"start":{"line":60,"column":12},"end":{"line":60,"column":29}},"28":{"start":{"line":61,"column":25},"end":{"line":61,"column":58}},"29":{"start":{"line":62,"column":12},"end":{"line":62,"column":63}},"30":{"start":{"line":68,"column":4},"end":{"line":78,"column":7}},"31":{"start":{"line":69,"column":8},"end":{"line":77,"column":11}},"32":{"start":{"line":70,"column":29},"end":{"line":70,"column":96}},"33":{"start":{"line":71,"column":12},"end":{"line":71,"column":29}},"34":{"start":{"line":72,"column":25},"end":{"line":72,"column":58}},"35":{"start":{"line":73,"column":28},"end":{"line":73,"column":44}},"36":{"start":{"line":74,"column":12},"end":{"line":74,"column":66}},"37":{"start":{"line":75,"column":12},"end":{"line":75,"column":56}},"38":{"start":{"line":76,"column":12},"end":{"line":76,"column":51}},"39":{"start":{"line":83,"column":4},"end":{"line":99,"column":7}},"40":{"start":{"line":85,"column":8},"end":{"line":89,"column":11}},"41":{"start":{"line":86,"column":29},"end":{"line":86,"column":96}},"42":{"start":{"line":87,"column":12},"end":{"line":87,"column":29}},"43":{"start":{"line":88,"column":12},"end":{"line":88,"column":53}},"44":{"start":{"line":90,"column":8},"end":{"line":92,"column":11}},"45":{"start":{"line":91,"column":12},"end":{"line":91,"column":38}},"46":{"start":{"line":93,"column":8},"end":{"line":95,"column":11}},"47":{"start":{"line":94,"column":12},"end":{"line":94,"column":36}},"48":{"start":{"line":96,"column":8},"end":{"line":98,"column":11}},"49":{"start":{"line":97,"column":12},"end":{"line":97,"column":49}},"50":{"start":{"line":103,"column":4},"end":{"line":129,"column":7}},"51":{"start":{"line":104,"column":8},"end":{"line":110,"column":11}},"52":{"start":{"line":105,"column":29},"end":{"line":105,"column":96}},"53":{"start":{"line":106,"column":12},"end":{"line":106,"column":29}},"54":{"start":{"line":107,"column":25},"end":{"line":107,"column":58}},"55":{"start":{"line":108,"column":12},"end":{"line":108,"column":25}},"56":{"start":{"line":109,"column":12},"end":{"line":109,"column":36}},"57":{"start":{"line":111,"column":8},"end":{"line":119,"column":11}},"58":{"start":{"line":112,"column":29},"end":{"line":112,"column":86}},"59":{"start":{"line":113,"column":12},"end":{"line":113,"column":29}},"60":{"start":{"line":114,"column":12},"end":{"line":114,"column":65}},"61":{"start":{"line":115,"column":25},"end":{"line":115,"column":58}},"62":{"start":{"line":116,"column":12},"end":{"line":116,"column":25}},"63":{"start":{"line":117,"column":12},"end":{"line":117,"column":65}},"64":{"start":{"line":118,"column":12},"end":{"line":118,"column":36}},"65":{"start":{"line":120,"column":8},"end":{"line":128,"column":11}},"66":{"start":{"line":121,"column":29},"end":{"line":121,"column":102}},"67":{"start":{"line":122,"column":12},"end":{"line":122,"column":29}},"68":{"start":{"line":123,"column":12},"end":{"line":123,"column":65}},"69":{"start":{"line":124,"column":25},"end":{"line":124,"column":58}},"70":{"start":{"line":125,"column":12},"end":{"line":125,"column":25}},"71":{"start":{"line":126,"column":12},"end":{"line":126,"column":65}},"72":{"start":{"line":127,"column":12},"end":{"line":127,"column":36}},"73":{"start":{"line":133,"column":4},"end":{"line":143,"column":7}},"74":{"start":{"line":134,"column":8},"end":{"line":142,"column":11}},"75":{"start":{"line":135,"column":29},"end":{"line":135,"column":96}},"76":{"start":{"line":136,"column":12},"end":{"line":136,"column":29}},"77":{"start":{"line":137,"column":25},"end":{"line":137,"column":58}},"78":{"start":{"line":138,"column":12},"end":{"line":138,"column":25}},"79":{"start":{"line":139,"column":37},"end":{"line":139,"column":51}},"80":{"start":{"line":140,"column":12},"end":{"line":140,"column":25}},"81":{"start":{"line":141,"column":12},"end":{"line":141,"column":65}},"82":{"start":{"line":147,"column":4},"end":{"line":156,"column":7}},"83":{"start":{"line":148,"column":8},"end":{"line":155,"column":11}},"84":{"start":{"line":149,"column":29},"end":{"line":149,"column":96}},"85":{"start":{"line":150,"column":12},"end":{"line":150,"column":29}},"86":{"start":{"line":151,"column":25},"end":{"line":151,"column":58}},"87":{"start":{"line":152,"column":12},"end":{"line":152,"column":25}},"88":{"start":{"line":153,"column":12},"end":{"line":153,"column":23}},"89":{"start":{"line":154,"column":12},"end":{"line":154,"column":34}},"90":{"start":{"line":160,"column":4},"end":{"line":168,"column":7}},"91":{"start":{"line":161,"column":8},"end":{"line":167,"column":11}},"92":{"start":{"line":162,"column":29},"end":{"line":162,"column":96}},"93":{"start":{"line":163,"column":12},"end":{"line":163,"column":29}},"94":{"start":{"line":164,"column":25},"end":{"line":164,"column":58}},"95":{"start":{"line":165,"column":12},"end":{"line":165,"column":23}},"96":{"start":{"line":166,"column":12},"end":{"line":166,"column":35}},"97":{"start":{"line":172,"column":4},"end":{"line":183,"column":7}},"98":{"start":{"line":173,"column":8},"end":{"line":182,"column":11}},"99":{"start":{"line":174,"column":29},"end":{"line":174,"column":96}},"100":{"start":{"line":175,"column":12},"end":{"line":175,"column":29}},"101":{"start":{"line":176,"column":25},"end":{"line":176,"column":58}},"102":{"start":{"line":177,"column":12},"end":{"line":177,"column":25}},"103":{"start":{"line":178,"column":12},"end":{"line":178,"column":23}},"104":{"start":{"line":179,"column":35},"end":{"line":179,"column":47}},"105":{"start":{"line":180,"column":12},"end":{"line":180,"column":23}},"106":{"start":{"line":181,"column":12},"end":{"line":181,"column":81}},"107":{"start":{"line":187,"column":4},"end":{"line":213,"column":7}},"108":{"start":{"line":188,"column":8},"end":{"line":201,"column":11}},"109":{"start":{"line":189,"column":29},"end":{"line":189,"column":96}},"110":{"start":{"line":190,"column":12},"end":{"line":190,"column":29}},"111":{"start":{"line":191,"column":25},"end":{"line":191,"column":58}},"112":{"start":{"line":192,"column":12},"end":{"line":192,"column":25}},"113":{"start":{"line":193,"column":12},"end":{"line":196,"column":15}},"114":{"start":{"line":194,"column":16},"end":{"line":194,"column":78}},"115":{"start":{"line":195,"column":16},"end":{"line":195,"column":96}},"116":{"start":{"line":197,"column":12},"end":{"line":197,"column":56}},"117":{"start":{"line":198,"column":12},"end":{"line":198,"column":75}},"118":{"start":{"line":199,"column":12},"end":{"line":199,"column":50}},"119":{"start":{"line":200,"column":12},"end":{"line":200,"column":68}},"120":{"start":{"line":202,"column":8},"end":{"line":212,"column":11}},"121":{"start":{"line":203,"column":29},"end":{"line":203,"column":96}},"122":{"start":{"line":204,"column":12},"end":{"line":204,"column":29}},"123":{"start":{"line":205,"column":25},"end":{"line":205,"column":58}},"124":{"start":{"line":206,"column":12},"end":{"line":206,"column":25}},"125":{"start":{"line":207,"column":12},"end":{"line":209,"column":13}},"126":{"start":{"line":207,"column":25},"end":{"line":207,"column":26}},"127":{"start":{"line":208,"column":16},"end":{"line":208,"column":51}},"128":{"start":{"line":210,"column":12},"end":{"line":210,"column":72}},"129":{"start":{"line":211,"column":12},"end":{"line":211,"column":63}},"130":{"start":{"line":217,"column":4},"end":{"line":245,"column":7}},"131":{"start":{"line":218,"column":8},"end":{"line":233,"column":11}},"132":{"start":{"line":221,"column":16},"end":{"line":223,"column":44}},"133":{"start":{"line":225,"column":29},"end":{"line":225,"column":96}},"134":{"start":{"line":226,"column":12},"end":{"line":226,"column":29}},"135":{"start":{"line":227,"column":25},"end":{"line":227,"column":58}},"136":{"start":{"line":228,"column":12},"end":{"line":228,"column":25}},"137":{"start":{"line":229,"column":12},"end":{"line":229,"column":67}},"138":{"start":{"line":230,"column":12},"end":{"line":230,"column":51}},"139":{"start":{"line":231,"column":12},"end":{"line":231,"column":64}},"140":{"start":{"line":232,"column":12},"end":{"line":232,"column":65}},"141":{"start":{"line":234,"column":8},"end":{"line":244,"column":11}},"142":{"start":{"line":235,"column":29},"end":{"line":235,"column":96}},"143":{"start":{"line":236,"column":12},"end":{"line":236,"column":29}},"144":{"start":{"line":237,"column":25},"end":{"line":237,"column":58}},"145":{"start":{"line":238,"column":12},"end":{"line":238,"column":25}},"146":{"start":{"line":239,"column":12},"end":{"line":241,"column":13}},"147":{"start":{"line":239,"column":25},"end":{"line":239,"column":26}},"148":{"start":{"line":240,"column":16},"end":{"line":240,"column":71}},"149":{"start":{"line":242,"column":12},"end":{"line":242,"column":60}},"150":{"start":{"line":243,"column":12},"end":{"line":243,"column":64}},"151":{"start":{"line":249,"column":4},"end":{"line":275,"column":7}},"152":{"start":{"line":250,"column":8},"end":{"line":263,"column":11}},"153":{"start":{"line":253,"column":16},"end":{"line":253,"column":85}},"154":{"start":{"line":255,"column":29},"end":{"line":255,"column":96}},"155":{"start":{"line":256,"column":12},"end":{"line":256,"column":29}},"156":{"start":{"line":257,"column":25},"end":{"line":257,"column":58}},"157":{"start":{"line":258,"column":12},"end":{"line":258,"column":25}},"158":{"start":{"line":259,"column":12},"end":{"line":259,"column":87}},"159":{"start":{"line":260,"column":12},"end":{"line":260,"column":45}},"160":{"start":{"line":261,"column":12},"end":{"line":261,"column":58}},"161":{"start":{"line":262,"column":12},"end":{"line":262,"column":53}},"162":{"start":{"line":264,"column":8},"end":{"line":274,"column":11}},"163":{"start":{"line":265,"column":29},"end":{"line":265,"column":96}},"164":{"start":{"line":266,"column":12},"end":{"line":266,"column":29}},"165":{"start":{"line":267,"column":25},"end":{"line":267,"column":58}},"166":{"start":{"line":268,"column":12},"end":{"line":268,"column":25}},"167":{"start":{"line":269,"column":12},"end":{"line":271,"column":13}},"168":{"start":{"line":269,"column":25},"end":{"line":269,"column":26}},"169":{"start":{"line":270,"column":16},"end":{"line":270,"column":91}},"170":{"start":{"line":272,"column":12},"end":{"line":272,"column":54}},"171":{"start":{"line":273,"column":12},"end":{"line":273,"column":58}},"172":{"start":{"line":279,"column":4},"end":{"line":318,"column":7}},"173":{"start":{"line":280,"column":8},"end":{"line":306,"column":11}},"174":{"start":{"line":283,"column":16},"end":{"line":283,"column":58}},"175":{"start":{"line":285,"column":29},"end":{"line":285,"column":96}},"176":{"start":{"line":286,"column":12},"end":{"line":286,"column":29}},"177":{"start":{"line":287,"column":25},"end":{"line":287,"column":58}},"178":{"start":{"line":288,"column":12},"end":{"line":288,"column":25}},"179":{"start":{"line":289,"column":12},"end":{"line":293,"column":38}},"180":{"start":{"line":294,"column":12},"end":{"line":294,"column":53}},"181":{"start":{"line":295,"column":12},"end":{"line":303,"column":15}},"182":{"start":{"line":304,"column":12},"end":{"line":304,"column":66}},"183":{"start":{"line":305,"column":12},"end":{"line":305,"column":61}},"184":{"start":{"line":307,"column":8},"end":{"line":317,"column":11}},"185":{"start":{"line":308,"column":29},"end":{"line":308,"column":96}},"186":{"start":{"line":309,"column":12},"end":{"line":309,"column":29}},"187":{"start":{"line":310,"column":25},"end":{"line":310,"column":58}},"188":{"start":{"line":311,"column":12},"end":{"line":311,"column":25}},"189":{"start":{"line":312,"column":12},"end":{"line":314,"column":13}},"190":{"start":{"line":312,"column":25},"end":{"line":312,"column":26}},"191":{"start":{"line":313,"column":16},"end":{"line":313,"column":76}},"192":{"start":{"line":315,"column":12},"end":{"line":315,"column":62}},"193":{"start":{"line":316,"column":12},"end":{"line":316,"column":66}},"194":{"start":{"line":319,"column":4},"end":{"line":341,"column":7}},"195":{"start":{"line":320,"column":8},"end":{"line":329,"column":11}},"196":{"start":{"line":321,"column":29},"end":{"line":321,"column":96}},"197":{"start":{"line":322,"column":12},"end":{"line":322,"column":29}},"198":{"start":{"line":323,"column":25},"end":{"line":323,"column":58}},"199":{"start":{"line":324,"column":12},"end":{"line":324,"column":25}},"200":{"start":{"line":325,"column":12},"end":{"line":325,"column":56}},"201":{"start":{"line":326,"column":12},"end":{"line":326,"column":67}},"202":{"start":{"line":327,"column":12},"end":{"line":327,"column":52}},"203":{"start":{"line":328,"column":12},"end":{"line":328,"column":63}},"204":{"start":{"line":330,"column":8},"end":{"line":340,"column":11}},"205":{"start":{"line":331,"column":29},"end":{"line":331,"column":96}},"206":{"start":{"line":332,"column":12},"end":{"line":332,"column":29}},"207":{"start":{"line":333,"column":25},"end":{"line":333,"column":58}},"208":{"start":{"line":334,"column":12},"end":{"line":334,"column":25}},"209":{"start":{"line":335,"column":12},"end":{"line":335,"column":86}},"210":{"start":{"line":336,"column":12},"end":{"line":336,"column":56}},"211":{"start":{"line":337,"column":12},"end":{"line":337,"column":67}},"212":{"start":{"line":338,"column":12},"end":{"line":338,"column":52}},"213":{"start":{"line":339,"column":12},"end":{"line":339,"column":72}},"214":{"start":{"line":342,"column":4},"end":{"line":359,"column":7}},"215":{"start":{"line":343,"column":8},"end":{"line":350,"column":11}},"216":{"start":{"line":344,"column":29},"end":{"line":344,"column":110}},"217":{"start":{"line":345,"column":12},"end":{"line":345,"column":29}},"218":{"start":{"line":346,"column":12},"end":{"line":346,"column":66}},"219":{"start":{"line":347,"column":25},"end":{"line":347,"column":58}},"220":{"start":{"line":348,"column":12},"end":{"line":348,"column":63}},"221":{"start":{"line":349,"column":12},"end":{"line":349,"column":62}},"222":{"start":{"line":351,"column":8},"end":{"line":358,"column":11}},"223":{"start":{"line":352,"column":29},"end":{"line":352,"column":96}},"224":{"start":{"line":353,"column":12},"end":{"line":353,"column":29}},"225":{"start":{"line":354,"column":12},"end":{"line":354,"column":63}},"226":{"start":{"line":355,"column":25},"end":{"line":355,"column":58}},"227":{"start":{"line":356,"column":12},"end":{"line":356,"column":63}},"228":{"start":{"line":357,"column":12},"end":{"line":357,"column":59}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":32,"column":17},"end":{"line":32,"column":18}},"loc":{"start":{"line":32,"column":23},"end":{"line":360,"column":1}},"line":32},"1":{"name":"(anonymous_1)","decl":{"start":{"line":40,"column":27},"end":{"line":40,"column":28}},"loc":{"start":{"line":40,"column":33},"end":{"line":53,"column":5}},"line":40},"2":{"name":"(anonymous_2)","decl":{"start":{"line":41,"column":44},"end":{"line":41,"column":45}},"loc":{"start":{"line":41,"column":50},"end":{"line":45,"column":9}},"line":41},"3":{"name":"(anonymous_3)","decl":{"start":{"line":46,"column":56},"end":{"line":46,"column":57}},"loc":{"start":{"line":46,"column":62},"end":{"line":52,"column":9}},"line":46},"4":{"name":"(anonymous_4)","decl":{"start":{"line":57,"column":30},"end":{"line":57,"column":31}},"loc":{"start":{"line":57,"column":36},"end":{"line":64,"column":5}},"line":57},"5":{"name":"(anonymous_5)","decl":{"start":{"line":58,"column":41},"end":{"line":58,"column":42}},"loc":{"start":{"line":58,"column":47},"end":{"line":63,"column":9}},"line":58},"6":{"name":"(anonymous_6)","decl":{"start":{"line":68,"column":32},"end":{"line":68,"column":33}},"loc":{"start":{"line":68,"column":38},"end":{"line":78,"column":5}},"line":68},"7":{"name":"(anonymous_7)","decl":{"start":{"line":69,"column":46},"end":{"line":69,"column":47}},"loc":{"start":{"line":69,"column":52},"end":{"line":77,"column":9}},"line":69},"8":{"name":"(anonymous_8)","decl":{"start":{"line":83,"column":51},"end":{"line":83,"column":52}},"loc":{"start":{"line":83,"column":57},"end":{"line":99,"column":5}},"line":83},"9":{"name":"(anonymous_9)","decl":{"start":{"line":85,"column":15},"end":{"line":85,"column":16}},"loc":{"start":{"line":85,"column":21},"end":{"line":89,"column":9}},"line":85},"10":{"name":"(anonymous_10)","decl":{"start":{"line":90,"column":37},"end":{"line":90,"column":38}},"loc":{"start":{"line":90,"column":43},"end":{"line":92,"column":9}},"line":90},"11":{"name":"(anonymous_11)","decl":{"start":{"line":93,"column":35},"end":{"line":93,"column":36}},"loc":{"start":{"line":93,"column":41},"end":{"line":95,"column":9}},"line":93},"12":{"name":"(anonymous_12)","decl":{"start":{"line":96,"column":45},"end":{"line":96,"column":46}},"loc":{"start":{"line":96,"column":51},"end":{"line":98,"column":9}},"line":96},"13":{"name":"(anonymous_13)","decl":{"start":{"line":103,"column":24},"end":{"line":103,"column":25}},"loc":{"start":{"line":103,"column":30},"end":{"line":129,"column":5}},"line":103},"14":{"name":"(anonymous_14)","decl":{"start":{"line":104,"column":43},"end":{"line":104,"column":44}},"loc":{"start":{"line":104,"column":49},"end":{"line":110,"column":9}},"line":104},"15":{"name":"(anonymous_15)","decl":{"start":{"line":111,"column":89},"end":{"line":111,"column":90}},"loc":{"start":{"line":111,"column":95},"end":{"line":119,"column":9}},"line":111},"16":{"name":"(anonymous_16)","decl":{"start":{"line":120,"column":93},"end":{"line":120,"column":94}},"loc":{"start":{"line":120,"column":99},"end":{"line":128,"column":9}},"line":120},"17":{"name":"(anonymous_17)","decl":{"start":{"line":133,"column":48},"end":{"line":133,"column":49}},"loc":{"start":{"line":133,"column":54},"end":{"line":143,"column":5}},"line":133},"18":{"name":"(anonymous_18)","decl":{"start":{"line":134,"column":54},"end":{"line":134,"column":55}},"loc":{"start":{"line":134,"column":60},"end":{"line":142,"column":9}},"line":134},"19":{"name":"(anonymous_19)","decl":{"start":{"line":147,"column":22},"end":{"line":147,"column":23}},"loc":{"start":{"line":147,"column":28},"end":{"line":156,"column":5}},"line":147},"20":{"name":"(anonymous_20)","decl":{"start":{"line":148,"column":41},"end":{"line":148,"column":42}},"loc":{"start":{"line":148,"column":47},"end":{"line":155,"column":9}},"line":148},"21":{"name":"(anonymous_21)","decl":{"start":{"line":160,"column":37},"end":{"line":160,"column":38}},"loc":{"start":{"line":160,"column":43},"end":{"line":168,"column":5}},"line":160},"22":{"name":"(anonymous_22)","decl":{"start":{"line":161,"column":45},"end":{"line":161,"column":46}},"loc":{"start":{"line":161,"column":51},"end":{"line":167,"column":9}},"line":161},"23":{"name":"(anonymous_23)","decl":{"start":{"line":172,"column":44},"end":{"line":172,"column":45}},"loc":{"start":{"line":172,"column":50},"end":{"line":183,"column":5}},"line":172},"24":{"name":"(anonymous_24)","decl":{"start":{"line":173,"column":44},"end":{"line":173,"column":45}},"loc":{"start":{"line":173,"column":50},"end":{"line":182,"column":9}},"line":173},"25":{"name":"(anonymous_25)","decl":{"start":{"line":187,"column":30},"end":{"line":187,"column":31}},"loc":{"start":{"line":187,"column":36},"end":{"line":213,"column":5}},"line":187},"26":{"name":"(anonymous_26)","decl":{"start":{"line":188,"column":38},"end":{"line":188,"column":39}},"loc":{"start":{"line":188,"column":44},"end":{"line":201,"column":9}},"line":188},"27":{"name":"(anonymous_27)","decl":{"start":{"line":193,"column":48},"end":{"line":193,"column":49}},"loc":{"start":{"line":193,"column":59},"end":{"line":196,"column":13}},"line":193},"28":{"name":"(anonymous_28)","decl":{"start":{"line":202,"column":43},"end":{"line":202,"column":44}},"loc":{"start":{"line":202,"column":49},"end":{"line":212,"column":9}},"line":202},"29":{"name":"(anonymous_29)","decl":{"start":{"line":217,"column":32},"end":{"line":217,"column":33}},"loc":{"start":{"line":217,"column":38},"end":{"line":245,"column":5}},"line":217},"30":{"name":"(anonymous_30)","decl":{"start":{"line":218,"column":39},"end":{"line":218,"column":40}},"loc":{"start":{"line":218,"column":45},"end":{"line":233,"column":9}},"line":218},"31":{"name":"instanceOfAnnotation","decl":{"start":{"line":220,"column":21},"end":{"line":220,"column":41}},"loc":{"start":{"line":220,"column":50},"end":{"line":224,"column":13}},"line":220},"32":{"name":"(anonymous_32)","decl":{"start":{"line":234,"column":44},"end":{"line":234,"column":45}},"loc":{"start":{"line":234,"column":50},"end":{"line":244,"column":9}},"line":234},"33":{"name":"(anonymous_33)","decl":{"start":{"line":249,"column":26},"end":{"line":249,"column":27}},"loc":{"start":{"line":249,"column":32},"end":{"line":275,"column":5}},"line":249},"34":{"name":"(anonymous_34)","decl":{"start":{"line":250,"column":32},"end":{"line":250,"column":33}},"loc":{"start":{"line":250,"column":38},"end":{"line":263,"column":9}},"line":250},"35":{"name":"instanceOfLink","decl":{"start":{"line":252,"column":21},"end":{"line":252,"column":35}},"loc":{"start":{"line":252,"column":44},"end":{"line":254,"column":13}},"line":252},"36":{"name":"(anonymous_36)","decl":{"start":{"line":264,"column":38},"end":{"line":264,"column":39}},"loc":{"start":{"line":264,"column":44},"end":{"line":274,"column":9}},"line":264},"37":{"name":"(anonymous_37)","decl":{"start":{"line":279,"column":34},"end":{"line":279,"column":35}},"loc":{"start":{"line":279,"column":40},"end":{"line":318,"column":5}},"line":279},"38":{"name":"(anonymous_38)","decl":{"start":{"line":280,"column":41},"end":{"line":280,"column":42}},"loc":{"start":{"line":280,"column":47},"end":{"line":306,"column":9}},"line":280},"39":{"name":"instanceOfLink","decl":{"start":{"line":282,"column":21},"end":{"line":282,"column":35}},"loc":{"start":{"line":282,"column":44},"end":{"line":284,"column":13}},"line":282},"40":{"name":"(anonymous_40)","decl":{"start":{"line":307,"column":47},"end":{"line":307,"column":48}},"loc":{"start":{"line":307,"column":53},"end":{"line":317,"column":9}},"line":307},"41":{"name":"(anonymous_41)","decl":{"start":{"line":319,"column":28},"end":{"line":319,"column":29}},"loc":{"start":{"line":319,"column":34},"end":{"line":341,"column":5}},"line":319},"42":{"name":"(anonymous_42)","decl":{"start":{"line":320,"column":43},"end":{"line":320,"column":44}},"loc":{"start":{"line":320,"column":49},"end":{"line":329,"column":9}},"line":320},"43":{"name":"(anonymous_43)","decl":{"start":{"line":330,"column":41},"end":{"line":330,"column":42}},"loc":{"start":{"line":330,"column":47},"end":{"line":340,"column":9}},"line":330},"44":{"name":"(anonymous_44)","decl":{"start":{"line":342,"column":33},"end":{"line":342,"column":34}},"loc":{"start":{"line":342,"column":39},"end":{"line":359,"column":5}},"line":342},"45":{"name":"(anonymous_45)","decl":{"start":{"line":343,"column":43},"end":{"line":343,"column":44}},"loc":{"start":{"line":343,"column":49},"end":{"line":350,"column":9}},"line":343},"46":{"name":"(anonymous_46)","decl":{"start":{"line":351,"column":60},"end":{"line":351,"column":61}},"loc":{"start":{"line":351,"column":66},"end":{"line":358,"column":9}},"line":351}},"branchMap":{"0":{"loc":{"start":{"line":221,"column":24},"end":{"line":223,"column":42}},"type":"binary-expr","locations":[{"start":{"line":221,"column":24},"end":{"line":221,"column":47}},{"start":{"line":222,"column":20},"end":{"line":222,"column":41}},{"start":{"line":223,"column":20},"end":{"line":223,"column":42}}],"line":221},"1":{"loc":{"start":{"line":253,"column":23},"end":{"line":253,"column":84}},"type":"binary-expr","locations":[{"start":{"line":253,"column":23},"end":{"line":253,"column":42}},{"start":{"line":253,"column":46},"end":{"line":253,"column":64}},{"start":{"line":253,"column":68},"end":{"line":253,"column":84}}],"line":253},"2":{"loc":{"start":{"line":283,"column":23},"end":{"line":283,"column":57}},"type":"binary-expr","locations":[{"start":{"line":283,"column":23},"end":{"line":283,"column":39}},{"start":{"line":283,"column":43},"end":{"line":283,"column":57}}],"line":283}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"71":1,"72":1,"73":1,"74":1,"75":1,"76":1,"77":1,"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1,"86":1,"87":1,"88":1,"89":1,"90":1,"91":1,"92":1,"93":1,"94":1,"95":1,"96":1,"97":1,"98":1,"99":1,"100":1,"101":1,"102":1,"103":1,"104":1,"105":1,"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"112":1,"113":1,"114":3,"115":3,"116":1,"117":1,"118":1,"119":1,"120":1,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":40,"128":1,"129":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"136":1,"137":1,"138":1,"139":1,"140":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":40,"149":1,"150":1,"151":1,"152":1,"153":1,"154":1,"155":1,"156":1,"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":35,"170":1,"171":1,"172":1,"173":1,"174":1,"175":1,"176":1,"177":1,"178":1,"179":1,"180":1,"181":1,"182":1,"183":1,"184":1,"185":1,"186":1,"187":1,"188":1,"189":1,"190":1,"191":35,"192":1,"193":1,"194":1,"195":1,"196":1,"197":1,"198":1,"199":1,"200":1,"201":1,"202":1,"203":1,"204":1,"205":1,"206":1,"207":1,"208":1,"209":1,"210":1,"211":1,"212":1,"213":1,"214":1,"215":1,"216":1,"217":1,"218":1,"219":1,"220":1,"221":1,"222":1,"223":1,"224":1,"225":1,"226":1,"227":1,"228":1},"f":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":3,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1},"b":{"0":[1,1,1],"1":[1,1,1],"2":[1,1]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-span.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-span.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport { RootSpan } from '../src/trace/model/root-span';\nimport { Span } from '../src/trace/model/span';\nimport { CoreTracer } from '../src/trace/model/tracer';\nimport * as types from '../src/trace/model/types';\nimport { Annotation, Link } from '../src/trace/model/types';\n\n// TODO: we should evaluate a way to merge similar test cases between span and\n// rootspan\n\nconst tracer = new CoreTracer();\ntracer.activeTraceParams = {\n  numberOfAttributesPerSpan: 32,\n  numberOfLinksPerSpan: 32,\n  numberOfAnnontationEventsPerSpan: 32,\n  numberOfMessageEventsPerSpan: 32,\n};\n\ndescribe('Span', () => {\n  const name = 'MySpanName';\n  const kind = types.SpanKind.SERVER;\n  const traceId = 'd4cda95b652f4a1592b449d5929fda1b';\n  const parentSpanId = '';\n\n  /**\n   * Should create a span\n   */\n  describe('new Span()', () => {\n    it('should create a Span instance', () => {\n      const rootSpan = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      const span = new Span(tracer, rootSpan);\n      assert.ok(span instanceof Span);\n    });\n\n    it('should use relative clock for child spans', () => {\n      const rootSpan = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      rootSpan.start();\n      const span = new Span(tracer, rootSpan);\n      span.start();\n      assert.ok(rootSpan.startTime.getTime() <= span.startTime.getTime());\n    });\n  });\n\n  /**\n   * Should return the Trace ID\n   */\n  describe('get traceId()', () => {\n    it('should return the trace id', () => {\n      const rootSpan = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      rootSpan.start();\n      const span = new Span(tracer, rootSpan);\n      assert.strictEqual(span.traceId, rootSpan.traceId);\n    });\n  });\n\n  /**\n   * Should the span context of span\n   */\n  describe('get spanContext', () => {\n    it('should the span context of span', () => {\n      const rootSpan = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      rootSpan.start();\n\n      const span = new Span(tracer, rootSpan);\n      const context = span.spanContext;\n\n      assert.strictEqual(context.traceId, rootSpan.traceId);\n      assert.strictEqual(context.spanId, span.id);\n      assert.strictEqual(context.options, 1);\n    });\n  });\n\n  /**\n   * startTime, endTime and durantion proprieties called before start() - no\n   * clock instance created\n   */\n  describe('get time properties before start()', () => {\n    let span: types.Span;\n    before(() => {\n      const rootSpan = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      rootSpan.start();\n      span = new Span(tracer, rootSpan);\n    });\n    it('should get startTime()', () => {\n      assert.ok(span.startTime);\n    });\n    it('should get endTime()', () => {\n      assert.ok(span.endTime);\n    });\n    it('should get duration() return 0', () => {\n      assert.strictEqual(span.duration, 0);\n    });\n  });\n\n  /**\n   * Should start a span instance\n   */\n  describe('start()', () => {\n    it('should start a span instance', () => {\n      const rootSpan = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      rootSpan.start();\n\n      const span = new Span(tracer, rootSpan);\n      span.start();\n\n      assert.ok(span.started);\n    });\n\n    it('should start a RootSpan and set CurrentRootSpan when parentSpanId is empty', () => {\n      const rootSpan = new RootSpan(tracer, name, kind, traceId, '');\n      rootSpan.start();\n      assert.strictEqual(tracer.currentRootSpan, rootSpan);\n\n      const span = new Span(tracer, rootSpan);\n      span.start();\n      assert.strictEqual(tracer.currentRootSpan, rootSpan);\n\n      assert.ok(span.started);\n    });\n\n    it('should start a RootSpan and set CurrentRootSpan when parentSpanId is not empty', () => {\n      const rootSpan = new RootSpan(\n        tracer,\n        name,\n        kind,\n        traceId,\n        'd5955a12632d46a1'\n      );\n      rootSpan.start();\n      assert.strictEqual(tracer.currentRootSpan, rootSpan);\n\n      const span = new Span(tracer, rootSpan);\n      span.start();\n      assert.strictEqual(tracer.currentRootSpan, rootSpan);\n\n      assert.ok(span.started);\n    });\n  });\n\n  /**\n   * Should not change the initial startTime\n   */\n  describe('start() an already started span', () => {\n    it('should not change the initial startTime', () => {\n      const rootSpan = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      rootSpan.start();\n      const span = new Span(tracer, rootSpan);\n      span.start();\n      const initialStartTime = span.startTime;\n      span.start();\n\n      assert.strictEqual(span.startTime, initialStartTime);\n    });\n  });\n\n  /**\n   * Should end a span instance\n   */\n  describe('end()', () => {\n    it('should end a span instance', () => {\n      const rootSpan = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      rootSpan.start();\n\n      const span = new Span(tracer, rootSpan);\n      span.start();\n      span.end();\n\n      assert.ok(span.ended);\n    });\n  });\n\n  /**\n   * Should not end a span instance\n   */\n  describe('end() before start()', () => {\n    it('should not end a span instance', () => {\n      const rootSpan = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      rootSpan.start();\n\n      const span = new Span(tracer, rootSpan);\n      span.end();\n\n      assert.ok(!span.ended);\n    });\n  });\n\n  /**\n   * Should not change the endTime\n   */\n  describe('end() an already ended span', () => {\n    it('should not change the endTime', () => {\n      const rootSpan = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      rootSpan.start();\n      const span = new Span(tracer, rootSpan);\n      span.start();\n      span.end();\n      const initialEndTime = span.endTime;\n      span.end();\n\n      assert.strictEqual(span.endTime!.getTime(), initialEndTime!.getTime());\n    });\n  });\n\n  /**\n   * Should add an attrinbutes\n   */\n  describe('addAtribute()', () => {\n    it('should add an attribute', () => {\n      const rootSpan = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      rootSpan.start();\n\n      const span = new Span(tracer, rootSpan);\n      span.start();\n\n      ['String', 'Number', 'Boolean'].map(attType => {\n        span.addAttribute('testKey' + attType, 'testValue' + attType);\n        assert.strictEqual(\n          span.attributes['testKey' + attType],\n          'testValue' + attType\n        );\n      });\n      span.addAttribute('object', { foo: 'bar' });\n      assert.strictEqual(span.attributes['object'], '{\"foo\":\"bar\"}');\n      span.addAttribute('array', [1, 2, 3]);\n      assert.strictEqual(span.attributes['array'], '[1,2,3]');\n    });\n\n    it('should drop extra attributes', () => {\n      const rootSpan = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      rootSpan.start();\n\n      const span = new Span(tracer, rootSpan);\n      span.start();\n      for (let i = 0; i < 40; i++) {\n        span.addAttribute('attr' + i, 100);\n      }\n\n      assert.strictEqual(Object.keys(span.attributes).length, 32);\n      assert.strictEqual(span.droppedAttributesCount, 8);\n    });\n  });\n\n  /**\n   * Should add an annotation\n   */\n  describe('addAnnotation()', () => {\n    it('should add an annotation', () => {\n      // tslint:disable:no-any\n      function instanceOfAnnotation(object: any): object is Annotation {\n        return (\n          'description' in object &&\n          'timestamp' in object &&\n          'attributes' in object\n        );\n      }\n\n      const rootSpan = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      rootSpan.start();\n\n      const span = new Span(tracer, rootSpan);\n      span.start();\n\n      span.addAnnotation('description test', {}, Date.now());\n\n      assert.ok(span.annotations.length > 0);\n      assert.strictEqual(span.droppedAnnotationsCount, 0);\n      assert.ok(instanceOfAnnotation(span.annotations[0]));\n    });\n\n    it('should drop extra annotations', () => {\n      const rootSpan = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      rootSpan.start();\n\n      const span = new Span(tracer, rootSpan);\n      span.start();\n      for (let i = 0; i < 40; i++) {\n        span.addAnnotation('description test', {}, Date.now());\n      }\n\n      assert.strictEqual(span.annotations.length, 32);\n      assert.strictEqual(span.droppedAnnotationsCount, 8);\n    });\n  });\n\n  /**\n   * Should add a Link.\n   */\n  describe('addLink()', () => {\n    it('should add a Link', () => {\n      // tslint:disable:no-any\n      function instanceOfLink(object: any): object is Link {\n        return 'traceId' in object && 'spanId' in object && 'type' in object;\n      }\n\n      const rootSpan = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      rootSpan.start();\n\n      const span = new Span(tracer, rootSpan);\n      span.start();\n\n      span.addLink(\n        span.traceId,\n        rootSpan.id,\n        types.LinkType.PARENT_LINKED_SPAN\n      );\n\n      assert.ok(span.links.length > 0);\n      assert.strictEqual(span.droppedLinksCount, 0);\n      assert.ok(instanceOfLink(span.links[0]));\n    });\n\n    it('should drop extra links', () => {\n      const rootSpan = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      rootSpan.start();\n      const span = new Span(tracer, rootSpan);\n      span.start();\n\n      for (let i = 0; i < 35; i++) {\n        span.addLink(\n          span.traceId,\n          rootSpan.id,\n          types.LinkType.PARENT_LINKED_SPAN\n        );\n      }\n\n      assert.strictEqual(span.links.length, 32);\n      assert.strictEqual(span.droppedLinksCount, 3);\n    });\n  });\n\n  /**\n   * Should add a Message Event.\n   */\n  describe('addMessageEvent()', () => {\n    it('should add a Message Event', () => {\n      // tslint:disable:no-any\n      function instanceOfLink(object: any): object is Link {\n        return 'type' in object && 'id' in object;\n      }\n\n      const rootSpan = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      rootSpan.start();\n\n      const span = new Span(tracer, rootSpan);\n      span.start();\n\n      span.addMessageEvent(\n        types.MessageEventType.UNSPECIFIED,\n        /* id */ 1,\n        /* timestamp */ 1550000000000,\n        /* uncompressedSize */ 55,\n        /** compressedSize */ 40\n      );\n\n      assert.ok(span.messageEvents.length > 0);\n      assert.deepStrictEqual(span.messageEvents, [\n        {\n          type: types.MessageEventType.UNSPECIFIED,\n          id: 1,\n          timestamp: 1550000000000,\n          uncompressedSize: 55,\n          compressedSize: 40,\n        },\n      ]);\n      assert.strictEqual(span.droppedMessageEventsCount, 0);\n      assert.ok(instanceOfLink(span.messageEvents[0]));\n    });\n\n    it('should drop extra  Message Event', () => {\n      const rootSpan = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      rootSpan.start();\n\n      const span = new Span(tracer, rootSpan);\n      span.start();\n      for (let i = 0; i < 35; i++) {\n        span.addMessageEvent(types.MessageEventType.UNSPECIFIED, 1);\n      }\n\n      assert.strictEqual(span.messageEvents.length, 32);\n      assert.strictEqual(span.droppedMessageEventsCount, 3);\n    });\n  });\n\n  describe('setStatus()', () => {\n    it('should return default status', () => {\n      const rootSpan = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      rootSpan.start();\n\n      const span = new Span(tracer, rootSpan);\n      span.start();\n\n      assert.strictEqual(rootSpan.status.code, 0);\n      assert.strictEqual(rootSpan.status.message, undefined);\n      assert.strictEqual(span.status.code, 0);\n      assert.strictEqual(span.status.message, undefined);\n    });\n\n    it('should set an error status', () => {\n      const rootSpan = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      rootSpan.start();\n      const span = new Span(tracer, rootSpan);\n      span.start();\n      span.setStatus(types.CanonicalCode.PERMISSION_DENIED, 'This is an error');\n\n      assert.strictEqual(rootSpan.status.code, 0);\n      assert.strictEqual(rootSpan.status.message, undefined);\n      assert.strictEqual(span.status.code, 7);\n      assert.strictEqual(span.status.message, 'This is an error');\n    });\n  });\n\n  describe('get traceState()', () => {\n    it('should return the traceState', () => {\n      const rootSpan = new RootSpan(\n        tracer,\n        name,\n        kind,\n        traceId,\n        parentSpanId,\n        'traceState'\n      );\n      rootSpan.start();\n      assert.strictEqual(rootSpan.traceState, 'traceState');\n\n      const span = new Span(tracer, rootSpan);\n      assert.strictEqual(span.traceId, rootSpan.traceId);\n      assert.strictEqual(span.traceState, 'traceState');\n    });\n\n    it('should handle optional / undefined traceState', () => {\n      const rootSpan = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      rootSpan.start();\n      assert.strictEqual(rootSpan.traceState, undefined);\n\n      const span = new Span(tracer, rootSpan);\n      assert.strictEqual(span.traceId, rootSpan.traceId);\n      assert.strictEqual(span.traceState, undefined);\n    });\n  });\n});\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"1de73240a7e816dedf203bd7bc59d8c19d621aa1","contentHash":"217170f4bade6a89bba62b8bbfc71d84975316fc41e4e126c260302cacbc125f"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-stats.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-stats.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":15},"end":{"line":18,"column":32}},"2":{"start":{"line":19,"column":14},"end":{"line":19,"column":31}},"3":{"start":{"line":20,"column":16},"end":{"line":20,"column":45}},"4":{"start":{"line":21,"column":15},"end":{"line":21,"column":44}},"5":{"start":{"line":24,"column":8},"end":{"line":24,"column":34}},"6":{"start":{"line":25,"column":8},"end":{"line":25,"column":39}},"7":{"start":{"line":28,"column":8},"end":{"line":28,"column":40}},"8":{"start":{"line":31,"column":8},"end":{"line":31,"column":52}},"9":{"start":{"line":38,"column":8},"end":{"line":38,"column":34}},"10":{"start":{"line":39,"column":8},"end":{"line":39,"column":39}},"11":{"start":{"line":42,"column":0},"end":{"line":229,"column":3}},"12":{"start":{"line":43,"column":4},"end":{"line":45,"column":7}},"13":{"start":{"line":44,"column":8},"end":{"line":44,"column":34}},"14":{"start":{"line":46,"column":21},"end":{"line":46,"column":35}},"15":{"start":{"line":47,"column":20},"end":{"line":47,"column":64}},"16":{"start":{"line":48,"column":22},"end":{"line":48,"column":72}},"17":{"start":{"line":49,"column":19},"end":{"line":49,"column":37}},"18":{"start":{"line":50,"column":4},"end":{"line":50,"column":41}},"19":{"start":{"line":51,"column":4},"end":{"line":51,"column":41}},"20":{"start":{"line":52,"column":24},"end":{"line":52,"column":43}},"21":{"start":{"line":53,"column":24},"end":{"line":53,"column":48}},"22":{"start":{"line":54,"column":24},"end":{"line":54,"column":42}},"23":{"start":{"line":55,"column":4},"end":{"line":63,"column":7}},"24":{"start":{"line":56,"column":8},"end":{"line":62,"column":11}},"25":{"start":{"line":57,"column":34},"end":{"line":57,"column":110}},"26":{"start":{"line":58,"column":12},"end":{"line":58,"column":79}},"27":{"start":{"line":59,"column":12},"end":{"line":59,"column":64}},"28":{"start":{"line":60,"column":12},"end":{"line":60,"column":64}},"29":{"start":{"line":61,"column":12},"end":{"line":61,"column":71}},"30":{"start":{"line":64,"column":4},"end":{"line":72,"column":7}},"31":{"start":{"line":65,"column":8},"end":{"line":71,"column":11}},"32":{"start":{"line":66,"column":34},"end":{"line":66,"column":109}},"33":{"start":{"line":67,"column":12},"end":{"line":67,"column":78}},"34":{"start":{"line":68,"column":12},"end":{"line":68,"column":64}},"35":{"start":{"line":69,"column":12},"end":{"line":69,"column":64}},"36":{"start":{"line":70,"column":12},"end":{"line":70,"column":71}},"37":{"start":{"line":73,"column":4},"end":{"line":104,"column":7}},"38":{"start":{"line":74,"column":33},"end":{"line":79,"column":9}},"39":{"start":{"line":81,"column":8},"end":{"line":83,"column":11}},"40":{"start":{"line":82,"column":12},"end":{"line":82,"column":85}},"41":{"start":{"line":84,"column":8},"end":{"line":86,"column":11}},"42":{"start":{"line":85,"column":12},"end":{"line":85,"column":38}},"43":{"start":{"line":87,"column":8},"end":{"line":99,"column":9}},"44":{"start":{"line":88,"column":12},"end":{"line":98,"column":15}},"45":{"start":{"line":89,"column":41},"end":{"line":89,"column":94}},"46":{"start":{"line":90,"column":29},"end":{"line":90,"column":133}},"47":{"start":{"line":91,"column":16},"end":{"line":91,"column":53}},"48":{"start":{"line":92,"column":16},"end":{"line":92,"column":56}},"49":{"start":{"line":93,"column":16},"end":{"line":93,"column":58}},"50":{"start":{"line":94,"column":16},"end":{"line":94,"column":66}},"51":{"start":{"line":95,"column":16},"end":{"line":95,"column":62}},"52":{"start":{"line":96,"column":16},"end":{"line":96,"column":70}},"53":{"start":{"line":97,"column":16},"end":{"line":97,"column":43}},"54":{"start":{"line":100,"column":8},"end":{"line":103,"column":11}},"55":{"start":{"line":102,"column":12},"end":{"line":102,"column":89}},"56":{"start":{"line":105,"column":4},"end":{"line":122,"column":7}},"57":{"start":{"line":107,"column":29},"end":{"line":107,"column":47}},"58":{"start":{"line":108,"column":8},"end":{"line":111,"column":11}},"59":{"start":{"line":109,"column":12},"end":{"line":109,"column":33}},"60":{"start":{"line":110,"column":12},"end":{"line":110,"column":85}},"61":{"start":{"line":112,"column":8},"end":{"line":121,"column":11}},"62":{"start":{"line":113,"column":12},"end":{"line":113,"column":61}},"63":{"start":{"line":114,"column":25},"end":{"line":114,"column":120}},"64":{"start":{"line":115,"column":12},"end":{"line":115,"column":40}},"65":{"start":{"line":116,"column":12},"end":{"line":116,"column":71}},"66":{"start":{"line":117,"column":12},"end":{"line":117,"column":49}},"67":{"start":{"line":118,"column":12},"end":{"line":118,"column":39}},"68":{"start":{"line":119,"column":12},"end":{"line":119,"column":71}},"69":{"start":{"line":120,"column":12},"end":{"line":120,"column":74}},"70":{"start":{"line":123,"column":4},"end":{"line":133,"column":7}},"71":{"start":{"line":124,"column":29},"end":{"line":124,"column":47}},"72":{"start":{"line":125,"column":8},"end":{"line":132,"column":11}},"73":{"start":{"line":126,"column":12},"end":{"line":126,"column":61}},"74":{"start":{"line":127,"column":28},"end":{"line":127,"column":90}},"75":{"start":{"line":128,"column":25},"end":{"line":128,"column":120}},"76":{"start":{"line":129,"column":12},"end":{"line":129,"column":63}},"77":{"start":{"line":130,"column":12},"end":{"line":130,"column":49}},"78":{"start":{"line":131,"column":12},"end":{"line":131,"column":71}},"79":{"start":{"line":134,"column":4},"end":{"line":228,"column":7}},"80":{"start":{"line":136,"column":29},"end":{"line":136,"column":47}},"81":{"start":{"line":138,"column":8},"end":{"line":140,"column":11}},"82":{"start":{"line":139,"column":12},"end":{"line":139,"column":85}},"83":{"start":{"line":141,"column":8},"end":{"line":146,"column":11}},"84":{"start":{"line":142,"column":12},"end":{"line":142,"column":33}},"85":{"start":{"line":143,"column":12},"end":{"line":143,"column":61}},"86":{"start":{"line":144,"column":25},"end":{"line":144,"column":130}},"87":{"start":{"line":145,"column":12},"end":{"line":145,"column":49}},"88":{"start":{"line":147,"column":8},"end":{"line":149,"column":11}},"89":{"start":{"line":148,"column":12},"end":{"line":148,"column":38}},"90":{"start":{"line":150,"column":8},"end":{"line":158,"column":11}},"91":{"start":{"line":151,"column":32},"end":{"line":151,"column":53}},"92":{"start":{"line":152,"column":12},"end":{"line":152,"column":76}},"93":{"start":{"line":153,"column":12},"end":{"line":153,"column":60}},"94":{"start":{"line":154,"column":12},"end":{"line":154,"column":76}},"95":{"start":{"line":155,"column":12},"end":{"line":155,"column":86}},"96":{"start":{"line":156,"column":12},"end":{"line":156,"column":85}},"97":{"start":{"line":157,"column":12},"end":{"line":157,"column":73}},"98":{"start":{"line":159,"column":8},"end":{"line":164,"column":11}},"99":{"start":{"line":160,"column":12},"end":{"line":160,"column":61}},"100":{"start":{"line":161,"column":32},"end":{"line":161,"column":54}},"101":{"start":{"line":162,"column":12},"end":{"line":162,"column":60}},"102":{"start":{"line":163,"column":12},"end":{"line":163,"column":76}},"103":{"start":{"line":165,"column":8},"end":{"line":170,"column":11}},"104":{"start":{"line":166,"column":12},"end":{"line":166,"column":61}},"105":{"start":{"line":167,"column":32},"end":{"line":167,"column":54}},"106":{"start":{"line":168,"column":12},"end":{"line":168,"column":52}},"107":{"start":{"line":169,"column":12},"end":{"line":169,"column":76}},"108":{"start":{"line":171,"column":8},"end":{"line":181,"column":11}},"109":{"start":{"line":172,"column":33},"end":{"line":172,"column":54}},"110":{"start":{"line":173,"column":33},"end":{"line":173,"column":54}},"111":{"start":{"line":174,"column":12},"end":{"line":174,"column":76}},"112":{"start":{"line":175,"column":12},"end":{"line":175,"column":75}},"113":{"start":{"line":176,"column":12},"end":{"line":176,"column":76}},"114":{"start":{"line":177,"column":12},"end":{"line":177,"column":87}},"115":{"start":{"line":178,"column":12},"end":{"line":178,"column":87}},"116":{"start":{"line":179,"column":12},"end":{"line":179,"column":85}},"117":{"start":{"line":180,"column":12},"end":{"line":180,"column":74}},"118":{"start":{"line":182,"column":8},"end":{"line":190,"column":11}},"119":{"start":{"line":183,"column":32},"end":{"line":187,"column":13}},"120":{"start":{"line":188,"column":12},"end":{"line":188,"column":58}},"121":{"start":{"line":189,"column":12},"end":{"line":189,"column":76}},"122":{"start":{"line":191,"column":8},"end":{"line":210,"column":11}},"123":{"start":{"line":192,"column":25},"end":{"line":192,"column":43}},"124":{"start":{"line":193,"column":12},"end":{"line":193,"column":54}},"125":{"start":{"line":194,"column":12},"end":{"line":194,"column":54}},"126":{"start":{"line":195,"column":32},"end":{"line":195,"column":53}},"127":{"start":{"line":196,"column":12},"end":{"line":198,"column":15}},"128":{"start":{"line":197,"column":16},"end":{"line":197,"column":56}},"129":{"start":{"line":199,"column":12},"end":{"line":199,"column":76}},"130":{"start":{"line":200,"column":12},"end":{"line":200,"column":86}},"131":{"start":{"line":201,"column":12},"end":{"line":204,"column":15}},"132":{"start":{"line":205,"column":12},"end":{"line":205,"column":73}},"133":{"start":{"line":206,"column":12},"end":{"line":209,"column":15}},"134":{"start":{"line":211,"column":8},"end":{"line":227,"column":11}},"135":{"start":{"line":212,"column":38},"end":{"line":212,"column":42}},"136":{"start":{"line":213,"column":12},"end":{"line":213,"column":61}},"137":{"start":{"line":214,"column":32},"end":{"line":214,"column":56}},"138":{"start":{"line":215,"column":12},"end":{"line":217,"column":15}},"139":{"start":{"line":216,"column":16},"end":{"line":216,"column":56}},"140":{"start":{"line":218,"column":12},"end":{"line":221,"column":15}},"141":{"start":{"line":222,"column":12},"end":{"line":222,"column":73}},"142":{"start":{"line":223,"column":12},"end":{"line":226,"column":15}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":23,"column":4},"end":{"line":23,"column":5}},"loc":{"start":{"line":23,"column":18},"end":{"line":26,"column":5}},"line":23},"1":{"name":"(anonymous_1)","decl":{"start":{"line":27,"column":4},"end":{"line":27,"column":5}},"loc":{"start":{"line":27,"column":25},"end":{"line":29,"column":5}},"line":27},"2":{"name":"(anonymous_2)","decl":{"start":{"line":30,"column":4},"end":{"line":30,"column":5}},"loc":{"start":{"line":30,"column":41},"end":{"line":32,"column":5}},"line":30},"3":{"name":"(anonymous_3)","decl":{"start":{"line":33,"column":4},"end":{"line":33,"column":5}},"loc":{"start":{"line":33,"column":12},"end":{"line":35,"column":5}},"line":33},"4":{"name":"(anonymous_4)","decl":{"start":{"line":36,"column":4},"end":{"line":36,"column":5}},"loc":{"start":{"line":36,"column":11},"end":{"line":36,"column":14}},"line":36},"5":{"name":"(anonymous_5)","decl":{"start":{"line":37,"column":4},"end":{"line":37,"column":5}},"loc":{"start":{"line":37,"column":12},"end":{"line":40,"column":5}},"line":37},"6":{"name":"(anonymous_6)","decl":{"start":{"line":42,"column":18},"end":{"line":42,"column":19}},"loc":{"start":{"line":42,"column":24},"end":{"line":229,"column":1}},"line":42},"7":{"name":"(anonymous_7)","decl":{"start":{"line":43,"column":14},"end":{"line":43,"column":15}},"loc":{"start":{"line":43,"column":20},"end":{"line":45,"column":5}},"line":43},"8":{"name":"(anonymous_8)","decl":{"start":{"line":55,"column":38},"end":{"line":55,"column":39}},"loc":{"start":{"line":55,"column":44},"end":{"line":63,"column":5}},"line":55},"9":{"name":"(anonymous_9)","decl":{"start":{"line":56,"column":53},"end":{"line":56,"column":54}},"loc":{"start":{"line":56,"column":59},"end":{"line":62,"column":9}},"line":56},"10":{"name":"(anonymous_10)","decl":{"start":{"line":64,"column":37},"end":{"line":64,"column":38}},"loc":{"start":{"line":64,"column":43},"end":{"line":72,"column":5}},"line":64},"11":{"name":"(anonymous_11)","decl":{"start":{"line":65,"column":52},"end":{"line":65,"column":53}},"loc":{"start":{"line":65,"column":58},"end":{"line":71,"column":9}},"line":65},"12":{"name":"(anonymous_12)","decl":{"start":{"line":73,"column":29},"end":{"line":73,"column":30}},"loc":{"start":{"line":73,"column":35},"end":{"line":104,"column":5}},"line":73},"13":{"name":"(anonymous_13)","decl":{"start":{"line":81,"column":15},"end":{"line":81,"column":16}},"loc":{"start":{"line":81,"column":21},"end":{"line":83,"column":9}},"line":81},"14":{"name":"(anonymous_14)","decl":{"start":{"line":84,"column":14},"end":{"line":84,"column":15}},"loc":{"start":{"line":84,"column":20},"end":{"line":86,"column":9}},"line":84},"15":{"name":"(anonymous_15)","decl":{"start":{"line":88,"column":75},"end":{"line":88,"column":76}},"loc":{"start":{"line":88,"column":81},"end":{"line":98,"column":13}},"line":88},"16":{"name":"(anonymous_16)","decl":{"start":{"line":100,"column":106},"end":{"line":100,"column":107}},"loc":{"start":{"line":100,"column":112},"end":{"line":103,"column":9}},"line":100},"17":{"name":"(anonymous_17)","decl":{"start":{"line":105,"column":31},"end":{"line":105,"column":32}},"loc":{"start":{"line":105,"column":37},"end":{"line":122,"column":5}},"line":105},"18":{"name":"(anonymous_18)","decl":{"start":{"line":108,"column":15},"end":{"line":108,"column":16}},"loc":{"start":{"line":108,"column":21},"end":{"line":111,"column":9}},"line":108},"19":{"name":"(anonymous_19)","decl":{"start":{"line":112,"column":37},"end":{"line":112,"column":38}},"loc":{"start":{"line":112,"column":43},"end":{"line":121,"column":9}},"line":112},"20":{"name":"(anonymous_20)","decl":{"start":{"line":123,"column":37},"end":{"line":123,"column":38}},"loc":{"start":{"line":123,"column":43},"end":{"line":133,"column":5}},"line":123},"21":{"name":"(anonymous_21)","decl":{"start":{"line":125,"column":45},"end":{"line":125,"column":46}},"loc":{"start":{"line":125,"column":51},"end":{"line":132,"column":9}},"line":125},"22":{"name":"(anonymous_22)","decl":{"start":{"line":134,"column":25},"end":{"line":134,"column":26}},"loc":{"start":{"line":134,"column":31},"end":{"line":228,"column":5}},"line":134},"23":{"name":"(anonymous_23)","decl":{"start":{"line":138,"column":15},"end":{"line":138,"column":16}},"loc":{"start":{"line":138,"column":21},"end":{"line":140,"column":9}},"line":138},"24":{"name":"(anonymous_24)","decl":{"start":{"line":141,"column":19},"end":{"line":141,"column":20}},"loc":{"start":{"line":141,"column":25},"end":{"line":146,"column":9}},"line":141},"25":{"name":"(anonymous_25)","decl":{"start":{"line":147,"column":18},"end":{"line":147,"column":19}},"loc":{"start":{"line":147,"column":24},"end":{"line":149,"column":9}},"line":147},"26":{"name":"(anonymous_26)","decl":{"start":{"line":150,"column":49},"end":{"line":150,"column":50}},"loc":{"start":{"line":150,"column":55},"end":{"line":158,"column":9}},"line":150},"27":{"name":"(anonymous_27)","decl":{"start":{"line":159,"column":62},"end":{"line":159,"column":63}},"loc":{"start":{"line":159,"column":68},"end":{"line":164,"column":9}},"line":159},"28":{"name":"(anonymous_28)","decl":{"start":{"line":165,"column":54},"end":{"line":165,"column":55}},"loc":{"start":{"line":165,"column":60},"end":{"line":170,"column":9}},"line":165},"29":{"name":"(anonymous_29)","decl":{"start":{"line":171,"column":50},"end":{"line":171,"column":51}},"loc":{"start":{"line":171,"column":56},"end":{"line":181,"column":9}},"line":171},"30":{"name":"(anonymous_30)","decl":{"start":{"line":182,"column":80},"end":{"line":182,"column":81}},"loc":{"start":{"line":182,"column":86},"end":{"line":190,"column":9}},"line":182},"31":{"name":"(anonymous_31)","decl":{"start":{"line":191,"column":62},"end":{"line":191,"column":63}},"loc":{"start":{"line":191,"column":68},"end":{"line":210,"column":9}},"line":191},"32":{"name":"(anonymous_32)","decl":{"start":{"line":196,"column":51},"end":{"line":196,"column":52}},"loc":{"start":{"line":196,"column":57},"end":{"line":198,"column":13}},"line":196},"33":{"name":"(anonymous_33)","decl":{"start":{"line":211,"column":75},"end":{"line":211,"column":76}},"loc":{"start":{"line":211,"column":81},"end":{"line":227,"column":9}},"line":211},"34":{"name":"(anonymous_34)","decl":{"start":{"line":215,"column":67},"end":{"line":215,"column":68}},"loc":{"start":{"line":215,"column":73},"end":{"line":217,"column":13}},"line":215}},"branchMap":{"0":{"loc":{"start":{"line":89,"column":41},"end":{"line":89,"column":94}},"type":"cond-expr","locations":[{"start":{"line":89,"column":80},"end":{"line":89,"column":89}},{"start":{"line":89,"column":92},"end":{"line":89,"column":94}}],"line":89}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":3,"6":3,"7":11,"8":8,"9":8,"10":8,"11":1,"12":1,"13":16,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":4,"45":4,"46":4,"47":4,"48":4,"49":4,"50":4,"51":4,"52":4,"53":4,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"71":1,"72":1,"73":1,"74":1,"75":1,"76":1,"77":1,"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":7,"85":7,"86":7,"87":7,"88":1,"89":7,"90":1,"91":1,"92":1,"93":1,"94":1,"95":1,"96":1,"97":1,"98":1,"99":1,"100":1,"101":1,"102":1,"103":1,"104":1,"105":1,"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"112":1,"113":1,"114":1,"115":1,"116":1,"117":1,"118":1,"119":1,"120":1,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"136":1,"137":1,"138":1,"139":1,"140":1,"141":1,"142":1},"f":{"0":3,"1":11,"2":8,"3":12,"4":1,"5":8,"6":1,"7":16,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":4,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":7,"25":7,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1},"b":{"0":[4,0]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-stats.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-stats.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport {\n  BaseView,\n  globalStats,\n  StatsEventListener,\n  TagKey,\n  TagMap,\n  TagValue,\n} from '../src';\nimport {\n  AggregationType,\n  LastValueData,\n  Measure,\n  Measurement,\n  MeasureType,\n  MeasureUnit,\n  View,\n} from '../src/stats/types';\nimport * as tagger from '../src/tags/tagger';\n\nclass TestExporter implements StatsEventListener {\n  registeredViews: View[] = [];\n  recordedMeasurements: Measurement[] = [];\n\n  onRegisterView(view: View) {\n    this.registeredViews.push(view);\n  }\n\n  onRecord(\n    views: View[],\n    measurement: Measurement,\n    tagMap: Map<TagKey, TagValue>\n  ) {\n    this.recordedMeasurements.push(measurement);\n  }\n\n  start(): void {\n    // TODO(mayurkale): dependency with PR#253.\n  }\n\n  stop(): void {}\n\n  clean() {\n    this.registeredViews = [];\n    this.recordedMeasurements = [];\n  }\n}\n\ndescribe('Stats', () => {\n  afterEach(() => {\n    globalStats.clear();\n  });\n\n  const viewName = 'testViewName';\n  const tagKeys = [{ name: 'testKey1' }, { name: 'testKey2' }];\n  const tagValues = [{ value: 'testValue1' }, { value: 'testValue2' }];\n  const tagMap = new TagMap();\n  tagMap.set(tagKeys[0], tagValues[0]);\n  tagMap.set(tagKeys[1], tagValues[1]);\n\n  const measureName = 'testMeasureDouble';\n  const measureUnit = MeasureUnit.UNIT;\n  const description = 'test description';\n\n  describe('createMeasureDouble()', () => {\n    it('should create a measure of type double', () => {\n      const measureDouble = globalStats.createMeasureDouble(\n        measureName,\n        measureUnit,\n        description\n      );\n      assert.strictEqual(measureDouble.type, MeasureType.DOUBLE);\n      assert.strictEqual(measureDouble.name, measureName);\n      assert.strictEqual(measureDouble.unit, measureUnit);\n      assert.strictEqual(measureDouble.description, description);\n    });\n  });\n\n  describe('createMeasureInt64()', () => {\n    it('should create a measure of type int64', () => {\n      const measureDouble = globalStats.createMeasureInt64(\n        measureName,\n        measureUnit,\n        description\n      );\n      assert.strictEqual(measureDouble.type, MeasureType.INT64);\n      assert.strictEqual(measureDouble.name, measureName);\n      assert.strictEqual(measureDouble.unit, measureUnit);\n      assert.strictEqual(measureDouble.description, description);\n    });\n  });\n\n  describe('createView()', () => {\n    const aggregationTypes = [\n      AggregationType.COUNT,\n      AggregationType.SUM,\n      AggregationType.LAST_VALUE,\n      AggregationType.DISTRIBUTION,\n    ];\n    let measure: Measure;\n\n    before(() => {\n      measure = globalStats.createMeasureInt64(measureName, measureUnit);\n    });\n\n    after(() => {\n      globalStats.clear();\n    });\n\n    for (const aggregationType of aggregationTypes) {\n      it(`should create a view with ${aggregationType} aggregation`, () => {\n        const bucketBoundaries = AggregationType.DISTRIBUTION ? [1, 2, 3] : [];\n        const view = globalStats.createView(\n          viewName,\n          measure,\n          aggregationType,\n          tagKeys,\n          description,\n          bucketBoundaries\n        );\n        globalStats.registerView(view);\n\n        assert.strictEqual(view.name, viewName);\n        assert.strictEqual(view.measure, measure);\n        assert.strictEqual(view.description, description);\n        assert.deepStrictEqual(view.measure, measure);\n        assert.strictEqual(view.aggregation, aggregationType);\n        assert.ok(view.registered);\n      });\n    }\n\n    it('should not create a view with distribution aggregation when no bucket boundaries were given', () => {\n      // @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.\n      assert.throws(globalStats.createView, 'No bucketBoundaries specified');\n    });\n  });\n\n  describe('registerView()', () => {\n    let measure: Measure;\n    const testExporter = new TestExporter();\n\n    before(() => {\n      testExporter.clean();\n      measure = globalStats.createMeasureInt64(measureName, measureUnit);\n    });\n\n    it('should register a view', () => {\n      globalStats.registerExporter(testExporter);\n      const view = new BaseView(\n        viewName,\n        measure,\n        AggregationType.LAST_VALUE,\n        tagKeys,\n        description\n      );\n\n      assert.ok(!view.registered);\n      assert.strictEqual(testExporter.registeredViews.length, 0);\n\n      globalStats.registerView(view);\n\n      assert.ok(view.registered);\n      assert.strictEqual(testExporter.registeredViews.length, 1);\n      assert.deepStrictEqual(testExporter.registeredViews[0], view);\n    });\n  });\n\n  describe('unregisterExporter()', () => {\n    const testExporter = new TestExporter();\n\n    it('should unregister the exporter', () => {\n      globalStats.registerExporter(testExporter);\n      const measure = globalStats.createMeasureInt64(measureName, measureUnit);\n      const view = new BaseView(\n        viewName,\n        measure,\n        AggregationType.LAST_VALUE,\n        tagKeys,\n        description\n      );\n      globalStats.unregisterExporter(testExporter);\n      globalStats.registerView(view);\n\n      assert.strictEqual(testExporter.registeredViews.length, 0);\n    });\n  });\n\n  describe('record()', () => {\n    let measure: Measure;\n    const testExporter = new TestExporter();\n    let aggregationData: LastValueData;\n    before(() => {\n      measure = globalStats.createMeasureInt64(measureName, measureUnit);\n    });\n\n    beforeEach(() => {\n      testExporter.clean();\n      globalStats.registerExporter(testExporter);\n      const view = globalStats.createView(\n        viewName,\n        measure,\n        AggregationType.LAST_VALUE,\n        tagKeys,\n        description\n      );\n      globalStats.registerView(view);\n    });\n\n    afterEach(() => {\n      globalStats.clear();\n    });\n\n    it('should record a single measurement', () => {\n      const measurement = { measure, value: 1 };\n      assert.strictEqual(testExporter.recordedMeasurements.length, 0);\n      globalStats.record([measurement], tagMap);\n      assert.strictEqual(testExporter.recordedMeasurements.length, 1);\n      assert.deepStrictEqual(testExporter.recordedMeasurements[0], measurement);\n      aggregationData = testExporter.registeredViews[0].getSnapshot(\n        tagValues\n      ) as LastValueData;\n      assert.strictEqual(aggregationData.value, measurement.value);\n    });\n\n    it('should not record a single negative measurement', () => {\n      globalStats.registerExporter(testExporter);\n      const measurement = { measure, value: -1 };\n      globalStats.record([measurement], tagMap);\n      assert.strictEqual(testExporter.recordedMeasurements.length, 0);\n    });\n\n    it('should record when tagMap is not passed', () => {\n      globalStats.registerExporter(testExporter);\n      const measurement = { measure, value: 10 };\n      globalStats.record([measurement]);\n      assert.strictEqual(testExporter.recordedMeasurements.length, 2);\n    });\n\n    it('should record multiple measurements', () => {\n      const measurement1 = { measure, value: 1 };\n      const measurement2 = { measure, value: 1 };\n      assert.strictEqual(testExporter.recordedMeasurements.length, 0);\n      globalStats.record([measurement1, measurement2], tagMap);\n      assert.strictEqual(testExporter.recordedMeasurements.length, 2);\n      assert.deepStrictEqual(\n        testExporter.recordedMeasurements[0],\n        measurement1\n      );\n      assert.deepStrictEqual(\n        testExporter.recordedMeasurements[1],\n        measurement2\n      );\n      aggregationData = testExporter.registeredViews[0].getSnapshot(\n        tagValues\n      ) as LastValueData;\n      assert.strictEqual(aggregationData.value, measurement2.value);\n    });\n\n    it('should skip whole multiple measurment if one of value is negative', () => {\n      const measurments = [\n        { measure, value: 1 },\n        { measure, value: -1 },\n        { measure, value: 1 },\n      ];\n      globalStats.record(measurments, tagMap);\n      assert.strictEqual(testExporter.recordedMeasurements.length, 0);\n    });\n\n    it('should record against implicit context when set', () => {\n      const tags = new TagMap();\n      tags.set(tagKeys[0], { value: 'value1' });\n      tags.set(tagKeys[1], { value: 'value2' });\n      const measurement = { measure, value: 1 };\n      globalStats.withTagContext(tags, () => {\n        globalStats.record([measurement]);\n      });\n\n      assert.strictEqual(testExporter.recordedMeasurements.length, 1);\n      assert.deepStrictEqual(testExporter.recordedMeasurements[0], measurement);\n      aggregationData = testExporter.registeredViews[0].getSnapshot([\n        { value: 'value1' },\n        { value: 'value2' },\n      ]) as LastValueData;\n      assert.strictEqual(aggregationData.value, measurement.value);\n      assert.deepStrictEqual(aggregationData.tagValues, [\n        { value: 'value1' },\n        { value: 'value2' },\n      ]);\n    });\n\n    it('should record against implicit context when not set or empty', () => {\n      const UNKNOWN_TAG_VALUE: TagValue | null = null;\n      globalStats.registerExporter(testExporter);\n      const measurement = { measure, value: 2211 };\n      globalStats.withTagContext(tagger.EMPTY_TAG_MAP, () => {\n        globalStats.record([measurement]);\n      });\n\n      aggregationData = testExporter.registeredViews[0].getSnapshot([\n        UNKNOWN_TAG_VALUE,\n        UNKNOWN_TAG_VALUE,\n      ]) as LastValueData;\n      assert.strictEqual(aggregationData.value, measurement.value);\n      assert.deepStrictEqual(aggregationData.tagValues, [\n        UNKNOWN_TAG_VALUE,\n        UNKNOWN_TAG_VALUE,\n      ]);\n    });\n  });\n});\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"cc8a9b32d55cd723c4246e71a2aa5bb243661a4b","contentHash":"11fdcc4b31d41196c434f4d18cd5d0c3dd8284f3f95fe08440b23f9ddf293ae2"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-string-utils.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-string-utils.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":15},"end":{"line":18,"column":32}},"2":{"start":{"line":19,"column":23},"end":{"line":19,"column":62}},"3":{"start":{"line":20,"column":0},"end":{"line":29,"column":3}},"4":{"start":{"line":21,"column":4},"end":{"line":24,"column":7}},"5":{"start":{"line":22,"column":24},"end":{"line":22,"column":76}},"6":{"start":{"line":23,"column":8},"end":{"line":23,"column":46}},"7":{"start":{"line":25,"column":4},"end":{"line":28,"column":7}},"8":{"start":{"line":26,"column":24},"end":{"line":26,"column":81}},"9":{"start":{"line":27,"column":8},"end":{"line":27,"column":47}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":20,"column":24},"end":{"line":20,"column":25}},"loc":{"start":{"line":20,"column":30},"end":{"line":29,"column":1}},"line":20},"1":{"name":"(anonymous_1)","decl":{"start":{"line":21,"column":54},"end":{"line":21,"column":55}},"loc":{"start":{"line":21,"column":60},"end":{"line":24,"column":5}},"line":21},"2":{"name":"(anonymous_2)","decl":{"start":{"line":25,"column":59},"end":{"line":25,"column":60}},"loc":{"start":{"line":25,"column":65},"end":{"line":28,"column":5}},"line":25}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1},"f":{"0":1,"1":1,"2":1},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-string-utils.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-string-utils.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,iCAAiC;AACjC,+DAA2D;AAE3D,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IAC3B,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;QACrD,MAAM,OAAO,GAAG,0BAAW,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QACtD,MAAM,CAAC,eAAe,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;QAC1D,MAAM,OAAO,GAAG,0BAAW,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;QAC3D,MAAM,CAAC,eAAe,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport { StringUtils } from '../src/internal/string-utils';\n\ndescribe('StringUtils', () => {\n  it('should return true when string is printable', () => {\n    const isValid = StringUtils.isPrintableString('abcd');\n    assert.deepStrictEqual(isValid, true);\n  });\n\n  it('should return false when string is not printable', () => {\n    const isValid = StringUtils.isPrintableString('\\x00-\\xFF');\n    assert.deepStrictEqual(isValid, false);\n  });\n});\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"63d62e5c63d6912704954637c1ec61f953d1c3f2","contentHash":"25c06eaf8a807e67e3c4d90861878e70d53b698d418ae964601435abfc766181"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-tag-map.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-tag-map.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":15},"end":{"line":18,"column":32}},"2":{"start":{"line":19,"column":18},"end":{"line":19,"column":48}},"3":{"start":{"line":20,"column":16},"end":{"line":20,"column":44}},"4":{"start":{"line":21,"column":0},"end":{"line":113,"column":3}},"5":{"start":{"line":23,"column":17},"end":{"line":23,"column":33}},"6":{"start":{"line":24,"column":17},"end":{"line":24,"column":33}},"7":{"start":{"line":25,"column":24},"end":{"line":25,"column":49}},"8":{"start":{"line":26,"column":19},"end":{"line":26,"column":38}},"9":{"start":{"line":27,"column":19},"end":{"line":27,"column":38}},"10":{"start":{"line":28,"column":26},"end":{"line":28,"column":52}},"11":{"start":{"line":29,"column":30},"end":{"line":29,"column":71}},"12":{"start":{"line":30,"column":37},"end":{"line":30,"column":85}},"13":{"start":{"line":31,"column":42},"end":{"line":34,"column":5}},"14":{"start":{"line":35,"column":42},"end":{"line":38,"column":5}},"15":{"start":{"line":39,"column":4},"end":{"line":41,"column":7}},"16":{"start":{"line":40,"column":8},"end":{"line":40,"column":40}},"17":{"start":{"line":42,"column":4},"end":{"line":96,"column":7}},"18":{"start":{"line":43,"column":8},"end":{"line":48,"column":11}},"19":{"start":{"line":44,"column":12},"end":{"line":44,"column":37}},"20":{"start":{"line":45,"column":25},"end":{"line":45,"column":48}},"21":{"start":{"line":46,"column":12},"end":{"line":46,"column":45}},"22":{"start":{"line":47,"column":12},"end":{"line":47,"column":82}},"23":{"start":{"line":49,"column":8},"end":{"line":58,"column":11}},"24":{"start":{"line":50,"column":49},"end":{"line":53,"column":13}},"25":{"start":{"line":54,"column":12},"end":{"line":54,"column":56}},"26":{"start":{"line":55,"column":25},"end":{"line":55,"column":48}},"27":{"start":{"line":56,"column":12},"end":{"line":56,"column":45}},"28":{"start":{"line":57,"column":12},"end":{"line":57,"column":81}},"29":{"start":{"line":59,"column":8},"end":{"line":68,"column":11}},"30":{"start":{"line":60,"column":49},"end":{"line":63,"column":13}},"31":{"start":{"line":64,"column":12},"end":{"line":64,"column":63}},"32":{"start":{"line":65,"column":25},"end":{"line":65,"column":48}},"33":{"start":{"line":66,"column":12},"end":{"line":66,"column":45}},"34":{"start":{"line":67,"column":12},"end":{"line":67,"column":81}},"35":{"start":{"line":69,"column":8},"end":{"line":73,"column":11}},"36":{"start":{"line":70,"column":12},"end":{"line":70,"column":44}},"37":{"start":{"line":71,"column":25},"end":{"line":71,"column":48}},"38":{"start":{"line":72,"column":12},"end":{"line":72,"column":45}},"39":{"start":{"line":74,"column":8},"end":{"line":78,"column":11}},"40":{"start":{"line":75,"column":12},"end":{"line":75,"column":44}},"41":{"start":{"line":76,"column":25},"end":{"line":76,"column":48}},"42":{"start":{"line":77,"column":12},"end":{"line":77,"column":45}},"43":{"start":{"line":79,"column":8},"end":{"line":86,"column":11}},"44":{"start":{"line":80,"column":12},"end":{"line":80,"column":37}},"45":{"start":{"line":81,"column":25},"end":{"line":81,"column":48}},"46":{"start":{"line":82,"column":12},"end":{"line":82,"column":45}},"47":{"start":{"line":83,"column":12},"end":{"line":83,"column":82}},"48":{"start":{"line":84,"column":12},"end":{"line":84,"column":37}},"49":{"start":{"line":85,"column":12},"end":{"line":85,"column":45}},"50":{"start":{"line":87,"column":8},"end":{"line":95,"column":11}},"51":{"start":{"line":88,"column":12},"end":{"line":88,"column":37}},"52":{"start":{"line":89,"column":25},"end":{"line":89,"column":48}},"53":{"start":{"line":90,"column":12},"end":{"line":90,"column":45}},"54":{"start":{"line":91,"column":12},"end":{"line":91,"column":82}},"55":{"start":{"line":92,"column":12},"end":{"line":92,"column":37}},"56":{"start":{"line":93,"column":12},"end":{"line":93,"column":45}},"57":{"start":{"line":94,"column":12},"end":{"line":94,"column":82}},"58":{"start":{"line":97,"column":4},"end":{"line":112,"column":7}},"59":{"start":{"line":98,"column":8},"end":{"line":104,"column":11}},"60":{"start":{"line":99,"column":12},"end":{"line":99,"column":37}},"61":{"start":{"line":100,"column":25},"end":{"line":100,"column":48}},"62":{"start":{"line":101,"column":12},"end":{"line":101,"column":45}},"63":{"start":{"line":102,"column":12},"end":{"line":102,"column":32}},"64":{"start":{"line":103,"column":12},"end":{"line":103,"column":45}},"65":{"start":{"line":105,"column":8},"end":{"line":111,"column":11}},"66":{"start":{"line":106,"column":12},"end":{"line":106,"column":37}},"67":{"start":{"line":107,"column":25},"end":{"line":107,"column":48}},"68":{"start":{"line":108,"column":12},"end":{"line":108,"column":45}},"69":{"start":{"line":109,"column":12},"end":{"line":109,"column":32}},"70":{"start":{"line":110,"column":12},"end":{"line":110,"column":45}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":21,"column":21},"end":{"line":21,"column":22}},"loc":{"start":{"line":21,"column":27},"end":{"line":113,"column":1}},"line":21},"1":{"name":"(anonymous_1)","decl":{"start":{"line":39,"column":15},"end":{"line":39,"column":16}},"loc":{"start":{"line":39,"column":21},"end":{"line":41,"column":5}},"line":39},"2":{"name":"(anonymous_2)","decl":{"start":{"line":42,"column":22},"end":{"line":42,"column":23}},"loc":{"start":{"line":42,"column":28},"end":{"line":96,"column":5}},"line":42},"3":{"name":"(anonymous_3)","decl":{"start":{"line":43,"column":70},"end":{"line":43,"column":71}},"loc":{"start":{"line":43,"column":76},"end":{"line":48,"column":9}},"line":43},"4":{"name":"(anonymous_4)","decl":{"start":{"line":49,"column":72},"end":{"line":49,"column":73}},"loc":{"start":{"line":49,"column":78},"end":{"line":58,"column":9}},"line":49},"5":{"name":"(anonymous_5)","decl":{"start":{"line":59,"column":79},"end":{"line":59,"column":80}},"loc":{"start":{"line":59,"column":85},"end":{"line":68,"column":9}},"line":59},"6":{"name":"(anonymous_6)","decl":{"start":{"line":69,"column":57},"end":{"line":69,"column":58}},"loc":{"start":{"line":69,"column":63},"end":{"line":73,"column":9}},"line":69},"7":{"name":"(anonymous_7)","decl":{"start":{"line":74,"column":59},"end":{"line":74,"column":60}},"loc":{"start":{"line":74,"column":65},"end":{"line":78,"column":9}},"line":74},"8":{"name":"(anonymous_8)","decl":{"start":{"line":79,"column":59},"end":{"line":79,"column":60}},"loc":{"start":{"line":79,"column":65},"end":{"line":86,"column":9}},"line":79},"9":{"name":"(anonymous_9)","decl":{"start":{"line":87,"column":44},"end":{"line":87,"column":45}},"loc":{"start":{"line":87,"column":50},"end":{"line":95,"column":9}},"line":87},"10":{"name":"(anonymous_10)","decl":{"start":{"line":97,"column":25},"end":{"line":97,"column":26}},"loc":{"start":{"line":97,"column":31},"end":{"line":112,"column":5}},"line":97},"11":{"name":"(anonymous_11)","decl":{"start":{"line":98,"column":35},"end":{"line":98,"column":36}},"loc":{"start":{"line":98,"column":41},"end":{"line":104,"column":9}},"line":98},"12":{"name":"(anonymous_12)","decl":{"start":{"line":105,"column":44},"end":{"line":105,"column":45}},"loc":{"start":{"line":105,"column":50},"end":{"line":111,"column":9}},"line":105}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":9,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1},"f":{"0":1,"1":9,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-tag-map.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-tag-map.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 the \"License\";\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport { TagMap } from '../src/tags/tag-map';\nimport { TagTtl } from '../src/tags/types';\n\ndescribe('TagMap()', () => {\n  let tagMap: TagMap;\n  const key1 = { name: 'key1' };\n  const key2 = { name: 'key2' };\n  const invalidKey1 = { name: 'a'.repeat(256) };\n  const value1 = { value: 'value1' };\n  const value2 = { value: 'value2' };\n  const invalidValue1 = { value: 'a'.repeat(256) };\n  const NO_PROPAGATION_MD = { tagTtl: TagTtl.NO_PROPAGATION };\n  const UNLIMITED_PROPAGATION_MD = { tagTtl: TagTtl.UNLIMITED_PROPAGATION };\n\n  const expectedTagValueWithMetadata1 = {\n    tagValue: { value: 'value1' },\n    tagMetadata: { tagTtl: -1 },\n  };\n\n  const expectedTagValueWithMetadata2 = {\n    tagValue: { value: 'value2' },\n    tagMetadata: { tagTtl: -1 },\n  };\n\n  beforeEach(() => {\n    tagMap = new TagMap();\n  });\n\n  describe('set()', () => {\n    it('should set tagkey and tagvalue with default TagMetadata', () => {\n      tagMap.set(key1, value1);\n      const tags = tagMap.tagsWithMetadata;\n      assert.strictEqual(tags.size, 1);\n      assert.deepStrictEqual(tags.get(key1), expectedTagValueWithMetadata1);\n    });\n\n    it('should set tagkey and tagvalue with NO_PROPAGATION TagTtl', () => {\n      const expectedTagValueWithMetadata = {\n        tagValue: { value: 'value1' },\n        tagMetadata: { tagTtl: 0 },\n      };\n\n      tagMap.set(key1, value1, NO_PROPAGATION_MD);\n      const tags = tagMap.tagsWithMetadata;\n      assert.strictEqual(tags.size, 1);\n      assert.deepStrictEqual(tags.get(key1), expectedTagValueWithMetadata);\n    });\n\n    it('should set tagkey and tagvalue with UNLIMITED_PROPAGATION TagTtl', () => {\n      const expectedTagValueWithMetadata = {\n        tagValue: { value: 'value1' },\n        tagMetadata: { tagTtl: -1 },\n      };\n\n      tagMap.set(key1, value1, UNLIMITED_PROPAGATION_MD);\n      const tags = tagMap.tagsWithMetadata;\n      assert.strictEqual(tags.size, 1);\n      assert.deepStrictEqual(tags.get(key1), expectedTagValueWithMetadata);\n    });\n\n    it('should silently ignore when invalid tagKey', () => {\n      tagMap.set(invalidKey1, value1);\n      const tags = tagMap.tagsWithMetadata;\n      assert.strictEqual(tags.size, 0);\n    });\n\n    it('should silently ignore when invalid tagValue', () => {\n      tagMap.set(key1, invalidValue1);\n      const tags = tagMap.tagsWithMetadata;\n      assert.strictEqual(tags.size, 0);\n    });\n\n    it('should not set duplicate tagkey and tagvalue', () => {\n      tagMap.set(key1, value1);\n      const tags = tagMap.tagsWithMetadata;\n      assert.strictEqual(tags.size, 1);\n      assert.deepStrictEqual(tags.get(key1), expectedTagValueWithMetadata1);\n      tagMap.set(key1, value1);\n      assert.strictEqual(tags.size, 1);\n    });\n\n    it('should update existing tagkey', () => {\n      tagMap.set(key1, value1);\n      const tags = tagMap.tagsWithMetadata;\n      assert.strictEqual(tags.size, 1);\n      assert.deepStrictEqual(tags.get(key1), expectedTagValueWithMetadata1);\n      tagMap.set(key1, value2);\n      assert.strictEqual(tags.size, 1);\n      assert.deepStrictEqual(tags.get(key1), expectedTagValueWithMetadata2);\n    });\n  });\n  describe('delete()', () => {\n    it('should delete tagkey', () => {\n      tagMap.set(key1, value1);\n      const tags = tagMap.tagsWithMetadata;\n      assert.strictEqual(tags.size, 1);\n      tagMap.delete(key1);\n      assert.strictEqual(tags.size, 0);\n    });\n    it('should delete missing tagkey1', () => {\n      tagMap.set(key1, value1);\n      const tags = tagMap.tagsWithMetadata;\n      assert.strictEqual(tags.size, 1);\n      tagMap.delete(key2);\n      assert.strictEqual(tags.size, 1);\n    });\n  });\n});\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d0f94de42567cb7f3bfd5c7febdc544aef9ea0ae","contentHash":"5bcde092eec19b967a17a13cd7946a72cd62fcc6411644c2088b02fb5fd64f5f"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-tagger.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-tagger.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":15},"end":{"line":18,"column":32}},"2":{"start":{"line":19,"column":14},"end":{"line":19,"column":31}},"3":{"start":{"line":20,"column":12},"end":{"line":20,"column":42}},"4":{"start":{"line":21,"column":15},"end":{"line":21,"column":44}},"5":{"start":{"line":22,"column":23},"end":{"line":22,"column":41}},"6":{"start":{"line":23,"column":0},"end":{"line":93,"column":3}},"7":{"start":{"line":24,"column":18},"end":{"line":24,"column":36}},"8":{"start":{"line":25,"column":4},"end":{"line":25,"column":53}},"9":{"start":{"line":26,"column":4},"end":{"line":26,"column":53}},"10":{"start":{"line":27,"column":18},"end":{"line":27,"column":36}},"11":{"start":{"line":28,"column":4},"end":{"line":28,"column":53}},"12":{"start":{"line":29,"column":4},"end":{"line":29,"column":53}},"13":{"start":{"line":30,"column":18},"end":{"line":30,"column":36}},"14":{"start":{"line":31,"column":4},"end":{"line":31,"column":53}},"15":{"start":{"line":32,"column":4},"end":{"line":32,"column":53}},"16":{"start":{"line":33,"column":18},"end":{"line":33,"column":36}},"17":{"start":{"line":34,"column":4},"end":{"line":34,"column":53}},"18":{"start":{"line":35,"column":4},"end":{"line":35,"column":53}},"19":{"start":{"line":36,"column":4},"end":{"line":36,"column":53}},"20":{"start":{"line":37,"column":31},"end":{"line":37,"column":49}},"21":{"start":{"line":38,"column":4},"end":{"line":38,"column":66}},"22":{"start":{"line":39,"column":4},"end":{"line":39,"column":66}},"23":{"start":{"line":40,"column":4},"end":{"line":40,"column":66}},"24":{"start":{"line":41,"column":4},"end":{"line":41,"column":66}},"25":{"start":{"line":42,"column":32},"end":{"line":42,"column":50}},"26":{"start":{"line":43,"column":4},"end":{"line":43,"column":67}},"27":{"start":{"line":44,"column":4},"end":{"line":44,"column":67}},"28":{"start":{"line":45,"column":4},"end":{"line":45,"column":67}},"29":{"start":{"line":46,"column":34},"end":{"line":46,"column":52}},"30":{"start":{"line":47,"column":4},"end":{"line":47,"column":69}},"31":{"start":{"line":48,"column":4},"end":{"line":48,"column":69}},"32":{"start":{"line":49,"column":4},"end":{"line":49,"column":69}},"33":{"start":{"line":50,"column":4},"end":{"line":50,"column":69}},"34":{"start":{"line":51,"column":4},"end":{"line":55,"column":7}},"35":{"start":{"line":52,"column":8},"end":{"line":54,"column":11}},"36":{"start":{"line":53,"column":12},"end":{"line":53,"column":102}},"37":{"start":{"line":56,"column":4},"end":{"line":61,"column":7}},"38":{"start":{"line":57,"column":8},"end":{"line":59,"column":11}},"39":{"start":{"line":58,"column":12},"end":{"line":58,"column":87}},"40":{"start":{"line":60,"column":8},"end":{"line":60,"column":98}},"41":{"start":{"line":62,"column":4},"end":{"line":71,"column":7}},"42":{"start":{"line":63,"column":8},"end":{"line":69,"column":11}},"43":{"start":{"line":64,"column":12},"end":{"line":64,"column":87}},"44":{"start":{"line":65,"column":12},"end":{"line":67,"column":15}},"45":{"start":{"line":66,"column":16},"end":{"line":66,"column":104}},"46":{"start":{"line":68,"column":12},"end":{"line":68,"column":87}},"47":{"start":{"line":70,"column":8},"end":{"line":70,"column":98}},"48":{"start":{"line":72,"column":4},"end":{"line":84,"column":7}},"49":{"start":{"line":73,"column":8},"end":{"line":82,"column":11}},"50":{"start":{"line":74,"column":12},"end":{"line":74,"column":87}},"51":{"start":{"line":75,"column":12},"end":{"line":80,"column":15}},"52":{"start":{"line":76,"column":16},"end":{"line":76,"column":105}},"53":{"start":{"line":77,"column":16},"end":{"line":79,"column":19}},"54":{"start":{"line":78,"column":20},"end":{"line":78,"column":111}},"55":{"start":{"line":81,"column":12},"end":{"line":81,"column":87}},"56":{"start":{"line":83,"column":8},"end":{"line":83,"column":98}},"57":{"start":{"line":85,"column":4},"end":{"line":92,"column":7}},"58":{"start":{"line":86,"column":8},"end":{"line":90,"column":11}},"59":{"start":{"line":87,"column":12},"end":{"line":87,"column":87}},"60":{"start":{"line":88,"column":12},"end":{"line":88,"column":41}},"61":{"start":{"line":89,"column":12},"end":{"line":89,"column":102}},"62":{"start":{"line":91,"column":8},"end":{"line":91,"column":98}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":23,"column":21},"end":{"line":23,"column":22}},"loc":{"start":{"line":23,"column":27},"end":{"line":93,"column":1}},"line":23},"1":{"name":"(anonymous_1)","decl":{"start":{"line":51,"column":50},"end":{"line":51,"column":51}},"loc":{"start":{"line":51,"column":56},"end":{"line":55,"column":5}},"line":51},"2":{"name":"(anonymous_2)","decl":{"start":{"line":52,"column":68},"end":{"line":52,"column":69}},"loc":{"start":{"line":52,"column":74},"end":{"line":54,"column":9}},"line":52},"3":{"name":"(anonymous_3)","decl":{"start":{"line":56,"column":41},"end":{"line":56,"column":42}},"loc":{"start":{"line":56,"column":47},"end":{"line":61,"column":5}},"line":56},"4":{"name":"(anonymous_4)","decl":{"start":{"line":57,"column":53},"end":{"line":57,"column":54}},"loc":{"start":{"line":57,"column":59},"end":{"line":59,"column":9}},"line":57},"5":{"name":"(anonymous_5)","decl":{"start":{"line":62,"column":48},"end":{"line":62,"column":49}},"loc":{"start":{"line":62,"column":54},"end":{"line":71,"column":5}},"line":62},"6":{"name":"(anonymous_6)","decl":{"start":{"line":63,"column":53},"end":{"line":63,"column":54}},"loc":{"start":{"line":63,"column":59},"end":{"line":69,"column":9}},"line":63},"7":{"name":"(anonymous_7)","decl":{"start":{"line":65,"column":57},"end":{"line":65,"column":58}},"loc":{"start":{"line":65,"column":63},"end":{"line":67,"column":13}},"line":65},"8":{"name":"(anonymous_8)","decl":{"start":{"line":72,"column":39},"end":{"line":72,"column":40}},"loc":{"start":{"line":72,"column":45},"end":{"line":84,"column":5}},"line":72},"9":{"name":"(anonymous_9)","decl":{"start":{"line":73,"column":53},"end":{"line":73,"column":54}},"loc":{"start":{"line":73,"column":59},"end":{"line":82,"column":9}},"line":73},"10":{"name":"(anonymous_10)","decl":{"start":{"line":75,"column":57},"end":{"line":75,"column":58}},"loc":{"start":{"line":75,"column":63},"end":{"line":80,"column":13}},"line":75},"11":{"name":"(anonymous_11)","decl":{"start":{"line":77,"column":61},"end":{"line":77,"column":62}},"loc":{"start":{"line":77,"column":67},"end":{"line":79,"column":17}},"line":77},"12":{"name":"(anonymous_12)","decl":{"start":{"line":85,"column":43},"end":{"line":85,"column":44}},"loc":{"start":{"line":85,"column":49},"end":{"line":92,"column":5}},"line":85},"13":{"name":"(anonymous_13)","decl":{"start":{"line":86,"column":53},"end":{"line":86,"column":54}},"loc":{"start":{"line":86,"column":59},"end":{"line":90,"column":9}},"line":86}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1},"f":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-tagger.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-tagger.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,iCAAiC;AACjC,gCAAgC;AAChC,2CAA2C;AAC3C,6CAA6C;AAE7C,MAAM,cAAc,GAAG,GAAG,CAAC,YAAY,EAAE,CAAC;AAE1C,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;IACxB,MAAM,KAAK,GAAG,IAAI,YAAM,EAAE,CAAC;IAC3B,KAAK,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;IACjD,KAAK,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;IAEjD,MAAM,KAAK,GAAG,IAAI,YAAM,EAAE,CAAC;IAC3B,KAAK,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;IACjD,KAAK,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;IAEjD,MAAM,KAAK,GAAG,IAAI,YAAM,EAAE,CAAC;IAC3B,KAAK,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;IACjD,KAAK,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;IAEjD,MAAM,KAAK,GAAG,IAAI,YAAM,EAAE,CAAC;IAC3B,KAAK,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;IACjD,KAAK,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;IACjD,KAAK,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;IAEjD,MAAM,kBAAkB,GAAG,IAAI,YAAM,EAAE,CAAC;IACxC,kBAAkB,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;IAC9D,kBAAkB,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;IAC9D,kBAAkB,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;IAC9D,kBAAkB,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;IAE9D,MAAM,mBAAmB,GAAG,IAAI,YAAM,EAAE,CAAC;IACzC,mBAAmB,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;IAC/D,mBAAmB,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;IAC/D,mBAAmB,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;IAE/D,MAAM,qBAAqB,GAAG,IAAI,YAAM,EAAE,CAAC;IAC3C,qBAAqB,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;IACjE,qBAAqB,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;IACjE,qBAAqB,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;IACjE,qBAAqB,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;IAEjE,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;QACjD,MAAM,CAAC,cAAc,CAAC,cAAc,EAAE,MAAM,CAAC,aAAa,EAAE,GAAG,EAAE;YAC/D,MAAM,CAAC,eAAe,CACpB,MAAM,CAAC,oBAAoB,CAAC,cAAc,CAAC,EAC3C,MAAM,CAAC,aAAa,CACrB,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;QACxC,MAAM,CAAC,cAAc,CAAC,cAAc,EAAE,KAAK,EAAE,GAAG,EAAE;YAChD,MAAM,CAAC,eAAe,CACpB,MAAM,CAAC,oBAAoB,CAAC,cAAc,CAAC,EAC3C,KAAK,CACN,CAAC;QACJ,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,eAAe,CACpB,MAAM,CAAC,oBAAoB,CAAC,cAAc,CAAC,EAC3C,MAAM,CAAC,aAAa,CACrB,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;QAC/C,MAAM,CAAC,cAAc,CAAC,cAAc,EAAE,KAAK,EAAE,GAAG,EAAE;YAChD,MAAM,CAAC,eAAe,CACpB,MAAM,CAAC,oBAAoB,CAAC,cAAc,CAAC,EAC3C,KAAK,CACN,CAAC;YAEF,MAAM,CAAC,cAAc,CAAC,cAAc,EAAE,KAAK,EAAE,GAAG,EAAE;gBAChD,MAAM,CAAC,eAAe,CACpB,MAAM,CAAC,oBAAoB,CAAC,cAAc,CAAC,EAC3C,kBAAkB,CACnB,CAAC;YACJ,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,eAAe,CACpB,MAAM,CAAC,oBAAoB,CAAC,cAAc,CAAC,EAC3C,KAAK,CACN,CAAC;QACJ,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,eAAe,CACpB,MAAM,CAAC,oBAAoB,CAAC,cAAc,CAAC,EAC3C,MAAM,CAAC,aAAa,CACrB,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8BAA8B,EAAE,GAAG,EAAE;QACtC,MAAM,CAAC,cAAc,CAAC,cAAc,EAAE,KAAK,EAAE,GAAG,EAAE;YAChD,MAAM,CAAC,eAAe,CACpB,MAAM,CAAC,oBAAoB,CAAC,cAAc,CAAC,EAC3C,KAAK,CACN,CAAC;YAEF,MAAM,CAAC,cAAc,CAAC,cAAc,EAAE,KAAK,EAAE,GAAG,EAAE;gBAChD,MAAM,CAAC,eAAe,CACpB,MAAM,CAAC,oBAAoB,CAAC,cAAc,CAAC,EAC3C,mBAAmB,CACpB,CAAC;gBAEF,MAAM,CAAC,cAAc,CAAC,cAAc,EAAE,KAAK,EAAE,GAAG,EAAE;oBAChD,MAAM,CAAC,eAAe,CACpB,MAAM,CAAC,oBAAoB,CAAC,cAAc,CAAC,EAC3C,qBAAqB,CACtB,CAAC;gBACJ,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,eAAe,CACpB,MAAM,CAAC,oBAAoB,CAAC,cAAc,CAAC,EAC3C,KAAK,CACN,CAAC;QACJ,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,eAAe,CACpB,MAAM,CAAC,oBAAoB,CAAC,cAAc,CAAC,EAC3C,MAAM,CAAC,aAAa,CACrB,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;QAC1C,MAAM,CAAC,cAAc,CAAC,cAAc,EAAE,KAAK,EAAE,GAAG,EAAE;YAChD,MAAM,CAAC,eAAe,CACpB,MAAM,CAAC,oBAAoB,CAAC,cAAc,CAAC,EAC3C,KAAK,CACN,CAAC;YACF,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;YAC7B,MAAM,CAAC,eAAe,CACpB,MAAM,CAAC,oBAAoB,CAAC,cAAc,CAAC,EAC3C,MAAM,CAAC,aAAa,CACrB,CAAC;QACJ,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,eAAe,CACpB,MAAM,CAAC,oBAAoB,CAAC,cAAc,CAAC,EAC3C,MAAM,CAAC,aAAa,CACrB,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport { TagMap } from '../src';\nimport * as cls from '../src/internal/cls';\nimport * as tagger from '../src/tags/tagger';\n\nconst contextManager = cls.getNamespace();\n\ndescribe('tagger()', () => {\n  const tags1 = new TagMap();\n  tags1.set({ name: 'key1' }, { value: 'value1' });\n  tags1.set({ name: 'key2' }, { value: 'value2' });\n\n  const tags2 = new TagMap();\n  tags2.set({ name: 'key3' }, { value: 'value3' });\n  tags2.set({ name: 'key4' }, { value: 'value4' });\n\n  const tags3 = new TagMap();\n  tags3.set({ name: 'key2' }, { value: 'value3' });\n  tags3.set({ name: 'key4' }, { value: 'value4' });\n\n  const tags4 = new TagMap();\n  tags4.set({ name: 'key1' }, { value: 'value4' });\n  tags4.set({ name: 'key4' }, { value: 'value5' });\n  tags4.set({ name: 'key6' }, { value: 'value6' });\n\n  const expectedMergedTags = new TagMap();\n  expectedMergedTags.set({ name: 'key1' }, { value: 'value1' });\n  expectedMergedTags.set({ name: 'key2' }, { value: 'value2' });\n  expectedMergedTags.set({ name: 'key3' }, { value: 'value3' });\n  expectedMergedTags.set({ name: 'key4' }, { value: 'value4' });\n\n  const expectedTagsFrom1n3 = new TagMap();\n  expectedTagsFrom1n3.set({ name: 'key1' }, { value: 'value1' });\n  expectedTagsFrom1n3.set({ name: 'key2' }, { value: 'value3' });\n  expectedTagsFrom1n3.set({ name: 'key4' }, { value: 'value4' });\n\n  const expectedTagsFrom1n3n4 = new TagMap();\n  expectedTagsFrom1n3n4.set({ name: 'key1' }, { value: 'value4' });\n  expectedTagsFrom1n3n4.set({ name: 'key2' }, { value: 'value3' });\n  expectedTagsFrom1n3n4.set({ name: 'key4' }, { value: 'value5' });\n  expectedTagsFrom1n3n4.set({ name: 'key6' }, { value: 'value6' });\n\n  it('should return empty current tag context', () => {\n    tagger.withTagContext(contextManager, tagger.EMPTY_TAG_MAP, () => {\n      assert.deepStrictEqual(\n        tagger.getCurrentTagContext(contextManager),\n        tagger.EMPTY_TAG_MAP\n      );\n    });\n  });\n\n  it('should set current tag context', () => {\n    tagger.withTagContext(contextManager, tags1, () => {\n      assert.deepStrictEqual(\n        tagger.getCurrentTagContext(contextManager),\n        tags1\n      );\n    });\n    assert.deepStrictEqual(\n      tagger.getCurrentTagContext(contextManager),\n      tagger.EMPTY_TAG_MAP\n    );\n  });\n\n  it('should set nested current tag context', () => {\n    tagger.withTagContext(contextManager, tags1, () => {\n      assert.deepStrictEqual(\n        tagger.getCurrentTagContext(contextManager),\n        tags1\n      );\n\n      tagger.withTagContext(contextManager, tags2, () => {\n        assert.deepStrictEqual(\n          tagger.getCurrentTagContext(contextManager),\n          expectedMergedTags\n        );\n      });\n      assert.deepStrictEqual(\n        tagger.getCurrentTagContext(contextManager),\n        tags1\n      );\n    });\n    assert.deepStrictEqual(\n      tagger.getCurrentTagContext(contextManager),\n      tagger.EMPTY_TAG_MAP\n    );\n  });\n\n  it('should resolve tag conflicts', () => {\n    tagger.withTagContext(contextManager, tags1, () => {\n      assert.deepStrictEqual(\n        tagger.getCurrentTagContext(contextManager),\n        tags1\n      );\n\n      tagger.withTagContext(contextManager, tags3, () => {\n        assert.deepStrictEqual(\n          tagger.getCurrentTagContext(contextManager),\n          expectedTagsFrom1n3\n        );\n\n        tagger.withTagContext(contextManager, tags4, () => {\n          assert.deepStrictEqual(\n            tagger.getCurrentTagContext(contextManager),\n            expectedTagsFrom1n3n4\n          );\n        });\n      });\n      assert.deepStrictEqual(\n        tagger.getCurrentTagContext(contextManager),\n        tags1\n      );\n    });\n    assert.deepStrictEqual(\n      tagger.getCurrentTagContext(contextManager),\n      tagger.EMPTY_TAG_MAP\n    );\n  });\n\n  it('should clear current tag context', () => {\n    tagger.withTagContext(contextManager, tags1, () => {\n      assert.deepStrictEqual(\n        tagger.getCurrentTagContext(contextManager),\n        tags1\n      );\n      tagger.clear(contextManager);\n      assert.deepStrictEqual(\n        tagger.getCurrentTagContext(contextManager),\n        tagger.EMPTY_TAG_MAP\n      );\n    });\n    assert.deepStrictEqual(\n      tagger.getCurrentTagContext(contextManager),\n      tagger.EMPTY_TAG_MAP\n    );\n  });\n});\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"71b7c5ac85d456b5b4d0c7b260d814a73d91a0ed","contentHash":"7a925fe42dea6e8ed0a4c058f7caa7fe83868509fa44789d6f9d021ed65fcc58"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-text-format.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-text-format.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":15},"end":{"line":18,"column":32}},"2":{"start":{"line":19,"column":14},"end":{"line":19,"column":31}},"3":{"start":{"line":20,"column":22},"end":{"line":20,"column":68}},"4":{"start":{"line":21,"column":11},"end":{"line":23,"column":1}},"5":{"start":{"line":24,"column":11},"end":{"line":26,"column":1}},"6":{"start":{"line":27,"column":11},"end":{"line":29,"column":1}},"7":{"start":{"line":30,"column":11},"end":{"line":32,"column":1}},"8":{"start":{"line":33,"column":0},"end":{"line":99,"column":3}},"9":{"start":{"line":34,"column":24},"end":{"line":34,"column":42}},"10":{"start":{"line":35,"column":25},"end":{"line":35,"column":43}},"11":{"start":{"line":36,"column":4},"end":{"line":36,"column":29}},"12":{"start":{"line":37,"column":27},"end":{"line":37,"column":45}},"13":{"start":{"line":38,"column":4},"end":{"line":38,"column":31}},"14":{"start":{"line":39,"column":4},"end":{"line":39,"column":31}},"15":{"start":{"line":40,"column":30},"end":{"line":40,"column":69}},"16":{"start":{"line":41,"column":33},"end":{"line":41,"column":51}},"17":{"start":{"line":42,"column":4},"end":{"line":42,"column":56}},"18":{"start":{"line":43,"column":4},"end":{"line":69,"column":7}},"19":{"start":{"line":44,"column":8},"end":{"line":47,"column":11}},"20":{"start":{"line":45,"column":31},"end":{"line":45,"column":77}},"21":{"start":{"line":46,"column":12},"end":{"line":46,"column":47}},"22":{"start":{"line":48,"column":8},"end":{"line":51,"column":11}},"23":{"start":{"line":49,"column":31},"end":{"line":49,"column":78}},"24":{"start":{"line":50,"column":12},"end":{"line":50,"column":56}},"25":{"start":{"line":52,"column":8},"end":{"line":55,"column":11}},"26":{"start":{"line":53,"column":31},"end":{"line":53,"column":80}},"27":{"start":{"line":54,"column":12},"end":{"line":54,"column":62}},"28":{"start":{"line":56,"column":8},"end":{"line":59,"column":11}},"29":{"start":{"line":57,"column":31},"end":{"line":57,"column":86}},"30":{"start":{"line":58,"column":12},"end":{"line":58,"column":51}},"31":{"start":{"line":60,"column":8},"end":{"line":68,"column":11}},"32":{"start":{"line":61,"column":25},"end":{"line":61,"column":43}},"33":{"start":{"line":62,"column":12},"end":{"line":64,"column":13}},"34":{"start":{"line":62,"column":25},"end":{"line":62,"column":26}},"35":{"start":{"line":63,"column":16},"end":{"line":63,"column":73}},"36":{"start":{"line":65,"column":12},"end":{"line":67,"column":73}},"37":{"start":{"line":66,"column":16},"end":{"line":66,"column":56}},"38":{"start":{"line":70,"column":4},"end":{"line":98,"column":7}},"39":{"start":{"line":71,"column":8},"end":{"line":74,"column":11}},"40":{"start":{"line":72,"column":39},"end":{"line":72,"column":78}},"41":{"start":{"line":73,"column":12},"end":{"line":73,"column":68}},"42":{"start":{"line":75,"column":8},"end":{"line":79,"column":11}},"43":{"start":{"line":76,"column":39},"end":{"line":76,"column":83}},"44":{"start":{"line":77,"column":12},"end":{"line":77,"column":68}},"45":{"start":{"line":78,"column":12},"end":{"line":78,"column":69}},"46":{"start":{"line":80,"column":8},"end":{"line":84,"column":11}},"47":{"start":{"line":81,"column":39},"end":{"line":81,"column":89}},"48":{"start":{"line":82,"column":12},"end":{"line":82,"column":68}},"49":{"start":{"line":83,"column":12},"end":{"line":83,"column":71}},"50":{"start":{"line":85,"column":8},"end":{"line":92,"column":11}},"51":{"start":{"line":86,"column":35},"end":{"line":86,"column":53}},"52":{"start":{"line":87,"column":12},"end":{"line":87,"column":53}},"53":{"start":{"line":88,"column":12},"end":{"line":88,"column":66}},"54":{"start":{"line":89,"column":39},"end":{"line":89,"column":92}},"55":{"start":{"line":90,"column":12},"end":{"line":90,"column":68}},"56":{"start":{"line":91,"column":12},"end":{"line":91,"column":71}},"57":{"start":{"line":93,"column":8},"end":{"line":97,"column":11}},"58":{"start":{"line":94,"column":12},"end":{"line":96,"column":43}},"59":{"start":{"line":95,"column":16},"end":{"line":95,"column":67}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":33,"column":35},"end":{"line":33,"column":36}},"loc":{"start":{"line":33,"column":41},"end":{"line":99,"column":1}},"line":33},"1":{"name":"(anonymous_1)","decl":{"start":{"line":43,"column":36},"end":{"line":43,"column":37}},"loc":{"start":{"line":43,"column":42},"end":{"line":69,"column":5}},"line":43},"2":{"name":"(anonymous_2)","decl":{"start":{"line":44,"column":45},"end":{"line":44,"column":46}},"loc":{"start":{"line":44,"column":51},"end":{"line":47,"column":9}},"line":44},"3":{"name":"(anonymous_3)","decl":{"start":{"line":48,"column":48},"end":{"line":48,"column":49}},"loc":{"start":{"line":48,"column":54},"end":{"line":51,"column":9}},"line":48},"4":{"name":"(anonymous_4)","decl":{"start":{"line":52,"column":49},"end":{"line":52,"column":50}},"loc":{"start":{"line":52,"column":55},"end":{"line":55,"column":9}},"line":52},"5":{"name":"(anonymous_5)","decl":{"start":{"line":56,"column":46},"end":{"line":56,"column":47}},"loc":{"start":{"line":56,"column":52},"end":{"line":59,"column":9}},"line":56},"6":{"name":"(anonymous_6)","decl":{"start":{"line":60,"column":72},"end":{"line":60,"column":73}},"loc":{"start":{"line":60,"column":78},"end":{"line":68,"column":9}},"line":60},"7":{"name":"(anonymous_7)","decl":{"start":{"line":65,"column":26},"end":{"line":65,"column":27}},"loc":{"start":{"line":65,"column":32},"end":{"line":67,"column":13}},"line":65},"8":{"name":"(anonymous_8)","decl":{"start":{"line":70,"column":38},"end":{"line":70,"column":39}},"loc":{"start":{"line":70,"column":44},"end":{"line":98,"column":5}},"line":70},"9":{"name":"(anonymous_9)","decl":{"start":{"line":71,"column":46},"end":{"line":71,"column":47}},"loc":{"start":{"line":71,"column":52},"end":{"line":74,"column":9}},"line":71},"10":{"name":"(anonymous_10)","decl":{"start":{"line":75,"column":57},"end":{"line":75,"column":58}},"loc":{"start":{"line":75,"column":63},"end":{"line":79,"column":9}},"line":75},"11":{"name":"(anonymous_11)","decl":{"start":{"line":80,"column":53},"end":{"line":80,"column":54}},"loc":{"start":{"line":80,"column":59},"end":{"line":84,"column":9}},"line":80},"12":{"name":"(anonymous_12)","decl":{"start":{"line":85,"column":55},"end":{"line":85,"column":56}},"loc":{"start":{"line":85,"column":61},"end":{"line":92,"column":9}},"line":85},"13":{"name":"(anonymous_13)","decl":{"start":{"line":93,"column":60},"end":{"line":93,"column":61}},"loc":{"start":{"line":93,"column":66},"end":{"line":97,"column":9}},"line":93},"14":{"name":"(anonymous_14)","decl":{"start":{"line":94,"column":26},"end":{"line":94,"column":27}},"loc":{"start":{"line":94,"column":32},"end":{"line":96,"column":13}},"line":94}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":181,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1},"f":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-text-format.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-text-format.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport { TagMap, TagTtl } from '../src';\nimport {\n  deserializeTextFormat,\n  MAX_NUMBER_OF_TAGS,\n  serializeTextFormat,\n} from '../src/tags/propagation/text-format';\n\nconst K1 = {\n  name: 'k1',\n};\nconst K2 = {\n  name: 'k2',\n};\n\nconst V1 = {\n  value: 'v1',\n};\nconst V2 = {\n  value: 'v2',\n};\n\ndescribe('Text Format Serializer', () => {\n  const emptyTagMap = new TagMap();\n\n  const singleTagMap = new TagMap();\n  singleTagMap.set(K1, V1);\n\n  const multipleTagMap = new TagMap();\n  multipleTagMap.set(K1, V1);\n  multipleTagMap.set(K2, V2);\n\n  const NO_PROPAGATION_MD = { tagTtl: TagTtl.NO_PROPAGATION };\n  const nonPropagatingTagMap = new TagMap();\n  nonPropagatingTagMap.set(K1, V1, NO_PROPAGATION_MD);\n\n  describe('serializeTextFormat', () => {\n    it('should serialize empty tag map', () => {\n      const textFormat = serializeTextFormat(emptyTagMap);\n      assert.strictEqual(textFormat, '');\n    });\n\n    it('should serialize with one tag map', () => {\n      const textFormat = serializeTextFormat(singleTagMap);\n      assert.deepStrictEqual(textFormat, 'k1=v1');\n    });\n\n    it('should serialize with multiple tag', () => {\n      const textFormat = serializeTextFormat(multipleTagMap);\n      assert.deepStrictEqual(textFormat, 'k1=v1,k2=v2');\n    });\n\n    it('should skip non propagating tag', () => {\n      const textFormat = serializeTextFormat(nonPropagatingTagMap);\n      assert.deepStrictEqual(textFormat, '');\n    });\n\n    it('should throw an error when exceeds the max number of tags', () => {\n      const tags = new TagMap();\n      for (let i = 0; i < MAX_NUMBER_OF_TAGS + 1; i++) {\n        tags.set({ name: `name-${i}` }, { value: `value-${i}` });\n      }\n\n      assert.throws(() => {\n        serializeTextFormat(tags);\n      }, /^Error: Number of tags in the TagMap exceeds limit 180/);\n    });\n  });\n\n  describe('deserializeTextFormat', () => {\n    it('should deserialize empty string', () => {\n      const deserializedTagMap = deserializeTextFormat('');\n      assert.deepStrictEqual(deserializedTagMap.tags.size, 0);\n    });\n\n    it('should deserialize with one key value pair', () => {\n      const deserializedTagMap = deserializeTextFormat('k1=v1');\n      assert.deepStrictEqual(deserializedTagMap.tags.size, 1);\n      assert.deepStrictEqual(deserializedTagMap, singleTagMap);\n    });\n\n    it('should deserialize with multiple pairs', () => {\n      const deserializedTagMap = deserializeTextFormat('k1=v1,k2=v2');\n      assert.deepStrictEqual(deserializedTagMap.tags.size, 2);\n      assert.deepStrictEqual(deserializedTagMap, multipleTagMap);\n    });\n\n    it('should deserialize with white spaces tag', () => {\n      const expectedTagMap = new TagMap();\n      expectedTagMap.set(K1, { value: ' v1' });\n      expectedTagMap.set({ name: ' k2' }, { value: 'v 2' });\n\n      const deserializedTagMap = deserializeTextFormat('k1= v1, k2=v 2');\n      assert.deepStrictEqual(deserializedTagMap.tags.size, 2);\n      assert.deepStrictEqual(deserializedTagMap, expectedTagMap);\n    });\n\n    it('should throw an error when tags are malformed', () => {\n      assert.throws(() => {\n        deserializeTextFormat('k1,v1,k2=v2');\n      }, /^Error: Malformed tag k1/);\n    });\n  });\n});\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"09858263a7ca56680d152a5cd60c0d59a0feee65","contentHash":"bb5ef42bc203fa122f78a9e117e730729cca4232822731b4b35461622483693f"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-time-util.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-time-util.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":15},"end":{"line":18,"column":32}},"2":{"start":{"line":19,"column":20},"end":{"line":19,"column":54}},"3":{"start":{"line":20,"column":0},"end":{"line":47,"column":3}},"4":{"start":{"line":21,"column":25},"end":{"line":21,"column":39}},"5":{"start":{"line":22,"column":22},"end":{"line":22,"column":30}},"6":{"start":{"line":23,"column":4},"end":{"line":28,"column":7}},"7":{"start":{"line":24,"column":8},"end":{"line":24,"column":38}},"8":{"start":{"line":25,"column":8},"end":{"line":25,"column":29}},"9":{"start":{"line":27,"column":8},"end":{"line":27,"column":57}},"10":{"start":{"line":29,"column":4},"end":{"line":37,"column":7}},"11":{"start":{"line":31,"column":8},"end":{"line":31,"column":42}},"12":{"start":{"line":31,"column":31},"end":{"line":31,"column":41}},"13":{"start":{"line":32,"column":8},"end":{"line":32,"column":39}},"14":{"start":{"line":32,"column":25},"end":{"line":32,"column":38}},"15":{"start":{"line":34,"column":8},"end":{"line":34,"column":51}},"16":{"start":{"line":35,"column":28},"end":{"line":35,"column":71}},"17":{"start":{"line":36,"column":8},"end":{"line":36,"column":81}},"18":{"start":{"line":38,"column":4},"end":{"line":46,"column":7}},"19":{"start":{"line":40,"column":8},"end":{"line":40,"column":50}},"20":{"start":{"line":40,"column":31},"end":{"line":40,"column":49}},"21":{"start":{"line":41,"column":8},"end":{"line":41,"column":39}},"22":{"start":{"line":41,"column":25},"end":{"line":41,"column":38}},"23":{"start":{"line":43,"column":8},"end":{"line":43,"column":51}},"24":{"start":{"line":44,"column":28},"end":{"line":44,"column":71}},"25":{"start":{"line":45,"column":8},"end":{"line":45,"column":80}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":20,"column":44},"end":{"line":20,"column":45}},"loc":{"start":{"line":20,"column":50},"end":{"line":47,"column":1}},"line":20},"1":{"name":"(anonymous_1)","decl":{"start":{"line":23,"column":14},"end":{"line":23,"column":15}},"loc":{"start":{"line":23,"column":20},"end":{"line":28,"column":5}},"line":23},"2":{"name":"(anonymous_2)","decl":{"start":{"line":29,"column":73},"end":{"line":29,"column":74}},"loc":{"start":{"line":29,"column":79},"end":{"line":37,"column":5}},"line":29},"3":{"name":"(anonymous_3)","decl":{"start":{"line":31,"column":25},"end":{"line":31,"column":26}},"loc":{"start":{"line":31,"column":31},"end":{"line":31,"column":41}},"line":31},"4":{"name":"(anonymous_4)","decl":{"start":{"line":32,"column":19},"end":{"line":32,"column":20}},"loc":{"start":{"line":32,"column":25},"end":{"line":32,"column":38}},"line":32},"5":{"name":"(anonymous_5)","decl":{"start":{"line":38,"column":40},"end":{"line":38,"column":41}},"loc":{"start":{"line":38,"column":46},"end":{"line":46,"column":5}},"line":38},"6":{"name":"(anonymous_6)","decl":{"start":{"line":40,"column":25},"end":{"line":40,"column":26}},"loc":{"start":{"line":40,"column":31},"end":{"line":40,"column":49}},"line":40},"7":{"name":"(anonymous_7)","decl":{"start":{"line":41,"column":19},"end":{"line":41,"column":20}},"loc":{"start":{"line":41,"column":25},"end":{"line":41,"column":38}},"line":41}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":2,"8":2,"9":2,"10":1,"11":1,"12":2,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":2,"21":1,"22":1,"23":1,"24":1,"25":1},"f":{"0":1,"1":2,"2":1,"3":2,"4":1,"5":1,"6":2,"7":1},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-time-util.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-time-util.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,iCAAiC;AACjC,uDAGiC;AAEjC,QAAQ,CAAC,iCAAiC,EAAE,GAAG,EAAE;IAC/C,MAAM,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC;IACpC,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC;IAE3B,SAAS,CAAC,GAAG,EAAE;QACb,OAAO,CAAC,MAAM,GAAG,YAAY,CAAC;QAC9B,IAAI,CAAC,GAAG,GAAG,SAAS,CAAC;QACrB,iEAAiE;QACjE,qBAAS,CAAC,wBAAwB,EAAE,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;QACxE,mJAAmJ;QACnJ,OAAO,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAClC,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,aAAa,CAAC;QAC/B,sEAAsE;QACtE,qBAAS,CAAC,kBAAkB,EAAE,CAAC;QAE/B,MAAM,WAAW,GAAG,yCAA6B,EAAE,CAAC;QAEpD,MAAM,CAAC,eAAe,CAAC,WAAW,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC;IAC3E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE,GAAG,EAAE;QACvC,mJAAmJ;QACnJ,OAAO,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;QAC1C,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,aAAa,CAAC;QAC/B,sEAAsE;QACtE,qBAAS,CAAC,kBAAkB,EAAE,CAAC;QAE/B,MAAM,WAAW,GAAG,yCAA6B,EAAE,CAAC;QAEpD,MAAM,CAAC,eAAe,CAAC,WAAW,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC;IAC1E,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 the \"License\";\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport {\n  getTimestampWithProcessHRTime,\n  TEST_ONLY,\n} from '../src/common/time-util';\n\ndescribe('getTimestampWithProcessHRTime()', () => {\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  it('should return timestamp with respect to now and process.hrtime', () => {\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n\n    const currentTime = getTimestampWithProcessHRTime();\n\n    assert.deepStrictEqual(currentTime, { seconds: 1450000100, nanos: 1e7 });\n  });\n\n  it('should handle excess of nanos', () => {\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 10000000012];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n\n    const currentTime = getTimestampWithProcessHRTime();\n\n    assert.deepStrictEqual(currentTime, { seconds: 1450000101, nanos: 12 });\n  });\n});\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"fbbf23f546dd5a65663dcf52edaa785d12f3a0ab","contentHash":"58b516a5cbe7ce85bfb7344a829fbb4e29399f119da5866853afa368d82ed29d"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-tracer-base.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-tracer-base.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":15},"end":{"line":18,"column":32}},"2":{"start":{"line":19,"column":13},"end":{"line":19,"column":28}},"3":{"start":{"line":20,"column":15},"end":{"line":20,"column":46}},"4":{"start":{"line":21,"column":30},"end":{"line":21,"column":89}},"5":{"start":{"line":22,"column":25},"end":{"line":22,"column":79}},"6":{"start":{"line":23,"column":15},"end":{"line":23,"column":49}},"7":{"start":{"line":24,"column":22},"end":{"line":24,"column":63}},"8":{"start":{"line":25,"column":14},"end":{"line":25,"column":49}},"9":{"start":{"line":29,"column":8},"end":{"line":29,"column":27}},"10":{"start":{"line":34,"column":8},"end":{"line":34,"column":25}},"11":{"start":{"line":37,"column":22},"end":{"line":39,"column":1}},"12":{"start":{"line":40,"column":0},"end":{"line":395,"column":3}},"13":{"start":{"line":41,"column":20},"end":{"line":41,"column":36}},"14":{"start":{"line":43,"column":4},"end":{"line":48,"column":7}},"15":{"start":{"line":44,"column":8},"end":{"line":47,"column":11}},"16":{"start":{"line":45,"column":27},"end":{"line":45,"column":61}},"17":{"start":{"line":46,"column":12},"end":{"line":46,"column":70}},"18":{"start":{"line":50,"column":4},"end":{"line":63,"column":7}},"19":{"start":{"line":52,"column":8},"end":{"line":56,"column":11}},"20":{"start":{"line":53,"column":27},"end":{"line":53,"column":61}},"21":{"start":{"line":54,"column":12},"end":{"line":54,"column":53}},"22":{"start":{"line":55,"column":12},"end":{"line":55,"column":56}},"23":{"start":{"line":57,"column":8},"end":{"line":59,"column":11}},"24":{"start":{"line":58,"column":12},"end":{"line":58,"column":77}},"25":{"start":{"line":60,"column":8},"end":{"line":62,"column":11}},"26":{"start":{"line":61,"column":12},"end":{"line":61,"column":59}},"27":{"start":{"line":65,"column":4},"end":{"line":82,"column":7}},"28":{"start":{"line":67,"column":8},"end":{"line":71,"column":11}},"29":{"start":{"line":68,"column":12},"end":{"line":68,"column":56}},"30":{"start":{"line":69,"column":12},"end":{"line":69,"column":45}},"31":{"start":{"line":70,"column":12},"end":{"line":70,"column":56}},"32":{"start":{"line":72,"column":8},"end":{"line":76,"column":11}},"33":{"start":{"line":73,"column":29},"end":{"line":73,"column":53}},"34":{"start":{"line":74,"column":12},"end":{"line":74,"column":64}},"35":{"start":{"line":75,"column":12},"end":{"line":75,"column":52}},"36":{"start":{"line":77,"column":8},"end":{"line":81,"column":11}},"37":{"start":{"line":78,"column":12},"end":{"line":80,"column":13}},"38":{"start":{"line":79,"column":16},"end":{"line":79,"column":62}},"39":{"start":{"line":84,"column":4},"end":{"line":98,"column":7}},"40":{"start":{"line":86,"column":8},"end":{"line":90,"column":11}},"41":{"start":{"line":87,"column":12},"end":{"line":87,"column":56}},"42":{"start":{"line":88,"column":12},"end":{"line":88,"column":45}},"43":{"start":{"line":89,"column":12},"end":{"line":89,"column":56}},"44":{"start":{"line":91,"column":8},"end":{"line":97,"column":11}},"45":{"start":{"line":92,"column":29},"end":{"line":92,"column":53}},"46":{"start":{"line":93,"column":12},"end":{"line":93,"column":64}},"47":{"start":{"line":94,"column":12},"end":{"line":94,"column":52}},"48":{"start":{"line":95,"column":12},"end":{"line":95,"column":58}},"49":{"start":{"line":96,"column":12},"end":{"line":96,"column":64}},"50":{"start":{"line":100,"column":4},"end":{"line":109,"column":7}},"51":{"start":{"line":101,"column":8},"end":{"line":108,"column":11}},"52":{"start":{"line":102,"column":27},"end":{"line":102,"column":61}},"53":{"start":{"line":103,"column":12},"end":{"line":103,"column":53}},"54":{"start":{"line":104,"column":12},"end":{"line":104,"column":40}},"55":{"start":{"line":105,"column":12},"end":{"line":105,"column":52}},"56":{"start":{"line":106,"column":12},"end":{"line":106,"column":26}},"57":{"start":{"line":107,"column":12},"end":{"line":107,"column":53}},"58":{"start":{"line":111,"column":4},"end":{"line":126,"column":7}},"59":{"start":{"line":113,"column":8},"end":{"line":119,"column":11}},"60":{"start":{"line":114,"column":27},"end":{"line":114,"column":61}},"61":{"start":{"line":115,"column":12},"end":{"line":115,"column":40}},"62":{"start":{"line":116,"column":12},"end":{"line":118,"column":15}},"63":{"start":{"line":117,"column":16},"end":{"line":117,"column":41}},"64":{"start":{"line":120,"column":8},"end":{"line":122,"column":11}},"65":{"start":{"line":121,"column":12},"end":{"line":121,"column":60}},"66":{"start":{"line":123,"column":8},"end":{"line":125,"column":11}},"67":{"start":{"line":124,"column":12},"end":{"line":124,"column":45}},"68":{"start":{"line":127,"column":4},"end":{"line":142,"column":7}},"69":{"start":{"line":128,"column":23},"end":{"line":128,"column":57}},"70":{"start":{"line":129,"column":23},"end":{"line":129,"column":42}},"71":{"start":{"line":130,"column":8},"end":{"line":135,"column":11}},"72":{"start":{"line":131,"column":12},"end":{"line":131,"column":33}},"73":{"start":{"line":132,"column":12},"end":{"line":134,"column":15}},"74":{"start":{"line":133,"column":16},"end":{"line":133,"column":86}},"75":{"start":{"line":136,"column":8},"end":{"line":141,"column":11}},"76":{"start":{"line":137,"column":12},"end":{"line":137,"column":33}},"77":{"start":{"line":138,"column":12},"end":{"line":140,"column":15}},"78":{"start":{"line":139,"column":16},"end":{"line":139,"column":36}},"79":{"start":{"line":143,"column":4},"end":{"line":158,"column":7}},"80":{"start":{"line":144,"column":23},"end":{"line":144,"column":57}},"81":{"start":{"line":145,"column":23},"end":{"line":145,"column":42}},"82":{"start":{"line":146,"column":8},"end":{"line":151,"column":11}},"83":{"start":{"line":147,"column":12},"end":{"line":147,"column":33}},"84":{"start":{"line":148,"column":12},"end":{"line":150,"column":15}},"85":{"start":{"line":149,"column":16},"end":{"line":149,"column":36}},"86":{"start":{"line":152,"column":8},"end":{"line":157,"column":11}},"87":{"start":{"line":153,"column":12},"end":{"line":153,"column":33}},"88":{"start":{"line":154,"column":12},"end":{"line":156,"column":15}},"89":{"start":{"line":155,"column":16},"end":{"line":155,"column":86}},"90":{"start":{"line":159,"column":4},"end":{"line":167,"column":7}},"91":{"start":{"line":160,"column":8},"end":{"line":166,"column":11}},"92":{"start":{"line":161,"column":27},"end":{"line":161,"column":61}},"93":{"start":{"line":162,"column":12},"end":{"line":162,"column":53}},"94":{"start":{"line":163,"column":12},"end":{"line":165,"column":15}},"95":{"start":{"line":164,"column":16},"end":{"line":164,"column":86}},"96":{"start":{"line":168,"column":4},"end":{"line":238,"column":7}},"97":{"start":{"line":169,"column":29},"end":{"line":172,"column":9}},"98":{"start":{"line":173,"column":8},"end":{"line":181,"column":11}},"99":{"start":{"line":174,"column":27},"end":{"line":174,"column":61}},"100":{"start":{"line":175,"column":12},"end":{"line":175,"column":40}},"101":{"start":{"line":176,"column":12},"end":{"line":180,"column":15}},"102":{"start":{"line":177,"column":16},"end":{"line":177,"column":36}},"103":{"start":{"line":178,"column":16},"end":{"line":178,"column":69}},"104":{"start":{"line":179,"column":16},"end":{"line":179,"column":69}},"105":{"start":{"line":182,"column":38},"end":{"line":189,"column":9}},"106":{"start":{"line":190,"column":8},"end":{"line":201,"column":11}},"107":{"start":{"line":191,"column":27},"end":{"line":191,"column":61}},"108":{"start":{"line":192,"column":12},"end":{"line":192,"column":40}},"109":{"start":{"line":193,"column":12},"end":{"line":193,"column":61}},"110":{"start":{"line":194,"column":12},"end":{"line":200,"column":15}},"111":{"start":{"line":195,"column":16},"end":{"line":195,"column":36}},"112":{"start":{"line":196,"column":16},"end":{"line":196,"column":69}},"113":{"start":{"line":197,"column":16},"end":{"line":197,"column":69}},"114":{"start":{"line":198,"column":16},"end":{"line":198,"column":84}},"115":{"start":{"line":199,"column":16},"end":{"line":199,"column":88}},"116":{"start":{"line":202,"column":8},"end":{"line":214,"column":11}},"117":{"start":{"line":203,"column":27},"end":{"line":203,"column":61}},"118":{"start":{"line":204,"column":12},"end":{"line":204,"column":40}},"119":{"start":{"line":205,"column":12},"end":{"line":205,"column":51}},"120":{"start":{"line":206,"column":12},"end":{"line":213,"column":15}},"121":{"start":{"line":207,"column":16},"end":{"line":207,"column":36}},"122":{"start":{"line":208,"column":16},"end":{"line":208,"column":86}},"123":{"start":{"line":209,"column":16},"end":{"line":209,"column":69}},"124":{"start":{"line":210,"column":16},"end":{"line":210,"column":69}},"125":{"start":{"line":211,"column":16},"end":{"line":211,"column":84}},"126":{"start":{"line":212,"column":16},"end":{"line":212,"column":88}},"127":{"start":{"line":215,"column":8},"end":{"line":222,"column":11}},"128":{"start":{"line":216,"column":27},"end":{"line":216,"column":61}},"129":{"start":{"line":217,"column":12},"end":{"line":217,"column":40}},"130":{"start":{"line":218,"column":12},"end":{"line":218,"column":101}},"131":{"start":{"line":219,"column":12},"end":{"line":219,"column":94}},"132":{"start":{"line":220,"column":12},"end":{"line":220,"column":89}},"133":{"start":{"line":221,"column":12},"end":{"line":221,"column":97}},"134":{"start":{"line":223,"column":8},"end":{"line":237,"column":11}},"135":{"start":{"line":224,"column":63},"end":{"line":229,"column":13}},"136":{"start":{"line":230,"column":12},"end":{"line":230,"column":83}},"137":{"start":{"line":231,"column":27},"end":{"line":231,"column":61}},"138":{"start":{"line":232,"column":12},"end":{"line":232,"column":40}},"139":{"start":{"line":233,"column":12},"end":{"line":233,"column":94}},"140":{"start":{"line":234,"column":12},"end":{"line":234,"column":87}},"141":{"start":{"line":235,"column":12},"end":{"line":235,"column":82}},"142":{"start":{"line":236,"column":12},"end":{"line":236,"column":91}},"143":{"start":{"line":240,"column":4},"end":{"line":342,"column":7}},"144":{"start":{"line":243,"column":8},"end":{"line":253,"column":11}},"145":{"start":{"line":244,"column":12},"end":{"line":244,"column":56}},"146":{"start":{"line":245,"column":12},"end":{"line":245,"column":40}},"147":{"start":{"line":246,"column":12},"end":{"line":252,"column":15}},"148":{"start":{"line":247,"column":16},"end":{"line":251,"column":19}},"149":{"start":{"line":254,"column":8},"end":{"line":256,"column":11}},"150":{"start":{"line":255,"column":12},"end":{"line":255,"column":51}},"151":{"start":{"line":257,"column":8},"end":{"line":261,"column":11}},"152":{"start":{"line":258,"column":12},"end":{"line":258,"column":36}},"153":{"start":{"line":259,"column":12},"end":{"line":259,"column":54}},"154":{"start":{"line":260,"column":12},"end":{"line":260,"column":65}},"155":{"start":{"line":262,"column":8},"end":{"line":273,"column":11}},"156":{"start":{"line":263,"column":12},"end":{"line":272,"column":15}},"157":{"start":{"line":264,"column":39},"end":{"line":268,"column":18}},"158":{"start":{"line":269,"column":16},"end":{"line":269,"column":50}},"159":{"start":{"line":270,"column":16},"end":{"line":270,"column":67}},"160":{"start":{"line":271,"column":16},"end":{"line":271,"column":79}},"161":{"start":{"line":274,"column":8},"end":{"line":284,"column":11}},"162":{"start":{"line":275,"column":12},"end":{"line":283,"column":15}},"163":{"start":{"line":276,"column":39},"end":{"line":279,"column":18}},"164":{"start":{"line":280,"column":16},"end":{"line":280,"column":50}},"165":{"start":{"line":281,"column":16},"end":{"line":281,"column":68}},"166":{"start":{"line":282,"column":16},"end":{"line":282,"column":84}},"167":{"start":{"line":285,"column":8},"end":{"line":291,"column":11}},"168":{"start":{"line":286,"column":12},"end":{"line":290,"column":15}},"169":{"start":{"line":287,"column":39},"end":{"line":287,"column":62}},"170":{"start":{"line":288,"column":16},"end":{"line":288,"column":69}},"171":{"start":{"line":289,"column":16},"end":{"line":289,"column":84}},"172":{"start":{"line":292,"column":8},"end":{"line":327,"column":11}},"173":{"start":{"line":293,"column":12},"end":{"line":326,"column":15}},"174":{"start":{"line":294,"column":16},"end":{"line":294,"column":65}},"175":{"start":{"line":295,"column":31},"end":{"line":299,"column":18}},"176":{"start":{"line":300,"column":16},"end":{"line":300,"column":65}},"177":{"start":{"line":301,"column":16},"end":{"line":301,"column":63}},"178":{"start":{"line":302,"column":31},"end":{"line":306,"column":18}},"179":{"start":{"line":307,"column":16},"end":{"line":307,"column":65}},"180":{"start":{"line":308,"column":36},"end":{"line":312,"column":18}},"181":{"start":{"line":313,"column":16},"end":{"line":313,"column":65}},"182":{"start":{"line":314,"column":16},"end":{"line":314,"column":63}},"183":{"start":{"line":315,"column":16},"end":{"line":315,"column":63}},"184":{"start":{"line":316,"column":16},"end":{"line":316,"column":68}},"185":{"start":{"line":317,"column":16},"end":{"line":317,"column":61}},"186":{"start":{"line":318,"column":16},"end":{"line":318,"column":62}},"187":{"start":{"line":319,"column":16},"end":{"line":319,"column":62}},"188":{"start":{"line":320,"column":16},"end":{"line":320,"column":72}},"189":{"start":{"line":321,"column":16},"end":{"line":321,"column":59}},"190":{"start":{"line":322,"column":16},"end":{"line":322,"column":65}},"191":{"start":{"line":323,"column":16},"end":{"line":323,"column":59}},"192":{"start":{"line":324,"column":16},"end":{"line":324,"column":64}},"193":{"start":{"line":325,"column":16},"end":{"line":325,"column":72}},"194":{"start":{"line":328,"column":8},"end":{"line":341,"column":11}},"195":{"start":{"line":329,"column":12},"end":{"line":329,"column":74}},"196":{"start":{"line":330,"column":12},"end":{"line":330,"column":40}},"197":{"start":{"line":331,"column":12},"end":{"line":340,"column":15}},"198":{"start":{"line":332,"column":29},"end":{"line":335,"column":18}},"199":{"start":{"line":336,"column":16},"end":{"line":338,"column":17}},"200":{"start":{"line":336,"column":29},"end":{"line":336,"column":30}},"201":{"start":{"line":337,"column":20},"end":{"line":337,"column":54}},"202":{"start":{"line":339,"column":16},"end":{"line":339,"column":76}},"203":{"start":{"line":344,"column":4},"end":{"line":354,"column":7}},"204":{"start":{"line":345,"column":8},"end":{"line":353,"column":11}},"205":{"start":{"line":346,"column":27},"end":{"line":346,"column":61}},"206":{"start":{"line":347,"column":12},"end":{"line":347,"column":40}},"207":{"start":{"line":348,"column":25},"end":{"line":351,"column":14}},"208":{"start":{"line":352,"column":12},"end":{"line":352,"column":69}},"209":{"start":{"line":356,"column":4},"end":{"line":381,"column":7}},"210":{"start":{"line":361,"column":8},"end":{"line":376,"column":11}},"211":{"start":{"line":362,"column":12},"end":{"line":362,"column":56}},"212":{"start":{"line":363,"column":12},"end":{"line":366,"column":21}},"213":{"start":{"line":367,"column":12},"end":{"line":367,"column":39}},"214":{"start":{"line":368,"column":12},"end":{"line":375,"column":15}},"215":{"start":{"line":369,"column":16},"end":{"line":369,"column":41}},"216":{"start":{"line":370,"column":16},"end":{"line":374,"column":19}},"217":{"start":{"line":377,"column":8},"end":{"line":380,"column":11}},"218":{"start":{"line":378,"column":12},"end":{"line":378,"column":93}},"219":{"start":{"line":379,"column":12},"end":{"line":379,"column":84}},"220":{"start":{"line":383,"column":4},"end":{"line":394,"column":7}},"221":{"start":{"line":384,"column":8},"end":{"line":393,"column":11}},"222":{"start":{"line":385,"column":27},"end":{"line":385,"column":61}},"223":{"start":{"line":386,"column":34},"end":{"line":386,"column":54}},"224":{"start":{"line":387,"column":12},"end":{"line":387,"column":60}},"225":{"start":{"line":388,"column":12},"end":{"line":388,"column":40}},"226":{"start":{"line":389,"column":12},"end":{"line":392,"column":15}},"227":{"start":{"line":390,"column":16},"end":{"line":390,"column":31}},"228":{"start":{"line":391,"column":16},"end":{"line":391,"column":90}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":27,"column":4},"end":{"line":27,"column":5}},"loc":{"start":{"line":27,"column":18},"end":{"line":30,"column":5}},"line":27},"1":{"name":"(anonymous_1)","decl":{"start":{"line":31,"column":4},"end":{"line":31,"column":5}},"loc":{"start":{"line":31,"column":22},"end":{"line":31,"column":25}},"line":31},"2":{"name":"(anonymous_2)","decl":{"start":{"line":33,"column":4},"end":{"line":33,"column":5}},"loc":{"start":{"line":33,"column":20},"end":{"line":35,"column":5}},"line":33},"3":{"name":"(anonymous_3)","decl":{"start":{"line":40,"column":24},"end":{"line":40,"column":25}},"loc":{"start":{"line":40,"column":30},"end":{"line":395,"column":1}},"line":40},"4":{"name":"(anonymous_4)","decl":{"start":{"line":43,"column":29},"end":{"line":43,"column":30}},"loc":{"start":{"line":43,"column":35},"end":{"line":48,"column":5}},"line":43},"5":{"name":"(anonymous_5)","decl":{"start":{"line":44,"column":46},"end":{"line":44,"column":47}},"loc":{"start":{"line":44,"column":52},"end":{"line":47,"column":9}},"line":44},"6":{"name":"(anonymous_6)","decl":{"start":{"line":50,"column":24},"end":{"line":50,"column":25}},"loc":{"start":{"line":50,"column":30},"end":{"line":63,"column":5}},"line":50},"7":{"name":"(anonymous_7)","decl":{"start":{"line":52,"column":15},"end":{"line":52,"column":16}},"loc":{"start":{"line":52,"column":21},"end":{"line":56,"column":9}},"line":52},"8":{"name":"(anonymous_8)","decl":{"start":{"line":57,"column":46},"end":{"line":57,"column":47}},"loc":{"start":{"line":57,"column":52},"end":{"line":59,"column":9}},"line":57},"9":{"name":"(anonymous_9)","decl":{"start":{"line":60,"column":36},"end":{"line":60,"column":37}},"loc":{"start":{"line":60,"column":42},"end":{"line":62,"column":9}},"line":60},"10":{"name":"(anonymous_10)","decl":{"start":{"line":65,"column":67},"end":{"line":65,"column":68}},"loc":{"start":{"line":65,"column":73},"end":{"line":82,"column":5}},"line":65},"11":{"name":"(anonymous_11)","decl":{"start":{"line":67,"column":15},"end":{"line":67,"column":16}},"loc":{"start":{"line":67,"column":21},"end":{"line":71,"column":9}},"line":67},"12":{"name":"(anonymous_12)","decl":{"start":{"line":72,"column":77},"end":{"line":72,"column":78}},"loc":{"start":{"line":72,"column":83},"end":{"line":76,"column":9}},"line":72},"13":{"name":"(anonymous_13)","decl":{"start":{"line":77,"column":59},"end":{"line":77,"column":60}},"loc":{"start":{"line":77,"column":65},"end":{"line":81,"column":9}},"line":77},"14":{"name":"(anonymous_14)","decl":{"start":{"line":84,"column":46},"end":{"line":84,"column":47}},"loc":{"start":{"line":84,"column":52},"end":{"line":98,"column":5}},"line":84},"15":{"name":"(anonymous_15)","decl":{"start":{"line":86,"column":15},"end":{"line":86,"column":16}},"loc":{"start":{"line":86,"column":21},"end":{"line":90,"column":9}},"line":86},"16":{"name":"(anonymous_16)","decl":{"start":{"line":91,"column":77},"end":{"line":91,"column":78}},"loc":{"start":{"line":91,"column":83},"end":{"line":97,"column":9}},"line":91},"17":{"name":"(anonymous_17)","decl":{"start":{"line":100,"column":23},"end":{"line":100,"column":24}},"loc":{"start":{"line":100,"column":29},"end":{"line":109,"column":5}},"line":100},"18":{"name":"(anonymous_18)","decl":{"start":{"line":101,"column":45},"end":{"line":101,"column":46}},"loc":{"start":{"line":101,"column":51},"end":{"line":108,"column":9}},"line":101},"19":{"name":"(anonymous_19)","decl":{"start":{"line":111,"column":45},"end":{"line":111,"column":46}},"loc":{"start":{"line":111,"column":51},"end":{"line":126,"column":5}},"line":111},"20":{"name":"(anonymous_20)","decl":{"start":{"line":113,"column":15},"end":{"line":113,"column":16}},"loc":{"start":{"line":113,"column":21},"end":{"line":119,"column":9}},"line":113},"21":{"name":"(anonymous_21)","decl":{"start":{"line":116,"column":42},"end":{"line":116,"column":43}},"loc":{"start":{"line":116,"column":54},"end":{"line":118,"column":13}},"line":116},"22":{"name":"(anonymous_22)","decl":{"start":{"line":120,"column":52},"end":{"line":120,"column":53}},"loc":{"start":{"line":120,"column":58},"end":{"line":122,"column":9}},"line":120},"23":{"name":"(anonymous_23)","decl":{"start":{"line":123,"column":40},"end":{"line":123,"column":41}},"loc":{"start":{"line":123,"column":46},"end":{"line":125,"column":9}},"line":123},"24":{"name":"(anonymous_24)","decl":{"start":{"line":127,"column":51},"end":{"line":127,"column":52}},"loc":{"start":{"line":127,"column":57},"end":{"line":142,"column":5}},"line":127},"25":{"name":"(anonymous_25)","decl":{"start":{"line":130,"column":61},"end":{"line":130,"column":62}},"loc":{"start":{"line":130,"column":67},"end":{"line":135,"column":9}},"line":130},"26":{"name":"(anonymous_26)","decl":{"start":{"line":132,"column":42},"end":{"line":132,"column":43}},"loc":{"start":{"line":132,"column":54},"end":{"line":134,"column":13}},"line":132},"27":{"name":"(anonymous_27)","decl":{"start":{"line":136,"column":97},"end":{"line":136,"column":98}},"loc":{"start":{"line":136,"column":103},"end":{"line":141,"column":9}},"line":136},"28":{"name":"(anonymous_28)","decl":{"start":{"line":138,"column":68},"end":{"line":138,"column":69}},"loc":{"start":{"line":138,"column":80},"end":{"line":140,"column":13}},"line":138},"29":{"name":"(anonymous_29)","decl":{"start":{"line":143,"column":52},"end":{"line":143,"column":53}},"loc":{"start":{"line":143,"column":58},"end":{"line":158,"column":5}},"line":143},"30":{"name":"(anonymous_30)","decl":{"start":{"line":146,"column":53},"end":{"line":146,"column":54}},"loc":{"start":{"line":146,"column":59},"end":{"line":151,"column":9}},"line":146},"31":{"name":"(anonymous_31)","decl":{"start":{"line":148,"column":42},"end":{"line":148,"column":43}},"loc":{"start":{"line":148,"column":54},"end":{"line":150,"column":13}},"line":148},"32":{"name":"(anonymous_32)","decl":{"start":{"line":152,"column":104},"end":{"line":152,"column":105}},"loc":{"start":{"line":152,"column":110},"end":{"line":157,"column":9}},"line":152},"33":{"name":"(anonymous_33)","decl":{"start":{"line":154,"column":68},"end":{"line":154,"column":69}},"loc":{"start":{"line":154,"column":80},"end":{"line":156,"column":13}},"line":154},"34":{"name":"(anonymous_34)","decl":{"start":{"line":159,"column":47},"end":{"line":159,"column":48}},"loc":{"start":{"line":159,"column":53},"end":{"line":167,"column":5}},"line":159},"35":{"name":"(anonymous_35)","decl":{"start":{"line":160,"column":81},"end":{"line":160,"column":82}},"loc":{"start":{"line":160,"column":87},"end":{"line":166,"column":9}},"line":160},"36":{"name":"(anonymous_36)","decl":{"start":{"line":163,"column":42},"end":{"line":163,"column":43}},"loc":{"start":{"line":163,"column":54},"end":{"line":165,"column":13}},"line":163},"37":{"name":"(anonymous_37)","decl":{"start":{"line":168,"column":57},"end":{"line":168,"column":58}},"loc":{"start":{"line":168,"column":63},"end":{"line":238,"column":5}},"line":168},"38":{"name":"(anonymous_38)","decl":{"start":{"line":173,"column":66},"end":{"line":173,"column":67}},"loc":{"start":{"line":173,"column":72},"end":{"line":181,"column":9}},"line":173},"39":{"name":"(anonymous_39)","decl":{"start":{"line":176,"column":47},"end":{"line":176,"column":48}},"loc":{"start":{"line":176,"column":59},"end":{"line":180,"column":13}},"line":176},"40":{"name":"(anonymous_40)","decl":{"start":{"line":190,"column":62},"end":{"line":190,"column":63}},"loc":{"start":{"line":190,"column":68},"end":{"line":201,"column":9}},"line":190},"41":{"name":"(anonymous_41)","decl":{"start":{"line":194,"column":47},"end":{"line":194,"column":48}},"loc":{"start":{"line":194,"column":59},"end":{"line":200,"column":13}},"line":194},"42":{"name":"(anonymous_42)","decl":{"start":{"line":202,"column":101},"end":{"line":202,"column":102}},"loc":{"start":{"line":202,"column":107},"end":{"line":214,"column":9}},"line":202},"43":{"name":"(anonymous_43)","decl":{"start":{"line":206,"column":47},"end":{"line":206,"column":48}},"loc":{"start":{"line":206,"column":59},"end":{"line":213,"column":13}},"line":206},"44":{"name":"(anonymous_44)","decl":{"start":{"line":215,"column":115},"end":{"line":215,"column":116}},"loc":{"start":{"line":215,"column":121},"end":{"line":222,"column":9}},"line":215},"45":{"name":"(anonymous_45)","decl":{"start":{"line":223,"column":142},"end":{"line":223,"column":143}},"loc":{"start":{"line":223,"column":148},"end":{"line":237,"column":9}},"line":223},"46":{"name":"(anonymous_46)","decl":{"start":{"line":240,"column":33},"end":{"line":240,"column":34}},"loc":{"start":{"line":240,"column":39},"end":{"line":342,"column":5}},"line":240},"47":{"name":"(anonymous_47)","decl":{"start":{"line":243,"column":15},"end":{"line":243,"column":16}},"loc":{"start":{"line":243,"column":21},"end":{"line":253,"column":9}},"line":243},"48":{"name":"(anonymous_48)","decl":{"start":{"line":246,"column":42},"end":{"line":246,"column":43}},"loc":{"start":{"line":246,"column":54},"end":{"line":252,"column":13}},"line":246},"49":{"name":"(anonymous_49)","decl":{"start":{"line":254,"column":44},"end":{"line":254,"column":45}},"loc":{"start":{"line":254,"column":50},"end":{"line":256,"column":9}},"line":254},"50":{"name":"(anonymous_50)","decl":{"start":{"line":257,"column":34},"end":{"line":257,"column":35}},"loc":{"start":{"line":257,"column":40},"end":{"line":261,"column":9}},"line":257},"51":{"name":"(anonymous_51)","decl":{"start":{"line":262,"column":50},"end":{"line":262,"column":51}},"loc":{"start":{"line":262,"column":56},"end":{"line":273,"column":9}},"line":262},"52":{"name":"(anonymous_52)","decl":{"start":{"line":263,"column":42},"end":{"line":263,"column":43}},"loc":{"start":{"line":263,"column":54},"end":{"line":272,"column":13}},"line":263},"53":{"name":"(anonymous_53)","decl":{"start":{"line":274,"column":55},"end":{"line":274,"column":56}},"loc":{"start":{"line":274,"column":61},"end":{"line":284,"column":9}},"line":274},"54":{"name":"(anonymous_54)","decl":{"start":{"line":275,"column":42},"end":{"line":275,"column":43}},"loc":{"start":{"line":275,"column":54},"end":{"line":283,"column":13}},"line":275},"55":{"name":"(anonymous_55)","decl":{"start":{"line":285,"column":59},"end":{"line":285,"column":60}},"loc":{"start":{"line":285,"column":65},"end":{"line":291,"column":9}},"line":285},"56":{"name":"(anonymous_56)","decl":{"start":{"line":286,"column":42},"end":{"line":286,"column":43}},"loc":{"start":{"line":286,"column":54},"end":{"line":290,"column":13}},"line":286},"57":{"name":"(anonymous_57)","decl":{"start":{"line":292,"column":45},"end":{"line":292,"column":46}},"loc":{"start":{"line":292,"column":51},"end":{"line":327,"column":9}},"line":292},"58":{"name":"(anonymous_58)","decl":{"start":{"line":293,"column":42},"end":{"line":293,"column":43}},"loc":{"start":{"line":293,"column":54},"end":{"line":326,"column":13}},"line":293},"59":{"name":"(anonymous_59)","decl":{"start":{"line":328,"column":74},"end":{"line":328,"column":75}},"loc":{"start":{"line":328,"column":80},"end":{"line":341,"column":9}},"line":328},"60":{"name":"(anonymous_60)","decl":{"start":{"line":331,"column":42},"end":{"line":331,"column":43}},"loc":{"start":{"line":331,"column":54},"end":{"line":340,"column":13}},"line":331},"61":{"name":"(anonymous_61)","decl":{"start":{"line":344,"column":56},"end":{"line":344,"column":57}},"loc":{"start":{"line":344,"column":62},"end":{"line":354,"column":5}},"line":344},"62":{"name":"(anonymous_62)","decl":{"start":{"line":345,"column":72},"end":{"line":345,"column":73}},"loc":{"start":{"line":345,"column":78},"end":{"line":353,"column":9}},"line":345},"63":{"name":"(anonymous_63)","decl":{"start":{"line":356,"column":69},"end":{"line":356,"column":70}},"loc":{"start":{"line":356,"column":75},"end":{"line":381,"column":5}},"line":356},"64":{"name":"(anonymous_64)","decl":{"start":{"line":361,"column":15},"end":{"line":361,"column":16}},"loc":{"start":{"line":361,"column":21},"end":{"line":376,"column":9}},"line":361},"65":{"name":"(anonymous_65)","decl":{"start":{"line":368,"column":42},"end":{"line":368,"column":43}},"loc":{"start":{"line":368,"column":54},"end":{"line":375,"column":13}},"line":368},"66":{"name":"(anonymous_66)","decl":{"start":{"line":377,"column":45},"end":{"line":377,"column":46}},"loc":{"start":{"line":377,"column":51},"end":{"line":380,"column":9}},"line":377},"67":{"name":"(anonymous_67)","decl":{"start":{"line":383,"column":28},"end":{"line":383,"column":29}},"loc":{"start":{"line":383,"column":34},"end":{"line":394,"column":5}},"line":383},"68":{"name":"(anonymous_68)","decl":{"start":{"line":384,"column":63},"end":{"line":384,"column":64}},"loc":{"start":{"line":384,"column":69},"end":{"line":393,"column":9}},"line":384},"69":{"name":"(anonymous_69)","decl":{"start":{"line":389,"column":42},"end":{"line":389,"column":43}},"loc":{"start":{"line":389,"column":54},"end":{"line":392,"column":13}},"line":389}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":3,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"71":1,"72":1,"73":1,"74":1,"75":1,"76":1,"77":1,"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1,"86":1,"87":1,"88":1,"89":1,"90":1,"91":1,"92":1,"93":1,"94":1,"95":1,"96":1,"97":1,"98":1,"99":1,"100":1,"101":1,"102":1,"103":1,"104":1,"105":1,"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"112":1,"113":1,"114":1,"115":1,"116":1,"117":1,"118":1,"119":1,"120":1,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"136":1,"137":1,"138":1,"139":1,"140":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"149":1,"150":1,"151":1,"152":1,"153":1,"154":1,"155":1,"156":1,"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"172":1,"173":1,"174":1,"175":1,"176":1,"177":1,"178":1,"179":1,"180":1,"181":1,"182":1,"183":1,"184":1,"185":1,"186":1,"187":1,"188":1,"189":1,"190":1,"191":1,"192":1,"193":1,"194":1,"195":1,"196":1,"197":1,"198":1,"199":1,"200":1,"201":40,"202":1,"203":1,"204":1,"205":1,"206":1,"207":1,"208":1,"209":1,"210":1,"211":1,"212":1,"213":1,"214":1,"215":1,"216":1,"217":1,"218":1,"219":1,"220":1,"221":1,"222":1,"223":1,"224":1,"225":1,"226":1,"227":1,"228":1},"f":{"0":3,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-tracer-base.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-tracer-base.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,iCAAiC;AACjC,6BAA6B;AAE7B,+CAAoD;AAGpD,0FAAoF;AACpF,gFAA2E;AAC3E,kDAA+C;AAC/C,gEAAgE;AAChE,kDAAkD;AAGlD,MAAM,cAAc;IAApB;QACE,2BAA2B;QAC3B,cAAS,GAAG,CAAC,CAAC;IAMhB,CAAC;IALC,WAAW,CAAC,IAAU,IAAS,CAAC;IAChC,mCAAmC;IACnC,SAAS,CAAC,IAAU;QAClB,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;CACF;AAED,MAAM,aAAa,GAAiB;IAClC,YAAY,EAAE,GAAG;CAClB,CAAC;AAEF,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IAC3B,MAAM,OAAO,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;IAEjC,sCAAsC;IACtC,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;YACzC,MAAM,MAAM,GAAG,IAAI,4BAAc,EAAE,CAAC;YACpC,MAAM,CAAC,EAAE,CAAC,MAAM,YAAY,4BAAc,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,8CAA8C;IAC9C,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACvB,IAAI,aAA+B,CAAC;QACpC,MAAM,CAAC,GAAG,EAAE;YACV,MAAM,MAAM,GAAG,IAAI,4BAAc,EAAE,CAAC;YACpC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YACzC,aAAa,GAAG,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;YACzC,MAAM,CAAC,EAAE,CAAC,aAAa,YAAY,4BAAc,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uBAAuB,EAAE,GAAG,EAAE;YAC/B,MAAM,CAAC,WAAW,CAAC,aAAa,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,mDAAmD;IACnD,QAAQ,CAAC,oDAAoD,EAAE,GAAG,EAAE;QAClE,IAAI,MAAwB,EAAE,SAAyB,CAAC;QACxD,MAAM,CAAC,GAAG,EAAE;YACV,MAAM,GAAG,IAAI,4BAAc,EAAE,CAAC;YAC9B,SAAS,GAAG,IAAI,cAAc,EAAE,CAAC;YACjC,MAAM,CAAC,yBAAyB,CAAC,SAAS,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;YACxE,MAAM,QAAQ,GAAG,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;YAC1C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACpD,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;YACtD,KAAK,MAAM,QAAQ,IAAI,MAAM,CAAC,cAAc,EAAE;gBAC5C,MAAM,CAAC,EAAE,CAAC,QAAQ,YAAY,cAAc,CAAC,CAAC;aAC/C;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,iDAAiD;IACjD,QAAQ,CAAC,+BAA+B,EAAE,GAAG,EAAE;QAC7C,IAAI,MAAwB,EAAE,SAAyB,CAAC;QACxD,MAAM,CAAC,GAAG,EAAE;YACV,MAAM,GAAG,IAAI,4BAAc,EAAE,CAAC;YAC9B,SAAS,GAAG,IAAI,cAAc,EAAE,CAAC;YACjC,MAAM,CAAC,yBAAyB,CAAC,SAAS,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;YACxE,MAAM,QAAQ,GAAG,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;YAC1C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACpD,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;YACxC,MAAM,CAAC,2BAA2B,CAAC,SAAS,CAAC,CAAC;YAC9C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,qCAAqC;IACrC,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;YACxC,MAAM,MAAM,GAAG,IAAI,4BAAc,EAAE,CAAC;YACpC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YACzC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YAC5B,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YACxC,MAAM,CAAC,IAAI,EAAE,CAAC;YACd,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,mEAAmE;IACnE,QAAQ,CAAC,8BAA8B,EAAE,GAAG,EAAE;QAC5C,IAAI,aAAyB,CAAC;QAC9B,MAAM,CAAC,GAAG,EAAE;YACV,MAAM,MAAM,GAAG,IAAI,4BAAc,EAAE,CAAC;YACpC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YAC5B,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE;gBACvC,aAAa,GAAG,QAAQ,CAAC;YAC3B,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;YAC/C,MAAM,CAAC,EAAE,CAAC,aAAa,YAAY,WAAI,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;YACnC,MAAM,CAAC,EAAE,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oCAAoC,EAAE,GAAG,EAAE;QAClD,MAAM,MAAM,GAAG,IAAI,4BAAc,EAAE,CAAC;QACpC,MAAM,MAAM,GAAiB,EAAE,YAAY,EAAE,CAAC,EAAE,CAAC;QAEjD,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;YACxD,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YACrB,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE;gBACvC,MAAM,CAAC,EAAE,CAAC,QAAQ,YAAY,sCAAgB,CAAC,CAAC;YAClD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oFAAoF,EAAE,GAAG,EAAE;YAC5F,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YACrB,MAAM,CAAC,aAAa,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,YAAY,EAAE,CAAC,EAAE,EAAE,QAAQ,CAAC,EAAE;gBACjE,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;YACtB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qCAAqC,EAAE,GAAG,EAAE;QACnD,MAAM,MAAM,GAAG,IAAI,4BAAc,EAAE,CAAC;QACpC,MAAM,MAAM,GAAiB,EAAE,YAAY,EAAE,CAAC,EAAE,CAAC;QAEjD,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;YAChD,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YACrB,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE;gBACvC,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;YACtB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2FAA2F,EAAE,GAAG,EAAE;YACnG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YACrB,MAAM,CAAC,aAAa,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,YAAY,EAAE,CAAC,EAAE,EAAE,QAAQ,CAAC,EAAE;gBACjE,MAAM,CAAC,EAAE,CAAC,QAAQ,YAAY,sCAAgB,CAAC,CAAC;YAClD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gCAAgC,EAAE,GAAG,EAAE;QAC9C,EAAE,CAAC,oEAAoE,EAAE,GAAG,EAAE;YAC5E,MAAM,MAAM,GAAG,IAAI,4BAAc,EAAE,CAAC;YACpC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YACzC,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE;gBACvC,MAAM,CAAC,EAAE,CAAC,QAAQ,YAAY,sCAAgB,CAAC,CAAC;YAClD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,0CAA0C,EAAE,GAAG,EAAE;QACxD,MAAM,YAAY,GAAuB;YACvC,IAAI,EAAE,UAAU;YAChB,IAAI,EAAE,KAAK,CAAC,QAAQ,CAAC,WAAW;SACjC,CAAC;QAEF,EAAE,CAAC,qDAAqD,EAAE,GAAG,EAAE;YAC7D,MAAM,MAAM,GAAG,IAAI,4BAAc,EAAE,CAAC;YACpC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YAC5B,MAAM,CAAC,aAAa,CAAC,YAAY,EAAE,QAAQ,CAAC,EAAE;gBAC5C,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;gBACpB,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC;gBACrD,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC;YACvD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,MAAM,qBAAqB,GAAsB;YAC/C,OAAO,EAAE,IAAI;iBACV,EAAE,EAAE;iBACJ,KAAK,CAAC,GAAG,CAAC;iBACV,IAAI,CAAC,EAAE,CAAC;YACX,MAAM,EAAE,mBAAY,EAAE;YACtB,OAAO,EAAE,GAAG;SACb,CAAC;QAEF,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;YACzD,MAAM,MAAM,GAAG,IAAI,4BAAc,EAAE,CAAC;YACpC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YAC5B,YAAY,CAAC,WAAW,GAAG,qBAAqB,CAAC;YACjD,MAAM,CAAC,aAAa,CAAC,YAAY,EAAE,QAAQ,CAAC,EAAE;gBAC5C,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;gBACpB,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC;gBACrD,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC;gBACrD,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,EAAE,qBAAqB,CAAC,OAAO,CAAC,CAAC;gBACpE,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,YAAY,EAAE,qBAAqB,CAAC,MAAM,CAAC,CAAC;YAC1E,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wFAAwF,EAAE,GAAG,EAAE;YAChG,MAAM,MAAM,GAAG,IAAI,4BAAc,EAAE,CAAC;YACpC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YAC5B,YAAY,CAAC,WAAY,CAAC,OAAO,GAAG,GAAG,CAAC;YACxC,MAAM,CAAC,aAAa,CAAC,YAAY,EAAE,QAAQ,CAAC,EAAE;gBAC5C,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;gBACpB,MAAM,CAAC,EAAE,CAAC,QAAQ,YAAY,sCAAgB,CAAC,CAAC;gBAChD,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC;gBACrD,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC;gBACrD,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,EAAE,qBAAqB,CAAC,OAAO,CAAC,CAAC;gBACpE,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,YAAY,EAAE,qBAAqB,CAAC,MAAM,CAAC,CAAC;YAC1E,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sGAAsG,EAAE,GAAG,EAAE;YAC9G,MAAM,MAAM,GAAG,IAAI,4BAAc,EAAE,CAAC;YACpC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YAC5B,MAAM,CAAC,WAAW,CAChB,MAAM,CAAC,iBAAiB,CAAC,gCAAgC,EACzD,SAAS,CACV,CAAC;YACF,MAAM,CAAC,WAAW,CAChB,MAAM,CAAC,iBAAiB,CAAC,yBAAyB,EAClD,SAAS,CACV,CAAC;YACF,MAAM,CAAC,WAAW,CAChB,MAAM,CAAC,iBAAiB,CAAC,oBAAoB,EAC7C,SAAS,CACV,CAAC;YACF,MAAM,CAAC,WAAW,CAChB,MAAM,CAAC,iBAAiB,CAAC,4BAA4B,EACrD,SAAS,CACV,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iIAAiI,EAAE,GAAG,EAAE;YACzI,MAAM,0CAA0C,GAAgB;gBAC9D,gCAAgC,EAAE,EAAE;gBACpC,4BAA4B,EAAE,GAAG;gBACjC,yBAAyB,EAAE,EAAE;gBAC7B,oBAAoB,EAAE,EAAE;aACzB,CAAC;YACF,aAAa,CAAC,WAAW,GAAG,0CAA0C,CAAC;YACvE,MAAM,MAAM,GAAG,IAAI,4BAAc,EAAE,CAAC;YACpC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YAC5B,MAAM,CAAC,WAAW,CAChB,MAAM,CAAC,iBAAiB,CAAC,gCAAgC,EACzD,EAAE,CACH,CAAC;YACF,MAAM,CAAC,WAAW,CAChB,MAAM,CAAC,iBAAiB,CAAC,yBAAyB,EAClD,EAAE,CACH,CAAC;YACF,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,oBAAoB,EAAE,EAAE,CAAC,CAAC;YACtE,MAAM,CAAC,WAAW,CAChB,MAAM,CAAC,iBAAiB,CAAC,4BAA4B,EACrD,GAAG,CACJ,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,8DAA8D;IAC9D,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAChC,IAAI,IAAgB,CAAC;QACrB,IAAI,MAAwB,CAAC;QAC7B,MAAM,CAAC,GAAG,EAAE;YACV,MAAM,GAAG,IAAI,4BAAc,EAAE,CAAC;YAC9B,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YAC5B,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE;gBACvC,IAAI,GAAG,MAAM,CAAC,cAAc,CAAC;oBAC3B,IAAI,EAAE,UAAU;oBAChB,IAAI,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM;oBAC3B,OAAO,EAAE,QAAQ;iBAClB,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,+BAA+B,EAAE,GAAG,EAAE;YACvC,MAAM,CAAC,EAAE,CAAC,IAAI,YAAY,WAAI,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,qBAAqB,EAAE,GAAG,EAAE;YAC7B,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACxB,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;YAC1C,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;YAC7C,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE;gBACvC,MAAM,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;oBAC3C,IAAI,EAAE,SAAS;oBACf,IAAI,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM;oBAC3B,OAAO,EAAE,QAAQ;iBAClB,CAAC,CAAC;gBACH,MAAM,CAAC,EAAE,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;gBAClC,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;gBACnD,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YACjE,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;YAClD,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE;gBACvC,MAAM,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;oBAC3C,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE,QAAQ;iBAClB,CAAC,CAAC;gBACH,MAAM,CAAC,EAAE,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;gBAClC,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;gBACpD,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,EAAE,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YACtE,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;YACtD,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE;gBACvC,MAAM,cAAc,GAAG,MAAM,CAAC,cAAc,EAAE,CAAC;gBAC/C,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;gBACrD,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,EAAE,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YACtE,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;YACxC,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE;gBACvC,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;gBACjD,MAAM,MAAM,GAAG,MAAM,CAAC,cAAc,CAAC;oBACnC,IAAI,EAAE,QAAQ;oBACd,IAAI,EAAE,KAAK,CAAC,QAAQ,CAAC,WAAW;oBAChC,OAAO,EAAE,QAAQ;iBAClB,CAAC,CAAC;gBACH,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;gBACjD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;gBAC/C,MAAM,MAAM,GAAG,MAAM,CAAC,cAAc,CAAC;oBACnC,IAAI,EAAE,QAAQ;oBACd,IAAI,EAAE,KAAK,CAAC,QAAQ,CAAC,WAAW;oBAChC,OAAO,EAAE,QAAQ;iBAClB,CAAC,CAAC;gBACH,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;gBACjD,MAAM,WAAW,GAAG,MAAM,CAAC,cAAc,CAAC;oBACxC,IAAI,EAAE,aAAa;oBACnB,IAAI,EAAE,KAAK,CAAC,QAAQ,CAAC,WAAW;oBAChC,OAAO,EAAE,MAAM;iBAChB,CAAC,CAAC;gBACH,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;gBACjD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;gBAC/C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;gBAC/C,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;gBAEpD,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;gBAC7C,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC9C,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC9C,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,YAAY,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC;gBAExD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;gBAC3C,MAAM,CAAC,WAAW,CAAC,WAAW,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAEjD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;gBAC3C,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;gBAEhD,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,cAAc,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC1D,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6DAA6D,EAAE,GAAG,EAAE;YACrE,aAAa,CAAC,WAAW,GAAG,EAAE,yBAAyB,EAAE,EAAE,EAAE,CAAC;YAC9D,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YAC5B,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE;gBACvC,MAAM,IAAI,GAAG,MAAM,CAAC,cAAc,CAAC;oBACjC,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE,QAAQ;iBAClB,CAAC,CAAC;gBACH,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;oBAC3B,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;iBACnC;gBACD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;YAC9D,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,wCAAwC;IACxC,QAAQ,CAAC,yCAAyC,EAAE,GAAG,EAAE;QACvD,EAAE,CAAC,2DAA2D,EAAE,GAAG,EAAE;YACnE,MAAM,MAAM,GAAG,IAAI,4BAAc,EAAE,CAAC;YACpC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YAC5B,MAAM,IAAI,GAAG,MAAM,CAAC,cAAc,CAAC;gBACjC,IAAI,EAAE,UAAU;gBAChB,IAAI,EAAE,KAAK,CAAC,QAAQ,CAAC,WAAW;aACjC,CAAC,CAAC;YACH,MAAM,CAAC,EAAE,CAAC,IAAI,YAAY,6BAAY,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,mEAAmE;IACnE,QAAQ,CAAC,sDAAsD,EAAE,GAAG,EAAE;QACpE,IAAI,YAA0B,CAAC;QAC/B,IAAI,MAAwB,CAAC;QAC7B,IAAI,IAAgB,CAAC;QACrB,IAAI,aAAyB,CAAC;QAC9B,MAAM,CAAC,GAAG,EAAE;YACV,MAAM,GAAG,IAAI,4BAAc,EAAE,CAAC;YAC9B,YAAY,mCACP,aAAa,KAChB,iBAAiB,EAAE;oBACjB,YAAY,EAAE,cAAc;oBAC5B,QAAQ,EAAE,UAAU;iBACrB,GACF,CAAC;YACF,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;YAC3B,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE;gBACvC,aAAa,GAAG,QAAQ,CAAC;gBACzB,IAAI,GAAG,MAAM,CAAC,cAAc,CAAC;oBAC3B,IAAI,EAAE,UAAU;oBAChB,IAAI,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM;oBAC3B,OAAO,EAAE,QAAQ;iBAClB,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;YACxC,MAAM,CAAC,eAAe,CACpB,aAAa,CAAC,UAAU,EACxB,YAAY,CAAC,iBAAiB,CAC/B,CAAC;YACF,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,UAAU,EAAE,YAAY,CAAC,iBAAiB,CAAC,CAAC;QAC1E,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,uDAAuD;IACvD,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;QAC3B,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;YAC1D,MAAM,MAAM,GAAG,IAAI,4BAAc,EAAE,CAAC;YACpC,MAAM,aAAa,GAAG,IAAI,cAAc,EAAE,CAAC;YAC3C,MAAM,CAAC,yBAAyB,CAAC,aAAa,CAAC,CAAC;YAChD,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YAE5B,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE;gBACvC,QAAQ,CAAC,GAAG,EAAE,CAAC;gBACf,MAAM,CAAC,WAAW,CAChB,aAAa,CAAC,SAAS,EACvB,MAAM,CAAC,cAAc,CAAC,MAAM,CAC7B,CAAC;YACJ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport * as uuid from 'uuid';\n\nimport { randomSpanId } from '../src/internal/util';\nimport { TracerConfig } from '../src/trace/config/types';\nimport { TraceParams } from '../src/trace/config/types';\nimport { NoRecordRootSpan } from '../src/trace/model/no-record/no-record-root-span';\nimport { NoRecordSpan } from '../src/trace/model/no-record/no-record-span';\nimport { Span } from '../src/trace/model/span';\nimport { CoreTracerBase } from '../src/trace/model/tracer-base';\nimport * as types from '../src/trace/model/types';\nimport { SpanEventListener } from '../src/trace/model/types';\n\nclass OnEndSpanClass implements SpanEventListener {\n  /** Counter for test use */\n  testCount = 0;\n  onStartSpan(span: Span): void {}\n  /** Happens when a span is ended */\n  onEndSpan(span: Span): void {\n    this.testCount++;\n  }\n}\n\nconst defaultConfig: TracerConfig = {\n  samplingRate: 1.0, // always sampler\n};\n\ndescribe('Tracer Base', () => {\n  const options = { name: 'test' };\n\n  /** Should create a Tracer instance */\n  describe('new Tracer()', () => {\n    it('should create a Tracer instance', () => {\n      const tracer = new CoreTracerBase();\n      assert.ok(tracer instanceof CoreTracerBase);\n    });\n  });\n\n  /** Should return a started tracer instance */\n  describe('start()', () => {\n    let tracerStarted: types.TracerBase;\n    before(() => {\n      const tracer = new CoreTracerBase();\n      assert.strictEqual(tracer.active, false);\n      tracerStarted = tracer.start(defaultConfig);\n    });\n    it('should return a tracer instance', () => {\n      assert.ok(tracerStarted instanceof CoreTracerBase);\n    });\n\n    it('the trace was started', () => {\n      assert.strictEqual(tracerStarted.active, true);\n    });\n  });\n\n  /** Should return an OnEndSpanEventListener list */\n  describe('registerSpanEventListener() / get eventListeners()', () => {\n    let tracer: types.TracerBase, onEndSpan: OnEndSpanClass;\n    before(() => {\n      tracer = new CoreTracerBase();\n      onEndSpan = new OnEndSpanClass();\n      tracer.registerSpanEventListener(onEndSpan);\n    });\n\n    it('should register a new OnEndSpanEventListener on listeners list', () => {\n      const listener = tracer.eventListeners[0];\n      assert.strictEqual(tracer.eventListeners.length, 1);\n      assert.strictEqual(listener, onEndSpan);\n    });\n\n    it('should return an OnEndSpanEventListener list', () => {\n      for (const listener of tracer.eventListeners) {\n        assert.ok(listener instanceof OnEndSpanClass);\n      }\n    });\n  });\n\n  /** Should unregister a OnEndSpanEventlistener */\n  describe('unregisterSpanEventListener()', () => {\n    let tracer: types.TracerBase, onEndSpan: OnEndSpanClass;\n    before(() => {\n      tracer = new CoreTracerBase();\n      onEndSpan = new OnEndSpanClass();\n      tracer.registerSpanEventListener(onEndSpan);\n    });\n\n    it('should register a new OnEndSpanEventListener on listeners list', () => {\n      const listener = tracer.eventListeners[0];\n      assert.strictEqual(tracer.eventListeners.length, 1);\n      assert.strictEqual(listener, onEndSpan);\n      tracer.unregisterSpanEventListener(onEndSpan);\n      assert.strictEqual(tracer.eventListeners.length, 0);\n    });\n  });\n\n  /** Should stop the trace instance */\n  describe('stop()', () => {\n    it('should stop the trace instance', () => {\n      const tracer = new CoreTracerBase();\n      assert.strictEqual(tracer.active, false);\n      tracer.start(defaultConfig);\n      assert.strictEqual(tracer.active, true);\n      tracer.stop();\n      assert.strictEqual(tracer.active, false);\n    });\n  });\n\n  /** Should create and start a new RootSpan instance with options */\n  describe('startRootSpan() with options', () => {\n    let rootSpanLocal: types.Span;\n    before(() => {\n      const tracer = new CoreTracerBase();\n      tracer.start(defaultConfig);\n      tracer.startRootSpan(options, rootSpan => {\n        rootSpanLocal = rootSpan;\n      });\n    });\n    it('should create a new RootSpan instance', () => {\n      assert.ok(rootSpanLocal instanceof Span);\n    });\n    it('should start the rootSpan', () => {\n      assert.ok(rootSpanLocal.started);\n    });\n  });\n\n  describe('startRootSpan() with sampler never', () => {\n    const tracer = new CoreTracerBase();\n    const config: TracerConfig = { samplingRate: 0 };\n\n    it('should start the new NoRecordRootSpan instance', () => {\n      tracer.start(config);\n      tracer.startRootSpan(options, rootSpan => {\n        assert.ok(rootSpan instanceof NoRecordRootSpan);\n      });\n    });\n\n    it('should start the new RootSpan instance when always sampling provided at span level', () => {\n      tracer.start(config);\n      tracer.startRootSpan({ name: 'test', samplingRate: 1 }, rootSpan => {\n        assert.ok(rootSpan);\n      });\n    });\n  });\n\n  describe('startRootSpan() with sampler always', () => {\n    const tracer = new CoreTracerBase();\n    const config: TracerConfig = { samplingRate: 1 };\n\n    it('should start the new RootSpan instance', () => {\n      tracer.start(config);\n      tracer.startRootSpan(options, rootSpan => {\n        assert.ok(rootSpan);\n      });\n    });\n\n    it('should start the new NoRecordRootSpan instance when never sampling provided at span level', () => {\n      tracer.start(config);\n      tracer.startRootSpan({ name: 'test', samplingRate: 0 }, rootSpan => {\n        assert.ok(rootSpan instanceof NoRecordRootSpan);\n      });\n    });\n  });\n\n  describe('startRootSpan() before start()', () => {\n    it('should start the new NoRecordRootSpan instance, tracer not started', () => {\n      const tracer = new CoreTracerBase();\n      assert.strictEqual(tracer.active, false);\n      tracer.startRootSpan(options, rootSpan => {\n        assert.ok(rootSpan instanceof NoRecordRootSpan);\n      });\n    });\n  });\n\n  describe('startRootSpan() with context propagation', () => {\n    const traceOptions: types.TraceOptions = {\n      name: 'rootName',\n      kind: types.SpanKind.UNSPECIFIED,\n    };\n\n    it('should create new RootSpan instance, no propagation', () => {\n      const tracer = new CoreTracerBase();\n      tracer.start(defaultConfig);\n      tracer.startRootSpan(traceOptions, rootSpan => {\n        assert.ok(rootSpan);\n        assert.strictEqual(rootSpan.name, traceOptions.name);\n        assert.strictEqual(rootSpan.kind, traceOptions.kind);\n      });\n    });\n\n    const spanContextPropagated: types.SpanContext = {\n      traceId: uuid\n        .v4()\n        .split('-')\n        .join(''),\n      spanId: randomSpanId(),\n      options: 0x1,\n    };\n\n    it('should create the new RootSpan with propagation', () => {\n      const tracer = new CoreTracerBase();\n      tracer.start(defaultConfig);\n      traceOptions.spanContext = spanContextPropagated;\n      tracer.startRootSpan(traceOptions, rootSpan => {\n        assert.ok(rootSpan);\n        assert.strictEqual(rootSpan.name, traceOptions.name);\n        assert.strictEqual(rootSpan.kind, traceOptions.kind);\n        assert.strictEqual(rootSpan.traceId, spanContextPropagated.traceId);\n        assert.strictEqual(rootSpan.parentSpanId, spanContextPropagated.spanId);\n      });\n    });\n\n    it('should create the new NoRecordRootSpan with propagation options bit set to not-sample)', () => {\n      const tracer = new CoreTracerBase();\n      tracer.start(defaultConfig);\n      traceOptions.spanContext!.options = 0x0;\n      tracer.startRootSpan(traceOptions, rootSpan => {\n        assert.ok(rootSpan);\n        assert.ok(rootSpan instanceof NoRecordRootSpan);\n        assert.strictEqual(rootSpan.name, traceOptions.name);\n        assert.strictEqual(rootSpan.kind, traceOptions.kind);\n        assert.strictEqual(rootSpan.traceId, spanContextPropagated.traceId);\n        assert.strictEqual(rootSpan.parentSpanId, spanContextPropagated.spanId);\n      });\n    });\n\n    it('should create a tracer with default TraceParams when no parameters are specified upon initialisation', () => {\n      const tracer = new CoreTracerBase();\n      tracer.start(defaultConfig);\n      assert.strictEqual(\n        tracer.activeTraceParams.numberOfAnnontationEventsPerSpan,\n        undefined\n      );\n      assert.strictEqual(\n        tracer.activeTraceParams.numberOfAttributesPerSpan,\n        undefined\n      );\n      assert.strictEqual(\n        tracer.activeTraceParams.numberOfLinksPerSpan,\n        undefined\n      );\n      assert.strictEqual(\n        tracer.activeTraceParams.numberOfMessageEventsPerSpan,\n        undefined\n      );\n    });\n\n    it('should create a tracer with default TraceParams when parameters with values higher than limit are specified upon initialisation', () => {\n      const traceParametersWithHigherThanMaximumValues: TraceParams = {\n        numberOfAnnontationEventsPerSpan: 50,\n        numberOfMessageEventsPerSpan: 200,\n        numberOfAttributesPerSpan: 37,\n        numberOfLinksPerSpan: 45,\n      };\n      defaultConfig.traceParams = traceParametersWithHigherThanMaximumValues;\n      const tracer = new CoreTracerBase();\n      tracer.start(defaultConfig);\n      assert.strictEqual(\n        tracer.activeTraceParams.numberOfAnnontationEventsPerSpan,\n        50\n      );\n      assert.strictEqual(\n        tracer.activeTraceParams.numberOfAttributesPerSpan,\n        37\n      );\n      assert.strictEqual(tracer.activeTraceParams.numberOfLinksPerSpan, 45);\n      assert.strictEqual(\n        tracer.activeTraceParams.numberOfMessageEventsPerSpan,\n        200\n      );\n    });\n  });\n\n  /** Should create and start a Span instance into a rootSpan */\n  describe('startChildSpan()', () => {\n    let span: types.Span;\n    let tracer: types.TracerBase;\n    before(() => {\n      tracer = new CoreTracerBase();\n      tracer.start(defaultConfig);\n      tracer.startRootSpan(options, rootSpan => {\n        span = tracer.startChildSpan({\n          name: 'spanName',\n          kind: types.SpanKind.CLIENT,\n          childOf: rootSpan,\n        });\n      });\n    });\n    it('should create a Span instance', () => {\n      assert.ok(span instanceof Span);\n    });\n    it('should start a span', () => {\n      assert.ok(span.started);\n      assert.strictEqual(span.name, 'spanName');\n      assert.strictEqual(span.kind, types.SpanKind.CLIENT);\n    });\n\n    it('should start a span with SpanObject', () => {\n      tracer.startRootSpan(options, rootSpan => {\n        const spanWithObject = tracer.startChildSpan({\n          name: 'my-span',\n          kind: types.SpanKind.SERVER,\n          childOf: rootSpan,\n        });\n        assert.ok(spanWithObject.started);\n        assert.strictEqual(spanWithObject.name, 'my-span');\n        assert.strictEqual(spanWithObject.kind, types.SpanKind.SERVER);\n      });\n    });\n\n    it('should start a span with SpanObject-name', () => {\n      tracer.startRootSpan(options, rootSpan => {\n        const spanWithObject = tracer.startChildSpan({\n          name: 'my-span1',\n          childOf: rootSpan,\n        });\n        assert.ok(spanWithObject.started);\n        assert.strictEqual(spanWithObject.name, 'my-span1');\n        assert.strictEqual(spanWithObject.kind, types.SpanKind.UNSPECIFIED);\n      });\n    });\n\n    it('should start a no-record span without params', () => {\n      tracer.startRootSpan(options, rootSpan => {\n        const spanWithObject = tracer.startChildSpan();\n        assert.strictEqual(spanWithObject.name, 'no-record');\n        assert.strictEqual(spanWithObject.kind, types.SpanKind.UNSPECIFIED);\n      });\n    });\n\n    it('should support nested children', () => {\n      tracer.startRootSpan(options, rootSpan => {\n        assert.strictEqual(rootSpan.numberOfChildren, 0);\n        const child1 = tracer.startChildSpan({\n          name: 'child1',\n          kind: types.SpanKind.UNSPECIFIED,\n          childOf: rootSpan,\n        });\n        assert.strictEqual(rootSpan.numberOfChildren, 1);\n        assert.strictEqual(child1.numberOfChildren, 0);\n        const child2 = tracer.startChildSpan({\n          name: 'child2',\n          kind: types.SpanKind.UNSPECIFIED,\n          childOf: rootSpan,\n        });\n        assert.strictEqual(rootSpan.numberOfChildren, 2);\n        const grandchild1 = tracer.startChildSpan({\n          name: 'grandchild1',\n          kind: types.SpanKind.UNSPECIFIED,\n          childOf: child1,\n        });\n        assert.strictEqual(rootSpan.numberOfChildren, 2);\n        assert.strictEqual(child1.numberOfChildren, 1);\n        assert.strictEqual(child2.numberOfChildren, 0);\n        assert.strictEqual(grandchild1.numberOfChildren, 0);\n\n        assert.strictEqual(rootSpan.spans.length, 2);\n        assert.strictEqual(child1, rootSpan.spans[0]);\n        assert.strictEqual(child2, rootSpan.spans[1]);\n        assert.strictEqual(grandchild1.parentSpanId, child1.id);\n\n        assert.strictEqual(child1.spans.length, 1);\n        assert.strictEqual(grandchild1, child1.spans[0]);\n\n        assert.strictEqual(child2.spans.length, 0);\n        assert.strictEqual(grandchild1.spans.length, 0);\n\n        assert.strictEqual(rootSpan.allDescendants().length, 3);\n      });\n    });\n\n    it('should add attributes more than default limit when override', () => {\n      defaultConfig.traceParams = { numberOfAttributesPerSpan: 48 };\n      tracer.start(defaultConfig);\n      tracer.startRootSpan(options, rootSpan => {\n        const span = tracer.startChildSpan({\n          name: 'spanName',\n          childOf: rootSpan,\n        });\n        for (let i = 0; i < 40; i++) {\n          span.addAttribute(`attr ${i}`, i);\n        }\n        assert.strictEqual(Object.keys(span.attributes).length, 40);\n      });\n    });\n  });\n\n  /** Should not create a Span instance */\n  describe('startChildSpan() before startRootSpan()', () => {\n    it('should create a NoRecordSpan instance, without a rootspan', () => {\n      const tracer = new CoreTracerBase();\n      tracer.start(defaultConfig);\n      const span = tracer.startChildSpan({\n        name: 'spanName',\n        kind: types.SpanKind.UNSPECIFIED,\n      });\n      assert.ok(span instanceof NoRecordSpan);\n    });\n  });\n\n  /** Should add tracer attributes to every span created by tracer */\n  describe('startRootSpan() and startChildSpan() with attributes', () => {\n    let tracerConfig: TracerConfig;\n    let tracer: types.TracerBase;\n    let span: types.Span;\n    let rootSpanLocal: types.Span;\n    before(() => {\n      tracer = new CoreTracerBase();\n      tracerConfig = {\n        ...defaultConfig,\n        defaultAttributes: {\n          cluster_name: 'test-cluster',\n          asg_name: 'test-asg',\n        },\n      };\n      tracer.start(tracerConfig);\n      tracer.startRootSpan(options, rootSpan => {\n        rootSpanLocal = rootSpan;\n        span = tracer.startChildSpan({\n          name: 'spanName',\n          kind: types.SpanKind.CLIENT,\n          childOf: rootSpan,\n        });\n      });\n    });\n    it('should add attributes to spans', () => {\n      assert.deepStrictEqual(\n        rootSpanLocal.attributes,\n        tracerConfig.defaultAttributes\n      );\n      assert.deepStrictEqual(span.attributes, tracerConfig.defaultAttributes);\n    });\n  });\n\n  /** Should run eventListeners when the rootSpan ends */\n  describe('onEndSpan()', () => {\n    it('should run eventListeners when the rootSpan ends', () => {\n      const tracer = new CoreTracerBase();\n      const eventListener = new OnEndSpanClass();\n      tracer.registerSpanEventListener(eventListener);\n      tracer.start(defaultConfig);\n\n      tracer.startRootSpan(options, rootSpan => {\n        rootSpan.end();\n        assert.strictEqual(\n          eventListener.testCount,\n          tracer.eventListeners.length\n        );\n      });\n    });\n  });\n});\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"dda31e67ac48665cc546c893ac96f11746b22712","contentHash":"1a1fdfd0ec4662d43d157c38f1d439e4635fa8544df7253e4810129ced7297cb"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-tracer.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-tracer.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":15},"end":{"line":18,"column":32}},"2":{"start":{"line":19,"column":25},"end":{"line":19,"column":79}},"3":{"start":{"line":20,"column":15},"end":{"line":20,"column":49}},"4":{"start":{"line":21,"column":17},"end":{"line":21,"column":53}},"5":{"start":{"line":22,"column":14},"end":{"line":22,"column":49}},"6":{"start":{"line":23,"column":22},"end":{"line":25,"column":1}},"7":{"start":{"line":26,"column":0},"end":{"line":118,"column":3}},"8":{"start":{"line":27,"column":20},"end":{"line":27,"column":36}},"9":{"start":{"line":29,"column":4},"end":{"line":34,"column":7}},"10":{"start":{"line":30,"column":8},"end":{"line":33,"column":11}},"11":{"start":{"line":31,"column":27},"end":{"line":31,"column":52}},"12":{"start":{"line":32,"column":12},"end":{"line":32,"column":61}},"13":{"start":{"line":36,"column":4},"end":{"line":45,"column":7}},"14":{"start":{"line":37,"column":23},"end":{"line":37,"column":69}},"15":{"start":{"line":38,"column":8},"end":{"line":44,"column":11}},"16":{"start":{"line":39,"column":12},"end":{"line":43,"column":15}},"17":{"start":{"line":40,"column":16},"end":{"line":40,"column":32}},"18":{"start":{"line":41,"column":16},"end":{"line":41,"column":73}},"19":{"start":{"line":42,"column":16},"end":{"line":42,"column":65}},"20":{"start":{"line":47,"column":4},"end":{"line":66,"column":7}},"21":{"start":{"line":50,"column":8},"end":{"line":56,"column":11}},"22":{"start":{"line":51,"column":12},"end":{"line":51,"column":47}},"23":{"start":{"line":52,"column":12},"end":{"line":52,"column":40}},"24":{"start":{"line":53,"column":12},"end":{"line":55,"column":15}},"25":{"start":{"line":54,"column":16},"end":{"line":54,"column":41}},"26":{"start":{"line":57,"column":8},"end":{"line":59,"column":11}},"27":{"start":{"line":58,"column":12},"end":{"line":58,"column":60}},"28":{"start":{"line":60,"column":8},"end":{"line":65,"column":11}},"29":{"start":{"line":61,"column":12},"end":{"line":64,"column":15}},"30":{"start":{"line":62,"column":16},"end":{"line":62,"column":73}},"31":{"start":{"line":63,"column":16},"end":{"line":63,"column":69}},"32":{"start":{"line":68,"column":4},"end":{"line":79,"column":7}},"33":{"start":{"line":69,"column":8},"end":{"line":78,"column":11}},"34":{"start":{"line":70,"column":27},"end":{"line":70,"column":52}},"35":{"start":{"line":71,"column":12},"end":{"line":71,"column":40}},"36":{"start":{"line":72,"column":12},"end":{"line":77,"column":15}},"37":{"start":{"line":73,"column":16},"end":{"line":73,"column":73}},"38":{"start":{"line":74,"column":16},"end":{"line":74,"column":69}},"39":{"start":{"line":75,"column":16},"end":{"line":75,"column":43}},"40":{"start":{"line":76,"column":16},"end":{"line":76,"column":65}},"41":{"start":{"line":81,"column":4},"end":{"line":105,"column":7}},"42":{"start":{"line":85,"column":8},"end":{"line":95,"column":11}},"43":{"start":{"line":86,"column":12},"end":{"line":86,"column":47}},"44":{"start":{"line":87,"column":12},"end":{"line":87,"column":40}},"45":{"start":{"line":88,"column":12},"end":{"line":94,"column":15}},"46":{"start":{"line":89,"column":16},"end":{"line":89,"column":41}},"47":{"start":{"line":90,"column":16},"end":{"line":93,"column":19}},"48":{"start":{"line":96,"column":8},"end":{"line":98,"column":11}},"49":{"start":{"line":97,"column":12},"end":{"line":97,"column":51}},"50":{"start":{"line":99,"column":8},"end":{"line":104,"column":11}},"51":{"start":{"line":100,"column":12},"end":{"line":100,"column":66}},"52":{"start":{"line":101,"column":12},"end":{"line":101,"column":31}},"53":{"start":{"line":103,"column":12},"end":{"line":103,"column":67}},"54":{"start":{"line":107,"column":4},"end":{"line":117,"column":7}},"55":{"start":{"line":108,"column":8},"end":{"line":116,"column":11}},"56":{"start":{"line":109,"column":27},"end":{"line":109,"column":52}},"57":{"start":{"line":110,"column":12},"end":{"line":110,"column":40}},"58":{"start":{"line":111,"column":25},"end":{"line":114,"column":14}},"59":{"start":{"line":115,"column":12},"end":{"line":115,"column":69}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":26,"column":19},"end":{"line":26,"column":20}},"loc":{"start":{"line":26,"column":25},"end":{"line":118,"column":1}},"line":26},"1":{"name":"(anonymous_1)","decl":{"start":{"line":29,"column":29},"end":{"line":29,"column":30}},"loc":{"start":{"line":29,"column":35},"end":{"line":34,"column":5}},"line":29},"2":{"name":"(anonymous_2)","decl":{"start":{"line":30,"column":46},"end":{"line":30,"column":47}},"loc":{"start":{"line":30,"column":52},"end":{"line":33,"column":9}},"line":30},"3":{"name":"(anonymous_3)","decl":{"start":{"line":36,"column":42},"end":{"line":36,"column":43}},"loc":{"start":{"line":36,"column":48},"end":{"line":45,"column":5}},"line":36},"4":{"name":"(anonymous_4)","decl":{"start":{"line":38,"column":67},"end":{"line":38,"column":68}},"loc":{"start":{"line":38,"column":73},"end":{"line":44,"column":9}},"line":38},"5":{"name":"(anonymous_5)","decl":{"start":{"line":39,"column":42},"end":{"line":39,"column":43}},"loc":{"start":{"line":39,"column":50},"end":{"line":43,"column":13}},"line":39},"6":{"name":"(anonymous_6)","decl":{"start":{"line":47,"column":45},"end":{"line":47,"column":46}},"loc":{"start":{"line":47,"column":51},"end":{"line":66,"column":5}},"line":47},"7":{"name":"(anonymous_7)","decl":{"start":{"line":50,"column":15},"end":{"line":50,"column":16}},"loc":{"start":{"line":50,"column":21},"end":{"line":56,"column":9}},"line":50},"8":{"name":"(anonymous_8)","decl":{"start":{"line":53,"column":42},"end":{"line":53,"column":43}},"loc":{"start":{"line":53,"column":54},"end":{"line":55,"column":13}},"line":53},"9":{"name":"(anonymous_9)","decl":{"start":{"line":57,"column":52},"end":{"line":57,"column":53}},"loc":{"start":{"line":57,"column":58},"end":{"line":59,"column":9}},"line":57},"10":{"name":"(anonymous_10)","decl":{"start":{"line":60,"column":43},"end":{"line":60,"column":44}},"loc":{"start":{"line":60,"column":49},"end":{"line":65,"column":9}},"line":60},"11":{"name":"(anonymous_11)","decl":{"start":{"line":61,"column":42},"end":{"line":61,"column":43}},"loc":{"start":{"line":61,"column":54},"end":{"line":64,"column":13}},"line":61},"12":{"name":"(anonymous_12)","decl":{"start":{"line":68,"column":39},"end":{"line":68,"column":40}},"loc":{"start":{"line":68,"column":45},"end":{"line":79,"column":5}},"line":68},"13":{"name":"(anonymous_13)","decl":{"start":{"line":69,"column":55},"end":{"line":69,"column":56}},"loc":{"start":{"line":69,"column":61},"end":{"line":78,"column":9}},"line":69},"14":{"name":"(anonymous_14)","decl":{"start":{"line":72,"column":42},"end":{"line":72,"column":43}},"loc":{"start":{"line":72,"column":54},"end":{"line":77,"column":13}},"line":72},"15":{"name":"(anonymous_15)","decl":{"start":{"line":81,"column":33},"end":{"line":81,"column":34}},"loc":{"start":{"line":81,"column":39},"end":{"line":105,"column":5}},"line":81},"16":{"name":"(anonymous_16)","decl":{"start":{"line":85,"column":15},"end":{"line":85,"column":16}},"loc":{"start":{"line":85,"column":21},"end":{"line":95,"column":9}},"line":85},"17":{"name":"(anonymous_17)","decl":{"start":{"line":88,"column":42},"end":{"line":88,"column":43}},"loc":{"start":{"line":88,"column":54},"end":{"line":94,"column":13}},"line":88},"18":{"name":"(anonymous_18)","decl":{"start":{"line":96,"column":44},"end":{"line":96,"column":45}},"loc":{"start":{"line":96,"column":50},"end":{"line":98,"column":9}},"line":96},"19":{"name":"(anonymous_19)","decl":{"start":{"line":99,"column":61},"end":{"line":99,"column":62}},"loc":{"start":{"line":99,"column":67},"end":{"line":104,"column":9}},"line":99},"20":{"name":"(anonymous_20)","decl":{"start":{"line":107,"column":56},"end":{"line":107,"column":57}},"loc":{"start":{"line":107,"column":62},"end":{"line":117,"column":5}},"line":107},"21":{"name":"(anonymous_21)","decl":{"start":{"line":108,"column":72},"end":{"line":108,"column":73}},"loc":{"start":{"line":108,"column":78},"end":{"line":116,"column":9}},"line":108}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1},"f":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-tracer.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-tracer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\n\nimport { TracerConfig } from '../src/trace/config/types';\nimport { NoRecordSpan } from '../src/trace/model/no-record/no-record-span';\nimport { Span } from '../src/trace/model/span';\nimport { CoreTracer } from '../src/trace/model/tracer';\nimport * as types from '../src/trace/model/types';\n\nconst defaultConfig: TracerConfig = {\n  samplingRate: 1.0, // always sampler\n};\n\ndescribe('Tracer', () => {\n  const options = { name: 'test' };\n\n  /** Should create a Tracer instance */\n  describe('new Tracer()', () => {\n    it('should create a Tracer instance', () => {\n      const tracer = new CoreTracer();\n      assert.ok(tracer instanceof CoreTracer);\n    });\n  });\n\n  /** Should get/set the current RootSpan from tracer instance */\n  describe('get/set currentRootSpan()', () => {\n    const tracer = new CoreTracer().start(defaultConfig);\n    it('should get the current RootSpan from tracer instance', () => {\n      tracer.startRootSpan(options, root => {\n        assert.ok(root);\n        assert.ok(tracer.currentRootSpan instanceof Span);\n        assert.strictEqual(tracer.currentRootSpan, root);\n      });\n    });\n  });\n\n  /** Should create and start a new RootSpan instance with options */\n  describe('startRootSpan() with options', () => {\n    let rootSpanLocal: types.Span;\n    let tracer: types.Tracer;\n    before(() => {\n      tracer = new CoreTracer();\n      tracer.start(defaultConfig);\n      tracer.startRootSpan(options, rootSpan => {\n        rootSpanLocal = rootSpan;\n      });\n    });\n    it('should create a new RootSpan instance', () => {\n      assert.ok(rootSpanLocal instanceof Span);\n    });\n    it('should set current root span', () => {\n      tracer.startRootSpan(options, rootSpan => {\n        assert.ok(tracer.currentRootSpan instanceof Span);\n        assert.strictEqual(tracer.currentRootSpan, rootSpan);\n      });\n    });\n  });\n\n  /** Should set the current root span to null */\n  describe('clearCurrentRootSpan()', () => {\n    it('should set the current root span to null', () => {\n      const tracer = new CoreTracer();\n      tracer.start(defaultConfig);\n      tracer.startRootSpan(options, rootSpan => {\n        assert.ok(tracer.currentRootSpan instanceof Span);\n        assert.strictEqual(tracer.currentRootSpan, rootSpan);\n        tracer.clearCurrentTrace();\n        assert.strictEqual(tracer.currentRootSpan, null);\n      });\n    });\n  });\n\n  /** Should create and start a Span instance into a rootSpan */\n  describe('startChildSpan()', () => {\n    let span: types.Span;\n    let rootSpanLocal: types.Span;\n    let tracer: types.TracerBase;\n    before(() => {\n      tracer = new CoreTracer();\n      tracer.start(defaultConfig);\n      tracer.startRootSpan(options, rootSpan => {\n        rootSpanLocal = rootSpan;\n        span = tracer.startChildSpan({\n          name: 'spanName',\n          kind: types.SpanKind.CLIENT,\n        });\n      });\n    });\n    it('should create a Span instance', () => {\n      assert.ok(span instanceof Span);\n    });\n    it('should set child of to root span automatically', () => {\n      assert.strictEqual(rootSpanLocal.numberOfChildren, 1);\n      assert.ok(span.id);\n      // instance equal is not possible due circular dependencies\n      assert.strictEqual(rootSpanLocal.spans[0].id, span.id);\n    });\n  });\n\n  /** Should not create a Span instance */\n  describe('startChildSpan() before startRootSpan()', () => {\n    it('should create a NoRecordSpan instance, without a rootspan', () => {\n      const tracer = new CoreTracer();\n      tracer.start(defaultConfig);\n      const span = tracer.startChildSpan({\n        name: 'spanName',\n        kind: types.SpanKind.UNSPECIFIED,\n      });\n      assert.ok(span instanceof NoRecordSpan);\n    });\n  });\n});\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"34d08f931ed7fae0cc1582cac5e0dcd82d3d29ef","contentHash":"3d8519d4713b11d680cb9e924bd54b70301630f36b6a9bdb0dcbea073b6c4e80"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-utils.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-utils.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":18,"column":15},"end":{"line":18,"column":32}},"2":{"start":{"line":19,"column":16},"end":{"line":19,"column":47}},"3":{"start":{"line":20,"column":0},"end":{"line":42,"column":3}},"4":{"start":{"line":21,"column":25},"end":{"line":21,"column":43}},"5":{"start":{"line":22,"column":35},"end":{"line":25,"column":5}},"6":{"start":{"line":26,"column":27},"end":{"line":26,"column":63}},"7":{"start":{"line":27,"column":27},"end":{"line":27,"column":63}},"8":{"start":{"line":28,"column":4},"end":{"line":31,"column":7}},"9":{"start":{"line":29,"column":21},"end":{"line":29,"column":58}},"10":{"start":{"line":30,"column":8},"end":{"line":30,"column":44}},"11":{"start":{"line":32,"column":4},"end":{"line":35,"column":7}},"12":{"start":{"line":33,"column":21},"end":{"line":33,"column":68}},"13":{"start":{"line":34,"column":8},"end":{"line":34,"column":45}},"14":{"start":{"line":36,"column":4},"end":{"line":38,"column":7}},"15":{"start":{"line":37,"column":8},"end":{"line":37,"column":113}},"16":{"start":{"line":39,"column":4},"end":{"line":41,"column":7}},"17":{"start":{"line":40,"column":8},"end":{"line":40,"column":64}},"18":{"start":{"line":43,"column":0},"end":{"line":57,"column":3}},"19":{"start":{"line":44,"column":24},"end":{"line":44,"column":39}},"20":{"start":{"line":45,"column":4},"end":{"line":48,"column":7}},"21":{"start":{"line":46,"column":28},"end":{"line":46,"column":62}},"22":{"start":{"line":47,"column":8},"end":{"line":47,"column":59}},"23":{"start":{"line":49,"column":4},"end":{"line":56,"column":7}},"24":{"start":{"line":50,"column":28},"end":{"line":50,"column":62}},"25":{"start":{"line":51,"column":8},"end":{"line":55,"column":11}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":20,"column":28},"end":{"line":20,"column":29}},"loc":{"start":{"line":20,"column":34},"end":{"line":42,"column":1}},"line":20},"1":{"name":"(anonymous_1)","decl":{"start":{"line":28,"column":46},"end":{"line":28,"column":47}},"loc":{"start":{"line":28,"column":52},"end":{"line":31,"column":5}},"line":28},"2":{"name":"(anonymous_2)","decl":{"start":{"line":32,"column":48},"end":{"line":32,"column":49}},"loc":{"start":{"line":32,"column":54},"end":{"line":35,"column":5}},"line":32},"3":{"name":"(anonymous_3)","decl":{"start":{"line":36,"column":58},"end":{"line":36,"column":59}},"loc":{"start":{"line":36,"column":64},"end":{"line":38,"column":5}},"line":36},"4":{"name":"(anonymous_4)","decl":{"start":{"line":39,"column":53},"end":{"line":39,"column":54}},"loc":{"start":{"line":39,"column":59},"end":{"line":41,"column":5}},"line":39},"5":{"name":"(anonymous_5)","decl":{"start":{"line":43,"column":36},"end":{"line":43,"column":37}},"loc":{"start":{"line":43,"column":42},"end":{"line":57,"column":1}},"line":43},"6":{"name":"(anonymous_6)","decl":{"start":{"line":45,"column":46},"end":{"line":45,"column":47}},"loc":{"start":{"line":45,"column":52},"end":{"line":48,"column":5}},"line":45},"7":{"name":"(anonymous_7)","decl":{"start":{"line":49,"column":48},"end":{"line":49,"column":49}},"loc":{"start":{"line":49,"column":54},"end":{"line":56,"column":5}},"line":49}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1},"f":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-utils.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-utils.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;GAcG;AACH,iCAAiC;AAEjC,gDAAgF;AAEhF,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,MAAM,YAAY,GAAiB,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;IACtD,MAAM,sBAAsB,GAAiB;QAC3C,EAAE,KAAK,EAAE,KAAK,EAAE;QAChB,EAAE,KAAK,EAAE,IAAI,EAAE;KAChB,CAAC;IACF,MAAM,cAAc,GAAiB,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;IAC1E,MAAM,cAAc,GAAiB,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;IAC1E,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;QAC7C,MAAM,IAAI,GAAG,uBAAe,CAAC,YAAY,CAAC,CAAC;QAC3C,MAAM,CAAC,eAAe,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACtC,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;QAC/C,MAAM,IAAI,GAAG,uBAAe,CAAC,sBAAsB,CAAC,CAAC;QACrD,MAAM,CAAC,eAAe,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;QACzD,MAAM,CAAC,eAAe,CACpB,uBAAe,CAAC,cAAc,CAAC,EAC/B,uBAAe,CAAC,cAAc,CAAC,CAChC,CAAC;IACJ,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;QACpD,MAAM,CAAC,eAAe,CAAC,uBAAe,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AACH,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;IACvC,MAAM,WAAW,GAAe,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;IAChD,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;QAC7C,MAAM,WAAW,GAAG,+BAAuB,CAAC,CAAC,CAAC,CAAC;QAC/C,MAAM,CAAC,eAAe,CAAC,WAAW,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;QAC/C,MAAM,WAAW,GAAG,+BAAuB,CAAC,CAAC,CAAC,CAAC;QAC/C,MAAM,CAAC,eAAe,CAAC,WAAW,EAAE;YAClC,WAAW;YACX,WAAW;YACX,WAAW;SACZ,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as assert from 'assert';\nimport { LabelValue } from '../src/metrics/export/types';\nimport { hashLabelValues, initializeDefaultLabels } from '../src/metrics/utils';\n\ndescribe('hashLabelValues', () => {\n  const LABEL_VALUES: LabelValue[] = [{ value: '200' }];\n  const LABEL_VALUES_WITH_NULL: LabelValue[] = [\n    { value: '200' },\n    { value: null },\n  ];\n  const LABEL_VALUES_1: LabelValue[] = [{ value: '200' }, { value: '400' }];\n  const LABEL_VALUES_2: LabelValue[] = [{ value: '400' }, { value: '200' }];\n  it('should return hash for single Value', () => {\n    const hash = hashLabelValues(LABEL_VALUES);\n    assert.deepStrictEqual(hash, '200');\n  });\n  it('should return hash for Value and null', () => {\n    const hash = hashLabelValues(LABEL_VALUES_WITH_NULL);\n    assert.deepStrictEqual(hash, '200,');\n  });\n  it('should return same hash for interchanged labels', () => {\n    assert.deepStrictEqual(\n      hashLabelValues(LABEL_VALUES_1),\n      hashLabelValues(LABEL_VALUES_2)\n    );\n  });\n  it('should return empty string for empty array', () => {\n    assert.deepStrictEqual(hashLabelValues([]), '');\n  });\n});\ndescribe('initializeDefaultLabels', () => {\n  const UNSET_VALUE: LabelValue = { value: null };\n  it('should return single default labels', () => {\n    const labelValues = initializeDefaultLabels(1);\n    assert.deepStrictEqual(labelValues, [UNSET_VALUE]);\n  });\n  it('should return multiple default labels', () => {\n    const labelValues = initializeDefaultLabels(3);\n    assert.deepStrictEqual(labelValues, [\n      UNSET_VALUE,\n      UNSET_VALUE,\n      UNSET_VALUE,\n    ]);\n  });\n});\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"ad7295d33b1aea195f3410951e2f8526534e9816","contentHash":"d1743bab8ab077dbb3c192812fb24fcb9c8003e1a784ea2f4d4d45054d935fe0"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-validation.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-validation.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":15},"end":{"line":18,"column":32}},"2":{"start":{"line":19,"column":21},"end":{"line":19,"column":54}},"3":{"start":{"line":20,"column":0},"end":{"line":33,"column":3}},"4":{"start":{"line":21,"column":4},"end":{"line":24,"column":7}},"5":{"start":{"line":22,"column":23},"end":{"line":22,"column":39}},"6":{"start":{"line":23,"column":8},"end":{"line":23,"column":54}},"7":{"start":{"line":25,"column":4},"end":{"line":28,"column":7}},"8":{"start":{"line":26,"column":23},"end":{"line":26,"column":35}},"9":{"start":{"line":27,"column":8},"end":{"line":27,"column":70}},"10":{"start":{"line":29,"column":4},"end":{"line":32,"column":7}},"11":{"start":{"line":30,"column":23},"end":{"line":30,"column":48}},"12":{"start":{"line":31,"column":8},"end":{"line":31,"column":70}},"13":{"start":{"line":34,"column":0},"end":{"line":47,"column":3}},"14":{"start":{"line":35,"column":4},"end":{"line":38,"column":7}},"15":{"start":{"line":36,"column":25},"end":{"line":36,"column":44}},"16":{"start":{"line":37,"column":8},"end":{"line":37,"column":58}},"17":{"start":{"line":39,"column":4},"end":{"line":42,"column":7}},"18":{"start":{"line":40,"column":25},"end":{"line":40,"column":38}},"19":{"start":{"line":41,"column":8},"end":{"line":41,"column":58}},"20":{"start":{"line":43,"column":4},"end":{"line":46,"column":7}},"21":{"start":{"line":44,"column":25},"end":{"line":44,"column":51}},"22":{"start":{"line":45,"column":8},"end":{"line":45,"column":74}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":20,"column":28},"end":{"line":20,"column":29}},"loc":{"start":{"line":20,"column":34},"end":{"line":33,"column":1}},"line":20},"1":{"name":"(anonymous_1)","decl":{"start":{"line":21,"column":51},"end":{"line":21,"column":52}},"loc":{"start":{"line":21,"column":57},"end":{"line":24,"column":5}},"line":21},"2":{"name":"(anonymous_2)","decl":{"start":{"line":25,"column":63},"end":{"line":25,"column":64}},"loc":{"start":{"line":25,"column":69},"end":{"line":28,"column":5}},"line":25},"3":{"name":"(anonymous_3)","decl":{"start":{"line":29,"column":85},"end":{"line":29,"column":86}},"loc":{"start":{"line":29,"column":91},"end":{"line":32,"column":5}},"line":29},"4":{"name":"(anonymous_4)","decl":{"start":{"line":34,"column":30},"end":{"line":34,"column":31}},"loc":{"start":{"line":34,"column":36},"end":{"line":47,"column":1}},"line":34},"5":{"name":"(anonymous_5)","decl":{"start":{"line":35,"column":53},"end":{"line":35,"column":54}},"loc":{"start":{"line":35,"column":59},"end":{"line":38,"column":5}},"line":35},"6":{"name":"(anonymous_6)","decl":{"start":{"line":39,"column":71},"end":{"line":39,"column":72}},"loc":{"start":{"line":39,"column":77},"end":{"line":42,"column":5}},"line":39},"7":{"name":"(anonymous_7)","decl":{"start":{"line":43,"column":87},"end":{"line":43,"column":88}},"loc":{"start":{"line":43,"column":93},"end":{"line":46,"column":5}},"line":43}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1},"f":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-validation.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-validation.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,iCAAiC;AACjC,uDAAwE;AAExE,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;QAClD,MAAM,MAAM,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;QAChC,MAAM,CAAC,EAAE,CAAC,0BAAa,CAAC,MAAM,CAAC,CAAC,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sDAAsD,EAAE,GAAG,EAAE;QAC9D,MAAM,MAAM,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC;QAC5B,MAAM,CAAC,WAAW,CAAC,0BAAa,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4EAA4E,EAAE,GAAG,EAAE;QACpF,MAAM,MAAM,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,0BAAa,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;IACjC,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;QACpD,MAAM,QAAQ,GAAG,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC;QACrC,MAAM,CAAC,EAAE,CAAC,4BAAe,CAAC,QAAQ,CAAC,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8DAA8D,EAAE,GAAG,EAAE;QACtE,MAAM,QAAQ,GAAG,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;QAC/B,MAAM,CAAC,EAAE,CAAC,4BAAe,CAAC,QAAQ,CAAC,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8EAA8E,EAAE,GAAG,EAAE;QACtF,MAAM,QAAQ,GAAG,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC;QAC5C,MAAM,CAAC,WAAW,CAAC,4BAAe,CAAC,QAAQ,CAAC,EAAE,KAAK,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 the \"License\";\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport { isValidTagKey, isValidTagValue } from '../src/tags/validation';\n\ndescribe('isValidTagKey()', () => {\n  it('should return true when tag key is valid', () => {\n    const tagKey = { name: 'key1' };\n    assert.ok(isValidTagKey(tagKey));\n  });\n\n  it('should return false when tag key is 0 character long', () => {\n    const tagKey = { name: '' };\n    assert.strictEqual(isValidTagKey(tagKey), false);\n  });\n\n  it('should return false when the tag key length is longer than 255 characters ', () => {\n    const tagKey = { name: 'a'.repeat(256) };\n    assert.strictEqual(isValidTagKey(tagKey), false);\n  });\n});\n\ndescribe('isValidTagValue()', () => {\n  it('should return true when tag value is valid', () => {\n    const tagValue = { value: 'value1' };\n    assert.ok(isValidTagValue(tagValue));\n  });\n\n  it('should not throw an error when tag value is 0 character long', () => {\n    const tagValue = { value: '' };\n    assert.ok(isValidTagValue(tagValue));\n  });\n\n  it('should return false when the tag value length is longer than 255 characters ', () => {\n    const tagValue = { value: 'a'.repeat(256) };\n    assert.strictEqual(isValidTagValue(tagValue), false);\n  });\n});\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"9ebeb2b85a17012072ecb787bada38432983a767","contentHash":"442203dc9a6e6a657e7fec715a542c33792a0d5425d40bd48594bb0ba5b49354"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-variant-encoding.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-variant-encoding.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":15},"end":{"line":18,"column":32}},"2":{"start":{"line":19,"column":27},"end":{"line":19,"column":78}},"3":{"start":{"line":20,"column":18},"end":{"line":31,"column":1}},"4":{"start":{"line":33,"column":4},"end":{"line":33,"column":45}},"5":{"start":{"line":35,"column":0},"end":{"line":55,"column":3}},"6":{"start":{"line":36,"column":4},"end":{"line":39,"column":7}},"7":{"start":{"line":37,"column":25},"end":{"line":37,"column":37}},"8":{"start":{"line":38,"column":8},"end":{"line":38,"column":86}},"9":{"start":{"line":40,"column":4},"end":{"line":47,"column":7}},"10":{"start":{"line":41,"column":20},"end":{"line":41,"column":23}},"11":{"start":{"line":42,"column":30},"end":{"line":42,"column":42}},"12":{"start":{"line":43,"column":24},"end":{"line":43,"column":60}},"13":{"start":{"line":44,"column":8},"end":{"line":44,"column":55}},"14":{"start":{"line":45,"column":21},"end":{"line":45,"column":41}},"15":{"start":{"line":46,"column":8},"end":{"line":46,"column":74}},"16":{"start":{"line":48,"column":4},"end":{"line":54,"column":5}},"17":{"start":{"line":49,"column":8},"end":{"line":53,"column":11}},"18":{"start":{"line":50,"column":28},"end":{"line":50,"column":69}},"19":{"start":{"line":51,"column":25},"end":{"line":51,"column":45}},"20":{"start":{"line":52,"column":12},"end":{"line":52,"column":83}}},"fnMap":{"0":{"name":"randint","decl":{"start":{"line":32,"column":9},"end":{"line":32,"column":16}},"loc":{"start":{"line":32,"column":24},"end":{"line":34,"column":1}},"line":32},"1":{"name":"(anonymous_1)","decl":{"start":{"line":35,"column":29},"end":{"line":35,"column":30}},"loc":{"start":{"line":35,"column":35},"end":{"line":55,"column":1}},"line":35},"2":{"name":"(anonymous_2)","decl":{"start":{"line":36,"column":36},"end":{"line":36,"column":37}},"loc":{"start":{"line":36,"column":42},"end":{"line":39,"column":5}},"line":36},"3":{"name":"(anonymous_3)","decl":{"start":{"line":40,"column":46},"end":{"line":40,"column":47}},"loc":{"start":{"line":40,"column":52},"end":{"line":47,"column":5}},"line":40},"4":{"name":"(anonymous_4)","decl":{"start":{"line":49,"column":61},"end":{"line":49,"column":62}},"loc":{"start":{"line":49,"column":67},"end":{"line":53,"column":9}},"line":49}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":10,"18":10,"19":10,"20":10},"f":{"0":1,"1":1,"2":1,"3":1,"4":10},"b":{},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-variant-encoding.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-variant-encoding.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,iCAAiC;AACjC,+EAGkD;AAElD,MAAM,SAAS,GAAG;IAChB,CAAC;IACD,CAAC;IACD,EAAE;IACF,GAAG;IACH,IAAI;IACJ,KAAK;IACL,MAAM;IACN,OAAO;IACP,QAAQ;IACR,SAAS;CACV,CAAC;AAEF,SAAS,OAAO,CAAC,KAAa;IAC5B,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC;AAC3C,CAAC;AAED,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAChC,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACnC,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;QAC9B,MAAM,CAAC,eAAe,CAAC,+BAAY,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;QAC7C,MAAM,GAAG,GAAG,GAAG,CAAC;QAChB,MAAM,aAAa,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,WAAW;QAE/C,MAAM,OAAO,GAAG,+BAAY,CAAC,GAAG,CAAC,CAAC;QAClC,MAAM,CAAC,eAAe,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;QAC/C,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAClC,MAAM,CAAC,WAAW,CAAC,+BAAY,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;QAChC,EAAE,CAAC,4BAA4B,QAAQ,YAAY,EAAE,GAAG,EAAE;YACxD,MAAM,OAAO,GAAG,+BAAY,CAAC,QAAQ,CAAC,CAAC;YACvC,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAClC,MAAM,CAAC,WAAW,CAAC,+BAAY,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;KACJ;AACH,CAAC,CAAC,CAAC","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport {\n  DecodeVarint,\n  EncodeVarint,\n} from '../src/tags/propagation/variant-encoding';\n\nconst testCases = [\n  0,\n  1,\n  10,\n  100,\n  1000,\n  10000,\n  100000,\n  1000000,\n  10000000,\n  100000000,\n];\n\nfunction randint(range: number) {\n  return Math.floor(Math.random() * range);\n}\n\ndescribe('variant encoding', () => {\n  it('should encode single byte', () => {\n    const expected = randint(127);\n    assert.deepStrictEqual(EncodeVarint(expected), [expected]);\n  });\n\n  it('should encode/decode multiple bytes', () => {\n    const num = 300;\n    const expectedBytes = [0xac, 0x02]; // [172, 2]\n\n    const variant = EncodeVarint(num);\n    assert.deepStrictEqual(variant, expectedBytes);\n    const buff = Buffer.from(variant);\n    assert.strictEqual(DecodeVarint(buff, 0), num);\n  });\n\n  for (const testCase of testCases) {\n    it(`should encode and decode ${testCase} correctly`, () => {\n      const variant = EncodeVarint(testCase);\n      const buff = Buffer.from(variant);\n      assert.strictEqual(DecodeVarint(buff, 0), testCase);\n    });\n  }\n});\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"635d50ab72fbbf89708db53aaa8c3b6a160cc549","contentHash":"def8d065874b0755485c75630c61105b13c1f6b460ec86caae0f27135e2e4fa1"},"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-view.ts":{"path":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-view.ts","statementMap":{"0":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"1":{"start":{"line":18,"column":15},"end":{"line":18,"column":32}},"2":{"start":{"line":19,"column":14},"end":{"line":19,"column":31}},"3":{"start":{"line":20,"column":20},"end":{"line":20,"column":54}},"4":{"start":{"line":21,"column":16},"end":{"line":21,"column":54}},"5":{"start":{"line":22,"column":16},"end":{"line":22,"column":45}},"6":{"start":{"line":24,"column":16},"end":{"line":24,"column":17}},"7":{"start":{"line":26,"column":4},"end":{"line":26,"column":64}},"8":{"start":{"line":29,"column":22},"end":{"line":29,"column":60}},"9":{"start":{"line":29,"column":50},"end":{"line":29,"column":59}},"10":{"start":{"line":30,"column":4},"end":{"line":30,"column":62}},"11":{"start":{"line":31,"column":4},"end":{"line":31,"column":56}},"12":{"start":{"line":32,"column":25},"end":{"line":32,"column":50}},"13":{"start":{"line":33,"column":4},"end":{"line":33,"column":75}},"14":{"start":{"line":34,"column":41},"end":{"line":36,"column":42}},"15":{"start":{"line":35,"column":22},"end":{"line":35,"column":55}},"16":{"start":{"line":36,"column":31},"end":{"line":36,"column":41}},"17":{"start":{"line":37,"column":4},"end":{"line":37,"column":108}},"18":{"start":{"line":38,"column":33},"end":{"line":38,"column":88}},"19":{"start":{"line":39,"column":4},"end":{"line":39,"column":91}},"20":{"start":{"line":42,"column":4},"end":{"line":42,"column":58}},"21":{"start":{"line":43,"column":28},"end":{"line":43,"column":55}},"22":{"start":{"line":44,"column":4},"end":{"line":58,"column":5}},"23":{"start":{"line":46,"column":24},"end":{"line":46,"column":70}},"24":{"start":{"line":46,"column":60},"end":{"line":46,"column":69}},"25":{"start":{"line":47,"column":12},"end":{"line":47,"column":59}},"26":{"start":{"line":48,"column":12},"end":{"line":48,"column":18}},"27":{"start":{"line":50,"column":12},"end":{"line":50,"column":77}},"28":{"start":{"line":51,"column":12},"end":{"line":51,"column":18}},"29":{"start":{"line":53,"column":12},"end":{"line":53,"column":68}},"30":{"start":{"line":54,"column":12},"end":{"line":54,"column":18}},"31":{"start":{"line":56,"column":12},"end":{"line":56,"column":97}},"32":{"start":{"line":57,"column":12},"end":{"line":57,"column":18}},"33":{"start":{"line":60,"column":0},"end":{"line":528,"column":3}},"34":{"start":{"line":61,"column":20},"end":{"line":65,"column":5}},"35":{"start":{"line":66,"column":33},"end":{"line":87,"column":5}},"36":{"start":{"line":88,"column":4},"end":{"line":94,"column":7}},"37":{"start":{"line":89,"column":8},"end":{"line":93,"column":11}},"38":{"start":{"line":90,"column":28},"end":{"line":90,"column":72}},"39":{"start":{"line":91,"column":25},"end":{"line":91,"column":135}},"40":{"start":{"line":92,"column":12},"end":{"line":92,"column":63}},"41":{"start":{"line":95,"column":4},"end":{"line":107,"column":7}},"42":{"start":{"line":96,"column":8},"end":{"line":106,"column":11}},"43":{"start":{"line":97,"column":28},"end":{"line":101,"column":13}},"44":{"start":{"line":102,"column":12},"end":{"line":105,"column":50}},"45":{"start":{"line":103,"column":29},"end":{"line":103,"column":139}},"46":{"start":{"line":104,"column":16},"end":{"line":104,"column":67}},"47":{"start":{"line":108,"column":4},"end":{"line":154,"column":7}},"48":{"start":{"line":109,"column":34},"end":{"line":109,"column":59}},"49":{"start":{"line":110,"column":33},"end":{"line":110,"column":42}},"50":{"start":{"line":111,"column":24},"end":{"line":111,"column":44}},"51":{"start":{"line":112,"column":24},"end":{"line":112,"column":44}},"52":{"start":{"line":113,"column":24},"end":{"line":113,"column":42}},"53":{"start":{"line":114,"column":24},"end":{"line":114,"column":44}},"54":{"start":{"line":115,"column":26},"end":{"line":115,"column":49}},"55":{"start":{"line":116,"column":26},"end":{"line":116,"column":49}},"56":{"start":{"line":117,"column":26},"end":{"line":117,"column":49}},"57":{"start":{"line":118,"column":21},"end":{"line":118,"column":39}},"58":{"start":{"line":119,"column":8},"end":{"line":119,"column":37}},"59":{"start":{"line":120,"column":8},"end":{"line":120,"column":37}},"60":{"start":{"line":121,"column":8},"end":{"line":132,"column":9}},"61":{"start":{"line":122,"column":12},"end":{"line":131,"column":15}},"62":{"start":{"line":123,"column":29},"end":{"line":123,"column":158}},"63":{"start":{"line":124,"column":39},"end":{"line":124,"column":41}},"64":{"start":{"line":125,"column":16},"end":{"line":130,"column":17}},"65":{"start":{"line":126,"column":20},"end":{"line":126,"column":47}},"66":{"start":{"line":127,"column":40},"end":{"line":127,"column":58}},"67":{"start":{"line":128,"column":20},"end":{"line":128,"column":62}},"68":{"start":{"line":129,"column":20},"end":{"line":129,"column":114}},"69":{"start":{"line":133,"column":8},"end":{"line":145,"column":11}},"70":{"start":{"line":134,"column":45},"end":{"line":134,"column":76}},"71":{"start":{"line":135,"column":25},"end":{"line":135,"column":163}},"72":{"start":{"line":136,"column":35},"end":{"line":136,"column":37}},"73":{"start":{"line":137,"column":12},"end":{"line":141,"column":13}},"74":{"start":{"line":138,"column":16},"end":{"line":138,"column":43}},"75":{"start":{"line":139,"column":36},"end":{"line":139,"column":54}},"76":{"start":{"line":140,"column":16},"end":{"line":140,"column":58}},"77":{"start":{"line":142,"column":25},"end":{"line":142,"column":65}},"78":{"start":{"line":143,"column":12},"end":{"line":143,"column":60}},"79":{"start":{"line":144,"column":12},"end":{"line":144,"column":68}},"80":{"start":{"line":146,"column":21},"end":{"line":146,"column":131}},"81":{"start":{"line":147,"column":8},"end":{"line":153,"column":11}},"82":{"start":{"line":148,"column":27},"end":{"line":148,"column":45}},"83":{"start":{"line":149,"column":12},"end":{"line":149,"column":43}},"84":{"start":{"line":150,"column":32},"end":{"line":150,"column":54}},"85":{"start":{"line":151,"column":12},"end":{"line":151,"column":56}},"86":{"start":{"line":152,"column":12},"end":{"line":152,"column":54}},"87":{"start":{"line":155,"column":4},"end":{"line":499,"column":7}},"88":{"start":{"line":156,"column":29},"end":{"line":156,"column":43}},"89":{"start":{"line":157,"column":26},"end":{"line":157,"column":34}},"90":{"start":{"line":158,"column":27},"end":{"line":158,"column":62}},"91":{"start":{"line":159,"column":30},"end":{"line":159,"column":43}},"92":{"start":{"line":160,"column":35},"end":{"line":160,"column":72}},"93":{"start":{"line":161,"column":34},"end":{"line":161,"column":59}},"94":{"start":{"line":162,"column":24},"end":{"line":162,"column":33}},"95":{"start":{"line":163,"column":24},"end":{"line":163,"column":44}},"96":{"start":{"line":164,"column":24},"end":{"line":164,"column":44}},"97":{"start":{"line":165,"column":24},"end":{"line":165,"column":42}},"98":{"start":{"line":166,"column":26},"end":{"line":166,"column":49}},"99":{"start":{"line":167,"column":26},"end":{"line":167,"column":49}},"100":{"start":{"line":168,"column":26},"end":{"line":168,"column":49}},"101":{"start":{"line":169,"column":26},"end":{"line":169,"column":49}},"102":{"start":{"line":170,"column":21},"end":{"line":170,"column":39}},"103":{"start":{"line":171,"column":8},"end":{"line":171,"column":37}},"104":{"start":{"line":172,"column":8},"end":{"line":172,"column":37}},"105":{"start":{"line":173,"column":23},"end":{"line":173,"column":41}},"106":{"start":{"line":174,"column":8},"end":{"line":174,"column":39}},"107":{"start":{"line":175,"column":8},"end":{"line":175,"column":39}},"108":{"start":{"line":176,"column":8},"end":{"line":239,"column":9}},"109":{"start":{"line":177,"column":25},"end":{"line":177,"column":145}},"110":{"start":{"line":178,"column":12},"end":{"line":181,"column":13}},"111":{"start":{"line":179,"column":36},"end":{"line":179,"column":54}},"112":{"start":{"line":180,"column":16},"end":{"line":180,"column":58}},"113":{"start":{"line":182,"column":12},"end":{"line":188,"column":15}},"114":{"start":{"line":184,"column":16},"end":{"line":184,"column":50}},"115":{"start":{"line":184,"column":39},"end":{"line":184,"column":49}},"116":{"start":{"line":185,"column":16},"end":{"line":185,"column":47}},"117":{"start":{"line":185,"column":33},"end":{"line":185,"column":46}},"118":{"start":{"line":187,"column":16},"end":{"line":187,"column":59}},"119":{"start":{"line":189,"column":12},"end":{"line":194,"column":15}},"120":{"start":{"line":190,"column":16},"end":{"line":190,"column":46}},"121":{"start":{"line":191,"column":16},"end":{"line":191,"column":37}},"122":{"start":{"line":193,"column":16},"end":{"line":193,"column":65}},"123":{"start":{"line":195,"column":47},"end":{"line":195,"column":76}},"124":{"start":{"line":196,"column":12},"end":{"line":238,"column":15}},"125":{"start":{"line":197,"column":16},"end":{"line":209,"column":19}},"126":{"start":{"line":198,"column":20},"end":{"line":198,"column":42}},"127":{"start":{"line":199,"column":20},"end":{"line":208,"column":23}},"128":{"start":{"line":210,"column":58},"end":{"line":210,"column":68}},"129":{"start":{"line":211,"column":16},"end":{"line":230,"column":17}},"130":{"start":{"line":213,"column":20},"end":{"line":215,"column":23}},"131":{"start":{"line":214,"column":24},"end":{"line":214,"column":70}},"132":{"start":{"line":217,"column":21},"end":{"line":230,"column":17}},"133":{"start":{"line":219,"column":20},"end":{"line":221,"column":23}},"134":{"start":{"line":220,"column":24},"end":{"line":220,"column":70}},"135":{"start":{"line":224,"column":20},"end":{"line":229,"column":23}},"136":{"start":{"line":225,"column":24},"end":{"line":225,"column":50}},"137":{"start":{"line":226,"column":24},"end":{"line":226,"column":82}},"138":{"start":{"line":227,"column":24},"end":{"line":227,"column":84}},"139":{"start":{"line":228,"column":24},"end":{"line":228,"column":83}},"140":{"start":{"line":231,"column":16},"end":{"line":237,"column":19}},"141":{"start":{"line":232,"column":20},"end":{"line":232,"column":43}},"142":{"start":{"line":233,"column":20},"end":{"line":236,"column":23}},"143":{"start":{"line":240,"column":8},"end":{"line":269,"column":11}},"144":{"start":{"line":241,"column":25},"end":{"line":241,"column":146}},"145":{"start":{"line":242,"column":24},"end":{"line":242,"column":25}},"146":{"start":{"line":243,"column":12},"end":{"line":247,"column":13}},"147":{"start":{"line":244,"column":16},"end":{"line":244,"column":31}},"148":{"start":{"line":245,"column":36},"end":{"line":245,"column":54}},"149":{"start":{"line":246,"column":16},"end":{"line":246,"column":58}},"150":{"start":{"line":248,"column":12},"end":{"line":268,"column":15}},"151":{"start":{"line":249,"column":39},"end":{"line":249,"column":68}},"152":{"start":{"line":250,"column":53},"end":{"line":250,"column":63}},"153":{"start":{"line":251,"column":16},"end":{"line":251,"column":34}},"154":{"start":{"line":252,"column":32},"end":{"line":252,"column":38}},"155":{"start":{"line":253,"column":45},"end":{"line":253,"column":50}},"156":{"start":{"line":254,"column":16},"end":{"line":254,"column":37}},"157":{"start":{"line":255,"column":16},"end":{"line":255,"column":69}},"158":{"start":{"line":256,"column":16},"end":{"line":256,"column":71}},"159":{"start":{"line":257,"column":16},"end":{"line":257,"column":74}},"160":{"start":{"line":258,"column":16},"end":{"line":258,"column":70}},"161":{"start":{"line":259,"column":16},"end":{"line":259,"column":62}},"162":{"start":{"line":260,"column":16},"end":{"line":266,"column":19}},"163":{"start":{"line":267,"column":16},"end":{"line":267,"column":75}},"164":{"start":{"line":270,"column":8},"end":{"line":377,"column":11}},"165":{"start":{"line":271,"column":30},"end":{"line":271,"column":38}},"166":{"start":{"line":272,"column":12},"end":{"line":274,"column":15}},"167":{"start":{"line":273,"column":16},"end":{"line":273,"column":47}},"168":{"start":{"line":273,"column":33},"end":{"line":273,"column":46}},"169":{"start":{"line":275,"column":12},"end":{"line":277,"column":15}},"170":{"start":{"line":276,"column":16},"end":{"line":276,"column":37}},"171":{"start":{"line":278,"column":12},"end":{"line":327,"column":15}},"172":{"start":{"line":279,"column":29},"end":{"line":279,"column":150}},"173":{"start":{"line":280,"column":28},"end":{"line":280,"column":29}},"174":{"start":{"line":281,"column":36},"end":{"line":281,"column":68}},"175":{"start":{"line":282,"column":16},"end":{"line":286,"column":17}},"176":{"start":{"line":283,"column":20},"end":{"line":283,"column":35}},"177":{"start":{"line":284,"column":40},"end":{"line":284,"column":58}},"178":{"start":{"line":285,"column":20},"end":{"line":285,"column":75}},"179":{"start":{"line":287,"column":39},"end":{"line":287,"column":68}},"180":{"start":{"line":288,"column":53},"end":{"line":288,"column":63}},"181":{"start":{"line":289,"column":16},"end":{"line":289,"column":34}},"182":{"start":{"line":290,"column":32},"end":{"line":290,"column":38}},"183":{"start":{"line":291,"column":45},"end":{"line":291,"column":50}},"184":{"start":{"line":292,"column":16},"end":{"line":292,"column":37}},"185":{"start":{"line":293,"column":16},"end":{"line":325,"column":19}},"186":{"start":{"line":326,"column":16},"end":{"line":326,"column":75}},"187":{"start":{"line":328,"column":12},"end":{"line":376,"column":15}},"188":{"start":{"line":329,"column":29},"end":{"line":329,"column":150}},"189":{"start":{"line":330,"column":28},"end":{"line":330,"column":29}},"190":{"start":{"line":331,"column":16},"end":{"line":335,"column":17}},"191":{"start":{"line":332,"column":20},"end":{"line":332,"column":35}},"192":{"start":{"line":333,"column":40},"end":{"line":333,"column":58}},"193":{"start":{"line":334,"column":20},"end":{"line":334,"column":66}},"194":{"start":{"line":336,"column":39},"end":{"line":336,"column":68}},"195":{"start":{"line":337,"column":53},"end":{"line":337,"column":63}},"196":{"start":{"line":338,"column":16},"end":{"line":338,"column":34}},"197":{"start":{"line":339,"column":32},"end":{"line":339,"column":38}},"198":{"start":{"line":340,"column":45},"end":{"line":340,"column":50}},"199":{"start":{"line":341,"column":16},"end":{"line":341,"column":37}},"200":{"start":{"line":342,"column":16},"end":{"line":374,"column":19}},"201":{"start":{"line":375,"column":16},"end":{"line":375,"column":75}},"202":{"start":{"line":378,"column":8},"end":{"line":433,"column":11}},"203":{"start":{"line":379,"column":25},"end":{"line":379,"column":146}},"204":{"start":{"line":380,"column":24},"end":{"line":380,"column":25}},"205":{"start":{"line":381,"column":12},"end":{"line":387,"column":13}},"206":{"start":{"line":382,"column":16},"end":{"line":382,"column":31}},"207":{"start":{"line":383,"column":36},"end":{"line":383,"column":54}},"208":{"start":{"line":384,"column":37},"end":{"line":384,"column":55}},"209":{"start":{"line":385,"column":16},"end":{"line":385,"column":58}},"210":{"start":{"line":386,"column":16},"end":{"line":386,"column":61}},"211":{"start":{"line":388,"column":12},"end":{"line":432,"column":15}},"212":{"start":{"line":389,"column":39},"end":{"line":389,"column":68}},"213":{"start":{"line":390,"column":16},"end":{"line":390,"column":57}},"214":{"start":{"line":391,"column":122},"end":{"line":391,"column":132}},"215":{"start":{"line":392,"column":16},"end":{"line":392,"column":35}},"216":{"start":{"line":393,"column":30},"end":{"line":393,"column":37}},"217":{"start":{"line":394,"column":43},"end":{"line":394,"column":48}},"218":{"start":{"line":395,"column":16},"end":{"line":395,"column":37}},"219":{"start":{"line":396,"column":16},"end":{"line":396,"column":69}},"220":{"start":{"line":397,"column":16},"end":{"line":397,"column":71}},"221":{"start":{"line":398,"column":16},"end":{"line":398,"column":74}},"222":{"start":{"line":399,"column":16},"end":{"line":399,"column":70}},"223":{"start":{"line":400,"column":16},"end":{"line":400,"column":62}},"224":{"start":{"line":401,"column":16},"end":{"line":407,"column":19}},"225":{"start":{"line":408,"column":16},"end":{"line":411,"column":19}},"226":{"start":{"line":412,"column":16},"end":{"line":412,"column":35}},"227":{"start":{"line":413,"column":16},"end":{"line":413,"column":34}},"228":{"start":{"line":414,"column":16},"end":{"line":414,"column":47}},"229":{"start":{"line":415,"column":16},"end":{"line":415,"column":37}},"230":{"start":{"line":416,"column":16},"end":{"line":416,"column":69}},"231":{"start":{"line":417,"column":16},"end":{"line":417,"column":71}},"232":{"start":{"line":418,"column":16},"end":{"line":418,"column":74}},"233":{"start":{"line":419,"column":16},"end":{"line":419,"column":70}},"234":{"start":{"line":420,"column":16},"end":{"line":420,"column":62}},"235":{"start":{"line":421,"column":16},"end":{"line":427,"column":19}},"236":{"start":{"line":428,"column":16},"end":{"line":431,"column":19}},"237":{"start":{"line":434,"column":8},"end":{"line":455,"column":11}},"238":{"start":{"line":435,"column":25},"end":{"line":435,"column":139}},"239":{"start":{"line":436,"column":12},"end":{"line":439,"column":13}},"240":{"start":{"line":437,"column":36},"end":{"line":437,"column":54}},"241":{"start":{"line":438,"column":16},"end":{"line":438,"column":58}},"242":{"start":{"line":440,"column":12},"end":{"line":454,"column":15}},"243":{"start":{"line":441,"column":39},"end":{"line":441,"column":68}},"244":{"start":{"line":442,"column":53},"end":{"line":442,"column":63}},"245":{"start":{"line":443,"column":16},"end":{"line":443,"column":34}},"246":{"start":{"line":444,"column":32},"end":{"line":444,"column":38}},"247":{"start":{"line":445,"column":45},"end":{"line":445,"column":50}},"248":{"start":{"line":446,"column":16},"end":{"line":446,"column":37}},"249":{"start":{"line":447,"column":16},"end":{"line":447,"column":69}},"250":{"start":{"line":448,"column":16},"end":{"line":448,"column":71}},"251":{"start":{"line":449,"column":16},"end":{"line":449,"column":74}},"252":{"start":{"line":450,"column":16},"end":{"line":450,"column":70}},"253":{"start":{"line":451,"column":16},"end":{"line":451,"column":59}},"254":{"start":{"line":452,"column":16},"end":{"line":452,"column":45}},"255":{"start":{"line":453,"column":16},"end":{"line":453,"column":75}},"256":{"start":{"line":456,"column":8},"end":{"line":479,"column":11}},"257":{"start":{"line":457,"column":25},"end":{"line":457,"column":137}},"258":{"start":{"line":458,"column":24},"end":{"line":458,"column":25}},"259":{"start":{"line":459,"column":12},"end":{"line":463,"column":13}},"260":{"start":{"line":460,"column":16},"end":{"line":460,"column":31}},"261":{"start":{"line":461,"column":36},"end":{"line":461,"column":54}},"262":{"start":{"line":462,"column":16},"end":{"line":462,"column":58}},"263":{"start":{"line":464,"column":12},"end":{"line":478,"column":15}},"264":{"start":{"line":465,"column":39},"end":{"line":465,"column":68}},"265":{"start":{"line":466,"column":53},"end":{"line":466,"column":63}},"266":{"start":{"line":467,"column":16},"end":{"line":467,"column":34}},"267":{"start":{"line":468,"column":32},"end":{"line":468,"column":38}},"268":{"start":{"line":469,"column":45},"end":{"line":469,"column":50}},"269":{"start":{"line":470,"column":16},"end":{"line":470,"column":37}},"270":{"start":{"line":471,"column":16},"end":{"line":471,"column":69}},"271":{"start":{"line":472,"column":16},"end":{"line":472,"column":71}},"272":{"start":{"line":473,"column":16},"end":{"line":473,"column":74}},"273":{"start":{"line":474,"column":16},"end":{"line":474,"column":70}},"274":{"start":{"line":475,"column":16},"end":{"line":475,"column":59}},"275":{"start":{"line":476,"column":16},"end":{"line":476,"column":49}},"276":{"start":{"line":477,"column":16},"end":{"line":477,"column":75}},"277":{"start":{"line":480,"column":8},"end":{"line":498,"column":11}},"278":{"start":{"line":481,"column":25},"end":{"line":481,"column":144}},"279":{"start":{"line":482,"column":12},"end":{"line":485,"column":13}},"280":{"start":{"line":483,"column":36},"end":{"line":483,"column":54}},"281":{"start":{"line":484,"column":16},"end":{"line":484,"column":58}},"282":{"start":{"line":486,"column":12},"end":{"line":497,"column":15}},"283":{"start":{"line":487,"column":39},"end":{"line":487,"column":68}},"284":{"start":{"line":488,"column":53},"end":{"line":488,"column":63}},"285":{"start":{"line":489,"column":16},"end":{"line":489,"column":34}},"286":{"start":{"line":490,"column":32},"end":{"line":490,"column":38}},"287":{"start":{"line":491,"column":45},"end":{"line":491,"column":50}},"288":{"start":{"line":492,"column":16},"end":{"line":492,"column":74}},"289":{"start":{"line":493,"column":16},"end":{"line":493,"column":70}},"290":{"start":{"line":494,"column":16},"end":{"line":494,"column":59}},"291":{"start":{"line":495,"column":16},"end":{"line":495,"column":91}},"292":{"start":{"line":496,"column":16},"end":{"line":496,"column":62}},"293":{"start":{"line":500,"column":4},"end":{"line":527,"column":7}},"294":{"start":{"line":502,"column":24},"end":{"line":502,"column":44}},"295":{"start":{"line":503,"column":24},"end":{"line":503,"column":44}},"296":{"start":{"line":504,"column":24},"end":{"line":504,"column":42}},"297":{"start":{"line":505,"column":26},"end":{"line":505,"column":49}},"298":{"start":{"line":506,"column":26},"end":{"line":506,"column":49}},"299":{"start":{"line":507,"column":21},"end":{"line":507,"column":39}},"300":{"start":{"line":508,"column":8},"end":{"line":508,"column":37}},"301":{"start":{"line":509,"column":8},"end":{"line":509,"column":37}},"302":{"start":{"line":510,"column":8},"end":{"line":514,"column":11}},"303":{"start":{"line":511,"column":12},"end":{"line":511,"column":130}},"304":{"start":{"line":512,"column":32},"end":{"line":512,"column":54}},"305":{"start":{"line":513,"column":12},"end":{"line":513,"column":54}},"306":{"start":{"line":515,"column":8},"end":{"line":520,"column":11}},"307":{"start":{"line":516,"column":12},"end":{"line":519,"column":16}},"308":{"start":{"line":521,"column":8},"end":{"line":523,"column":11}},"309":{"start":{"line":522,"column":12},"end":{"line":522,"column":54}},"310":{"start":{"line":524,"column":8},"end":{"line":526,"column":11}},"311":{"start":{"line":525,"column":12},"end":{"line":525,"column":64}}},"fnMap":{"0":{"name":"isAlmostEqual","decl":{"start":{"line":25,"column":9},"end":{"line":25,"column":22}},"loc":{"start":{"line":25,"column":50},"end":{"line":27,"column":1}},"line":25},"1":{"name":"assertDistributionData","decl":{"start":{"line":28,"column":9},"end":{"line":28,"column":31}},"loc":{"start":{"line":28,"column":58},"end":{"line":40,"column":1}},"line":28},"2":{"name":"(anonymous_2)","decl":{"start":{"line":29,"column":36},"end":{"line":29,"column":37}},"loc":{"start":{"line":29,"column":50},"end":{"line":29,"column":59}},"line":29},"3":{"name":"(anonymous_3)","decl":{"start":{"line":35,"column":13},"end":{"line":35,"column":14}},"loc":{"start":{"line":35,"column":22},"end":{"line":35,"column":55}},"line":35},"4":{"name":"(anonymous_4)","decl":{"start":{"line":36,"column":16},"end":{"line":36,"column":17}},"loc":{"start":{"line":36,"column":31},"end":{"line":36,"column":41}},"line":36},"5":{"name":"assertView","decl":{"start":{"line":41,"column":9},"end":{"line":41,"column":19}},"loc":{"start":{"line":41,"column":70},"end":{"line":59,"column":1}},"line":41},"6":{"name":"(anonymous_6)","decl":{"start":{"line":46,"column":46},"end":{"line":46,"column":47}},"loc":{"start":{"line":46,"column":60},"end":{"line":46,"column":69}},"line":46},"7":{"name":"(anonymous_7)","decl":{"start":{"line":60,"column":21},"end":{"line":60,"column":22}},"loc":{"start":{"line":60,"column":27},"end":{"line":528,"column":1}},"line":60},"8":{"name":"(anonymous_8)","decl":{"start":{"line":88,"column":29},"end":{"line":88,"column":30}},"loc":{"start":{"line":88,"column":35},"end":{"line":94,"column":5}},"line":88},"9":{"name":"(anonymous_9)","decl":{"start":{"line":89,"column":47},"end":{"line":89,"column":48}},"loc":{"start":{"line":89,"column":53},"end":{"line":93,"column":9}},"line":89},"10":{"name":"(anonymous_10)","decl":{"start":{"line":95,"column":29},"end":{"line":95,"column":30}},"loc":{"start":{"line":95,"column":35},"end":{"line":107,"column":5}},"line":95},"11":{"name":"(anonymous_11)","decl":{"start":{"line":96,"column":57},"end":{"line":96,"column":58}},"loc":{"start":{"line":96,"column":63},"end":{"line":106,"column":9}},"line":96},"12":{"name":"(anonymous_12)","decl":{"start":{"line":102,"column":26},"end":{"line":102,"column":27}},"loc":{"start":{"line":102,"column":32},"end":{"line":105,"column":13}},"line":102},"13":{"name":"(anonymous_13)","decl":{"start":{"line":108,"column":36},"end":{"line":108,"column":37}},"loc":{"start":{"line":108,"column":42},"end":{"line":154,"column":5}},"line":108},"14":{"name":"(anonymous_14)","decl":{"start":{"line":122,"column":117},"end":{"line":122,"column":118}},"loc":{"start":{"line":122,"column":123},"end":{"line":131,"column":13}},"line":122},"15":{"name":"(anonymous_15)","decl":{"start":{"line":133,"column":51},"end":{"line":133,"column":52}},"loc":{"start":{"line":133,"column":57},"end":{"line":145,"column":9}},"line":133},"16":{"name":"(anonymous_16)","decl":{"start":{"line":147,"column":74},"end":{"line":147,"column":75}},"loc":{"start":{"line":147,"column":80},"end":{"line":153,"column":9}},"line":147},"17":{"name":"(anonymous_17)","decl":{"start":{"line":155,"column":28},"end":{"line":155,"column":29}},"loc":{"start":{"line":155,"column":34},"end":{"line":499,"column":5}},"line":155},"18":{"name":"(anonymous_18)","decl":{"start":{"line":182,"column":23},"end":{"line":182,"column":24}},"loc":{"start":{"line":182,"column":29},"end":{"line":188,"column":13}},"line":182},"19":{"name":"(anonymous_19)","decl":{"start":{"line":184,"column":33},"end":{"line":184,"column":34}},"loc":{"start":{"line":184,"column":39},"end":{"line":184,"column":49}},"line":184},"20":{"name":"(anonymous_20)","decl":{"start":{"line":185,"column":27},"end":{"line":185,"column":28}},"loc":{"start":{"line":185,"column":33},"end":{"line":185,"column":46}},"line":185},"21":{"name":"(anonymous_21)","decl":{"start":{"line":189,"column":22},"end":{"line":189,"column":23}},"loc":{"start":{"line":189,"column":28},"end":{"line":194,"column":13}},"line":189},"22":{"name":"(anonymous_22)","decl":{"start":{"line":196,"column":81},"end":{"line":196,"column":82}},"loc":{"start":{"line":196,"column":87},"end":{"line":238,"column":13}},"line":196},"23":{"name":"(anonymous_23)","decl":{"start":{"line":197,"column":45},"end":{"line":197,"column":46}},"loc":{"start":{"line":197,"column":51},"end":{"line":209,"column":17}},"line":197},"24":{"name":"(anonymous_24)","decl":{"start":{"line":213,"column":78},"end":{"line":213,"column":79}},"loc":{"start":{"line":213,"column":84},"end":{"line":215,"column":21}},"line":213},"25":{"name":"(anonymous_25)","decl":{"start":{"line":219,"column":79},"end":{"line":219,"column":80}},"loc":{"start":{"line":219,"column":85},"end":{"line":221,"column":21}},"line":219},"26":{"name":"(anonymous_26)","decl":{"start":{"line":224,"column":64},"end":{"line":224,"column":65}},"loc":{"start":{"line":224,"column":70},"end":{"line":229,"column":21}},"line":224},"27":{"name":"(anonymous_27)","decl":{"start":{"line":231,"column":46},"end":{"line":231,"column":47}},"loc":{"start":{"line":231,"column":52},"end":{"line":237,"column":17}},"line":231},"28":{"name":"(anonymous_28)","decl":{"start":{"line":240,"column":50},"end":{"line":240,"column":51}},"loc":{"start":{"line":240,"column":56},"end":{"line":269,"column":9}},"line":240},"29":{"name":"(anonymous_29)","decl":{"start":{"line":248,"column":36},"end":{"line":248,"column":37}},"loc":{"start":{"line":248,"column":42},"end":{"line":268,"column":13}},"line":248},"30":{"name":"(anonymous_30)","decl":{"start":{"line":270,"column":65},"end":{"line":270,"column":66}},"loc":{"start":{"line":270,"column":71},"end":{"line":377,"column":9}},"line":270},"31":{"name":"(anonymous_31)","decl":{"start":{"line":272,"column":19},"end":{"line":272,"column":20}},"loc":{"start":{"line":272,"column":25},"end":{"line":274,"column":13}},"line":272},"32":{"name":"(anonymous_32)","decl":{"start":{"line":273,"column":27},"end":{"line":273,"column":28}},"loc":{"start":{"line":273,"column":33},"end":{"line":273,"column":46}},"line":273},"33":{"name":"(anonymous_33)","decl":{"start":{"line":275,"column":18},"end":{"line":275,"column":19}},"loc":{"start":{"line":275,"column":24},"end":{"line":277,"column":13}},"line":275},"34":{"name":"(anonymous_34)","decl":{"start":{"line":278,"column":53},"end":{"line":278,"column":54}},"loc":{"start":{"line":278,"column":59},"end":{"line":327,"column":13}},"line":278},"35":{"name":"(anonymous_35)","decl":{"start":{"line":328,"column":59},"end":{"line":328,"column":60}},"loc":{"start":{"line":328,"column":65},"end":{"line":376,"column":13}},"line":328},"36":{"name":"(anonymous_36)","decl":{"start":{"line":378,"column":128},"end":{"line":378,"column":129}},"loc":{"start":{"line":378,"column":134},"end":{"line":433,"column":9}},"line":378},"37":{"name":"(anonymous_37)","decl":{"start":{"line":388,"column":37},"end":{"line":388,"column":38}},"loc":{"start":{"line":388,"column":43},"end":{"line":432,"column":13}},"line":388},"38":{"name":"(anonymous_38)","decl":{"start":{"line":434,"column":43},"end":{"line":434,"column":44}},"loc":{"start":{"line":434,"column":49},"end":{"line":455,"column":9}},"line":434},"39":{"name":"(anonymous_39)","decl":{"start":{"line":440,"column":36},"end":{"line":440,"column":37}},"loc":{"start":{"line":440,"column":42},"end":{"line":454,"column":13}},"line":440},"40":{"name":"(anonymous_40)","decl":{"start":{"line":456,"column":41},"end":{"line":456,"column":42}},"loc":{"start":{"line":456,"column":47},"end":{"line":479,"column":9}},"line":456},"41":{"name":"(anonymous_41)","decl":{"start":{"line":464,"column":36},"end":{"line":464,"column":37}},"loc":{"start":{"line":464,"column":42},"end":{"line":478,"column":13}},"line":464},"42":{"name":"(anonymous_42)","decl":{"start":{"line":480,"column":48},"end":{"line":480,"column":49}},"loc":{"start":{"line":480,"column":54},"end":{"line":498,"column":9}},"line":480},"43":{"name":"(anonymous_43)","decl":{"start":{"line":486,"column":36},"end":{"line":486,"column":37}},"loc":{"start":{"line":486,"column":42},"end":{"line":497,"column":13}},"line":486},"44":{"name":"(anonymous_44)","decl":{"start":{"line":500,"column":31},"end":{"line":500,"column":32}},"loc":{"start":{"line":500,"column":37},"end":{"line":527,"column":5}},"line":500},"45":{"name":"(anonymous_45)","decl":{"start":{"line":510,"column":15},"end":{"line":510,"column":16}},"loc":{"start":{"line":510,"column":21},"end":{"line":514,"column":9}},"line":510},"46":{"name":"(anonymous_46)","decl":{"start":{"line":515,"column":79},"end":{"line":515,"column":80}},"loc":{"start":{"line":515,"column":85},"end":{"line":520,"column":9}},"line":515},"47":{"name":"(anonymous_47)","decl":{"start":{"line":521,"column":77},"end":{"line":521,"column":78}},"loc":{"start":{"line":521,"column":83},"end":{"line":523,"column":9}},"line":521},"48":{"name":"(anonymous_48)","decl":{"start":{"line":524,"column":64},"end":{"line":524,"column":65}},"loc":{"start":{"line":524,"column":70},"end":{"line":526,"column":9}},"line":524}},"branchMap":{"0":{"loc":{"start":{"line":44,"column":4},"end":{"line":58,"column":5}},"type":"switch","locations":[{"start":{"line":45,"column":8},"end":{"line":48,"column":18}},{"start":{"line":49,"column":8},"end":{"line":51,"column":18}},{"start":{"line":52,"column":8},"end":{"line":54,"column":18}},{"start":{"line":55,"column":8},"end":{"line":57,"column":18}}],"line":44},"1":{"loc":{"start":{"line":211,"column":16},"end":{"line":230,"column":17}},"type":"if","locations":[{"start":{"line":211,"column":16},"end":{"line":230,"column":17}},{"start":{"line":211,"column":16},"end":{"line":230,"column":17}}],"line":211},"2":{"loc":{"start":{"line":217,"column":21},"end":{"line":230,"column":17}},"type":"if","locations":[{"start":{"line":217,"column":21},"end":{"line":230,"column":17}},{"start":{"line":217,"column":21},"end":{"line":230,"column":17}}],"line":217}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":15,"8":5,"9":10,"10":5,"11":5,"12":5,"13":5,"14":5,"15":15,"16":10,"17":5,"18":5,"19":5,"20":20,"21":20,"22":20,"23":5,"24":10,"25":5,"26":5,"27":5,"28":5,"29":5,"30":5,"31":5,"32":5,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":0,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":4,"62":4,"63":4,"64":4,"65":20,"66":20,"67":20,"68":20,"69":1,"70":1,"71":1,"72":1,"73":1,"74":5,"75":5,"76":5,"77":1,"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1,"86":1,"87":1,"88":1,"89":1,"90":1,"91":1,"92":1,"93":1,"94":1,"95":1,"96":1,"97":1,"98":1,"99":1,"100":1,"101":1,"102":1,"103":1,"104":1,"105":1,"106":1,"107":1,"108":1,"109":4,"110":4,"111":20,"112":20,"113":4,"114":76,"115":83,"116":76,"117":90,"118":76,"119":4,"120":76,"121":76,"122":76,"123":4,"124":4,"125":4,"126":4,"127":4,"128":4,"129":4,"130":0,"131":0,"132":4,"133":1,"134":1,"135":3,"136":3,"137":3,"138":3,"139":3,"140":4,"141":4,"142":4,"143":1,"144":1,"145":1,"146":1,"147":5,"148":5,"149":5,"150":1,"151":1,"152":1,"153":1,"154":1,"155":1,"156":1,"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":0,"169":1,"170":1,"171":1,"172":1,"173":1,"174":1,"175":1,"176":5,"177":5,"178":5,"179":1,"180":1,"181":1,"182":1,"183":1,"184":1,"185":1,"186":1,"187":1,"188":1,"189":1,"190":1,"191":5,"192":5,"193":5,"194":1,"195":1,"196":1,"197":1,"198":1,"199":1,"200":1,"201":1,"202":1,"203":1,"204":1,"205":1,"206":5,"207":5,"208":5,"209":5,"210":5,"211":1,"212":1,"213":1,"214":1,"215":1,"216":1,"217":1,"218":1,"219":1,"220":1,"221":1,"222":1,"223":1,"224":1,"225":1,"226":1,"227":1,"228":1,"229":1,"230":1,"231":1,"232":1,"233":1,"234":1,"235":1,"236":1,"237":1,"238":1,"239":1,"240":5,"241":5,"242":1,"243":1,"244":1,"245":1,"246":1,"247":1,"248":1,"249":1,"250":1,"251":1,"252":1,"253":1,"254":1,"255":1,"256":1,"257":1,"258":1,"259":1,"260":5,"261":5,"262":5,"263":1,"264":1,"265":1,"266":1,"267":1,"268":1,"269":1,"270":1,"271":1,"272":1,"273":1,"274":1,"275":1,"276":1,"277":1,"278":1,"279":1,"280":5,"281":5,"282":1,"283":1,"284":1,"285":1,"286":1,"287":1,"288":1,"289":1,"290":1,"291":1,"292":1,"293":1,"294":1,"295":1,"296":1,"297":1,"298":1,"299":1,"300":1,"301":1,"302":1,"303":1,"304":1,"305":1,"306":1,"307":1,"308":1,"309":1,"310":1,"311":1},"f":{"0":15,"1":5,"2":10,"3":15,"4":10,"5":20,"6":10,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":4,"15":1,"16":1,"17":1,"18":76,"19":83,"20":90,"21":76,"22":4,"23":4,"24":0,"25":1,"26":3,"27":4,"28":1,"29":1,"30":1,"31":1,"32":0,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1},"b":{"0":[5,5,5,5],"1":[0,4],"2":[1,3]},"inputSourceMap":{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-view.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-view.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\n\nimport { BaseView, TagMap, TagValue } from '../src';\nimport { TEST_ONLY } from '../src/common/time-util';\nimport {\n  DistributionValue,\n  MetricDescriptorType,\n  Timestamp,\n} from '../src/metrics/export/types';\nimport {\n  AggregationType,\n  DistributionData,\n  Measure,\n  MeasureType,\n  MeasureUnit,\n  View,\n} from '../src/stats/types';\n\n/** The order of how close values must be to be considerated almost equal */\nconst EPSILON = 6;\n\ninterface AggregationTestCase {\n  aggregationType: AggregationType;\n  description: string;\n  metricDescriptorType: MetricDescriptorType;\n}\n\nfunction isAlmostEqual(\n  actual: number,\n  expected: number,\n  epsilon: number\n): boolean {\n  return Math.abs(actual - expected) < Math.pow(10, -epsilon);\n}\n\nfunction assertDistributionData(\n  distributionData: DistributionData,\n  values: number[]\n) {\n  const valuesSum = values.reduce((acc, cur) => acc + cur);\n\n  assert.strictEqual(distributionData.count, values.length);\n  assert.strictEqual(distributionData.sum, valuesSum);\n\n  const expectedMean = valuesSum / values.length;\n  assert.ok(isAlmostEqual(distributionData.mean, expectedMean, EPSILON));\n\n  const expectedSumSquaredDeviations = values\n    .map(value => Math.pow(value - expectedMean, 2))\n    .reduce((acc, curr) => acc + curr);\n  assert.ok(\n    isAlmostEqual(\n      distributionData.sumOfSquaredDeviation,\n      expectedSumSquaredDeviations,\n      EPSILON\n    )\n  );\n\n  const expectedStdDeviation = Math.sqrt(\n    expectedSumSquaredDeviations / values.length\n  );\n  assert.ok(\n    isAlmostEqual(distributionData.stdDeviation, expectedStdDeviation, EPSILON)\n  );\n}\n\nfunction assertView(\n  view: View,\n  recordedValues: number[],\n  aggregationType: AggregationType,\n  tagValues: TagValue[]\n) {\n  assert.strictEqual(view.aggregation, aggregationType);\n  const aggregationData = view.getSnapshot(tagValues);\n  switch (aggregationData.type) {\n    case AggregationType.SUM:\n      const acc = recordedValues.reduce((acc, cur) => acc + cur);\n      assert.strictEqual(aggregationData.value, acc);\n      break;\n    case AggregationType.COUNT:\n      assert.strictEqual(aggregationData.value, recordedValues.length);\n      break;\n    case AggregationType.DISTRIBUTION:\n      assertDistributionData(aggregationData, recordedValues);\n      break;\n    default:\n      assert.strictEqual(\n        aggregationData.value,\n        recordedValues[recordedValues.length - 1]\n      );\n      break;\n  }\n}\n\ndescribe('BaseView', () => {\n  const measure: Measure = {\n    name: 'Test Measure',\n    type: MeasureType.DOUBLE,\n    unit: MeasureUnit.UNIT,\n  };\n\n  const aggregationTestCases: AggregationTestCase[] = [\n    {\n      aggregationType: AggregationType.SUM,\n      description: 'Sum',\n      metricDescriptorType: MetricDescriptorType.CUMULATIVE_DOUBLE,\n    },\n    {\n      aggregationType: AggregationType.COUNT,\n      description: 'Count',\n      metricDescriptorType: MetricDescriptorType.CUMULATIVE_INT64,\n    },\n    {\n      aggregationType: AggregationType.LAST_VALUE,\n      description: 'Last Value',\n      metricDescriptorType: MetricDescriptorType.GAUGE_DOUBLE,\n    },\n    {\n      aggregationType: AggregationType.DISTRIBUTION,\n      description: 'Distribution',\n      metricDescriptorType: MetricDescriptorType.CUMULATIVE_DISTRIBUTION,\n    },\n  ];\n\n  describe('getColumns()', () => {\n    it('should access the given tag keys', () => {\n      const tagKeys = [{ name: 'testKey1' }, { name: 'testKey2' }];\n      const view = new BaseView(\n        'test/view/name',\n        measure,\n        AggregationType.LAST_VALUE,\n        tagKeys,\n        'description test'\n      );\n\n      assert.deepStrictEqual(view.getColumns(), tagKeys);\n    });\n  });\n\n  describe('createView()', () => {\n    it('should throw error when keys are duplicate', () => {\n      const tagKeys = [\n        { name: 'testKey1' },\n        { name: 'testKey1' },\n        { name: 'testKey2' },\n      ];\n      assert.throws(() => {\n        const view = new BaseView(\n          'test/view/name',\n          measure,\n          AggregationType.LAST_VALUE,\n          tagKeys,\n          'description test'\n        );\n        assert.deepStrictEqual(view.getColumns(), tagKeys);\n      }, /^Error: Columns have duplicate$/);\n    });\n  });\n\n  describe('recordMeasurement()', () => {\n    const measurementValues = [1.1, 2.3, 3.2, 4.3, 5.2];\n    const bucketBoundaries = [2, 4, 6];\n    const tagKey1 = { name: 'testKey1' };\n    const tagKey2 = { name: 'testKey2' };\n    const tagKeys = [tagKey1, tagKey2];\n    const tagKey3 = { name: 'testKey3' };\n    const tagValue1 = { value: 'testValue1' };\n    const tagValue2 = { value: 'testValue2' };\n    const tagValue3 = { value: 'testValue3' };\n\n    const tags = new TagMap();\n    tags.set(tagKey1, tagValue1);\n    tags.set(tagKey2, tagValue2);\n\n    for (const aggregationTestCase of aggregationTestCases) {\n      it(`should record measurements on a View with ${aggregationTestCase.description} Aggregation Data type`, () => {\n        const view = new BaseView(\n          'test/view/name',\n          measure,\n          aggregationTestCase.aggregationType,\n          tagKeys,\n          'description test',\n          bucketBoundaries\n        );\n        const recordedValues = [];\n        for (const value of measurementValues) {\n          recordedValues.push(value);\n          const measurement = { measure, value };\n          view.recordMeasurement(measurement, tags);\n          assertView(\n            view,\n            recordedValues,\n            aggregationTestCase.aggregationType,\n            [tagValue1, tagValue2]\n          );\n        }\n      });\n    }\n\n    it('should ignore negative bucket bounds', () => {\n      const negativeBucketBoundaries = [-Infinity, -4, -2, 0, 2, 4, 6];\n      const view = new BaseView(\n        'test/view/name',\n        measure,\n        AggregationType.DISTRIBUTION,\n        tagKeys,\n        'description test',\n        negativeBucketBoundaries\n      );\n      const recordedValues = [];\n      for (const value of measurementValues) {\n        recordedValues.push(value);\n        const measurement = { measure, value };\n        view.recordMeasurement(measurement, tags);\n      }\n      const data = view.getSnapshot([tagValue1, tagValue2]) as DistributionData;\n      assert.deepStrictEqual(data.buckets, [2, 4, 6]);\n      assert.deepStrictEqual(data.bucketCounts, [1, 2, 2, 0]);\n    });\n\n    const view = new BaseView(\n      'test/view/name',\n      measure,\n      AggregationType.LAST_VALUE,\n      tagKeys,\n      'description test'\n    );\n\n    it('should not record a measurement when it have wrong tag keys', () => {\n      const tagMap = new TagMap();\n      tagMap.set(tagKey3, tagValue3);\n      const measurement = { measure, value: 10 };\n      view.recordMeasurement(measurement, tagMap);\n      assert.ok(!view.getSnapshot([tagValue3]));\n    });\n  });\n\n  describe('getMetric()', () => {\n    const realHrtimeFn = process.hrtime;\n    const realNowFn = Date.now;\n    const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n    const mockStartTime = 1546540757282;\n    const mockStartTimestamp: Timestamp = { seconds: 1546540757, nanos: 282e6 };\n    const measurementValues = [1.1, 2.3, 3.2, 4.3, 5.2];\n    const buckets = [2, 4, 6];\n    const tagKey1 = { name: 'testKey1' };\n    const tagKey2 = { name: 'testKey2' };\n    const tagKeys = [tagKey1, tagKey2];\n    const tagValue1 = { value: 'testValue1' };\n    const tagValue2 = { value: 'testValue2' };\n    const tagValue3 = { value: 'testValue3' };\n    const tagValue4 = { value: 'testValue4' };\n\n    const tags = new TagMap();\n    tags.set(tagKey1, tagValue1);\n    tags.set(tagKey2, tagValue2);\n\n    const tagMap = new TagMap();\n    tagMap.set(tagKey1, tagValue3);\n    tagMap.set(tagKey2, tagValue4);\n\n    for (const aggregationTestCase of aggregationTestCases) {\n      const view: View = new BaseView(\n        'test/view/name',\n        measure,\n        aggregationTestCase.aggregationType,\n        tagKeys,\n        'description test',\n        buckets\n      );\n      for (const value of measurementValues) {\n        const measurement = { measure, value };\n        view.recordMeasurement(measurement, tags);\n      }\n\n      beforeEach(() => {\n        // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n        process.hrtime = () => [100, 1e7];\n        Date.now = () => 1450000000000;\n        // Force the clock to recalibrate the time offset with the mocked time\n        TEST_ONLY.setHrtimeReference();\n      });\n\n      afterEach(() => {\n        process.hrtime = realHrtimeFn;\n        Date.now = realNowFn;\n        // Reset the hrtime reference so that it uses a real clock again.\n        TEST_ONLY.resetHrtimeFunctionCache();\n      });\n\n      const { descriptor, timeseries } = view.getMetric(mockStartTime);\n\n      describe(`Aggregation type: ${aggregationTestCase.aggregationType}`, () => {\n        it('should have descriptor', () => {\n          assert.ok(descriptor);\n          assert.deepStrictEqual(descriptor, {\n            description: 'description test',\n            labelKeys: [\n              { key: 'testKey1', description: '' },\n              { key: 'testKey2', description: '' },\n            ],\n            name: 'test/view/name',\n            type: aggregationTestCase.metricDescriptorType,\n            unit: '1',\n          });\n        });\n\n        const [{ startTimestamp, labelValues }] = timeseries;\n\n        if (\n          aggregationTestCase.metricDescriptorType ===\n          MetricDescriptorType.GAUGE_INT64\n        ) {\n          it('GAUGE_INT64 shouldnt have timeseries startTimestamp', () => {\n            assert.strictEqual(startTimestamp, undefined);\n          });\n        } else if (\n          aggregationTestCase.metricDescriptorType ===\n          MetricDescriptorType.GAUGE_DOUBLE\n        ) {\n          it('GAUGE_DOUBLE shouldnt have timeseries startTimestamp', () => {\n            assert.strictEqual(startTimestamp, undefined);\n          });\n        } else {\n          it('should have timeseries startTimestamp', () => {\n            assert.ok(startTimestamp);\n            assert.strictEqual(typeof startTimestamp!.nanos, 'number');\n            assert.strictEqual(typeof startTimestamp!.seconds, 'number');\n            assert.deepStrictEqual(startTimestamp, mockStartTimestamp);\n          });\n        }\n\n        it('should have labelValues', () => {\n          assert.ok(labelValues);\n          assert.deepStrictEqual(labelValues, [\n            { value: 'testValue1' },\n            { value: 'testValue2' },\n          ]);\n        });\n      });\n    }\n\n    describe('DISTRIBUTION aggregation type', () => {\n      const view: View = new BaseView(\n        'test/view/name',\n        measure,\n        AggregationType.DISTRIBUTION,\n        tagKeys,\n        'description test',\n        buckets\n      );\n      let total = 0;\n      for (const value of measurementValues) {\n        total += value;\n        const measurement = { measure, value };\n        view.recordMeasurement(measurement, tags);\n      }\n\n      it('should have point', () => {\n        const { timeseries } = view.getMetric(mockStartTime);\n        const [{ points, startTimestamp }] = timeseries;\n        assert.ok(points);\n        const [point] = points;\n        const { timestamp, value } = point;\n        assert.ok(timestamp);\n        assert.strictEqual(typeof timestamp.nanos, 'number');\n        assert.strictEqual(typeof timestamp.seconds, 'number');\n        assert.strictEqual(timestamp.seconds, mockedTime.seconds);\n        assert.strictEqual(timestamp.nanos, mockedTime.nanos);\n        assert.notStrictEqual(typeof value, 'number');\n        assert.deepStrictEqual(value as DistributionValue, {\n          bucketOptions: { explicit: { bounds: buckets } },\n          buckets: [{ count: 1 }, { count: 2 }, { count: 2 }, { count: 0 }],\n          count: 5,\n          sum: total,\n          sumOfSquaredDeviation: 10.427999999999997,\n        });\n\n        assert.deepStrictEqual(startTimestamp, mockStartTimestamp);\n      });\n    });\n\n    describe('DISTRIBUTION aggregation type with exemplars', () => {\n      const realNowFn = Date.now;\n      before(() => {\n        Date.now = () => 1450000000000;\n      });\n      after(() => {\n        Date.now = realNowFn;\n      });\n\n      it('should have point with attachments', () => {\n        const view: View = new BaseView(\n          'test/view/name',\n          measure,\n          AggregationType.DISTRIBUTION,\n          tagKeys,\n          'description test',\n          buckets\n        );\n        let total = 0;\n        const attachments = { k1: 'v1', k2: 'v2', k3: 'v3' };\n        for (const value of measurementValues) {\n          total += value;\n          const measurement = { measure, value };\n          view.recordMeasurement(measurement, tags, attachments);\n        }\n\n        const { timeseries } = view.getMetric(mockStartTime);\n        const [{ points, startTimestamp }] = timeseries;\n        assert.ok(points);\n        const [point] = points;\n        const { timestamp, value } = point;\n        assert.ok(timestamp);\n        assert.deepStrictEqual(value as DistributionValue, {\n          bucketOptions: { explicit: { bounds: buckets } },\n          buckets: [\n            {\n              count: 1,\n              exemplar: {\n                value: 1.1,\n                timestamp: { seconds: 1450000000, nanos: 0 },\n                attachments,\n              },\n            },\n            {\n              count: 2,\n              exemplar: {\n                value: 3.2,\n                timestamp: { seconds: 1450000000, nanos: 0 },\n                attachments,\n              },\n            },\n            {\n              count: 2,\n              exemplar: {\n                value: 5.2,\n                timestamp: { seconds: 1450000000, nanos: 0 },\n                attachments,\n              },\n            },\n            { count: 0 },\n          ],\n          count: 5,\n          sum: total,\n          sumOfSquaredDeviation: 10.427999999999997,\n        });\n        assert.deepStrictEqual(startTimestamp, mockStartTimestamp);\n      });\n\n      it('should have point with empty attachments', () => {\n        const view: View = new BaseView(\n          'test/view/name',\n          measure,\n          AggregationType.DISTRIBUTION,\n          tagKeys,\n          'description test',\n          buckets\n        );\n        let total = 0;\n        for (const value of measurementValues) {\n          total += value;\n          const measurement = { measure, value };\n          view.recordMeasurement(measurement, tags, {});\n        }\n\n        const { timeseries } = view.getMetric(mockStartTime);\n        const [{ points, startTimestamp }] = timeseries;\n        assert.ok(points);\n        const [point] = points;\n        const { timestamp, value } = point;\n        assert.ok(timestamp);\n        assert.deepStrictEqual(value as DistributionValue, {\n          bucketOptions: { explicit: { bounds: buckets } },\n          buckets: [\n            {\n              count: 1,\n              exemplar: {\n                value: 1.1,\n                timestamp: { seconds: 1450000000, nanos: 0 },\n                attachments: {},\n              },\n            },\n            {\n              count: 2,\n              exemplar: {\n                value: 3.2,\n                timestamp: { seconds: 1450000000, nanos: 0 },\n                attachments: {},\n              },\n            },\n            {\n              count: 2,\n              exemplar: {\n                value: 5.2,\n                timestamp: { seconds: 1450000000, nanos: 0 },\n                attachments: {},\n              },\n            },\n            { count: 0 },\n          ],\n          count: 5,\n          sum: total,\n          sumOfSquaredDeviation: 10.427999999999997,\n        });\n        assert.deepStrictEqual(startTimestamp, mockStartTimestamp);\n      });\n    });\n\n    describe('DISTRIBUTION aggregation type: record with measurements in succession from a single view and single measure', () => {\n      const view: View = new BaseView(\n        'test/view/name',\n        measure,\n        AggregationType.DISTRIBUTION,\n        tagKeys,\n        'description test',\n        buckets\n      );\n      let total = 0;\n      for (const value of measurementValues) {\n        total += value;\n        const measurement = { measure, value };\n        const measurement1 = { measure, value };\n        view.recordMeasurement(measurement, tags);\n        view.recordMeasurement(measurement1, tagMap);\n      }\n\n      it('should have points', () => {\n        const { timeseries } = view.getMetric(mockStartTime);\n        assert.strictEqual(timeseries.length, 2);\n        const [\n          { labelValues: labelValues1, points: points1 },\n          { labelValues: labelValues2, points: points2 },\n        ] = timeseries;\n        assert.ok(points1);\n\n        let [point] = points1;\n        let { timestamp, value } = point;\n        assert.ok(timestamp);\n        assert.strictEqual(typeof timestamp.nanos, 'number');\n        assert.strictEqual(typeof timestamp.seconds, 'number');\n        assert.strictEqual(timestamp.seconds, mockedTime.seconds);\n        assert.strictEqual(timestamp.nanos, mockedTime.nanos);\n        assert.notStrictEqual(typeof value, 'number');\n        assert.deepStrictEqual(value as DistributionValue, {\n          bucketOptions: { explicit: { bounds: buckets } },\n          buckets: [{ count: 1 }, { count: 2 }, { count: 2 }, { count: 0 }],\n          count: 5,\n          sum: total,\n          sumOfSquaredDeviation: 10.427999999999997,\n        });\n        assert.deepStrictEqual(labelValues1, [\n          { value: 'testValue1' },\n          { value: 'testValue2' },\n        ]);\n        assert.ok(points2);\n        [point] = points2;\n        ({ timestamp, value } = point);\n        assert.ok(timestamp);\n        assert.strictEqual(typeof timestamp.nanos, 'number');\n        assert.strictEqual(typeof timestamp.seconds, 'number');\n        assert.strictEqual(timestamp.seconds, mockedTime.seconds);\n        assert.strictEqual(timestamp.nanos, mockedTime.nanos);\n        assert.notStrictEqual(typeof value, 'number');\n        assert.deepStrictEqual(value as DistributionValue, {\n          bucketOptions: { explicit: { bounds: buckets } },\n          buckets: [{ count: 1 }, { count: 2 }, { count: 2 }, { count: 0 }],\n          count: 5,\n          sum: total,\n          sumOfSquaredDeviation: 10.427999999999997,\n        });\n        assert.deepStrictEqual(labelValues2, [\n          { value: 'testValue3' },\n          { value: 'testValue4' },\n        ]);\n      });\n    });\n\n    describe('COUNT aggregation type', () => {\n      const view: View = new BaseView(\n        'test/view/name',\n        measure,\n        AggregationType.COUNT,\n        tagKeys,\n        'description test',\n        buckets\n      );\n      for (const value of measurementValues) {\n        const measurement = { measure, value };\n        view.recordMeasurement(measurement, tags);\n      }\n\n      it('should have point', () => {\n        const { timeseries } = view.getMetric(mockStartTime);\n        const [{ points, startTimestamp }] = timeseries;\n        assert.ok(points);\n        const [point] = points;\n        const { timestamp, value } = point;\n        assert.ok(timestamp);\n        assert.strictEqual(typeof timestamp.nanos, 'number');\n        assert.strictEqual(typeof timestamp.seconds, 'number');\n        assert.strictEqual(timestamp.seconds, mockedTime.seconds);\n        assert.strictEqual(timestamp.nanos, mockedTime.nanos);\n        assert.strictEqual(typeof value, 'number');\n        assert.strictEqual(value, 5);\n        assert.deepStrictEqual(startTimestamp, mockStartTimestamp);\n      });\n    });\n\n    describe('SUM aggregation type', () => {\n      const view: View = new BaseView(\n        'test/view/name',\n        measure,\n        AggregationType.SUM,\n        tagKeys,\n        'description test',\n        buckets\n      );\n      let total = 0;\n      for (const value of measurementValues) {\n        total += value;\n        const measurement = { measure, value };\n        view.recordMeasurement(measurement, tags);\n      }\n\n      it('should have point', () => {\n        const { timeseries } = view.getMetric(mockStartTime);\n        const [{ points, startTimestamp }] = timeseries;\n        assert.ok(points);\n        const [point] = points;\n        const { timestamp, value } = point;\n        assert.ok(timestamp);\n        assert.strictEqual(typeof timestamp.nanos, 'number');\n        assert.strictEqual(typeof timestamp.seconds, 'number');\n        assert.strictEqual(timestamp.seconds, mockedTime.seconds);\n        assert.strictEqual(timestamp.nanos, mockedTime.nanos);\n        assert.strictEqual(typeof value, 'number');\n        assert.strictEqual(value, total);\n        assert.deepStrictEqual(startTimestamp, mockStartTimestamp);\n      });\n    });\n\n    describe('LAST_VALUE aggregation type', () => {\n      const view: View = new BaseView(\n        'test/view/name',\n        measure,\n        AggregationType.LAST_VALUE,\n        tagKeys,\n        'description test',\n        buckets\n      );\n      for (const value of measurementValues) {\n        const measurement = { measure, value };\n        view.recordMeasurement(measurement, tags);\n      }\n\n      it('should have point', () => {\n        const { timeseries } = view.getMetric(mockStartTime);\n        const [{ points, startTimestamp }] = timeseries;\n        assert.ok(points);\n        const [point] = points;\n        const { timestamp, value } = point;\n        assert.strictEqual(timestamp.seconds, mockedTime.seconds);\n        assert.strictEqual(timestamp.nanos, mockedTime.nanos);\n        assert.strictEqual(typeof value, 'number');\n        assert.strictEqual(\n          value,\n          measurementValues[measurementValues.length - 1]\n        );\n        assert.strictEqual(startTimestamp, undefined);\n      });\n    });\n  });\n\n  describe('getSnapshots()', () => {\n    let view: View;\n    const tagKey1 = { name: 'testKey1' };\n    const tagKey2 = { name: 'testKey2' };\n    const tagKeys = [tagKey1, tagKey2];\n    const tagValue1 = { value: 'testValue1' };\n    const tagValue2 = { value: 'testValue2' };\n\n    const tags = new TagMap();\n    tags.set(tagKey1, tagValue1);\n    tags.set(tagKey2, tagValue2);\n\n    before(() => {\n      view = new BaseView(\n        'test/view/name',\n        measure,\n        AggregationType.LAST_VALUE,\n        tagKeys,\n        'description test'\n      );\n\n      const measurement = { measure, value: 10 };\n      view.recordMeasurement(measurement, tags);\n    });\n\n    it('should not get aggregation data when wrong tags values are given', () => {\n      assert.ok(\n        !view.getSnapshot([\n          { value: 'wrongTagValue' },\n          { value: 'wrongTagValue' },\n        ])\n      );\n    });\n\n    it('should not get aggregation data when not enough tags are given', () => {\n      assert.ok(!view.getSnapshot([tagValue1]));\n    });\n\n    it('should get aggregation data when tags are correct', () => {\n      assert.ok(view.getSnapshot([tagValue1, tagValue2]));\n    });\n  });\n});\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"574edda37d0bad9da14dde52cad37c56839fe42d","contentHash":"9a6cb45dff83b7603928ceaaedf5b9a189f39c7bbe1d9b6cfac5d4dc4fd2d45e"}}