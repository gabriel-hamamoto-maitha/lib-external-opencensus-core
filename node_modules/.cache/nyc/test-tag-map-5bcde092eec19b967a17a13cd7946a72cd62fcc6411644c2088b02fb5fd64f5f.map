{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-tag-map.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-tag-map.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 the \"License\";\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport { TagMap } from '../src/tags/tag-map';\nimport { TagTtl } from '../src/tags/types';\n\ndescribe('TagMap()', () => {\n  let tagMap: TagMap;\n  const key1 = { name: 'key1' };\n  const key2 = { name: 'key2' };\n  const invalidKey1 = { name: 'a'.repeat(256) };\n  const value1 = { value: 'value1' };\n  const value2 = { value: 'value2' };\n  const invalidValue1 = { value: 'a'.repeat(256) };\n  const NO_PROPAGATION_MD = { tagTtl: TagTtl.NO_PROPAGATION };\n  const UNLIMITED_PROPAGATION_MD = { tagTtl: TagTtl.UNLIMITED_PROPAGATION };\n\n  const expectedTagValueWithMetadata1 = {\n    tagValue: { value: 'value1' },\n    tagMetadata: { tagTtl: -1 },\n  };\n\n  const expectedTagValueWithMetadata2 = {\n    tagValue: { value: 'value2' },\n    tagMetadata: { tagTtl: -1 },\n  };\n\n  beforeEach(() => {\n    tagMap = new TagMap();\n  });\n\n  describe('set()', () => {\n    it('should set tagkey and tagvalue with default TagMetadata', () => {\n      tagMap.set(key1, value1);\n      const tags = tagMap.tagsWithMetadata;\n      assert.strictEqual(tags.size, 1);\n      assert.deepStrictEqual(tags.get(key1), expectedTagValueWithMetadata1);\n    });\n\n    it('should set tagkey and tagvalue with NO_PROPAGATION TagTtl', () => {\n      const expectedTagValueWithMetadata = {\n        tagValue: { value: 'value1' },\n        tagMetadata: { tagTtl: 0 },\n      };\n\n      tagMap.set(key1, value1, NO_PROPAGATION_MD);\n      const tags = tagMap.tagsWithMetadata;\n      assert.strictEqual(tags.size, 1);\n      assert.deepStrictEqual(tags.get(key1), expectedTagValueWithMetadata);\n    });\n\n    it('should set tagkey and tagvalue with UNLIMITED_PROPAGATION TagTtl', () => {\n      const expectedTagValueWithMetadata = {\n        tagValue: { value: 'value1' },\n        tagMetadata: { tagTtl: -1 },\n      };\n\n      tagMap.set(key1, value1, UNLIMITED_PROPAGATION_MD);\n      const tags = tagMap.tagsWithMetadata;\n      assert.strictEqual(tags.size, 1);\n      assert.deepStrictEqual(tags.get(key1), expectedTagValueWithMetadata);\n    });\n\n    it('should silently ignore when invalid tagKey', () => {\n      tagMap.set(invalidKey1, value1);\n      const tags = tagMap.tagsWithMetadata;\n      assert.strictEqual(tags.size, 0);\n    });\n\n    it('should silently ignore when invalid tagValue', () => {\n      tagMap.set(key1, invalidValue1);\n      const tags = tagMap.tagsWithMetadata;\n      assert.strictEqual(tags.size, 0);\n    });\n\n    it('should not set duplicate tagkey and tagvalue', () => {\n      tagMap.set(key1, value1);\n      const tags = tagMap.tagsWithMetadata;\n      assert.strictEqual(tags.size, 1);\n      assert.deepStrictEqual(tags.get(key1), expectedTagValueWithMetadata1);\n      tagMap.set(key1, value1);\n      assert.strictEqual(tags.size, 1);\n    });\n\n    it('should update existing tagkey', () => {\n      tagMap.set(key1, value1);\n      const tags = tagMap.tagsWithMetadata;\n      assert.strictEqual(tags.size, 1);\n      assert.deepStrictEqual(tags.get(key1), expectedTagValueWithMetadata1);\n      tagMap.set(key1, value2);\n      assert.strictEqual(tags.size, 1);\n      assert.deepStrictEqual(tags.get(key1), expectedTagValueWithMetadata2);\n    });\n  });\n  describe('delete()', () => {\n    it('should delete tagkey', () => {\n      tagMap.set(key1, value1);\n      const tags = tagMap.tagsWithMetadata;\n      assert.strictEqual(tags.size, 1);\n      tagMap.delete(key1);\n      assert.strictEqual(tags.size, 0);\n    });\n    it('should delete missing tagkey1', () => {\n      tagMap.set(key1, value1);\n      const tags = tagMap.tagsWithMetadata;\n      assert.strictEqual(tags.size, 1);\n      tagMap.delete(key2);\n      assert.strictEqual(tags.size, 1);\n    });\n  });\n});\n"]}