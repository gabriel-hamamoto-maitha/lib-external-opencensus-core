"use strict";/**
 * Copyright 2019, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_x85yhvghk(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-derived-cumulative.ts";var hash="12e56ccc217f83adb4653476711025585633fd01";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-derived-cumulative.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:15},end:{line:18,column:32}},"2":{start:{line:19,column:20},end:{line:19,column:54}},"3":{start:{line:20,column:29},end:{line:20,column:84}},"4":{start:{line:21,column:16},end:{line:21,column:54}},"5":{start:{line:22,column:20},end:{line:22,column:33}},"6":{start:{line:23,column:27},end:{line:23,column:47}},"7":{start:{line:24,column:13},end:{line:24,column:16}},"8":{start:{line:25,column:25},end:{line:25,column:70}},"9":{start:{line:26,column:26},end:{line:26,column:72}},"10":{start:{line:27,column:19},end:{line:27,column:57}},"11":{start:{line:28,column:25},end:{line:28,column:43}},"12":{start:{line:29,column:25},end:{line:29,column:43}},"13":{start:{line:30,column:27},end:{line:30,column:63}},"14":{start:{line:31,column:30},end:{line:31,column:39}},"15":{start:{line:32,column:24},end:{line:32,column:33}},"16":{start:{line:33,column:0},end:{line:33,column:82}},"17":{start:{line:34,column:0},end:{line:273,column:3}},"18":{start:{line:36,column:25},end:{line:36,column:39}},"19":{start:{line:37,column:22},end:{line:37,column:30}},"20":{start:{line:38,column:23},end:{line:38,column:58}},"21":{start:{line:39,column:37},end:{line:45,column:5}},"22":{start:{line:46,column:21},end:{line:46,column:56}},"23":{start:{line:47,column:4},end:{line:54,column:7}},"24":{start:{line:48,column:8},end:{line:48,column:164}},"25":{start:{line:50,column:8},end:{line:50,column:42}},"26":{start:{line:50,column:31},end:{line:50,column:41}},"27":{start:{line:51,column:8},end:{line:51,column:39}},"28":{start:{line:51,column:25},end:{line:51,column:38}},"29":{start:{line:53,column:8},end:{line:53,column:51}},"30":{start:{line:55,column:4},end:{line:60,column:7}},"31":{start:{line:56,column:8},end:{line:56,column:38}},"32":{start:{line:57,column:8},end:{line:57,column:29}},"33":{start:{line:59,column:8},end:{line:59,column:57}},"34":{start:{line:61,column:4},end:{line:238,column:7}},"35":{start:{line:62,column:8},end:{line:66,column:11}},"36":{start:{line:63,column:12},end:{line:65,column:76}},"37":{start:{line:64,column:16},end:{line:64,column:73}},"38":{start:{line:67,column:8},end:{line:106,column:11}},"39":{start:{line:68,column:24},end:{line:68,column:33}},"40":{start:{line:69,column:12},end:{line:69,column:36}},"41":{start:{line:70,column:12},end:{line:70,column:61}},"42":{start:{line:71,column:12},end:{line:71,column:38}},"43":{start:{line:72,column:25},end:{line:72,column:45}},"44":{start:{line:73,column:12},end:{line:73,column:48}},"45":{start:{line:74,column:12},end:{line:74,column:80}},"46":{start:{line:75,column:12},end:{line:75,column:60}},"47":{start:{line:76,column:12},end:{line:82,column:15}},"48":{start:{line:84,column:12},end:{line:84,column:38}},"49":{start:{line:85,column:12},end:{line:85,column:38}},"50":{start:{line:87,column:24},end:{line:87,column:49}},"51":{start:{line:88,column:12},end:{line:90,column:15}},"52":{start:{line:89,column:28},end:{line:89,column:38}},"53":{start:{line:91,column:12},end:{line:91,column:42}},"54":{start:{line:92,column:12},end:{line:92,column:80}},"55":{start:{line:93,column:12},end:{line:93,column:60}},"56":{start:{line:94,column:12},end:{line:105,column:15}},"57":{start:{line:107,column:8},end:{line:126,column:11}},"58":{start:{line:110,column:20},end:{line:110,column:30}},"59":{start:{line:113,column:26},end:{line:113,column:44}},"60":{start:{line:114,column:12},end:{line:114,column:63}},"61":{start:{line:115,column:27},end:{line:115,column:47}},"62":{start:{line:116,column:12},end:{line:116,column:48}},"63":{start:{line:117,column:12},end:{line:117,column:80}},"64":{start:{line:118,column:12},end:{line:118,column:60}},"65":{start:{line:119,column:12},end:{line:125,column:15}},"66":{start:{line:127,column:8},end:{line:164,column:11}},"67":{start:{line:130,column:20},end:{line:130,column:35}},"68":{start:{line:133,column:20},end:{line:133,column:38}},"69":{start:{line:136,column:20},end:{line:136,column:33}},"70":{start:{line:139,column:26},end:{line:139,column:44}},"71":{start:{line:140,column:12},end:{line:140,column:27}},"72":{start:{line:141,column:12},end:{line:143,column:15}},"73":{start:{line:142,column:16},end:{line:142,column:41}},"74":{start:{line:144,column:25},end:{line:144,column:45}},"75":{start:{line:145,column:12},end:{line:145,column:48}},"76":{start:{line:146,column:12},end:{line:146,column:80}},"77":{start:{line:147,column:12},end:{line:147,column:60}},"78":{start:{line:148,column:12},end:{line:154,column:15}},"79":{start:{line:156,column:12},end:{line:156,column:27}},"80":{start:{line:157,column:12},end:{line:157,column:27}},"81":{start:{line:158,column:12},end:{line:158,column:27}},"82":{start:{line:159,column:12},end:{line:159,column:42}},"83":{start:{line:160,column:12},end:{line:160,column:60}},"84":{start:{line:161,column:12},end:{line:163,column:15}},"85":{start:{line:165,column:8},end:{line:191,column:11}},"86":{start:{line:168,column:20},end:{line:168,column:31}},"87":{start:{line:171,column:26},end:{line:171,column:44}},"88":{start:{line:172,column:35},end:{line:172,column:180}},"89":{start:{line:173,column:12},end:{line:173,column:69}},"90":{start:{line:174,column:27},end:{line:174,column:53}},"91":{start:{line:175,column:12},end:{line:175,column:48}},"92":{start:{line:176,column:12},end:{line:182,column:15}},"93":{start:{line:183,column:12},end:{line:183,column:60}},"94":{start:{line:184,column:12},end:{line:190,column:15}},"95":{start:{line:192,column:8},end:{line:217,column:11}},"96":{start:{line:193,column:24},end:{line:193,column:33}},"97":{start:{line:194,column:12},end:{line:194,column:61}},"98":{start:{line:195,column:12},end:{line:195,column:36}},"99":{start:{line:196,column:12},end:{line:196,column:38}},"100":{start:{line:197,column:25},end:{line:197,column:45}},"101":{start:{line:198,column:12},end:{line:198,column:80}},"102":{start:{line:199,column:12},end:{line:199,column:60}},"103":{start:{line:200,column:12},end:{line:206,column:15}},"104":{start:{line:207,column:12},end:{line:207,column:24}},"105":{start:{line:208,column:12},end:{line:208,column:42}},"106":{start:{line:209,column:12},end:{line:209,column:60}},"107":{start:{line:210,column:12},end:{line:216,column:15}},"108":{start:{line:218,column:8},end:{line:237,column:11}},"109":{start:{line:219,column:24},end:{line:219,column:33}},"110":{start:{line:220,column:12},end:{line:220,column:61}},"111":{start:{line:221,column:12},end:{line:221,column:36}},"112":{start:{line:222,column:27},end:{line:222,column:47}},"113":{start:{line:223,column:12},end:{line:223,column:48}},"114":{start:{line:224,column:12},end:{line:224,column:80}},"115":{start:{line:225,column:12},end:{line:225,column:60}},"116":{start:{line:226,column:12},end:{line:232,column:15}},"117":{start:{line:234,column:12},end:{line:236,column:88}},"118":{start:{line:235,column:16},end:{line:235,column:65}},"119":{start:{line:239,column:4},end:{line:251,column:7}},"120":{start:{line:240,column:8},end:{line:250,column:11}},"121":{start:{line:241,column:24},end:{line:241,column:26}},"122":{start:{line:242,column:12},end:{line:242,column:61}},"123":{start:{line:243,column:12},end:{line:243,column:29}},"124":{start:{line:244,column:25},end:{line:244,column:45}},"125":{start:{line:245,column:12},end:{line:245,column:48}},"126":{start:{line:246,column:12},end:{line:246,column:80}},"127":{start:{line:247,column:12},end:{line:247,column:56}},"128":{start:{line:248,column:12},end:{line:248,column:42}},"129":{start:{line:249,column:12},end:{line:249,column:49}},"130":{start:{line:252,column:4},end:{line:272,column:7}},"131":{start:{line:253,column:8},end:{line:271,column:11}},"132":{start:{line:254,column:24},end:{line:254,column:33}},"133":{start:{line:255,column:12},end:{line:257,column:15}},"134":{start:{line:256,column:28},end:{line:256,column:36}},"135":{start:{line:258,column:12},end:{line:258,column:36}},"136":{start:{line:259,column:24},end:{line:259,column:26}},"137":{start:{line:260,column:12},end:{line:262,column:15}},"138":{start:{line:261,column:28},end:{line:261,column:38}},"139":{start:{line:263,column:12},end:{line:263,column:29}},"140":{start:{line:264,column:25},end:{line:264,column:45}},"141":{start:{line:265,column:12},end:{line:265,column:48}},"142":{start:{line:266,column:12},end:{line:266,column:80}},"143":{start:{line:267,column:12},end:{line:267,column:60}},"144":{start:{line:268,column:12},end:{line:268,column:29}},"145":{start:{line:269,column:12},end:{line:269,column:42}},"146":{start:{line:270,column:12},end:{line:270,column:49}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:34,column:30},end:{line:34,column:31}},loc:{start:{line:34,column:36},end:{line:273,column:1}},line:34},"1":{name:"(anonymous_1)",decl:{start:{line:47,column:15},end:{line:47,column:16}},loc:{start:{line:47,column:21},end:{line:54,column:5}},line:47},"2":{name:"(anonymous_2)",decl:{start:{line:50,column:25},end:{line:50,column:26}},loc:{start:{line:50,column:31},end:{line:50,column:41}},line:50},"3":{name:"(anonymous_3)",decl:{start:{line:51,column:19},end:{line:51,column:20}},loc:{start:{line:51,column:25},end:{line:51,column:38}},line:51},"4":{name:"(anonymous_4)",decl:{start:{line:55,column:14},end:{line:55,column:15}},loc:{start:{line:55,column:20},end:{line:60,column:5}},line:55},"5":{name:"(anonymous_5)",decl:{start:{line:61,column:35},end:{line:61,column:36}},loc:{start:{line:61,column:41},end:{line:238,column:5}},line:61},"6":{name:"(anonymous_6)",decl:{start:{line:62,column:81},end:{line:62,column:82}},loc:{start:{line:62,column:87},end:{line:66,column:9}},line:62},"7":{name:"(anonymous_7)",decl:{start:{line:63,column:26},end:{line:63,column:27}},loc:{start:{line:63,column:32},end:{line:65,column:13}},line:63},"8":{name:"(anonymous_8)",decl:{start:{line:67,column:37},end:{line:67,column:38}},loc:{start:{line:67,column:43},end:{line:106,column:9}},line:67},"9":{name:"(anonymous_9)",decl:{start:{line:89,column:22},end:{line:89,column:23}},loc:{start:{line:89,column:28},end:{line:89,column:38}},line:89},"10":{name:"(anonymous_10)",decl:{start:{line:107,column:61},end:{line:107,column:62}},loc:{start:{line:107,column:67},end:{line:126,column:9}},line:107},"11":{name:"(anonymous_11)",decl:{start:{line:109,column:16},end:{line:109,column:17}},loc:{start:{line:109,column:27},end:{line:111,column:17}},line:109},"12":{name:"(anonymous_12)",decl:{start:{line:127,column:59},end:{line:127,column:60}},loc:{start:{line:127,column:65},end:{line:164,column:9}},line:127},"13":{name:"(anonymous_13)",decl:{start:{line:129,column:16},end:{line:129,column:17}},loc:{start:{line:129,column:30},end:{line:131,column:17}},line:129},"14":{name:"(anonymous_14)",decl:{start:{line:132,column:16},end:{line:132,column:17}},loc:{start:{line:132,column:34},end:{line:134,column:17}},line:132},"15":{name:"(anonymous_15)",decl:{start:{line:135,column:16},end:{line:135,column:17}},loc:{start:{line:135,column:25},end:{line:137,column:17}},line:135},"16":{name:"(anonymous_16)",decl:{start:{line:141,column:56},end:{line:141,column:57}},loc:{start:{line:141,column:62},end:{line:143,column:13}},line:141},"17":{name:"(anonymous_17)",decl:{start:{line:165,column:62},end:{line:165,column:63}},loc:{start:{line:165,column:68},end:{line:191,column:9}},line:165},"18":{name:"(anonymous_18)",decl:{start:{line:167,column:16},end:{line:167,column:17}},loc:{start:{line:167,column:27},end:{line:169,column:17}},line:167},"19":{name:"(anonymous_19)",decl:{start:{line:192,column:56},end:{line:192,column:57}},loc:{start:{line:192,column:62},end:{line:217,column:9}},line:192},"20":{name:"(anonymous_20)",decl:{start:{line:218,column:54},end:{line:218,column:55}},loc:{start:{line:218,column:60},end:{line:237,column:9}},line:218},"21":{name:"(anonymous_21)",decl:{start:{line:234,column:26},end:{line:234,column:27}},loc:{start:{line:234,column:32},end:{line:236,column:13}},line:234},"22":{name:"(anonymous_22)",decl:{start:{line:239,column:35},end:{line:239,column:36}},loc:{start:{line:239,column:41},end:{line:251,column:5}},line:239},"23":{name:"(anonymous_23)",decl:{start:{line:240,column:39},end:{line:240,column:40}},loc:{start:{line:240,column:45},end:{line:250,column:9}},line:240},"24":{name:"(anonymous_24)",decl:{start:{line:252,column:24},end:{line:252,column:25}},loc:{start:{line:252,column:30},end:{line:272,column:5}},line:252},"25":{name:"(anonymous_25)",decl:{start:{line:253,column:42},end:{line:253,column:43}},loc:{start:{line:253,column:48},end:{line:271,column:9}},line:253},"26":{name:"(anonymous_26)",decl:{start:{line:256,column:22},end:{line:256,column:23}},loc:{start:{line:256,column:28},end:{line:256,column:36}},line:256},"27":{name:"(anonymous_27)",decl:{start:{line:261,column:22},end:{line:261,column:23}},loc:{start:{line:261,column:28},end:{line:261,column:38}},line:261}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0},b:{},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-derived-cumulative.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-derived-cumulative.ts"],names:[],mappings:"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",sourcesContent:["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport { TEST_ONLY } from '../src/common/time-util';\nimport { DerivedCumulative } from '../src/metrics/cumulative/derived-cumulative';\nimport {\n  LabelKey,\n  LabelValue,\n  MetricDescriptorType,\n  Timestamp,\n} from '../src/metrics/export/types';\n\nconst METRIC_NAME = 'metric-name';\nconst METRIC_DESCRIPTION = 'metric-description';\nconst UNIT = '1';\nconst CUMULATIVE_INT64 = MetricDescriptorType.CUMULATIVE_INT64;\nconst CUMULATIVE_DOUBLE = MetricDescriptorType.CUMULATIVE_DOUBLE;\nconst LABEL_KEYS: LabelKey[] = [{ key: 'code', description: 'desc' }];\nconst LABEL_VALUES_200: LabelValue[] = [{ value: '200' }];\nconst LABEL_VALUES_400: LabelValue[] = [{ value: '400' }];\nconst LABEL_VALUES_EXRTA: LabelValue[] = [{ value: '200' }, { value: '400' }];\nconst EMPTY_CONSTANT_LABELS = new Map();\nconst CONSTANT_LABELS = new Map();\nCONSTANT_LABELS.set(\n  { key: 'host', description: 'host' },\n  { value: 'localhost' }\n);\n\ndescribe('DerivedCumulative', () => {\n  let instance: DerivedCumulative;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n  const expectedMetricDescriptor = {\n    name: METRIC_NAME,\n    description: METRIC_DESCRIPTION,\n    unit: UNIT,\n    type: CUMULATIVE_INT64,\n    labelKeys: LABEL_KEYS,\n  };\n  const startime: Timestamp = { seconds: 1400000100, nanos: 1e7 };\n\n  beforeEach(() => {\n    instance = new DerivedCumulative(\n      METRIC_NAME,\n      METRIC_DESCRIPTION,\n      UNIT,\n      CUMULATIVE_INT64,\n      LABEL_KEYS,\n      EMPTY_CONSTANT_LABELS,\n      startime\n    );\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  describe('createTimeSeries()', () => {\n    it('should throw an error when the keys and values dont have same size', () => {\n      assert.throws(() => {\n        instance.createTimeSeries(LABEL_VALUES_EXRTA, new Map());\n      }, /^Error: Label Keys and Label Values don't have same size$/);\n    });\n\n    it('should return a Metric', () => {\n      const map = new Map();\n      map.set('key', 'value');\n      instance.createTimeSeries(LABEL_VALUES_200, map);\n      map.set('key1', 'value1');\n\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 2, timestamp: mockedTime }],\n          startTimestamp: startime,\n        },\n      ]);\n      // add data in collection\n      map.set('key2', 'value2');\n      map.set('key3', 'value3');\n\n      // add new timeseries with length-method\n      const arr = new Array(5).fill('test');\n      instance.createTimeSeries(LABEL_VALUES_400, {\n        size: () => arr.length,\n      });\n\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 2);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 4, timestamp: mockedTime }],\n          startTimestamp: startime,\n        },\n        {\n          labelValues: LABEL_VALUES_400,\n          points: [{ value: 5, timestamp: mockedTime }],\n          startTimestamp: startime,\n        },\n      ]);\n    });\n\n    it('should return a Metric (INT64) - custom object', () => {\n      class QueueManager {\n        getValue(): number {\n          return 45;\n        }\n      }\n      const queue = new QueueManager();\n      instance.createTimeSeries(LABEL_VALUES_200, queue);\n      const metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 45, timestamp: mockedTime }],\n          startTimestamp: startime,\n        },\n      ]);\n    });\n\n    it('should return a Metric value from a function', () => {\n      class QueueManager {\n        private depth = 0;\n        get pendingJobs() {\n          return this.depth;\n        }\n        addJob() {\n          this.depth++;\n        }\n      }\n      const queue = new QueueManager();\n      queue.addJob();\n      instance.createTimeSeries(LABEL_VALUES_200, () => {\n        return queue.pendingJobs;\n      });\n\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 1, timestamp: mockedTime }],\n          startTimestamp: startime,\n        },\n      ]);\n      // Simulate a adding multiple jobs in queue\n      queue.addJob();\n      queue.addJob();\n      queue.addJob();\n      metric = instance.getMetric();\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries[0].points, [\n        { value: 4, timestamp: mockedTime },\n      ]);\n    });\n\n    it('should return a Metric (Double) - custom object', () => {\n      class QueueManager {\n        getValue(): number {\n          return 0.7;\n        }\n      }\n      const queue = new QueueManager();\n      const doubleInstance = new DerivedCumulative(\n        METRIC_NAME,\n        METRIC_DESCRIPTION,\n        UNIT,\n        CUMULATIVE_DOUBLE,\n        LABEL_KEYS,\n        EMPTY_CONSTANT_LABELS,\n        startime\n      );\n      doubleInstance.createTimeSeries(LABEL_VALUES_200, queue);\n      const metric = doubleInstance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, {\n        name: METRIC_NAME,\n        description: METRIC_DESCRIPTION,\n        unit: UNIT,\n        type: CUMULATIVE_DOUBLE,\n        labelKeys: LABEL_KEYS,\n      });\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 0.7, timestamp: mockedTime }],\n          startTimestamp: startime,\n        },\n      ]);\n    });\n\n    it('should ignore dropping (decreasing) value', () => {\n      const map = new Map();\n      instance.createTimeSeries(LABEL_VALUES_200, map);\n      map.set('key', 'value');\n      map.set('key1', 'value1');\n      let metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 2, timestamp: mockedTime }],\n          startTimestamp: startime,\n        },\n      ]);\n\n      map.clear();\n      metric = instance.getMetric();\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 2, timestamp: mockedTime }],\n          startTimestamp: startime,\n        },\n      ]);\n    });\n\n    it('should not create same timeseries again', () => {\n      const map = new Map();\n      instance.createTimeSeries(LABEL_VALUES_200, map);\n      map.set('key', 'value');\n      const metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 1, timestamp: mockedTime }],\n          startTimestamp: startime,\n        },\n      ]);\n\n      // create timeseries with same labels.\n      assert.throws(() => {\n        instance.createTimeSeries(LABEL_VALUES_200, map);\n      }, /^Error: A different time series with the same labels already exists.$/);\n    });\n  });\n\n  describe('removeTimeSeries()', () => {\n    it('should remove TimeSeries', () => {\n      const arr: string[] = [];\n      instance.createTimeSeries(LABEL_VALUES_200, arr);\n      arr.push('test');\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      instance.removeTimeSeries(LABEL_VALUES_200);\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric, null);\n    });\n  });\n\n  describe('clear()', () => {\n    it('should clear all TimeSeries', () => {\n      const map = new Map();\n      instance.createTimeSeries(LABEL_VALUES_200, {\n        size: () => map.size,\n      });\n      map.set('key', 'value');\n\n      const arr: string[] = [];\n      instance.createTimeSeries(LABEL_VALUES_400, {\n        size: () => arr.length,\n      });\n      arr.push('test');\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 2);\n      instance.clear();\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric, null);\n    });\n  });\n});\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"12e56ccc217f83adb4653476711025585633fd01"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_x85yhvghk=function(){return actualCoverage;};}return actualCoverage;}cov_x85yhvghk();cov_x85yhvghk().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const assert=(cov_x85yhvghk().s[1]++,require("assert"));const time_util_1=(cov_x85yhvghk().s[2]++,require("../src/common/time-util"));const derived_cumulative_1=(cov_x85yhvghk().s[3]++,require("../src/metrics/cumulative/derived-cumulative"));const types_1=(cov_x85yhvghk().s[4]++,require("../src/metrics/export/types"));const METRIC_NAME=(cov_x85yhvghk().s[5]++,'metric-name');const METRIC_DESCRIPTION=(cov_x85yhvghk().s[6]++,'metric-description');const UNIT=(cov_x85yhvghk().s[7]++,'1');const CUMULATIVE_INT64=(cov_x85yhvghk().s[8]++,types_1.MetricDescriptorType.CUMULATIVE_INT64);const CUMULATIVE_DOUBLE=(cov_x85yhvghk().s[9]++,types_1.MetricDescriptorType.CUMULATIVE_DOUBLE);const LABEL_KEYS=(cov_x85yhvghk().s[10]++,[{key:'code',description:'desc'}]);const LABEL_VALUES_200=(cov_x85yhvghk().s[11]++,[{value:'200'}]);const LABEL_VALUES_400=(cov_x85yhvghk().s[12]++,[{value:'400'}]);const LABEL_VALUES_EXRTA=(cov_x85yhvghk().s[13]++,[{value:'200'},{value:'400'}]);const EMPTY_CONSTANT_LABELS=(cov_x85yhvghk().s[14]++,new Map());const CONSTANT_LABELS=(cov_x85yhvghk().s[15]++,new Map());cov_x85yhvghk().s[16]++;CONSTANT_LABELS.set({key:'host',description:'host'},{value:'localhost'});cov_x85yhvghk().s[17]++;describe('DerivedCumulative',()=>{cov_x85yhvghk().f[0]++;let instance;const realHrtimeFn=(cov_x85yhvghk().s[18]++,process.hrtime);const realNowFn=(cov_x85yhvghk().s[19]++,Date.now);const mockedTime=(cov_x85yhvghk().s[20]++,{seconds:1450000100,nanos:1e7});const expectedMetricDescriptor=(cov_x85yhvghk().s[21]++,{name:METRIC_NAME,description:METRIC_DESCRIPTION,unit:UNIT,type:CUMULATIVE_INT64,labelKeys:LABEL_KEYS});const startime=(cov_x85yhvghk().s[22]++,{seconds:1400000100,nanos:1e7});cov_x85yhvghk().s[23]++;beforeEach(()=>{cov_x85yhvghk().f[1]++;cov_x85yhvghk().s[24]++;instance=new derived_cumulative_1.DerivedCumulative(METRIC_NAME,METRIC_DESCRIPTION,UNIT,CUMULATIVE_INT64,LABEL_KEYS,EMPTY_CONSTANT_LABELS,startime);// @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message
cov_x85yhvghk().s[25]++;process.hrtime=()=>{cov_x85yhvghk().f[2]++;cov_x85yhvghk().s[26]++;return[100,1e7];};cov_x85yhvghk().s[27]++;Date.now=()=>{cov_x85yhvghk().f[3]++;cov_x85yhvghk().s[28]++;return 1450000000000;};// Force the clock to recalibrate the time offset with the mocked time
cov_x85yhvghk().s[29]++;time_util_1.TEST_ONLY.setHrtimeReference();});cov_x85yhvghk().s[30]++;afterEach(()=>{cov_x85yhvghk().f[4]++;cov_x85yhvghk().s[31]++;process.hrtime=realHrtimeFn;cov_x85yhvghk().s[32]++;Date.now=realNowFn;// Reset the hrtime reference so that it uses a real clock again.
cov_x85yhvghk().s[33]++;time_util_1.TEST_ONLY.resetHrtimeFunctionCache();});cov_x85yhvghk().s[34]++;describe('createTimeSeries()',()=>{cov_x85yhvghk().f[5]++;cov_x85yhvghk().s[35]++;it('should throw an error when the keys and values dont have same size',()=>{cov_x85yhvghk().f[6]++;cov_x85yhvghk().s[36]++;assert.throws(()=>{cov_x85yhvghk().f[7]++;cov_x85yhvghk().s[37]++;instance.createTimeSeries(LABEL_VALUES_EXRTA,new Map());},/^Error: Label Keys and Label Values don't have same size$/);});cov_x85yhvghk().s[38]++;it('should return a Metric',()=>{cov_x85yhvghk().f[8]++;const map=(cov_x85yhvghk().s[39]++,new Map());cov_x85yhvghk().s[40]++;map.set('key','value');cov_x85yhvghk().s[41]++;instance.createTimeSeries(LABEL_VALUES_200,map);cov_x85yhvghk().s[42]++;map.set('key1','value1');let metric=(cov_x85yhvghk().s[43]++,instance.getMetric());cov_x85yhvghk().s[44]++;assert.notStrictEqual(metric,null);cov_x85yhvghk().s[45]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_x85yhvghk().s[46]++;assert.strictEqual(metric.timeseries.length,1);cov_x85yhvghk().s[47]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:LABEL_VALUES_200,points:[{value:2,timestamp:mockedTime}],startTimestamp:startime}]);// add data in collection
cov_x85yhvghk().s[48]++;map.set('key2','value2');cov_x85yhvghk().s[49]++;map.set('key3','value3');// add new timeseries with length-method
const arr=(cov_x85yhvghk().s[50]++,new Array(5).fill('test'));cov_x85yhvghk().s[51]++;instance.createTimeSeries(LABEL_VALUES_400,{size:()=>{cov_x85yhvghk().f[9]++;cov_x85yhvghk().s[52]++;return arr.length;}});cov_x85yhvghk().s[53]++;metric=instance.getMetric();cov_x85yhvghk().s[54]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_x85yhvghk().s[55]++;assert.strictEqual(metric.timeseries.length,2);cov_x85yhvghk().s[56]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:LABEL_VALUES_200,points:[{value:4,timestamp:mockedTime}],startTimestamp:startime},{labelValues:LABEL_VALUES_400,points:[{value:5,timestamp:mockedTime}],startTimestamp:startime}]);});cov_x85yhvghk().s[57]++;it('should return a Metric (INT64) - custom object',()=>{cov_x85yhvghk().f[10]++;class QueueManager{getValue(){cov_x85yhvghk().f[11]++;cov_x85yhvghk().s[58]++;return 45;}}const queue=(cov_x85yhvghk().s[59]++,new QueueManager());cov_x85yhvghk().s[60]++;instance.createTimeSeries(LABEL_VALUES_200,queue);const metric=(cov_x85yhvghk().s[61]++,instance.getMetric());cov_x85yhvghk().s[62]++;assert.notStrictEqual(metric,null);cov_x85yhvghk().s[63]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_x85yhvghk().s[64]++;assert.strictEqual(metric.timeseries.length,1);cov_x85yhvghk().s[65]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:LABEL_VALUES_200,points:[{value:45,timestamp:mockedTime}],startTimestamp:startime}]);});cov_x85yhvghk().s[66]++;it('should return a Metric value from a function',()=>{cov_x85yhvghk().f[12]++;class QueueManager{constructor(){cov_x85yhvghk().f[13]++;cov_x85yhvghk().s[67]++;this.depth=0;}get pendingJobs(){cov_x85yhvghk().f[14]++;cov_x85yhvghk().s[68]++;return this.depth;}addJob(){cov_x85yhvghk().f[15]++;cov_x85yhvghk().s[69]++;this.depth++;}}const queue=(cov_x85yhvghk().s[70]++,new QueueManager());cov_x85yhvghk().s[71]++;queue.addJob();cov_x85yhvghk().s[72]++;instance.createTimeSeries(LABEL_VALUES_200,()=>{cov_x85yhvghk().f[16]++;cov_x85yhvghk().s[73]++;return queue.pendingJobs;});let metric=(cov_x85yhvghk().s[74]++,instance.getMetric());cov_x85yhvghk().s[75]++;assert.notStrictEqual(metric,null);cov_x85yhvghk().s[76]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_x85yhvghk().s[77]++;assert.strictEqual(metric.timeseries.length,1);cov_x85yhvghk().s[78]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:LABEL_VALUES_200,points:[{value:1,timestamp:mockedTime}],startTimestamp:startime}]);// Simulate a adding multiple jobs in queue
cov_x85yhvghk().s[79]++;queue.addJob();cov_x85yhvghk().s[80]++;queue.addJob();cov_x85yhvghk().s[81]++;queue.addJob();cov_x85yhvghk().s[82]++;metric=instance.getMetric();cov_x85yhvghk().s[83]++;assert.strictEqual(metric.timeseries.length,1);cov_x85yhvghk().s[84]++;assert.deepStrictEqual(metric.timeseries[0].points,[{value:4,timestamp:mockedTime}]);});cov_x85yhvghk().s[85]++;it('should return a Metric (Double) - custom object',()=>{cov_x85yhvghk().f[17]++;class QueueManager{getValue(){cov_x85yhvghk().f[18]++;cov_x85yhvghk().s[86]++;return 0.7;}}const queue=(cov_x85yhvghk().s[87]++,new QueueManager());const doubleInstance=(cov_x85yhvghk().s[88]++,new derived_cumulative_1.DerivedCumulative(METRIC_NAME,METRIC_DESCRIPTION,UNIT,CUMULATIVE_DOUBLE,LABEL_KEYS,EMPTY_CONSTANT_LABELS,startime));cov_x85yhvghk().s[89]++;doubleInstance.createTimeSeries(LABEL_VALUES_200,queue);const metric=(cov_x85yhvghk().s[90]++,doubleInstance.getMetric());cov_x85yhvghk().s[91]++;assert.notStrictEqual(metric,null);cov_x85yhvghk().s[92]++;assert.deepStrictEqual(metric.descriptor,{name:METRIC_NAME,description:METRIC_DESCRIPTION,unit:UNIT,type:CUMULATIVE_DOUBLE,labelKeys:LABEL_KEYS});cov_x85yhvghk().s[93]++;assert.strictEqual(metric.timeseries.length,1);cov_x85yhvghk().s[94]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:LABEL_VALUES_200,points:[{value:0.7,timestamp:mockedTime}],startTimestamp:startime}]);});cov_x85yhvghk().s[95]++;it('should ignore dropping (decreasing) value',()=>{cov_x85yhvghk().f[19]++;const map=(cov_x85yhvghk().s[96]++,new Map());cov_x85yhvghk().s[97]++;instance.createTimeSeries(LABEL_VALUES_200,map);cov_x85yhvghk().s[98]++;map.set('key','value');cov_x85yhvghk().s[99]++;map.set('key1','value1');let metric=(cov_x85yhvghk().s[100]++,instance.getMetric());cov_x85yhvghk().s[101]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_x85yhvghk().s[102]++;assert.strictEqual(metric.timeseries.length,1);cov_x85yhvghk().s[103]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:LABEL_VALUES_200,points:[{value:2,timestamp:mockedTime}],startTimestamp:startime}]);cov_x85yhvghk().s[104]++;map.clear();cov_x85yhvghk().s[105]++;metric=instance.getMetric();cov_x85yhvghk().s[106]++;assert.strictEqual(metric.timeseries.length,1);cov_x85yhvghk().s[107]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:LABEL_VALUES_200,points:[{value:2,timestamp:mockedTime}],startTimestamp:startime}]);});cov_x85yhvghk().s[108]++;it('should not create same timeseries again',()=>{cov_x85yhvghk().f[20]++;const map=(cov_x85yhvghk().s[109]++,new Map());cov_x85yhvghk().s[110]++;instance.createTimeSeries(LABEL_VALUES_200,map);cov_x85yhvghk().s[111]++;map.set('key','value');const metric=(cov_x85yhvghk().s[112]++,instance.getMetric());cov_x85yhvghk().s[113]++;assert.notStrictEqual(metric,null);cov_x85yhvghk().s[114]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_x85yhvghk().s[115]++;assert.strictEqual(metric.timeseries.length,1);cov_x85yhvghk().s[116]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:LABEL_VALUES_200,points:[{value:1,timestamp:mockedTime}],startTimestamp:startime}]);// create timeseries with same labels.
cov_x85yhvghk().s[117]++;assert.throws(()=>{cov_x85yhvghk().f[21]++;cov_x85yhvghk().s[118]++;instance.createTimeSeries(LABEL_VALUES_200,map);},/^Error: A different time series with the same labels already exists.$/);});});cov_x85yhvghk().s[119]++;describe('removeTimeSeries()',()=>{cov_x85yhvghk().f[22]++;cov_x85yhvghk().s[120]++;it('should remove TimeSeries',()=>{cov_x85yhvghk().f[23]++;const arr=(cov_x85yhvghk().s[121]++,[]);cov_x85yhvghk().s[122]++;instance.createTimeSeries(LABEL_VALUES_200,arr);cov_x85yhvghk().s[123]++;arr.push('test');let metric=(cov_x85yhvghk().s[124]++,instance.getMetric());cov_x85yhvghk().s[125]++;assert.notStrictEqual(metric,null);cov_x85yhvghk().s[126]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_x85yhvghk().s[127]++;instance.removeTimeSeries(LABEL_VALUES_200);cov_x85yhvghk().s[128]++;metric=instance.getMetric();cov_x85yhvghk().s[129]++;assert.deepStrictEqual(metric,null);});});cov_x85yhvghk().s[130]++;describe('clear()',()=>{cov_x85yhvghk().f[24]++;cov_x85yhvghk().s[131]++;it('should clear all TimeSeries',()=>{cov_x85yhvghk().f[25]++;const map=(cov_x85yhvghk().s[132]++,new Map());cov_x85yhvghk().s[133]++;instance.createTimeSeries(LABEL_VALUES_200,{size:()=>{cov_x85yhvghk().f[26]++;cov_x85yhvghk().s[134]++;return map.size;}});cov_x85yhvghk().s[135]++;map.set('key','value');const arr=(cov_x85yhvghk().s[136]++,[]);cov_x85yhvghk().s[137]++;instance.createTimeSeries(LABEL_VALUES_400,{size:()=>{cov_x85yhvghk().f[27]++;cov_x85yhvghk().s[138]++;return arr.length;}});cov_x85yhvghk().s[139]++;arr.push('test');let metric=(cov_x85yhvghk().s[140]++,instance.getMetric());cov_x85yhvghk().s[141]++;assert.notStrictEqual(metric,null);cov_x85yhvghk().s[142]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_x85yhvghk().s[143]++;assert.strictEqual(metric.timeseries.length,2);cov_x85yhvghk().s[144]++;instance.clear();cov_x85yhvghk().s[145]++;metric=instance.getMetric();cov_x85yhvghk().s[146]++;assert.deepStrictEqual(metric,null);});});});//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,