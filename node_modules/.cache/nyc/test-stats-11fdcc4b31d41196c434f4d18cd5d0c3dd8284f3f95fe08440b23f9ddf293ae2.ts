"use strict";/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_x2bkdpse2(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-stats.ts";var hash="cc8a9b32d55cd723c4246e71a2aa5bb243661a4b";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-stats.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:15},end:{line:18,column:32}},"2":{start:{line:19,column:14},end:{line:19,column:31}},"3":{start:{line:20,column:16},end:{line:20,column:45}},"4":{start:{line:21,column:15},end:{line:21,column:44}},"5":{start:{line:24,column:8},end:{line:24,column:34}},"6":{start:{line:25,column:8},end:{line:25,column:39}},"7":{start:{line:28,column:8},end:{line:28,column:40}},"8":{start:{line:31,column:8},end:{line:31,column:52}},"9":{start:{line:38,column:8},end:{line:38,column:34}},"10":{start:{line:39,column:8},end:{line:39,column:39}},"11":{start:{line:42,column:0},end:{line:229,column:3}},"12":{start:{line:43,column:4},end:{line:45,column:7}},"13":{start:{line:44,column:8},end:{line:44,column:34}},"14":{start:{line:46,column:21},end:{line:46,column:35}},"15":{start:{line:47,column:20},end:{line:47,column:64}},"16":{start:{line:48,column:22},end:{line:48,column:72}},"17":{start:{line:49,column:19},end:{line:49,column:37}},"18":{start:{line:50,column:4},end:{line:50,column:41}},"19":{start:{line:51,column:4},end:{line:51,column:41}},"20":{start:{line:52,column:24},end:{line:52,column:43}},"21":{start:{line:53,column:24},end:{line:53,column:48}},"22":{start:{line:54,column:24},end:{line:54,column:42}},"23":{start:{line:55,column:4},end:{line:63,column:7}},"24":{start:{line:56,column:8},end:{line:62,column:11}},"25":{start:{line:57,column:34},end:{line:57,column:110}},"26":{start:{line:58,column:12},end:{line:58,column:79}},"27":{start:{line:59,column:12},end:{line:59,column:64}},"28":{start:{line:60,column:12},end:{line:60,column:64}},"29":{start:{line:61,column:12},end:{line:61,column:71}},"30":{start:{line:64,column:4},end:{line:72,column:7}},"31":{start:{line:65,column:8},end:{line:71,column:11}},"32":{start:{line:66,column:34},end:{line:66,column:109}},"33":{start:{line:67,column:12},end:{line:67,column:78}},"34":{start:{line:68,column:12},end:{line:68,column:64}},"35":{start:{line:69,column:12},end:{line:69,column:64}},"36":{start:{line:70,column:12},end:{line:70,column:71}},"37":{start:{line:73,column:4},end:{line:104,column:7}},"38":{start:{line:74,column:33},end:{line:79,column:9}},"39":{start:{line:81,column:8},end:{line:83,column:11}},"40":{start:{line:82,column:12},end:{line:82,column:85}},"41":{start:{line:84,column:8},end:{line:86,column:11}},"42":{start:{line:85,column:12},end:{line:85,column:38}},"43":{start:{line:87,column:8},end:{line:99,column:9}},"44":{start:{line:88,column:12},end:{line:98,column:15}},"45":{start:{line:89,column:41},end:{line:89,column:94}},"46":{start:{line:90,column:29},end:{line:90,column:133}},"47":{start:{line:91,column:16},end:{line:91,column:53}},"48":{start:{line:92,column:16},end:{line:92,column:56}},"49":{start:{line:93,column:16},end:{line:93,column:58}},"50":{start:{line:94,column:16},end:{line:94,column:66}},"51":{start:{line:95,column:16},end:{line:95,column:62}},"52":{start:{line:96,column:16},end:{line:96,column:70}},"53":{start:{line:97,column:16},end:{line:97,column:43}},"54":{start:{line:100,column:8},end:{line:103,column:11}},"55":{start:{line:102,column:12},end:{line:102,column:89}},"56":{start:{line:105,column:4},end:{line:122,column:7}},"57":{start:{line:107,column:29},end:{line:107,column:47}},"58":{start:{line:108,column:8},end:{line:111,column:11}},"59":{start:{line:109,column:12},end:{line:109,column:33}},"60":{start:{line:110,column:12},end:{line:110,column:85}},"61":{start:{line:112,column:8},end:{line:121,column:11}},"62":{start:{line:113,column:12},end:{line:113,column:61}},"63":{start:{line:114,column:25},end:{line:114,column:120}},"64":{start:{line:115,column:12},end:{line:115,column:40}},"65":{start:{line:116,column:12},end:{line:116,column:71}},"66":{start:{line:117,column:12},end:{line:117,column:49}},"67":{start:{line:118,column:12},end:{line:118,column:39}},"68":{start:{line:119,column:12},end:{line:119,column:71}},"69":{start:{line:120,column:12},end:{line:120,column:74}},"70":{start:{line:123,column:4},end:{line:133,column:7}},"71":{start:{line:124,column:29},end:{line:124,column:47}},"72":{start:{line:125,column:8},end:{line:132,column:11}},"73":{start:{line:126,column:12},end:{line:126,column:61}},"74":{start:{line:127,column:28},end:{line:127,column:90}},"75":{start:{line:128,column:25},end:{line:128,column:120}},"76":{start:{line:129,column:12},end:{line:129,column:63}},"77":{start:{line:130,column:12},end:{line:130,column:49}},"78":{start:{line:131,column:12},end:{line:131,column:71}},"79":{start:{line:134,column:4},end:{line:228,column:7}},"80":{start:{line:136,column:29},end:{line:136,column:47}},"81":{start:{line:138,column:8},end:{line:140,column:11}},"82":{start:{line:139,column:12},end:{line:139,column:85}},"83":{start:{line:141,column:8},end:{line:146,column:11}},"84":{start:{line:142,column:12},end:{line:142,column:33}},"85":{start:{line:143,column:12},end:{line:143,column:61}},"86":{start:{line:144,column:25},end:{line:144,column:130}},"87":{start:{line:145,column:12},end:{line:145,column:49}},"88":{start:{line:147,column:8},end:{line:149,column:11}},"89":{start:{line:148,column:12},end:{line:148,column:38}},"90":{start:{line:150,column:8},end:{line:158,column:11}},"91":{start:{line:151,column:32},end:{line:151,column:53}},"92":{start:{line:152,column:12},end:{line:152,column:76}},"93":{start:{line:153,column:12},end:{line:153,column:60}},"94":{start:{line:154,column:12},end:{line:154,column:76}},"95":{start:{line:155,column:12},end:{line:155,column:86}},"96":{start:{line:156,column:12},end:{line:156,column:85}},"97":{start:{line:157,column:12},end:{line:157,column:73}},"98":{start:{line:159,column:8},end:{line:164,column:11}},"99":{start:{line:160,column:12},end:{line:160,column:61}},"100":{start:{line:161,column:32},end:{line:161,column:54}},"101":{start:{line:162,column:12},end:{line:162,column:60}},"102":{start:{line:163,column:12},end:{line:163,column:76}},"103":{start:{line:165,column:8},end:{line:170,column:11}},"104":{start:{line:166,column:12},end:{line:166,column:61}},"105":{start:{line:167,column:32},end:{line:167,column:54}},"106":{start:{line:168,column:12},end:{line:168,column:52}},"107":{start:{line:169,column:12},end:{line:169,column:76}},"108":{start:{line:171,column:8},end:{line:181,column:11}},"109":{start:{line:172,column:33},end:{line:172,column:54}},"110":{start:{line:173,column:33},end:{line:173,column:54}},"111":{start:{line:174,column:12},end:{line:174,column:76}},"112":{start:{line:175,column:12},end:{line:175,column:75}},"113":{start:{line:176,column:12},end:{line:176,column:76}},"114":{start:{line:177,column:12},end:{line:177,column:87}},"115":{start:{line:178,column:12},end:{line:178,column:87}},"116":{start:{line:179,column:12},end:{line:179,column:85}},"117":{start:{line:180,column:12},end:{line:180,column:74}},"118":{start:{line:182,column:8},end:{line:190,column:11}},"119":{start:{line:183,column:32},end:{line:187,column:13}},"120":{start:{line:188,column:12},end:{line:188,column:58}},"121":{start:{line:189,column:12},end:{line:189,column:76}},"122":{start:{line:191,column:8},end:{line:210,column:11}},"123":{start:{line:192,column:25},end:{line:192,column:43}},"124":{start:{line:193,column:12},end:{line:193,column:54}},"125":{start:{line:194,column:12},end:{line:194,column:54}},"126":{start:{line:195,column:32},end:{line:195,column:53}},"127":{start:{line:196,column:12},end:{line:198,column:15}},"128":{start:{line:197,column:16},end:{line:197,column:56}},"129":{start:{line:199,column:12},end:{line:199,column:76}},"130":{start:{line:200,column:12},end:{line:200,column:86}},"131":{start:{line:201,column:12},end:{line:204,column:15}},"132":{start:{line:205,column:12},end:{line:205,column:73}},"133":{start:{line:206,column:12},end:{line:209,column:15}},"134":{start:{line:211,column:8},end:{line:227,column:11}},"135":{start:{line:212,column:38},end:{line:212,column:42}},"136":{start:{line:213,column:12},end:{line:213,column:61}},"137":{start:{line:214,column:32},end:{line:214,column:56}},"138":{start:{line:215,column:12},end:{line:217,column:15}},"139":{start:{line:216,column:16},end:{line:216,column:56}},"140":{start:{line:218,column:12},end:{line:221,column:15}},"141":{start:{line:222,column:12},end:{line:222,column:73}},"142":{start:{line:223,column:12},end:{line:226,column:15}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:23,column:4},end:{line:23,column:5}},loc:{start:{line:23,column:18},end:{line:26,column:5}},line:23},"1":{name:"(anonymous_1)",decl:{start:{line:27,column:4},end:{line:27,column:5}},loc:{start:{line:27,column:25},end:{line:29,column:5}},line:27},"2":{name:"(anonymous_2)",decl:{start:{line:30,column:4},end:{line:30,column:5}},loc:{start:{line:30,column:41},end:{line:32,column:5}},line:30},"3":{name:"(anonymous_3)",decl:{start:{line:33,column:4},end:{line:33,column:5}},loc:{start:{line:33,column:12},end:{line:35,column:5}},line:33},"4":{name:"(anonymous_4)",decl:{start:{line:36,column:4},end:{line:36,column:5}},loc:{start:{line:36,column:11},end:{line:36,column:14}},line:36},"5":{name:"(anonymous_5)",decl:{start:{line:37,column:4},end:{line:37,column:5}},loc:{start:{line:37,column:12},end:{line:40,column:5}},line:37},"6":{name:"(anonymous_6)",decl:{start:{line:42,column:18},end:{line:42,column:19}},loc:{start:{line:42,column:24},end:{line:229,column:1}},line:42},"7":{name:"(anonymous_7)",decl:{start:{line:43,column:14},end:{line:43,column:15}},loc:{start:{line:43,column:20},end:{line:45,column:5}},line:43},"8":{name:"(anonymous_8)",decl:{start:{line:55,column:38},end:{line:55,column:39}},loc:{start:{line:55,column:44},end:{line:63,column:5}},line:55},"9":{name:"(anonymous_9)",decl:{start:{line:56,column:53},end:{line:56,column:54}},loc:{start:{line:56,column:59},end:{line:62,column:9}},line:56},"10":{name:"(anonymous_10)",decl:{start:{line:64,column:37},end:{line:64,column:38}},loc:{start:{line:64,column:43},end:{line:72,column:5}},line:64},"11":{name:"(anonymous_11)",decl:{start:{line:65,column:52},end:{line:65,column:53}},loc:{start:{line:65,column:58},end:{line:71,column:9}},line:65},"12":{name:"(anonymous_12)",decl:{start:{line:73,column:29},end:{line:73,column:30}},loc:{start:{line:73,column:35},end:{line:104,column:5}},line:73},"13":{name:"(anonymous_13)",decl:{start:{line:81,column:15},end:{line:81,column:16}},loc:{start:{line:81,column:21},end:{line:83,column:9}},line:81},"14":{name:"(anonymous_14)",decl:{start:{line:84,column:14},end:{line:84,column:15}},loc:{start:{line:84,column:20},end:{line:86,column:9}},line:84},"15":{name:"(anonymous_15)",decl:{start:{line:88,column:75},end:{line:88,column:76}},loc:{start:{line:88,column:81},end:{line:98,column:13}},line:88},"16":{name:"(anonymous_16)",decl:{start:{line:100,column:106},end:{line:100,column:107}},loc:{start:{line:100,column:112},end:{line:103,column:9}},line:100},"17":{name:"(anonymous_17)",decl:{start:{line:105,column:31},end:{line:105,column:32}},loc:{start:{line:105,column:37},end:{line:122,column:5}},line:105},"18":{name:"(anonymous_18)",decl:{start:{line:108,column:15},end:{line:108,column:16}},loc:{start:{line:108,column:21},end:{line:111,column:9}},line:108},"19":{name:"(anonymous_19)",decl:{start:{line:112,column:37},end:{line:112,column:38}},loc:{start:{line:112,column:43},end:{line:121,column:9}},line:112},"20":{name:"(anonymous_20)",decl:{start:{line:123,column:37},end:{line:123,column:38}},loc:{start:{line:123,column:43},end:{line:133,column:5}},line:123},"21":{name:"(anonymous_21)",decl:{start:{line:125,column:45},end:{line:125,column:46}},loc:{start:{line:125,column:51},end:{line:132,column:9}},line:125},"22":{name:"(anonymous_22)",decl:{start:{line:134,column:25},end:{line:134,column:26}},loc:{start:{line:134,column:31},end:{line:228,column:5}},line:134},"23":{name:"(anonymous_23)",decl:{start:{line:138,column:15},end:{line:138,column:16}},loc:{start:{line:138,column:21},end:{line:140,column:9}},line:138},"24":{name:"(anonymous_24)",decl:{start:{line:141,column:19},end:{line:141,column:20}},loc:{start:{line:141,column:25},end:{line:146,column:9}},line:141},"25":{name:"(anonymous_25)",decl:{start:{line:147,column:18},end:{line:147,column:19}},loc:{start:{line:147,column:24},end:{line:149,column:9}},line:147},"26":{name:"(anonymous_26)",decl:{start:{line:150,column:49},end:{line:150,column:50}},loc:{start:{line:150,column:55},end:{line:158,column:9}},line:150},"27":{name:"(anonymous_27)",decl:{start:{line:159,column:62},end:{line:159,column:63}},loc:{start:{line:159,column:68},end:{line:164,column:9}},line:159},"28":{name:"(anonymous_28)",decl:{start:{line:165,column:54},end:{line:165,column:55}},loc:{start:{line:165,column:60},end:{line:170,column:9}},line:165},"29":{name:"(anonymous_29)",decl:{start:{line:171,column:50},end:{line:171,column:51}},loc:{start:{line:171,column:56},end:{line:181,column:9}},line:171},"30":{name:"(anonymous_30)",decl:{start:{line:182,column:80},end:{line:182,column:81}},loc:{start:{line:182,column:86},end:{line:190,column:9}},line:182},"31":{name:"(anonymous_31)",decl:{start:{line:191,column:62},end:{line:191,column:63}},loc:{start:{line:191,column:68},end:{line:210,column:9}},line:191},"32":{name:"(anonymous_32)",decl:{start:{line:196,column:51},end:{line:196,column:52}},loc:{start:{line:196,column:57},end:{line:198,column:13}},line:196},"33":{name:"(anonymous_33)",decl:{start:{line:211,column:75},end:{line:211,column:76}},loc:{start:{line:211,column:81},end:{line:227,column:9}},line:211},"34":{name:"(anonymous_34)",decl:{start:{line:215,column:67},end:{line:215,column:68}},loc:{start:{line:215,column:73},end:{line:217,column:13}},line:215}},branchMap:{"0":{loc:{start:{line:89,column:41},end:{line:89,column:94}},type:"cond-expr",locations:[{start:{line:89,column:80},end:{line:89,column:89}},{start:{line:89,column:92},end:{line:89,column:94}}],line:89}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0},b:{"0":[0,0]},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-stats.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-stats.ts"],names:[],mappings:"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",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport {\n  BaseView,\n  globalStats,\n  StatsEventListener,\n  TagKey,\n  TagMap,\n  TagValue,\n} from '../src';\nimport {\n  AggregationType,\n  LastValueData,\n  Measure,\n  Measurement,\n  MeasureType,\n  MeasureUnit,\n  View,\n} from '../src/stats/types';\nimport * as tagger from '../src/tags/tagger';\n\nclass TestExporter implements StatsEventListener {\n  registeredViews: View[] = [];\n  recordedMeasurements: Measurement[] = [];\n\n  onRegisterView(view: View) {\n    this.registeredViews.push(view);\n  }\n\n  onRecord(\n    views: View[],\n    measurement: Measurement,\n    tagMap: Map<TagKey, TagValue>\n  ) {\n    this.recordedMeasurements.push(measurement);\n  }\n\n  start(): void {\n    // TODO(mayurkale): dependency with PR#253.\n  }\n\n  stop(): void {}\n\n  clean() {\n    this.registeredViews = [];\n    this.recordedMeasurements = [];\n  }\n}\n\ndescribe('Stats', () => {\n  afterEach(() => {\n    globalStats.clear();\n  });\n\n  const viewName = 'testViewName';\n  const tagKeys = [{ name: 'testKey1' }, { name: 'testKey2' }];\n  const tagValues = [{ value: 'testValue1' }, { value: 'testValue2' }];\n  const tagMap = new TagMap();\n  tagMap.set(tagKeys[0], tagValues[0]);\n  tagMap.set(tagKeys[1], tagValues[1]);\n\n  const measureName = 'testMeasureDouble';\n  const measureUnit = MeasureUnit.UNIT;\n  const description = 'test description';\n\n  describe('createMeasureDouble()', () => {\n    it('should create a measure of type double', () => {\n      const measureDouble = globalStats.createMeasureDouble(\n        measureName,\n        measureUnit,\n        description\n      );\n      assert.strictEqual(measureDouble.type, MeasureType.DOUBLE);\n      assert.strictEqual(measureDouble.name, measureName);\n      assert.strictEqual(measureDouble.unit, measureUnit);\n      assert.strictEqual(measureDouble.description, description);\n    });\n  });\n\n  describe('createMeasureInt64()', () => {\n    it('should create a measure of type int64', () => {\n      const measureDouble = globalStats.createMeasureInt64(\n        measureName,\n        measureUnit,\n        description\n      );\n      assert.strictEqual(measureDouble.type, MeasureType.INT64);\n      assert.strictEqual(measureDouble.name, measureName);\n      assert.strictEqual(measureDouble.unit, measureUnit);\n      assert.strictEqual(measureDouble.description, description);\n    });\n  });\n\n  describe('createView()', () => {\n    const aggregationTypes = [\n      AggregationType.COUNT,\n      AggregationType.SUM,\n      AggregationType.LAST_VALUE,\n      AggregationType.DISTRIBUTION,\n    ];\n    let measure: Measure;\n\n    before(() => {\n      measure = globalStats.createMeasureInt64(measureName, measureUnit);\n    });\n\n    after(() => {\n      globalStats.clear();\n    });\n\n    for (const aggregationType of aggregationTypes) {\n      it(`should create a view with ${aggregationType} aggregation`, () => {\n        const bucketBoundaries = AggregationType.DISTRIBUTION ? [1, 2, 3] : [];\n        const view = globalStats.createView(\n          viewName,\n          measure,\n          aggregationType,\n          tagKeys,\n          description,\n          bucketBoundaries\n        );\n        globalStats.registerView(view);\n\n        assert.strictEqual(view.name, viewName);\n        assert.strictEqual(view.measure, measure);\n        assert.strictEqual(view.description, description);\n        assert.deepStrictEqual(view.measure, measure);\n        assert.strictEqual(view.aggregation, aggregationType);\n        assert.ok(view.registered);\n      });\n    }\n\n    it('should not create a view with distribution aggregation when no bucket boundaries were given', () => {\n      // @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.\n      assert.throws(globalStats.createView, 'No bucketBoundaries specified');\n    });\n  });\n\n  describe('registerView()', () => {\n    let measure: Measure;\n    const testExporter = new TestExporter();\n\n    before(() => {\n      testExporter.clean();\n      measure = globalStats.createMeasureInt64(measureName, measureUnit);\n    });\n\n    it('should register a view', () => {\n      globalStats.registerExporter(testExporter);\n      const view = new BaseView(\n        viewName,\n        measure,\n        AggregationType.LAST_VALUE,\n        tagKeys,\n        description\n      );\n\n      assert.ok(!view.registered);\n      assert.strictEqual(testExporter.registeredViews.length, 0);\n\n      globalStats.registerView(view);\n\n      assert.ok(view.registered);\n      assert.strictEqual(testExporter.registeredViews.length, 1);\n      assert.deepStrictEqual(testExporter.registeredViews[0], view);\n    });\n  });\n\n  describe('unregisterExporter()', () => {\n    const testExporter = new TestExporter();\n\n    it('should unregister the exporter', () => {\n      globalStats.registerExporter(testExporter);\n      const measure = globalStats.createMeasureInt64(measureName, measureUnit);\n      const view = new BaseView(\n        viewName,\n        measure,\n        AggregationType.LAST_VALUE,\n        tagKeys,\n        description\n      );\n      globalStats.unregisterExporter(testExporter);\n      globalStats.registerView(view);\n\n      assert.strictEqual(testExporter.registeredViews.length, 0);\n    });\n  });\n\n  describe('record()', () => {\n    let measure: Measure;\n    const testExporter = new TestExporter();\n    let aggregationData: LastValueData;\n    before(() => {\n      measure = globalStats.createMeasureInt64(measureName, measureUnit);\n    });\n\n    beforeEach(() => {\n      testExporter.clean();\n      globalStats.registerExporter(testExporter);\n      const view = globalStats.createView(\n        viewName,\n        measure,\n        AggregationType.LAST_VALUE,\n        tagKeys,\n        description\n      );\n      globalStats.registerView(view);\n    });\n\n    afterEach(() => {\n      globalStats.clear();\n    });\n\n    it('should record a single measurement', () => {\n      const measurement = { measure, value: 1 };\n      assert.strictEqual(testExporter.recordedMeasurements.length, 0);\n      globalStats.record([measurement], tagMap);\n      assert.strictEqual(testExporter.recordedMeasurements.length, 1);\n      assert.deepStrictEqual(testExporter.recordedMeasurements[0], measurement);\n      aggregationData = testExporter.registeredViews[0].getSnapshot(\n        tagValues\n      ) as LastValueData;\n      assert.strictEqual(aggregationData.value, measurement.value);\n    });\n\n    it('should not record a single negative measurement', () => {\n      globalStats.registerExporter(testExporter);\n      const measurement = { measure, value: -1 };\n      globalStats.record([measurement], tagMap);\n      assert.strictEqual(testExporter.recordedMeasurements.length, 0);\n    });\n\n    it('should record when tagMap is not passed', () => {\n      globalStats.registerExporter(testExporter);\n      const measurement = { measure, value: 10 };\n      globalStats.record([measurement]);\n      assert.strictEqual(testExporter.recordedMeasurements.length, 2);\n    });\n\n    it('should record multiple measurements', () => {\n      const measurement1 = { measure, value: 1 };\n      const measurement2 = { measure, value: 1 };\n      assert.strictEqual(testExporter.recordedMeasurements.length, 0);\n      globalStats.record([measurement1, measurement2], tagMap);\n      assert.strictEqual(testExporter.recordedMeasurements.length, 2);\n      assert.deepStrictEqual(\n        testExporter.recordedMeasurements[0],\n        measurement1\n      );\n      assert.deepStrictEqual(\n        testExporter.recordedMeasurements[1],\n        measurement2\n      );\n      aggregationData = testExporter.registeredViews[0].getSnapshot(\n        tagValues\n      ) as LastValueData;\n      assert.strictEqual(aggregationData.value, measurement2.value);\n    });\n\n    it('should skip whole multiple measurment if one of value is negative', () => {\n      const measurments = [\n        { measure, value: 1 },\n        { measure, value: -1 },\n        { measure, value: 1 },\n      ];\n      globalStats.record(measurments, tagMap);\n      assert.strictEqual(testExporter.recordedMeasurements.length, 0);\n    });\n\n    it('should record against implicit context when set', () => {\n      const tags = new TagMap();\n      tags.set(tagKeys[0], { value: 'value1' });\n      tags.set(tagKeys[1], { value: 'value2' });\n      const measurement = { measure, value: 1 };\n      globalStats.withTagContext(tags, () => {\n        globalStats.record([measurement]);\n      });\n\n      assert.strictEqual(testExporter.recordedMeasurements.length, 1);\n      assert.deepStrictEqual(testExporter.recordedMeasurements[0], measurement);\n      aggregationData = testExporter.registeredViews[0].getSnapshot([\n        { value: 'value1' },\n        { value: 'value2' },\n      ]) as LastValueData;\n      assert.strictEqual(aggregationData.value, measurement.value);\n      assert.deepStrictEqual(aggregationData.tagValues, [\n        { value: 'value1' },\n        { value: 'value2' },\n      ]);\n    });\n\n    it('should record against implicit context when not set or empty', () => {\n      const UNKNOWN_TAG_VALUE: TagValue | null = null;\n      globalStats.registerExporter(testExporter);\n      const measurement = { measure, value: 2211 };\n      globalStats.withTagContext(tagger.EMPTY_TAG_MAP, () => {\n        globalStats.record([measurement]);\n      });\n\n      aggregationData = testExporter.registeredViews[0].getSnapshot([\n        UNKNOWN_TAG_VALUE,\n        UNKNOWN_TAG_VALUE,\n      ]) as LastValueData;\n      assert.strictEqual(aggregationData.value, measurement.value);\n      assert.deepStrictEqual(aggregationData.tagValues, [\n        UNKNOWN_TAG_VALUE,\n        UNKNOWN_TAG_VALUE,\n      ]);\n    });\n  });\n});\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"cc8a9b32d55cd723c4246e71a2aa5bb243661a4b"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_x2bkdpse2=function(){return actualCoverage;};}return actualCoverage;}cov_x2bkdpse2();cov_x2bkdpse2().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const assert=(cov_x2bkdpse2().s[1]++,require("assert"));const src_1=(cov_x2bkdpse2().s[2]++,require("../src"));const types_1=(cov_x2bkdpse2().s[3]++,require("../src/stats/types"));const tagger=(cov_x2bkdpse2().s[4]++,require("../src/tags/tagger"));class TestExporter{constructor(){cov_x2bkdpse2().f[0]++;cov_x2bkdpse2().s[5]++;this.registeredViews=[];cov_x2bkdpse2().s[6]++;this.recordedMeasurements=[];}onRegisterView(view){cov_x2bkdpse2().f[1]++;cov_x2bkdpse2().s[7]++;this.registeredViews.push(view);}onRecord(views,measurement,tagMap){cov_x2bkdpse2().f[2]++;cov_x2bkdpse2().s[8]++;this.recordedMeasurements.push(measurement);}start(){cov_x2bkdpse2().f[3]++;}// TODO(mayurkale): dependency with PR#253.
stop(){cov_x2bkdpse2().f[4]++;}clean(){cov_x2bkdpse2().f[5]++;cov_x2bkdpse2().s[9]++;this.registeredViews=[];cov_x2bkdpse2().s[10]++;this.recordedMeasurements=[];}}cov_x2bkdpse2().s[11]++;describe('Stats',()=>{cov_x2bkdpse2().f[6]++;cov_x2bkdpse2().s[12]++;afterEach(()=>{cov_x2bkdpse2().f[7]++;cov_x2bkdpse2().s[13]++;src_1.globalStats.clear();});const viewName=(cov_x2bkdpse2().s[14]++,'testViewName');const tagKeys=(cov_x2bkdpse2().s[15]++,[{name:'testKey1'},{name:'testKey2'}]);const tagValues=(cov_x2bkdpse2().s[16]++,[{value:'testValue1'},{value:'testValue2'}]);const tagMap=(cov_x2bkdpse2().s[17]++,new src_1.TagMap());cov_x2bkdpse2().s[18]++;tagMap.set(tagKeys[0],tagValues[0]);cov_x2bkdpse2().s[19]++;tagMap.set(tagKeys[1],tagValues[1]);const measureName=(cov_x2bkdpse2().s[20]++,'testMeasureDouble');const measureUnit=(cov_x2bkdpse2().s[21]++,types_1.MeasureUnit.UNIT);const description=(cov_x2bkdpse2().s[22]++,'test description');cov_x2bkdpse2().s[23]++;describe('createMeasureDouble()',()=>{cov_x2bkdpse2().f[8]++;cov_x2bkdpse2().s[24]++;it('should create a measure of type double',()=>{cov_x2bkdpse2().f[9]++;const measureDouble=(cov_x2bkdpse2().s[25]++,src_1.globalStats.createMeasureDouble(measureName,measureUnit,description));cov_x2bkdpse2().s[26]++;assert.strictEqual(measureDouble.type,types_1.MeasureType.DOUBLE);cov_x2bkdpse2().s[27]++;assert.strictEqual(measureDouble.name,measureName);cov_x2bkdpse2().s[28]++;assert.strictEqual(measureDouble.unit,measureUnit);cov_x2bkdpse2().s[29]++;assert.strictEqual(measureDouble.description,description);});});cov_x2bkdpse2().s[30]++;describe('createMeasureInt64()',()=>{cov_x2bkdpse2().f[10]++;cov_x2bkdpse2().s[31]++;it('should create a measure of type int64',()=>{cov_x2bkdpse2().f[11]++;const measureDouble=(cov_x2bkdpse2().s[32]++,src_1.globalStats.createMeasureInt64(measureName,measureUnit,description));cov_x2bkdpse2().s[33]++;assert.strictEqual(measureDouble.type,types_1.MeasureType.INT64);cov_x2bkdpse2().s[34]++;assert.strictEqual(measureDouble.name,measureName);cov_x2bkdpse2().s[35]++;assert.strictEqual(measureDouble.unit,measureUnit);cov_x2bkdpse2().s[36]++;assert.strictEqual(measureDouble.description,description);});});cov_x2bkdpse2().s[37]++;describe('createView()',()=>{cov_x2bkdpse2().f[12]++;const aggregationTypes=(cov_x2bkdpse2().s[38]++,[types_1.AggregationType.COUNT,types_1.AggregationType.SUM,types_1.AggregationType.LAST_VALUE,types_1.AggregationType.DISTRIBUTION]);let measure;cov_x2bkdpse2().s[39]++;before(()=>{cov_x2bkdpse2().f[13]++;cov_x2bkdpse2().s[40]++;measure=src_1.globalStats.createMeasureInt64(measureName,measureUnit);});cov_x2bkdpse2().s[41]++;after(()=>{cov_x2bkdpse2().f[14]++;cov_x2bkdpse2().s[42]++;src_1.globalStats.clear();});cov_x2bkdpse2().s[43]++;for(const aggregationType of aggregationTypes){cov_x2bkdpse2().s[44]++;it(`should create a view with ${aggregationType} aggregation`,()=>{cov_x2bkdpse2().f[15]++;const bucketBoundaries=(cov_x2bkdpse2().s[45]++,types_1.AggregationType.DISTRIBUTION?(cov_x2bkdpse2().b[0][0]++,[1,2,3]):(cov_x2bkdpse2().b[0][1]++,[]));const view=(cov_x2bkdpse2().s[46]++,src_1.globalStats.createView(viewName,measure,aggregationType,tagKeys,description,bucketBoundaries));cov_x2bkdpse2().s[47]++;src_1.globalStats.registerView(view);cov_x2bkdpse2().s[48]++;assert.strictEqual(view.name,viewName);cov_x2bkdpse2().s[49]++;assert.strictEqual(view.measure,measure);cov_x2bkdpse2().s[50]++;assert.strictEqual(view.description,description);cov_x2bkdpse2().s[51]++;assert.deepStrictEqual(view.measure,measure);cov_x2bkdpse2().s[52]++;assert.strictEqual(view.aggregation,aggregationType);cov_x2bkdpse2().s[53]++;assert.ok(view.registered);});}cov_x2bkdpse2().s[54]++;it('should not create a view with distribution aggregation when no bucket boundaries were given',()=>{cov_x2bkdpse2().f[16]++;cov_x2bkdpse2().s[55]++;// @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.
assert.throws(src_1.globalStats.createView,'No bucketBoundaries specified');});});cov_x2bkdpse2().s[56]++;describe('registerView()',()=>{cov_x2bkdpse2().f[17]++;let measure;const testExporter=(cov_x2bkdpse2().s[57]++,new TestExporter());cov_x2bkdpse2().s[58]++;before(()=>{cov_x2bkdpse2().f[18]++;cov_x2bkdpse2().s[59]++;testExporter.clean();cov_x2bkdpse2().s[60]++;measure=src_1.globalStats.createMeasureInt64(measureName,measureUnit);});cov_x2bkdpse2().s[61]++;it('should register a view',()=>{cov_x2bkdpse2().f[19]++;cov_x2bkdpse2().s[62]++;src_1.globalStats.registerExporter(testExporter);const view=(cov_x2bkdpse2().s[63]++,new src_1.BaseView(viewName,measure,types_1.AggregationType.LAST_VALUE,tagKeys,description));cov_x2bkdpse2().s[64]++;assert.ok(!view.registered);cov_x2bkdpse2().s[65]++;assert.strictEqual(testExporter.registeredViews.length,0);cov_x2bkdpse2().s[66]++;src_1.globalStats.registerView(view);cov_x2bkdpse2().s[67]++;assert.ok(view.registered);cov_x2bkdpse2().s[68]++;assert.strictEqual(testExporter.registeredViews.length,1);cov_x2bkdpse2().s[69]++;assert.deepStrictEqual(testExporter.registeredViews[0],view);});});cov_x2bkdpse2().s[70]++;describe('unregisterExporter()',()=>{cov_x2bkdpse2().f[20]++;const testExporter=(cov_x2bkdpse2().s[71]++,new TestExporter());cov_x2bkdpse2().s[72]++;it('should unregister the exporter',()=>{cov_x2bkdpse2().f[21]++;cov_x2bkdpse2().s[73]++;src_1.globalStats.registerExporter(testExporter);const measure=(cov_x2bkdpse2().s[74]++,src_1.globalStats.createMeasureInt64(measureName,measureUnit));const view=(cov_x2bkdpse2().s[75]++,new src_1.BaseView(viewName,measure,types_1.AggregationType.LAST_VALUE,tagKeys,description));cov_x2bkdpse2().s[76]++;src_1.globalStats.unregisterExporter(testExporter);cov_x2bkdpse2().s[77]++;src_1.globalStats.registerView(view);cov_x2bkdpse2().s[78]++;assert.strictEqual(testExporter.registeredViews.length,0);});});cov_x2bkdpse2().s[79]++;describe('record()',()=>{cov_x2bkdpse2().f[22]++;let measure;const testExporter=(cov_x2bkdpse2().s[80]++,new TestExporter());let aggregationData;cov_x2bkdpse2().s[81]++;before(()=>{cov_x2bkdpse2().f[23]++;cov_x2bkdpse2().s[82]++;measure=src_1.globalStats.createMeasureInt64(measureName,measureUnit);});cov_x2bkdpse2().s[83]++;beforeEach(()=>{cov_x2bkdpse2().f[24]++;cov_x2bkdpse2().s[84]++;testExporter.clean();cov_x2bkdpse2().s[85]++;src_1.globalStats.registerExporter(testExporter);const view=(cov_x2bkdpse2().s[86]++,src_1.globalStats.createView(viewName,measure,types_1.AggregationType.LAST_VALUE,tagKeys,description));cov_x2bkdpse2().s[87]++;src_1.globalStats.registerView(view);});cov_x2bkdpse2().s[88]++;afterEach(()=>{cov_x2bkdpse2().f[25]++;cov_x2bkdpse2().s[89]++;src_1.globalStats.clear();});cov_x2bkdpse2().s[90]++;it('should record a single measurement',()=>{cov_x2bkdpse2().f[26]++;const measurement=(cov_x2bkdpse2().s[91]++,{measure,value:1});cov_x2bkdpse2().s[92]++;assert.strictEqual(testExporter.recordedMeasurements.length,0);cov_x2bkdpse2().s[93]++;src_1.globalStats.record([measurement],tagMap);cov_x2bkdpse2().s[94]++;assert.strictEqual(testExporter.recordedMeasurements.length,1);cov_x2bkdpse2().s[95]++;assert.deepStrictEqual(testExporter.recordedMeasurements[0],measurement);cov_x2bkdpse2().s[96]++;aggregationData=testExporter.registeredViews[0].getSnapshot(tagValues);cov_x2bkdpse2().s[97]++;assert.strictEqual(aggregationData.value,measurement.value);});cov_x2bkdpse2().s[98]++;it('should not record a single negative measurement',()=>{cov_x2bkdpse2().f[27]++;cov_x2bkdpse2().s[99]++;src_1.globalStats.registerExporter(testExporter);const measurement=(cov_x2bkdpse2().s[100]++,{measure,value:-1});cov_x2bkdpse2().s[101]++;src_1.globalStats.record([measurement],tagMap);cov_x2bkdpse2().s[102]++;assert.strictEqual(testExporter.recordedMeasurements.length,0);});cov_x2bkdpse2().s[103]++;it('should record when tagMap is not passed',()=>{cov_x2bkdpse2().f[28]++;cov_x2bkdpse2().s[104]++;src_1.globalStats.registerExporter(testExporter);const measurement=(cov_x2bkdpse2().s[105]++,{measure,value:10});cov_x2bkdpse2().s[106]++;src_1.globalStats.record([measurement]);cov_x2bkdpse2().s[107]++;assert.strictEqual(testExporter.recordedMeasurements.length,2);});cov_x2bkdpse2().s[108]++;it('should record multiple measurements',()=>{cov_x2bkdpse2().f[29]++;const measurement1=(cov_x2bkdpse2().s[109]++,{measure,value:1});const measurement2=(cov_x2bkdpse2().s[110]++,{measure,value:1});cov_x2bkdpse2().s[111]++;assert.strictEqual(testExporter.recordedMeasurements.length,0);cov_x2bkdpse2().s[112]++;src_1.globalStats.record([measurement1,measurement2],tagMap);cov_x2bkdpse2().s[113]++;assert.strictEqual(testExporter.recordedMeasurements.length,2);cov_x2bkdpse2().s[114]++;assert.deepStrictEqual(testExporter.recordedMeasurements[0],measurement1);cov_x2bkdpse2().s[115]++;assert.deepStrictEqual(testExporter.recordedMeasurements[1],measurement2);cov_x2bkdpse2().s[116]++;aggregationData=testExporter.registeredViews[0].getSnapshot(tagValues);cov_x2bkdpse2().s[117]++;assert.strictEqual(aggregationData.value,measurement2.value);});cov_x2bkdpse2().s[118]++;it('should skip whole multiple measurment if one of value is negative',()=>{cov_x2bkdpse2().f[30]++;const measurments=(cov_x2bkdpse2().s[119]++,[{measure,value:1},{measure,value:-1},{measure,value:1}]);cov_x2bkdpse2().s[120]++;src_1.globalStats.record(measurments,tagMap);cov_x2bkdpse2().s[121]++;assert.strictEqual(testExporter.recordedMeasurements.length,0);});cov_x2bkdpse2().s[122]++;it('should record against implicit context when set',()=>{cov_x2bkdpse2().f[31]++;const tags=(cov_x2bkdpse2().s[123]++,new src_1.TagMap());cov_x2bkdpse2().s[124]++;tags.set(tagKeys[0],{value:'value1'});cov_x2bkdpse2().s[125]++;tags.set(tagKeys[1],{value:'value2'});const measurement=(cov_x2bkdpse2().s[126]++,{measure,value:1});cov_x2bkdpse2().s[127]++;src_1.globalStats.withTagContext(tags,()=>{cov_x2bkdpse2().f[32]++;cov_x2bkdpse2().s[128]++;src_1.globalStats.record([measurement]);});cov_x2bkdpse2().s[129]++;assert.strictEqual(testExporter.recordedMeasurements.length,1);cov_x2bkdpse2().s[130]++;assert.deepStrictEqual(testExporter.recordedMeasurements[0],measurement);cov_x2bkdpse2().s[131]++;aggregationData=testExporter.registeredViews[0].getSnapshot([{value:'value1'},{value:'value2'}]);cov_x2bkdpse2().s[132]++;assert.strictEqual(aggregationData.value,measurement.value);cov_x2bkdpse2().s[133]++;assert.deepStrictEqual(aggregationData.tagValues,[{value:'value1'},{value:'value2'}]);});cov_x2bkdpse2().s[134]++;it('should record against implicit context when not set or empty',()=>{cov_x2bkdpse2().f[33]++;const UNKNOWN_TAG_VALUE=(cov_x2bkdpse2().s[135]++,null);cov_x2bkdpse2().s[136]++;src_1.globalStats.registerExporter(testExporter);const measurement=(cov_x2bkdpse2().s[137]++,{measure,value:2211});cov_x2bkdpse2().s[138]++;src_1.globalStats.withTagContext(tagger.EMPTY_TAG_MAP,()=>{cov_x2bkdpse2().f[34]++;cov_x2bkdpse2().s[139]++;src_1.globalStats.record([measurement]);});cov_x2bkdpse2().s[140]++;aggregationData=testExporter.registeredViews[0].getSnapshot([UNKNOWN_TAG_VALUE,UNKNOWN_TAG_VALUE]);cov_x2bkdpse2().s[141]++;assert.strictEqual(aggregationData.value,measurement.value);cov_x2bkdpse2().s[142]++;assert.deepStrictEqual(aggregationData.tagValues,[UNKNOWN_TAG_VALUE,UNKNOWN_TAG_VALUE]);});});});//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,