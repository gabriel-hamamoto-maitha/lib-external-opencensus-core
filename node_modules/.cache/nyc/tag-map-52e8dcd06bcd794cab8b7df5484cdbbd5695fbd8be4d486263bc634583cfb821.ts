"use strict";/**
 * Copyright 2019, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_177nklbaf8(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/tag-map.ts";var hash="870318ea92509b18aa839e136b9412c905005591";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/tag-map.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:0},end:{line:18,column:24}},"2":{start:{line:19,column:16},end:{line:19,column:34}},"3":{start:{line:20,column:21},end:{line:20,column:44}},"4":{start:{line:21,column:33},end:{line:23,column:1}},"5":{start:{line:28,column:8},end:{line:28,column:40}},"6":{start:{line:37,column:8},end:{line:38,column:19}},"7":{start:{line:38,column:12},end:{line:38,column:19}},"8":{start:{line:40,column:8},end:{line:45,column:9}},"9":{start:{line:41,column:12},end:{line:44,column:13}},"10":{start:{line:42,column:16},end:{line:42,column:34}},"11":{start:{line:43,column:16},end:{line:43,column:22}},"12":{start:{line:46,column:8},end:{line:47,column:52}},"13":{start:{line:47,column:12},end:{line:47,column:52}},"14":{start:{line:48,column:34},end:{line:48,column:82}},"15":{start:{line:49,column:8},end:{line:49,column:59}},"16":{start:{line:56,column:8},end:{line:56,column:43}},"17":{start:{line:60,column:36},end:{line:60,column:45}},"18":{start:{line:61,column:8},end:{line:63,column:9}},"19":{start:{line:62,column:12},end:{line:62,column:72}},"20":{start:{line:64,column:8},end:{line:64,column:35}},"21":{start:{line:68,column:8},end:{line:68,column:35}},"22":{start:{line:76,column:8},end:{line:78,column:9}},"23":{start:{line:77,column:12},end:{line:77,column:45}},"24":{start:{line:79,column:8},end:{line:79,column:67}},"25":{start:{line:82,column:0},end:{line:82,column:24}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:26,column:4},end:{line:26,column:5}},loc:{start:{line:26,column:18},end:{line:29,column:5}},line:26},"1":{name:"(anonymous_1)",decl:{start:{line:36,column:4},end:{line:36,column:5}},loc:{start:{line:36,column:39},end:{line:50,column:5}},line:36},"2":{name:"(anonymous_2)",decl:{start:{line:55,column:4},end:{line:55,column:5}},loc:{start:{line:55,column:19},end:{line:57,column:5}},line:55},"3":{name:"(anonymous_3)",decl:{start:{line:59,column:4},end:{line:59,column:5}},loc:{start:{line:59,column:15},end:{line:65,column:5}},line:59},"4":{name:"(anonymous_4)",decl:{start:{line:67,column:4},end:{line:67,column:5}},loc:{start:{line:67,column:27},end:{line:69,column:5}},line:67},"5":{name:"(anonymous_5)",decl:{start:{line:75,column:4},end:{line:75,column:5}},loc:{start:{line:75,column:48},end:{line:80,column:5}},line:75}},branchMap:{"0":{loc:{start:{line:37,column:8},end:{line:38,column:19}},type:"if",locations:[{start:{line:37,column:8},end:{line:38,column:19}},{start:{line:37,column:8},end:{line:38,column:19}}],line:37},"1":{loc:{start:{line:37,column:12},end:{line:37,column:90}},type:"binary-expr",locations:[{start:{line:37,column:12},end:{line:37,column:47}},{start:{line:37,column:51},end:{line:37,column:90}}],line:37},"2":{loc:{start:{line:41,column:12},end:{line:44,column:13}},type:"if",locations:[{start:{line:41,column:12},end:{line:44,column:13}},{start:{line:41,column:12},end:{line:44,column:13}}],line:41},"3":{loc:{start:{line:46,column:8},end:{line:47,column:52}},type:"if",locations:[{start:{line:46,column:8},end:{line:47,column:52}},{start:{line:46,column:8},end:{line:47,column:52}}],line:46},"4":{loc:{start:{line:76,column:8},end:{line:78,column:9}},type:"if",locations:[{start:{line:76,column:8},end:{line:78,column:9}},{start:{line:76,column:8},end:{line:78,column:9}}],line:76}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/tag-map.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/tag-map.ts"],names:[],mappings:";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,mCAMiB;AACjB,6CAA8D;AAE9D,MAAM,wBAAwB,GAAG;IAC/B,MAAM,EAAE,cAAM,CAAC,qBAAqB;CACrC,CAAC;AAEF,uDAAuD;AACvD,MAAa,MAAM;IAAnB;QACE,kEAAkE;QACjD,mBAAc,GAG3B,IAAI,GAAG,EAAE,CAAC;IA0DhB,CAAC;IAxDC;;;;;OAKG;IACH,GAAG,CAAC,MAAc,EAAE,QAAkB,EAAE,WAAyB;QAC/D,IAAI,CAAC,0BAAa,CAAC,MAAM,CAAC,IAAI,CAAC,4BAAe,CAAC,QAAQ,CAAC;YAAE,OAAO;QACjE,IAAI,WAAW,CAAC;QAChB,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,EAAE;YAC5C,IAAI,GAAG,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI,EAAE;gBAC5B,WAAW,GAAG,GAAG,CAAC;gBAClB,MAAM;aACP;SACF;QACD,IAAI,WAAW;YAAE,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QACzD,MAAM,iBAAiB,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;QAC3E,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC;IACrD,CAAC;IAED;;;OAGG;IACH,MAAM,CAAC,MAAc;QACnB,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACrC,CAAC;IAED,0CAA0C;IAC1C,IAAI,IAAI;QACN,MAAM,mBAAmB,GAA0B,IAAI,GAAG,EAAE,CAAC;QAC7D,KAAK,MAAM,CAAC,MAAM,EAAE,iBAAiB,CAAC,IAAI,IAAI,CAAC,cAAc,EAAE;YAC7D,mBAAmB,CAAC,GAAG,CAAC,MAAM,EAAE,iBAAiB,CAAC,QAAQ,CAAC,CAAC;SAC7D;QACD,OAAO,mBAAmB,CAAC;IAC7B,CAAC;IAED,uCAAuC;IACvC,IAAI,gBAAgB;QAClB,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IAED;;;;OAIG;IACK,oBAAoB,CAC1B,QAAkB,EAClB,WAAyB;QAEzB,IAAI,WAAW,EAAE;YACf,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,CAAC;SAClC;QACD,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,wBAAwB,EAAE,CAAC;IAC7D,CAAC;CACF;AA/DD,wBA+DC",sourcesContent:["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  TagKey,\n  TagMetadata,\n  TagTtl,\n  TagValue,\n  TagValueWithMetadata,\n} from './types';\nimport { isValidTagKey, isValidTagValue } from './validation';\n\nconst UNLIMITED_PROPAGATION_MD = {\n  tagTtl: TagTtl.UNLIMITED_PROPAGATION,\n};\n\n/** TagMap is maps of TagKey -> TagValueWithMetadata */\nexport class TagMap {\n  // A map mapping TagKey to to its respective TagValueWithMetadata.\n  private readonly registeredTags: Map<\n    TagKey,\n    TagValueWithMetadata\n  > = new Map();\n\n  /**\n   * Adds the key/value pair regardless of whether the key is present.\n   * @param tagKey The TagKey which will be set.\n   * @param tagValue The TagValue to set for the given key.\n   * @param tagMetadata The TagMetadata associated with this Tag.\n   */\n  set(tagKey: TagKey, tagValue: TagValue, tagMetadata?: TagMetadata): void {\n    if (!isValidTagKey(tagKey) || !isValidTagValue(tagValue)) return;\n    let existingKey;\n    for (const key of this.registeredTags.keys()) {\n      if (key.name === tagKey.name) {\n        existingKey = key;\n        break;\n      }\n    }\n    if (existingKey) this.registeredTags.delete(existingKey);\n    const valueWithMetadata = this.getValueWithMetadata(tagValue, tagMetadata);\n    this.registeredTags.set(tagKey, valueWithMetadata);\n  }\n\n  /**\n   * Deletes a tag from the map if the key is in the map.\n   * @param tagKey The TagKey which will be removed.\n   */\n  delete(tagKey: TagKey): void {\n    this.registeredTags.delete(tagKey);\n  }\n\n  /** Gets the tags map without metadata. */\n  get tags() {\n    const tagsWithoutMetadata: Map<TagKey, TagValue> = new Map();\n    for (const [tagKey, valueWithMetadata] of this.registeredTags) {\n      tagsWithoutMetadata.set(tagKey, valueWithMetadata.tagValue);\n    }\n    return tagsWithoutMetadata;\n  }\n\n  /** Gets the tags map with metadata. */\n  get tagsWithMetadata() {\n    return this.registeredTags;\n  }\n\n  /**\n   * Constructs a new TagValueWithMetadata using tagValue and tagMetadata.\n   * For backwards-compatibility this method still produces propagating Tags\n   * (UNLIMITED_PROPAGATION) if tagMetadata is not provided or missing.\n   */\n  private getValueWithMetadata(\n    tagValue: TagValue,\n    tagMetadata?: TagMetadata\n  ): TagValueWithMetadata {\n    if (tagMetadata) {\n      return { tagValue, tagMetadata };\n    }\n    return { tagValue, tagMetadata: UNLIMITED_PROPAGATION_MD };\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"870318ea92509b18aa839e136b9412c905005591"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_177nklbaf8=function(){return actualCoverage;};}return actualCoverage;}cov_177nklbaf8();cov_177nklbaf8().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_177nklbaf8().s[1]++;exports.TagMap=void 0;const types_1=(cov_177nklbaf8().s[2]++,require("./types"));const validation_1=(cov_177nklbaf8().s[3]++,require("./validation"));const UNLIMITED_PROPAGATION_MD=(cov_177nklbaf8().s[4]++,{tagTtl:types_1.TagTtl.UNLIMITED_PROPAGATION});/** TagMap is maps of TagKey -> TagValueWithMetadata */class TagMap{constructor(){cov_177nklbaf8().f[0]++;cov_177nklbaf8().s[5]++;// A map mapping TagKey to to its respective TagValueWithMetadata.
this.registeredTags=new Map();}/**
     * Adds the key/value pair regardless of whether the key is present.
     * @param tagKey The TagKey which will be set.
     * @param tagValue The TagValue to set for the given key.
     * @param tagMetadata The TagMetadata associated with this Tag.
     */set(tagKey,tagValue,tagMetadata){cov_177nklbaf8().f[1]++;cov_177nklbaf8().s[6]++;if((cov_177nklbaf8().b[1][0]++,!validation_1.isValidTagKey(tagKey))||(cov_177nklbaf8().b[1][1]++,!validation_1.isValidTagValue(tagValue))){cov_177nklbaf8().b[0][0]++;cov_177nklbaf8().s[7]++;return;}else{cov_177nklbaf8().b[0][1]++;}let existingKey;cov_177nklbaf8().s[8]++;for(const key of this.registeredTags.keys()){cov_177nklbaf8().s[9]++;if(key.name===tagKey.name){cov_177nklbaf8().b[2][0]++;cov_177nklbaf8().s[10]++;existingKey=key;cov_177nklbaf8().s[11]++;break;}else{cov_177nklbaf8().b[2][1]++;}}cov_177nklbaf8().s[12]++;if(existingKey){cov_177nklbaf8().b[3][0]++;cov_177nklbaf8().s[13]++;this.registeredTags.delete(existingKey);}else{cov_177nklbaf8().b[3][1]++;}const valueWithMetadata=(cov_177nklbaf8().s[14]++,this.getValueWithMetadata(tagValue,tagMetadata));cov_177nklbaf8().s[15]++;this.registeredTags.set(tagKey,valueWithMetadata);}/**
     * Deletes a tag from the map if the key is in the map.
     * @param tagKey The TagKey which will be removed.
     */delete(tagKey){cov_177nklbaf8().f[2]++;cov_177nklbaf8().s[16]++;this.registeredTags.delete(tagKey);}/** Gets the tags map without metadata. */get tags(){cov_177nklbaf8().f[3]++;const tagsWithoutMetadata=(cov_177nklbaf8().s[17]++,new Map());cov_177nklbaf8().s[18]++;for(const[tagKey,valueWithMetadata]of this.registeredTags){cov_177nklbaf8().s[19]++;tagsWithoutMetadata.set(tagKey,valueWithMetadata.tagValue);}cov_177nklbaf8().s[20]++;return tagsWithoutMetadata;}/** Gets the tags map with metadata. */get tagsWithMetadata(){cov_177nklbaf8().f[4]++;cov_177nklbaf8().s[21]++;return this.registeredTags;}/**
     * Constructs a new TagValueWithMetadata using tagValue and tagMetadata.
     * For backwards-compatibility this method still produces propagating Tags
     * (UNLIMITED_PROPAGATION) if tagMetadata is not provided or missing.
     */getValueWithMetadata(tagValue,tagMetadata){cov_177nklbaf8().f[5]++;cov_177nklbaf8().s[22]++;if(tagMetadata){cov_177nklbaf8().b[4][0]++;cov_177nklbaf8().s[23]++;return{tagValue,tagMetadata};}else{cov_177nklbaf8().b[4][1]++;}cov_177nklbaf8().s[24]++;return{tagValue,tagMetadata:UNLIMITED_PROPAGATION_MD};}}cov_177nklbaf8().s[25]++;exports.TagMap=TagMap;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3VzZXJtYWl0aGEvdHJhZGVtYXN0ZXIvbGlicy9saWItZXh0ZXJuYWwtb3BlbmNlbnN1cy1ub2RlL3NyYy90YWdzL3RhZy1tYXAudHMiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VybWFpdGhhL3RyYWRlbWFzdGVyL2xpYnMvbGliLWV4dGVybmFsLW9wZW5jZW5zdXMtbm9kZS9zcmMvdGFncy90YWctbWFwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7R0FjRzs7O0FBRUgsbUNBTWlCO0FBQ2pCLDZDQUE4RDtBQUU5RCxNQUFNLHdCQUF3QixHQUFHO0lBQy9CLE1BQU0sRUFBRSxjQUFNLENBQUMscUJBQXFCO0NBQ3JDLENBQUM7QUFFRix1REFBdUQ7QUFDdkQsTUFBYSxNQUFNO0lBQW5CO1FBQ0Usa0VBQWtFO1FBQ2pELG1CQUFjLEdBRzNCLElBQUksR0FBRyxFQUFFLENBQUM7SUEwRGhCLENBQUM7SUF4REM7Ozs7O09BS0c7SUFDSCxHQUFHLENBQUMsTUFBYyxFQUFFLFFBQWtCLEVBQUUsV0FBeUI7UUFDL0QsSUFBSSxDQUFDLDBCQUFhLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyw0QkFBZSxDQUFDLFFBQVEsQ0FBQztZQUFFLE9BQU87UUFDakUsSUFBSSxXQUFXLENBQUM7UUFDaEIsS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxFQUFFO1lBQzVDLElBQUksR0FBRyxDQUFDLElBQUksS0FBSyxNQUFNLENBQUMsSUFBSSxFQUFFO2dCQUM1QixXQUFXLEdBQUcsR0FBRyxDQUFDO2dCQUNsQixNQUFNO2FBQ1A7U0FDRjtRQUNELElBQUksV0FBVztZQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3pELE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUMzRSxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsTUFBTSxDQUFDLE1BQWM7UUFDbkIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVELDBDQUEwQztJQUMxQyxJQUFJLElBQUk7UUFDTixNQUFNLG1CQUFtQixHQUEwQixJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQzdELEtBQUssTUFBTSxDQUFDLE1BQU0sRUFBRSxpQkFBaUIsQ0FBQyxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDN0QsbUJBQW1CLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUM3RDtRQUNELE9BQU8sbUJBQW1CLENBQUM7SUFDN0IsQ0FBQztJQUVELHVDQUF1QztJQUN2QyxJQUFJLGdCQUFnQjtRQUNsQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDN0IsQ0FBQztJQUVEOzs7O09BSUc7SUFDSyxvQkFBb0IsQ0FDMUIsUUFBa0IsRUFDbEIsV0FBeUI7UUFFekIsSUFBSSxXQUFXLEVBQUU7WUFDZixPQUFPLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxDQUFDO1NBQ2xDO1FBQ0QsT0FBTyxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsd0JBQXdCLEVBQUUsQ0FBQztJQUM3RCxDQUFDO0NBQ0Y7QUEvREQsd0JBK0RDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOSwgT3BlbkNlbnN1cyBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge1xuICBUYWdLZXksXG4gIFRhZ01ldGFkYXRhLFxuICBUYWdUdGwsXG4gIFRhZ1ZhbHVlLFxuICBUYWdWYWx1ZVdpdGhNZXRhZGF0YSxcbn0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBpc1ZhbGlkVGFnS2V5LCBpc1ZhbGlkVGFnVmFsdWUgfSBmcm9tICcuL3ZhbGlkYXRpb24nO1xuXG5jb25zdCBVTkxJTUlURURfUFJPUEFHQVRJT05fTUQgPSB7XG4gIHRhZ1R0bDogVGFnVHRsLlVOTElNSVRFRF9QUk9QQUdBVElPTixcbn07XG5cbi8qKiBUYWdNYXAgaXMgbWFwcyBvZiBUYWdLZXkgLT4gVGFnVmFsdWVXaXRoTWV0YWRhdGEgKi9cbmV4cG9ydCBjbGFzcyBUYWdNYXAge1xuICAvLyBBIG1hcCBtYXBwaW5nIFRhZ0tleSB0byB0byBpdHMgcmVzcGVjdGl2ZSBUYWdWYWx1ZVdpdGhNZXRhZGF0YS5cbiAgcHJpdmF0ZSByZWFkb25seSByZWdpc3RlcmVkVGFnczogTWFwPFxuICAgIFRhZ0tleSxcbiAgICBUYWdWYWx1ZVdpdGhNZXRhZGF0YVxuICA+ID0gbmV3IE1hcCgpO1xuXG4gIC8qKlxuICAgKiBBZGRzIHRoZSBrZXkvdmFsdWUgcGFpciByZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhlIGtleSBpcyBwcmVzZW50LlxuICAgKiBAcGFyYW0gdGFnS2V5IFRoZSBUYWdLZXkgd2hpY2ggd2lsbCBiZSBzZXQuXG4gICAqIEBwYXJhbSB0YWdWYWx1ZSBUaGUgVGFnVmFsdWUgdG8gc2V0IGZvciB0aGUgZ2l2ZW4ga2V5LlxuICAgKiBAcGFyYW0gdGFnTWV0YWRhdGEgVGhlIFRhZ01ldGFkYXRhIGFzc29jaWF0ZWQgd2l0aCB0aGlzIFRhZy5cbiAgICovXG4gIHNldCh0YWdLZXk6IFRhZ0tleSwgdGFnVmFsdWU6IFRhZ1ZhbHVlLCB0YWdNZXRhZGF0YT86IFRhZ01ldGFkYXRhKTogdm9pZCB7XG4gICAgaWYgKCFpc1ZhbGlkVGFnS2V5KHRhZ0tleSkgfHwgIWlzVmFsaWRUYWdWYWx1ZSh0YWdWYWx1ZSkpIHJldHVybjtcbiAgICBsZXQgZXhpc3RpbmdLZXk7XG4gICAgZm9yIChjb25zdCBrZXkgb2YgdGhpcy5yZWdpc3RlcmVkVGFncy5rZXlzKCkpIHtcbiAgICAgIGlmIChrZXkubmFtZSA9PT0gdGFnS2V5Lm5hbWUpIHtcbiAgICAgICAgZXhpc3RpbmdLZXkgPSBrZXk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZXhpc3RpbmdLZXkpIHRoaXMucmVnaXN0ZXJlZFRhZ3MuZGVsZXRlKGV4aXN0aW5nS2V5KTtcbiAgICBjb25zdCB2YWx1ZVdpdGhNZXRhZGF0YSA9IHRoaXMuZ2V0VmFsdWVXaXRoTWV0YWRhdGEodGFnVmFsdWUsIHRhZ01ldGFkYXRhKTtcbiAgICB0aGlzLnJlZ2lzdGVyZWRUYWdzLnNldCh0YWdLZXksIHZhbHVlV2l0aE1ldGFkYXRhKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGEgdGFnIGZyb20gdGhlIG1hcCBpZiB0aGUga2V5IGlzIGluIHRoZSBtYXAuXG4gICAqIEBwYXJhbSB0YWdLZXkgVGhlIFRhZ0tleSB3aGljaCB3aWxsIGJlIHJlbW92ZWQuXG4gICAqL1xuICBkZWxldGUodGFnS2V5OiBUYWdLZXkpOiB2b2lkIHtcbiAgICB0aGlzLnJlZ2lzdGVyZWRUYWdzLmRlbGV0ZSh0YWdLZXkpO1xuICB9XG5cbiAgLyoqIEdldHMgdGhlIHRhZ3MgbWFwIHdpdGhvdXQgbWV0YWRhdGEuICovXG4gIGdldCB0YWdzKCkge1xuICAgIGNvbnN0IHRhZ3NXaXRob3V0TWV0YWRhdGE6IE1hcDxUYWdLZXksIFRhZ1ZhbHVlPiA9IG5ldyBNYXAoKTtcbiAgICBmb3IgKGNvbnN0IFt0YWdLZXksIHZhbHVlV2l0aE1ldGFkYXRhXSBvZiB0aGlzLnJlZ2lzdGVyZWRUYWdzKSB7XG4gICAgICB0YWdzV2l0aG91dE1ldGFkYXRhLnNldCh0YWdLZXksIHZhbHVlV2l0aE1ldGFkYXRhLnRhZ1ZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRhZ3NXaXRob3V0TWV0YWRhdGE7XG4gIH1cblxuICAvKiogR2V0cyB0aGUgdGFncyBtYXAgd2l0aCBtZXRhZGF0YS4gKi9cbiAgZ2V0IHRhZ3NXaXRoTWV0YWRhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVnaXN0ZXJlZFRhZ3M7XG4gIH1cblxuICAvKipcbiAgICogQ29uc3RydWN0cyBhIG5ldyBUYWdWYWx1ZVdpdGhNZXRhZGF0YSB1c2luZyB0YWdWYWx1ZSBhbmQgdGFnTWV0YWRhdGEuXG4gICAqIEZvciBiYWNrd2FyZHMtY29tcGF0aWJpbGl0eSB0aGlzIG1ldGhvZCBzdGlsbCBwcm9kdWNlcyBwcm9wYWdhdGluZyBUYWdzXG4gICAqIChVTkxJTUlURURfUFJPUEFHQVRJT04pIGlmIHRhZ01ldGFkYXRhIGlzIG5vdCBwcm92aWRlZCBvciBtaXNzaW5nLlxuICAgKi9cbiAgcHJpdmF0ZSBnZXRWYWx1ZVdpdGhNZXRhZGF0YShcbiAgICB0YWdWYWx1ZTogVGFnVmFsdWUsXG4gICAgdGFnTWV0YWRhdGE/OiBUYWdNZXRhZGF0YVxuICApOiBUYWdWYWx1ZVdpdGhNZXRhZGF0YSB7XG4gICAgaWYgKHRhZ01ldGFkYXRhKSB7XG4gICAgICByZXR1cm4geyB0YWdWYWx1ZSwgdGFnTWV0YWRhdGEgfTtcbiAgICB9XG4gICAgcmV0dXJuIHsgdGFnVmFsdWUsIHRhZ01ldGFkYXRhOiBVTkxJTUlURURfUFJPUEFHQVRJT05fTUQgfTtcbiAgfVxufVxuIl19
//# sourceMappingURL=data:application/json;charset=utf-8;base64,