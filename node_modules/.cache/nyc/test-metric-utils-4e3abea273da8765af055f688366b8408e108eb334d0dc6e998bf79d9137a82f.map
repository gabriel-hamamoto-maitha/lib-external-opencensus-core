{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-metric-utils.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-metric-utils.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,iCAAiC;AAEjC,gCAA+C;AAC/C,uDAAmE;AACnE,8CAK4B;AAE5B,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;IAC1B,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;QACjD,MAAM,gBAAgB,GAAG,kBAAkB,CAAC;QAC5C,MAAM,OAAO,GAAY;YACvB,IAAI,EAAE,cAAc;YACpB,IAAI,EAAE,mBAAW,CAAC,MAAM;YACxB,IAAI,EAAE,mBAAW,CAAC,IAAI;SACvB,CAAC;QACF,MAAM,OAAO,GAAG,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC;QAC7D,MAAM,IAAI,GAAG,IAAI,cAAQ,CACvB,gBAAgB,EAChB,OAAO,EACP,uBAAe,CAAC,UAAU,EAC1B,OAAO,EACP,gBAAgB,CACjB,CAAC;QACF,MAAM,gBAAgB,GAAG,iBAAW,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;QAElE,MAAM,CAAC,EAAE,CAAC,gBAAgB,CAAC,CAAC;QAC5B,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QACrD,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,EAAE,mBAAW,CAAC,IAAI,CAAC,CAAC;QAC5D,MAAM,CAAC,WAAW,CAChB,gBAAgB,CAAC,IAAI,EACrB,4BAAoB,CAAC,YAAY,CAClC,CAAC;QACF,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,WAAW,EAAE,gBAAgB,CAAC,CAAC;QACnE,MAAM,CAAC,eAAe,CAAC,gBAAgB,CAAC,SAAS,EAAE;YACjD,EAAE,GAAG,EAAE,UAAU,EAAE,WAAW,EAAE,EAAE,EAAE;YACpC,EAAE,GAAG,EAAE,UAAU,EAAE,WAAW,EAAE,EAAE,EAAE;SACrC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;QACnD,MAAM,IAAI,GAAG;YACX,EAAE,KAAK,EAAE,QAAQ,EAAE;YACnB,EAAE,KAAK,EAAE,QAAQ,EAAE;YACnB,EAAE,KAAK,EAAE,EAAE,EAAE;YACb,IAAI;SACL,CAAC;QACF,MAAM,CAAC,eAAe,CAAC,iBAAW,CAAC,sBAAsB,CAAC,IAAI,CAAC,EAAE;YAC/D,EAAE,KAAK,EAAE,QAAQ,EAAE;YACnB,EAAE,KAAK,EAAE,QAAQ,EAAE;YACnB,EAAE,KAAK,EAAE,EAAE,EAAE;YACb,EAAE,KAAK,EAAE,IAAI,EAAE;SAChB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+DAA+D,EAAE,GAAG,EAAE;QACvE,MAAM,IAAI,GAAG,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QACrD,MAAM,CAAC,eAAe,CAAC,iBAAW,CAAC,sBAAsB,CAAC,IAAI,CAAC,EAAE;YAC/D,EAAE,KAAK,EAAE,QAAQ,EAAE;YACnB,EAAE,KAAK,EAAE,IAAI,EAAE;YACf,EAAE,KAAK,EAAE,IAAI,EAAE;YACf,EAAE,KAAK,EAAE,IAAI,EAAE;SAChB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\n\nimport { BaseView, MetricUtils } from '../src';\nimport { MetricDescriptorType } from '../src/metrics/export/types';\nimport {\n  AggregationType,\n  Measure,\n  MeasureType,\n  MeasureUnit,\n} from '../src/stats/types';\n\ndescribe('MetricUtil', () => {\n  it('should convert view to MetricDescriptor', () => {\n    const VIEW_DESCRIPTION = 'view description';\n    const measure: Measure = {\n      name: 'Test Measure',\n      type: MeasureType.DOUBLE,\n      unit: MeasureUnit.UNIT,\n    };\n    const tagKeys = [{ name: 'testKey1' }, { name: 'testKey2' }];\n    const view = new BaseView(\n      'test/view/name',\n      measure,\n      AggregationType.LAST_VALUE,\n      tagKeys,\n      VIEW_DESCRIPTION\n    );\n    const metricDescriptor = MetricUtils.viewToMetricDescriptor(view);\n\n    assert.ok(metricDescriptor);\n    assert.strictEqual(metricDescriptor.name, view.name);\n    assert.strictEqual(metricDescriptor.unit, MeasureUnit.UNIT);\n    assert.strictEqual(\n      metricDescriptor.type,\n      MetricDescriptorType.GAUGE_DOUBLE\n    );\n    assert.strictEqual(metricDescriptor.description, VIEW_DESCRIPTION);\n    assert.deepStrictEqual(metricDescriptor.labelKeys, [\n      { key: 'testKey1', description: '' },\n      { key: 'testKey2', description: '' },\n    ]);\n  });\n\n  it('should convert tag values to label values', () => {\n    const tags = [\n      { value: 'value1' },\n      { value: 'value2' },\n      { value: '' },\n      null,\n    ];\n    assert.deepStrictEqual(MetricUtils.tagValuesToLabelValues(tags), [\n      { value: 'value1' },\n      { value: 'value2' },\n      { value: '' },\n      { value: null },\n    ]);\n  });\n\n  it('should convert tag values to label values with null tag value', () => {\n    const tags = [{ value: 'value1' }, null, null, null];\n    assert.deepStrictEqual(MetricUtils.tagValuesToLabelValues(tags), [\n      { value: 'value1' },\n      { value: null },\n      { value: null },\n      { value: null },\n    ]);\n  });\n});\n"]}