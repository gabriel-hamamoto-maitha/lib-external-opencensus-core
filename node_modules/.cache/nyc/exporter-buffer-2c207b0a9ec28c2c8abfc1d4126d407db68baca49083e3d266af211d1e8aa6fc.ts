"use strict";/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_iod0gxpyx(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/exporters/exporter-buffer.ts";var hash="d44d378b5ec23088ca451e1ac9001f795319141f";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/exporters/exporter-buffer.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:0},end:{line:18,column:32}},"2":{start:{line:19,column:15},end:{line:19,column:50}},"3":{start:{line:20,column:28},end:{line:20,column:31}},"4":{start:{line:21,column:31},end:{line:21,column:36}},"5":{start:{line:31,column:8},end:{line:31,column:34}},"6":{start:{line:33,column:8},end:{line:33,column:45}},"7":{start:{line:35,column:8},end:{line:35,column:24}},"8":{start:{line:36,column:8},end:{line:36,column:33}},"9":{start:{line:37,column:8},end:{line:37,column:55}},"10":{start:{line:38,column:8},end:{line:40,column:40}},"11":{start:{line:41,column:8},end:{line:43,column:43}},"12":{start:{line:44,column:8},end:{line:44,column:20}},"13":{start:{line:51,column:8},end:{line:51,column:37}},"14":{start:{line:52,column:8},end:{line:52,column:20}},"15":{start:{line:55,column:8},end:{line:55,column:31}},"16":{start:{line:58,column:8},end:{line:58,column:26}},"17":{start:{line:65,column:8},end:{line:65,column:30}},"18":{start:{line:66,column:8},end:{line:66,column:60}},"19":{start:{line:67,column:8},end:{line:69,column:9}},"20":{start:{line:68,column:12},end:{line:68,column:25}},"21":{start:{line:70,column:8},end:{line:75,column:9}},"22":{start:{line:71,column:12},end:{line:71,column:38}},"23":{start:{line:74,column:12},end:{line:74,column:36}},"24":{start:{line:76,column:8},end:{line:76,column:20}},"25":{start:{line:80,column:8},end:{line:80,column:59}},"26":{start:{line:81,column:8},end:{line:81,column:33}},"27":{start:{line:85,column:8},end:{line:85,column:57}},"28":{start:{line:86,column:8},end:{line:86,column:44}},"29":{start:{line:87,column:22},end:{line:99,column:30}},"30":{start:{line:88,column:12},end:{line:90,column:13}},"31":{start:{line:89,column:16},end:{line:89,column:23}},"32":{start:{line:91,column:12},end:{line:98,column:13}},"33":{start:{line:92,column:16},end:{line:92,column:42}},"34":{start:{line:93,column:16},end:{line:93,column:40}},"35":{start:{line:96,column:16},end:{line:96,column:53}},"36":{start:{line:97,column:16},end:{line:97,column:29}},"37":{start:{line:101,column:8},end:{line:101,column:22}},"38":{start:{line:105,column:8},end:{line:105,column:42}},"39":{start:{line:106,column:8},end:{line:106,column:24}},"40":{start:{line:107,column:8},end:{line:107,column:20}},"41":{start:{line:110,column:0},end:{line:110,column:40}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:29,column:4},end:{line:29,column:5}},loc:{start:{line:29,column:34},end:{line:45,column:5}},line:29},"1":{name:"(anonymous_1)",decl:{start:{line:50,column:4},end:{line:50,column:5}},loc:{start:{line:50,column:30},end:{line:53,column:5}},line:50},"2":{name:"(anonymous_2)",decl:{start:{line:54,column:4},end:{line:54,column:5}},loc:{start:{line:54,column:20},end:{line:56,column:5}},line:54},"3":{name:"(anonymous_3)",decl:{start:{line:57,column:4},end:{line:57,column:5}},loc:{start:{line:57,column:15},end:{line:59,column:5}},line:57},"4":{name:"(anonymous_4)",decl:{start:{line:64,column:4},end:{line:64,column:5}},loc:{start:{line:64,column:22},end:{line:77,column:5}},line:64},"5":{name:"(anonymous_5)",decl:{start:{line:79,column:4},end:{line:79,column:5}},loc:{start:{line:79,column:25},end:{line:82,column:5}},line:79},"6":{name:"(anonymous_6)",decl:{start:{line:84,column:4},end:{line:84,column:5}},loc:{start:{line:84,column:23},end:{line:102,column:5}},line:84},"7":{name:"(anonymous_7)",decl:{start:{line:87,column:33},end:{line:87,column:34}},loc:{start:{line:87,column:39},end:{line:99,column:9}},line:87},"8":{name:"(anonymous_8)",decl:{start:{line:104,column:4},end:{line:104,column:5}},loc:{start:{line:104,column:12},end:{line:108,column:5}},line:104}},branchMap:{"0":{loc:{start:{line:37,column:22},end:{line:37,column:54}},type:"binary-expr",locations:[{start:{line:37,column:22},end:{line:37,column:35}},{start:{line:37,column:39},end:{line:37,column:54}}],line:37},"1":{loc:{start:{line:38,column:26},end:{line:40,column:39}},type:"cond-expr",locations:[{start:{line:39,column:14},end:{line:39,column:33}},{start:{line:40,column:14},end:{line:40,column:39}}],line:38},"2":{loc:{start:{line:41,column:29},end:{line:43,column:42}},type:"cond-expr",locations:[{start:{line:42,column:14},end:{line:42,column:36}},{start:{line:43,column:14},end:{line:43,column:42}}],line:41},"3":{loc:{start:{line:67,column:8},end:{line:69,column:9}},type:"if",locations:[{start:{line:67,column:8},end:{line:69,column:9}},{start:{line:67,column:8},end:{line:69,column:9}}],line:67},"4":{loc:{start:{line:70,column:8},end:{line:75,column:9}},type:"if",locations:[{start:{line:70,column:8},end:{line:75,column:9}},{start:{line:70,column:8},end:{line:75,column:9}}],line:70},"5":{loc:{start:{line:88,column:12},end:{line:90,column:13}},type:"if",locations:[{start:{line:88,column:12},end:{line:90,column:13}},{start:{line:88,column:12},end:{line:90,column:13}}],line:88},"6":{loc:{start:{line:91,column:12},end:{line:98,column:13}},type:"if",locations:[{start:{line:91,column:12},end:{line:98,column:13}},{start:{line:91,column:12},end:{line:98,column:13}}],line:91}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/exporters/exporter-buffer.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/exporters/exporter-buffer.ts"],names:[],mappings:"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",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as logger from '../common/console-logger';\nimport * as loggerTypes from '../common/types';\nimport * as configTypes from '../trace/config/types';\nimport * as modelTypes from '../trace/model/types';\nimport * as types from './types';\n\nconst DEFAULT_BUFFER_SIZE = 100;\nconst DEFAULT_BUFFER_TIMEOUT = 20000;\n\n/** Controls the sending of traces to exporters. */\nexport class ExporterBuffer {\n  /** The service to send the collected spans. */\n  private exporter: types.Exporter;\n  /** Maximum size of a buffer. */\n  private bufferSize: number;\n  /** Max time for a buffer can wait before being sent */\n  private bufferTimeout: number;\n  /** Manage when the buffer timeout needs to be reseted */\n  private resetTimeout = false;\n  /** Indicates when the buffer timeout is running */\n  private bufferTimeoutInProgress = false;\n  /** An object to log information to */\n  private logger: loggerTypes.Logger;\n  /** Trace queue of a buffer */\n  private queue: modelTypes.Span[] = [];\n\n  /**\n   * Constructs a new Buffer instance.\n   * @param exporter The service to send the collected spans.\n   * @param config A buffer configuration object to create a buffer.\n   */\n  constructor(exporter: types.Exporter, config: configTypes.BufferConfig) {\n    this.exporter = exporter;\n    this.logger = config.logger || logger.logger();\n    this.bufferSize = isNaN(Number(config.bufferSize))\n      ? DEFAULT_BUFFER_SIZE\n      : Number(config.bufferSize);\n    this.bufferTimeout = isNaN(Number(config.bufferTimeout))\n      ? DEFAULT_BUFFER_TIMEOUT\n      : Number(config.bufferTimeout);\n    return this;\n  }\n\n  /**\n   * Set the buffer size value.\n   * @param bufferSize The new buffer size.\n   */\n  setBufferSize(bufferSize: number) {\n    this.bufferSize = bufferSize;\n    return this;\n  }\n\n  getBufferSize(): number {\n    return this.bufferSize;\n  }\n\n  getQueue(): modelTypes.Span[] {\n    return this.queue;\n  }\n\n  /**\n   * Add a span in the buffer.\n   * @param span Span to be added in the buffer.\n   */\n  addToBuffer(span: modelTypes.Span) {\n    this.queue.push(span);\n    this.logger.debug('ExporterBuffer: added new span');\n\n    if (this.queue.length > this.bufferSize) {\n      this.flush();\n    }\n\n    if (this.bufferTimeoutInProgress) {\n      this.resetBufferTimeout();\n    } else {\n      this.setBufferTimeout();\n    }\n\n    return this;\n  }\n\n  /** Reset the buffer timeout */\n  private resetBufferTimeout() {\n    this.logger.debug('ExporterBuffer: reset timeout');\n    this.resetTimeout = true;\n  }\n\n  /** Start the buffer timeout, when finished calls flush method */\n  private setBufferTimeout() {\n    this.logger.debug('ExporterBuffer: set timeout');\n    this.bufferTimeoutInProgress = true;\n\n    const timer = setTimeout(() => {\n      if (this.queue.length === 0) {\n        return;\n      }\n\n      if (this.resetTimeout) {\n        this.resetTimeout = false;\n        this.setBufferTimeout();\n      } else {\n        this.bufferTimeoutInProgress = false;\n        this.flush();\n      }\n    }, this.bufferTimeout);\n    // Don't let this timer be the only thing keeping the process alive\n    timer.unref();\n  }\n\n  /** Send the trace queue to all exporters */\n  private flush() {\n    this.exporter.publish(this.queue);\n    this.queue = [];\n    return this;\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"d44d378b5ec23088ca451e1ac9001f795319141f"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_iod0gxpyx=function(){return actualCoverage;};}return actualCoverage;}cov_iod0gxpyx();cov_iod0gxpyx().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_iod0gxpyx().s[1]++;exports.ExporterBuffer=void 0;const logger=(cov_iod0gxpyx().s[2]++,require("../common/console-logger"));const DEFAULT_BUFFER_SIZE=(cov_iod0gxpyx().s[3]++,100);const DEFAULT_BUFFER_TIMEOUT=(cov_iod0gxpyx().s[4]++,20000);/** Controls the sending of traces to exporters. */class ExporterBuffer{/**
     * Constructs a new Buffer instance.
     * @param exporter The service to send the collected spans.
     * @param config A buffer configuration object to create a buffer.
     */constructor(exporter,config){cov_iod0gxpyx().f[0]++;cov_iod0gxpyx().s[5]++;/** Manage when the buffer timeout needs to be reseted */this.resetTimeout=false;/** Indicates when the buffer timeout is running */cov_iod0gxpyx().s[6]++;this.bufferTimeoutInProgress=false;/** Trace queue of a buffer */cov_iod0gxpyx().s[7]++;this.queue=[];cov_iod0gxpyx().s[8]++;this.exporter=exporter;cov_iod0gxpyx().s[9]++;this.logger=(cov_iod0gxpyx().b[0][0]++,config.logger)||(cov_iod0gxpyx().b[0][1]++,logger.logger());cov_iod0gxpyx().s[10]++;this.bufferSize=isNaN(Number(config.bufferSize))?(cov_iod0gxpyx().b[1][0]++,DEFAULT_BUFFER_SIZE):(cov_iod0gxpyx().b[1][1]++,Number(config.bufferSize));cov_iod0gxpyx().s[11]++;this.bufferTimeout=isNaN(Number(config.bufferTimeout))?(cov_iod0gxpyx().b[2][0]++,DEFAULT_BUFFER_TIMEOUT):(cov_iod0gxpyx().b[2][1]++,Number(config.bufferTimeout));cov_iod0gxpyx().s[12]++;return this;}/**
     * Set the buffer size value.
     * @param bufferSize The new buffer size.
     */setBufferSize(bufferSize){cov_iod0gxpyx().f[1]++;cov_iod0gxpyx().s[13]++;this.bufferSize=bufferSize;cov_iod0gxpyx().s[14]++;return this;}getBufferSize(){cov_iod0gxpyx().f[2]++;cov_iod0gxpyx().s[15]++;return this.bufferSize;}getQueue(){cov_iod0gxpyx().f[3]++;cov_iod0gxpyx().s[16]++;return this.queue;}/**
     * Add a span in the buffer.
     * @param span Span to be added in the buffer.
     */addToBuffer(span){cov_iod0gxpyx().f[4]++;cov_iod0gxpyx().s[17]++;this.queue.push(span);cov_iod0gxpyx().s[18]++;this.logger.debug('ExporterBuffer: added new span');cov_iod0gxpyx().s[19]++;if(this.queue.length>this.bufferSize){cov_iod0gxpyx().b[3][0]++;cov_iod0gxpyx().s[20]++;this.flush();}else{cov_iod0gxpyx().b[3][1]++;}cov_iod0gxpyx().s[21]++;if(this.bufferTimeoutInProgress){cov_iod0gxpyx().b[4][0]++;cov_iod0gxpyx().s[22]++;this.resetBufferTimeout();}else{cov_iod0gxpyx().b[4][1]++;cov_iod0gxpyx().s[23]++;this.setBufferTimeout();}cov_iod0gxpyx().s[24]++;return this;}/** Reset the buffer timeout */resetBufferTimeout(){cov_iod0gxpyx().f[5]++;cov_iod0gxpyx().s[25]++;this.logger.debug('ExporterBuffer: reset timeout');cov_iod0gxpyx().s[26]++;this.resetTimeout=true;}/** Start the buffer timeout, when finished calls flush method */setBufferTimeout(){cov_iod0gxpyx().f[6]++;cov_iod0gxpyx().s[27]++;this.logger.debug('ExporterBuffer: set timeout');cov_iod0gxpyx().s[28]++;this.bufferTimeoutInProgress=true;const timer=(cov_iod0gxpyx().s[29]++,setTimeout(()=>{cov_iod0gxpyx().f[7]++;cov_iod0gxpyx().s[30]++;if(this.queue.length===0){cov_iod0gxpyx().b[5][0]++;cov_iod0gxpyx().s[31]++;return;}else{cov_iod0gxpyx().b[5][1]++;}cov_iod0gxpyx().s[32]++;if(this.resetTimeout){cov_iod0gxpyx().b[6][0]++;cov_iod0gxpyx().s[33]++;this.resetTimeout=false;cov_iod0gxpyx().s[34]++;this.setBufferTimeout();}else{cov_iod0gxpyx().b[6][1]++;cov_iod0gxpyx().s[35]++;this.bufferTimeoutInProgress=false;cov_iod0gxpyx().s[36]++;this.flush();}},this.bufferTimeout));// Don't let this timer be the only thing keeping the process alive
cov_iod0gxpyx().s[37]++;timer.unref();}/** Send the trace queue to all exporters */flush(){cov_iod0gxpyx().f[8]++;cov_iod0gxpyx().s[38]++;this.exporter.publish(this.queue);cov_iod0gxpyx().s[39]++;this.queue=[];cov_iod0gxpyx().s[40]++;return this;}}cov_iod0gxpyx().s[41]++;exports.ExporterBuffer=ExporterBuffer;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,