{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/no-record/no-record-span.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/no-record/no-record-span.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { noopLogger } from '../../../common/noop-logger';\nimport { Logger } from '../../../common/types';\nimport { randomSpanId } from '../../../internal/util';\nimport * as configTypes from '../../config/types';\nimport * as types from '../types';\n\nconst STATUS_OK = {\n  code: types.CanonicalCode.OK,\n};\n\n/** Implementation for the SpanBase class that does not record trace events. */\nexport class NoRecordSpan implements types.Span {\n  /** Indicates if this span was started */\n  private startedLocal = false;\n  /** Indicates if this span was ended */\n  private endedLocal = false;\n  /** The Span ID of this span */\n  readonly id: string;\n  /** A tracer object */\n  readonly tracer: types.TracerBase;\n  /** An object to log information to */\n  logger: Logger = noopLogger;\n  /** A set of attributes, each in the format [KEY]:[VALUE] */\n  attributes: types.Attributes = {};\n  /** A text annotation with a set of attributes. */\n  annotations: types.Annotation[] = [];\n  /** An event describing a message sent/received between Spans */\n  messageEvents: types.MessageEvent[] = [];\n  /** Pointers from the current span to another span */\n  links: types.Link[] = [];\n  /** If the parent span is in another process. */\n  remoteParent = false;\n  /** This span's root span.  If it's a root span, it will point to this */\n  root: NoRecordSpan;\n  /** This span's parent. If it's a root span, must be empty */\n  parentSpan?: NoRecordSpan;\n  /** The resource name of the span */\n  name = 'no-record';\n  /** Kind of span. */\n  kind: types.SpanKind = types.SpanKind.UNSPECIFIED;\n  /** A final status for this span */\n  status: types.Status = STATUS_OK;\n  /** Trace Parameters */\n  activeTraceParams: configTypes.TraceParams = {};\n\n  /** The number of dropped attributes. */\n  droppedAttributesCount = 0;\n  /** The number of dropped links. */\n  droppedLinksCount = 0;\n  /** The number of dropped annotations. */\n  droppedAnnotationsCount = 0;\n  /** The number of dropped message events. */\n  droppedMessageEventsCount = 0;\n\n  /** Constructs a new SpanBaseModel instance. */\n  constructor(tracer: types.TracerBase, parent?: NoRecordSpan) {\n    this.tracer = tracer;\n    this.id = randomSpanId();\n    if (parent) {\n      this.root = parent.root;\n      this.parentSpan = parent;\n    } else {\n      this.root = this;\n    }\n    this.logger = (this.root && this.root.logger) || this.logger;\n  }\n\n  /** Returns whether a span is root or not. */\n  isRootSpan(): boolean {\n    return false;\n  }\n\n  /** Gets trace id of no-record span. */\n  get traceId(): string {\n    return '';\n  }\n\n  /** Gets the trace state */\n  get traceState(): types.TraceState | undefined {\n    return undefined;\n  }\n\n  /** Gets the ID of the parent span. */\n  get parentSpanId(): string {\n    if (!this.parentSpan) {\n      return '';\n    }\n    return this.parentSpan.id;\n  }\n\n  /** Indicates if span was started. */\n  get started(): boolean {\n    return this.startedLocal;\n  }\n\n  /** Indicates if span was ended. */\n  get ended(): boolean {\n    return this.endedLocal;\n  }\n\n  /** No-op implementation of this method. */\n  get startTime(): Date {\n    return new Date();\n  }\n\n  /** No-op implementation of this method. */\n  allDescendants(): types.Span[] {\n    return [];\n  }\n\n  /** No-op implementation of this method. */\n  get spans(): types.Span[] {\n    return [];\n  }\n\n  /** No-op implementation of this method. */\n  get numberOfChildren(): number {\n    return 0;\n  }\n\n  /** No-op implementation of this method. */\n  get endTime(): Date {\n    return new Date();\n  }\n\n  /** Gives the TraceContext of the span. */\n  get spanContext(): types.SpanContext {\n    return {\n      traceId: this.traceId,\n      spanId: this.id,\n      options: 0,\n      traceState: this.traceState,\n    };\n  }\n\n  /** No-op implementation of this method. */\n  get duration(): number {\n    return 0;\n  }\n\n  /** No-op implementation of this method. */\n  addAttribute(key: string, value: string | number | boolean | object) {}\n\n  /** No-op implementation of this method. */\n  addAnnotation(\n    description: string,\n    attributes?: types.Attributes,\n    timestamp = 0\n  ) {}\n\n  /** No-op implementation of this method. */\n  addLink(\n    traceId: string,\n    spanId: string,\n    type: types.LinkType,\n    attributes?: types.Attributes\n  ) {}\n\n  /** No-op implementation of this method. */\n  addMessageEvent(\n    type: types.MessageEventType,\n    id: number,\n    timestamp = 0,\n    uncompressedSize?: number,\n    compressedSize?: number\n  ) {}\n\n  /** No-op implementation of this method. */\n  setStatus(code: types.CanonicalCode, message?: string) {}\n\n  /** No-op implementation of this method. */\n  start() {\n    this.startedLocal = true;\n  }\n\n  /** No-op implementation of this method. */\n  end(): void {\n    this.startedLocal = false;\n    this.endedLocal = true;\n  }\n\n  /** No-op implementation of this method. */\n  truncate() {}\n\n  /**\n   * Starts a new no record child span in the no record root span.\n   * @param [options] A SpanOptions object to start a child span.\n   */\n  startChildSpan(options?: types.SpanOptions): types.Span {\n    const noRecordChild = new NoRecordSpan(this.tracer, this);\n    if (options && options.name) noRecordChild.name = options.name;\n    if (options && options.kind) noRecordChild.kind = options.kind;\n    noRecordChild.start();\n    return noRecordChild;\n  }\n}\n"]}