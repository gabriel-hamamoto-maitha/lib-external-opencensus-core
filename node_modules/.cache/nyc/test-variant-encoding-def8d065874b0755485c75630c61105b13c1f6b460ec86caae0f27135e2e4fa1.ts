"use strict";/**
 * Copyright 2019, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_20mg8544tr(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-variant-encoding.ts";var hash="635d50ab72fbbf89708db53aaa8c3b6a160cc549";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-variant-encoding.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:15},end:{line:18,column:32}},"2":{start:{line:19,column:27},end:{line:19,column:78}},"3":{start:{line:20,column:18},end:{line:31,column:1}},"4":{start:{line:33,column:4},end:{line:33,column:45}},"5":{start:{line:35,column:0},end:{line:55,column:3}},"6":{start:{line:36,column:4},end:{line:39,column:7}},"7":{start:{line:37,column:25},end:{line:37,column:37}},"8":{start:{line:38,column:8},end:{line:38,column:86}},"9":{start:{line:40,column:4},end:{line:47,column:7}},"10":{start:{line:41,column:20},end:{line:41,column:23}},"11":{start:{line:42,column:30},end:{line:42,column:42}},"12":{start:{line:43,column:24},end:{line:43,column:60}},"13":{start:{line:44,column:8},end:{line:44,column:55}},"14":{start:{line:45,column:21},end:{line:45,column:41}},"15":{start:{line:46,column:8},end:{line:46,column:74}},"16":{start:{line:48,column:4},end:{line:54,column:5}},"17":{start:{line:49,column:8},end:{line:53,column:11}},"18":{start:{line:50,column:28},end:{line:50,column:69}},"19":{start:{line:51,column:25},end:{line:51,column:45}},"20":{start:{line:52,column:12},end:{line:52,column:83}}},fnMap:{"0":{name:"randint",decl:{start:{line:32,column:9},end:{line:32,column:16}},loc:{start:{line:32,column:24},end:{line:34,column:1}},line:32},"1":{name:"(anonymous_1)",decl:{start:{line:35,column:29},end:{line:35,column:30}},loc:{start:{line:35,column:35},end:{line:55,column:1}},line:35},"2":{name:"(anonymous_2)",decl:{start:{line:36,column:36},end:{line:36,column:37}},loc:{start:{line:36,column:42},end:{line:39,column:5}},line:36},"3":{name:"(anonymous_3)",decl:{start:{line:40,column:46},end:{line:40,column:47}},loc:{start:{line:40,column:52},end:{line:47,column:5}},line:40},"4":{name:"(anonymous_4)",decl:{start:{line:49,column:61},end:{line:49,column:62}},loc:{start:{line:49,column:67},end:{line:53,column:9}},line:49}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-variant-encoding.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-variant-encoding.ts"],names:[],mappings:";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,iCAAiC;AACjC,+EAGkD;AAElD,MAAM,SAAS,GAAG;IAChB,CAAC;IACD,CAAC;IACD,EAAE;IACF,GAAG;IACH,IAAI;IACJ,KAAK;IACL,MAAM;IACN,OAAO;IACP,QAAQ;IACR,SAAS;CACV,CAAC;AAEF,SAAS,OAAO,CAAC,KAAa;IAC5B,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC;AAC3C,CAAC;AAED,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAChC,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACnC,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;QAC9B,MAAM,CAAC,eAAe,CAAC,+BAAY,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;QAC7C,MAAM,GAAG,GAAG,GAAG,CAAC;QAChB,MAAM,aAAa,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,WAAW;QAE/C,MAAM,OAAO,GAAG,+BAAY,CAAC,GAAG,CAAC,CAAC;QAClC,MAAM,CAAC,eAAe,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;QAC/C,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAClC,MAAM,CAAC,WAAW,CAAC,+BAAY,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;QAChC,EAAE,CAAC,4BAA4B,QAAQ,YAAY,EAAE,GAAG,EAAE;YACxD,MAAM,OAAO,GAAG,+BAAY,CAAC,QAAQ,CAAC,CAAC;YACvC,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAClC,MAAM,CAAC,WAAW,CAAC,+BAAY,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;KACJ;AACH,CAAC,CAAC,CAAC",sourcesContent:["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport {\n  DecodeVarint,\n  EncodeVarint,\n} from '../src/tags/propagation/variant-encoding';\n\nconst testCases = [\n  0,\n  1,\n  10,\n  100,\n  1000,\n  10000,\n  100000,\n  1000000,\n  10000000,\n  100000000,\n];\n\nfunction randint(range: number) {\n  return Math.floor(Math.random() * range);\n}\n\ndescribe('variant encoding', () => {\n  it('should encode single byte', () => {\n    const expected = randint(127);\n    assert.deepStrictEqual(EncodeVarint(expected), [expected]);\n  });\n\n  it('should encode/decode multiple bytes', () => {\n    const num = 300;\n    const expectedBytes = [0xac, 0x02]; // [172, 2]\n\n    const variant = EncodeVarint(num);\n    assert.deepStrictEqual(variant, expectedBytes);\n    const buff = Buffer.from(variant);\n    assert.strictEqual(DecodeVarint(buff, 0), num);\n  });\n\n  for (const testCase of testCases) {\n    it(`should encode and decode ${testCase} correctly`, () => {\n      const variant = EncodeVarint(testCase);\n      const buff = Buffer.from(variant);\n      assert.strictEqual(DecodeVarint(buff, 0), testCase);\n    });\n  }\n});\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"635d50ab72fbbf89708db53aaa8c3b6a160cc549"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_20mg8544tr=function(){return actualCoverage;};}return actualCoverage;}cov_20mg8544tr();cov_20mg8544tr().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const assert=(cov_20mg8544tr().s[1]++,require("assert"));const variant_encoding_1=(cov_20mg8544tr().s[2]++,require("../src/tags/propagation/variant-encoding"));const testCases=(cov_20mg8544tr().s[3]++,[0,1,10,100,1000,10000,100000,1000000,10000000,100000000]);function randint(range){cov_20mg8544tr().f[0]++;cov_20mg8544tr().s[4]++;return Math.floor(Math.random()*range);}cov_20mg8544tr().s[5]++;describe('variant encoding',()=>{cov_20mg8544tr().f[1]++;cov_20mg8544tr().s[6]++;it('should encode single byte',()=>{cov_20mg8544tr().f[2]++;const expected=(cov_20mg8544tr().s[7]++,randint(127));cov_20mg8544tr().s[8]++;assert.deepStrictEqual(variant_encoding_1.EncodeVarint(expected),[expected]);});cov_20mg8544tr().s[9]++;it('should encode/decode multiple bytes',()=>{cov_20mg8544tr().f[3]++;const num=(cov_20mg8544tr().s[10]++,300);const expectedBytes=(cov_20mg8544tr().s[11]++,[0xac,0x02]);// [172, 2]
const variant=(cov_20mg8544tr().s[12]++,variant_encoding_1.EncodeVarint(num));cov_20mg8544tr().s[13]++;assert.deepStrictEqual(variant,expectedBytes);const buff=(cov_20mg8544tr().s[14]++,Buffer.from(variant));cov_20mg8544tr().s[15]++;assert.strictEqual(variant_encoding_1.DecodeVarint(buff,0),num);});cov_20mg8544tr().s[16]++;for(const testCase of testCases){cov_20mg8544tr().s[17]++;it(`should encode and decode ${testCase} correctly`,()=>{cov_20mg8544tr().f[4]++;const variant=(cov_20mg8544tr().s[18]++,variant_encoding_1.EncodeVarint(testCase));const buff=(cov_20mg8544tr().s[19]++,Buffer.from(variant));cov_20mg8544tr().s[20]++;assert.strictEqual(variant_encoding_1.DecodeVarint(buff,0),testCase);});}});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3VzZXJtYWl0aGEvdHJhZGVtYXN0ZXIvbGlicy9saWItZXh0ZXJuYWwtb3BlbmNlbnN1cy1ub2RlL3Rlc3QvdGVzdC12YXJpYW50LWVuY29kaW5nLnRzIiwic291cmNlcyI6WyIvVXNlcnMvdXNlcm1haXRoYS90cmFkZW1hc3Rlci9saWJzL2xpYi1leHRlcm5hbC1vcGVuY2Vuc3VzLW5vZGUvdGVzdC90ZXN0LXZhcmlhbnQtZW5jb2RpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7OztHQWNHOztBQUVILGlDQUFpQztBQUNqQywrRUFHa0Q7QUFFbEQsTUFBTSxTQUFTLEdBQUc7SUFDaEIsQ0FBQztJQUNELENBQUM7SUFDRCxFQUFFO0lBQ0YsR0FBRztJQUNILElBQUk7SUFDSixLQUFLO0lBQ0wsTUFBTTtJQUNOLE9BQU87SUFDUCxRQUFRO0lBQ1IsU0FBUztDQUNWLENBQUM7QUFFRixTQUFTLE9BQU8sQ0FBQyxLQUFhO0lBQzVCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUM7QUFDM0MsQ0FBQztBQUVELFFBQVEsQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLEVBQUU7SUFDaEMsRUFBRSxDQUFDLDJCQUEyQixFQUFFLEdBQUcsRUFBRTtRQUNuQyxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDOUIsTUFBTSxDQUFDLGVBQWUsQ0FBQywrQkFBWSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUM3RCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxxQ0FBcUMsRUFBRSxHQUFHLEVBQUU7UUFDN0MsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2hCLE1BQU0sYUFBYSxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsV0FBVztRQUUvQyxNQUFNLE9BQU8sR0FBRywrQkFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQy9DLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbEMsTUFBTSxDQUFDLFdBQVcsQ0FBQywrQkFBWSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNqRCxDQUFDLENBQUMsQ0FBQztJQUVILEtBQUssTUFBTSxRQUFRLElBQUksU0FBUyxFQUFFO1FBQ2hDLEVBQUUsQ0FBQyw0QkFBNEIsUUFBUSxZQUFZLEVBQUUsR0FBRyxFQUFFO1lBQ3hELE1BQU0sT0FBTyxHQUFHLCtCQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDdkMsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNsQyxNQUFNLENBQUMsV0FBVyxDQUFDLCtCQUFZLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3RELENBQUMsQ0FBQyxDQUFDO0tBQ0o7QUFDSCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTksIE9wZW5DZW5zdXMgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0ICogYXMgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7XG5pbXBvcnQge1xuICBEZWNvZGVWYXJpbnQsXG4gIEVuY29kZVZhcmludCxcbn0gZnJvbSAnLi4vc3JjL3RhZ3MvcHJvcGFnYXRpb24vdmFyaWFudC1lbmNvZGluZyc7XG5cbmNvbnN0IHRlc3RDYXNlcyA9IFtcbiAgMCxcbiAgMSxcbiAgMTAsXG4gIDEwMCxcbiAgMTAwMCxcbiAgMTAwMDAsXG4gIDEwMDAwMCxcbiAgMTAwMDAwMCxcbiAgMTAwMDAwMDAsXG4gIDEwMDAwMDAwMCxcbl07XG5cbmZ1bmN0aW9uIHJhbmRpbnQocmFuZ2U6IG51bWJlcikge1xuICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcmFuZ2UpO1xufVxuXG5kZXNjcmliZSgndmFyaWFudCBlbmNvZGluZycsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCBlbmNvZGUgc2luZ2xlIGJ5dGUnLCAoKSA9PiB7XG4gICAgY29uc3QgZXhwZWN0ZWQgPSByYW5kaW50KDEyNyk7XG4gICAgYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChFbmNvZGVWYXJpbnQoZXhwZWN0ZWQpLCBbZXhwZWN0ZWRdKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBlbmNvZGUvZGVjb2RlIG11bHRpcGxlIGJ5dGVzJywgKCkgPT4ge1xuICAgIGNvbnN0IG51bSA9IDMwMDtcbiAgICBjb25zdCBleHBlY3RlZEJ5dGVzID0gWzB4YWMsIDB4MDJdOyAvLyBbMTcyLCAyXVxuXG4gICAgY29uc3QgdmFyaWFudCA9IEVuY29kZVZhcmludChudW0pO1xuICAgIGFzc2VydC5kZWVwU3RyaWN0RXF1YWwodmFyaWFudCwgZXhwZWN0ZWRCeXRlcyk7XG4gICAgY29uc3QgYnVmZiA9IEJ1ZmZlci5mcm9tKHZhcmlhbnQpO1xuICAgIGFzc2VydC5zdHJpY3RFcXVhbChEZWNvZGVWYXJpbnQoYnVmZiwgMCksIG51bSk7XG4gIH0pO1xuXG4gIGZvciAoY29uc3QgdGVzdENhc2Ugb2YgdGVzdENhc2VzKSB7XG4gICAgaXQoYHNob3VsZCBlbmNvZGUgYW5kIGRlY29kZSAke3Rlc3RDYXNlfSBjb3JyZWN0bHlgLCAoKSA9PiB7XG4gICAgICBjb25zdCB2YXJpYW50ID0gRW5jb2RlVmFyaW50KHRlc3RDYXNlKTtcbiAgICAgIGNvbnN0IGJ1ZmYgPSBCdWZmZXIuZnJvbSh2YXJpYW50KTtcbiAgICAgIGFzc2VydC5zdHJpY3RFcXVhbChEZWNvZGVWYXJpbnQoYnVmZiwgMCksIHRlc3RDYXNlKTtcbiAgICB9KTtcbiAgfVxufSk7XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf-8;base64,