{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/tagger.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/tagger.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAGH,uCAAmC;AAEtB,QAAA,aAAa,GAAG,IAAI,gBAAM,EAAE,CAAC;AAC1C,MAAM,mBAAmB,GAAG,iBAAiB,CAAC;AAE9C,oCAAoC;AACpC,SAAgB,oBAAoB,CAAC,cAA6B;IAChE,MAAM,eAAe,GAAG,cAAc,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;IAChE,IAAI,eAAe,EAAE;QACnB,OAAO,YAAY,CAAC,eAAyB,CAAC,CAAC;KAChD;IACD,OAAO,IAAI,gBAAM,EAAE,CAAC;AACtB,CAAC;AAND,oDAMC;AAED;;;GAGG;AACH,SAAgB,oBAAoB,CAClC,cAA6B,EAC7B,IAAY;IAEZ,cAAc,CAAC,GAAG,CAAC,mBAAmB,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;AAC9D,CAAC;AALD,oDAKC;AAED;;;;;;GAMG;AACH,SAAgB,cAAc,CAC5B,cAA6B,EAC7B,IAAY,EACZ,EAAe;IAEf,MAAM,UAAU,GAAG,oBAAoB,CAAC,cAAc,CAAC,CAAC;IACxD,OAAO,cAAc,CAAC,YAAY,CAAC,GAAG,EAAE;QACtC,MAAM,UAAU,GAAG,IAAI,gBAAM,EAAE,CAAC;QAChC,KAAK,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC,IAAI,UAAU,CAAC,IAAI,EAAE;YAChD,UAAU,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;SAClC;QACD,KAAK,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE;YAC1C,UAAU,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;SAClC;QACD,oBAAoB,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC;QACjD,OAAO,EAAE,EAAE,CAAC;IACd,CAAC,CAAC,CAAC;AACL,CAAC;AAjBD,wCAiBC;AAED,qCAAqC;AACrC,SAAgB,KAAK,CAAC,cAA6B;IACjD,cAAc,CAAC,GAAG,CAAC,mBAAmB,EAAE,IAAI,gBAAM,EAAE,CAAC,CAAC;AACxD,CAAC;AAFD,sBAEC;AAED,SAAS,YAAY,CAAC,IAAY;IAChC,MAAM,QAAQ,GAAG,IAAI,gBAAM,EAAE,CAAC;IAC9B,KAAK,MAAM,CAAC,MAAM,EAAE,iBAAiB,CAAC,IAAI,IAAI,CAAC,gBAAgB,EAAE;QAC/D,QAAQ,CAAC,GAAG,CACV,MAAM,EACN,iBAAiB,CAAC,QAAQ,EAC1B,iBAAiB,CAAC,WAAW,CAC9B,CAAC;KACH;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as cls from '../internal/cls';\nimport { TagMap } from './tag-map';\n\nexport const EMPTY_TAG_MAP = new TagMap();\nconst CURRENT_TAG_MAP_KEY = 'current_tag_map';\n\n/** Gets the current tag context. */\nexport function getCurrentTagContext(contextManager: cls.Namespace): TagMap {\n  const tagsFromContext = contextManager.get(CURRENT_TAG_MAP_KEY);\n  if (tagsFromContext) {\n    return makeDeepCopy(tagsFromContext as TagMap);\n  }\n  return new TagMap();\n}\n\n/**\n * Sets the current tag context.\n * @param tags The TagMap.\n */\nexport function setCurrentTagContext(\n  contextManager: cls.Namespace,\n  tags: TagMap\n) {\n  contextManager.set(CURRENT_TAG_MAP_KEY, makeDeepCopy(tags));\n}\n\n/**\n * Enters the scope of code where the given `TagMap` is in the current context\n * (replacing the previous `TagMap`).\n * @param tags The TagMap to be set to the current context.\n * @param fn Callback function.\n * @returns The callback return.\n */\nexport function withTagContext<T>(\n  contextManager: cls.Namespace,\n  tags: TagMap,\n  fn: cls.Func<T>\n): T {\n  const oldContext = getCurrentTagContext(contextManager);\n  return contextManager.runAndReturn(() => {\n    const newContext = new TagMap();\n    for (const [tagKey, tagValue] of oldContext.tags) {\n      newContext.set(tagKey, tagValue);\n    }\n    for (const [tagKey, tagValue] of tags.tags) {\n      newContext.set(tagKey, tagValue);\n    }\n    setCurrentTagContext(contextManager, newContext);\n    return fn();\n  });\n}\n\n/** Clear the current tag context. */\nexport function clear(contextManager: cls.Namespace) {\n  contextManager.set(CURRENT_TAG_MAP_KEY, new TagMap());\n}\n\nfunction makeDeepCopy(tags: TagMap) {\n  const tagsCopy = new TagMap();\n  for (const [tagKey, valueWithMetadata] of tags.tagsWithMetadata) {\n    tagsCopy.set(\n      tagKey,\n      valueWithMetadata.tagValue,\n      valueWithMetadata.tagMetadata\n    );\n  }\n  return tagsCopy;\n}\n"]}