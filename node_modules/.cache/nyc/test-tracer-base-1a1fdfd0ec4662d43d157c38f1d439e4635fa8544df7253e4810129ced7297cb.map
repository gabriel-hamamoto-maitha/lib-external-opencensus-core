{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-tracer-base.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-tracer-base.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport * as uuid from 'uuid';\n\nimport { randomSpanId } from '../src/internal/util';\nimport { TracerConfig } from '../src/trace/config/types';\nimport { TraceParams } from '../src/trace/config/types';\nimport { NoRecordRootSpan } from '../src/trace/model/no-record/no-record-root-span';\nimport { NoRecordSpan } from '../src/trace/model/no-record/no-record-span';\nimport { Span } from '../src/trace/model/span';\nimport { CoreTracerBase } from '../src/trace/model/tracer-base';\nimport * as types from '../src/trace/model/types';\nimport { SpanEventListener } from '../src/trace/model/types';\n\nclass OnEndSpanClass implements SpanEventListener {\n  /** Counter for test use */\n  testCount = 0;\n  onStartSpan(span: Span): void {}\n  /** Happens when a span is ended */\n  onEndSpan(span: Span): void {\n    this.testCount++;\n  }\n}\n\nconst defaultConfig: TracerConfig = {\n  samplingRate: 1.0, // always sampler\n};\n\ndescribe('Tracer Base', () => {\n  const options = { name: 'test' };\n\n  /** Should create a Tracer instance */\n  describe('new Tracer()', () => {\n    it('should create a Tracer instance', () => {\n      const tracer = new CoreTracerBase();\n      assert.ok(tracer instanceof CoreTracerBase);\n    });\n  });\n\n  /** Should return a started tracer instance */\n  describe('start()', () => {\n    let tracerStarted: types.TracerBase;\n    before(() => {\n      const tracer = new CoreTracerBase();\n      assert.strictEqual(tracer.active, false);\n      tracerStarted = tracer.start(defaultConfig);\n    });\n    it('should return a tracer instance', () => {\n      assert.ok(tracerStarted instanceof CoreTracerBase);\n    });\n\n    it('the trace was started', () => {\n      assert.strictEqual(tracerStarted.active, true);\n    });\n  });\n\n  /** Should return an OnEndSpanEventListener list */\n  describe('registerSpanEventListener() / get eventListeners()', () => {\n    let tracer: types.TracerBase, onEndSpan: OnEndSpanClass;\n    before(() => {\n      tracer = new CoreTracerBase();\n      onEndSpan = new OnEndSpanClass();\n      tracer.registerSpanEventListener(onEndSpan);\n    });\n\n    it('should register a new OnEndSpanEventListener on listeners list', () => {\n      const listener = tracer.eventListeners[0];\n      assert.strictEqual(tracer.eventListeners.length, 1);\n      assert.strictEqual(listener, onEndSpan);\n    });\n\n    it('should return an OnEndSpanEventListener list', () => {\n      for (const listener of tracer.eventListeners) {\n        assert.ok(listener instanceof OnEndSpanClass);\n      }\n    });\n  });\n\n  /** Should unregister a OnEndSpanEventlistener */\n  describe('unregisterSpanEventListener()', () => {\n    let tracer: types.TracerBase, onEndSpan: OnEndSpanClass;\n    before(() => {\n      tracer = new CoreTracerBase();\n      onEndSpan = new OnEndSpanClass();\n      tracer.registerSpanEventListener(onEndSpan);\n    });\n\n    it('should register a new OnEndSpanEventListener on listeners list', () => {\n      const listener = tracer.eventListeners[0];\n      assert.strictEqual(tracer.eventListeners.length, 1);\n      assert.strictEqual(listener, onEndSpan);\n      tracer.unregisterSpanEventListener(onEndSpan);\n      assert.strictEqual(tracer.eventListeners.length, 0);\n    });\n  });\n\n  /** Should stop the trace instance */\n  describe('stop()', () => {\n    it('should stop the trace instance', () => {\n      const tracer = new CoreTracerBase();\n      assert.strictEqual(tracer.active, false);\n      tracer.start(defaultConfig);\n      assert.strictEqual(tracer.active, true);\n      tracer.stop();\n      assert.strictEqual(tracer.active, false);\n    });\n  });\n\n  /** Should create and start a new RootSpan instance with options */\n  describe('startRootSpan() with options', () => {\n    let rootSpanLocal: types.Span;\n    before(() => {\n      const tracer = new CoreTracerBase();\n      tracer.start(defaultConfig);\n      tracer.startRootSpan(options, rootSpan => {\n        rootSpanLocal = rootSpan;\n      });\n    });\n    it('should create a new RootSpan instance', () => {\n      assert.ok(rootSpanLocal instanceof Span);\n    });\n    it('should start the rootSpan', () => {\n      assert.ok(rootSpanLocal.started);\n    });\n  });\n\n  describe('startRootSpan() with sampler never', () => {\n    const tracer = new CoreTracerBase();\n    const config: TracerConfig = { samplingRate: 0 };\n\n    it('should start the new NoRecordRootSpan instance', () => {\n      tracer.start(config);\n      tracer.startRootSpan(options, rootSpan => {\n        assert.ok(rootSpan instanceof NoRecordRootSpan);\n      });\n    });\n\n    it('should start the new RootSpan instance when always sampling provided at span level', () => {\n      tracer.start(config);\n      tracer.startRootSpan({ name: 'test', samplingRate: 1 }, rootSpan => {\n        assert.ok(rootSpan);\n      });\n    });\n  });\n\n  describe('startRootSpan() with sampler always', () => {\n    const tracer = new CoreTracerBase();\n    const config: TracerConfig = { samplingRate: 1 };\n\n    it('should start the new RootSpan instance', () => {\n      tracer.start(config);\n      tracer.startRootSpan(options, rootSpan => {\n        assert.ok(rootSpan);\n      });\n    });\n\n    it('should start the new NoRecordRootSpan instance when never sampling provided at span level', () => {\n      tracer.start(config);\n      tracer.startRootSpan({ name: 'test', samplingRate: 0 }, rootSpan => {\n        assert.ok(rootSpan instanceof NoRecordRootSpan);\n      });\n    });\n  });\n\n  describe('startRootSpan() before start()', () => {\n    it('should start the new NoRecordRootSpan instance, tracer not started', () => {\n      const tracer = new CoreTracerBase();\n      assert.strictEqual(tracer.active, false);\n      tracer.startRootSpan(options, rootSpan => {\n        assert.ok(rootSpan instanceof NoRecordRootSpan);\n      });\n    });\n  });\n\n  describe('startRootSpan() with context propagation', () => {\n    const traceOptions: types.TraceOptions = {\n      name: 'rootName',\n      kind: types.SpanKind.UNSPECIFIED,\n    };\n\n    it('should create new RootSpan instance, no propagation', () => {\n      const tracer = new CoreTracerBase();\n      tracer.start(defaultConfig);\n      tracer.startRootSpan(traceOptions, rootSpan => {\n        assert.ok(rootSpan);\n        assert.strictEqual(rootSpan.name, traceOptions.name);\n        assert.strictEqual(rootSpan.kind, traceOptions.kind);\n      });\n    });\n\n    const spanContextPropagated: types.SpanContext = {\n      traceId: uuid\n        .v4()\n        .split('-')\n        .join(''),\n      spanId: randomSpanId(),\n      options: 0x1,\n    };\n\n    it('should create the new RootSpan with propagation', () => {\n      const tracer = new CoreTracerBase();\n      tracer.start(defaultConfig);\n      traceOptions.spanContext = spanContextPropagated;\n      tracer.startRootSpan(traceOptions, rootSpan => {\n        assert.ok(rootSpan);\n        assert.strictEqual(rootSpan.name, traceOptions.name);\n        assert.strictEqual(rootSpan.kind, traceOptions.kind);\n        assert.strictEqual(rootSpan.traceId, spanContextPropagated.traceId);\n        assert.strictEqual(rootSpan.parentSpanId, spanContextPropagated.spanId);\n      });\n    });\n\n    it('should create the new NoRecordRootSpan with propagation options bit set to not-sample)', () => {\n      const tracer = new CoreTracerBase();\n      tracer.start(defaultConfig);\n      traceOptions.spanContext!.options = 0x0;\n      tracer.startRootSpan(traceOptions, rootSpan => {\n        assert.ok(rootSpan);\n        assert.ok(rootSpan instanceof NoRecordRootSpan);\n        assert.strictEqual(rootSpan.name, traceOptions.name);\n        assert.strictEqual(rootSpan.kind, traceOptions.kind);\n        assert.strictEqual(rootSpan.traceId, spanContextPropagated.traceId);\n        assert.strictEqual(rootSpan.parentSpanId, spanContextPropagated.spanId);\n      });\n    });\n\n    it('should create a tracer with default TraceParams when no parameters are specified upon initialisation', () => {\n      const tracer = new CoreTracerBase();\n      tracer.start(defaultConfig);\n      assert.strictEqual(\n        tracer.activeTraceParams.numberOfAnnontationEventsPerSpan,\n        undefined\n      );\n      assert.strictEqual(\n        tracer.activeTraceParams.numberOfAttributesPerSpan,\n        undefined\n      );\n      assert.strictEqual(\n        tracer.activeTraceParams.numberOfLinksPerSpan,\n        undefined\n      );\n      assert.strictEqual(\n        tracer.activeTraceParams.numberOfMessageEventsPerSpan,\n        undefined\n      );\n    });\n\n    it('should create a tracer with default TraceParams when parameters with values higher than limit are specified upon initialisation', () => {\n      const traceParametersWithHigherThanMaximumValues: TraceParams = {\n        numberOfAnnontationEventsPerSpan: 50,\n        numberOfMessageEventsPerSpan: 200,\n        numberOfAttributesPerSpan: 37,\n        numberOfLinksPerSpan: 45,\n      };\n      defaultConfig.traceParams = traceParametersWithHigherThanMaximumValues;\n      const tracer = new CoreTracerBase();\n      tracer.start(defaultConfig);\n      assert.strictEqual(\n        tracer.activeTraceParams.numberOfAnnontationEventsPerSpan,\n        50\n      );\n      assert.strictEqual(\n        tracer.activeTraceParams.numberOfAttributesPerSpan,\n        37\n      );\n      assert.strictEqual(tracer.activeTraceParams.numberOfLinksPerSpan, 45);\n      assert.strictEqual(\n        tracer.activeTraceParams.numberOfMessageEventsPerSpan,\n        200\n      );\n    });\n  });\n\n  /** Should create and start a Span instance into a rootSpan */\n  describe('startChildSpan()', () => {\n    let span: types.Span;\n    let tracer: types.TracerBase;\n    before(() => {\n      tracer = new CoreTracerBase();\n      tracer.start(defaultConfig);\n      tracer.startRootSpan(options, rootSpan => {\n        span = tracer.startChildSpan({\n          name: 'spanName',\n          kind: types.SpanKind.CLIENT,\n          childOf: rootSpan,\n        });\n      });\n    });\n    it('should create a Span instance', () => {\n      assert.ok(span instanceof Span);\n    });\n    it('should start a span', () => {\n      assert.ok(span.started);\n      assert.strictEqual(span.name, 'spanName');\n      assert.strictEqual(span.kind, types.SpanKind.CLIENT);\n    });\n\n    it('should start a span with SpanObject', () => {\n      tracer.startRootSpan(options, rootSpan => {\n        const spanWithObject = tracer.startChildSpan({\n          name: 'my-span',\n          kind: types.SpanKind.SERVER,\n          childOf: rootSpan,\n        });\n        assert.ok(spanWithObject.started);\n        assert.strictEqual(spanWithObject.name, 'my-span');\n        assert.strictEqual(spanWithObject.kind, types.SpanKind.SERVER);\n      });\n    });\n\n    it('should start a span with SpanObject-name', () => {\n      tracer.startRootSpan(options, rootSpan => {\n        const spanWithObject = tracer.startChildSpan({\n          name: 'my-span1',\n          childOf: rootSpan,\n        });\n        assert.ok(spanWithObject.started);\n        assert.strictEqual(spanWithObject.name, 'my-span1');\n        assert.strictEqual(spanWithObject.kind, types.SpanKind.UNSPECIFIED);\n      });\n    });\n\n    it('should start a no-record span without params', () => {\n      tracer.startRootSpan(options, rootSpan => {\n        const spanWithObject = tracer.startChildSpan();\n        assert.strictEqual(spanWithObject.name, 'no-record');\n        assert.strictEqual(spanWithObject.kind, types.SpanKind.UNSPECIFIED);\n      });\n    });\n\n    it('should support nested children', () => {\n      tracer.startRootSpan(options, rootSpan => {\n        assert.strictEqual(rootSpan.numberOfChildren, 0);\n        const child1 = tracer.startChildSpan({\n          name: 'child1',\n          kind: types.SpanKind.UNSPECIFIED,\n          childOf: rootSpan,\n        });\n        assert.strictEqual(rootSpan.numberOfChildren, 1);\n        assert.strictEqual(child1.numberOfChildren, 0);\n        const child2 = tracer.startChildSpan({\n          name: 'child2',\n          kind: types.SpanKind.UNSPECIFIED,\n          childOf: rootSpan,\n        });\n        assert.strictEqual(rootSpan.numberOfChildren, 2);\n        const grandchild1 = tracer.startChildSpan({\n          name: 'grandchild1',\n          kind: types.SpanKind.UNSPECIFIED,\n          childOf: child1,\n        });\n        assert.strictEqual(rootSpan.numberOfChildren, 2);\n        assert.strictEqual(child1.numberOfChildren, 1);\n        assert.strictEqual(child2.numberOfChildren, 0);\n        assert.strictEqual(grandchild1.numberOfChildren, 0);\n\n        assert.strictEqual(rootSpan.spans.length, 2);\n        assert.strictEqual(child1, rootSpan.spans[0]);\n        assert.strictEqual(child2, rootSpan.spans[1]);\n        assert.strictEqual(grandchild1.parentSpanId, child1.id);\n\n        assert.strictEqual(child1.spans.length, 1);\n        assert.strictEqual(grandchild1, child1.spans[0]);\n\n        assert.strictEqual(child2.spans.length, 0);\n        assert.strictEqual(grandchild1.spans.length, 0);\n\n        assert.strictEqual(rootSpan.allDescendants().length, 3);\n      });\n    });\n\n    it('should add attributes more than default limit when override', () => {\n      defaultConfig.traceParams = { numberOfAttributesPerSpan: 48 };\n      tracer.start(defaultConfig);\n      tracer.startRootSpan(options, rootSpan => {\n        const span = tracer.startChildSpan({\n          name: 'spanName',\n          childOf: rootSpan,\n        });\n        for (let i = 0; i < 40; i++) {\n          span.addAttribute(`attr ${i}`, i);\n        }\n        assert.strictEqual(Object.keys(span.attributes).length, 40);\n      });\n    });\n  });\n\n  /** Should not create a Span instance */\n  describe('startChildSpan() before startRootSpan()', () => {\n    it('should create a NoRecordSpan instance, without a rootspan', () => {\n      const tracer = new CoreTracerBase();\n      tracer.start(defaultConfig);\n      const span = tracer.startChildSpan({\n        name: 'spanName',\n        kind: types.SpanKind.UNSPECIFIED,\n      });\n      assert.ok(span instanceof NoRecordSpan);\n    });\n  });\n\n  /** Should add tracer attributes to every span created by tracer */\n  describe('startRootSpan() and startChildSpan() with attributes', () => {\n    let tracerConfig: TracerConfig;\n    let tracer: types.TracerBase;\n    let span: types.Span;\n    let rootSpanLocal: types.Span;\n    before(() => {\n      tracer = new CoreTracerBase();\n      tracerConfig = {\n        ...defaultConfig,\n        defaultAttributes: {\n          cluster_name: 'test-cluster',\n          asg_name: 'test-asg',\n        },\n      };\n      tracer.start(tracerConfig);\n      tracer.startRootSpan(options, rootSpan => {\n        rootSpanLocal = rootSpan;\n        span = tracer.startChildSpan({\n          name: 'spanName',\n          kind: types.SpanKind.CLIENT,\n          childOf: rootSpan,\n        });\n      });\n    });\n    it('should add attributes to spans', () => {\n      assert.deepStrictEqual(\n        rootSpanLocal.attributes,\n        tracerConfig.defaultAttributes\n      );\n      assert.deepStrictEqual(span.attributes, tracerConfig.defaultAttributes);\n    });\n  });\n\n  /** Should run eventListeners when the rootSpan ends */\n  describe('onEndSpan()', () => {\n    it('should run eventListeners when the rootSpan ends', () => {\n      const tracer = new CoreTracerBase();\n      const eventListener = new OnEndSpanClass();\n      tracer.registerSpanEventListener(eventListener);\n      tracer.start(defaultConfig);\n\n      tracer.startRootSpan(options, rootSpan => {\n        rootSpan.end();\n        assert.strictEqual(\n          eventListener.testCount,\n          tracer.eventListeners.length\n        );\n      });\n    });\n  });\n});\n"]}