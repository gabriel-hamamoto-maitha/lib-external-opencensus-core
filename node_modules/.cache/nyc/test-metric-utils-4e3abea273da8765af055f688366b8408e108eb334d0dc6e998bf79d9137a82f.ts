"use strict";/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_1k4msken5z(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-metric-utils.ts";var hash="4b59fe033e888554795291a5afc070270fbd50db";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-metric-utils.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:15},end:{line:18,column:32}},"2":{start:{line:19,column:14},end:{line:19,column:31}},"3":{start:{line:20,column:16},end:{line:20,column:54}},"4":{start:{line:21,column:16},end:{line:21,column:45}},"5":{start:{line:22,column:0},end:{line:66,column:3}},"6":{start:{line:23,column:4},end:{line:42,column:7}},"7":{start:{line:24,column:33},end:{line:24,column:51}},"8":{start:{line:25,column:24},end:{line:29,column:9}},"9":{start:{line:30,column:24},end:{line:30,column:68}},"10":{start:{line:31,column:21},end:{line:31,column:129}},"11":{start:{line:32,column:33},end:{line:32,column:79}},"12":{start:{line:33,column:8},end:{line:33,column:36}},"13":{start:{line:34,column:8},end:{line:34,column:61}},"14":{start:{line:35,column:8},end:{line:35,column:76}},"15":{start:{line:36,column:8},end:{line:36,column:93}},"16":{start:{line:37,column:8},end:{line:37,column:75}},"17":{start:{line:38,column:8},end:{line:41,column:11}},"18":{start:{line:43,column:4},end:{line:56,column:7}},"19":{start:{line:44,column:21},end:{line:49,column:9}},"20":{start:{line:50,column:8},end:{line:55,column:11}},"21":{start:{line:57,column:4},end:{line:65,column:7}},"22":{start:{line:58,column:21},end:{line:58,column:60}},"23":{start:{line:59,column:8},end:{line:64,column:11}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:22,column:23},end:{line:22,column:24}},loc:{start:{line:22,column:29},end:{line:66,column:1}},line:22},"1":{name:"(anonymous_1)",decl:{start:{line:23,column:50},end:{line:23,column:51}},loc:{start:{line:23,column:56},end:{line:42,column:5}},line:23},"2":{name:"(anonymous_2)",decl:{start:{line:43,column:52},end:{line:43,column:53}},loc:{start:{line:43,column:58},end:{line:56,column:5}},line:43},"3":{name:"(anonymous_3)",decl:{start:{line:57,column:72},end:{line:57,column:73}},loc:{start:{line:57,column:78},end:{line:65,column:5}},line:57}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0},f:{"0":0,"1":0,"2":0,"3":0},b:{},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-metric-utils.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-metric-utils.ts"],names:[],mappings:";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,iCAAiC;AAEjC,gCAA+C;AAC/C,uDAAmE;AACnE,8CAK4B;AAE5B,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;IAC1B,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;QACjD,MAAM,gBAAgB,GAAG,kBAAkB,CAAC;QAC5C,MAAM,OAAO,GAAY;YACvB,IAAI,EAAE,cAAc;YACpB,IAAI,EAAE,mBAAW,CAAC,MAAM;YACxB,IAAI,EAAE,mBAAW,CAAC,IAAI;SACvB,CAAC;QACF,MAAM,OAAO,GAAG,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC;QAC7D,MAAM,IAAI,GAAG,IAAI,cAAQ,CACvB,gBAAgB,EAChB,OAAO,EACP,uBAAe,CAAC,UAAU,EAC1B,OAAO,EACP,gBAAgB,CACjB,CAAC;QACF,MAAM,gBAAgB,GAAG,iBAAW,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;QAElE,MAAM,CAAC,EAAE,CAAC,gBAAgB,CAAC,CAAC;QAC5B,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QACrD,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,EAAE,mBAAW,CAAC,IAAI,CAAC,CAAC;QAC5D,MAAM,CAAC,WAAW,CAChB,gBAAgB,CAAC,IAAI,EACrB,4BAAoB,CAAC,YAAY,CAClC,CAAC;QACF,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,WAAW,EAAE,gBAAgB,CAAC,CAAC;QACnE,MAAM,CAAC,eAAe,CAAC,gBAAgB,CAAC,SAAS,EAAE;YACjD,EAAE,GAAG,EAAE,UAAU,EAAE,WAAW,EAAE,EAAE,EAAE;YACpC,EAAE,GAAG,EAAE,UAAU,EAAE,WAAW,EAAE,EAAE,EAAE;SACrC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;QACnD,MAAM,IAAI,GAAG;YACX,EAAE,KAAK,EAAE,QAAQ,EAAE;YACnB,EAAE,KAAK,EAAE,QAAQ,EAAE;YACnB,EAAE,KAAK,EAAE,EAAE,EAAE;YACb,IAAI;SACL,CAAC;QACF,MAAM,CAAC,eAAe,CAAC,iBAAW,CAAC,sBAAsB,CAAC,IAAI,CAAC,EAAE;YAC/D,EAAE,KAAK,EAAE,QAAQ,EAAE;YACnB,EAAE,KAAK,EAAE,QAAQ,EAAE;YACnB,EAAE,KAAK,EAAE,EAAE,EAAE;YACb,EAAE,KAAK,EAAE,IAAI,EAAE;SAChB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+DAA+D,EAAE,GAAG,EAAE;QACvE,MAAM,IAAI,GAAG,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QACrD,MAAM,CAAC,eAAe,CAAC,iBAAW,CAAC,sBAAsB,CAAC,IAAI,CAAC,EAAE;YAC/D,EAAE,KAAK,EAAE,QAAQ,EAAE;YACnB,EAAE,KAAK,EAAE,IAAI,EAAE;YACf,EAAE,KAAK,EAAE,IAAI,EAAE;YACf,EAAE,KAAK,EAAE,IAAI,EAAE;SAChB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\n\nimport { BaseView, MetricUtils } from '../src';\nimport { MetricDescriptorType } from '../src/metrics/export/types';\nimport {\n  AggregationType,\n  Measure,\n  MeasureType,\n  MeasureUnit,\n} from '../src/stats/types';\n\ndescribe('MetricUtil', () => {\n  it('should convert view to MetricDescriptor', () => {\n    const VIEW_DESCRIPTION = 'view description';\n    const measure: Measure = {\n      name: 'Test Measure',\n      type: MeasureType.DOUBLE,\n      unit: MeasureUnit.UNIT,\n    };\n    const tagKeys = [{ name: 'testKey1' }, { name: 'testKey2' }];\n    const view = new BaseView(\n      'test/view/name',\n      measure,\n      AggregationType.LAST_VALUE,\n      tagKeys,\n      VIEW_DESCRIPTION\n    );\n    const metricDescriptor = MetricUtils.viewToMetricDescriptor(view);\n\n    assert.ok(metricDescriptor);\n    assert.strictEqual(metricDescriptor.name, view.name);\n    assert.strictEqual(metricDescriptor.unit, MeasureUnit.UNIT);\n    assert.strictEqual(\n      metricDescriptor.type,\n      MetricDescriptorType.GAUGE_DOUBLE\n    );\n    assert.strictEqual(metricDescriptor.description, VIEW_DESCRIPTION);\n    assert.deepStrictEqual(metricDescriptor.labelKeys, [\n      { key: 'testKey1', description: '' },\n      { key: 'testKey2', description: '' },\n    ]);\n  });\n\n  it('should convert tag values to label values', () => {\n    const tags = [\n      { value: 'value1' },\n      { value: 'value2' },\n      { value: '' },\n      null,\n    ];\n    assert.deepStrictEqual(MetricUtils.tagValuesToLabelValues(tags), [\n      { value: 'value1' },\n      { value: 'value2' },\n      { value: '' },\n      { value: null },\n    ]);\n  });\n\n  it('should convert tag values to label values with null tag value', () => {\n    const tags = [{ value: 'value1' }, null, null, null];\n    assert.deepStrictEqual(MetricUtils.tagValuesToLabelValues(tags), [\n      { value: 'value1' },\n      { value: null },\n      { value: null },\n      { value: null },\n    ]);\n  });\n});\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"4b59fe033e888554795291a5afc070270fbd50db"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1k4msken5z=function(){return actualCoverage;};}return actualCoverage;}cov_1k4msken5z();cov_1k4msken5z().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const assert=(cov_1k4msken5z().s[1]++,require("assert"));const src_1=(cov_1k4msken5z().s[2]++,require("../src"));const types_1=(cov_1k4msken5z().s[3]++,require("../src/metrics/export/types"));const types_2=(cov_1k4msken5z().s[4]++,require("../src/stats/types"));cov_1k4msken5z().s[5]++;describe('MetricUtil',()=>{cov_1k4msken5z().f[0]++;cov_1k4msken5z().s[6]++;it('should convert view to MetricDescriptor',()=>{cov_1k4msken5z().f[1]++;const VIEW_DESCRIPTION=(cov_1k4msken5z().s[7]++,'view description');const measure=(cov_1k4msken5z().s[8]++,{name:'Test Measure',type:types_2.MeasureType.DOUBLE,unit:types_2.MeasureUnit.UNIT});const tagKeys=(cov_1k4msken5z().s[9]++,[{name:'testKey1'},{name:'testKey2'}]);const view=(cov_1k4msken5z().s[10]++,new src_1.BaseView('test/view/name',measure,types_2.AggregationType.LAST_VALUE,tagKeys,VIEW_DESCRIPTION));const metricDescriptor=(cov_1k4msken5z().s[11]++,src_1.MetricUtils.viewToMetricDescriptor(view));cov_1k4msken5z().s[12]++;assert.ok(metricDescriptor);cov_1k4msken5z().s[13]++;assert.strictEqual(metricDescriptor.name,view.name);cov_1k4msken5z().s[14]++;assert.strictEqual(metricDescriptor.unit,types_2.MeasureUnit.UNIT);cov_1k4msken5z().s[15]++;assert.strictEqual(metricDescriptor.type,types_1.MetricDescriptorType.GAUGE_DOUBLE);cov_1k4msken5z().s[16]++;assert.strictEqual(metricDescriptor.description,VIEW_DESCRIPTION);cov_1k4msken5z().s[17]++;assert.deepStrictEqual(metricDescriptor.labelKeys,[{key:'testKey1',description:''},{key:'testKey2',description:''}]);});cov_1k4msken5z().s[18]++;it('should convert tag values to label values',()=>{cov_1k4msken5z().f[2]++;const tags=(cov_1k4msken5z().s[19]++,[{value:'value1'},{value:'value2'},{value:''},null]);cov_1k4msken5z().s[20]++;assert.deepStrictEqual(src_1.MetricUtils.tagValuesToLabelValues(tags),[{value:'value1'},{value:'value2'},{value:''},{value:null}]);});cov_1k4msken5z().s[21]++;it('should convert tag values to label values with null tag value',()=>{cov_1k4msken5z().f[3]++;const tags=(cov_1k4msken5z().s[22]++,[{value:'value1'},null,null,null]);cov_1k4msken5z().s[23]++;assert.deepStrictEqual(src_1.MetricUtils.tagValuesToLabelValues(tags),[{value:'value1'},{value:null},{value:null},{value:null}]);});});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3VzZXJtYWl0aGEvdHJhZGVtYXN0ZXIvbGlicy9saWItZXh0ZXJuYWwtb3BlbmNlbnN1cy1ub2RlL3Rlc3QvdGVzdC1tZXRyaWMtdXRpbHMudHMiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VybWFpdGhhL3RyYWRlbWFzdGVyL2xpYnMvbGliLWV4dGVybmFsLW9wZW5jZW5zdXMtbm9kZS90ZXN0L3Rlc3QtbWV0cmljLXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7R0FjRzs7QUFFSCxpQ0FBaUM7QUFFakMsZ0NBQStDO0FBQy9DLHVEQUFtRTtBQUNuRSw4Q0FLNEI7QUFFNUIsUUFBUSxDQUFDLFlBQVksRUFBRSxHQUFHLEVBQUU7SUFDMUIsRUFBRSxDQUFDLHlDQUF5QyxFQUFFLEdBQUcsRUFBRTtRQUNqRCxNQUFNLGdCQUFnQixHQUFHLGtCQUFrQixDQUFDO1FBQzVDLE1BQU0sT0FBTyxHQUFZO1lBQ3ZCLElBQUksRUFBRSxjQUFjO1lBQ3BCLElBQUksRUFBRSxtQkFBVyxDQUFDLE1BQU07WUFDeEIsSUFBSSxFQUFFLG1CQUFXLENBQUMsSUFBSTtTQUN2QixDQUFDO1FBQ0YsTUFBTSxPQUFPLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO1FBQzdELE1BQU0sSUFBSSxHQUFHLElBQUksY0FBUSxDQUN2QixnQkFBZ0IsRUFDaEIsT0FBTyxFQUNQLHVCQUFlLENBQUMsVUFBVSxFQUMxQixPQUFPLEVBQ1AsZ0JBQWdCLENBQ2pCLENBQUM7UUFDRixNQUFNLGdCQUFnQixHQUFHLGlCQUFXLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFbEUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzVCLE1BQU0sQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyRCxNQUFNLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxtQkFBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVELE1BQU0sQ0FBQyxXQUFXLENBQ2hCLGdCQUFnQixDQUFDLElBQUksRUFDckIsNEJBQW9CLENBQUMsWUFBWSxDQUNsQyxDQUFDO1FBQ0YsTUFBTSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUNuRSxNQUFNLENBQUMsZUFBZSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRTtZQUNqRCxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRTtZQUNwQyxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRTtTQUNyQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywyQ0FBMkMsRUFBRSxHQUFHLEVBQUU7UUFDbkQsTUFBTSxJQUFJLEdBQUc7WUFDWCxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUU7WUFDbkIsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFO1lBQ25CLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtZQUNiLElBQUk7U0FDTCxDQUFDO1FBQ0YsTUFBTSxDQUFDLGVBQWUsQ0FBQyxpQkFBVyxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxFQUFFO1lBQy9ELEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRTtZQUNuQixFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUU7WUFDbkIsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFO1lBQ2IsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO1NBQ2hCLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLCtEQUErRCxFQUFFLEdBQUcsRUFBRTtRQUN2RSxNQUFNLElBQUksR0FBRyxDQUFDLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDckQsTUFBTSxDQUFDLGVBQWUsQ0FBQyxpQkFBVyxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxFQUFFO1lBQy9ELEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRTtZQUNuQixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7WUFDZixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7WUFDZixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7U0FDaEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTgsIE9wZW5DZW5zdXMgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0ICogYXMgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7XG5cbmltcG9ydCB7IEJhc2VWaWV3LCBNZXRyaWNVdGlscyB9IGZyb20gJy4uL3NyYyc7XG5pbXBvcnQgeyBNZXRyaWNEZXNjcmlwdG9yVHlwZSB9IGZyb20gJy4uL3NyYy9tZXRyaWNzL2V4cG9ydC90eXBlcyc7XG5pbXBvcnQge1xuICBBZ2dyZWdhdGlvblR5cGUsXG4gIE1lYXN1cmUsXG4gIE1lYXN1cmVUeXBlLFxuICBNZWFzdXJlVW5pdCxcbn0gZnJvbSAnLi4vc3JjL3N0YXRzL3R5cGVzJztcblxuZGVzY3JpYmUoJ01ldHJpY1V0aWwnLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgY29udmVydCB2aWV3IHRvIE1ldHJpY0Rlc2NyaXB0b3InLCAoKSA9PiB7XG4gICAgY29uc3QgVklFV19ERVNDUklQVElPTiA9ICd2aWV3IGRlc2NyaXB0aW9uJztcbiAgICBjb25zdCBtZWFzdXJlOiBNZWFzdXJlID0ge1xuICAgICAgbmFtZTogJ1Rlc3QgTWVhc3VyZScsXG4gICAgICB0eXBlOiBNZWFzdXJlVHlwZS5ET1VCTEUsXG4gICAgICB1bml0OiBNZWFzdXJlVW5pdC5VTklULFxuICAgIH07XG4gICAgY29uc3QgdGFnS2V5cyA9IFt7IG5hbWU6ICd0ZXN0S2V5MScgfSwgeyBuYW1lOiAndGVzdEtleTInIH1dO1xuICAgIGNvbnN0IHZpZXcgPSBuZXcgQmFzZVZpZXcoXG4gICAgICAndGVzdC92aWV3L25hbWUnLFxuICAgICAgbWVhc3VyZSxcbiAgICAgIEFnZ3JlZ2F0aW9uVHlwZS5MQVNUX1ZBTFVFLFxuICAgICAgdGFnS2V5cyxcbiAgICAgIFZJRVdfREVTQ1JJUFRJT05cbiAgICApO1xuICAgIGNvbnN0IG1ldHJpY0Rlc2NyaXB0b3IgPSBNZXRyaWNVdGlscy52aWV3VG9NZXRyaWNEZXNjcmlwdG9yKHZpZXcpO1xuXG4gICAgYXNzZXJ0Lm9rKG1ldHJpY0Rlc2NyaXB0b3IpO1xuICAgIGFzc2VydC5zdHJpY3RFcXVhbChtZXRyaWNEZXNjcmlwdG9yLm5hbWUsIHZpZXcubmFtZSk7XG4gICAgYXNzZXJ0LnN0cmljdEVxdWFsKG1ldHJpY0Rlc2NyaXB0b3IudW5pdCwgTWVhc3VyZVVuaXQuVU5JVCk7XG4gICAgYXNzZXJ0LnN0cmljdEVxdWFsKFxuICAgICAgbWV0cmljRGVzY3JpcHRvci50eXBlLFxuICAgICAgTWV0cmljRGVzY3JpcHRvclR5cGUuR0FVR0VfRE9VQkxFXG4gICAgKTtcbiAgICBhc3NlcnQuc3RyaWN0RXF1YWwobWV0cmljRGVzY3JpcHRvci5kZXNjcmlwdGlvbiwgVklFV19ERVNDUklQVElPTik7XG4gICAgYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChtZXRyaWNEZXNjcmlwdG9yLmxhYmVsS2V5cywgW1xuICAgICAgeyBrZXk6ICd0ZXN0S2V5MScsIGRlc2NyaXB0aW9uOiAnJyB9LFxuICAgICAgeyBrZXk6ICd0ZXN0S2V5MicsIGRlc2NyaXB0aW9uOiAnJyB9LFxuICAgIF0pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGNvbnZlcnQgdGFnIHZhbHVlcyB0byBsYWJlbCB2YWx1ZXMnLCAoKSA9PiB7XG4gICAgY29uc3QgdGFncyA9IFtcbiAgICAgIHsgdmFsdWU6ICd2YWx1ZTEnIH0sXG4gICAgICB7IHZhbHVlOiAndmFsdWUyJyB9LFxuICAgICAgeyB2YWx1ZTogJycgfSxcbiAgICAgIG51bGwsXG4gICAgXTtcbiAgICBhc3NlcnQuZGVlcFN0cmljdEVxdWFsKE1ldHJpY1V0aWxzLnRhZ1ZhbHVlc1RvTGFiZWxWYWx1ZXModGFncyksIFtcbiAgICAgIHsgdmFsdWU6ICd2YWx1ZTEnIH0sXG4gICAgICB7IHZhbHVlOiAndmFsdWUyJyB9LFxuICAgICAgeyB2YWx1ZTogJycgfSxcbiAgICAgIHsgdmFsdWU6IG51bGwgfSxcbiAgICBdKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBjb252ZXJ0IHRhZyB2YWx1ZXMgdG8gbGFiZWwgdmFsdWVzIHdpdGggbnVsbCB0YWcgdmFsdWUnLCAoKSA9PiB7XG4gICAgY29uc3QgdGFncyA9IFt7IHZhbHVlOiAndmFsdWUxJyB9LCBudWxsLCBudWxsLCBudWxsXTtcbiAgICBhc3NlcnQuZGVlcFN0cmljdEVxdWFsKE1ldHJpY1V0aWxzLnRhZ1ZhbHVlc1RvTGFiZWxWYWx1ZXModGFncyksIFtcbiAgICAgIHsgdmFsdWU6ICd2YWx1ZTEnIH0sXG4gICAgICB7IHZhbHVlOiBudWxsIH0sXG4gICAgICB7IHZhbHVlOiBudWxsIH0sXG4gICAgICB7IHZhbHVlOiBudWxsIH0sXG4gICAgXSk7XG4gIH0pO1xufSk7XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf-8;base64,