"use strict";/**
 * Copyright 2019, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_152agy7o0u(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/cumulative/cumulative.ts";var hash="cf199607c02ac4453270a547593b96d049eb4b5f";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/cumulative/cumulative.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:0},end:{line:18,column:59}},"2":{start:{line:19,column:20},end:{line:19,column:53}},"3":{start:{line:20,column:22},end:{line:20,column:57}},"4":{start:{line:21,column:16},end:{line:21,column:35}},"5":{start:{line:39,column:8},end:{line:39,column:35}},"6":{start:{line:40,column:8},end:{line:40,column:45}},"7":{start:{line:41,column:8},end:{line:41,column:42}},"8":{start:{line:42,column:8},end:{line:42,column:48}},"9":{start:{line:43,column:36},end:{line:43,column:76}},"10":{start:{line:44,column:8},end:{line:44,column:64}},"11":{start:{line:45,column:8},end:{line:51,column:10}},"12":{start:{line:52,column:8},end:{line:52,column:88}},"13":{start:{line:66,column:8},end:{line:66,column:124}},"14":{start:{line:67,column:8},end:{line:67,column:52}},"15":{start:{line:76,column:8},end:{line:76,column:64}},"16":{start:{line:86,column:8},end:{line:86,column:66}},"17":{start:{line:87,column:8},end:{line:87,column:75}},"18":{start:{line:94,column:8},end:{line:94,column:38}},"19":{start:{line:105,column:21},end:{line:105,column:57}},"20":{start:{line:107,column:8},end:{line:109,column:9}},"21":{start:{line:108,column:12},end:{line:108,column:51}},"22":{start:{line:110,column:8},end:{line:112,column:9}},"23":{start:{line:111,column:12},end:{line:111,column:80}},"24":{start:{line:113,column:22},end:{line:116,column:10}},"25":{start:{line:117,column:8},end:{line:117,column:47}},"26":{start:{line:118,column:8},end:{line:118,column:21}},"27":{start:{line:126,column:8},end:{line:128,column:9}},"28":{start:{line:127,column:12},end:{line:127,column:24}},"29":{start:{line:129,column:20},end:{line:129,column:63}},"30":{start:{line:130,column:8},end:{line:133,column:10}},"31":{start:{line:132,column:74},end:{line:132,column:98}},"32":{start:{line:136,column:0},end:{line:136,column:32}},"33":{start:{line:142,column:8},end:{line:142,column:23}},"34":{start:{line:143,column:8},end:{line:143,column:39}},"35":{start:{line:144,column:8},end:{line:144,column:74}},"36":{start:{line:148,column:8},end:{line:148,column:23}},"37":{start:{line:149,column:8},end:{line:149,column:74}},"38":{start:{line:156,column:8},end:{line:158,column:9}},"39":{start:{line:157,column:12},end:{line:157,column:71}},"40":{start:{line:159,column:8},end:{line:161,column:9}},"41":{start:{line:160,column:12},end:{line:160,column:82}},"42":{start:{line:162,column:25},end:{line:162,column:68}},"43":{start:{line:163,column:8},end:{line:163,column:31}},"44":{start:{line:172,column:8},end:{line:176,column:10}},"45":{start:{line:179,column:0},end:{line:179,column:52}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:38,column:4},end:{line:38,column:5}},loc:{start:{line:38,column:74},end:{line:53,column:5}},line:38},"1":{name:"(anonymous_1)",decl:{start:{line:65,column:4},end:{line:65,column:5}},loc:{start:{line:65,column:39},end:{line:68,column:5}},line:65},"2":{name:"(anonymous_2)",decl:{start:{line:75,column:4},end:{line:75,column:5}},loc:{start:{line:75,column:27},end:{line:77,column:5}},line:75},"3":{name:"(anonymous_3)",decl:{start:{line:85,column:4},end:{line:85,column:5}},loc:{start:{line:85,column:34},end:{line:88,column:5}},line:85},"4":{name:"(anonymous_4)",decl:{start:{line:93,column:4},end:{line:93,column:5}},loc:{start:{line:93,column:12},end:{line:95,column:5}},line:93},"5":{name:"(anonymous_5)",decl:{start:{line:104,column:4},end:{line:104,column:5}},loc:{start:{line:104,column:36},end:{line:119,column:5}},line:104},"6":{name:"(anonymous_6)",decl:{start:{line:125,column:4},end:{line:125,column:5}},loc:{start:{line:125,column:16},end:{line:134,column:5}},line:125},"7":{name:"(anonymous_7)",decl:{start:{line:132,column:58},end:{line:132,column:59}},loc:{start:{line:132,column:74},end:{line:132,column:98}},line:132},"8":{name:"(anonymous_8)",decl:{start:{line:141,column:4},end:{line:141,column:5}},loc:{start:{line:141,column:29},end:{line:145,column:5}},line:141},"9":{name:"(anonymous_9)",decl:{start:{line:147,column:4},end:{line:147,column:5}},loc:{start:{line:147,column:12},end:{line:150,column:5}},line:147},"10":{name:"(anonymous_10)",decl:{start:{line:155,column:4},end:{line:155,column:5}},loc:{start:{line:155,column:13},end:{line:164,column:5}},line:155},"11":{name:"(anonymous_11)",decl:{start:{line:171,column:4},end:{line:171,column:5}},loc:{start:{line:171,column:23},end:{line:177,column:5}},line:171}},branchMap:{"0":{loc:{start:{line:107,column:8},end:{line:109,column:9}},type:"if",locations:[{start:{line:107,column:8},end:{line:109,column:9}},{start:{line:107,column:8},end:{line:109,column:9}}],line:107},"1":{loc:{start:{line:110,column:8},end:{line:112,column:9}},type:"if",locations:[{start:{line:110,column:8},end:{line:112,column:9}},{start:{line:110,column:8},end:{line:112,column:9}}],line:110},"2":{loc:{start:{line:126,column:8},end:{line:128,column:9}},type:"if",locations:[{start:{line:126,column:8},end:{line:128,column:9}},{start:{line:126,column:8},end:{line:128,column:9}}],line:126},"3":{loc:{start:{line:156,column:8},end:{line:158,column:9}},type:"if",locations:[{start:{line:156,column:8},end:{line:158,column:9}},{start:{line:156,column:8},end:{line:158,column:9}}],line:156},"4":{loc:{start:{line:156,column:12},end:{line:156,column:79}},type:"binary-expr",locations:[{start:{line:156,column:13},end:{line:156,column:16}},{start:{line:156,column:20},end:{line:156,column:41}},{start:{line:156,column:47},end:{line:156,column:64}},{start:{line:156,column:68},end:{line:156,column:78}}],line:156},"5":{loc:{start:{line:159,column:8},end:{line:161,column:9}},type:"if",locations:[{start:{line:159,column:8},end:{line:161,column:9}},{start:{line:159,column:8},end:{line:161,column:9}}],line:159},"6":{loc:{start:{line:159,column:12},end:{line:159,column:26}},type:"binary-expr",locations:[{start:{line:159,column:12},end:{line:159,column:15}},{start:{line:159,column:19},end:{line:159,column:26}}],line:159},"7":{loc:{start:{line:162,column:25},end:{line:162,column:68}},type:"cond-expr",locations:[{start:{line:162,column:61},end:{line:162,column:62}},{start:{line:162,column:65},end:{line:162,column:68}}],line:162},"8":{loc:{start:{line:162,column:25},end:{line:162,column:58}},type:"binary-expr",locations:[{start:{line:162,column:25},end:{line:162,column:37}},{start:{line:162,column:41},end:{line:162,column:58}}],line:162}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/cumulative/cumulative.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/cumulative/cumulative.ts"],names:[],mappings:"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",sourcesContent:["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getTimestampWithProcessHRTime } from '../../common/time-util';\nimport {\n  validateArrayElementsNotNull,\n  validateNotNull,\n} from '../../common/validations';\nimport {\n  LabelKey,\n  LabelValue,\n  Metric,\n  MetricDescriptor,\n  MetricDescriptorType,\n  TimeSeries,\n  Timestamp,\n} from '../export/types';\nimport { Meter } from '../types';\nimport { hashLabelValues, initializeDefaultLabels } from '../utils';\nimport { CumulativePoint } from './types';\n\n/**\n * Cumulative metric is used to record aggregated metrics that represents a\n * single numerical value accumulated over a time interval. The value can only\n * increase or be reset to zero on restart or reset the event.\n */\nexport class Cumulative implements Meter {\n  private readonly metricDescriptor: MetricDescriptor;\n  private labelKeysLength: number;\n  private defaultLabelValues: LabelValue[];\n  private registeredPoints: Map<string, CumulativePoint> = new Map();\n  private readonly constantLabelValues: LabelValue[];\n\n  /**\n   * Constructs a new Cumulative instance.\n   *\n   * @param name The name of the metric.\n   * @param description The description of the metric.\n   * @param unit The unit of the metric.\n   * @param type The type of metric.\n   * @param labelKeys The list of the label keys.\n   * @param constantLabels The map of constant labels for the Metric.\n   */\n  constructor(\n    name: string,\n    description: string,\n    unit: string,\n    type: MetricDescriptorType,\n    readonly labelKeys: LabelKey[],\n    readonly constantLabels: Map<LabelKey, LabelValue>\n  ) {\n    this.labelKeysLength = labelKeys.length;\n    const keysAndConstantKeys = [...labelKeys, ...constantLabels.keys()];\n    this.constantLabelValues = [...constantLabels.values()];\n\n    this.metricDescriptor = {\n      name,\n      description,\n      unit,\n      type,\n      labelKeys: keysAndConstantKeys,\n    };\n    this.defaultLabelValues = initializeDefaultLabels(this.labelKeysLength);\n  }\n\n  /**\n   * Creates a TimeSeries and returns a Point if the specified\n   * labelValues is not already associated with this cumulative, else returns an\n   * existing Point.\n   *\n   * It is recommended to keep a reference to the Point instead of always\n   * calling this method for manual operations.\n   *\n   * @param labelValues The list of the label values.\n   * @returns The value of single cumulative.\n   */\n  getOrCreateTimeSeries(labelValues: LabelValue[]): CumulativePoint {\n    validateArrayElementsNotNull(\n      validateNotNull(labelValues, 'labelValues'),\n      'labelValue'\n    );\n    return this.registerTimeSeries(labelValues);\n  }\n\n  /**\n   * Returns a Point for a cumulative with all labels not set, or default\n   * labels.\n   *\n   * @returns The value of single cumulative.\n   */\n  getDefaultTimeSeries(): CumulativePoint {\n    return this.registerTimeSeries(this.defaultLabelValues);\n  }\n\n  /**\n   * Removes the TimeSeries from the cumulative metric, if it is present. i.e.\n   * references to previous Point objects are invalid (not part of the\n   * metric).\n   *\n   * @param labelValues The list of label values.\n   */\n  removeTimeSeries(labelValues: LabelValue[]): void {\n    validateNotNull(labelValues, 'labelValues');\n    this.registeredPoints.delete(hashLabelValues(labelValues));\n  }\n\n  /**\n   * Removes all TimeSeries from the cumulative metric. i.e. references to all\n   * previous Point objects are invalid (not part of the metric).\n   */\n  clear(): void {\n    this.registeredPoints.clear();\n  }\n\n  /**\n   * Registers a TimeSeries and returns a Point if the specified\n   * labelValues is not already associated with this cumulative, else returns an\n   * existing Point.\n   *\n   * @param labelValues The list of the label values.\n   * @returns The value of single cumulative.\n   */\n  private registerTimeSeries(labelValues: LabelValue[]): CumulativePoint {\n    const hash = hashLabelValues(labelValues);\n    // return if the specified labelValues is already associated with the point.\n    if (this.registeredPoints.has(hash)) {\n      return this.registeredPoints.get(hash)!;\n    }\n    if (this.labelKeysLength !== labelValues.length) {\n      throw new Error(\"Label Keys and Label Values don't have same size\");\n    }\n\n    const point = new CumulativePointEntry([\n      ...labelValues,\n      ...this.constantLabelValues,\n    ]);\n    this.registeredPoints.set(hash, point);\n    return point;\n  }\n\n  /**\n   * Provides a Metric with one or more TimeSeries.\n   *\n   * @returns The Metric, or null if TimeSeries is not present in Metric.\n   */\n  getMetric(): Metric | null {\n    if (this.registeredPoints.size === 0) {\n      return null;\n    }\n    const now: Timestamp = getTimestampWithProcessHRTime();\n    return {\n      descriptor: this.metricDescriptor,\n      timeseries: Array.from(this.registeredPoints, ([_, point]) =>\n        point.getTimeSeries(now)\n      ),\n    };\n  }\n}\n\n/**\n * The value of a single point in the Cumulative.TimeSeries.\n */\nexport class CumulativePointEntry implements CumulativePoint {\n  private readonly labelValues: LabelValue[];\n  private startTimestamp: Timestamp;\n  private value = 0;\n\n  constructor(labelValues: LabelValue[]) {\n    this.labelValues = labelValues;\n    this.startTimestamp = getTimestampWithProcessHRTime();\n  }\n\n  /** Reset cumulative metric. */\n  reset(): void {\n    this.value = 0;\n    this.startTimestamp = getTimestampWithProcessHRTime();\n  }\n\n  /**\n   * Increment the cumulative metric.\n   * @param val The new value.\n   */\n  inc(val?: number): void {\n    if ((val && !Number.isFinite(val)) || (val !== undefined && isNaN(val))) {\n      throw new TypeError(`Value is not a valid number: ${val}`);\n    }\n    if (val && val < 0) {\n      throw new Error('It is not possible to decrease a cumulative metric');\n    }\n    const incValue = val === null || val === undefined ? 1 : val;\n    this.value += incValue;\n  }\n\n  /**\n   * Returns the TimeSeries with one or more Point.\n   *\n   * @param now The time at which the cumulative is recorded.\n   * @returns The TimeSeries.\n   */\n  getTimeSeries(now: Timestamp): TimeSeries {\n    return {\n      labelValues: this.labelValues,\n      points: [{ value: this.value, timestamp: now }],\n      startTimestamp: this.startTimestamp,\n    };\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"cf199607c02ac4453270a547593b96d049eb4b5f"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_152agy7o0u=function(){return actualCoverage;};}return actualCoverage;}cov_152agy7o0u();cov_152agy7o0u().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_152agy7o0u().s[1]++;exports.CumulativePointEntry=exports.Cumulative=void 0;const time_util_1=(cov_152agy7o0u().s[2]++,require("../../common/time-util"));const validations_1=(cov_152agy7o0u().s[3]++,require("../../common/validations"));const utils_1=(cov_152agy7o0u().s[4]++,require("../utils"));/**
 * Cumulative metric is used to record aggregated metrics that represents a
 * single numerical value accumulated over a time interval. The value can only
 * increase or be reset to zero on restart or reset the event.
 */class Cumulative{/**
     * Constructs a new Cumulative instance.
     *
     * @param name The name of the metric.
     * @param description The description of the metric.
     * @param unit The unit of the metric.
     * @param type The type of metric.
     * @param labelKeys The list of the label keys.
     * @param constantLabels The map of constant labels for the Metric.
     */constructor(name,description,unit,type,labelKeys,constantLabels){cov_152agy7o0u().f[0]++;cov_152agy7o0u().s[5]++;this.labelKeys=labelKeys;cov_152agy7o0u().s[6]++;this.constantLabels=constantLabels;cov_152agy7o0u().s[7]++;this.registeredPoints=new Map();cov_152agy7o0u().s[8]++;this.labelKeysLength=labelKeys.length;const keysAndConstantKeys=(cov_152agy7o0u().s[9]++,[...labelKeys,...constantLabels.keys()]);cov_152agy7o0u().s[10]++;this.constantLabelValues=[...constantLabels.values()];cov_152agy7o0u().s[11]++;this.metricDescriptor={name,description,unit,type,labelKeys:keysAndConstantKeys};cov_152agy7o0u().s[12]++;this.defaultLabelValues=utils_1.initializeDefaultLabels(this.labelKeysLength);}/**
     * Creates a TimeSeries and returns a Point if the specified
     * labelValues is not already associated with this cumulative, else returns an
     * existing Point.
     *
     * It is recommended to keep a reference to the Point instead of always
     * calling this method for manual operations.
     *
     * @param labelValues The list of the label values.
     * @returns The value of single cumulative.
     */getOrCreateTimeSeries(labelValues){cov_152agy7o0u().f[1]++;cov_152agy7o0u().s[13]++;validations_1.validateArrayElementsNotNull(validations_1.validateNotNull(labelValues,'labelValues'),'labelValue');cov_152agy7o0u().s[14]++;return this.registerTimeSeries(labelValues);}/**
     * Returns a Point for a cumulative with all labels not set, or default
     * labels.
     *
     * @returns The value of single cumulative.
     */getDefaultTimeSeries(){cov_152agy7o0u().f[2]++;cov_152agy7o0u().s[15]++;return this.registerTimeSeries(this.defaultLabelValues);}/**
     * Removes the TimeSeries from the cumulative metric, if it is present. i.e.
     * references to previous Point objects are invalid (not part of the
     * metric).
     *
     * @param labelValues The list of label values.
     */removeTimeSeries(labelValues){cov_152agy7o0u().f[3]++;cov_152agy7o0u().s[16]++;validations_1.validateNotNull(labelValues,'labelValues');cov_152agy7o0u().s[17]++;this.registeredPoints.delete(utils_1.hashLabelValues(labelValues));}/**
     * Removes all TimeSeries from the cumulative metric. i.e. references to all
     * previous Point objects are invalid (not part of the metric).
     */clear(){cov_152agy7o0u().f[4]++;cov_152agy7o0u().s[18]++;this.registeredPoints.clear();}/**
     * Registers a TimeSeries and returns a Point if the specified
     * labelValues is not already associated with this cumulative, else returns an
     * existing Point.
     *
     * @param labelValues The list of the label values.
     * @returns The value of single cumulative.
     */registerTimeSeries(labelValues){cov_152agy7o0u().f[5]++;const hash=(cov_152agy7o0u().s[19]++,utils_1.hashLabelValues(labelValues));// return if the specified labelValues is already associated with the point.
cov_152agy7o0u().s[20]++;if(this.registeredPoints.has(hash)){cov_152agy7o0u().b[0][0]++;cov_152agy7o0u().s[21]++;return this.registeredPoints.get(hash);}else{cov_152agy7o0u().b[0][1]++;}cov_152agy7o0u().s[22]++;if(this.labelKeysLength!==labelValues.length){cov_152agy7o0u().b[1][0]++;cov_152agy7o0u().s[23]++;throw new Error("Label Keys and Label Values don't have same size");}else{cov_152agy7o0u().b[1][1]++;}const point=(cov_152agy7o0u().s[24]++,new CumulativePointEntry([...labelValues,...this.constantLabelValues]));cov_152agy7o0u().s[25]++;this.registeredPoints.set(hash,point);cov_152agy7o0u().s[26]++;return point;}/**
     * Provides a Metric with one or more TimeSeries.
     *
     * @returns The Metric, or null if TimeSeries is not present in Metric.
     */getMetric(){cov_152agy7o0u().f[6]++;cov_152agy7o0u().s[27]++;if(this.registeredPoints.size===0){cov_152agy7o0u().b[2][0]++;cov_152agy7o0u().s[28]++;return null;}else{cov_152agy7o0u().b[2][1]++;}const now=(cov_152agy7o0u().s[29]++,time_util_1.getTimestampWithProcessHRTime());cov_152agy7o0u().s[30]++;return{descriptor:this.metricDescriptor,timeseries:Array.from(this.registeredPoints,([_,point])=>{cov_152agy7o0u().f[7]++;cov_152agy7o0u().s[31]++;return point.getTimeSeries(now);})};}}cov_152agy7o0u().s[32]++;exports.Cumulative=Cumulative;/**
 * The value of a single point in the Cumulative.TimeSeries.
 */class CumulativePointEntry{constructor(labelValues){cov_152agy7o0u().f[8]++;cov_152agy7o0u().s[33]++;this.value=0;cov_152agy7o0u().s[34]++;this.labelValues=labelValues;cov_152agy7o0u().s[35]++;this.startTimestamp=time_util_1.getTimestampWithProcessHRTime();}/** Reset cumulative metric. */reset(){cov_152agy7o0u().f[9]++;cov_152agy7o0u().s[36]++;this.value=0;cov_152agy7o0u().s[37]++;this.startTimestamp=time_util_1.getTimestampWithProcessHRTime();}/**
     * Increment the cumulative metric.
     * @param val The new value.
     */inc(val){cov_152agy7o0u().f[10]++;cov_152agy7o0u().s[38]++;if((cov_152agy7o0u().b[4][0]++,val)&&(cov_152agy7o0u().b[4][1]++,!Number.isFinite(val))||(cov_152agy7o0u().b[4][2]++,val!==undefined)&&(cov_152agy7o0u().b[4][3]++,isNaN(val))){cov_152agy7o0u().b[3][0]++;cov_152agy7o0u().s[39]++;throw new TypeError(`Value is not a valid number: ${val}`);}else{cov_152agy7o0u().b[3][1]++;}cov_152agy7o0u().s[40]++;if((cov_152agy7o0u().b[6][0]++,val)&&(cov_152agy7o0u().b[6][1]++,val<0)){cov_152agy7o0u().b[5][0]++;cov_152agy7o0u().s[41]++;throw new Error('It is not possible to decrease a cumulative metric');}else{cov_152agy7o0u().b[5][1]++;}const incValue=(cov_152agy7o0u().s[42]++,(cov_152agy7o0u().b[8][0]++,val===null)||(cov_152agy7o0u().b[8][1]++,val===undefined)?(cov_152agy7o0u().b[7][0]++,1):(cov_152agy7o0u().b[7][1]++,val));cov_152agy7o0u().s[43]++;this.value+=incValue;}/**
     * Returns the TimeSeries with one or more Point.
     *
     * @param now The time at which the cumulative is recorded.
     * @returns The TimeSeries.
     */getTimeSeries(now){cov_152agy7o0u().f[11]++;cov_152agy7o0u().s[44]++;return{labelValues:this.labelValues,points:[{value:this.value,timestamp:now}],startTimestamp:this.startTimestamp};}}cov_152agy7o0u().s[45]++;exports.CumulativePointEntry=CumulativePointEntry;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMTUyYWd5N28wdSIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJlbmQiLCJmbk1hcCIsIm5hbWUiLCJkZWNsIiwibG9jIiwiYnJhbmNoTWFwIiwidHlwZSIsImxvY2F0aW9ucyIsInMiLCJmIiwiYiIsImlucHV0U291cmNlTWFwIiwidmVyc2lvbiIsImZpbGUiLCJzb3VyY2VzIiwibmFtZXMiLCJtYXBwaW5ncyIsInNvdXJjZXNDb250ZW50IiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSIsInRpbWVfdXRpbF8xIiwicmVxdWlyZSIsInZhbGlkYXRpb25zXzEiLCJ1dGlsc18xIiwiQ3VtdWxhdGl2ZSIsImNvbnN0cnVjdG9yIiwiZGVzY3JpcHRpb24iLCJ1bml0IiwibGFiZWxLZXlzIiwiY29uc3RhbnRMYWJlbHMiLCJyZWdpc3RlcmVkUG9pbnRzIiwiTWFwIiwibGFiZWxLZXlzTGVuZ3RoIiwibGVuZ3RoIiwia2V5c0FuZENvbnN0YW50S2V5cyIsImtleXMiLCJjb25zdGFudExhYmVsVmFsdWVzIiwidmFsdWVzIiwibWV0cmljRGVzY3JpcHRvciIsImRlZmF1bHRMYWJlbFZhbHVlcyIsImluaXRpYWxpemVEZWZhdWx0TGFiZWxzIiwiZ2V0T3JDcmVhdGVUaW1lU2VyaWVzIiwibGFiZWxWYWx1ZXMiLCJ2YWxpZGF0ZUFycmF5RWxlbWVudHNOb3ROdWxsIiwidmFsaWRhdGVOb3ROdWxsIiwicmVnaXN0ZXJUaW1lU2VyaWVzIiwiZ2V0RGVmYXVsdFRpbWVTZXJpZXMiLCJyZW1vdmVUaW1lU2VyaWVzIiwiZGVsZXRlIiwiaGFzaExhYmVsVmFsdWVzIiwiY2xlYXIiLCJoYXMiLCJnZXQiLCJFcnJvciIsInBvaW50IiwiQ3VtdWxhdGl2ZVBvaW50RW50cnkiLCJzZXQiLCJnZXRNZXRyaWMiLCJzaXplIiwibm93IiwiZ2V0VGltZXN0YW1wV2l0aFByb2Nlc3NIUlRpbWUiLCJkZXNjcmlwdG9yIiwidGltZXNlcmllcyIsIkFycmF5IiwiZnJvbSIsIl8iLCJnZXRUaW1lU2VyaWVzIiwiZXhwb3J0cyIsInZhbHVlIiwic3RhcnRUaW1lc3RhbXAiLCJyZXNldCIsImluYyIsInZhbCIsIk51bWJlciIsImlzRmluaXRlIiwidW5kZWZpbmVkIiwiaXNOYU4iLCJUeXBlRXJyb3IiLCJpbmNWYWx1ZSIsInBvaW50cyIsInRpbWVzdGFtcCJdLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VybWFpdGhhL3RyYWRlbWFzdGVyL2xpYnMvbGliLWV4dGVybmFsLW9wZW5jZW5zdXMtbm9kZS9zcmMvbWV0cmljcy9jdW11bGF0aXZlL2N1bXVsYXRpdmUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOSwgT3BlbkNlbnN1cyBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBnZXRUaW1lc3RhbXBXaXRoUHJvY2Vzc0hSVGltZSB9IGZyb20gJy4uLy4uL2NvbW1vbi90aW1lLXV0aWwnO1xuaW1wb3J0IHtcbiAgdmFsaWRhdGVBcnJheUVsZW1lbnRzTm90TnVsbCxcbiAgdmFsaWRhdGVOb3ROdWxsLFxufSBmcm9tICcuLi8uLi9jb21tb24vdmFsaWRhdGlvbnMnO1xuaW1wb3J0IHtcbiAgTGFiZWxLZXksXG4gIExhYmVsVmFsdWUsXG4gIE1ldHJpYyxcbiAgTWV0cmljRGVzY3JpcHRvcixcbiAgTWV0cmljRGVzY3JpcHRvclR5cGUsXG4gIFRpbWVTZXJpZXMsXG4gIFRpbWVzdGFtcCxcbn0gZnJvbSAnLi4vZXhwb3J0L3R5cGVzJztcbmltcG9ydCB7IE1ldGVyIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgaGFzaExhYmVsVmFsdWVzLCBpbml0aWFsaXplRGVmYXVsdExhYmVscyB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IEN1bXVsYXRpdmVQb2ludCB9IGZyb20gJy4vdHlwZXMnO1xuXG4vKipcbiAqIEN1bXVsYXRpdmUgbWV0cmljIGlzIHVzZWQgdG8gcmVjb3JkIGFnZ3JlZ2F0ZWQgbWV0cmljcyB0aGF0IHJlcHJlc2VudHMgYVxuICogc2luZ2xlIG51bWVyaWNhbCB2YWx1ZSBhY2N1bXVsYXRlZCBvdmVyIGEgdGltZSBpbnRlcnZhbC4gVGhlIHZhbHVlIGNhbiBvbmx5XG4gKiBpbmNyZWFzZSBvciBiZSByZXNldCB0byB6ZXJvIG9uIHJlc3RhcnQgb3IgcmVzZXQgdGhlIGV2ZW50LlxuICovXG5leHBvcnQgY2xhc3MgQ3VtdWxhdGl2ZSBpbXBsZW1lbnRzIE1ldGVyIHtcbiAgcHJpdmF0ZSByZWFkb25seSBtZXRyaWNEZXNjcmlwdG9yOiBNZXRyaWNEZXNjcmlwdG9yO1xuICBwcml2YXRlIGxhYmVsS2V5c0xlbmd0aDogbnVtYmVyO1xuICBwcml2YXRlIGRlZmF1bHRMYWJlbFZhbHVlczogTGFiZWxWYWx1ZVtdO1xuICBwcml2YXRlIHJlZ2lzdGVyZWRQb2ludHM6IE1hcDxzdHJpbmcsIEN1bXVsYXRpdmVQb2ludD4gPSBuZXcgTWFwKCk7XG4gIHByaXZhdGUgcmVhZG9ubHkgY29uc3RhbnRMYWJlbFZhbHVlczogTGFiZWxWYWx1ZVtdO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIGEgbmV3IEN1bXVsYXRpdmUgaW5zdGFuY2UuXG4gICAqXG4gICAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBtZXRyaWMuXG4gICAqIEBwYXJhbSBkZXNjcmlwdGlvbiBUaGUgZGVzY3JpcHRpb24gb2YgdGhlIG1ldHJpYy5cbiAgICogQHBhcmFtIHVuaXQgVGhlIHVuaXQgb2YgdGhlIG1ldHJpYy5cbiAgICogQHBhcmFtIHR5cGUgVGhlIHR5cGUgb2YgbWV0cmljLlxuICAgKiBAcGFyYW0gbGFiZWxLZXlzIFRoZSBsaXN0IG9mIHRoZSBsYWJlbCBrZXlzLlxuICAgKiBAcGFyYW0gY29uc3RhbnRMYWJlbHMgVGhlIG1hcCBvZiBjb25zdGFudCBsYWJlbHMgZm9yIHRoZSBNZXRyaWMuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgZGVzY3JpcHRpb246IHN0cmluZyxcbiAgICB1bml0OiBzdHJpbmcsXG4gICAgdHlwZTogTWV0cmljRGVzY3JpcHRvclR5cGUsXG4gICAgcmVhZG9ubHkgbGFiZWxLZXlzOiBMYWJlbEtleVtdLFxuICAgIHJlYWRvbmx5IGNvbnN0YW50TGFiZWxzOiBNYXA8TGFiZWxLZXksIExhYmVsVmFsdWU+XG4gICkge1xuICAgIHRoaXMubGFiZWxLZXlzTGVuZ3RoID0gbGFiZWxLZXlzLmxlbmd0aDtcbiAgICBjb25zdCBrZXlzQW5kQ29uc3RhbnRLZXlzID0gWy4uLmxhYmVsS2V5cywgLi4uY29uc3RhbnRMYWJlbHMua2V5cygpXTtcbiAgICB0aGlzLmNvbnN0YW50TGFiZWxWYWx1ZXMgPSBbLi4uY29uc3RhbnRMYWJlbHMudmFsdWVzKCldO1xuXG4gICAgdGhpcy5tZXRyaWNEZXNjcmlwdG9yID0ge1xuICAgICAgbmFtZSxcbiAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgdW5pdCxcbiAgICAgIHR5cGUsXG4gICAgICBsYWJlbEtleXM6IGtleXNBbmRDb25zdGFudEtleXMsXG4gICAgfTtcbiAgICB0aGlzLmRlZmF1bHRMYWJlbFZhbHVlcyA9IGluaXRpYWxpemVEZWZhdWx0TGFiZWxzKHRoaXMubGFiZWxLZXlzTGVuZ3RoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgVGltZVNlcmllcyBhbmQgcmV0dXJucyBhIFBvaW50IGlmIHRoZSBzcGVjaWZpZWRcbiAgICogbGFiZWxWYWx1ZXMgaXMgbm90IGFscmVhZHkgYXNzb2NpYXRlZCB3aXRoIHRoaXMgY3VtdWxhdGl2ZSwgZWxzZSByZXR1cm5zIGFuXG4gICAqIGV4aXN0aW5nIFBvaW50LlxuICAgKlxuICAgKiBJdCBpcyByZWNvbW1lbmRlZCB0byBrZWVwIGEgcmVmZXJlbmNlIHRvIHRoZSBQb2ludCBpbnN0ZWFkIG9mIGFsd2F5c1xuICAgKiBjYWxsaW5nIHRoaXMgbWV0aG9kIGZvciBtYW51YWwgb3BlcmF0aW9ucy5cbiAgICpcbiAgICogQHBhcmFtIGxhYmVsVmFsdWVzIFRoZSBsaXN0IG9mIHRoZSBsYWJlbCB2YWx1ZXMuXG4gICAqIEByZXR1cm5zIFRoZSB2YWx1ZSBvZiBzaW5nbGUgY3VtdWxhdGl2ZS5cbiAgICovXG4gIGdldE9yQ3JlYXRlVGltZVNlcmllcyhsYWJlbFZhbHVlczogTGFiZWxWYWx1ZVtdKTogQ3VtdWxhdGl2ZVBvaW50IHtcbiAgICB2YWxpZGF0ZUFycmF5RWxlbWVudHNOb3ROdWxsKFxuICAgICAgdmFsaWRhdGVOb3ROdWxsKGxhYmVsVmFsdWVzLCAnbGFiZWxWYWx1ZXMnKSxcbiAgICAgICdsYWJlbFZhbHVlJ1xuICAgICk7XG4gICAgcmV0dXJuIHRoaXMucmVnaXN0ZXJUaW1lU2VyaWVzKGxhYmVsVmFsdWVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgUG9pbnQgZm9yIGEgY3VtdWxhdGl2ZSB3aXRoIGFsbCBsYWJlbHMgbm90IHNldCwgb3IgZGVmYXVsdFxuICAgKiBsYWJlbHMuXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSB2YWx1ZSBvZiBzaW5nbGUgY3VtdWxhdGl2ZS5cbiAgICovXG4gIGdldERlZmF1bHRUaW1lU2VyaWVzKCk6IEN1bXVsYXRpdmVQb2ludCB7XG4gICAgcmV0dXJuIHRoaXMucmVnaXN0ZXJUaW1lU2VyaWVzKHRoaXMuZGVmYXVsdExhYmVsVmFsdWVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIHRoZSBUaW1lU2VyaWVzIGZyb20gdGhlIGN1bXVsYXRpdmUgbWV0cmljLCBpZiBpdCBpcyBwcmVzZW50LiBpLmUuXG4gICAqIHJlZmVyZW5jZXMgdG8gcHJldmlvdXMgUG9pbnQgb2JqZWN0cyBhcmUgaW52YWxpZCAobm90IHBhcnQgb2YgdGhlXG4gICAqIG1ldHJpYykuXG4gICAqXG4gICAqIEBwYXJhbSBsYWJlbFZhbHVlcyBUaGUgbGlzdCBvZiBsYWJlbCB2YWx1ZXMuXG4gICAqL1xuICByZW1vdmVUaW1lU2VyaWVzKGxhYmVsVmFsdWVzOiBMYWJlbFZhbHVlW10pOiB2b2lkIHtcbiAgICB2YWxpZGF0ZU5vdE51bGwobGFiZWxWYWx1ZXMsICdsYWJlbFZhbHVlcycpO1xuICAgIHRoaXMucmVnaXN0ZXJlZFBvaW50cy5kZWxldGUoaGFzaExhYmVsVmFsdWVzKGxhYmVsVmFsdWVzKSk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbGwgVGltZVNlcmllcyBmcm9tIHRoZSBjdW11bGF0aXZlIG1ldHJpYy4gaS5lLiByZWZlcmVuY2VzIHRvIGFsbFxuICAgKiBwcmV2aW91cyBQb2ludCBvYmplY3RzIGFyZSBpbnZhbGlkIChub3QgcGFydCBvZiB0aGUgbWV0cmljKS5cbiAgICovXG4gIGNsZWFyKCk6IHZvaWQge1xuICAgIHRoaXMucmVnaXN0ZXJlZFBvaW50cy5jbGVhcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBhIFRpbWVTZXJpZXMgYW5kIHJldHVybnMgYSBQb2ludCBpZiB0aGUgc3BlY2lmaWVkXG4gICAqIGxhYmVsVmFsdWVzIGlzIG5vdCBhbHJlYWR5IGFzc29jaWF0ZWQgd2l0aCB0aGlzIGN1bXVsYXRpdmUsIGVsc2UgcmV0dXJucyBhblxuICAgKiBleGlzdGluZyBQb2ludC5cbiAgICpcbiAgICogQHBhcmFtIGxhYmVsVmFsdWVzIFRoZSBsaXN0IG9mIHRoZSBsYWJlbCB2YWx1ZXMuXG4gICAqIEByZXR1cm5zIFRoZSB2YWx1ZSBvZiBzaW5nbGUgY3VtdWxhdGl2ZS5cbiAgICovXG4gIHByaXZhdGUgcmVnaXN0ZXJUaW1lU2VyaWVzKGxhYmVsVmFsdWVzOiBMYWJlbFZhbHVlW10pOiBDdW11bGF0aXZlUG9pbnQge1xuICAgIGNvbnN0IGhhc2ggPSBoYXNoTGFiZWxWYWx1ZXMobGFiZWxWYWx1ZXMpO1xuICAgIC8vIHJldHVybiBpZiB0aGUgc3BlY2lmaWVkIGxhYmVsVmFsdWVzIGlzIGFscmVhZHkgYXNzb2NpYXRlZCB3aXRoIHRoZSBwb2ludC5cbiAgICBpZiAodGhpcy5yZWdpc3RlcmVkUG9pbnRzLmhhcyhoYXNoKSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVnaXN0ZXJlZFBvaW50cy5nZXQoaGFzaCkhO1xuICAgIH1cbiAgICBpZiAodGhpcy5sYWJlbEtleXNMZW5ndGggIT09IGxhYmVsVmFsdWVzLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTGFiZWwgS2V5cyBhbmQgTGFiZWwgVmFsdWVzIGRvbid0IGhhdmUgc2FtZSBzaXplXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IHBvaW50ID0gbmV3IEN1bXVsYXRpdmVQb2ludEVudHJ5KFtcbiAgICAgIC4uLmxhYmVsVmFsdWVzLFxuICAgICAgLi4udGhpcy5jb25zdGFudExhYmVsVmFsdWVzLFxuICAgIF0pO1xuICAgIHRoaXMucmVnaXN0ZXJlZFBvaW50cy5zZXQoaGFzaCwgcG9pbnQpO1xuICAgIHJldHVybiBwb2ludDtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm92aWRlcyBhIE1ldHJpYyB3aXRoIG9uZSBvciBtb3JlIFRpbWVTZXJpZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBNZXRyaWMsIG9yIG51bGwgaWYgVGltZVNlcmllcyBpcyBub3QgcHJlc2VudCBpbiBNZXRyaWMuXG4gICAqL1xuICBnZXRNZXRyaWMoKTogTWV0cmljIHwgbnVsbCB7XG4gICAgaWYgKHRoaXMucmVnaXN0ZXJlZFBvaW50cy5zaXplID09PSAwKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3Qgbm93OiBUaW1lc3RhbXAgPSBnZXRUaW1lc3RhbXBXaXRoUHJvY2Vzc0hSVGltZSgpO1xuICAgIHJldHVybiB7XG4gICAgICBkZXNjcmlwdG9yOiB0aGlzLm1ldHJpY0Rlc2NyaXB0b3IsXG4gICAgICB0aW1lc2VyaWVzOiBBcnJheS5mcm9tKHRoaXMucmVnaXN0ZXJlZFBvaW50cywgKFtfLCBwb2ludF0pID0+XG4gICAgICAgIHBvaW50LmdldFRpbWVTZXJpZXMobm93KVxuICAgICAgKSxcbiAgICB9O1xuICB9XG59XG5cbi8qKlxuICogVGhlIHZhbHVlIG9mIGEgc2luZ2xlIHBvaW50IGluIHRoZSBDdW11bGF0aXZlLlRpbWVTZXJpZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBDdW11bGF0aXZlUG9pbnRFbnRyeSBpbXBsZW1lbnRzIEN1bXVsYXRpdmVQb2ludCB7XG4gIHByaXZhdGUgcmVhZG9ubHkgbGFiZWxWYWx1ZXM6IExhYmVsVmFsdWVbXTtcbiAgcHJpdmF0ZSBzdGFydFRpbWVzdGFtcDogVGltZXN0YW1wO1xuICBwcml2YXRlIHZhbHVlID0gMDtcblxuICBjb25zdHJ1Y3RvcihsYWJlbFZhbHVlczogTGFiZWxWYWx1ZVtdKSB7XG4gICAgdGhpcy5sYWJlbFZhbHVlcyA9IGxhYmVsVmFsdWVzO1xuICAgIHRoaXMuc3RhcnRUaW1lc3RhbXAgPSBnZXRUaW1lc3RhbXBXaXRoUHJvY2Vzc0hSVGltZSgpO1xuICB9XG5cbiAgLyoqIFJlc2V0IGN1bXVsYXRpdmUgbWV0cmljLiAqL1xuICByZXNldCgpOiB2b2lkIHtcbiAgICB0aGlzLnZhbHVlID0gMDtcbiAgICB0aGlzLnN0YXJ0VGltZXN0YW1wID0gZ2V0VGltZXN0YW1wV2l0aFByb2Nlc3NIUlRpbWUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbmNyZW1lbnQgdGhlIGN1bXVsYXRpdmUgbWV0cmljLlxuICAgKiBAcGFyYW0gdmFsIFRoZSBuZXcgdmFsdWUuXG4gICAqL1xuICBpbmModmFsPzogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKCh2YWwgJiYgIU51bWJlci5pc0Zpbml0ZSh2YWwpKSB8fCAodmFsICE9PSB1bmRlZmluZWQgJiYgaXNOYU4odmFsKSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFZhbHVlIGlzIG5vdCBhIHZhbGlkIG51bWJlcjogJHt2YWx9YCk7XG4gICAgfVxuICAgIGlmICh2YWwgJiYgdmFsIDwgMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJdCBpcyBub3QgcG9zc2libGUgdG8gZGVjcmVhc2UgYSBjdW11bGF0aXZlIG1ldHJpYycpO1xuICAgIH1cbiAgICBjb25zdCBpbmNWYWx1ZSA9IHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCA/IDEgOiB2YWw7XG4gICAgdGhpcy52YWx1ZSArPSBpbmNWYWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBUaW1lU2VyaWVzIHdpdGggb25lIG9yIG1vcmUgUG9pbnQuXG4gICAqXG4gICAqIEBwYXJhbSBub3cgVGhlIHRpbWUgYXQgd2hpY2ggdGhlIGN1bXVsYXRpdmUgaXMgcmVjb3JkZWQuXG4gICAqIEByZXR1cm5zIFRoZSBUaW1lU2VyaWVzLlxuICAgKi9cbiAgZ2V0VGltZVNlcmllcyhub3c6IFRpbWVzdGFtcCk6IFRpbWVTZXJpZXMge1xuICAgIHJldHVybiB7XG4gICAgICBsYWJlbFZhbHVlczogdGhpcy5sYWJlbFZhbHVlcyxcbiAgICAgIHBvaW50czogW3sgdmFsdWU6IHRoaXMudmFsdWUsIHRpbWVzdGFtcDogbm93IH1dLFxuICAgICAgc3RhcnRUaW1lc3RhbXA6IHRoaXMuc3RhcnRUaW1lc3RhbXAsXG4gICAgfTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiYUFBQTs7Ozs7Ozs7Ozs7Ozs7R0FBQSxTQUFBQSxlQUFBLE1BQUFDLElBQUEsNEdBQUFDLElBQUEsZ0RBQUFDLE1BQUEsS0FBQUMsUUFBQSxzQkFBQUMsR0FBQSxvQkFBQUMsWUFBQSxFQUFBTCxJQUFBLHdHQUFBTSxZQUFBLE9BQUFDLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLGFBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLE9BQUFFLEtBQUEsT0FBQUMsSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxLQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFELElBQUEsVUFBQUksSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxLQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFELElBQUEsVUFBQUksSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxLQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFELElBQUEsVUFBQUksSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxLQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFELElBQUEsVUFBQUksSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxLQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFELElBQUEsVUFBQUksSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsS0FBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsS0FBQUMsTUFBQSxLQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLEtBQUFELElBQUEsV0FBQUksSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsS0FBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsS0FBQUMsTUFBQSxLQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLEtBQUFELElBQUEsV0FBQUksSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsS0FBQUMsTUFBQSxLQUFBQyxHQUFBLEVBQUFGLElBQUEsS0FBQUMsTUFBQSxNQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLE1BQUFELElBQUEsV0FBQUksSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsS0FBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsS0FBQUMsTUFBQSxLQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLEtBQUFELElBQUEsV0FBQUksSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsS0FBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsS0FBQUMsTUFBQSxLQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLEtBQUFELElBQUEsWUFBQUksSUFBQSxrQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsS0FBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsS0FBQUMsTUFBQSxLQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLEtBQUFELElBQUEsWUFBQUksSUFBQSxrQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsS0FBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsS0FBQUMsTUFBQSxLQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLEtBQUFELElBQUEsT0FBQU8sU0FBQSxPQUFBRCxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLEtBQUFPLElBQUEsTUFBQUMsU0FBQSxHQUFBVixLQUFBLEVBQUFDLElBQUEsS0FBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsS0FBQUMsTUFBQSxNQUFBRixLQUFBLEVBQUFDLElBQUEsS0FBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsS0FBQUMsTUFBQSxNQUFBRCxJQUFBLFdBQUFNLEdBQUEsRUFBQVAsS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsS0FBQU8sSUFBQSxNQUFBQyxTQUFBLEdBQUFWLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLE1BQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLE1BQUFELElBQUEsV0FBQU0sR0FBQSxFQUFBUCxLQUFBLEVBQUFDLElBQUEsS0FBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsS0FBQUMsTUFBQSxLQUFBTyxJQUFBLE1BQUFDLFNBQUEsR0FBQVYsS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsTUFBQUYsS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsTUFBQUQsSUFBQSxXQUFBTSxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLEtBQUFPLElBQUEsTUFBQUMsU0FBQSxHQUFBVixLQUFBLEVBQUFDLElBQUEsS0FBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsS0FBQUMsTUFBQSxNQUFBRixLQUFBLEVBQUFDLElBQUEsS0FBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsS0FBQUMsTUFBQSxNQUFBRCxJQUFBLFdBQUFNLEdBQUEsRUFBQVAsS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1BQUEsS0FBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsTUFBQU8sSUFBQSxlQUFBQyxTQUFBLEdBQUFWLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLE9BQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLE9BQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLE9BQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLE9BQUFELElBQUEsV0FBQU0sR0FBQSxFQUFBUCxLQUFBLEVBQUFDLElBQUEsS0FBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsS0FBQUMsTUFBQSxLQUFBTyxJQUFBLE1BQUFDLFNBQUEsR0FBQVYsS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsTUFBQUYsS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsTUFBQUQsSUFBQSxXQUFBTSxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLE1BQUFPLElBQUEsZUFBQUMsU0FB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