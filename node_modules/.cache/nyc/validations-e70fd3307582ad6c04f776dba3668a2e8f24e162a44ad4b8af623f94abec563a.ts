"use strict";/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_rupgg3gao(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/validations.ts";var hash="f2c9b1f0349414061034755ecff7e3f3fc4bcb8c";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/validations.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:0},end:{line:18,column:140}},"2":{start:{line:28,column:4},end:{line:30,column:5}},"3":{start:{line:29,column:8},end:{line:29,column:71}},"4":{start:{line:31,column:4},end:{line:31,column:21}},"5":{start:{line:33,column:0},end:{line:33,column:42}},"6":{start:{line:41,column:26},end:{line:41,column:100}},"7":{start:{line:41,column:49},end:{line:41,column:99}},"8":{start:{line:42,column:4},end:{line:44,column:5}},"9":{start:{line:43,column:8},end:{line:43,column:73}},"10":{start:{line:46,column:0},end:{line:46,column:68}},"11":{start:{line:49,column:4},end:{line:53,column:5}},"12":{start:{line:50,column:8},end:{line:52,column:9}},"13":{start:{line:51,column:12},end:{line:51,column:77}},"14":{start:{line:55,column:0},end:{line:55,column:62}},"15":{start:{line:58,column:32},end:{line:58,column:92}},"16":{start:{line:58,column:85},end:{line:58,column:90}},"17":{start:{line:59,column:4},end:{line:61,column:5}},"18":{start:{line:60,column:8},end:{line:60,column:139}},"19":{start:{line:63,column:0},end:{line:63,column:54}}},fnMap:{"0":{name:"validateNotNull",decl:{start:{line:27,column:9},end:{line:27,column:24}},loc:{start:{line:27,column:50},end:{line:32,column:1}},line:27},"1":{name:"validateArrayElementsNotNull",decl:{start:{line:40,column:9},end:{line:40,column:37}},loc:{start:{line:40,column:59},end:{line:45,column:1}},line:40},"2":{name:"(anonymous_2)",decl:{start:{line:41,column:38},end:{line:41,column:39}},loc:{start:{line:41,column:49},end:{line:41,column:99}},line:41},"3":{name:"validateMapElementNotNull",decl:{start:{line:48,column:9},end:{line:48,column:34}},loc:{start:{line:48,column:54},end:{line:54,column:1}},line:48},"4":{name:"validateDuplicateKeys",decl:{start:{line:57,column:9},end:{line:57,column:30}},loc:{start:{line:57,column:53},end:{line:62,column:1}},line:57},"5":{name:"(anonymous_5)",decl:{start:{line:58,column:80},end:{line:58,column:81}},loc:{start:{line:58,column:85},end:{line:58,column:90}},line:58}},branchMap:{"0":{loc:{start:{line:28,column:4},end:{line:30,column:5}},type:"if",locations:[{start:{line:28,column:4},end:{line:30,column:5}},{start:{line:28,column:4},end:{line:30,column:5}}],line:28},"1":{loc:{start:{line:28,column:8},end:{line:28,column:53}},type:"binary-expr",locations:[{start:{line:28,column:8},end:{line:28,column:26}},{start:{line:28,column:30},end:{line:28,column:53}}],line:28},"2":{loc:{start:{line:41,column:49},end:{line:41,column:99}},type:"binary-expr",locations:[{start:{line:41,column:49},end:{line:41,column:65}},{start:{line:41,column:69},end:{line:41,column:99}}],line:41},"3":{loc:{start:{line:42,column:4},end:{line:44,column:5}},type:"if",locations:[{start:{line:42,column:4},end:{line:44,column:5}},{start:{line:42,column:4},end:{line:44,column:5}}],line:42},"4":{loc:{start:{line:50,column:8},end:{line:52,column:9}},type:"if",locations:[{start:{line:50,column:8},end:{line:52,column:9}},{start:{line:50,column:8},end:{line:52,column:9}}],line:50},"5":{loc:{start:{line:50,column:12},end:{line:50,column:40}},type:"binary-expr",locations:[{start:{line:50,column:12},end:{line:50,column:23}},{start:{line:50,column:27},end:{line:50,column:40}}],line:50},"6":{loc:{start:{line:59,column:4},end:{line:61,column:5}},type:"if",locations:[{start:{line:59,column:4},end:{line:61,column:5}},{start:{line:59,column:4},end:{line:61,column:5}}],line:59}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/validations.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/validations.ts"],names:[],mappings:";AAAA;;;;;;;;;;;;;;GAcG;;;AAIH;;;;;;;GAOG;AACH,SAAgB,eAAe,CAAI,SAAY,EAAE,YAAoB;IACnE,IAAI,SAAS,KAAK,IAAI,IAAI,SAAS,KAAK,SAAS,EAAE;QACjD,MAAM,IAAI,KAAK,CAAC,qBAAqB,YAAY,YAAY,CAAC,CAAC;KAChE;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AALD,0CAKC;AAED;;;;;GAKG;AACH,SAAgB,4BAA4B,CAC1C,KAAU,EACV,YAAoB;IAEpB,MAAM,aAAa,GAAG,KAAK,CAAC,KAAK,CAC/B,OAAO,CAAC,EAAE,CAAC,OAAO,KAAK,IAAI,IAAI,OAAO,OAAO,KAAK,WAAW,CAC9D,CAAC;IACF,IAAI,CAAC,aAAa,EAAE;QAClB,MAAM,IAAI,KAAK,CAAC,GAAG,YAAY,gCAAgC,CAAC,CAAC;KAClE;AACH,CAAC;AAVD,oEAUC;AAED,0DAA0D;AAC1D,SAAgB,yBAAyB,CACvC,GAAc,EACd,YAAoB;IAEpB,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,GAAG,CAAC,OAAO,EAAE,EAAE;QACxC,IAAI,GAAG,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,EAAE;YAChC,MAAM,IAAI,KAAK,CAAC,GAAG,YAAY,gCAAgC,CAAC,CAAC;SAClE;KACF;AACH,CAAC;AATD,8DASC;AAED,sEAAsE;AACtE,SAAgB,qBAAqB,CACnC,IAAgB,EAChB,cAAyC;IAEzC,MAAM,mBAAmB,GAAG,IAAI,GAAG,CACjC,CAAC,GAAG,IAAI,EAAE,GAAG,cAAc,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CACpD,CAAC;IACF,IAAI,mBAAmB,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,GAAG,cAAc,CAAC,IAAI,EAAE;QAClE,MAAM,IAAI,KAAK,CACb,iHAAiH,CAClH,CAAC;KACH;AACH,CAAC;AAZD,sDAYC",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LabelKey, LabelValue } from '../metrics/export/types';\n\n/**\n * Validates that an object reference passed as a parameter to the calling\n * method is not null.\n *\n * @param reference An object reference.\n * @param errorMessage The exception message to use if the check fails.\n * @returns An object reference.\n */\nexport function validateNotNull<T>(reference: T, errorMessage: string): T {\n  if (reference === null || reference === undefined) {\n    throw new Error(`Missing mandatory ${errorMessage} parameter`);\n  }\n  return reference;\n}\n\n/**\n * Validates that an array passed as a parameter doesn't contain null element.\n *\n * @param list The argument list to check for null.\n * @param errorMessage The exception message to use if the check fails.\n */\nexport function validateArrayElementsNotNull<T>(\n  array: T[],\n  errorMessage: string\n) {\n  const areAllDefined = array.every(\n    element => element !== null && typeof element !== 'undefined'\n  );\n  if (!areAllDefined) {\n    throw new Error(`${errorMessage} elements should not be a NULL`);\n  }\n}\n\n/** Throws an error if any of the map elements is null. */\nexport function validateMapElementNotNull<K, V>(\n  map: Map<K, V>,\n  errorMessage: string\n) {\n  for (const [key, value] of map.entries()) {\n    if (key == null || value == null) {\n      throw new Error(`${errorMessage} elements should not be a NULL`);\n    }\n  }\n}\n\n/** Throws an error if any of the array element present in the map. */\nexport function validateDuplicateKeys(\n  keys: LabelKey[],\n  constantLabels: Map<LabelKey, LabelValue>\n) {\n  const keysAndConstantKeys = new Set(\n    [...keys, ...constantLabels.keys()].map(k => k.key)\n  );\n  if (keysAndConstantKeys.size !== keys.length + constantLabels.size) {\n    throw new Error(\n      `The keys from LabelKeys should not be present in constantLabels or LabelKeys should not contains duplicate keys`\n    );\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"f2c9b1f0349414061034755ecff7e3f3fc4bcb8c"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_rupgg3gao=function(){return actualCoverage;};}return actualCoverage;}cov_rupgg3gao();cov_rupgg3gao().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_rupgg3gao().s[1]++;exports.validateDuplicateKeys=exports.validateMapElementNotNull=exports.validateArrayElementsNotNull=exports.validateNotNull=void 0;/**
 * Validates that an object reference passed as a parameter to the calling
 * method is not null.
 *
 * @param reference An object reference.
 * @param errorMessage The exception message to use if the check fails.
 * @returns An object reference.
 */function validateNotNull(reference,errorMessage){cov_rupgg3gao().f[0]++;cov_rupgg3gao().s[2]++;if((cov_rupgg3gao().b[1][0]++,reference===null)||(cov_rupgg3gao().b[1][1]++,reference===undefined)){cov_rupgg3gao().b[0][0]++;cov_rupgg3gao().s[3]++;throw new Error(`Missing mandatory ${errorMessage} parameter`);}else{cov_rupgg3gao().b[0][1]++;}cov_rupgg3gao().s[4]++;return reference;}cov_rupgg3gao().s[5]++;exports.validateNotNull=validateNotNull;/**
 * Validates that an array passed as a parameter doesn't contain null element.
 *
 * @param list The argument list to check for null.
 * @param errorMessage The exception message to use if the check fails.
 */function validateArrayElementsNotNull(array,errorMessage){cov_rupgg3gao().f[1]++;const areAllDefined=(cov_rupgg3gao().s[6]++,array.every(element=>{cov_rupgg3gao().f[2]++;cov_rupgg3gao().s[7]++;return(cov_rupgg3gao().b[2][0]++,element!==null)&&(cov_rupgg3gao().b[2][1]++,typeof element!=='undefined');}));cov_rupgg3gao().s[8]++;if(!areAllDefined){cov_rupgg3gao().b[3][0]++;cov_rupgg3gao().s[9]++;throw new Error(`${errorMessage} elements should not be a NULL`);}else{cov_rupgg3gao().b[3][1]++;}}cov_rupgg3gao().s[10]++;exports.validateArrayElementsNotNull=validateArrayElementsNotNull;/** Throws an error if any of the map elements is null. */function validateMapElementNotNull(map,errorMessage){cov_rupgg3gao().f[3]++;cov_rupgg3gao().s[11]++;for(const[key,value]of map.entries()){cov_rupgg3gao().s[12]++;if((cov_rupgg3gao().b[5][0]++,key==null)||(cov_rupgg3gao().b[5][1]++,value==null)){cov_rupgg3gao().b[4][0]++;cov_rupgg3gao().s[13]++;throw new Error(`${errorMessage} elements should not be a NULL`);}else{cov_rupgg3gao().b[4][1]++;}}}cov_rupgg3gao().s[14]++;exports.validateMapElementNotNull=validateMapElementNotNull;/** Throws an error if any of the array element present in the map. */function validateDuplicateKeys(keys,constantLabels){cov_rupgg3gao().f[4]++;const keysAndConstantKeys=(cov_rupgg3gao().s[15]++,new Set([...keys,...constantLabels.keys()].map(k=>{cov_rupgg3gao().f[5]++;cov_rupgg3gao().s[16]++;return k.key;})));cov_rupgg3gao().s[17]++;if(keysAndConstantKeys.size!==keys.length+constantLabels.size){cov_rupgg3gao().b[6][0]++;cov_rupgg3gao().s[18]++;throw new Error(`The keys from LabelKeys should not be present in constantLabels or LabelKeys should not contains duplicate keys`);}else{cov_rupgg3gao().b[6][1]++;}}cov_rupgg3gao().s[19]++;exports.validateDuplicateKeys=validateDuplicateKeys;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3VzZXJtYWl0aGEvdHJhZGVtYXN0ZXIvbGlicy9saWItZXh0ZXJuYWwtb3BlbmNlbnN1cy1ub2RlL3NyYy9jb21tb24vdmFsaWRhdGlvbnMudHMiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VybWFpdGhhL3RyYWRlbWFzdGVyL2xpYnMvbGliLWV4dGVybmFsLW9wZW5jZW5zdXMtbm9kZS9zcmMvY29tbW9uL3ZhbGlkYXRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7R0FjRzs7O0FBSUg7Ozs7Ozs7R0FPRztBQUNILFNBQWdCLGVBQWUsQ0FBSSxTQUFZLEVBQUUsWUFBb0I7SUFDbkUsSUFBSSxTQUFTLEtBQUssSUFBSSxJQUFJLFNBQVMsS0FBSyxTQUFTLEVBQUU7UUFDakQsTUFBTSxJQUFJLEtBQUssQ0FBQyxxQkFBcUIsWUFBWSxZQUFZLENBQUMsQ0FBQztLQUNoRTtJQUNELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUM7QUFMRCwwQ0FLQztBQUVEOzs7OztHQUtHO0FBQ0gsU0FBZ0IsNEJBQTRCLENBQzFDLEtBQVUsRUFDVixZQUFvQjtJQUVwQixNQUFNLGFBQWEsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUMvQixPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sS0FBSyxJQUFJLElBQUksT0FBTyxPQUFPLEtBQUssV0FBVyxDQUM5RCxDQUFDO0lBQ0YsSUFBSSxDQUFDLGFBQWEsRUFBRTtRQUNsQixNQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsWUFBWSxnQ0FBZ0MsQ0FBQyxDQUFDO0tBQ2xFO0FBQ0gsQ0FBQztBQVZELG9FQVVDO0FBRUQsMERBQTBEO0FBQzFELFNBQWdCLHlCQUF5QixDQUN2QyxHQUFjLEVBQ2QsWUFBb0I7SUFFcEIsS0FBSyxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxJQUFJLEdBQUcsQ0FBQyxPQUFPLEVBQUUsRUFBRTtRQUN4QyxJQUFJLEdBQUcsSUFBSSxJQUFJLElBQUksS0FBSyxJQUFJLElBQUksRUFBRTtZQUNoQyxNQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsWUFBWSxnQ0FBZ0MsQ0FBQyxDQUFDO1NBQ2xFO0tBQ0Y7QUFDSCxDQUFDO0FBVEQsOERBU0M7QUFFRCxzRUFBc0U7QUFDdEUsU0FBZ0IscUJBQXFCLENBQ25DLElBQWdCLEVBQ2hCLGNBQXlDO0lBRXpDLE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxHQUFHLENBQ2pDLENBQUMsR0FBRyxJQUFJLEVBQUUsR0FBRyxjQUFjLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQ3BELENBQUM7SUFDRixJQUFJLG1CQUFtQixDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsTUFBTSxHQUFHLGNBQWMsQ0FBQyxJQUFJLEVBQUU7UUFDbEUsTUFBTSxJQUFJLEtBQUssQ0FDYixpSEFBaUgsQ0FDbEgsQ0FBQztLQUNIO0FBQ0gsQ0FBQztBQVpELHNEQVlDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCwgT3BlbkNlbnN1cyBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBMYWJlbEtleSwgTGFiZWxWYWx1ZSB9IGZyb20gJy4uL21ldHJpY3MvZXhwb3J0L3R5cGVzJztcblxuLyoqXG4gKiBWYWxpZGF0ZXMgdGhhdCBhbiBvYmplY3QgcmVmZXJlbmNlIHBhc3NlZCBhcyBhIHBhcmFtZXRlciB0byB0aGUgY2FsbGluZ1xuICogbWV0aG9kIGlzIG5vdCBudWxsLlxuICpcbiAqIEBwYXJhbSByZWZlcmVuY2UgQW4gb2JqZWN0IHJlZmVyZW5jZS5cbiAqIEBwYXJhbSBlcnJvck1lc3NhZ2UgVGhlIGV4Y2VwdGlvbiBtZXNzYWdlIHRvIHVzZSBpZiB0aGUgY2hlY2sgZmFpbHMuXG4gKiBAcmV0dXJucyBBbiBvYmplY3QgcmVmZXJlbmNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVOb3ROdWxsPFQ+KHJlZmVyZW5jZTogVCwgZXJyb3JNZXNzYWdlOiBzdHJpbmcpOiBUIHtcbiAgaWYgKHJlZmVyZW5jZSA9PT0gbnVsbCB8fCByZWZlcmVuY2UgPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgTWlzc2luZyBtYW5kYXRvcnkgJHtlcnJvck1lc3NhZ2V9IHBhcmFtZXRlcmApO1xuICB9XG4gIHJldHVybiByZWZlcmVuY2U7XG59XG5cbi8qKlxuICogVmFsaWRhdGVzIHRoYXQgYW4gYXJyYXkgcGFzc2VkIGFzIGEgcGFyYW1ldGVyIGRvZXNuJ3QgY29udGFpbiBudWxsIGVsZW1lbnQuXG4gKlxuICogQHBhcmFtIGxpc3QgVGhlIGFyZ3VtZW50IGxpc3QgdG8gY2hlY2sgZm9yIG51bGwuXG4gKiBAcGFyYW0gZXJyb3JNZXNzYWdlIFRoZSBleGNlcHRpb24gbWVzc2FnZSB0byB1c2UgaWYgdGhlIGNoZWNrIGZhaWxzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVBcnJheUVsZW1lbnRzTm90TnVsbDxUPihcbiAgYXJyYXk6IFRbXSxcbiAgZXJyb3JNZXNzYWdlOiBzdHJpbmdcbikge1xuICBjb25zdCBhcmVBbGxEZWZpbmVkID0gYXJyYXkuZXZlcnkoXG4gICAgZWxlbWVudCA9PiBlbGVtZW50ICE9PSBudWxsICYmIHR5cGVvZiBlbGVtZW50ICE9PSAndW5kZWZpbmVkJ1xuICApO1xuICBpZiAoIWFyZUFsbERlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYCR7ZXJyb3JNZXNzYWdlfSBlbGVtZW50cyBzaG91bGQgbm90IGJlIGEgTlVMTGApO1xuICB9XG59XG5cbi8qKiBUaHJvd3MgYW4gZXJyb3IgaWYgYW55IG9mIHRoZSBtYXAgZWxlbWVudHMgaXMgbnVsbC4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZU1hcEVsZW1lbnROb3ROdWxsPEssIFY+KFxuICBtYXA6IE1hcDxLLCBWPixcbiAgZXJyb3JNZXNzYWdlOiBzdHJpbmdcbikge1xuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBtYXAuZW50cmllcygpKSB7XG4gICAgaWYgKGtleSA9PSBudWxsIHx8IHZhbHVlID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgJHtlcnJvck1lc3NhZ2V9IGVsZW1lbnRzIHNob3VsZCBub3QgYmUgYSBOVUxMYCk7XG4gICAgfVxuICB9XG59XG5cbi8qKiBUaHJvd3MgYW4gZXJyb3IgaWYgYW55IG9mIHRoZSBhcnJheSBlbGVtZW50IHByZXNlbnQgaW4gdGhlIG1hcC4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUR1cGxpY2F0ZUtleXMoXG4gIGtleXM6IExhYmVsS2V5W10sXG4gIGNvbnN0YW50TGFiZWxzOiBNYXA8TGFiZWxLZXksIExhYmVsVmFsdWU+XG4pIHtcbiAgY29uc3Qga2V5c0FuZENvbnN0YW50S2V5cyA9IG5ldyBTZXQoXG4gICAgWy4uLmtleXMsIC4uLmNvbnN0YW50TGFiZWxzLmtleXMoKV0ubWFwKGsgPT4gay5rZXkpXG4gICk7XG4gIGlmIChrZXlzQW5kQ29uc3RhbnRLZXlzLnNpemUgIT09IGtleXMubGVuZ3RoICsgY29uc3RhbnRMYWJlbHMuc2l6ZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBUaGUga2V5cyBmcm9tIExhYmVsS2V5cyBzaG91bGQgbm90IGJlIHByZXNlbnQgaW4gY29uc3RhbnRMYWJlbHMgb3IgTGFiZWxLZXlzIHNob3VsZCBub3QgY29udGFpbnMgZHVwbGljYXRlIGtleXNgXG4gICAgKTtcbiAgfVxufVxuIl19
//# sourceMappingURL=data:application/json;charset=utf-8;base64,