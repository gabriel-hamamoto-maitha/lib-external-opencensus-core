{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-derived-cumulative.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-derived-cumulative.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport { TEST_ONLY } from '../src/common/time-util';\nimport { DerivedCumulative } from '../src/metrics/cumulative/derived-cumulative';\nimport {\n  LabelKey,\n  LabelValue,\n  MetricDescriptorType,\n  Timestamp,\n} from '../src/metrics/export/types';\n\nconst METRIC_NAME = 'metric-name';\nconst METRIC_DESCRIPTION = 'metric-description';\nconst UNIT = '1';\nconst CUMULATIVE_INT64 = MetricDescriptorType.CUMULATIVE_INT64;\nconst CUMULATIVE_DOUBLE = MetricDescriptorType.CUMULATIVE_DOUBLE;\nconst LABEL_KEYS: LabelKey[] = [{ key: 'code', description: 'desc' }];\nconst LABEL_VALUES_200: LabelValue[] = [{ value: '200' }];\nconst LABEL_VALUES_400: LabelValue[] = [{ value: '400' }];\nconst LABEL_VALUES_EXRTA: LabelValue[] = [{ value: '200' }, { value: '400' }];\nconst EMPTY_CONSTANT_LABELS = new Map();\nconst CONSTANT_LABELS = new Map();\nCONSTANT_LABELS.set(\n  { key: 'host', description: 'host' },\n  { value: 'localhost' }\n);\n\ndescribe('DerivedCumulative', () => {\n  let instance: DerivedCumulative;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n  const expectedMetricDescriptor = {\n    name: METRIC_NAME,\n    description: METRIC_DESCRIPTION,\n    unit: UNIT,\n    type: CUMULATIVE_INT64,\n    labelKeys: LABEL_KEYS,\n  };\n  const startime: Timestamp = { seconds: 1400000100, nanos: 1e7 };\n\n  beforeEach(() => {\n    instance = new DerivedCumulative(\n      METRIC_NAME,\n      METRIC_DESCRIPTION,\n      UNIT,\n      CUMULATIVE_INT64,\n      LABEL_KEYS,\n      EMPTY_CONSTANT_LABELS,\n      startime\n    );\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  describe('createTimeSeries()', () => {\n    it('should throw an error when the keys and values dont have same size', () => {\n      assert.throws(() => {\n        instance.createTimeSeries(LABEL_VALUES_EXRTA, new Map());\n      }, /^Error: Label Keys and Label Values don't have same size$/);\n    });\n\n    it('should return a Metric', () => {\n      const map = new Map();\n      map.set('key', 'value');\n      instance.createTimeSeries(LABEL_VALUES_200, map);\n      map.set('key1', 'value1');\n\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 2, timestamp: mockedTime }],\n          startTimestamp: startime,\n        },\n      ]);\n      // add data in collection\n      map.set('key2', 'value2');\n      map.set('key3', 'value3');\n\n      // add new timeseries with length-method\n      const arr = new Array(5).fill('test');\n      instance.createTimeSeries(LABEL_VALUES_400, {\n        size: () => arr.length,\n      });\n\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 2);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 4, timestamp: mockedTime }],\n          startTimestamp: startime,\n        },\n        {\n          labelValues: LABEL_VALUES_400,\n          points: [{ value: 5, timestamp: mockedTime }],\n          startTimestamp: startime,\n        },\n      ]);\n    });\n\n    it('should return a Metric (INT64) - custom object', () => {\n      class QueueManager {\n        getValue(): number {\n          return 45;\n        }\n      }\n      const queue = new QueueManager();\n      instance.createTimeSeries(LABEL_VALUES_200, queue);\n      const metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 45, timestamp: mockedTime }],\n          startTimestamp: startime,\n        },\n      ]);\n    });\n\n    it('should return a Metric value from a function', () => {\n      class QueueManager {\n        private depth = 0;\n        get pendingJobs() {\n          return this.depth;\n        }\n        addJob() {\n          this.depth++;\n        }\n      }\n      const queue = new QueueManager();\n      queue.addJob();\n      instance.createTimeSeries(LABEL_VALUES_200, () => {\n        return queue.pendingJobs;\n      });\n\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 1, timestamp: mockedTime }],\n          startTimestamp: startime,\n        },\n      ]);\n      // Simulate a adding multiple jobs in queue\n      queue.addJob();\n      queue.addJob();\n      queue.addJob();\n      metric = instance.getMetric();\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries[0].points, [\n        { value: 4, timestamp: mockedTime },\n      ]);\n    });\n\n    it('should return a Metric (Double) - custom object', () => {\n      class QueueManager {\n        getValue(): number {\n          return 0.7;\n        }\n      }\n      const queue = new QueueManager();\n      const doubleInstance = new DerivedCumulative(\n        METRIC_NAME,\n        METRIC_DESCRIPTION,\n        UNIT,\n        CUMULATIVE_DOUBLE,\n        LABEL_KEYS,\n        EMPTY_CONSTANT_LABELS,\n        startime\n      );\n      doubleInstance.createTimeSeries(LABEL_VALUES_200, queue);\n      const metric = doubleInstance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, {\n        name: METRIC_NAME,\n        description: METRIC_DESCRIPTION,\n        unit: UNIT,\n        type: CUMULATIVE_DOUBLE,\n        labelKeys: LABEL_KEYS,\n      });\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 0.7, timestamp: mockedTime }],\n          startTimestamp: startime,\n        },\n      ]);\n    });\n\n    it('should ignore dropping (decreasing) value', () => {\n      const map = new Map();\n      instance.createTimeSeries(LABEL_VALUES_200, map);\n      map.set('key', 'value');\n      map.set('key1', 'value1');\n      let metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 2, timestamp: mockedTime }],\n          startTimestamp: startime,\n        },\n      ]);\n\n      map.clear();\n      metric = instance.getMetric();\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 2, timestamp: mockedTime }],\n          startTimestamp: startime,\n        },\n      ]);\n    });\n\n    it('should not create same timeseries again', () => {\n      const map = new Map();\n      instance.createTimeSeries(LABEL_VALUES_200, map);\n      map.set('key', 'value');\n      const metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 1, timestamp: mockedTime }],\n          startTimestamp: startime,\n        },\n      ]);\n\n      // create timeseries with same labels.\n      assert.throws(() => {\n        instance.createTimeSeries(LABEL_VALUES_200, map);\n      }, /^Error: A different time series with the same labels already exists.$/);\n    });\n  });\n\n  describe('removeTimeSeries()', () => {\n    it('should remove TimeSeries', () => {\n      const arr: string[] = [];\n      instance.createTimeSeries(LABEL_VALUES_200, arr);\n      arr.push('test');\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      instance.removeTimeSeries(LABEL_VALUES_200);\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric, null);\n    });\n  });\n\n  describe('clear()', () => {\n    it('should clear all TimeSeries', () => {\n      const map = new Map();\n      instance.createTimeSeries(LABEL_VALUES_200, {\n        size: () => map.size,\n      });\n      map.set('key', 'value');\n\n      const arr: string[] = [];\n      instance.createTimeSeries(LABEL_VALUES_400, {\n        size: () => arr.length,\n      });\n      arr.push('test');\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 2);\n      instance.clear();\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric, null);\n    });\n  });\n});\n"]}