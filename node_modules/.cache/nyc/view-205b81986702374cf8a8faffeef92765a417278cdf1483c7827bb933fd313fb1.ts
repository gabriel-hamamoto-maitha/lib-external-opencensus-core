"use strict";/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_s90gd59tf(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/view.ts";var hash="0759359dcb5c39672d0c2fe4e06b9d8cff952928";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/view.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:0},end:{line:18,column:26}},"2":{start:{line:19,column:22},end:{line:19,column:57}},"3":{start:{line:20,column:20},end:{line:20,column:50}},"4":{start:{line:21,column:16},end:{line:21,column:50}},"5":{start:{line:22,column:21},end:{line:22,column:50}},"6":{start:{line:23,column:28},end:{line:23,column:58}},"7":{start:{line:24,column:23},end:{line:24,column:48}},"8":{start:{line:25,column:19},end:{line:25,column:40}},"9":{start:{line:26,column:16},end:{line:26,column:34}},"10":{start:{line:27,column:25},end:{line:27,column:48}},"11":{start:{line:52,column:8},end:{line:52,column:41}},"12":{start:{line:54,column:8},end:{line:54,column:32}},"13":{start:{line:55,column:8},end:{line:57,column:9}},"14":{start:{line:56,column:12},end:{line:56,column:61}},"15":{start:{line:58,column:8},end:{line:58,column:38}},"16":{start:{line:59,column:8},end:{line:59,column:25}},"17":{start:{line:60,column:8},end:{line:60,column:39}},"18":{start:{line:61,column:8},end:{line:61,column:31}},"19":{start:{line:62,column:8},end:{line:62,column:54}},"20":{start:{line:63,column:8},end:{line:63,column:39}},"21":{start:{line:64,column:8},end:{line:64,column:36}},"22":{start:{line:65,column:8},end:{line:67,column:9}},"23":{start:{line:66,column:12},end:{line:66,column:95}},"24":{start:{line:68,column:8},end:{line:68,column:88}},"25":{start:{line:72,column:8},end:{line:72,column:28}},"26":{start:{line:86,column:26},end:{line:86,column:83}},"27":{start:{line:87,column:28},end:{line:87,column:59}},"28":{start:{line:88,column:8},end:{line:90,column:9}},"29":{start:{line:89,column:12},end:{line:89,column:93}},"30":{start:{line:91,column:8},end:{line:91,column:111}},"31":{start:{line:98,column:8},end:{line:101,column:36}},"32":{start:{line:99,column:30},end:{line:99,column:62}},"33":{start:{line:108,column:36},end:{line:108,column:72}},"34":{start:{line:109,column:8},end:{line:122,column:9}},"35":{start:{line:111,column:50},end:{line:111,column:71}},"36":{start:{line:112,column:36},end:{line:112,column:62}},"37":{start:{line:113,column:41},end:{line:113,column:72}},"38":{start:{line:114,column:34},end:{line:114,column:64}},"39":{start:{line:115,column:16},end:{line:115,column:287}},"40":{start:{line:117,column:16},end:{line:117,column:126}},"41":{start:{line:119,column:16},end:{line:119,column:128}},"42":{start:{line:121,column:16},end:{line:121,column:133}},"43":{start:{line:130,column:25},end:{line:130,column:46}},"44":{start:{line:133,column:20},end:{line:133,column:63}},"45":{start:{line:134,column:8},end:{line:137,column:9}},"46":{start:{line:136,column:12},end:{line:136,column:68}},"47":{start:{line:138,column:27},end:{line:138,column:29}},"48":{start:{line:139,column:8},end:{line:149,column:11}},"49":{start:{line:140,column:34},end:{line:140,column:66}},"50":{start:{line:141,column:32},end:{line:141,column:92}},"51":{start:{line:142,column:26},end:{line:142,column:72}},"52":{start:{line:143,column:12},end:{line:148,column:13}},"53":{start:{line:144,column:16},end:{line:144,column:82}},"54":{start:{line:147,column:16},end:{line:147,column:66}},"55":{start:{line:150,column:8},end:{line:150,column:65}},"56":{start:{line:159,column:8},end:{line:181,column:9}},"57":{start:{line:160,column:69},end:{line:160,column:73}},"58":{start:{line:161,column:28},end:{line:161,column:30}},"59":{start:{line:162,column:12},end:{line:168,column:13}},"60":{start:{line:163,column:16},end:{line:167,column:17}},"61":{start:{line:163,column:34},end:{line:163,column:35}},"62":{start:{line:164,column:40},end:{line:164,column:65}},"63":{start:{line:165,column:42},end:{line:165,column:83}},"64":{start:{line:166,column:20},end:{line:166,column:83}},"65":{start:{line:169,column:26},end:{line:175,column:13}},"66":{start:{line:176,column:12},end:{line:176,column:40}},"67":{start:{line:179,column:26},end:{line:179,column:36}},"68":{start:{line:180,column:12},end:{line:180,column:40}},"69":{start:{line:189,column:8},end:{line:189,column:76}},"70":{start:{line:193,column:8},end:{line:203,column:9}},"71":{start:{line:195,column:12},end:{line:202,column:14}},"72":{start:{line:205,column:8},end:{line:205,column:38}},"73":{start:{line:209,column:28},end:{line:209,column:54}},"74":{start:{line:210,column:8},end:{line:214,column:11}},"75":{start:{line:211,column:12},end:{line:213,column:13}},"76":{start:{line:212,column:16},end:{line:212,column:66}},"77":{start:{line:215,column:27},end:{line:215,column:76}},"78":{start:{line:215,column:63},end:{line:215,column:74}},"79":{start:{line:216,column:8},end:{line:218,column:9}},"80":{start:{line:217,column:12},end:{line:217,column:54}},"81":{start:{line:219,column:8},end:{line:219,column:27}},"82":{start:{line:222,column:0},end:{line:222,column:28}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:45,column:4},end:{line:45,column:5}},loc:{start:{line:45,column:109},end:{line:69,column:5}},line:45},"1":{name:"(anonymous_1)",decl:{start:{line:71,column:4},end:{line:71,column:5}},loc:{start:{line:71,column:17},end:{line:73,column:5}},line:71},"2":{name:"(anonymous_2)",decl:{start:{line:85,column:4},end:{line:85,column:5}},loc:{start:{line:85,column:54},end:{line:92,column:5}},line:85},"3":{name:"(anonymous_3)",decl:{start:{line:97,column:4},end:{line:97,column:5}},loc:{start:{line:97,column:31},end:{line:102,column:5}},line:97},"4":{name:"(anonymous_4)",decl:{start:{line:99,column:17},end:{line:99,column:18}},loc:{start:{line:99,column:30},end:{line:99,column:62}},line:99},"5":{name:"(anonymous_5)",decl:{start:{line:107,column:4},end:{line:107,column:5}},loc:{start:{line:107,column:37},end:{line:123,column:5}},line:107},"6":{name:"(anonymous_6)",decl:{start:{line:129,column:4},end:{line:129,column:5}},loc:{start:{line:129,column:21},end:{line:151,column:5}},line:129},"7":{name:"(anonymous_7)",decl:{start:{line:139,column:57},end:{line:139,column:58}},loc:{start:{line:139,column:64},end:{line:149,column:9}},line:139},"8":{name:"(anonymous_8)",decl:{start:{line:158,column:4},end:{line:158,column:5}},loc:{start:{line:158,column:29},end:{line:182,column:5}},line:158},"9":{name:"(anonymous_9)",decl:{start:{line:188,column:4},end:{line:188,column:5}},loc:{start:{line:188,column:27},end:{line:190,column:5}},line:188},"10":{name:"(anonymous_10)",decl:{start:{line:192,column:4},end:{line:192,column:5}},loc:{start:{line:192,column:48},end:{line:206,column:5}},line:192},"11":{name:"(anonymous_11)",decl:{start:{line:208,column:4},end:{line:208,column:5}},loc:{start:{line:208,column:29},end:{line:220,column:5}},line:208},"12":{name:"(anonymous_12)",decl:{start:{line:210,column:28},end:{line:210,column:29}},loc:{start:{line:210,column:38},end:{line:214,column:9}},line:210},"13":{name:"(anonymous_13)",decl:{start:{line:215,column:51},end:{line:215,column:52}},loc:{start:{line:215,column:63},end:{line:215,column:74}},line:215}},branchMap:{"0":{loc:{start:{line:45,column:85},end:{line:45,column:107}},type:"default-arg",locations:[{start:{line:45,column:94},end:{line:45,column:107}}],line:45},"1":{loc:{start:{line:55,column:8},end:{line:57,column:9}},type:"if",locations:[{start:{line:55,column:8},end:{line:57,column:9}},{start:{line:55,column:8},end:{line:57,column:9}}],line:55},"2":{loc:{start:{line:55,column:12},end:{line:55,column:85}},type:"binary-expr",locations:[{start:{line:55,column:12},end:{line:55,column:64}},{start:{line:55,column:68},end:{line:55,column:85}}],line:55},"3":{loc:{start:{line:65,column:8},end:{line:67,column:9}},type:"if",locations:[{start:{line:65,column:8},end:{line:67,column:9}},{start:{line:65,column:8},end:{line:67,column:9}}],line:65},"4":{loc:{start:{line:88,column:8},end:{line:90,column:9}},type:"if",locations:[{start:{line:88,column:8},end:{line:90,column:9}},{start:{line:88,column:8},end:{line:90,column:9}}],line:88},"5":{loc:{start:{line:99,column:30},end:{line:99,column:62}},type:"cond-expr",locations:[{start:{line:99,column:41},end:{line:99,column:55}},{start:{line:99,column:58},end:{line:99,column:62}}],line:99},"6":{loc:{start:{line:109,column:8},end:{line:122,column:9}},type:"switch",locations:[{start:{line:110,column:12},end:{line:115,column:287}},{start:{line:116,column:12},end:{line:117,column:126}},{start:{line:118,column:12},end:{line:119,column:128}},{start:{line:120,column:12},end:{line:121,column:133}}],line:109},"7":{loc:{start:{line:134,column:8},end:{line:137,column:9}},type:"if",locations:[{start:{line:134,column:8},end:{line:137,column:9}},{start:{line:134,column:8},end:{line:137,column:9}}],line:134},"8":{loc:{start:{line:134,column:12},end:{line:135,column:62}},type:"binary-expr",locations:[{start:{line:134,column:12},end:{line:134,column:61}},{start:{line:135,column:12},end:{line:135,column:62}}],line:134},"9":{loc:{start:{line:143,column:12},end:{line:148,column:13}},type:"if",locations:[{start:{line:143,column:12},end:{line:148,column:13}},{start:{line:143,column:12},end:{line:148,column:13}}],line:143},"10":{loc:{start:{line:159,column:8},end:{line:181,column:9}},type:"if",locations:[{start:{line:159,column:8},end:{line:181,column:9}},{start:{line:159,column:8},end:{line:181,column:9}}],line:159},"11":{loc:{start:{line:162,column:12},end:{line:168,column:13}},type:"if",locations:[{start:{line:162,column:12},end:{line:168,column:13}},{start:{line:162,column:12},end:{line:168,column:13}}],line:162},"12":{loc:{start:{line:165,column:42},end:{line:165,column:83}},type:"cond-expr",locations:[{start:{line:165,column:54},end:{line:165,column:71}},{start:{line:165,column:74},end:{line:165,column:83}}],line:165},"13":{loc:{start:{line:193,column:8},end:{line:203,column:9}},type:"if",locations:[{start:{line:193,column:8},end:{line:203,column:9}},{start:{line:193,column:8},end:{line:203,column:9}}],line:193},"14":{loc:{start:{line:211,column:12},end:{line:213,column:13}},type:"if",locations:[{start:{line:211,column:12},end:{line:213,column:13}},{start:{line:211,column:12},end:{line:213,column:13}}],line:211},"15":{loc:{start:{line:216,column:8},end:{line:218,column:9}},type:"if",locations:[{start:{line:216,column:8},end:{line:218,column:9}},{start:{line:216,column:8},end:{line:218,column:9}}],line:216}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},b:{"0":[0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0]},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/view.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/view.ts"],names:[],mappings:"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",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as defaultLogger from '../common/console-logger';\nimport {\n  getTimestampWithProcessHRTime,\n  timestampFromMillis,\n} from '../common/time-util';\nimport * as loggerTypes from '../common/types';\nimport {\n  Bucket as metricBucket,\n  DistributionValue,\n  LabelValue,\n  Metric,\n  MetricDescriptor,\n  MetricDescriptorType,\n  Point,\n  TimeSeries,\n  Timestamp,\n} from '../metrics/export/types';\nimport { TagMap } from '../tags/tag-map';\nimport { TagKey, TagValue } from '../tags/types';\nimport { isValidTagKey } from '../tags/validation';\nimport { BucketBoundaries } from './bucket-boundaries';\nimport { MetricUtils } from './metric-utils';\nimport { Recorder } from './recorder';\nimport {\n  AggregationData,\n  AggregationType,\n  Measure,\n  Measurement,\n  StatsExemplar,\n  View,\n} from './types';\n\nconst RECORD_SEPARATOR = String.fromCharCode(30);\n\n/**\n * A View specifies an aggregation and a set of tag keys. The aggregation will\n * be broken down by the unique set of matching tag values for each measure.\n */\nexport class BaseView implements View {\n  /**\n   * A string by which the View will be referred to, e.g. \"rpc_latency\". Names\n   * MUST be unique within the library.\n   */\n  readonly name: string;\n  /** Describes the view, e.g. \"RPC latency distribution\" */\n  readonly description: string;\n  /** The Measure to which this view is applied. */\n  readonly measure: Measure;\n  /**\n   * A map of stringified tags representing columns labels or tag keys, concept\n   * similar to dimensions on multidimensional modeling, to AggregationData.\n   * If no Tags are provided, then, all data is recorded in a single\n   * aggregation.\n   */\n  private tagValueAggregationMap: { [key: string]: AggregationData } = {};\n  /**\n   * A list of tag keys that represents the possible column labels\n   */\n  private columns: TagKey[];\n  /**\n   * An Aggregation describes how data collected is aggregated.\n   * There are four aggregation types: count, sum, lastValue and distirbution.\n   */\n  readonly aggregation: AggregationType;\n  /** The start time for this view */\n  readonly startTime: number;\n  /** The bucket boundaries in a Distribution Aggregation */\n  private bucketBoundaries?: BucketBoundaries;\n  /**\n   * Cache a MetricDescriptor to avoid converting View to MetricDescriptor\n   * in the future.\n   */\n  private metricDescriptor: MetricDescriptor;\n  /**\n   * The end time for this view - represents the last time a value was recorded\n   */\n  endTime?: number;\n  /** true if the view was registered */\n  registered = false;\n  /** An object to log information to */\n  logger: loggerTypes.Logger;\n\n  /**\n   * Creates a new View instance. This constructor is used by Stats. User should\n   * prefer using Stats.createView() instead.\n   * @param name The view name\n   * @param measure The view measure\n   * @param aggregation The view aggregation type\n   * @param tagsKeys The Tags' keys that view will have\n   * @param description The view description\n   * @param bucketBoundaries The view bucket boundaries for a distribution\n   *     aggregation type\n   * @param logger\n   */\n  constructor(\n    name: string,\n    measure: Measure,\n    aggregation: AggregationType,\n    tagsKeys: TagKey[],\n    description: string,\n    bucketBoundaries?: number[],\n    logger = defaultLogger\n  ) {\n    if (aggregation === AggregationType.DISTRIBUTION && !bucketBoundaries) {\n      throw new Error('No bucketBoundaries specified');\n    }\n    this.logger = logger.logger();\n    this.name = name;\n    this.description = description;\n    this.measure = measure;\n    this.columns = this.validateTagKeys(tagsKeys);\n    this.aggregation = aggregation;\n    this.startTime = Date.now();\n    if (bucketBoundaries) {\n      this.bucketBoundaries = new BucketBoundaries(bucketBoundaries);\n    }\n    this.metricDescriptor = MetricUtils.viewToMetricDescriptor(this);\n  }\n\n  /** Gets the view's tag keys */\n  getColumns(): TagKey[] {\n    return this.columns;\n  }\n\n  /**\n   * Records a measurement in the proper view's row. This method is used by\n   * Stats. User should prefer using Stats.record() instead.\n   *\n   * Measurements with measurement type INT64 will have its value truncated.\n   * @param measurement The measurement to record\n   * @param tags The tags to which the value is applied\n   * @param attachments optional The contextual information associated with an\n   *     example value. The contextual information is represented as key - value\n   *     string pairs.\n   */\n  recordMeasurement(\n    measurement: Measurement,\n    tags: TagMap,\n    attachments?: { [key: string]: string }\n  ) {\n    const tagValues = Recorder.getTagValues(tags.tags, this.columns);\n    const encodedTags = this.encodeTagValues(tagValues);\n    if (!this.tagValueAggregationMap[encodedTags]) {\n      this.tagValueAggregationMap[encodedTags] = this.createAggregationData(\n        tagValues\n      );\n    }\n\n    Recorder.addMeasurement(\n      this.tagValueAggregationMap[encodedTags],\n      measurement,\n      attachments\n    );\n  }\n\n  /**\n   * Encodes a TagValue object into a value sorted string.\n   * @param tagValues The tagValues to encode\n   */\n  private encodeTagValues(tagValues: Array<TagValue | null>): string {\n    return tagValues\n      .map(tagValue => (tagValue ? tagValue.value : null))\n      .sort()\n      .join(RECORD_SEPARATOR);\n  }\n\n  /**\n   * Creates an empty aggregation data for a given tags.\n   * @param tagValues The tags for that aggregation data\n   */\n  private createAggregationData(\n    tagValues: Array<TagValue | null>\n  ): AggregationData {\n    const aggregationMetadata = { tagValues, timestamp: Date.now() };\n\n    switch (this.aggregation) {\n      case AggregationType.DISTRIBUTION:\n        const { buckets, bucketCounts } = this.bucketBoundaries!;\n        const bucketsCopy = Object.assign([], buckets);\n        const bucketCountsCopy = Object.assign([], bucketCounts);\n        const exemplars = new Array(bucketCounts.length);\n\n        return {\n          ...aggregationMetadata,\n          type: AggregationType.DISTRIBUTION,\n          startTime: this.startTime,\n          count: 0,\n          sum: 0,\n          mean: 0,\n          stdDeviation: 0,\n          sumOfSquaredDeviation: 0,\n          buckets: bucketsCopy,\n          bucketCounts: bucketCountsCopy,\n          exemplars,\n        };\n      case AggregationType.SUM:\n        return { ...aggregationMetadata, type: AggregationType.SUM, value: 0 };\n      case AggregationType.COUNT:\n        return {\n          ...aggregationMetadata,\n          type: AggregationType.COUNT,\n          value: 0,\n        };\n      default:\n        return {\n          ...aggregationMetadata,\n          type: AggregationType.LAST_VALUE,\n          value: 0,\n        };\n    }\n  }\n\n  /**\n   * Gets view`s metric\n   * @param start The start timestamp in epoch milliseconds\n   * @returns The Metric.\n   */\n  getMetric(start: number): Metric {\n    const { type } = this.metricDescriptor;\n    let startTimestamp: Timestamp;\n\n    // The moment when this point was recorded.\n    const now: Timestamp = getTimestampWithProcessHRTime();\n    if (\n      type !== MetricDescriptorType.GAUGE_INT64 &&\n      type !== MetricDescriptorType.GAUGE_DOUBLE\n    ) {\n      startTimestamp = timestampFromMillis(start);\n    }\n\n    const timeseries: TimeSeries[] = [];\n    Object.keys(this.tagValueAggregationMap).forEach(key => {\n      const { tagValues } = this.tagValueAggregationMap[key];\n      const labelValues: LabelValue[] = MetricUtils.tagValuesToLabelValues(\n        tagValues\n      );\n      const point: Point = this.toPoint(now, this.getSnapshot(tagValues));\n\n      if (startTimestamp) {\n        timeseries.push({ startTimestamp, labelValues, points: [point] });\n      } else {\n        timeseries.push({ labelValues, points: [point] });\n      }\n    });\n\n    return { descriptor: this.metricDescriptor, timeseries };\n  }\n\n  /**\n   * Converts snapshot to point\n   * @param timestamp The timestamp\n   * @param data The aggregated data\n   * @returns The Point.\n   */\n  private toPoint(timestamp: Timestamp, data: AggregationData): Point {\n    if (data.type === AggregationType.DISTRIBUTION) {\n      const { count, sum, sumOfSquaredDeviation, exemplars } = data;\n      const buckets = [];\n      if (data.bucketCounts) {\n        for (let bucket = 0; bucket < data.bucketCounts.length; bucket++) {\n          const bucketCount = data.bucketCounts[bucket];\n          const statsExemplar = exemplars ? exemplars[bucket] : undefined;\n          buckets.push(this.getMetricBucket(bucketCount, statsExemplar));\n        }\n      }\n      const value: DistributionValue = {\n        count,\n        sum,\n        sumOfSquaredDeviation,\n        buckets,\n        bucketOptions: { explicit: { bounds: data.buckets } },\n      };\n      return { timestamp, value };\n    } else {\n      const value: number = data.value;\n      return { timestamp, value };\n    }\n  }\n\n  /**\n   * Returns a snapshot of an AggregationData for that tags/labels values.\n   * @param tags The desired data's tags\n   * @returns The AggregationData.\n   */\n  getSnapshot(tagValues: Array<TagValue | null>): AggregationData {\n    return this.tagValueAggregationMap[this.encodeTagValues(tagValues)];\n  }\n\n  /** Returns a Bucket with count and examplar (if present) */\n  private getMetricBucket(\n    bucketCount: number,\n    statsExemplar?: StatsExemplar\n  ): metricBucket {\n    if (statsExemplar) {\n      // Bucket with an Exemplar.\n      return {\n        count: bucketCount,\n        exemplar: {\n          value: statsExemplar.value,\n          timestamp: timestampFromMillis(statsExemplar.timestamp),\n          attachments: statsExemplar.attachments,\n        },\n      };\n    }\n    // Bucket with no Exemplar.\n    return { count: bucketCount };\n  }\n\n  /** Determines whether the given TagKeys are valid. */\n  private validateTagKeys(tagKeys: TagKey[]): TagKey[] {\n    const tagKeysCopy = Object.assign([], tagKeys);\n    tagKeysCopy.forEach(tagKey => {\n      if (!isValidTagKey(tagKey)) {\n        throw new Error(`Invalid TagKey name: ${tagKey}`);\n      }\n    });\n    const tagKeysSet = new Set(\n      tagKeysCopy.map((tagKey: TagKey) => tagKey.name)\n    );\n    if (tagKeysSet.size !== tagKeysCopy.length) {\n      throw new Error('Columns have duplicate');\n    }\n    return tagKeysCopy;\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"0759359dcb5c39672d0c2fe4e06b9d8cff952928"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_s90gd59tf=function(){return actualCoverage;};}return actualCoverage;}cov_s90gd59tf();cov_s90gd59tf().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_s90gd59tf().s[1]++;exports.BaseView=void 0;const defaultLogger=(cov_s90gd59tf().s[2]++,require("../common/console-logger"));const time_util_1=(cov_s90gd59tf().s[3]++,require("../common/time-util"));const types_1=(cov_s90gd59tf().s[4]++,require("../metrics/export/types"));const validation_1=(cov_s90gd59tf().s[5]++,require("../tags/validation"));const bucket_boundaries_1=(cov_s90gd59tf().s[6]++,require("./bucket-boundaries"));const metric_utils_1=(cov_s90gd59tf().s[7]++,require("./metric-utils"));const recorder_1=(cov_s90gd59tf().s[8]++,require("./recorder"));const types_2=(cov_s90gd59tf().s[9]++,require("./types"));const RECORD_SEPARATOR=(cov_s90gd59tf().s[10]++,String.fromCharCode(30));/**
 * A View specifies an aggregation and a set of tag keys. The aggregation will
 * be broken down by the unique set of matching tag values for each measure.
 */class BaseView{/**
     * Creates a new View instance. This constructor is used by Stats. User should
     * prefer using Stats.createView() instead.
     * @param name The view name
     * @param measure The view measure
     * @param aggregation The view aggregation type
     * @param tagsKeys The Tags' keys that view will have
     * @param description The view description
     * @param bucketBoundaries The view bucket boundaries for a distribution
     *     aggregation type
     * @param logger
     */constructor(name,measure,aggregation,tagsKeys,description,bucketBoundaries,logger=(cov_s90gd59tf().b[0][0]++,defaultLogger)){cov_s90gd59tf().f[0]++;cov_s90gd59tf().s[11]++;/**
         * A map of stringified tags representing columns labels or tag keys, concept
         * similar to dimensions on multidimensional modeling, to AggregationData.
         * If no Tags are provided, then, all data is recorded in a single
         * aggregation.
         */this.tagValueAggregationMap={};/** true if the view was registered */cov_s90gd59tf().s[12]++;this.registered=false;cov_s90gd59tf().s[13]++;if((cov_s90gd59tf().b[2][0]++,aggregation===types_2.AggregationType.DISTRIBUTION)&&(cov_s90gd59tf().b[2][1]++,!bucketBoundaries)){cov_s90gd59tf().b[1][0]++;cov_s90gd59tf().s[14]++;throw new Error('No bucketBoundaries specified');}else{cov_s90gd59tf().b[1][1]++;}cov_s90gd59tf().s[15]++;this.logger=logger.logger();cov_s90gd59tf().s[16]++;this.name=name;cov_s90gd59tf().s[17]++;this.description=description;cov_s90gd59tf().s[18]++;this.measure=measure;cov_s90gd59tf().s[19]++;this.columns=this.validateTagKeys(tagsKeys);cov_s90gd59tf().s[20]++;this.aggregation=aggregation;cov_s90gd59tf().s[21]++;this.startTime=Date.now();cov_s90gd59tf().s[22]++;if(bucketBoundaries){cov_s90gd59tf().b[3][0]++;cov_s90gd59tf().s[23]++;this.bucketBoundaries=new bucket_boundaries_1.BucketBoundaries(bucketBoundaries);}else{cov_s90gd59tf().b[3][1]++;}cov_s90gd59tf().s[24]++;this.metricDescriptor=metric_utils_1.MetricUtils.viewToMetricDescriptor(this);}/** Gets the view's tag keys */getColumns(){cov_s90gd59tf().f[1]++;cov_s90gd59tf().s[25]++;return this.columns;}/**
     * Records a measurement in the proper view's row. This method is used by
     * Stats. User should prefer using Stats.record() instead.
     *
     * Measurements with measurement type INT64 will have its value truncated.
     * @param measurement The measurement to record
     * @param tags The tags to which the value is applied
     * @param attachments optional The contextual information associated with an
     *     example value. The contextual information is represented as key - value
     *     string pairs.
     */recordMeasurement(measurement,tags,attachments){cov_s90gd59tf().f[2]++;const tagValues=(cov_s90gd59tf().s[26]++,recorder_1.Recorder.getTagValues(tags.tags,this.columns));const encodedTags=(cov_s90gd59tf().s[27]++,this.encodeTagValues(tagValues));cov_s90gd59tf().s[28]++;if(!this.tagValueAggregationMap[encodedTags]){cov_s90gd59tf().b[4][0]++;cov_s90gd59tf().s[29]++;this.tagValueAggregationMap[encodedTags]=this.createAggregationData(tagValues);}else{cov_s90gd59tf().b[4][1]++;}cov_s90gd59tf().s[30]++;recorder_1.Recorder.addMeasurement(this.tagValueAggregationMap[encodedTags],measurement,attachments);}/**
     * Encodes a TagValue object into a value sorted string.
     * @param tagValues The tagValues to encode
     */encodeTagValues(tagValues){cov_s90gd59tf().f[3]++;cov_s90gd59tf().s[31]++;return tagValues.map(tagValue=>{cov_s90gd59tf().f[4]++;cov_s90gd59tf().s[32]++;return tagValue?(cov_s90gd59tf().b[5][0]++,tagValue.value):(cov_s90gd59tf().b[5][1]++,null);}).sort().join(RECORD_SEPARATOR);}/**
     * Creates an empty aggregation data for a given tags.
     * @param tagValues The tags for that aggregation data
     */createAggregationData(tagValues){cov_s90gd59tf().f[5]++;const aggregationMetadata=(cov_s90gd59tf().s[33]++,{tagValues,timestamp:Date.now()});cov_s90gd59tf().s[34]++;switch(this.aggregation){case types_2.AggregationType.DISTRIBUTION:cov_s90gd59tf().b[6][0]++;const{buckets,bucketCounts}=(cov_s90gd59tf().s[35]++,this.bucketBoundaries);const bucketsCopy=(cov_s90gd59tf().s[36]++,Object.assign([],buckets));const bucketCountsCopy=(cov_s90gd59tf().s[37]++,Object.assign([],bucketCounts));const exemplars=(cov_s90gd59tf().s[38]++,new Array(bucketCounts.length));cov_s90gd59tf().s[39]++;return Object.assign(Object.assign({},aggregationMetadata),{type:types_2.AggregationType.DISTRIBUTION,startTime:this.startTime,count:0,sum:0,mean:0,stdDeviation:0,sumOfSquaredDeviation:0,buckets:bucketsCopy,bucketCounts:bucketCountsCopy,exemplars});case types_2.AggregationType.SUM:cov_s90gd59tf().b[6][1]++;cov_s90gd59tf().s[40]++;return Object.assign(Object.assign({},aggregationMetadata),{type:types_2.AggregationType.SUM,value:0});case types_2.AggregationType.COUNT:cov_s90gd59tf().b[6][2]++;cov_s90gd59tf().s[41]++;return Object.assign(Object.assign({},aggregationMetadata),{type:types_2.AggregationType.COUNT,value:0});default:cov_s90gd59tf().b[6][3]++;cov_s90gd59tf().s[42]++;return Object.assign(Object.assign({},aggregationMetadata),{type:types_2.AggregationType.LAST_VALUE,value:0});}}/**
     * Gets view`s metric
     * @param start The start timestamp in epoch milliseconds
     * @returns The Metric.
     */getMetric(start){cov_s90gd59tf().f[6]++;const{type}=(cov_s90gd59tf().s[43]++,this.metricDescriptor);let startTimestamp;// The moment when this point was recorded.
const now=(cov_s90gd59tf().s[44]++,time_util_1.getTimestampWithProcessHRTime());cov_s90gd59tf().s[45]++;if((cov_s90gd59tf().b[8][0]++,type!==types_1.MetricDescriptorType.GAUGE_INT64)&&(cov_s90gd59tf().b[8][1]++,type!==types_1.MetricDescriptorType.GAUGE_DOUBLE)){cov_s90gd59tf().b[7][0]++;cov_s90gd59tf().s[46]++;startTimestamp=time_util_1.timestampFromMillis(start);}else{cov_s90gd59tf().b[7][1]++;}const timeseries=(cov_s90gd59tf().s[47]++,[]);cov_s90gd59tf().s[48]++;Object.keys(this.tagValueAggregationMap).forEach(key=>{cov_s90gd59tf().f[7]++;const{tagValues}=(cov_s90gd59tf().s[49]++,this.tagValueAggregationMap[key]);const labelValues=(cov_s90gd59tf().s[50]++,metric_utils_1.MetricUtils.tagValuesToLabelValues(tagValues));const point=(cov_s90gd59tf().s[51]++,this.toPoint(now,this.getSnapshot(tagValues)));cov_s90gd59tf().s[52]++;if(startTimestamp){cov_s90gd59tf().b[9][0]++;cov_s90gd59tf().s[53]++;timeseries.push({startTimestamp,labelValues,points:[point]});}else{cov_s90gd59tf().b[9][1]++;cov_s90gd59tf().s[54]++;timeseries.push({labelValues,points:[point]});}});cov_s90gd59tf().s[55]++;return{descriptor:this.metricDescriptor,timeseries};}/**
     * Converts snapshot to point
     * @param timestamp The timestamp
     * @param data The aggregated data
     * @returns The Point.
     */toPoint(timestamp,data){cov_s90gd59tf().f[8]++;cov_s90gd59tf().s[56]++;if(data.type===types_2.AggregationType.DISTRIBUTION){cov_s90gd59tf().b[10][0]++;const{count,sum,sumOfSquaredDeviation,exemplars}=(cov_s90gd59tf().s[57]++,data);const buckets=(cov_s90gd59tf().s[58]++,[]);cov_s90gd59tf().s[59]++;if(data.bucketCounts){cov_s90gd59tf().b[11][0]++;cov_s90gd59tf().s[60]++;for(let bucket=(cov_s90gd59tf().s[61]++,0);bucket<data.bucketCounts.length;bucket++){const bucketCount=(cov_s90gd59tf().s[62]++,data.bucketCounts[bucket]);const statsExemplar=(cov_s90gd59tf().s[63]++,exemplars?(cov_s90gd59tf().b[12][0]++,exemplars[bucket]):(cov_s90gd59tf().b[12][1]++,undefined));cov_s90gd59tf().s[64]++;buckets.push(this.getMetricBucket(bucketCount,statsExemplar));}}else{cov_s90gd59tf().b[11][1]++;}const value=(cov_s90gd59tf().s[65]++,{count,sum,sumOfSquaredDeviation,buckets,bucketOptions:{explicit:{bounds:data.buckets}}});cov_s90gd59tf().s[66]++;return{timestamp,value};}else{cov_s90gd59tf().b[10][1]++;const value=(cov_s90gd59tf().s[67]++,data.value);cov_s90gd59tf().s[68]++;return{timestamp,value};}}/**
     * Returns a snapshot of an AggregationData for that tags/labels values.
     * @param tags The desired data's tags
     * @returns The AggregationData.
     */getSnapshot(tagValues){cov_s90gd59tf().f[9]++;cov_s90gd59tf().s[69]++;return this.tagValueAggregationMap[this.encodeTagValues(tagValues)];}/** Returns a Bucket with count and examplar (if present) */getMetricBucket(bucketCount,statsExemplar){cov_s90gd59tf().f[10]++;cov_s90gd59tf().s[70]++;if(statsExemplar){cov_s90gd59tf().b[13][0]++;cov_s90gd59tf().s[71]++;// Bucket with an Exemplar.
return{count:bucketCount,exemplar:{value:statsExemplar.value,timestamp:time_util_1.timestampFromMillis(statsExemplar.timestamp),attachments:statsExemplar.attachments}};}else{cov_s90gd59tf().b[13][1]++;}// Bucket with no Exemplar.
cov_s90gd59tf().s[72]++;return{count:bucketCount};}/** Determines whether the given TagKeys are valid. */validateTagKeys(tagKeys){cov_s90gd59tf().f[11]++;const tagKeysCopy=(cov_s90gd59tf().s[73]++,Object.assign([],tagKeys));cov_s90gd59tf().s[74]++;tagKeysCopy.forEach(tagKey=>{cov_s90gd59tf().f[12]++;cov_s90gd59tf().s[75]++;if(!validation_1.isValidTagKey(tagKey)){cov_s90gd59tf().b[14][0]++;cov_s90gd59tf().s[76]++;throw new Error(`Invalid TagKey name: ${tagKey}`);}else{cov_s90gd59tf().b[14][1]++;}});const tagKeysSet=(cov_s90gd59tf().s[77]++,new Set(tagKeysCopy.map(tagKey=>{cov_s90gd59tf().f[13]++;cov_s90gd59tf().s[78]++;return tagKey.name;})));cov_s90gd59tf().s[79]++;if(tagKeysSet.size!==tagKeysCopy.length){cov_s90gd59tf().b[15][0]++;cov_s90gd59tf().s[80]++;throw new Error('Columns have duplicate');}else{cov_s90gd59tf().b[15][1]++;}cov_s90gd59tf().s[81]++;return tagKeysCopy;}}cov_s90gd59tf().s[82]++;exports.BaseView=BaseView;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,