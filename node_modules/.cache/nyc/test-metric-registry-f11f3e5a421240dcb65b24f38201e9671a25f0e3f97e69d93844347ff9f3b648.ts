"use strict";/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_2kb94silk6(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-metric-registry.ts";var hash="f8a4b248829f1e11407987304a8e5755b08bb592";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-metric-registry.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:15},end:{line:18,column:32}},"2":{start:{line:19,column:20},end:{line:19,column:54}},"3":{start:{line:20,column:16},end:{line:20,column:54}},"4":{start:{line:21,column:26},end:{line:21,column:67}},"5":{start:{line:22,column:16},end:{line:22,column:45}},"6":{start:{line:23,column:20},end:{line:23,column:33}},"7":{start:{line:24,column:27},end:{line:24,column:47}},"8":{start:{line:25,column:13},end:{line:25,column:37}},"9":{start:{line:26,column:19},end:{line:26,column:57}},"10":{start:{line:27,column:25},end:{line:27,column:43}},"11":{start:{line:28,column:25},end:{line:28,column:43}},"12":{start:{line:29,column:23},end:{line:33,column:1}},"13":{start:{line:34,column:0},end:{line:107,column:3}},"14":{start:{line:36,column:25},end:{line:36,column:39}},"15":{start:{line:37,column:22},end:{line:37,column:30}},"16":{start:{line:38,column:23},end:{line:38,column:58}},"17":{start:{line:39,column:4},end:{line:46,column:7}},"18":{start:{line:40,column:8},end:{line:40,column:58}},"19":{start:{line:42,column:8},end:{line:42,column:42}},"20":{start:{line:42,column:31},end:{line:42,column:41}},"21":{start:{line:43,column:8},end:{line:43,column:39}},"22":{start:{line:43,column:25},end:{line:43,column:38}},"23":{start:{line:45,column:8},end:{line:45,column:51}},"24":{start:{line:47,column:4},end:{line:52,column:7}},"25":{start:{line:48,column:8},end:{line:48,column:38}},"26":{start:{line:49,column:8},end:{line:49,column:29}},"27":{start:{line:51,column:8},end:{line:51,column:57}},"28":{start:{line:53,column:4},end:{line:75,column:7}},"29":{start:{line:54,column:27},end:{line:54,column:78}},"30":{start:{line:55,column:27},end:{line:55,column:77}},"31":{start:{line:56,column:8},end:{line:56,column:28}},"32":{start:{line:57,column:24},end:{line:57,column:65}},"33":{start:{line:58,column:8},end:{line:58,column:46}},"34":{start:{line:59,column:45},end:{line:59,column:52}},"35":{start:{line:60,column:8},end:{line:66,column:11}},"36":{start:{line:67,column:8},end:{line:67,column:49}},"37":{start:{line:68,column:29},end:{line:68,column:39}},"38":{start:{line:69,column:24},end:{line:69,column:30}},"39":{start:{line:70,column:8},end:{line:70,column:45}},"40":{start:{line:71,column:8},end:{line:74,column:11}},"41":{start:{line:76,column:4},end:{line:98,column:7}},"42":{start:{line:77,column:27},end:{line:77,column:62}},"43":{start:{line:78,column:27},end:{line:78,column:60}},"44":{start:{line:79,column:8},end:{line:79,column:28}},"45":{start:{line:80,column:24},end:{line:80,column:65}},"46":{start:{line:81,column:8},end:{line:81,column:46}},"47":{start:{line:82,column:45},end:{line:82,column:52}},"48":{start:{line:83,column:8},end:{line:89,column:11}},"49":{start:{line:90,column:8},end:{line:90,column:49}},"50":{start:{line:91,column:29},end:{line:91,column:39}},"51":{start:{line:92,column:24},end:{line:92,column:30}},"52":{start:{line:93,column:8},end:{line:93,column:45}},"53":{start:{line:94,column:8},end:{line:97,column:11}},"54":{start:{line:99,column:4},end:{line:106,column:7}},"55":{start:{line:100,column:31},end:{line:100,column:40}},"56":{start:{line:101,column:8},end:{line:101,column:59}},"57":{start:{line:102,column:26},end:{line:102,column:62}},"58":{start:{line:103,column:8},end:{line:105,column:135}},"59":{start:{line:104,column:12},end:{line:104,column:79}},"60":{start:{line:108,column:0},end:{line:193,column:3}},"61":{start:{line:110,column:25},end:{line:110,column:39}},"62":{start:{line:111,column:22},end:{line:111,column:30}},"63":{start:{line:112,column:23},end:{line:112,column:58}},"64":{start:{line:113,column:4},end:{line:120,column:7}},"65":{start:{line:114,column:8},end:{line:114,column:58}},"66":{start:{line:116,column:8},end:{line:116,column:42}},"67":{start:{line:116,column:31},end:{line:116,column:41}},"68":{start:{line:117,column:8},end:{line:117,column:39}},"69":{start:{line:117,column:25},end:{line:117,column:38}},"70":{start:{line:119,column:8},end:{line:119,column:51}},"71":{start:{line:121,column:4},end:{line:126,column:7}},"72":{start:{line:122,column:8},end:{line:122,column:38}},"73":{start:{line:123,column:8},end:{line:123,column:29}},"74":{start:{line:125,column:8},end:{line:125,column:57}},"75":{start:{line:127,column:4},end:{line:151,column:7}},"76":{start:{line:128,column:28},end:{line:128,column:80}},"77":{start:{line:129,column:27},end:{line:129,column:78}},"78":{start:{line:130,column:8},end:{line:130,column:28}},"79":{start:{line:131,column:28},end:{line:131,column:79}},"80":{start:{line:132,column:8},end:{line:132,column:29}},"81":{start:{line:133,column:24},end:{line:133,column:65}},"82":{start:{line:134,column:8},end:{line:134,column:46}},"83":{start:{line:135,column:45},end:{line:135,column:52}},"84":{start:{line:136,column:8},end:{line:142,column:11}},"85":{start:{line:143,column:8},end:{line:143,column:49}},"86":{start:{line:144,column:29},end:{line:144,column:39}},"87":{start:{line:145,column:24},end:{line:145,column:30}},"88":{start:{line:146,column:8},end:{line:146,column:45}},"89":{start:{line:147,column:8},end:{line:150,column:11}},"90":{start:{line:152,column:4},end:{line:157,column:7}},"91":{start:{line:153,column:8},end:{line:153,column:61}},"92":{start:{line:154,column:8},end:{line:156,column:87}},"93":{start:{line:155,column:12},end:{line:155,column:65}},"94":{start:{line:158,column:4},end:{line:169,column:7}},"95":{start:{line:159,column:29},end:{line:159,column:38}},"96":{start:{line:160,column:8},end:{line:160,column:48}},"97":{start:{line:161,column:8},end:{line:163,column:68}},"98":{start:{line:162,column:12},end:{line:162,column:69}},"99":{start:{line:164,column:8},end:{line:164,column:35}},"100":{start:{line:165,column:8},end:{line:165,column:39}},"101":{start:{line:166,column:8},end:{line:168,column:68}},"102":{start:{line:167,column:12},end:{line:167,column:69}},"103":{start:{line:170,column:4},end:{line:192,column:7}},"104":{start:{line:171,column:28},end:{line:171,column:64}},"105":{start:{line:172,column:27},end:{line:172,column:61}},"106":{start:{line:173,column:8},end:{line:173,column:28}},"107":{start:{line:174,column:24},end:{line:174,column:65}},"108":{start:{line:175,column:8},end:{line:175,column:46}},"109":{start:{line:176,column:45},end:{line:176,column:52}},"110":{start:{line:177,column:8},end:{line:183,column:11}},"111":{start:{line:184,column:8},end:{line:184,column:49}},"112":{start:{line:185,column:29},end:{line:185,column:39}},"113":{start:{line:186,column:24},end:{line:186,column:30}},"114":{start:{line:187,column:8},end:{line:187,column:45}},"115":{start:{line:188,column:8},end:{line:191,column:11}},"116":{start:{line:194,column:0},end:{line:284,column:3}},"117":{start:{line:196,column:25},end:{line:196,column:39}},"118":{start:{line:197,column:22},end:{line:197,column:30}},"119":{start:{line:198,column:23},end:{line:198,column:58}},"120":{start:{line:199,column:4},end:{line:206,column:7}},"121":{start:{line:200,column:8},end:{line:200,column:58}},"122":{start:{line:202,column:8},end:{line:202,column:42}},"123":{start:{line:202,column:31},end:{line:202,column:41}},"124":{start:{line:203,column:8},end:{line:203,column:39}},"125":{start:{line:203,column:25},end:{line:203,column:38}},"126":{start:{line:205,column:8},end:{line:205,column:51}},"127":{start:{line:207,column:4},end:{line:212,column:7}},"128":{start:{line:208,column:8},end:{line:208,column:38}},"129":{start:{line:209,column:8},end:{line:209,column:29}},"130":{start:{line:211,column:8},end:{line:211,column:57}},"131":{start:{line:213,column:4},end:{line:237,column:7}},"132":{start:{line:214,column:20},end:{line:214,column:29}},"133":{start:{line:215,column:8},end:{line:215,column:32}},"134":{start:{line:216,column:34},end:{line:216,column:92}},"135":{start:{line:217,column:8},end:{line:217,column:66}},"136":{start:{line:218,column:8},end:{line:218,column:34}},"137":{start:{line:219,column:24},end:{line:219,column:65}},"138":{start:{line:220,column:8},end:{line:220,column:46}},"139":{start:{line:221,column:45},end:{line:221,column:52}},"140":{start:{line:222,column:8},end:{line:228,column:11}},"141":{start:{line:229,column:8},end:{line:229,column:49}},"142":{start:{line:230,column:29},end:{line:230,column:39}},"143":{start:{line:231,column:24},end:{line:231,column:30}},"144":{start:{line:232,column:8},end:{line:232,column:43}},"145":{start:{line:233,column:8},end:{line:236,column:11}},"146":{start:{line:238,column:4},end:{line:243,column:7}},"147":{start:{line:239,column:8},end:{line:239,column:67}},"148":{start:{line:240,column:8},end:{line:242,column:87}},"149":{start:{line:241,column:12},end:{line:241,column:71}},"150":{start:{line:244,column:4},end:{line:251,column:7}},"151":{start:{line:245,column:31},end:{line:245,column:40}},"152":{start:{line:246,column:8},end:{line:246,column:59}},"153":{start:{line:247,column:26},end:{line:247,column:62}},"154":{start:{line:248,column:8},end:{line:250,column:135}},"155":{start:{line:249,column:12},end:{line:249,column:86}},"156":{start:{line:252,column:4},end:{line:258,column:7}},"157":{start:{line:253,column:31},end:{line:253,column:40}},"158":{start:{line:254,column:8},end:{line:254,column:48}},"159":{start:{line:255,column:8},end:{line:257,column:68}},"160":{start:{line:256,column:12},end:{line:256,column:75}},"161":{start:{line:259,column:4},end:{line:283,column:7}},"162":{start:{line:260,column:20},end:{line:260,column:29}},"163":{start:{line:261,column:8},end:{line:261,column:32}},"164":{start:{line:262,column:34},end:{line:262,column:76}},"165":{start:{line:263,column:8},end:{line:263,column:52}},"166":{start:{line:264,column:8},end:{line:264,column:34}},"167":{start:{line:265,column:24},end:{line:265,column:65}},"168":{start:{line:266,column:8},end:{line:266,column:46}},"169":{start:{line:267,column:45},end:{line:267,column:52}},"170":{start:{line:268,column:8},end:{line:274,column:11}},"171":{start:{line:275,column:8},end:{line:275,column:49}},"172":{start:{line:276,column:29},end:{line:276,column:39}},"173":{start:{line:277,column:24},end:{line:277,column:30}},"174":{start:{line:278,column:8},end:{line:278,column:43}},"175":{start:{line:279,column:8},end:{line:282,column:11}},"176":{start:{line:285,column:0},end:{line:337,column:3}},"177":{start:{line:287,column:25},end:{line:287,column:39}},"178":{start:{line:288,column:22},end:{line:288,column:30}},"179":{start:{line:289,column:23},end:{line:289,column:58}},"180":{start:{line:290,column:4},end:{line:297,column:7}},"181":{start:{line:291,column:8},end:{line:291,column:58}},"182":{start:{line:293,column:8},end:{line:293,column:42}},"183":{start:{line:293,column:31},end:{line:293,column:41}},"184":{start:{line:294,column:8},end:{line:294,column:39}},"185":{start:{line:294,column:25},end:{line:294,column:38}},"186":{start:{line:296,column:8},end:{line:296,column:51}},"187":{start:{line:298,column:4},end:{line:303,column:7}},"188":{start:{line:299,column:8},end:{line:299,column:38}},"189":{start:{line:300,column:8},end:{line:300,column:29}},"190":{start:{line:302,column:8},end:{line:302,column:57}},"191":{start:{line:304,column:4},end:{line:330,column:7}},"192":{start:{line:307,column:16},end:{line:307,column:27}},"193":{start:{line:310,column:35},end:{line:310,column:94}},"194":{start:{line:311,column:8},end:{line:311,column:82}},"195":{start:{line:312,column:24},end:{line:312,column:65}},"196":{start:{line:313,column:8},end:{line:313,column:46}},"197":{start:{line:314,column:45},end:{line:314,column:52}},"198":{start:{line:315,column:8},end:{line:321,column:11}},"199":{start:{line:322,column:8},end:{line:322,column:49}},"200":{start:{line:323,column:29},end:{line:323,column:39}},"201":{start:{line:324,column:24},end:{line:324,column:30}},"202":{start:{line:325,column:8},end:{line:325,column:45}},"203":{start:{line:326,column:8},end:{line:329,column:11}},"204":{start:{line:331,column:4},end:{line:336,column:7}},"205":{start:{line:332,column:8},end:{line:332,column:68}},"206":{start:{line:333,column:8},end:{line:335,column:87}},"207":{start:{line:334,column:12},end:{line:334,column:72}},"208":{start:{line:338,column:0},end:{line:411,column:3}},"209":{start:{line:340,column:25},end:{line:340,column:39}},"210":{start:{line:341,column:22},end:{line:341,column:30}},"211":{start:{line:342,column:23},end:{line:342,column:58}},"212":{start:{line:343,column:4},end:{line:350,column:7}},"213":{start:{line:344,column:8},end:{line:344,column:58}},"214":{start:{line:346,column:8},end:{line:346,column:42}},"215":{start:{line:346,column:31},end:{line:346,column:41}},"216":{start:{line:347,column:8},end:{line:347,column:39}},"217":{start:{line:347,column:25},end:{line:347,column:38}},"218":{start:{line:349,column:8},end:{line:349,column:51}},"219":{start:{line:351,column:4},end:{line:356,column:7}},"220":{start:{line:352,column:8},end:{line:352,column:38}},"221":{start:{line:353,column:8},end:{line:353,column:29}},"222":{start:{line:355,column:8},end:{line:355,column:57}},"223":{start:{line:357,column:4},end:{line:379,column:7}},"224":{start:{line:358,column:27},end:{line:358,column:83}},"225":{start:{line:359,column:27},end:{line:359,column:77}},"226":{start:{line:360,column:8},end:{line:360,column:25}},"227":{start:{line:361,column:24},end:{line:361,column:65}},"228":{start:{line:362,column:8},end:{line:362,column:46}},"229":{start:{line:363,column:45},end:{line:363,column:52}},"230":{start:{line:364,column:8},end:{line:370,column:11}},"231":{start:{line:371,column:8},end:{line:371,column:49}},"232":{start:{line:372,column:29},end:{line:372,column:39}},"233":{start:{line:373,column:24},end:{line:373,column:30}},"234":{start:{line:374,column:8},end:{line:374,column:43}},"235":{start:{line:375,column:8},end:{line:378,column:11}},"236":{start:{line:380,column:4},end:{line:402,column:7}},"237":{start:{line:381,column:27},end:{line:381,column:67}},"238":{start:{line:382,column:27},end:{line:382,column:60}},"239":{start:{line:383,column:8},end:{line:383,column:28}},"240":{start:{line:384,column:24},end:{line:384,column:65}},"241":{start:{line:385,column:8},end:{line:385,column:46}},"242":{start:{line:386,column:45},end:{line:386,column:52}},"243":{start:{line:387,column:8},end:{line:393,column:11}},"244":{start:{line:394,column:8},end:{line:394,column:49}},"245":{start:{line:395,column:29},end:{line:395,column:39}},"246":{start:{line:396,column:24},end:{line:396,column:30}},"247":{start:{line:397,column:8},end:{line:397,column:45}},"248":{start:{line:398,column:8},end:{line:401,column:11}},"249":{start:{line:403,column:4},end:{line:410,column:7}},"250":{start:{line:404,column:31},end:{line:404,column:40}},"251":{start:{line:405,column:8},end:{line:405,column:59}},"252":{start:{line:406,column:26},end:{line:406,column:62}},"253":{start:{line:407,column:8},end:{line:409,column:135}},"254":{start:{line:408,column:12},end:{line:408,column:84}},"255":{start:{line:412,column:0},end:{line:486,column:3}},"256":{start:{line:414,column:25},end:{line:414,column:39}},"257":{start:{line:415,column:22},end:{line:415,column:30}},"258":{start:{line:416,column:23},end:{line:416,column:58}},"259":{start:{line:417,column:4},end:{line:424,column:7}},"260":{start:{line:418,column:8},end:{line:418,column:58}},"261":{start:{line:420,column:8},end:{line:420,column:42}},"262":{start:{line:420,column:31},end:{line:420,column:41}},"263":{start:{line:421,column:8},end:{line:421,column:39}},"264":{start:{line:421,column:25},end:{line:421,column:38}},"265":{start:{line:423,column:8},end:{line:423,column:51}},"266":{start:{line:425,column:4},end:{line:430,column:7}},"267":{start:{line:426,column:8},end:{line:426,column:38}},"268":{start:{line:427,column:8},end:{line:427,column:29}},"269":{start:{line:429,column:8},end:{line:429,column:57}},"270":{start:{line:431,column:4},end:{line:453,column:7}},"271":{start:{line:432,column:27},end:{line:432,column:84}},"272":{start:{line:433,column:27},end:{line:433,column:77}},"273":{start:{line:434,column:8},end:{line:434,column:28}},"274":{start:{line:435,column:24},end:{line:435,column:65}},"275":{start:{line:436,column:8},end:{line:436,column:46}},"276":{start:{line:437,column:45},end:{line:437,column:52}},"277":{start:{line:438,column:8},end:{line:444,column:11}},"278":{start:{line:445,column:8},end:{line:445,column:49}},"279":{start:{line:446,column:29},end:{line:446,column:39}},"280":{start:{line:447,column:24},end:{line:447,column:30}},"281":{start:{line:448,column:8},end:{line:448,column:45}},"282":{start:{line:449,column:8},end:{line:452,column:11}},"283":{start:{line:454,column:4},end:{line:477,column:7}},"284":{start:{line:455,column:27},end:{line:455,column:68}},"285":{start:{line:456,column:27},end:{line:456,column:60}},"286":{start:{line:457,column:8},end:{line:457,column:25}},"287":{start:{line:458,column:8},end:{line:458,column:31}},"288":{start:{line:459,column:24},end:{line:459,column:65}},"289":{start:{line:460,column:8},end:{line:460,column:46}},"290":{start:{line:461,column:45},end:{line:461,column:52}},"291":{start:{line:462,column:8},end:{line:468,column:11}},"292":{start:{line:469,column:8},end:{line:469,column:49}},"293":{start:{line:470,column:29},end:{line:470,column:39}},"294":{start:{line:471,column:24},end:{line:471,column:30}},"295":{start:{line:472,column:8},end:{line:472,column:48}},"296":{start:{line:473,column:8},end:{line:476,column:11}},"297":{start:{line:478,column:4},end:{line:485,column:7}},"298":{start:{line:479,column:31},end:{line:479,column:40}},"299":{start:{line:480,column:8},end:{line:480,column:59}},"300":{start:{line:481,column:26},end:{line:481,column:62}},"301":{start:{line:482,column:8},end:{line:484,column:135}},"302":{start:{line:483,column:12},end:{line:483,column:85}},"303":{start:{line:487,column:0},end:{line:580,column:3}},"304":{start:{line:489,column:25},end:{line:489,column:39}},"305":{start:{line:490,column:22},end:{line:490,column:30}},"306":{start:{line:491,column:23},end:{line:491,column:58}},"307":{start:{line:492,column:4},end:{line:499,column:7}},"308":{start:{line:493,column:8},end:{line:493,column:58}},"309":{start:{line:495,column:8},end:{line:495,column:42}},"310":{start:{line:495,column:31},end:{line:495,column:41}},"311":{start:{line:496,column:8},end:{line:496,column:39}},"312":{start:{line:496,column:25},end:{line:496,column:38}},"313":{start:{line:498,column:8},end:{line:498,column:51}},"314":{start:{line:500,column:4},end:{line:505,column:7}},"315":{start:{line:501,column:8},end:{line:501,column:38}},"316":{start:{line:502,column:8},end:{line:502,column:29}},"317":{start:{line:504,column:8},end:{line:504,column:57}},"318":{start:{line:506,column:4},end:{line:530,column:7}},"319":{start:{line:507,column:20},end:{line:507,column:29}},"320":{start:{line:508,column:8},end:{line:508,column:32}},"321":{start:{line:509,column:39},end:{line:509,column:102}},"322":{start:{line:510,column:8},end:{line:510,column:71}},"323":{start:{line:511,column:8},end:{line:511,column:34}},"324":{start:{line:512,column:24},end:{line:512,column:65}},"325":{start:{line:513,column:8},end:{line:513,column:46}},"326":{start:{line:514,column:45},end:{line:514,column:52}},"327":{start:{line:515,column:8},end:{line:521,column:11}},"328":{start:{line:522,column:8},end:{line:522,column:49}},"329":{start:{line:523,column:8},end:{line:529,column:11}},"330":{start:{line:531,column:4},end:{line:536,column:7}},"331":{start:{line:532,column:8},end:{line:532,column:72}},"332":{start:{line:533,column:8},end:{line:535,column:87}},"333":{start:{line:534,column:12},end:{line:534,column:76}},"334":{start:{line:537,column:4},end:{line:547,column:7}},"335":{start:{line:538,column:31},end:{line:538,column:40}},"336":{start:{line:539,column:8},end:{line:539,column:59}},"337":{start:{line:540,column:26},end:{line:540,column:62}},"338":{start:{line:541,column:8},end:{line:546,column:135}},"339":{start:{line:542,column:12},end:{line:545,column:15}},"340":{start:{line:548,column:4},end:{line:554,column:7}},"341":{start:{line:549,column:31},end:{line:549,column:40}},"342":{start:{line:550,column:8},end:{line:550,column:48}},"343":{start:{line:551,column:8},end:{line:553,column:68}},"344":{start:{line:552,column:12},end:{line:552,column:80}},"345":{start:{line:555,column:4},end:{line:579,column:7}},"346":{start:{line:556,column:20},end:{line:556,column:29}},"347":{start:{line:557,column:8},end:{line:557,column:32}},"348":{start:{line:558,column:39},end:{line:558,column:86}},"349":{start:{line:559,column:8},end:{line:559,column:57}},"350":{start:{line:560,column:8},end:{line:560,column:34}},"351":{start:{line:561,column:24},end:{line:561,column:65}},"352":{start:{line:562,column:8},end:{line:562,column:46}},"353":{start:{line:563,column:45},end:{line:563,column:52}},"354":{start:{line:564,column:8},end:{line:570,column:11}},"355":{start:{line:571,column:8},end:{line:571,column:49}},"356":{start:{line:572,column:8},end:{line:578,column:11}},"357":{start:{line:581,column:0},end:{line:691,column:3}},"358":{start:{line:583,column:25},end:{line:583,column:39}},"359":{start:{line:584,column:22},end:{line:584,column:30}},"360":{start:{line:585,column:23},end:{line:585,column:58}},"361":{start:{line:586,column:4},end:{line:593,column:7}},"362":{start:{line:587,column:8},end:{line:587,column:58}},"363":{start:{line:589,column:8},end:{line:589,column:42}},"364":{start:{line:589,column:31},end:{line:589,column:41}},"365":{start:{line:590,column:8},end:{line:590,column:39}},"366":{start:{line:590,column:25},end:{line:590,column:38}},"367":{start:{line:592,column:8},end:{line:592,column:51}},"368":{start:{line:594,column:4},end:{line:599,column:7}},"369":{start:{line:595,column:8},end:{line:595,column:38}},"370":{start:{line:596,column:8},end:{line:596,column:29}},"371":{start:{line:598,column:8},end:{line:598,column:57}},"372":{start:{line:600,column:4},end:{line:629,column:7}},"373":{start:{line:603,column:16},end:{line:603,column:28}},"374":{start:{line:606,column:22},end:{line:606,column:40}},"375":{start:{line:607,column:40},end:{line:607,column:104}},"376":{start:{line:608,column:8},end:{line:610,column:11}},"377":{start:{line:609,column:12},end:{line:609,column:31}},"378":{start:{line:611,column:24},end:{line:611,column:65}},"379":{start:{line:612,column:8},end:{line:612,column:46}},"380":{start:{line:613,column:45},end:{line:613,column:52}},"381":{start:{line:614,column:8},end:{line:620,column:11}},"382":{start:{line:621,column:8},end:{line:621,column:49}},"383":{start:{line:622,column:8},end:{line:628,column:11}},"384":{start:{line:630,column:4},end:{line:635,column:7}},"385":{start:{line:631,column:8},end:{line:631,column:73}},"386":{start:{line:632,column:8},end:{line:634,column:87}},"387":{start:{line:633,column:12},end:{line:633,column:77}},"388":{start:{line:636,column:4},end:{line:646,column:7}},"389":{start:{line:637,column:31},end:{line:637,column:40}},"390":{start:{line:638,column:8},end:{line:638,column:59}},"391":{start:{line:639,column:26},end:{line:639,column:62}},"392":{start:{line:640,column:8},end:{line:645,column:135}},"393":{start:{line:641,column:12},end:{line:644,column:15}},"394":{start:{line:647,column:4},end:{line:653,column:7}},"395":{start:{line:648,column:31},end:{line:648,column:40}},"396":{start:{line:649,column:8},end:{line:649,column:48}},"397":{start:{line:650,column:8},end:{line:652,column:68}},"398":{start:{line:651,column:12},end:{line:651,column:81}},"399":{start:{line:654,column:4},end:{line:690,column:7}},"400":{start:{line:657,column:16},end:{line:657,column:36}},"401":{start:{line:660,column:16},end:{line:660,column:36}},"402":{start:{line:663,column:16},end:{line:663,column:31}},"403":{start:{line:666,column:20},end:{line:666,column:36}},"404":{start:{line:667,column:40},end:{line:667,column:88}},"405":{start:{line:668,column:8},end:{line:670,column:11}},"406":{start:{line:669,column:12},end:{line:669,column:29}},"407":{start:{line:671,column:8},end:{line:671,column:18}},"408":{start:{line:672,column:24},end:{line:672,column:65}},"409":{start:{line:673,column:8},end:{line:673,column:46}},"410":{start:{line:674,column:45},end:{line:674,column:52}},"411":{start:{line:675,column:8},end:{line:681,column:11}},"412":{start:{line:682,column:8},end:{line:682,column:49}},"413":{start:{line:683,column:8},end:{line:689,column:11}},"414":{start:{line:692,column:0},end:{line:771,column:3}},"415":{start:{line:694,column:25},end:{line:694,column:39}},"416":{start:{line:695,column:22},end:{line:695,column:30}},"417":{start:{line:696,column:23},end:{line:696,column:58}},"418":{start:{line:697,column:4},end:{line:704,column:7}},"419":{start:{line:698,column:8},end:{line:698,column:58}},"420":{start:{line:700,column:8},end:{line:700,column:42}},"421":{start:{line:700,column:31},end:{line:700,column:41}},"422":{start:{line:701,column:8},end:{line:701,column:39}},"423":{start:{line:701,column:25},end:{line:701,column:38}},"424":{start:{line:703,column:8},end:{line:703,column:51}},"425":{start:{line:705,column:4},end:{line:710,column:7}},"426":{start:{line:706,column:8},end:{line:706,column:38}},"427":{start:{line:707,column:8},end:{line:707,column:29}},"428":{start:{line:709,column:8},end:{line:709,column:57}},"429":{start:{line:711,column:4},end:{line:770,column:7}},"430":{start:{line:712,column:27},end:{line:712,column:81}},"431":{start:{line:713,column:8},end:{line:713,column:68}},"432":{start:{line:714,column:28},end:{line:714,column:83}},"433":{start:{line:715,column:8},end:{line:715,column:69}},"434":{start:{line:716,column:20},end:{line:716,column:45}},"435":{start:{line:717,column:34},end:{line:717,column:95}},"436":{start:{line:718,column:8},end:{line:720,column:11}},"437":{start:{line:719,column:24},end:{line:719,column:34}},"438":{start:{line:721,column:32},end:{line:721,column:91}},"439":{start:{line:722,column:8},end:{line:722,column:70}},"440":{start:{line:723,column:24},end:{line:723,column:65}},"441":{start:{line:724,column:8},end:{line:724,column:46}},"442":{start:{line:725,column:234},end:{line:725,column:241}},"443":{start:{line:726,column:8},end:{line:732,column:11}},"444":{start:{line:733,column:8},end:{line:739,column:11}},"445":{start:{line:740,column:8},end:{line:746,column:11}},"446":{start:{line:747,column:8},end:{line:753,column:11}},"447":{start:{line:754,column:8},end:{line:754,column:50}},"448":{start:{line:755,column:8},end:{line:755,column:60}},"449":{start:{line:756,column:8},end:{line:756,column:64}},"450":{start:{line:757,column:8},end:{line:757,column:91}},"451":{start:{line:758,column:8},end:{line:758,column:87}},"452":{start:{line:759,column:8},end:{line:759,column:50}},"453":{start:{line:760,column:8},end:{line:760,column:60}},"454":{start:{line:761,column:8},end:{line:761,column:64}},"455":{start:{line:762,column:8},end:{line:762,column:50}},"456":{start:{line:763,column:8},end:{line:763,column:60}},"457":{start:{line:764,column:8},end:{line:764,column:62}},"458":{start:{line:765,column:8},end:{line:765,column:103}},"459":{start:{line:766,column:8},end:{line:766,column:103}},"460":{start:{line:767,column:8},end:{line:767,column:50}},"461":{start:{line:768,column:8},end:{line:768,column:60}},"462":{start:{line:769,column:8},end:{line:769,column:62}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:34,column:26},end:{line:34,column:27}},loc:{start:{line:34,column:32},end:{line:107,column:1}},line:34},"1":{name:"(anonymous_1)",decl:{start:{line:39,column:15},end:{line:39,column:16}},loc:{start:{line:39,column:21},end:{line:46,column:5}},line:39},"2":{name:"(anonymous_2)",decl:{start:{line:42,column:25},end:{line:42,column:26}},loc:{start:{line:42,column:31},end:{line:42,column:41}},line:42},"3":{name:"(anonymous_3)",decl:{start:{line:43,column:19},end:{line:43,column:20}},loc:{start:{line:43,column:25},end:{line:43,column:38}},line:43},"4":{name:"(anonymous_4)",decl:{start:{line:47,column:14},end:{line:47,column:15}},loc:{start:{line:47,column:20},end:{line:52,column:5}},line:47},"5":{name:"(anonymous_5)",decl:{start:{line:53,column:33},end:{line:53,column:34}},loc:{start:{line:53,column:39},end:{line:75,column:5}},line:53},"6":{name:"(anonymous_6)",decl:{start:{line:76,column:49},end:{line:76,column:50}},loc:{start:{line:76,column:55},end:{line:98,column:5}},line:76},"7":{name:"(anonymous_7)",decl:{start:{line:99,column:88},end:{line:99,column:89}},loc:{start:{line:99,column:94},end:{line:106,column:5}},line:99},"8":{name:"(anonymous_8)",decl:{start:{line:103,column:22},end:{line:103,column:23}},loc:{start:{line:103,column:28},end:{line:105,column:9}},line:103},"9":{name:"(anonymous_9)",decl:{start:{line:108,column:27},end:{line:108,column:28}},loc:{start:{line:108,column:33},end:{line:193,column:1}},line:108},"10":{name:"(anonymous_10)",decl:{start:{line:113,column:15},end:{line:113,column:16}},loc:{start:{line:113,column:21},end:{line:120,column:5}},line:113},"11":{name:"(anonymous_11)",decl:{start:{line:116,column:25},end:{line:116,column:26}},loc:{start:{line:116,column:31},end:{line:116,column:41}},line:116},"12":{name:"(anonymous_12)",decl:{start:{line:117,column:19},end:{line:117,column:20}},loc:{start:{line:117,column:25},end:{line:117,column:38}},line:117},"13":{name:"(anonymous_13)",decl:{start:{line:121,column:14},end:{line:121,column:15}},loc:{start:{line:121,column:20},end:{line:126,column:5}},line:121},"14":{name:"(anonymous_14)",decl:{start:{line:127,column:33},end:{line:127,column:34}},loc:{start:{line:127,column:39},end:{line:151,column:5}},line:127},"15":{name:"(anonymous_15)",decl:{start:{line:152,column:62},end:{line:152,column:63}},loc:{start:{line:152,column:68},end:{line:157,column:5}},line:152},"16":{name:"(anonymous_16)",decl:{start:{line:154,column:22},end:{line:154,column:23}},loc:{start:{line:154,column:28},end:{line:156,column:9}},line:154},"17":{name:"(anonymous_17)",decl:{start:{line:158,column:75},end:{line:158,column:76}},loc:{start:{line:158,column:81},end:{line:169,column:5}},line:158},"18":{name:"(anonymous_18)",decl:{start:{line:161,column:22},end:{line:161,column:23}},loc:{start:{line:161,column:28},end:{line:163,column:9}},line:161},"19":{name:"(anonymous_19)",decl:{start:{line:166,column:22},end:{line:166,column:23}},loc:{start:{line:166,column:28},end:{line:168,column:9}},line:166},"20":{name:"(anonymous_20)",decl:{start:{line:170,column:49},end:{line:170,column:50}},loc:{start:{line:170,column:55},end:{line:192,column:5}},line:170},"21":{name:"(anonymous_21)",decl:{start:{line:194,column:33},end:{line:194,column:34}},loc:{start:{line:194,column:39},end:{line:284,column:1}},line:194},"22":{name:"(anonymous_22)",decl:{start:{line:199,column:15},end:{line:199,column:16}},loc:{start:{line:199,column:21},end:{line:206,column:5}},line:199},"23":{name:"(anonymous_23)",decl:{start:{line:202,column:25},end:{line:202,column:26}},loc:{start:{line:202,column:31},end:{line:202,column:41}},line:202},"24":{name:"(anonymous_24)",decl:{start:{line:203,column:19},end:{line:203,column:20}},loc:{start:{line:203,column:25},end:{line:203,column:38}},line:203},"25":{name:"(anonymous_25)",decl:{start:{line:207,column:14},end:{line:207,column:15}},loc:{start:{line:207,column:20},end:{line:212,column:5}},line:207},"26":{name:"(anonymous_26)",decl:{start:{line:213,column:33},end:{line:213,column:34}},loc:{start:{line:213,column:39},end:{line:237,column:5}},line:213},"27":{name:"(anonymous_27)",decl:{start:{line:238,column:62},end:{line:238,column:63}},loc:{start:{line:238,column:68},end:{line:243,column:5}},line:238},"28":{name:"(anonymous_28)",decl:{start:{line:240,column:22},end:{line:240,column:23}},loc:{start:{line:240,column:28},end:{line:242,column:9}},line:240},"29":{name:"(anonymous_29)",decl:{start:{line:244,column:88},end:{line:244,column:89}},loc:{start:{line:244,column:94},end:{line:251,column:5}},line:244},"30":{name:"(anonymous_30)",decl:{start:{line:248,column:22},end:{line:248,column:23}},loc:{start:{line:248,column:28},end:{line:250,column:9}},line:248},"31":{name:"(anonymous_31)",decl:{start:{line:252,column:75},end:{line:252,column:76}},loc:{start:{line:252,column:81},end:{line:258,column:5}},line:252},"32":{name:"(anonymous_32)",decl:{start:{line:255,column:22},end:{line:255,column:23}},loc:{start:{line:255,column:28},end:{line:257,column:9}},line:255},"33":{name:"(anonymous_33)",decl:{start:{line:259,column:49},end:{line:259,column:50}},loc:{start:{line:259,column:55},end:{line:283,column:5}},line:259},"34":{name:"(anonymous_34)",decl:{start:{line:285,column:34},end:{line:285,column:35}},loc:{start:{line:285,column:40},end:{line:337,column:1}},line:285},"35":{name:"(anonymous_35)",decl:{start:{line:290,column:15},end:{line:290,column:16}},loc:{start:{line:290,column:21},end:{line:297,column:5}},line:290},"36":{name:"(anonymous_36)",decl:{start:{line:293,column:25},end:{line:293,column:26}},loc:{start:{line:293,column:31},end:{line:293,column:41}},line:293},"37":{name:"(anonymous_37)",decl:{start:{line:294,column:19},end:{line:294,column:20}},loc:{start:{line:294,column:25},end:{line:294,column:38}},line:294},"38":{name:"(anonymous_38)",decl:{start:{line:298,column:14},end:{line:298,column:15}},loc:{start:{line:298,column:20},end:{line:303,column:5}},line:298},"39":{name:"(anonymous_39)",decl:{start:{line:304,column:33},end:{line:304,column:34}},loc:{start:{line:304,column:39},end:{line:330,column:5}},line:304},"40":{name:"(anonymous_40)",decl:{start:{line:306,column:12},end:{line:306,column:13}},loc:{start:{line:306,column:23},end:{line:308,column:13}},line:306},"41":{name:"(anonymous_41)",decl:{start:{line:331,column:62},end:{line:331,column:63}},loc:{start:{line:331,column:68},end:{line:336,column:5}},line:331},"42":{name:"(anonymous_42)",decl:{start:{line:333,column:22},end:{line:333,column:23}},loc:{start:{line:333,column:28},end:{line:335,column:9}},line:333},"43":{name:"(anonymous_43)",decl:{start:{line:338,column:31},end:{line:338,column:32}},loc:{start:{line:338,column:37},end:{line:411,column:1}},line:338},"44":{name:"(anonymous_44)",decl:{start:{line:343,column:15},end:{line:343,column:16}},loc:{start:{line:343,column:21},end:{line:350,column:5}},line:343},"45":{name:"(anonymous_45)",decl:{start:{line:346,column:25},end:{line:346,column:26}},loc:{start:{line:346,column:31},end:{line:346,column:41}},line:346},"46":{name:"(anonymous_46)",decl:{start:{line:347,column:19},end:{line:347,column:20}},loc:{start:{line:347,column:25},end:{line:347,column:38}},line:347},"47":{name:"(anonymous_47)",decl:{start:{line:351,column:14},end:{line:351,column:15}},loc:{start:{line:351,column:20},end:{line:356,column:5}},line:351},"48":{name:"(anonymous_48)",decl:{start:{line:357,column:33},end:{line:357,column:34}},loc:{start:{line:357,column:39},end:{line:379,column:5}},line:357},"49":{name:"(anonymous_49)",decl:{start:{line:380,column:49},end:{line:380,column:50}},loc:{start:{line:380,column:55},end:{line:402,column:5}},line:380},"50":{name:"(anonymous_50)",decl:{start:{line:403,column:88},end:{line:403,column:89}},loc:{start:{line:403,column:94},end:{line:410,column:5}},line:403},"51":{name:"(anonymous_51)",decl:{start:{line:407,column:22},end:{line:407,column:23}},loc:{start:{line:407,column:28},end:{line:409,column:9}},line:407},"52":{name:"(anonymous_52)",decl:{start:{line:412,column:32},end:{line:412,column:33}},loc:{start:{line:412,column:38},end:{line:486,column:1}},line:412},"53":{name:"(anonymous_53)",decl:{start:{line:417,column:15},end:{line:417,column:16}},loc:{start:{line:417,column:21},end:{line:424,column:5}},line:417},"54":{name:"(anonymous_54)",decl:{start:{line:420,column:25},end:{line:420,column:26}},loc:{start:{line:420,column:31},end:{line:420,column:41}},line:420},"55":{name:"(anonymous_55)",decl:{start:{line:421,column:19},end:{line:421,column:20}},loc:{start:{line:421,column:25},end:{line:421,column:38}},line:421},"56":{name:"(anonymous_56)",decl:{start:{line:425,column:14},end:{line:425,column:15}},loc:{start:{line:425,column:20},end:{line:430,column:5}},line:425},"57":{name:"(anonymous_57)",decl:{start:{line:431,column:33},end:{line:431,column:34}},loc:{start:{line:431,column:39},end:{line:453,column:5}},line:431},"58":{name:"(anonymous_58)",decl:{start:{line:454,column:49},end:{line:454,column:50}},loc:{start:{line:454,column:55},end:{line:477,column:5}},line:454},"59":{name:"(anonymous_59)",decl:{start:{line:478,column:88},end:{line:478,column:89}},loc:{start:{line:478,column:94},end:{line:485,column:5}},line:478},"60":{name:"(anonymous_60)",decl:{start:{line:482,column:22},end:{line:482,column:23}},loc:{start:{line:482,column:28},end:{line:484,column:9}},line:482},"61":{name:"(anonymous_61)",decl:{start:{line:487,column:38},end:{line:487,column:39}},loc:{start:{line:487,column:44},end:{line:580,column:1}},line:487},"62":{name:"(anonymous_62)",decl:{start:{line:492,column:15},end:{line:492,column:16}},loc:{start:{line:492,column:21},end:{line:499,column:5}},line:492},"63":{name:"(anonymous_63)",decl:{start:{line:495,column:25},end:{line:495,column:26}},loc:{start:{line:495,column:31},end:{line:495,column:41}},line:495},"64":{name:"(anonymous_64)",decl:{start:{line:496,column:19},end:{line:496,column:20}},loc:{start:{line:496,column:25},end:{line:496,column:38}},line:496},"65":{name:"(anonymous_65)",decl:{start:{line:500,column:14},end:{line:500,column:15}},loc:{start:{line:500,column:20},end:{line:505,column:5}},line:500},"66":{name:"(anonymous_66)",decl:{start:{line:506,column:33},end:{line:506,column:34}},loc:{start:{line:506,column:39},end:{line:530,column:5}},line:506},"67":{name:"(anonymous_67)",decl:{start:{line:531,column:62},end:{line:531,column:63}},loc:{start:{line:531,column:68},end:{line:536,column:5}},line:531},"68":{name:"(anonymous_68)",decl:{start:{line:533,column:22},end:{line:533,column:23}},loc:{start:{line:533,column:28},end:{line:535,column:9}},line:533},"69":{name:"(anonymous_69)",decl:{start:{line:537,column:88},end:{line:537,column:89}},loc:{start:{line:537,column:94},end:{line:547,column:5}},line:537},"70":{name:"(anonymous_70)",decl:{start:{line:541,column:22},end:{line:541,column:23}},loc:{start:{line:541,column:28},end:{line:546,column:9}},line:541},"71":{name:"(anonymous_71)",decl:{start:{line:548,column:75},end:{line:548,column:76}},loc:{start:{line:548,column:81},end:{line:554,column:5}},line:548},"72":{name:"(anonymous_72)",decl:{start:{line:551,column:22},end:{line:551,column:23}},loc:{start:{line:551,column:28},end:{line:553,column:9}},line:551},"73":{name:"(anonymous_73)",decl:{start:{line:555,column:49},end:{line:555,column:50}},loc:{start:{line:555,column:55},end:{line:579,column:5}},line:555},"74":{name:"(anonymous_74)",decl:{start:{line:581,column:39},end:{line:581,column:40}},loc:{start:{line:581,column:45},end:{line:691,column:1}},line:581},"75":{name:"(anonymous_75)",decl:{start:{line:586,column:15},end:{line:586,column:16}},loc:{start:{line:586,column:21},end:{line:593,column:5}},line:586},"76":{name:"(anonymous_76)",decl:{start:{line:589,column:25},end:{line:589,column:26}},loc:{start:{line:589,column:31},end:{line:589,column:41}},line:589},"77":{name:"(anonymous_77)",decl:{start:{line:590,column:19},end:{line:590,column:20}},loc:{start:{line:590,column:25},end:{line:590,column:38}},line:590},"78":{name:"(anonymous_78)",decl:{start:{line:594,column:14},end:{line:594,column:15}},loc:{start:{line:594,column:20},end:{line:599,column:5}},line:594},"79":{name:"(anonymous_79)",decl:{start:{line:600,column:33},end:{line:600,column:34}},loc:{start:{line:600,column:39},end:{line:629,column:5}},line:600},"80":{name:"(anonymous_80)",decl:{start:{line:602,column:12},end:{line:602,column:13}},loc:{start:{line:602,column:24},end:{line:604,column:13}},line:602},"81":{name:"(anonymous_81)",decl:{start:{line:608,column:67},end:{line:608,column:68}},loc:{start:{line:608,column:73},end:{line:610,column:9}},line:608},"82":{name:"(anonymous_82)",decl:{start:{line:630,column:62},end:{line:630,column:63}},loc:{start:{line:630,column:68},end:{line:635,column:5}},line:630},"83":{name:"(anonymous_83)",decl:{start:{line:632,column:22},end:{line:632,column:23}},loc:{start:{line:632,column:28},end:{line:634,column:9}},line:632},"84":{name:"(anonymous_84)",decl:{start:{line:636,column:88},end:{line:636,column:89}},loc:{start:{line:636,column:94},end:{line:646,column:5}},line:636},"85":{name:"(anonymous_85)",decl:{start:{line:640,column:22},end:{line:640,column:23}},loc:{start:{line:640,column:28},end:{line:645,column:9}},line:640},"86":{name:"(anonymous_86)",decl:{start:{line:647,column:75},end:{line:647,column:76}},loc:{start:{line:647,column:81},end:{line:653,column:5}},line:647},"87":{name:"(anonymous_87)",decl:{start:{line:650,column:22},end:{line:650,column:23}},loc:{start:{line:650,column:28},end:{line:652,column:9}},line:650},"88":{name:"(anonymous_88)",decl:{start:{line:654,column:49},end:{line:654,column:50}},loc:{start:{line:654,column:55},end:{line:690,column:5}},line:654},"89":{name:"(anonymous_89)",decl:{start:{line:656,column:12},end:{line:656,column:13}},loc:{start:{line:656,column:26},end:{line:658,column:13}},line:656},"90":{name:"(anonymous_90)",decl:{start:{line:659,column:12},end:{line:659,column:13}},loc:{start:{line:659,column:24},end:{line:661,column:13}},line:659},"91":{name:"(anonymous_91)",decl:{start:{line:662,column:12},end:{line:662,column:13}},loc:{start:{line:662,column:18},end:{line:664,column:13}},line:662},"92":{name:"(anonymous_92)",decl:{start:{line:668,column:53},end:{line:668,column:54}},loc:{start:{line:668,column:59},end:{line:670,column:9}},line:668},"93":{name:"(anonymous_93)",decl:{start:{line:692,column:32},end:{line:692,column:33}},loc:{start:{line:692,column:38},end:{line:771,column:1}},line:692},"94":{name:"(anonymous_94)",decl:{start:{line:697,column:15},end:{line:697,column:16}},loc:{start:{line:697,column:21},end:{line:704,column:5}},line:697},"95":{name:"(anonymous_95)",decl:{start:{line:700,column:25},end:{line:700,column:26}},loc:{start:{line:700,column:31},end:{line:700,column:41}},line:700},"96":{name:"(anonymous_96)",decl:{start:{line:701,column:19},end:{line:701,column:20}},loc:{start:{line:701,column:25},end:{line:701,column:38}},line:701},"97":{name:"(anonymous_97)",decl:{start:{line:705,column:14},end:{line:705,column:15}},loc:{start:{line:705,column:20},end:{line:710,column:5}},line:705},"98":{name:"(anonymous_98)",decl:{start:{line:711,column:32},end:{line:711,column:33}},loc:{start:{line:711,column:38},end:{line:770,column:5}},line:711},"99":{name:"(anonymous_99)",decl:{start:{line:719,column:18},end:{line:719,column:19}},loc:{start:{line:719,column:24},end:{line:719,column:34}},line:719}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":0,"313":0,"314":0,"315":0,"316":0,"317":0,"318":0,"319":0,"320":0,"321":0,"322":0,"323":0,"324":0,"325":0,"326":0,"327":0,"328":0,"329":0,"330":0,"331":0,"332":0,"333":0,"334":0,"335":0,"336":0,"337":0,"338":0,"339":0,"340":0,"341":0,"342":0,"343":0,"344":0,"345":0,"346":0,"347":0,"348":0,"349":0,"350":0,"351":0,"352":0,"353":0,"354":0,"355":0,"356":0,"357":0,"358":0,"359":0,"360":0,"361":0,"362":0,"363":0,"364":0,"365":0,"366":0,"367":0,"368":0,"369":0,"370":0,"371":0,"372":0,"373":0,"374":0,"375":0,"376":0,"377":0,"378":0,"379":0,"380":0,"381":0,"382":0,"383":0,"384":0,"385":0,"386":0,"387":0,"388":0,"389":0,"390":0,"391":0,"392":0,"393":0,"394":0,"395":0,"396":0,"397":0,"398":0,"399":0,"400":0,"401":0,"402":0,"403":0,"404":0,"405":0,"406":0,"407":0,"408":0,"409":0,"410":0,"411":0,"412":0,"413":0,"414":0,"415":0,"416":0,"417":0,"418":0,"419":0,"420":0,"421":0,"422":0,"423":0,"424":0,"425":0,"426":0,"427":0,"428":0,"429":0,"430":0,"431":0,"432":0,"433":0,"434":0,"435":0,"436":0,"437":0,"438":0,"439":0,"440":0,"441":0,"442":0,"443":0,"444":0,"445":0,"446":0,"447":0,"448":0,"449":0,"450":0,"451":0,"452":0,"453":0,"454":0,"455":0,"456":0,"457":0,"458":0,"459":0,"460":0,"461":0,"462":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0},b:{},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-metric-registry.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-metric-registry.ts"],names:[],mappings:"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",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport { TEST_ONLY } from '../src/common/time-util';\nimport {\n  LabelKey,\n  LabelValue,\n  MetricDescriptorType,\n  Timestamp,\n} from '../src/metrics/export/types';\nimport { MetricRegistry } from '../src/metrics/metric-registry';\nimport { MeasureUnit } from '../src/stats/types';\n\nconst METRIC_NAME = 'metric-name';\nconst METRIC_DESCRIPTION = 'metric-description';\nconst UNIT = MeasureUnit.UNIT;\nconst LABEL_KEYS: LabelKey[] = [{ key: 'code', description: 'desc' }];\nconst LABEL_VALUES_200: LabelValue[] = [{ value: '200' }];\nconst LABEL_VALUES_400: LabelValue[] = [{ value: '400' }];\n\nconst METRIC_OPTIONS = {\n  description: METRIC_DESCRIPTION,\n  unit: UNIT,\n  labelKeys: LABEL_KEYS,\n};\n\ndescribe('addInt64Gauge', () => {\n  let registry: MetricRegistry;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n\n  beforeEach(() => {\n    registry = new MetricRegistry();\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  it('should return a metric', () => {\n    const int64Gauge = registry.addInt64Gauge(METRIC_NAME, METRIC_OPTIONS);\n    const pointEntry = int64Gauge.getOrCreateTimeSeries(LABEL_VALUES_200);\n    pointEntry.add(100);\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: METRIC_DESCRIPTION,\n      labelKeys: LABEL_KEYS,\n      unit: UNIT,\n      type: MetricDescriptorType.GAUGE_INT64,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    const [{ points }] = timeseries;\n    const [point] = points;\n    assert.strictEqual(point.value, 100);\n    assert.deepStrictEqual(point.timestamp, {\n      seconds: mockedTime.seconds,\n      nanos: mockedTime.nanos,\n    });\n  });\n\n  it('should return a metric without options', () => {\n    const int64Gauge = registry.addInt64Gauge(METRIC_NAME);\n    const pointEntry = int64Gauge.getDefaultTimeSeries();\n    pointEntry.add(100);\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: '',\n      labelKeys: [],\n      unit: '1',\n      type: MetricDescriptorType.GAUGE_INT64,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    const [{ points }] = timeseries;\n    const [point] = points;\n    assert.strictEqual(point.value, 100);\n    assert.deepStrictEqual(point.timestamp, {\n      seconds: mockedTime.seconds,\n      nanos: mockedTime.nanos,\n    });\n  });\n\n  it('should throw an error when the duplicate keys in labelKeys and constantLabels', () => {\n    const constantLabels = new Map();\n    constantLabels.set({ key: 'k1' }, { value: 'v1' });\n    const labelKeys = [{ key: 'k1', description: 'desc' }];\n    assert.throws(() => {\n      registry.addInt64Gauge(METRIC_NAME, { constantLabels, labelKeys });\n    }, /^Error: The keys from LabelKeys should not be present in constantLabels or LabelKeys should not contains duplicate keys$/);\n  });\n});\n\ndescribe('addDoubleGauge', () => {\n  let registry: MetricRegistry;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n\n  beforeEach(() => {\n    registry = new MetricRegistry();\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  it('should return a metric', () => {\n    const doubleGauge = registry.addDoubleGauge(METRIC_NAME, METRIC_OPTIONS);\n    const pointEntry = doubleGauge.getOrCreateTimeSeries(LABEL_VALUES_200);\n    pointEntry.add(5.5);\n\n    const pointEntry1 = doubleGauge.getOrCreateTimeSeries(LABEL_VALUES_200);\n    pointEntry1.set(0.7);\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: METRIC_DESCRIPTION,\n      labelKeys: LABEL_KEYS,\n      unit: UNIT,\n      type: MetricDescriptorType.GAUGE_DOUBLE,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    const [{ points }] = timeseries;\n    const [point] = points;\n    assert.strictEqual(point.value, 0.7);\n    assert.deepStrictEqual(point.timestamp, {\n      seconds: mockedTime.seconds,\n      nanos: mockedTime.nanos,\n    });\n  });\n\n  it('should throw an error when the register same metric', () => {\n    registry.addDoubleGauge(METRIC_NAME, METRIC_OPTIONS);\n    assert.throws(() => {\n      registry.addDoubleGauge(METRIC_NAME, METRIC_OPTIONS);\n    }, /^Error: A metric with the name metric-name has already been registered.$/);\n  });\n\n  it('should throw an error when the constant labels elements are null', () => {\n    let constantLabels = new Map();\n    constantLabels.set({ key: 'k1' }, null);\n    assert.throws(() => {\n      registry.addDoubleGauge(METRIC_NAME, { constantLabels });\n    }, /^Error: constantLabels elements should not be a NULL$/);\n\n    constantLabels = new Map();\n    constantLabels.set(null, null);\n    assert.throws(() => {\n      registry.addDoubleGauge(METRIC_NAME, { constantLabels });\n    }, /^Error: constantLabels elements should not be a NULL$/);\n  });\n\n  it('should return a metric without options', () => {\n    const doubleGauge = registry.addDoubleGauge(METRIC_NAME);\n    const pointEntry = doubleGauge.getDefaultTimeSeries();\n    pointEntry.add(5.5);\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: '',\n      labelKeys: [],\n      unit: '1',\n      type: MetricDescriptorType.GAUGE_DOUBLE,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    const [{ points }] = timeseries;\n    const [point] = points;\n    assert.strictEqual(point.value, 5.5);\n    assert.deepStrictEqual(point.timestamp, {\n      seconds: mockedTime.seconds,\n      nanos: mockedTime.nanos,\n    });\n  });\n});\n\ndescribe('addDerivedInt64Gauge', () => {\n  let registry: MetricRegistry;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n\n  beforeEach(() => {\n    registry = new MetricRegistry();\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  it('should return a metric', () => {\n    const map = new Map();\n    map.set('key', 'value');\n    const derivedInt64Gauge = registry.addDerivedInt64Gauge(\n      METRIC_NAME,\n      METRIC_OPTIONS\n    );\n    derivedInt64Gauge.createTimeSeries(LABEL_VALUES_200, map);\n    map.set('key1', 'value1');\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: METRIC_DESCRIPTION,\n      labelKeys: LABEL_KEYS,\n      unit: UNIT,\n      type: MetricDescriptorType.GAUGE_INT64,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    const [{ points }] = timeseries;\n    const [point] = points;\n    assert.strictEqual(point.value, 2);\n    assert.deepStrictEqual(point.timestamp, {\n      seconds: mockedTime.seconds,\n      nanos: mockedTime.nanos,\n    });\n  });\n\n  it('should throw an error when the register same metric', () => {\n    registry.addDerivedInt64Gauge(METRIC_NAME, METRIC_OPTIONS);\n    assert.throws(() => {\n      registry.addDerivedInt64Gauge(METRIC_NAME, METRIC_OPTIONS);\n    }, /^Error: A metric with the name metric-name has already been registered.$/);\n  });\n\n  it('should throw an error when the duplicate keys in labelKeys and constantLabels', () => {\n    const constantLabels = new Map();\n    constantLabels.set({ key: 'k1' }, { value: 'v1' });\n    const labelKeys = [{ key: 'k1', description: 'desc' }];\n    assert.throws(() => {\n      registry.addDerivedInt64Gauge(METRIC_NAME, { constantLabels, labelKeys });\n    }, /^Error: The keys from LabelKeys should not be present in constantLabels or LabelKeys should not contains duplicate keys$/);\n  });\n\n  it('should throw an error when the constant labels elements are null', () => {\n    const constantLabels = new Map();\n    constantLabels.set({ key: 'k1' }, null);\n    assert.throws(() => {\n      registry.addDerivedInt64Gauge(METRIC_NAME, { constantLabels });\n    }, /^Error: constantLabels elements should not be a NULL$/);\n  });\n\n  it('should return a metric without options', () => {\n    const map = new Map();\n    map.set('key', 'value');\n    const derivedInt64Gauge = registry.addDerivedInt64Gauge(METRIC_NAME);\n    derivedInt64Gauge.createTimeSeries([], map);\n    map.set('key1', 'value1');\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: '',\n      labelKeys: [],\n      unit: '1',\n      type: MetricDescriptorType.GAUGE_INT64,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    const [{ points }] = timeseries;\n    const [point] = points;\n    assert.strictEqual(point.value, 2);\n    assert.deepStrictEqual(point.timestamp, {\n      seconds: mockedTime.seconds,\n      nanos: mockedTime.nanos,\n    });\n  });\n});\n\ndescribe('addDerivedDoubleGauge', () => {\n  let registry: MetricRegistry;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n\n  beforeEach(() => {\n    registry = new MetricRegistry();\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  it('should return a metric', () => {\n    class QueueManager {\n      getValue(): number {\n        return 0.7;\n      }\n    }\n    const derivedDoubleGauge = registry.addDerivedDoubleGauge(\n      METRIC_NAME,\n      METRIC_OPTIONS\n    );\n    derivedDoubleGauge.createTimeSeries(LABEL_VALUES_200, new QueueManager());\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: METRIC_DESCRIPTION,\n      labelKeys: LABEL_KEYS,\n      unit: UNIT,\n      type: MetricDescriptorType.GAUGE_DOUBLE,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    const [{ points }] = timeseries;\n    const [point] = points;\n    assert.strictEqual(point.value, 0.7);\n    assert.deepStrictEqual(point.timestamp, {\n      seconds: mockedTime.seconds,\n      nanos: mockedTime.nanos,\n    });\n  });\n\n  it('should throw an error when the register same metric', () => {\n    registry.addDerivedDoubleGauge(METRIC_NAME, METRIC_OPTIONS);\n    assert.throws(() => {\n      registry.addDerivedDoubleGauge(METRIC_NAME, METRIC_OPTIONS);\n    }, /^Error: A metric with the name metric-name has already been registered.$/);\n  });\n});\n\ndescribe('addInt64Cumulative', () => {\n  let registry: MetricRegistry;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n\n  beforeEach(() => {\n    registry = new MetricRegistry();\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  it('should return a metric', () => {\n    const int64Gauge = registry.addInt64Cumulative(METRIC_NAME, METRIC_OPTIONS);\n    const pointEntry = int64Gauge.getOrCreateTimeSeries(LABEL_VALUES_200);\n    pointEntry.inc();\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: METRIC_DESCRIPTION,\n      labelKeys: LABEL_KEYS,\n      unit: UNIT,\n      type: MetricDescriptorType.CUMULATIVE_INT64,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    const [{ points }] = timeseries;\n    const [point] = points;\n    assert.strictEqual(point.value, 1);\n    assert.deepStrictEqual(point.timestamp, {\n      seconds: mockedTime.seconds,\n      nanos: mockedTime.nanos,\n    });\n  });\n\n  it('should return a metric without options', () => {\n    const int64Gauge = registry.addInt64Cumulative(METRIC_NAME);\n    const pointEntry = int64Gauge.getDefaultTimeSeries();\n    pointEntry.inc(100);\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: '',\n      labelKeys: [],\n      unit: UNIT,\n      type: MetricDescriptorType.CUMULATIVE_INT64,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    const [{ points }] = timeseries;\n    const [point] = points;\n    assert.strictEqual(point.value, 100);\n    assert.deepStrictEqual(point.timestamp, {\n      seconds: mockedTime.seconds,\n      nanos: mockedTime.nanos,\n    });\n  });\n\n  it('should throw an error when the duplicate keys in labelKeys and constantLabels', () => {\n    const constantLabels = new Map();\n    constantLabels.set({ key: 'k1' }, { value: 'v1' });\n    const labelKeys = [{ key: 'k1', description: 'desc' }];\n    assert.throws(() => {\n      registry.addInt64Cumulative(METRIC_NAME, { constantLabels, labelKeys });\n    }, /^Error: The keys from LabelKeys should not be present in constantLabels or LabelKeys should not contains duplicate keys$/);\n  });\n});\n\ndescribe('addDoubleCumulative', () => {\n  let registry: MetricRegistry;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n\n  beforeEach(() => {\n    registry = new MetricRegistry();\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  it('should return a metric', () => {\n    const int64Gauge = registry.addDoubleCumulative(\n      METRIC_NAME,\n      METRIC_OPTIONS\n    );\n    const pointEntry = int64Gauge.getOrCreateTimeSeries(LABEL_VALUES_200);\n    pointEntry.inc(1.1);\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: METRIC_DESCRIPTION,\n      labelKeys: LABEL_KEYS,\n      unit: UNIT,\n      type: MetricDescriptorType.CUMULATIVE_DOUBLE,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    const [{ points }] = timeseries;\n    const [point] = points;\n    assert.strictEqual(point.value, 1.1);\n    assert.deepStrictEqual(point.timestamp, {\n      seconds: mockedTime.seconds,\n      nanos: mockedTime.nanos,\n    });\n  });\n\n  it('should return a metric without options', () => {\n    const int64Gauge = registry.addDoubleCumulative(METRIC_NAME);\n    const pointEntry = int64Gauge.getDefaultTimeSeries();\n    pointEntry.inc();\n    pointEntry.inc(100.12);\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: '',\n      labelKeys: [],\n      unit: UNIT,\n      type: MetricDescriptorType.CUMULATIVE_DOUBLE,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    const [{ points }] = timeseries;\n    const [point] = points;\n    assert.strictEqual(point.value, 101.12);\n    assert.deepStrictEqual(point.timestamp, {\n      seconds: mockedTime.seconds,\n      nanos: mockedTime.nanos,\n    });\n  });\n\n  it('should throw an error when the duplicate keys in labelKeys and constantLabels', () => {\n    const constantLabels = new Map();\n    constantLabels.set({ key: 'k1' }, { value: 'v1' });\n    const labelKeys = [{ key: 'k1', description: 'desc' }];\n    assert.throws(() => {\n      registry.addDoubleCumulative(METRIC_NAME, { constantLabels, labelKeys });\n    }, /^Error: The keys from LabelKeys should not be present in constantLabels or LabelKeys should not contains duplicate keys$/);\n  });\n});\n\ndescribe('addDerivedInt64Cumulative', () => {\n  let registry: MetricRegistry;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n\n  beforeEach(() => {\n    registry = new MetricRegistry();\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  it('should return a metric', () => {\n    const map = new Map();\n    map.set('key', 'value');\n    const derivedInt64Cumulative = registry.addDerivedInt64Cumulative(\n      METRIC_NAME,\n      METRIC_OPTIONS\n    );\n    derivedInt64Cumulative.createTimeSeries(LABEL_VALUES_200, map);\n    map.set('key1', 'value1');\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: METRIC_DESCRIPTION,\n      labelKeys: LABEL_KEYS,\n      unit: UNIT,\n      type: MetricDescriptorType.CUMULATIVE_INT64,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    assert.deepStrictEqual(timeseries, [\n      {\n        labelValues: LABEL_VALUES_200,\n        points: [{ value: 2, timestamp: mockedTime }],\n        startTimestamp: mockedTime,\n      },\n    ]);\n  });\n\n  it('should throw an error when the register same metric', () => {\n    registry.addDerivedInt64Cumulative(METRIC_NAME, METRIC_OPTIONS);\n    assert.throws(() => {\n      registry.addDerivedInt64Cumulative(METRIC_NAME, METRIC_OPTIONS);\n    }, /^Error: A metric with the name metric-name has already been registered.$/);\n  });\n\n  it('should throw an error when the duplicate keys in labelKeys and constantLabels', () => {\n    const constantLabels = new Map();\n    constantLabels.set({ key: 'k1' }, { value: 'v1' });\n    const labelKeys = [{ key: 'k1', description: 'desc' }];\n    assert.throws(() => {\n      registry.addDerivedInt64Cumulative(METRIC_NAME, {\n        constantLabels,\n        labelKeys,\n      });\n    }, /^Error: The keys from LabelKeys should not be present in constantLabels or LabelKeys should not contains duplicate keys$/);\n  });\n\n  it('should throw an error when the constant labels elements are null', () => {\n    const constantLabels = new Map();\n    constantLabels.set({ key: 'k1' }, null);\n    assert.throws(() => {\n      registry.addDerivedInt64Cumulative(METRIC_NAME, { constantLabels });\n    }, /^Error: constantLabels elements should not be a NULL$/);\n  });\n\n  it('should return a metric without options', () => {\n    const map = new Map();\n    map.set('key', 'value');\n    const derivedInt64Cumulative = registry.addDerivedInt64Cumulative(\n      METRIC_NAME\n    );\n    derivedInt64Cumulative.createTimeSeries([], map);\n    map.set('key1', 'value1');\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: '',\n      labelKeys: [],\n      unit: '1',\n      type: MetricDescriptorType.CUMULATIVE_INT64,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    assert.deepStrictEqual(timeseries, [\n      {\n        labelValues: [],\n        points: [{ value: 2, timestamp: mockedTime }],\n        startTimestamp: mockedTime,\n      },\n    ]);\n  });\n});\n\ndescribe('addDerivedDoubleCumulative', () => {\n  let registry: MetricRegistry;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n\n  beforeEach(() => {\n    registry = new MetricRegistry();\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  it('should return a metric', () => {\n    class QueueManager {\n      get Value(): number {\n        return 45.5;\n      }\n    }\n    const queue = new QueueManager();\n    const derivedDoubleCumulative = registry.addDerivedDoubleCumulative(\n      METRIC_NAME,\n      METRIC_OPTIONS\n    );\n    derivedDoubleCumulative.createTimeSeries(LABEL_VALUES_200, () => {\n      return queue.Value;\n    });\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: METRIC_DESCRIPTION,\n      labelKeys: LABEL_KEYS,\n      unit: UNIT,\n      type: MetricDescriptorType.CUMULATIVE_DOUBLE,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    assert.deepStrictEqual(timeseries, [\n      {\n        labelValues: LABEL_VALUES_200,\n        points: [{ value: 45.5, timestamp: mockedTime }],\n        startTimestamp: mockedTime,\n      },\n    ]);\n  });\n\n  it('should throw an error when the register same metric', () => {\n    registry.addDerivedDoubleCumulative(METRIC_NAME, METRIC_OPTIONS);\n    assert.throws(() => {\n      registry.addDerivedDoubleCumulative(METRIC_NAME, METRIC_OPTIONS);\n    }, /^Error: A metric with the name metric-name has already been registered.$/);\n  });\n\n  it('should throw an error when the duplicate keys in labelKeys and constantLabels', () => {\n    const constantLabels = new Map();\n    constantLabels.set({ key: 'k1' }, { value: 'v1' });\n    const labelKeys = [{ key: 'k1', description: 'desc' }];\n    assert.throws(() => {\n      registry.addDerivedDoubleCumulative(METRIC_NAME, {\n        constantLabels,\n        labelKeys,\n      });\n    }, /^Error: The keys from LabelKeys should not be present in constantLabels or LabelKeys should not contains duplicate keys$/);\n  });\n\n  it('should throw an error when the constant labels elements are null', () => {\n    const constantLabels = new Map();\n    constantLabels.set({ key: 'k1' }, null);\n    assert.throws(() => {\n      registry.addDerivedDoubleCumulative(METRIC_NAME, { constantLabels });\n    }, /^Error: constantLabels elements should not be a NULL$/);\n  });\n\n  it('should return a metric without options', () => {\n    class MemoryInfo {\n      current = 45.5;\n      get Value(): number {\n        return this.current;\n      }\n      inc() {\n        this.current++;\n      }\n    }\n    const mem = new MemoryInfo();\n    const derivedDoubleCumulative = registry.addDerivedDoubleCumulative(\n      METRIC_NAME\n    );\n    derivedDoubleCumulative.createTimeSeries([], () => {\n      return mem.Value;\n    });\n    mem.inc();\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: '',\n      labelKeys: [],\n      unit: '1',\n      type: MetricDescriptorType.CUMULATIVE_DOUBLE,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    assert.deepStrictEqual(timeseries, [\n      {\n        labelValues: [],\n        points: [{ value: 46.5, timestamp: mockedTime }],\n        startTimestamp: mockedTime,\n      },\n    ]);\n  });\n});\n\ndescribe('Add multiple gauges', () => {\n  let registry: MetricRegistry;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n\n  beforeEach(() => {\n    registry = new MetricRegistry();\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  it('should return metrics', () => {\n    const int64Gauge = registry.addInt64Gauge('metric-name1', METRIC_OPTIONS);\n    int64Gauge.getOrCreateTimeSeries(LABEL_VALUES_200).add(100);\n\n    const doubleGauge = registry.addDoubleGauge('metric-name2', METRIC_OPTIONS);\n    doubleGauge.getOrCreateTimeSeries(LABEL_VALUES_200).add(5.5);\n\n    const arr = new Array(5).fill('test');\n    const derivedInt64Gauge = registry.addDerivedInt64Gauge(\n      'metric-name3',\n      METRIC_OPTIONS\n    );\n    derivedInt64Gauge.createTimeSeries(LABEL_VALUES_400, {\n      size: () => arr.length,\n    });\n\n    const int64Cumulative = registry.addInt64Cumulative(\n      'metric-name4',\n      METRIC_OPTIONS\n    );\n    int64Cumulative.getOrCreateTimeSeries(LABEL_VALUES_200).inc();\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 4);\n    const [\n      { descriptor: descriptor1, timeseries: timeseries1 },\n      { descriptor: descriptor2, timeseries: timeseries2 },\n      { descriptor: descriptor3, timeseries: timeseries3 },\n      { descriptor: descriptor4, timeseries: timeseries4 },\n    ] = metrics;\n    assert.deepStrictEqual(descriptor1, {\n      name: 'metric-name1',\n      description: METRIC_DESCRIPTION,\n      labelKeys: LABEL_KEYS,\n      unit: UNIT,\n      type: MetricDescriptorType.GAUGE_INT64,\n    });\n    assert.deepStrictEqual(descriptor2, {\n      name: 'metric-name2',\n      description: METRIC_DESCRIPTION,\n      labelKeys: LABEL_KEYS,\n      unit: UNIT,\n      type: MetricDescriptorType.GAUGE_DOUBLE,\n    });\n    assert.deepStrictEqual(descriptor3, {\n      name: 'metric-name3',\n      description: METRIC_DESCRIPTION,\n      labelKeys: LABEL_KEYS,\n      unit: UNIT,\n      type: MetricDescriptorType.GAUGE_INT64,\n    });\n    assert.deepStrictEqual(descriptor4, {\n      name: 'metric-name4',\n      description: METRIC_DESCRIPTION,\n      labelKeys: LABEL_KEYS,\n      unit: UNIT,\n      type: MetricDescriptorType.CUMULATIVE_INT64,\n    });\n    assert.strictEqual(timeseries1.length, 1);\n    assert.strictEqual(timeseries1[0].points.length, 1);\n    assert.strictEqual(timeseries1[0].points[0].value, 100);\n    assert.strictEqual(\n      timeseries1[0].points[0].timestamp.seconds,\n      mockedTime.seconds\n    );\n    assert.strictEqual(\n      timeseries1[0].points[0].timestamp.nanos,\n      mockedTime.nanos\n    );\n    assert.strictEqual(timeseries2.length, 1);\n    assert.strictEqual(timeseries2[0].points.length, 1);\n    assert.strictEqual(timeseries2[0].points[0].value, 5.5);\n    assert.strictEqual(timeseries3.length, 1);\n    assert.strictEqual(timeseries3[0].points.length, 1);\n    assert.strictEqual(timeseries3[0].points[0].value, 5);\n    assert.deepStrictEqual(\n      timeseries1[0].points[0].timestamp,\n      timeseries2[0].points[0].timestamp\n    );\n    assert.deepStrictEqual(\n      timeseries2[0].points[0].timestamp,\n      timeseries3[0].points[0].timestamp\n    );\n    assert.strictEqual(timeseries4.length, 1);\n    assert.strictEqual(timeseries4[0].points.length, 1);\n    assert.strictEqual(timeseries4[0].points[0].value, 1);\n  });\n});\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"f8a4b248829f1e11407987304a8e5755b08bb592"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2kb94silk6=function(){return actualCoverage;};}return actualCoverage;}cov_2kb94silk6();cov_2kb94silk6().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const assert=(cov_2kb94silk6().s[1]++,require("assert"));const time_util_1=(cov_2kb94silk6().s[2]++,require("../src/common/time-util"));const types_1=(cov_2kb94silk6().s[3]++,require("../src/metrics/export/types"));const metric_registry_1=(cov_2kb94silk6().s[4]++,require("../src/metrics/metric-registry"));const types_2=(cov_2kb94silk6().s[5]++,require("../src/stats/types"));const METRIC_NAME=(cov_2kb94silk6().s[6]++,'metric-name');const METRIC_DESCRIPTION=(cov_2kb94silk6().s[7]++,'metric-description');const UNIT=(cov_2kb94silk6().s[8]++,types_2.MeasureUnit.UNIT);const LABEL_KEYS=(cov_2kb94silk6().s[9]++,[{key:'code',description:'desc'}]);const LABEL_VALUES_200=(cov_2kb94silk6().s[10]++,[{value:'200'}]);const LABEL_VALUES_400=(cov_2kb94silk6().s[11]++,[{value:'400'}]);const METRIC_OPTIONS=(cov_2kb94silk6().s[12]++,{description:METRIC_DESCRIPTION,unit:UNIT,labelKeys:LABEL_KEYS});cov_2kb94silk6().s[13]++;describe('addInt64Gauge',()=>{cov_2kb94silk6().f[0]++;let registry;const realHrtimeFn=(cov_2kb94silk6().s[14]++,process.hrtime);const realNowFn=(cov_2kb94silk6().s[15]++,Date.now);const mockedTime=(cov_2kb94silk6().s[16]++,{seconds:1450000100,nanos:1e7});cov_2kb94silk6().s[17]++;beforeEach(()=>{cov_2kb94silk6().f[1]++;cov_2kb94silk6().s[18]++;registry=new metric_registry_1.MetricRegistry();// @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message
cov_2kb94silk6().s[19]++;process.hrtime=()=>{cov_2kb94silk6().f[2]++;cov_2kb94silk6().s[20]++;return[100,1e7];};cov_2kb94silk6().s[21]++;Date.now=()=>{cov_2kb94silk6().f[3]++;cov_2kb94silk6().s[22]++;return 1450000000000;};// Force the clock to recalibrate the time offset with the mocked time
cov_2kb94silk6().s[23]++;time_util_1.TEST_ONLY.setHrtimeReference();});cov_2kb94silk6().s[24]++;afterEach(()=>{cov_2kb94silk6().f[4]++;cov_2kb94silk6().s[25]++;process.hrtime=realHrtimeFn;cov_2kb94silk6().s[26]++;Date.now=realNowFn;// Reset the hrtime reference so that it uses a real clock again.
cov_2kb94silk6().s[27]++;time_util_1.TEST_ONLY.resetHrtimeFunctionCache();});cov_2kb94silk6().s[28]++;it('should return a metric',()=>{cov_2kb94silk6().f[5]++;const int64Gauge=(cov_2kb94silk6().s[29]++,registry.addInt64Gauge(METRIC_NAME,METRIC_OPTIONS));const pointEntry=(cov_2kb94silk6().s[30]++,int64Gauge.getOrCreateTimeSeries(LABEL_VALUES_200));cov_2kb94silk6().s[31]++;pointEntry.add(100);const metrics=(cov_2kb94silk6().s[32]++,registry.getMetricProducer().getMetrics());cov_2kb94silk6().s[33]++;assert.strictEqual(metrics.length,1);const[{descriptor,timeseries}]=(cov_2kb94silk6().s[34]++,metrics);cov_2kb94silk6().s[35]++;assert.deepStrictEqual(descriptor,{name:METRIC_NAME,description:METRIC_DESCRIPTION,labelKeys:LABEL_KEYS,unit:UNIT,type:types_1.MetricDescriptorType.GAUGE_INT64});cov_2kb94silk6().s[36]++;assert.strictEqual(timeseries.length,1);const[{points}]=(cov_2kb94silk6().s[37]++,timeseries);const[point]=(cov_2kb94silk6().s[38]++,points);cov_2kb94silk6().s[39]++;assert.strictEqual(point.value,100);cov_2kb94silk6().s[40]++;assert.deepStrictEqual(point.timestamp,{seconds:mockedTime.seconds,nanos:mockedTime.nanos});});cov_2kb94silk6().s[41]++;it('should return a metric without options',()=>{cov_2kb94silk6().f[6]++;const int64Gauge=(cov_2kb94silk6().s[42]++,registry.addInt64Gauge(METRIC_NAME));const pointEntry=(cov_2kb94silk6().s[43]++,int64Gauge.getDefaultTimeSeries());cov_2kb94silk6().s[44]++;pointEntry.add(100);const metrics=(cov_2kb94silk6().s[45]++,registry.getMetricProducer().getMetrics());cov_2kb94silk6().s[46]++;assert.strictEqual(metrics.length,1);const[{descriptor,timeseries}]=(cov_2kb94silk6().s[47]++,metrics);cov_2kb94silk6().s[48]++;assert.deepStrictEqual(descriptor,{name:METRIC_NAME,description:'',labelKeys:[],unit:'1',type:types_1.MetricDescriptorType.GAUGE_INT64});cov_2kb94silk6().s[49]++;assert.strictEqual(timeseries.length,1);const[{points}]=(cov_2kb94silk6().s[50]++,timeseries);const[point]=(cov_2kb94silk6().s[51]++,points);cov_2kb94silk6().s[52]++;assert.strictEqual(point.value,100);cov_2kb94silk6().s[53]++;assert.deepStrictEqual(point.timestamp,{seconds:mockedTime.seconds,nanos:mockedTime.nanos});});cov_2kb94silk6().s[54]++;it('should throw an error when the duplicate keys in labelKeys and constantLabels',()=>{cov_2kb94silk6().f[7]++;const constantLabels=(cov_2kb94silk6().s[55]++,new Map());cov_2kb94silk6().s[56]++;constantLabels.set({key:'k1'},{value:'v1'});const labelKeys=(cov_2kb94silk6().s[57]++,[{key:'k1',description:'desc'}]);cov_2kb94silk6().s[58]++;assert.throws(()=>{cov_2kb94silk6().f[8]++;cov_2kb94silk6().s[59]++;registry.addInt64Gauge(METRIC_NAME,{constantLabels,labelKeys});},/^Error: The keys from LabelKeys should not be present in constantLabels or LabelKeys should not contains duplicate keys$/);});});cov_2kb94silk6().s[60]++;describe('addDoubleGauge',()=>{cov_2kb94silk6().f[9]++;let registry;const realHrtimeFn=(cov_2kb94silk6().s[61]++,process.hrtime);const realNowFn=(cov_2kb94silk6().s[62]++,Date.now);const mockedTime=(cov_2kb94silk6().s[63]++,{seconds:1450000100,nanos:1e7});cov_2kb94silk6().s[64]++;beforeEach(()=>{cov_2kb94silk6().f[10]++;cov_2kb94silk6().s[65]++;registry=new metric_registry_1.MetricRegistry();// @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message
cov_2kb94silk6().s[66]++;process.hrtime=()=>{cov_2kb94silk6().f[11]++;cov_2kb94silk6().s[67]++;return[100,1e7];};cov_2kb94silk6().s[68]++;Date.now=()=>{cov_2kb94silk6().f[12]++;cov_2kb94silk6().s[69]++;return 1450000000000;};// Force the clock to recalibrate the time offset with the mocked time
cov_2kb94silk6().s[70]++;time_util_1.TEST_ONLY.setHrtimeReference();});cov_2kb94silk6().s[71]++;afterEach(()=>{cov_2kb94silk6().f[13]++;cov_2kb94silk6().s[72]++;process.hrtime=realHrtimeFn;cov_2kb94silk6().s[73]++;Date.now=realNowFn;// Reset the hrtime reference so that it uses a real clock again.
cov_2kb94silk6().s[74]++;time_util_1.TEST_ONLY.resetHrtimeFunctionCache();});cov_2kb94silk6().s[75]++;it('should return a metric',()=>{cov_2kb94silk6().f[14]++;const doubleGauge=(cov_2kb94silk6().s[76]++,registry.addDoubleGauge(METRIC_NAME,METRIC_OPTIONS));const pointEntry=(cov_2kb94silk6().s[77]++,doubleGauge.getOrCreateTimeSeries(LABEL_VALUES_200));cov_2kb94silk6().s[78]++;pointEntry.add(5.5);const pointEntry1=(cov_2kb94silk6().s[79]++,doubleGauge.getOrCreateTimeSeries(LABEL_VALUES_200));cov_2kb94silk6().s[80]++;pointEntry1.set(0.7);const metrics=(cov_2kb94silk6().s[81]++,registry.getMetricProducer().getMetrics());cov_2kb94silk6().s[82]++;assert.strictEqual(metrics.length,1);const[{descriptor,timeseries}]=(cov_2kb94silk6().s[83]++,metrics);cov_2kb94silk6().s[84]++;assert.deepStrictEqual(descriptor,{name:METRIC_NAME,description:METRIC_DESCRIPTION,labelKeys:LABEL_KEYS,unit:UNIT,type:types_1.MetricDescriptorType.GAUGE_DOUBLE});cov_2kb94silk6().s[85]++;assert.strictEqual(timeseries.length,1);const[{points}]=(cov_2kb94silk6().s[86]++,timeseries);const[point]=(cov_2kb94silk6().s[87]++,points);cov_2kb94silk6().s[88]++;assert.strictEqual(point.value,0.7);cov_2kb94silk6().s[89]++;assert.deepStrictEqual(point.timestamp,{seconds:mockedTime.seconds,nanos:mockedTime.nanos});});cov_2kb94silk6().s[90]++;it('should throw an error when the register same metric',()=>{cov_2kb94silk6().f[15]++;cov_2kb94silk6().s[91]++;registry.addDoubleGauge(METRIC_NAME,METRIC_OPTIONS);cov_2kb94silk6().s[92]++;assert.throws(()=>{cov_2kb94silk6().f[16]++;cov_2kb94silk6().s[93]++;registry.addDoubleGauge(METRIC_NAME,METRIC_OPTIONS);},/^Error: A metric with the name metric-name has already been registered.$/);});cov_2kb94silk6().s[94]++;it('should throw an error when the constant labels elements are null',()=>{cov_2kb94silk6().f[17]++;let constantLabels=(cov_2kb94silk6().s[95]++,new Map());cov_2kb94silk6().s[96]++;constantLabels.set({key:'k1'},null);cov_2kb94silk6().s[97]++;assert.throws(()=>{cov_2kb94silk6().f[18]++;cov_2kb94silk6().s[98]++;registry.addDoubleGauge(METRIC_NAME,{constantLabels});},/^Error: constantLabels elements should not be a NULL$/);cov_2kb94silk6().s[99]++;constantLabels=new Map();cov_2kb94silk6().s[100]++;constantLabels.set(null,null);cov_2kb94silk6().s[101]++;assert.throws(()=>{cov_2kb94silk6().f[19]++;cov_2kb94silk6().s[102]++;registry.addDoubleGauge(METRIC_NAME,{constantLabels});},/^Error: constantLabels elements should not be a NULL$/);});cov_2kb94silk6().s[103]++;it('should return a metric without options',()=>{cov_2kb94silk6().f[20]++;const doubleGauge=(cov_2kb94silk6().s[104]++,registry.addDoubleGauge(METRIC_NAME));const pointEntry=(cov_2kb94silk6().s[105]++,doubleGauge.getDefaultTimeSeries());cov_2kb94silk6().s[106]++;pointEntry.add(5.5);const metrics=(cov_2kb94silk6().s[107]++,registry.getMetricProducer().getMetrics());cov_2kb94silk6().s[108]++;assert.strictEqual(metrics.length,1);const[{descriptor,timeseries}]=(cov_2kb94silk6().s[109]++,metrics);cov_2kb94silk6().s[110]++;assert.deepStrictEqual(descriptor,{name:METRIC_NAME,description:'',labelKeys:[],unit:'1',type:types_1.MetricDescriptorType.GAUGE_DOUBLE});cov_2kb94silk6().s[111]++;assert.strictEqual(timeseries.length,1);const[{points}]=(cov_2kb94silk6().s[112]++,timeseries);const[point]=(cov_2kb94silk6().s[113]++,points);cov_2kb94silk6().s[114]++;assert.strictEqual(point.value,5.5);cov_2kb94silk6().s[115]++;assert.deepStrictEqual(point.timestamp,{seconds:mockedTime.seconds,nanos:mockedTime.nanos});});});cov_2kb94silk6().s[116]++;describe('addDerivedInt64Gauge',()=>{cov_2kb94silk6().f[21]++;let registry;const realHrtimeFn=(cov_2kb94silk6().s[117]++,process.hrtime);const realNowFn=(cov_2kb94silk6().s[118]++,Date.now);const mockedTime=(cov_2kb94silk6().s[119]++,{seconds:1450000100,nanos:1e7});cov_2kb94silk6().s[120]++;beforeEach(()=>{cov_2kb94silk6().f[22]++;cov_2kb94silk6().s[121]++;registry=new metric_registry_1.MetricRegistry();// @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message
cov_2kb94silk6().s[122]++;process.hrtime=()=>{cov_2kb94silk6().f[23]++;cov_2kb94silk6().s[123]++;return[100,1e7];};cov_2kb94silk6().s[124]++;Date.now=()=>{cov_2kb94silk6().f[24]++;cov_2kb94silk6().s[125]++;return 1450000000000;};// Force the clock to recalibrate the time offset with the mocked time
cov_2kb94silk6().s[126]++;time_util_1.TEST_ONLY.setHrtimeReference();});cov_2kb94silk6().s[127]++;afterEach(()=>{cov_2kb94silk6().f[25]++;cov_2kb94silk6().s[128]++;process.hrtime=realHrtimeFn;cov_2kb94silk6().s[129]++;Date.now=realNowFn;// Reset the hrtime reference so that it uses a real clock again.
cov_2kb94silk6().s[130]++;time_util_1.TEST_ONLY.resetHrtimeFunctionCache();});cov_2kb94silk6().s[131]++;it('should return a metric',()=>{cov_2kb94silk6().f[26]++;const map=(cov_2kb94silk6().s[132]++,new Map());cov_2kb94silk6().s[133]++;map.set('key','value');const derivedInt64Gauge=(cov_2kb94silk6().s[134]++,registry.addDerivedInt64Gauge(METRIC_NAME,METRIC_OPTIONS));cov_2kb94silk6().s[135]++;derivedInt64Gauge.createTimeSeries(LABEL_VALUES_200,map);cov_2kb94silk6().s[136]++;map.set('key1','value1');const metrics=(cov_2kb94silk6().s[137]++,registry.getMetricProducer().getMetrics());cov_2kb94silk6().s[138]++;assert.strictEqual(metrics.length,1);const[{descriptor,timeseries}]=(cov_2kb94silk6().s[139]++,metrics);cov_2kb94silk6().s[140]++;assert.deepStrictEqual(descriptor,{name:METRIC_NAME,description:METRIC_DESCRIPTION,labelKeys:LABEL_KEYS,unit:UNIT,type:types_1.MetricDescriptorType.GAUGE_INT64});cov_2kb94silk6().s[141]++;assert.strictEqual(timeseries.length,1);const[{points}]=(cov_2kb94silk6().s[142]++,timeseries);const[point]=(cov_2kb94silk6().s[143]++,points);cov_2kb94silk6().s[144]++;assert.strictEqual(point.value,2);cov_2kb94silk6().s[145]++;assert.deepStrictEqual(point.timestamp,{seconds:mockedTime.seconds,nanos:mockedTime.nanos});});cov_2kb94silk6().s[146]++;it('should throw an error when the register same metric',()=>{cov_2kb94silk6().f[27]++;cov_2kb94silk6().s[147]++;registry.addDerivedInt64Gauge(METRIC_NAME,METRIC_OPTIONS);cov_2kb94silk6().s[148]++;assert.throws(()=>{cov_2kb94silk6().f[28]++;cov_2kb94silk6().s[149]++;registry.addDerivedInt64Gauge(METRIC_NAME,METRIC_OPTIONS);},/^Error: A metric with the name metric-name has already been registered.$/);});cov_2kb94silk6().s[150]++;it('should throw an error when the duplicate keys in labelKeys and constantLabels',()=>{cov_2kb94silk6().f[29]++;const constantLabels=(cov_2kb94silk6().s[151]++,new Map());cov_2kb94silk6().s[152]++;constantLabels.set({key:'k1'},{value:'v1'});const labelKeys=(cov_2kb94silk6().s[153]++,[{key:'k1',description:'desc'}]);cov_2kb94silk6().s[154]++;assert.throws(()=>{cov_2kb94silk6().f[30]++;cov_2kb94silk6().s[155]++;registry.addDerivedInt64Gauge(METRIC_NAME,{constantLabels,labelKeys});},/^Error: The keys from LabelKeys should not be present in constantLabels or LabelKeys should not contains duplicate keys$/);});cov_2kb94silk6().s[156]++;it('should throw an error when the constant labels elements are null',()=>{cov_2kb94silk6().f[31]++;const constantLabels=(cov_2kb94silk6().s[157]++,new Map());cov_2kb94silk6().s[158]++;constantLabels.set({key:'k1'},null);cov_2kb94silk6().s[159]++;assert.throws(()=>{cov_2kb94silk6().f[32]++;cov_2kb94silk6().s[160]++;registry.addDerivedInt64Gauge(METRIC_NAME,{constantLabels});},/^Error: constantLabels elements should not be a NULL$/);});cov_2kb94silk6().s[161]++;it('should return a metric without options',()=>{cov_2kb94silk6().f[33]++;const map=(cov_2kb94silk6().s[162]++,new Map());cov_2kb94silk6().s[163]++;map.set('key','value');const derivedInt64Gauge=(cov_2kb94silk6().s[164]++,registry.addDerivedInt64Gauge(METRIC_NAME));cov_2kb94silk6().s[165]++;derivedInt64Gauge.createTimeSeries([],map);cov_2kb94silk6().s[166]++;map.set('key1','value1');const metrics=(cov_2kb94silk6().s[167]++,registry.getMetricProducer().getMetrics());cov_2kb94silk6().s[168]++;assert.strictEqual(metrics.length,1);const[{descriptor,timeseries}]=(cov_2kb94silk6().s[169]++,metrics);cov_2kb94silk6().s[170]++;assert.deepStrictEqual(descriptor,{name:METRIC_NAME,description:'',labelKeys:[],unit:'1',type:types_1.MetricDescriptorType.GAUGE_INT64});cov_2kb94silk6().s[171]++;assert.strictEqual(timeseries.length,1);const[{points}]=(cov_2kb94silk6().s[172]++,timeseries);const[point]=(cov_2kb94silk6().s[173]++,points);cov_2kb94silk6().s[174]++;assert.strictEqual(point.value,2);cov_2kb94silk6().s[175]++;assert.deepStrictEqual(point.timestamp,{seconds:mockedTime.seconds,nanos:mockedTime.nanos});});});cov_2kb94silk6().s[176]++;describe('addDerivedDoubleGauge',()=>{cov_2kb94silk6().f[34]++;let registry;const realHrtimeFn=(cov_2kb94silk6().s[177]++,process.hrtime);const realNowFn=(cov_2kb94silk6().s[178]++,Date.now);const mockedTime=(cov_2kb94silk6().s[179]++,{seconds:1450000100,nanos:1e7});cov_2kb94silk6().s[180]++;beforeEach(()=>{cov_2kb94silk6().f[35]++;cov_2kb94silk6().s[181]++;registry=new metric_registry_1.MetricRegistry();// @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message
cov_2kb94silk6().s[182]++;process.hrtime=()=>{cov_2kb94silk6().f[36]++;cov_2kb94silk6().s[183]++;return[100,1e7];};cov_2kb94silk6().s[184]++;Date.now=()=>{cov_2kb94silk6().f[37]++;cov_2kb94silk6().s[185]++;return 1450000000000;};// Force the clock to recalibrate the time offset with the mocked time
cov_2kb94silk6().s[186]++;time_util_1.TEST_ONLY.setHrtimeReference();});cov_2kb94silk6().s[187]++;afterEach(()=>{cov_2kb94silk6().f[38]++;cov_2kb94silk6().s[188]++;process.hrtime=realHrtimeFn;cov_2kb94silk6().s[189]++;Date.now=realNowFn;// Reset the hrtime reference so that it uses a real clock again.
cov_2kb94silk6().s[190]++;time_util_1.TEST_ONLY.resetHrtimeFunctionCache();});cov_2kb94silk6().s[191]++;it('should return a metric',()=>{cov_2kb94silk6().f[39]++;class QueueManager{getValue(){cov_2kb94silk6().f[40]++;cov_2kb94silk6().s[192]++;return 0.7;}}const derivedDoubleGauge=(cov_2kb94silk6().s[193]++,registry.addDerivedDoubleGauge(METRIC_NAME,METRIC_OPTIONS));cov_2kb94silk6().s[194]++;derivedDoubleGauge.createTimeSeries(LABEL_VALUES_200,new QueueManager());const metrics=(cov_2kb94silk6().s[195]++,registry.getMetricProducer().getMetrics());cov_2kb94silk6().s[196]++;assert.strictEqual(metrics.length,1);const[{descriptor,timeseries}]=(cov_2kb94silk6().s[197]++,metrics);cov_2kb94silk6().s[198]++;assert.deepStrictEqual(descriptor,{name:METRIC_NAME,description:METRIC_DESCRIPTION,labelKeys:LABEL_KEYS,unit:UNIT,type:types_1.MetricDescriptorType.GAUGE_DOUBLE});cov_2kb94silk6().s[199]++;assert.strictEqual(timeseries.length,1);const[{points}]=(cov_2kb94silk6().s[200]++,timeseries);const[point]=(cov_2kb94silk6().s[201]++,points);cov_2kb94silk6().s[202]++;assert.strictEqual(point.value,0.7);cov_2kb94silk6().s[203]++;assert.deepStrictEqual(point.timestamp,{seconds:mockedTime.seconds,nanos:mockedTime.nanos});});cov_2kb94silk6().s[204]++;it('should throw an error when the register same metric',()=>{cov_2kb94silk6().f[41]++;cov_2kb94silk6().s[205]++;registry.addDerivedDoubleGauge(METRIC_NAME,METRIC_OPTIONS);cov_2kb94silk6().s[206]++;assert.throws(()=>{cov_2kb94silk6().f[42]++;cov_2kb94silk6().s[207]++;registry.addDerivedDoubleGauge(METRIC_NAME,METRIC_OPTIONS);},/^Error: A metric with the name metric-name has already been registered.$/);});});cov_2kb94silk6().s[208]++;describe('addInt64Cumulative',()=>{cov_2kb94silk6().f[43]++;let registry;const realHrtimeFn=(cov_2kb94silk6().s[209]++,process.hrtime);const realNowFn=(cov_2kb94silk6().s[210]++,Date.now);const mockedTime=(cov_2kb94silk6().s[211]++,{seconds:1450000100,nanos:1e7});cov_2kb94silk6().s[212]++;beforeEach(()=>{cov_2kb94silk6().f[44]++;cov_2kb94silk6().s[213]++;registry=new metric_registry_1.MetricRegistry();// @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message
cov_2kb94silk6().s[214]++;process.hrtime=()=>{cov_2kb94silk6().f[45]++;cov_2kb94silk6().s[215]++;return[100,1e7];};cov_2kb94silk6().s[216]++;Date.now=()=>{cov_2kb94silk6().f[46]++;cov_2kb94silk6().s[217]++;return 1450000000000;};// Force the clock to recalibrate the time offset with the mocked time
cov_2kb94silk6().s[218]++;time_util_1.TEST_ONLY.setHrtimeReference();});cov_2kb94silk6().s[219]++;afterEach(()=>{cov_2kb94silk6().f[47]++;cov_2kb94silk6().s[220]++;process.hrtime=realHrtimeFn;cov_2kb94silk6().s[221]++;Date.now=realNowFn;// Reset the hrtime reference so that it uses a real clock again.
cov_2kb94silk6().s[222]++;time_util_1.TEST_ONLY.resetHrtimeFunctionCache();});cov_2kb94silk6().s[223]++;it('should return a metric',()=>{cov_2kb94silk6().f[48]++;const int64Gauge=(cov_2kb94silk6().s[224]++,registry.addInt64Cumulative(METRIC_NAME,METRIC_OPTIONS));const pointEntry=(cov_2kb94silk6().s[225]++,int64Gauge.getOrCreateTimeSeries(LABEL_VALUES_200));cov_2kb94silk6().s[226]++;pointEntry.inc();const metrics=(cov_2kb94silk6().s[227]++,registry.getMetricProducer().getMetrics());cov_2kb94silk6().s[228]++;assert.strictEqual(metrics.length,1);const[{descriptor,timeseries}]=(cov_2kb94silk6().s[229]++,metrics);cov_2kb94silk6().s[230]++;assert.deepStrictEqual(descriptor,{name:METRIC_NAME,description:METRIC_DESCRIPTION,labelKeys:LABEL_KEYS,unit:UNIT,type:types_1.MetricDescriptorType.CUMULATIVE_INT64});cov_2kb94silk6().s[231]++;assert.strictEqual(timeseries.length,1);const[{points}]=(cov_2kb94silk6().s[232]++,timeseries);const[point]=(cov_2kb94silk6().s[233]++,points);cov_2kb94silk6().s[234]++;assert.strictEqual(point.value,1);cov_2kb94silk6().s[235]++;assert.deepStrictEqual(point.timestamp,{seconds:mockedTime.seconds,nanos:mockedTime.nanos});});cov_2kb94silk6().s[236]++;it('should return a metric without options',()=>{cov_2kb94silk6().f[49]++;const int64Gauge=(cov_2kb94silk6().s[237]++,registry.addInt64Cumulative(METRIC_NAME));const pointEntry=(cov_2kb94silk6().s[238]++,int64Gauge.getDefaultTimeSeries());cov_2kb94silk6().s[239]++;pointEntry.inc(100);const metrics=(cov_2kb94silk6().s[240]++,registry.getMetricProducer().getMetrics());cov_2kb94silk6().s[241]++;assert.strictEqual(metrics.length,1);const[{descriptor,timeseries}]=(cov_2kb94silk6().s[242]++,metrics);cov_2kb94silk6().s[243]++;assert.deepStrictEqual(descriptor,{name:METRIC_NAME,description:'',labelKeys:[],unit:UNIT,type:types_1.MetricDescriptorType.CUMULATIVE_INT64});cov_2kb94silk6().s[244]++;assert.strictEqual(timeseries.length,1);const[{points}]=(cov_2kb94silk6().s[245]++,timeseries);const[point]=(cov_2kb94silk6().s[246]++,points);cov_2kb94silk6().s[247]++;assert.strictEqual(point.value,100);cov_2kb94silk6().s[248]++;assert.deepStrictEqual(point.timestamp,{seconds:mockedTime.seconds,nanos:mockedTime.nanos});});cov_2kb94silk6().s[249]++;it('should throw an error when the duplicate keys in labelKeys and constantLabels',()=>{cov_2kb94silk6().f[50]++;const constantLabels=(cov_2kb94silk6().s[250]++,new Map());cov_2kb94silk6().s[251]++;constantLabels.set({key:'k1'},{value:'v1'});const labelKeys=(cov_2kb94silk6().s[252]++,[{key:'k1',description:'desc'}]);cov_2kb94silk6().s[253]++;assert.throws(()=>{cov_2kb94silk6().f[51]++;cov_2kb94silk6().s[254]++;registry.addInt64Cumulative(METRIC_NAME,{constantLabels,labelKeys});},/^Error: The keys from LabelKeys should not be present in constantLabels or LabelKeys should not contains duplicate keys$/);});});cov_2kb94silk6().s[255]++;describe('addDoubleCumulative',()=>{cov_2kb94silk6().f[52]++;let registry;const realHrtimeFn=(cov_2kb94silk6().s[256]++,process.hrtime);const realNowFn=(cov_2kb94silk6().s[257]++,Date.now);const mockedTime=(cov_2kb94silk6().s[258]++,{seconds:1450000100,nanos:1e7});cov_2kb94silk6().s[259]++;beforeEach(()=>{cov_2kb94silk6().f[53]++;cov_2kb94silk6().s[260]++;registry=new metric_registry_1.MetricRegistry();// @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message
cov_2kb94silk6().s[261]++;process.hrtime=()=>{cov_2kb94silk6().f[54]++;cov_2kb94silk6().s[262]++;return[100,1e7];};cov_2kb94silk6().s[263]++;Date.now=()=>{cov_2kb94silk6().f[55]++;cov_2kb94silk6().s[264]++;return 1450000000000;};// Force the clock to recalibrate the time offset with the mocked time
cov_2kb94silk6().s[265]++;time_util_1.TEST_ONLY.setHrtimeReference();});cov_2kb94silk6().s[266]++;afterEach(()=>{cov_2kb94silk6().f[56]++;cov_2kb94silk6().s[267]++;process.hrtime=realHrtimeFn;cov_2kb94silk6().s[268]++;Date.now=realNowFn;// Reset the hrtime reference so that it uses a real clock again.
cov_2kb94silk6().s[269]++;time_util_1.TEST_ONLY.resetHrtimeFunctionCache();});cov_2kb94silk6().s[270]++;it('should return a metric',()=>{cov_2kb94silk6().f[57]++;const int64Gauge=(cov_2kb94silk6().s[271]++,registry.addDoubleCumulative(METRIC_NAME,METRIC_OPTIONS));const pointEntry=(cov_2kb94silk6().s[272]++,int64Gauge.getOrCreateTimeSeries(LABEL_VALUES_200));cov_2kb94silk6().s[273]++;pointEntry.inc(1.1);const metrics=(cov_2kb94silk6().s[274]++,registry.getMetricProducer().getMetrics());cov_2kb94silk6().s[275]++;assert.strictEqual(metrics.length,1);const[{descriptor,timeseries}]=(cov_2kb94silk6().s[276]++,metrics);cov_2kb94silk6().s[277]++;assert.deepStrictEqual(descriptor,{name:METRIC_NAME,description:METRIC_DESCRIPTION,labelKeys:LABEL_KEYS,unit:UNIT,type:types_1.MetricDescriptorType.CUMULATIVE_DOUBLE});cov_2kb94silk6().s[278]++;assert.strictEqual(timeseries.length,1);const[{points}]=(cov_2kb94silk6().s[279]++,timeseries);const[point]=(cov_2kb94silk6().s[280]++,points);cov_2kb94silk6().s[281]++;assert.strictEqual(point.value,1.1);cov_2kb94silk6().s[282]++;assert.deepStrictEqual(point.timestamp,{seconds:mockedTime.seconds,nanos:mockedTime.nanos});});cov_2kb94silk6().s[283]++;it('should return a metric without options',()=>{cov_2kb94silk6().f[58]++;const int64Gauge=(cov_2kb94silk6().s[284]++,registry.addDoubleCumulative(METRIC_NAME));const pointEntry=(cov_2kb94silk6().s[285]++,int64Gauge.getDefaultTimeSeries());cov_2kb94silk6().s[286]++;pointEntry.inc();cov_2kb94silk6().s[287]++;pointEntry.inc(100.12);const metrics=(cov_2kb94silk6().s[288]++,registry.getMetricProducer().getMetrics());cov_2kb94silk6().s[289]++;assert.strictEqual(metrics.length,1);const[{descriptor,timeseries}]=(cov_2kb94silk6().s[290]++,metrics);cov_2kb94silk6().s[291]++;assert.deepStrictEqual(descriptor,{name:METRIC_NAME,description:'',labelKeys:[],unit:UNIT,type:types_1.MetricDescriptorType.CUMULATIVE_DOUBLE});cov_2kb94silk6().s[292]++;assert.strictEqual(timeseries.length,1);const[{points}]=(cov_2kb94silk6().s[293]++,timeseries);const[point]=(cov_2kb94silk6().s[294]++,points);cov_2kb94silk6().s[295]++;assert.strictEqual(point.value,101.12);cov_2kb94silk6().s[296]++;assert.deepStrictEqual(point.timestamp,{seconds:mockedTime.seconds,nanos:mockedTime.nanos});});cov_2kb94silk6().s[297]++;it('should throw an error when the duplicate keys in labelKeys and constantLabels',()=>{cov_2kb94silk6().f[59]++;const constantLabels=(cov_2kb94silk6().s[298]++,new Map());cov_2kb94silk6().s[299]++;constantLabels.set({key:'k1'},{value:'v1'});const labelKeys=(cov_2kb94silk6().s[300]++,[{key:'k1',description:'desc'}]);cov_2kb94silk6().s[301]++;assert.throws(()=>{cov_2kb94silk6().f[60]++;cov_2kb94silk6().s[302]++;registry.addDoubleCumulative(METRIC_NAME,{constantLabels,labelKeys});},/^Error: The keys from LabelKeys should not be present in constantLabels or LabelKeys should not contains duplicate keys$/);});});cov_2kb94silk6().s[303]++;describe('addDerivedInt64Cumulative',()=>{cov_2kb94silk6().f[61]++;let registry;const realHrtimeFn=(cov_2kb94silk6().s[304]++,process.hrtime);const realNowFn=(cov_2kb94silk6().s[305]++,Date.now);const mockedTime=(cov_2kb94silk6().s[306]++,{seconds:1450000100,nanos:1e7});cov_2kb94silk6().s[307]++;beforeEach(()=>{cov_2kb94silk6().f[62]++;cov_2kb94silk6().s[308]++;registry=new metric_registry_1.MetricRegistry();// @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message
cov_2kb94silk6().s[309]++;process.hrtime=()=>{cov_2kb94silk6().f[63]++;cov_2kb94silk6().s[310]++;return[100,1e7];};cov_2kb94silk6().s[311]++;Date.now=()=>{cov_2kb94silk6().f[64]++;cov_2kb94silk6().s[312]++;return 1450000000000;};// Force the clock to recalibrate the time offset with the mocked time
cov_2kb94silk6().s[313]++;time_util_1.TEST_ONLY.setHrtimeReference();});cov_2kb94silk6().s[314]++;afterEach(()=>{cov_2kb94silk6().f[65]++;cov_2kb94silk6().s[315]++;process.hrtime=realHrtimeFn;cov_2kb94silk6().s[316]++;Date.now=realNowFn;// Reset the hrtime reference so that it uses a real clock again.
cov_2kb94silk6().s[317]++;time_util_1.TEST_ONLY.resetHrtimeFunctionCache();});cov_2kb94silk6().s[318]++;it('should return a metric',()=>{cov_2kb94silk6().f[66]++;const map=(cov_2kb94silk6().s[319]++,new Map());cov_2kb94silk6().s[320]++;map.set('key','value');const derivedInt64Cumulative=(cov_2kb94silk6().s[321]++,registry.addDerivedInt64Cumulative(METRIC_NAME,METRIC_OPTIONS));cov_2kb94silk6().s[322]++;derivedInt64Cumulative.createTimeSeries(LABEL_VALUES_200,map);cov_2kb94silk6().s[323]++;map.set('key1','value1');const metrics=(cov_2kb94silk6().s[324]++,registry.getMetricProducer().getMetrics());cov_2kb94silk6().s[325]++;assert.strictEqual(metrics.length,1);const[{descriptor,timeseries}]=(cov_2kb94silk6().s[326]++,metrics);cov_2kb94silk6().s[327]++;assert.deepStrictEqual(descriptor,{name:METRIC_NAME,description:METRIC_DESCRIPTION,labelKeys:LABEL_KEYS,unit:UNIT,type:types_1.MetricDescriptorType.CUMULATIVE_INT64});cov_2kb94silk6().s[328]++;assert.strictEqual(timeseries.length,1);cov_2kb94silk6().s[329]++;assert.deepStrictEqual(timeseries,[{labelValues:LABEL_VALUES_200,points:[{value:2,timestamp:mockedTime}],startTimestamp:mockedTime}]);});cov_2kb94silk6().s[330]++;it('should throw an error when the register same metric',()=>{cov_2kb94silk6().f[67]++;cov_2kb94silk6().s[331]++;registry.addDerivedInt64Cumulative(METRIC_NAME,METRIC_OPTIONS);cov_2kb94silk6().s[332]++;assert.throws(()=>{cov_2kb94silk6().f[68]++;cov_2kb94silk6().s[333]++;registry.addDerivedInt64Cumulative(METRIC_NAME,METRIC_OPTIONS);},/^Error: A metric with the name metric-name has already been registered.$/);});cov_2kb94silk6().s[334]++;it('should throw an error when the duplicate keys in labelKeys and constantLabels',()=>{cov_2kb94silk6().f[69]++;const constantLabels=(cov_2kb94silk6().s[335]++,new Map());cov_2kb94silk6().s[336]++;constantLabels.set({key:'k1'},{value:'v1'});const labelKeys=(cov_2kb94silk6().s[337]++,[{key:'k1',description:'desc'}]);cov_2kb94silk6().s[338]++;assert.throws(()=>{cov_2kb94silk6().f[70]++;cov_2kb94silk6().s[339]++;registry.addDerivedInt64Cumulative(METRIC_NAME,{constantLabels,labelKeys});},/^Error: The keys from LabelKeys should not be present in constantLabels or LabelKeys should not contains duplicate keys$/);});cov_2kb94silk6().s[340]++;it('should throw an error when the constant labels elements are null',()=>{cov_2kb94silk6().f[71]++;const constantLabels=(cov_2kb94silk6().s[341]++,new Map());cov_2kb94silk6().s[342]++;constantLabels.set({key:'k1'},null);cov_2kb94silk6().s[343]++;assert.throws(()=>{cov_2kb94silk6().f[72]++;cov_2kb94silk6().s[344]++;registry.addDerivedInt64Cumulative(METRIC_NAME,{constantLabels});},/^Error: constantLabels elements should not be a NULL$/);});cov_2kb94silk6().s[345]++;it('should return a metric without options',()=>{cov_2kb94silk6().f[73]++;const map=(cov_2kb94silk6().s[346]++,new Map());cov_2kb94silk6().s[347]++;map.set('key','value');const derivedInt64Cumulative=(cov_2kb94silk6().s[348]++,registry.addDerivedInt64Cumulative(METRIC_NAME));cov_2kb94silk6().s[349]++;derivedInt64Cumulative.createTimeSeries([],map);cov_2kb94silk6().s[350]++;map.set('key1','value1');const metrics=(cov_2kb94silk6().s[351]++,registry.getMetricProducer().getMetrics());cov_2kb94silk6().s[352]++;assert.strictEqual(metrics.length,1);const[{descriptor,timeseries}]=(cov_2kb94silk6().s[353]++,metrics);cov_2kb94silk6().s[354]++;assert.deepStrictEqual(descriptor,{name:METRIC_NAME,description:'',labelKeys:[],unit:'1',type:types_1.MetricDescriptorType.CUMULATIVE_INT64});cov_2kb94silk6().s[355]++;assert.strictEqual(timeseries.length,1);cov_2kb94silk6().s[356]++;assert.deepStrictEqual(timeseries,[{labelValues:[],points:[{value:2,timestamp:mockedTime}],startTimestamp:mockedTime}]);});});cov_2kb94silk6().s[357]++;describe('addDerivedDoubleCumulative',()=>{cov_2kb94silk6().f[74]++;let registry;const realHrtimeFn=(cov_2kb94silk6().s[358]++,process.hrtime);const realNowFn=(cov_2kb94silk6().s[359]++,Date.now);const mockedTime=(cov_2kb94silk6().s[360]++,{seconds:1450000100,nanos:1e7});cov_2kb94silk6().s[361]++;beforeEach(()=>{cov_2kb94silk6().f[75]++;cov_2kb94silk6().s[362]++;registry=new metric_registry_1.MetricRegistry();// @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message
cov_2kb94silk6().s[363]++;process.hrtime=()=>{cov_2kb94silk6().f[76]++;cov_2kb94silk6().s[364]++;return[100,1e7];};cov_2kb94silk6().s[365]++;Date.now=()=>{cov_2kb94silk6().f[77]++;cov_2kb94silk6().s[366]++;return 1450000000000;};// Force the clock to recalibrate the time offset with the mocked time
cov_2kb94silk6().s[367]++;time_util_1.TEST_ONLY.setHrtimeReference();});cov_2kb94silk6().s[368]++;afterEach(()=>{cov_2kb94silk6().f[78]++;cov_2kb94silk6().s[369]++;process.hrtime=realHrtimeFn;cov_2kb94silk6().s[370]++;Date.now=realNowFn;// Reset the hrtime reference so that it uses a real clock again.
cov_2kb94silk6().s[371]++;time_util_1.TEST_ONLY.resetHrtimeFunctionCache();});cov_2kb94silk6().s[372]++;it('should return a metric',()=>{cov_2kb94silk6().f[79]++;class QueueManager{get Value(){cov_2kb94silk6().f[80]++;cov_2kb94silk6().s[373]++;return 45.5;}}const queue=(cov_2kb94silk6().s[374]++,new QueueManager());const derivedDoubleCumulative=(cov_2kb94silk6().s[375]++,registry.addDerivedDoubleCumulative(METRIC_NAME,METRIC_OPTIONS));cov_2kb94silk6().s[376]++;derivedDoubleCumulative.createTimeSeries(LABEL_VALUES_200,()=>{cov_2kb94silk6().f[81]++;cov_2kb94silk6().s[377]++;return queue.Value;});const metrics=(cov_2kb94silk6().s[378]++,registry.getMetricProducer().getMetrics());cov_2kb94silk6().s[379]++;assert.strictEqual(metrics.length,1);const[{descriptor,timeseries}]=(cov_2kb94silk6().s[380]++,metrics);cov_2kb94silk6().s[381]++;assert.deepStrictEqual(descriptor,{name:METRIC_NAME,description:METRIC_DESCRIPTION,labelKeys:LABEL_KEYS,unit:UNIT,type:types_1.MetricDescriptorType.CUMULATIVE_DOUBLE});cov_2kb94silk6().s[382]++;assert.strictEqual(timeseries.length,1);cov_2kb94silk6().s[383]++;assert.deepStrictEqual(timeseries,[{labelValues:LABEL_VALUES_200,points:[{value:45.5,timestamp:mockedTime}],startTimestamp:mockedTime}]);});cov_2kb94silk6().s[384]++;it('should throw an error when the register same metric',()=>{cov_2kb94silk6().f[82]++;cov_2kb94silk6().s[385]++;registry.addDerivedDoubleCumulative(METRIC_NAME,METRIC_OPTIONS);cov_2kb94silk6().s[386]++;assert.throws(()=>{cov_2kb94silk6().f[83]++;cov_2kb94silk6().s[387]++;registry.addDerivedDoubleCumulative(METRIC_NAME,METRIC_OPTIONS);},/^Error: A metric with the name metric-name has already been registered.$/);});cov_2kb94silk6().s[388]++;it('should throw an error when the duplicate keys in labelKeys and constantLabels',()=>{cov_2kb94silk6().f[84]++;const constantLabels=(cov_2kb94silk6().s[389]++,new Map());cov_2kb94silk6().s[390]++;constantLabels.set({key:'k1'},{value:'v1'});const labelKeys=(cov_2kb94silk6().s[391]++,[{key:'k1',description:'desc'}]);cov_2kb94silk6().s[392]++;assert.throws(()=>{cov_2kb94silk6().f[85]++;cov_2kb94silk6().s[393]++;registry.addDerivedDoubleCumulative(METRIC_NAME,{constantLabels,labelKeys});},/^Error: The keys from LabelKeys should not be present in constantLabels or LabelKeys should not contains duplicate keys$/);});cov_2kb94silk6().s[394]++;it('should throw an error when the constant labels elements are null',()=>{cov_2kb94silk6().f[86]++;const constantLabels=(cov_2kb94silk6().s[395]++,new Map());cov_2kb94silk6().s[396]++;constantLabels.set({key:'k1'},null);cov_2kb94silk6().s[397]++;assert.throws(()=>{cov_2kb94silk6().f[87]++;cov_2kb94silk6().s[398]++;registry.addDerivedDoubleCumulative(METRIC_NAME,{constantLabels});},/^Error: constantLabels elements should not be a NULL$/);});cov_2kb94silk6().s[399]++;it('should return a metric without options',()=>{cov_2kb94silk6().f[88]++;class MemoryInfo{constructor(){cov_2kb94silk6().f[89]++;cov_2kb94silk6().s[400]++;this.current=45.5;}get Value(){cov_2kb94silk6().f[90]++;cov_2kb94silk6().s[401]++;return this.current;}inc(){cov_2kb94silk6().f[91]++;cov_2kb94silk6().s[402]++;this.current++;}}const mem=(cov_2kb94silk6().s[403]++,new MemoryInfo());const derivedDoubleCumulative=(cov_2kb94silk6().s[404]++,registry.addDerivedDoubleCumulative(METRIC_NAME));cov_2kb94silk6().s[405]++;derivedDoubleCumulative.createTimeSeries([],()=>{cov_2kb94silk6().f[92]++;cov_2kb94silk6().s[406]++;return mem.Value;});cov_2kb94silk6().s[407]++;mem.inc();const metrics=(cov_2kb94silk6().s[408]++,registry.getMetricProducer().getMetrics());cov_2kb94silk6().s[409]++;assert.strictEqual(metrics.length,1);const[{descriptor,timeseries}]=(cov_2kb94silk6().s[410]++,metrics);cov_2kb94silk6().s[411]++;assert.deepStrictEqual(descriptor,{name:METRIC_NAME,description:'',labelKeys:[],unit:'1',type:types_1.MetricDescriptorType.CUMULATIVE_DOUBLE});cov_2kb94silk6().s[412]++;assert.strictEqual(timeseries.length,1);cov_2kb94silk6().s[413]++;assert.deepStrictEqual(timeseries,[{labelValues:[],points:[{value:46.5,timestamp:mockedTime}],startTimestamp:mockedTime}]);});});cov_2kb94silk6().s[414]++;describe('Add multiple gauges',()=>{cov_2kb94silk6().f[93]++;let registry;const realHrtimeFn=(cov_2kb94silk6().s[415]++,process.hrtime);const realNowFn=(cov_2kb94silk6().s[416]++,Date.now);const mockedTime=(cov_2kb94silk6().s[417]++,{seconds:1450000100,nanos:1e7});cov_2kb94silk6().s[418]++;beforeEach(()=>{cov_2kb94silk6().f[94]++;cov_2kb94silk6().s[419]++;registry=new metric_registry_1.MetricRegistry();// @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message
cov_2kb94silk6().s[420]++;process.hrtime=()=>{cov_2kb94silk6().f[95]++;cov_2kb94silk6().s[421]++;return[100,1e7];};cov_2kb94silk6().s[422]++;Date.now=()=>{cov_2kb94silk6().f[96]++;cov_2kb94silk6().s[423]++;return 1450000000000;};// Force the clock to recalibrate the time offset with the mocked time
cov_2kb94silk6().s[424]++;time_util_1.TEST_ONLY.setHrtimeReference();});cov_2kb94silk6().s[425]++;afterEach(()=>{cov_2kb94silk6().f[97]++;cov_2kb94silk6().s[426]++;process.hrtime=realHrtimeFn;cov_2kb94silk6().s[427]++;Date.now=realNowFn;// Reset the hrtime reference so that it uses a real clock again.
cov_2kb94silk6().s[428]++;time_util_1.TEST_ONLY.resetHrtimeFunctionCache();});cov_2kb94silk6().s[429]++;it('should return metrics',()=>{cov_2kb94silk6().f[98]++;const int64Gauge=(cov_2kb94silk6().s[430]++,registry.addInt64Gauge('metric-name1',METRIC_OPTIONS));cov_2kb94silk6().s[431]++;int64Gauge.getOrCreateTimeSeries(LABEL_VALUES_200).add(100);const doubleGauge=(cov_2kb94silk6().s[432]++,registry.addDoubleGauge('metric-name2',METRIC_OPTIONS));cov_2kb94silk6().s[433]++;doubleGauge.getOrCreateTimeSeries(LABEL_VALUES_200).add(5.5);const arr=(cov_2kb94silk6().s[434]++,new Array(5).fill('test'));const derivedInt64Gauge=(cov_2kb94silk6().s[435]++,registry.addDerivedInt64Gauge('metric-name3',METRIC_OPTIONS));cov_2kb94silk6().s[436]++;derivedInt64Gauge.createTimeSeries(LABEL_VALUES_400,{size:()=>{cov_2kb94silk6().f[99]++;cov_2kb94silk6().s[437]++;return arr.length;}});const int64Cumulative=(cov_2kb94silk6().s[438]++,registry.addInt64Cumulative('metric-name4',METRIC_OPTIONS));cov_2kb94silk6().s[439]++;int64Cumulative.getOrCreateTimeSeries(LABEL_VALUES_200).inc();const metrics=(cov_2kb94silk6().s[440]++,registry.getMetricProducer().getMetrics());cov_2kb94silk6().s[441]++;assert.strictEqual(metrics.length,4);const[{descriptor:descriptor1,timeseries:timeseries1},{descriptor:descriptor2,timeseries:timeseries2},{descriptor:descriptor3,timeseries:timeseries3},{descriptor:descriptor4,timeseries:timeseries4}]=(cov_2kb94silk6().s[442]++,metrics);cov_2kb94silk6().s[443]++;assert.deepStrictEqual(descriptor1,{name:'metric-name1',description:METRIC_DESCRIPTION,labelKeys:LABEL_KEYS,unit:UNIT,type:types_1.MetricDescriptorType.GAUGE_INT64});cov_2kb94silk6().s[444]++;assert.deepStrictEqual(descriptor2,{name:'metric-name2',description:METRIC_DESCRIPTION,labelKeys:LABEL_KEYS,unit:UNIT,type:types_1.MetricDescriptorType.GAUGE_DOUBLE});cov_2kb94silk6().s[445]++;assert.deepStrictEqual(descriptor3,{name:'metric-name3',description:METRIC_DESCRIPTION,labelKeys:LABEL_KEYS,unit:UNIT,type:types_1.MetricDescriptorType.GAUGE_INT64});cov_2kb94silk6().s[446]++;assert.deepStrictEqual(descriptor4,{name:'metric-name4',description:METRIC_DESCRIPTION,labelKeys:LABEL_KEYS,unit:UNIT,type:types_1.MetricDescriptorType.CUMULATIVE_INT64});cov_2kb94silk6().s[447]++;assert.strictEqual(timeseries1.length,1);cov_2kb94silk6().s[448]++;assert.strictEqual(timeseries1[0].points.length,1);cov_2kb94silk6().s[449]++;assert.strictEqual(timeseries1[0].points[0].value,100);cov_2kb94silk6().s[450]++;assert.strictEqual(timeseries1[0].points[0].timestamp.seconds,mockedTime.seconds);cov_2kb94silk6().s[451]++;assert.strictEqual(timeseries1[0].points[0].timestamp.nanos,mockedTime.nanos);cov_2kb94silk6().s[452]++;assert.strictEqual(timeseries2.length,1);cov_2kb94silk6().s[453]++;assert.strictEqual(timeseries2[0].points.length,1);cov_2kb94silk6().s[454]++;assert.strictEqual(timeseries2[0].points[0].value,5.5);cov_2kb94silk6().s[455]++;assert.strictEqual(timeseries3.length,1);cov_2kb94silk6().s[456]++;assert.strictEqual(timeseries3[0].points.length,1);cov_2kb94silk6().s[457]++;assert.strictEqual(timeseries3[0].points[0].value,5);cov_2kb94silk6().s[458]++;assert.deepStrictEqual(timeseries1[0].points[0].timestamp,timeseries2[0].points[0].timestamp);cov_2kb94silk6().s[459]++;assert.deepStrictEqual(timeseries2[0].points[0].timestamp,timeseries3[0].points[0].timestamp);cov_2kb94silk6().s[460]++;assert.strictEqual(timeseries4.length,1);cov_2kb94silk6().s[461]++;assert.strictEqual(timeseries4[0].points.length,1);cov_2kb94silk6().s[462]++;assert.strictEqual(timeseries4[0].points[0].value,1);});});//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,