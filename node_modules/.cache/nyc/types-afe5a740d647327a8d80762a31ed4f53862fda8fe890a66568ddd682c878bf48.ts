"use strict";/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_23sntzmvnb(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/types.ts";var hash="29c525b031488ff88ca73f66eca5c5e353801e38";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/types.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:0},end:{line:18,column:77}},"2":{start:{line:24,column:0},end:{line:31,column:68}},"3":{start:{line:25,column:4},end:{line:25,column:30}},"4":{start:{line:26,column:4},end:{line:26,column:31}},"5":{start:{line:27,column:4},end:{line:27,column:32}},"6":{start:{line:28,column:4},end:{line:28,column:29}},"7":{start:{line:29,column:4},end:{line:29,column:29}},"8":{start:{line:30,column:4},end:{line:30,column:29}},"9":{start:{line:34,column:0},end:{line:37,column:68}},"10":{start:{line:35,column:4},end:{line:35,column:35}},"11":{start:{line:36,column:4},end:{line:36,column:37}},"12":{start:{line:43,column:0},end:{line:48,column:80}},"13":{start:{line:44,column:4},end:{line:44,column:60}},"14":{start:{line:45,column:4},end:{line:45,column:56}},"15":{start:{line:46,column:4},end:{line:46,column:70}},"16":{start:{line:47,column:4},end:{line:47,column:74}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:24,column:1},end:{line:24,column:2}},loc:{start:{line:24,column:24},end:{line:31,column:1}},line:24},"1":{name:"(anonymous_1)",decl:{start:{line:34,column:1},end:{line:34,column:2}},loc:{start:{line:34,column:24},end:{line:37,column:1}},line:34},"2":{name:"(anonymous_2)",decl:{start:{line:43,column:1},end:{line:43,column:2}},loc:{start:{line:43,column:28},end:{line:48,column:1}},line:43}},branchMap:{"0":{loc:{start:{line:31,column:17},end:{line:31,column:66}},type:"binary-expr",locations:[{start:{line:31,column:17},end:{line:31,column:36}},{start:{line:31,column:41},end:{line:31,column:65}}],line:31},"1":{loc:{start:{line:37,column:17},end:{line:37,column:66}},type:"binary-expr",locations:[{start:{line:37,column:17},end:{line:37,column:36}},{start:{line:37,column:41},end:{line:37,column:65}}],line:37},"2":{loc:{start:{line:48,column:21},end:{line:48,column:78}},type:"binary-expr",locations:[{start:{line:48,column:21},end:{line:48,column:44}},{start:{line:48,column:49},end:{line:48,column:77}}],line:48}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},f:{"0":0,"1":0,"2":0},b:{"0":[0,0],"1":[0,0],"2":[0,0]},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/types.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/types.ts"],names:[],mappings:";AAAA;;;;;;;;;;;;;;GAcG;;;AA2IH;;;GAGG;AACH,IAAY,WAOX;AAPD,WAAY,WAAW;IACrB,yBAAU,CAAA;IACV,0BAAW,CAAA;IACX,2BAAY,CAAA;IACZ,wBAAS,CAAA;IACT,wBAAS,CAAA;IACT,wBAAS,CAAA;AACX,CAAC,EAPW,WAAW,GAAX,mBAAW,KAAX,mBAAW,QAOtB;AAED,0EAA0E;AAC1E,IAAY,WAGX;AAHD,WAAY,WAAW;IACrB,8BAAe,CAAA;IACf,gCAAiB,CAAA;AACnB,CAAC,EAHW,WAAW,GAAX,mBAAW,KAAX,mBAAW,QAGtB;AAkED;;;GAGG;AACH,IAAY,eAKX;AALD,WAAY,eAAe;IACzB,uDAAS,CAAA;IACT,mDAAO,CAAA;IACP,iEAAc,CAAA;IACd,qEAAgB,CAAA;AAClB,CAAC,EALW,eAAe,GAAf,uBAAe,KAAf,uBAAe,QAK1B",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StatsEventListener } from '../exporters/types';\nimport { Metric } from '../metrics/export/types';\nimport { TagMap } from '../tags/tag-map';\nimport { TagKey, TagValue } from '../tags/types';\n\n/** Default type for functions */\n// tslint:disable:no-any\ntype Func<T> = (...args: any[]) => T;\n\n/** Main interface for stats. */\nexport interface Stats {\n  /**\n   * Creates a view.\n   * @param name The view name\n   * @param measure The view measure\n   * @param aggregation The view aggregation type\n   * @param tagKeys The view columns (tag keys)\n   * @param description The view description\n   * @param bucketBoundaries The view bucket boundaries for a distribution\n   *     aggregation type\n   */\n  createView(\n    name: string,\n    measure: Measure,\n    aggregation: AggregationType,\n    tagKeys: TagKey[],\n    description: string,\n    bucketBoundaries?: number[]\n  ): View;\n\n  /**\n   * Registers a view to listen to new measurements in its measure.\n   * @param view The view to be registered\n   */\n  registerView(view: View): void;\n\n  /**\n   * Creates a measure of type Double.\n   * @param name The measure name\n   * @param unit The measure unit\n   * @param description The measure description\n   */\n  createMeasureDouble(\n    name: string,\n    unit: MeasureUnit,\n    description?: string\n  ): Measure;\n\n  /**\n   * Creates a measure of type Int64. Values must be integers up to\n   * Number.MAX_SAFE_INTERGER.\n   * @param name The measure name\n   * @param unit The measure unit\n   * @param description The measure description\n   */\n  createMeasureInt64(\n    name: string,\n    unit: MeasureUnit,\n    description?: string\n  ): Measure;\n\n  /**\n   * Updates all views with the new measurements.\n   * @param measurements A list of measurements to record\n   * @param tags optional The tags to which the value is applied.\n   *     tags could either be explicitly passed to the method, or implicitly\n   *     read from current execution context.\n   * @param attachments optional The contextual information associated with an\n   *     example value. The contextual information is represented as key - value\n   *     string pairs.\n   */\n  record(\n    measurements: Measurement[],\n    tags?: TagMap,\n    attachments?: { [key: string]: string }\n  ): void;\n\n  /**\n   * Remove all registered Views and exporters from the stats.\n   */\n  clear(): void;\n\n  /**\n   * Gets a collection of produced Metric`s to be exported.\n   * @returns The List of metrics.\n   */\n  getMetrics(): Metric[];\n\n  /**\n   * Registers an exporter to send stats data to a service.\n   * @param exporter An stats exporter\n   */\n  registerExporter(exporter: StatsEventListener): void;\n\n  /**\n   * Unregisters an exporter. It should be called whenever the exporter is not\n   * needed anymore.\n   * @param exporter An stats exporter\n   */\n  unregisterExporter(exporter: StatsEventListener): void;\n\n  /**\n   * Enters the scope of code where the given `TagMap` is in the current context\n   * (replacing the previous `TagMap`).\n   * @param tags The TagMap to be set to the current context.\n   * @param fn Callback function.\n   * @returns The callback return.\n   */\n  withTagContext<T>(tags: TagMap, fn: Func<T>): T;\n\n  /** Gets the current tag context. */\n  getCurrentTagContext(): TagMap;\n}\n\n/**\n * Describes the type of the individual values/measurements recorded by an\n * application. It includes information such as the type of measurement, the\n * units of measurement and descriptive names for the data. This provides the\n * fundamental type used for recording data.\n */\nexport interface Measure {\n  /**\n   * A string by which the measure will be referred to, e.g.\n   * \"rpc_server_latency\". Names MUST be unique within the library.\n   */\n  readonly name: string;\n  /** Describes the measure, e.g. \"RPC latency in seconds\". */\n  readonly description?: string;\n  /**\n   * Describes the unit used for the Measure. Follows the format described by\n   * http://unitsofmeasure.org/ucum.html.\n   */\n  readonly unit: MeasureUnit;\n  /** The type used for this Measure. */\n  readonly type: MeasureType;\n}\n\n/**\n * Describes the unit used for the Measure. Should follows the format described\n * by http://unitsofmeasure.org/ucum.html.\n */\nexport enum MeasureUnit {\n  UNIT = '1', // for general counts\n  BYTE = 'by', // bytes\n  KBYTE = 'kb', // Kbytes\n  SEC = 's', // seconds\n  MS = 'ms', // millisecond\n  NS = 'ns', // nanosecond\n}\n\n/** Describes the types of a Measure. It can be Int64 or a Double type. */\nexport enum MeasureType {\n  INT64 = 'INT64',\n  DOUBLE = 'DOUBLE',\n}\n\n/** Describes a data point to be collected for a Measure. */\nexport interface Measurement {\n  /** The measure to which the value is applied */\n  readonly measure: Measure;\n  /**\n   * The recorded value. If the measure has type INT64, value must be an integer\n   * up to Number.MAX_SAFE_INTERGER.\n   */\n  readonly value: number;\n}\n\n/**\n * Defines how individual measurements are broken down by tags and aggregated.\n */\nexport interface View {\n  /**\n   * A string by which the View will be referred to, e.g. \"rpc_latency\". Names\n   * MUST be unique within the library.\n   */\n  readonly name: string;\n  /** Describes the view, e.g. \"RPC latency distribution\" */\n  readonly description: string;\n  /** The Measure to which this view is applied. */\n  readonly measure: Measure;\n  /**\n   * An Aggregation describes how data collected is aggregated.\n   * There are four aggregation types: count, sum, lastValue and distirbution.\n   */\n  readonly aggregation: AggregationType;\n  /** The start time for this view */\n  readonly startTime: number;\n  /**\n   * The end time for this view - represents the last time a value was recorded\n   */\n  endTime?: number;\n  /** true if the view was registered */\n  registered: boolean;\n  /**\n   * Records a measurement in the proper view's row. This method is used by\n   * Stats. User should prefer using Stats.record() instead.\n   *\n   * Measurements with measurement type INT64 will have its value truncated.\n   * @param measurement The measurement to record\n   * @param tags The tags to which the value is applied\n   * @param attachments optional The contextual information associated with an\n   *     example value. THe contextual information is represented as key - value\n   *     string pairs.\n   */\n  recordMeasurement(\n    measurement: Measurement,\n    tags: TagMap,\n    attachments?: { [key: string]: string }\n  ): void;\n  /**\n   * Returns a snapshot of an AggregationData for that tags/labels values.\n   * @param tagValues The desired data's tag values.\n   */\n  getSnapshot(tagValues: Array<TagValue | null>): AggregationData;\n  /** Gets the view's tag keys */\n  getColumns(): TagKey[];\n  /** Gets view`s metric */\n  getMetric(start: number): Metric;\n}\n\n/**\n * Informs the type of the aggregation. It can be: count, sum, lastValue or\n * distribution.\n */\nexport enum AggregationType {\n  COUNT = 0,\n  SUM = 1,\n  LAST_VALUE = 2,\n  DISTRIBUTION = 3,\n}\n\n/** Defines how data is collected and aggregated */\nexport interface AggregationMetadata {\n  /** The aggregation type of the aggregation data */\n  readonly type: AggregationType;\n  /** The tagValues that this AggregationData collects and aggregates */\n  readonly tagValues: Array<TagValue | null>;\n  /** The latest timestamp a new data point was recorded */\n  timestamp: number;\n}\n\n/**\n * Data collected and aggregated with this AggregationData will be summed\n * up.\n */\nexport interface SumData extends AggregationMetadata {\n  type: AggregationType.SUM;\n  /** The current accumulated value */\n  value: number;\n}\n\n/**\n * This AggregationData counts the number of measurements recorded.\n */\nexport interface CountData extends AggregationMetadata {\n  type: AggregationType.COUNT;\n  /** The current counted value */\n  value: number;\n}\n\n/**\n * This AggregationData represents the last recorded value. This is useful\n * when giving support to Gauges.\n */\nexport interface LastValueData extends AggregationMetadata {\n  type: AggregationType.LAST_VALUE;\n  /** The last recorded value */\n  value: number;\n}\n\n/** This AggregationData contains a histogram of the collected values. */\nexport interface DistributionData extends AggregationMetadata {\n  type: AggregationType.DISTRIBUTION;\n  /** The first timestamp a datapoint was added */\n  readonly startTime: number;\n  /** Get the total count of all recorded values in the histogram */\n  count: number;\n  /** Sum of all recorded values in the histogram */\n  sum: number;\n  /** Get the computed mean value of all recorded values in the histogram */\n  mean: number;\n  /**\n   * Get the computed standard deviation of all recorded values in the\n   * histogram\n   */\n  stdDeviation: number;\n  /**\n   * Get the computed sum of squared deviations of all recorded values in the\n   * histogram.\n   */\n  sumOfSquaredDeviation: number;\n  /** Bucket distribution of the histogram */\n  buckets: Bucket[];\n  /** Buckets count */\n  bucketCounts?: number[];\n  /** If the distribution does not have a histogram, then omit this field. */\n  exemplars?: StatsExemplar[];\n}\n\n/**\n * Exemplars are example points that may be used to annotate aggregated\n * Distribution values. They are metadata that gives information about a\n * particular value added to a Distribution bucket.\n */\nexport interface StatsExemplar {\n  /**\n   * Value of the exemplar point. It determines which bucket the exemplar\n   * belongs to.\n   */\n  readonly value: number;\n  /** The observation (sampling) time of the above value. */\n  readonly timestamp: number;\n  /** Contextual information about the example value. */\n  readonly attachments: { [key: string]: string };\n}\n\nexport type Bucket = number;\nexport type AggregationData =\n  | SumData\n  | CountData\n  | LastValueData\n  | DistributionData;\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"29c525b031488ff88ca73f66eca5c5e353801e38"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_23sntzmvnb=function(){return actualCoverage;};}return actualCoverage;}cov_23sntzmvnb();cov_23sntzmvnb().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_23sntzmvnb().s[1]++;exports.AggregationType=exports.MeasureType=exports.MeasureUnit=void 0;/**
 * Describes the unit used for the Measure. Should follows the format described
 * by http://unitsofmeasure.org/ucum.html.
 */var MeasureUnit;cov_23sntzmvnb().s[2]++;(function(MeasureUnit){cov_23sntzmvnb().f[0]++;cov_23sntzmvnb().s[3]++;MeasureUnit["UNIT"]="1";cov_23sntzmvnb().s[4]++;MeasureUnit["BYTE"]="by";cov_23sntzmvnb().s[5]++;MeasureUnit["KBYTE"]="kb";cov_23sntzmvnb().s[6]++;MeasureUnit["SEC"]="s";cov_23sntzmvnb().s[7]++;MeasureUnit["MS"]="ms";cov_23sntzmvnb().s[8]++;MeasureUnit["NS"]="ns";})(MeasureUnit=(cov_23sntzmvnb().b[0][0]++,exports.MeasureUnit)||(cov_23sntzmvnb().b[0][1]++,exports.MeasureUnit={}));/** Describes the types of a Measure. It can be Int64 or a Double type. */var MeasureType;cov_23sntzmvnb().s[9]++;(function(MeasureType){cov_23sntzmvnb().f[1]++;cov_23sntzmvnb().s[10]++;MeasureType["INT64"]="INT64";cov_23sntzmvnb().s[11]++;MeasureType["DOUBLE"]="DOUBLE";})(MeasureType=(cov_23sntzmvnb().b[1][0]++,exports.MeasureType)||(cov_23sntzmvnb().b[1][1]++,exports.MeasureType={}));/**
 * Informs the type of the aggregation. It can be: count, sum, lastValue or
 * distribution.
 */var AggregationType;cov_23sntzmvnb().s[12]++;(function(AggregationType){cov_23sntzmvnb().f[2]++;cov_23sntzmvnb().s[13]++;AggregationType[AggregationType["COUNT"]=0]="COUNT";cov_23sntzmvnb().s[14]++;AggregationType[AggregationType["SUM"]=1]="SUM";cov_23sntzmvnb().s[15]++;AggregationType[AggregationType["LAST_VALUE"]=2]="LAST_VALUE";cov_23sntzmvnb().s[16]++;AggregationType[AggregationType["DISTRIBUTION"]=3]="DISTRIBUTION";})(AggregationType=(cov_23sntzmvnb().b[2][0]++,exports.AggregationType)||(cov_23sntzmvnb().b[2][1]++,exports.AggregationType={}));//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMjNzbnR6bXZuYiIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJlbmQiLCJmbk1hcCIsIm5hbWUiLCJkZWNsIiwibG9jIiwiYnJhbmNoTWFwIiwidHlwZSIsImxvY2F0aW9ucyIsInMiLCJmIiwiYiIsImlucHV0U291cmNlTWFwIiwidmVyc2lvbiIsImZpbGUiLCJzb3VyY2VzIiwibmFtZXMiLCJtYXBwaW5ncyIsInNvdXJjZXNDb250ZW50IiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSIsIk1lYXN1cmVVbml0IiwiZXhwb3J0cyIsIk1lYXN1cmVUeXBlIiwiQWdncmVnYXRpb25UeXBlIl0sInNvdXJjZXMiOlsiL1VzZXJzL3VzZXJtYWl0aGEvdHJhZGVtYXN0ZXIvbGlicy9saWItZXh0ZXJuYWwtb3BlbmNlbnN1cy1ub2RlL3NyYy9zdGF0cy90eXBlcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDE4LCBPcGVuQ2Vuc3VzIEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFN0YXRzRXZlbnRMaXN0ZW5lciB9IGZyb20gJy4uL2V4cG9ydGVycy90eXBlcyc7XG5pbXBvcnQgeyBNZXRyaWMgfSBmcm9tICcuLi9tZXRyaWNzL2V4cG9ydC90eXBlcyc7XG5pbXBvcnQgeyBUYWdNYXAgfSBmcm9tICcuLi90YWdzL3RhZy1tYXAnO1xuaW1wb3J0IHsgVGFnS2V5LCBUYWdWYWx1ZSB9IGZyb20gJy4uL3RhZ3MvdHlwZXMnO1xuXG4vKiogRGVmYXVsdCB0eXBlIGZvciBmdW5jdGlvbnMgKi9cbi8vIHRzbGludDpkaXNhYmxlOm5vLWFueVxudHlwZSBGdW5jPFQ+ID0gKC4uLmFyZ3M6IGFueVtdKSA9PiBUO1xuXG4vKiogTWFpbiBpbnRlcmZhY2UgZm9yIHN0YXRzLiAqL1xuZXhwb3J0IGludGVyZmFjZSBTdGF0cyB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgdmlldy5cbiAgICogQHBhcmFtIG5hbWUgVGhlIHZpZXcgbmFtZVxuICAgKiBAcGFyYW0gbWVhc3VyZSBUaGUgdmlldyBtZWFzdXJlXG4gICAqIEBwYXJhbSBhZ2dyZWdhdGlvbiBUaGUgdmlldyBhZ2dyZWdhdGlvbiB0eXBlXG4gICAqIEBwYXJhbSB0YWdLZXlzIFRoZSB2aWV3IGNvbHVtbnMgKHRhZyBrZXlzKVxuICAgKiBAcGFyYW0gZGVzY3JpcHRpb24gVGhlIHZpZXcgZGVzY3JpcHRpb25cbiAgICogQHBhcmFtIGJ1Y2tldEJvdW5kYXJpZXMgVGhlIHZpZXcgYnVja2V0IGJvdW5kYXJpZXMgZm9yIGEgZGlzdHJpYnV0aW9uXG4gICAqICAgICBhZ2dyZWdhdGlvbiB0eXBlXG4gICAqL1xuICBjcmVhdGVWaWV3KFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBtZWFzdXJlOiBNZWFzdXJlLFxuICAgIGFnZ3JlZ2F0aW9uOiBBZ2dyZWdhdGlvblR5cGUsXG4gICAgdGFnS2V5czogVGFnS2V5W10sXG4gICAgZGVzY3JpcHRpb246IHN0cmluZyxcbiAgICBidWNrZXRCb3VuZGFyaWVzPzogbnVtYmVyW11cbiAgKTogVmlldztcblxuICAvKipcbiAgICogUmVnaXN0ZXJzIGEgdmlldyB0byBsaXN0ZW4gdG8gbmV3IG1lYXN1cmVtZW50cyBpbiBpdHMgbWVhc3VyZS5cbiAgICogQHBhcmFtIHZpZXcgVGhlIHZpZXcgdG8gYmUgcmVnaXN0ZXJlZFxuICAgKi9cbiAgcmVnaXN0ZXJWaWV3KHZpZXc6IFZpZXcpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbWVhc3VyZSBvZiB0eXBlIERvdWJsZS5cbiAgICogQHBhcmFtIG5hbWUgVGhlIG1lYXN1cmUgbmFtZVxuICAgKiBAcGFyYW0gdW5pdCBUaGUgbWVhc3VyZSB1bml0XG4gICAqIEBwYXJhbSBkZXNjcmlwdGlvbiBUaGUgbWVhc3VyZSBkZXNjcmlwdGlvblxuICAgKi9cbiAgY3JlYXRlTWVhc3VyZURvdWJsZShcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgdW5pdDogTWVhc3VyZVVuaXQsXG4gICAgZGVzY3JpcHRpb24/OiBzdHJpbmdcbiAgKTogTWVhc3VyZTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG1lYXN1cmUgb2YgdHlwZSBJbnQ2NC4gVmFsdWVzIG11c3QgYmUgaW50ZWdlcnMgdXAgdG9cbiAgICogTnVtYmVyLk1BWF9TQUZFX0lOVEVSR0VSLlxuICAgKiBAcGFyYW0gbmFtZSBUaGUgbWVhc3VyZSBuYW1lXG4gICAqIEBwYXJhbSB1bml0IFRoZSBtZWFzdXJlIHVuaXRcbiAgICogQHBhcmFtIGRlc2NyaXB0aW9uIFRoZSBtZWFzdXJlIGRlc2NyaXB0aW9uXG4gICAqL1xuICBjcmVhdGVNZWFzdXJlSW50NjQoXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIHVuaXQ6IE1lYXN1cmVVbml0LFxuICAgIGRlc2NyaXB0aW9uPzogc3RyaW5nXG4gICk6IE1lYXN1cmU7XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgYWxsIHZpZXdzIHdpdGggdGhlIG5ldyBtZWFzdXJlbWVudHMuXG4gICAqIEBwYXJhbSBtZWFzdXJlbWVudHMgQSBsaXN0IG9mIG1lYXN1cmVtZW50cyB0byByZWNvcmRcbiAgICogQHBhcmFtIHRhZ3Mgb3B0aW9uYWwgVGhlIHRhZ3MgdG8gd2hpY2ggdGhlIHZhbHVlIGlzIGFwcGxpZWQuXG4gICAqICAgICB0YWdzIGNvdWxkIGVpdGhlciBiZSBleHBsaWNpdGx5IHBhc3NlZCB0byB0aGUgbWV0aG9kLCBvciBpbXBsaWNpdGx5XG4gICAqICAgICByZWFkIGZyb20gY3VycmVudCBleGVjdXRpb24gY29udGV4dC5cbiAgICogQHBhcmFtIGF0dGFjaG1lbnRzIG9wdGlvbmFsIFRoZSBjb250ZXh0dWFsIGluZm9ybWF0aW9uIGFzc29jaWF0ZWQgd2l0aCBhblxuICAgKiAgICAgZXhhbXBsZSB2YWx1ZS4gVGhlIGNvbnRleHR1YWwgaW5mb3JtYXRpb24gaXMgcmVwcmVzZW50ZWQgYXMga2V5IC0gdmFsdWVcbiAgICogICAgIHN0cmluZyBwYWlycy5cbiAgICovXG4gIHJlY29yZChcbiAgICBtZWFzdXJlbWVudHM6IE1lYXN1cmVtZW50W10sXG4gICAgdGFncz86IFRhZ01hcCxcbiAgICBhdHRhY2htZW50cz86IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH1cbiAgKTogdm9pZDtcblxuICAvKipcbiAgICogUmVtb3ZlIGFsbCByZWdpc3RlcmVkIFZpZXdzIGFuZCBleHBvcnRlcnMgZnJvbSB0aGUgc3RhdHMuXG4gICAqL1xuICBjbGVhcigpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBHZXRzIGEgY29sbGVjdGlvbiBvZiBwcm9kdWNlZCBNZXRyaWNgcyB0byBiZSBleHBvcnRlZC5cbiAgICogQHJldHVybnMgVGhlIExpc3Qgb2YgbWV0cmljcy5cbiAgICovXG4gIGdldE1ldHJpY3MoKTogTWV0cmljW107XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBhbiBleHBvcnRlciB0byBzZW5kIHN0YXRzIGRhdGEgdG8gYSBzZXJ2aWNlLlxuICAgKiBAcGFyYW0gZXhwb3J0ZXIgQW4gc3RhdHMgZXhwb3J0ZXJcbiAgICovXG4gIHJlZ2lzdGVyRXhwb3J0ZXIoZXhwb3J0ZXI6IFN0YXRzRXZlbnRMaXN0ZW5lcik6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFVucmVnaXN0ZXJzIGFuIGV4cG9ydGVyLiBJdCBzaG91bGQgYmUgY2FsbGVkIHdoZW5ldmVyIHRoZSBleHBvcnRlciBpcyBub3RcbiAgICogbmVlZGVkIGFueW1vcmUuXG4gICAqIEBwYXJhbSBleHBvcnRlciBBbiBzdGF0cyBleHBvcnRlclxuICAgKi9cbiAgdW5yZWdpc3RlckV4cG9ydGVyKGV4cG9ydGVyOiBTdGF0c0V2ZW50TGlzdGVuZXIpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBFbnRlcnMgdGhlIHNjb3BlIG9mIGNvZGUgd2hlcmUgdGhlIGdpdmVuIGBUYWdNYXBgIGlzIGluIHRoZSBjdXJyZW50IGNvbnRleHRcbiAgICogKHJlcGxhY2luZyB0aGUgcHJldmlvdXMgYFRhZ01hcGApLlxuICAgKiBAcGFyYW0gdGFncyBUaGUgVGFnTWFwIHRvIGJlIHNldCB0byB0aGUgY3VycmVudCBjb250ZXh0LlxuICAgKiBAcGFyYW0gZm4gQ2FsbGJhY2sgZnVuY3Rpb24uXG4gICAqIEByZXR1cm5zIFRoZSBjYWxsYmFjayByZXR1cm4uXG4gICAqL1xuICB3aXRoVGFnQ29udGV4dDxUPih0YWdzOiBUYWdNYXAsIGZuOiBGdW5jPFQ+KTogVDtcblxuICAvKiogR2V0cyB0aGUgY3VycmVudCB0YWcgY29udGV4dC4gKi9cbiAgZ2V0Q3VycmVudFRhZ0NvbnRleHQoKTogVGFnTWFwO1xufVxuXG4vKipcbiAqIERlc2NyaWJlcyB0aGUgdHlwZSBvZiB0aGUgaW5kaXZpZHVhbCB2YWx1ZXMvbWVhc3VyZW1lbnRzIHJlY29yZGVkIGJ5IGFuXG4gKiBhcHBsaWNhdGlvbi4gSXQgaW5jbHVkZXMgaW5mb3JtYXRpb24gc3VjaCBhcyB0aGUgdHlwZSBvZiBtZWFzdXJlbWVudCwgdGhlXG4gKiB1bml0cyBvZiBtZWFzdXJlbWVudCBhbmQgZGVzY3JpcHRpdmUgbmFtZXMgZm9yIHRoZSBkYXRhLiBUaGlzIHByb3ZpZGVzIHRoZVxuICogZnVuZGFtZW50YWwgdHlwZSB1c2VkIGZvciByZWNvcmRpbmcgZGF0YS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBNZWFzdXJlIHtcbiAgLyoqXG4gICAqIEEgc3RyaW5nIGJ5IHdoaWNoIHRoZSBtZWFzdXJlIHdpbGwgYmUgcmVmZXJyZWQgdG8sIGUuZy5cbiAgICogXCJycGNfc2VydmVyX2xhdGVuY3lcIi4gTmFtZXMgTVVTVCBiZSB1bmlxdWUgd2l0aGluIHRoZSBsaWJyYXJ5LlxuICAgKi9cbiAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuICAvKiogRGVzY3JpYmVzIHRoZSBtZWFzdXJlLCBlLmcuIFwiUlBDIGxhdGVuY3kgaW4gc2Vjb25kc1wiLiAqL1xuICByZWFkb25seSBkZXNjcmlwdGlvbj86IHN0cmluZztcbiAgLyoqXG4gICAqIERlc2NyaWJlcyB0aGUgdW5pdCB1c2VkIGZvciB0aGUgTWVhc3VyZS4gRm9sbG93cyB0aGUgZm9ybWF0IGRlc2NyaWJlZCBieVxuICAgKiBodHRwOi8vdW5pdHNvZm1lYXN1cmUub3JnL3VjdW0uaHRtbC5cbiAgICovXG4gIHJlYWRvbmx5IHVuaXQ6IE1lYXN1cmVVbml0O1xuICAvKiogVGhlIHR5cGUgdXNlZCBmb3IgdGhpcyBNZWFzdXJlLiAqL1xuICByZWFkb25seSB0eXBlOiBNZWFzdXJlVHlwZTtcbn1cblxuLyoqXG4gKiBEZXNjcmliZXMgdGhlIHVuaXQgdXNlZCBmb3IgdGhlIE1lYXN1cmUuIFNob3VsZCBmb2xsb3dzIHRoZSBmb3JtYXQgZGVzY3JpYmVkXG4gKiBieSBodHRwOi8vdW5pdHNvZm1lYXN1cmUub3JnL3VjdW0uaHRtbC5cbiAqL1xuZXhwb3J0IGVudW0gTWVhc3VyZVVuaXQge1xuICBVTklUID0gJzEnLCAvLyBmb3IgZ2VuZXJhbCBjb3VudHNcbiAgQllURSA9ICdieScsIC8vIGJ5dGVzXG4gIEtCWVRFID0gJ2tiJywgLy8gS2J5dGVzXG4gIFNFQyA9ICdzJywgLy8gc2Vjb25kc1xuICBNUyA9ICdtcycsIC8vIG1pbGxpc2Vjb25kXG4gIE5TID0gJ25zJywgLy8gbmFub3NlY29uZFxufVxuXG4vKiogRGVzY3JpYmVzIHRoZSB0eXBlcyBvZiBhIE1lYXN1cmUuIEl0IGNhbiBiZSBJbnQ2NCBvciBhIERvdWJsZSB0eXBlLiAqL1xuZXhwb3J0IGVudW0gTWVhc3VyZVR5cGUge1xuICBJTlQ2NCA9ICdJTlQ2NCcsXG4gIERPVUJMRSA9ICdET1VCTEUnLFxufVxuXG4vKiogRGVzY3JpYmVzIGEgZGF0YSBwb2ludCB0byBiZSBjb2xsZWN0ZWQgZm9yIGEgTWVhc3VyZS4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTWVhc3VyZW1lbnQge1xuICAvKiogVGhlIG1lYXN1cmUgdG8gd2hpY2ggdGhlIHZhbHVlIGlzIGFwcGxpZWQgKi9cbiAgcmVhZG9ubHkgbWVhc3VyZTogTWVhc3VyZTtcbiAgLyoqXG4gICAqIFRoZSByZWNvcmRlZCB2YWx1ZS4gSWYgdGhlIG1lYXN1cmUgaGFzIHR5cGUgSU5UNjQsIHZhbHVlIG11c3QgYmUgYW4gaW50ZWdlclxuICAgKiB1cCB0byBOdW1iZXIuTUFYX1NBRkVfSU5URVJHRVIuXG4gICAqL1xuICByZWFkb25seSB2YWx1ZTogbnVtYmVyO1xufVxuXG4vKipcbiAqIERlZmluZXMgaG93IGluZGl2aWR1YWwgbWVhc3VyZW1lbnRzIGFyZSBicm9rZW4gZG93biBieSB0YWdzIGFuZCBhZ2dyZWdhdGVkLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFZpZXcge1xuICAvKipcbiAgICogQSBzdHJpbmcgYnkgd2hpY2ggdGhlIFZpZXcgd2lsbCBiZSByZWZlcnJlZCB0bywgZS5nLiBcInJwY19sYXRlbmN5XCIuIE5hbWVzXG4gICAqIE1VU1QgYmUgdW5pcXVlIHdpdGhpbiB0aGUgbGlicmFyeS5cbiAgICovXG4gIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcbiAgLyoqIERlc2NyaWJlcyB0aGUgdmlldywgZS5nLiBcIlJQQyBsYXRlbmN5IGRpc3RyaWJ1dGlvblwiICovXG4gIHJlYWRvbmx5IGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIC8qKiBUaGUgTWVhc3VyZSB0byB3aGljaCB0aGlzIHZpZXcgaXMgYXBwbGllZC4gKi9cbiAgcmVhZG9ubHkgbWVhc3VyZTogTWVhc3VyZTtcbiAgLyoqXG4gICAqIEFuIEFnZ3JlZ2F0aW9uIGRlc2NyaWJlcyBob3cgZGF0YSBjb2xsZWN0ZWQgaXMgYWdncmVnYXRlZC5cbiAgICogVGhlcmUgYXJlIGZvdXIgYWdncmVnYXRpb24gdHlwZXM6IGNvdW50LCBzdW0sIGxhc3RWYWx1ZSBhbmQgZGlzdGlyYnV0aW9uLlxuICAgKi9cbiAgcmVhZG9ubHkgYWdncmVnYXRpb246IEFnZ3JlZ2F0aW9uVHlwZTtcbiAgLyoqIFRoZSBzdGFydCB0aW1lIGZvciB0aGlzIHZpZXcgKi9cbiAgcmVhZG9ubHkgc3RhcnRUaW1lOiBudW1iZXI7XG4gIC8qKlxuICAgKiBUaGUgZW5kIHRpbWUgZm9yIHRoaXMgdmlldyAtIHJlcHJlc2VudHMgdGhlIGxhc3QgdGltZSBhIHZhbHVlIHdhcyByZWNvcmRlZFxuICAgKi9cbiAgZW5kVGltZT86IG51bWJlcjtcbiAgLyoqIHRydWUgaWYgdGhlIHZpZXcgd2FzIHJlZ2lzdGVyZWQgKi9cbiAgcmVnaXN0ZXJlZDogYm9vbGVhbjtcbiAgLyoqXG4gICAqIFJlY29yZHMgYSBtZWFzdXJlbWVudCBpbiB0aGUgcHJvcGVyIHZpZXcncyByb3cuIFRoaXMgbWV0aG9kIGlzIHVzZWQgYnlcbiAgICogU3RhdHMuIFVzZXIgc2hvdWxkIHByZWZlciB1c2luZyBTdGF0cy5yZWNvcmQoKSBpbnN0ZWFkLlxuICAgKlxuICAgKiBNZWFzdXJlbWVudHMgd2l0aCBtZWFzdXJlbWVudCB0eXBlIElOVDY0IHdpbGwgaGF2ZSBpdHMgdmFsdWUgdHJ1bmNhdGVkLlxuICAgKiBAcGFyYW0gbWVhc3VyZW1lbnQgVGhlIG1lYXN1cmVtZW50IHRvIHJlY29yZFxuICAgKiBAcGFyYW0gdGFncyBUaGUgdGFncyB0byB3aGljaCB0aGUgdmFsdWUgaXMgYXBwbGllZFxuICAgKiBAcGFyYW0gYXR0YWNobWVudHMgb3B0aW9uYWwgVGhlIGNvbnRleHR1YWwgaW5mb3JtYXRpb24gYXNzb2NpYXRlZCB3aXRoIGFuXG4gICAqICAgICBleGFtcGxlIHZhbHVlLiBUSGUgY29udGV4dHVhbCBpbmZvcm1hdGlvbiBpcyByZXByZXNlbnRlZCBhcyBrZXkgLSB2YWx1ZVxuICAgKiAgICAgc3RyaW5nIHBhaXJzLlxuICAgKi9cbiAgcmVjb3JkTWVhc3VyZW1lbnQoXG4gICAgbWVhc3VyZW1lbnQ6IE1lYXN1cmVtZW50LFxuICAgIHRhZ3M6IFRhZ01hcCxcbiAgICBhdHRhY2htZW50cz86IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH1cbiAgKTogdm9pZDtcbiAgLyoqXG4gICAqIFJldHVybnMgYSBzbmFwc2hvdCBvZiBhbiBBZ2dyZWdhdGlvbkRhdGEgZm9yIHRoYXQgdGFncy9sYWJlbHMgdmFsdWVzLlxuICAgKiBAcGFyYW0gdGFnVmFsdWVzIFRoZSBkZXNpcmVkIGRhdGEncyB0YWcgdmFsdWVzLlxuICAgKi9cbiAgZ2V0U25hcHNob3QodGFnVmFsdWVzOiBBcnJheTxUYWdWYWx1ZSB8IG51bGw+KTogQWdncmVnYXRpb25EYXRhO1xuICAvKiogR2V0cyB0aGUgdmlldydzIHRhZyBrZXlzICovXG4gIGdldENvbHVtbnMoKTogVGFnS2V5W107XG4gIC8qKiBHZXRzIHZpZXdgcyBtZXRyaWMgKi9cbiAgZ2V0TWV0cmljKHN0YXJ0OiBudW1iZXIpOiBNZXRyaWM7XG59XG5cbi8qKlxuICogSW5mb3JtcyB0aGUgdHlwZSBvZiB0aGUgYWdncmVnYXRpb24uIEl0IGNhbiBiZTogY291bnQsIHN1bSwgbGFzdFZhbHVlIG9yXG4gKiBkaXN0cmlidXRpb24uXG4gKi9cbmV4cG9ydCBlbnVtIEFnZ3JlZ2F0aW9uVHlwZSB7XG4gIENPVU5UID0gMCxcbiAgU1VNID0gMSxcbiAgTEFTVF9WQUxVRSA9IDIsXG4gIERJU1RSSUJVVElPTiA9IDMsXG59XG5cbi8qKiBEZWZpbmVzIGhvdyBkYXRhIGlzIGNvbGxlY3RlZCBhbmQgYWdncmVnYXRlZCAqL1xuZXhwb3J0IGludGVyZmFjZSBBZ2dyZWdhdGlvbk1ldGFkYXRhIHtcbiAgLyoqIFRoZSBhZ2dyZWdhdGlvbiB0eXBlIG9mIHRoZSBhZ2dyZWdhdGlvbiBkYXRhICovXG4gIHJlYWRvbmx5IHR5cGU6IEFnZ3JlZ2F0aW9uVHlwZTtcbiAgLyoqIFRoZSB0YWdWYWx1ZXMgdGhhdCB0aGlzIEFnZ3JlZ2F0aW9uRGF0YSBjb2xsZWN0cyBhbmQgYWdncmVnYXRlcyAqL1xuICByZWFkb25seSB0YWdWYWx1ZXM6IEFycmF5PFRhZ1ZhbHVlIHwgbnVsbD47XG4gIC8qKiBUaGUgbGF0ZXN0IHRpbWVzdGFtcCBhIG5ldyBkYXRhIHBvaW50IHdhcyByZWNvcmRlZCAqL1xuICB0aW1lc3RhbXA6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBEYXRhIGNvbGxlY3RlZCBhbmQgYWdncmVnYXRlZCB3aXRoIHRoaXMgQWdncmVnYXRpb25EYXRhIHdpbGwgYmUgc3VtbWVkXG4gKiB1cC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTdW1EYXRhIGV4dGVuZHMgQWdncmVnYXRpb25NZXRhZGF0YSB7XG4gIHR5cGU6IEFnZ3JlZ2F0aW9uVHlwZS5TVU07XG4gIC8qKiBUaGUgY3VycmVudCBhY2N1bXVsYXRlZCB2YWx1ZSAqL1xuICB2YWx1ZTogbnVtYmVyO1xufVxuXG4vKipcbiAqIFRoaXMgQWdncmVnYXRpb25EYXRhIGNvdW50cyB0aGUgbnVtYmVyIG9mIG1lYXN1cmVtZW50cyByZWNvcmRlZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb3VudERhdGEgZXh0ZW5kcyBBZ2dyZWdhdGlvbk1ldGFkYXRhIHtcbiAgdHlwZTogQWdncmVnYXRpb25UeXBlLkNPVU5UO1xuICAvKiogVGhlIGN1cnJlbnQgY291bnRlZCB2YWx1ZSAqL1xuICB2YWx1ZTogbnVtYmVyO1xufVxuXG4vKipcbiAqIFRoaXMgQWdncmVnYXRpb25EYXRhIHJlcHJlc2VudHMgdGhlIGxhc3QgcmVjb3JkZWQgdmFsdWUuIFRoaXMgaXMgdXNlZnVsXG4gKiB3aGVuIGdpdmluZyBzdXBwb3J0IHRvIEdhdWdlcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBMYXN0VmFsdWVEYXRhIGV4dGVuZHMgQWdncmVnYXRpb25NZXRhZGF0YSB7XG4gIHR5cGU6IEFnZ3JlZ2F0aW9uVHlwZS5MQVNUX1ZBTFVFO1xuICAvKiogVGhlIGxhc3QgcmVjb3JkZWQgdmFsdWUgKi9cbiAgdmFsdWU6IG51bWJlcjtcbn1cblxuLyoqIFRoaXMgQWdncmVnYXRpb25EYXRhIGNvbnRhaW5zIGEgaGlzdG9ncmFtIG9mIHRoZSBjb2xsZWN0ZWQgdmFsdWVzLiAqL1xuZXhwb3J0IGludGVyZmFjZSBEaXN0cmlidXRpb25EYXRhIGV4dGVuZHMgQWdncmVnYXRpb25NZXRhZGF0YSB7XG4gIHR5cGU6IEFnZ3JlZ2F0aW9uVHlwZS5ESVNUUklCVVRJT047XG4gIC8qKiBUaGUgZmlyc3QgdGltZXN0YW1wIGEgZGF0YXBvaW50IHdhcyBhZGRlZCAqL1xuICByZWFkb25seSBzdGFydFRpbWU6IG51bWJlcjtcbiAgLyoqIEdldCB0aGUgdG90YWwgY291bnQgb2YgYWxsIHJlY29yZGVkIHZhbHVlcyBpbiB0aGUgaGlzdG9ncmFtICovXG4gIGNvdW50OiBudW1iZXI7XG4gIC8qKiBTdW0gb2YgYWxsIHJlY29yZGVkIHZhbHVlcyBpbiB0aGUgaGlzdG9ncmFtICovXG4gIHN1bTogbnVtYmVyO1xuICAvKiogR2V0IHRoZSBjb21wdXRlZCBtZWFuIHZhbHVlIG9mIGFsbCByZWNvcmRlZCB2YWx1ZXMgaW4gdGhlIGhpc3RvZ3JhbSAqL1xuICBtZWFuOiBudW1iZXI7XG4gIC8qKlxuICAgKiBHZXQgdGhlIGNvbXB1dGVkIHN0YW5kYXJkIGRldmlhdGlvbiBvZiBhbGwgcmVjb3JkZWQgdmFsdWVzIGluIHRoZVxuICAgKiBoaXN0b2dyYW1cbiAgICovXG4gIHN0ZERldmlhdGlvbjogbnVtYmVyO1xuICAvKipcbiAgICogR2V0IHRoZSBjb21wdXRlZCBzdW0gb2Ygc3F1YXJlZCBkZXZpYXRpb25zIG9mIGFsbCByZWNvcmRlZCB2YWx1ZXMgaW4gdGhlXG4gICAqIGhpc3RvZ3JhbS5cbiAgICovXG4gIHN1bU9mU3F1YXJlZERldmlhdGlvbjogbnVtYmVyO1xuICAvKiogQnVja2V0IGRpc3RyaWJ1dGlvbiBvZiB0aGUgaGlzdG9ncmFtICovXG4gIGJ1Y2tldHM6IEJ1Y2tldFtdO1xuICAvKiogQnVja2V0cyBjb3VudCAqL1xuICBidWNrZXRDb3VudHM/OiBudW1iZXJbXTtcbiAgLyoqIElmIHRoZSBkaXN0cmlidXRpb24gZG9lcyBub3QgaGF2ZSBhIGhpc3RvZ3JhbSwgdGhlbiBvbWl0IHRoaXMgZmllbGQuICovXG4gIGV4ZW1wbGFycz86IFN0YXRzRXhlbXBsYXJbXTtcbn1cblxuLyoqXG4gKiBFeGVtcGxhcnMgYXJlIGV4YW1wbGUgcG9pbnRzIHRoYXQgbWF5IGJlIHVzZWQgdG8gYW5ub3RhdGUgYWdncmVnYXRlZFxuICogRGlzdHJpYnV0aW9uIHZhbHVlcy4gVGhleSBhcmUgbWV0YWRhdGEgdGhhdCBnaXZlcyBpbmZvcm1hdGlvbiBhYm91dCBhXG4gKiBwYXJ0aWN1bGFyIHZhbHVlIGFkZGVkIHRvIGEgRGlzdHJpYnV0aW9uIGJ1Y2tldC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTdGF0c0V4ZW1wbGFyIHtcbiAgLyoqXG4gICAqIFZhbHVlIG9mIHRoZSBleGVtcGxhciBwb2ludC4gSXQgZGV0ZXJtaW5lcyB3aGljaCBidWNrZXQgdGhlIGV4ZW1wbGFyXG4gICAqIGJlbG9uZ3MgdG8uXG4gICAqL1xuICByZWFkb25seSB2YWx1ZTogbnVtYmVyO1xuICAvKiogVGhlIG9ic2VydmF0aW9uIChzYW1wbGluZykgdGltZSBvZiB0aGUgYWJvdmUgdmFsdWUuICovXG4gIHJlYWRvbmx5IHRpbWVzdGFtcDogbnVtYmVyO1xuICAvKiogQ29udGV4dHVhbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgZXhhbXBsZSB2YWx1ZS4gKi9cbiAgcmVhZG9ubHkgYXR0YWNobWVudHM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH07XG59XG5cbmV4cG9ydCB0eXBlIEJ1Y2tldCA9IG51bWJlcjtcbmV4cG9ydCB0eXBlIEFnZ3JlZ2F0aW9uRGF0YSA9XG4gIHwgU3VtRGF0YVxuICB8IENvdW50RGF0YVxuICB8IExhc3RWYWx1ZURhdGFcbiAgfCBEaXN0cmlidXRpb25EYXRhO1xuIl0sIm1hcHBpbmdzIjoiYUFBQTs7Ozs7Ozs7Ozs7Ozs7R0FBQSxTQUFBQSxlQUFBLE1BQUFDLElBQUEsMEZBQUFDLElBQUEsZ0RBQUFDLE1BQUEsS0FBQUMsUUFBQSxzQkFBQUMsR0FBQSxvQkFBQUMsWUFBQSxFQUFBTCxJQUFBLHNGQUFBTSxZQUFBLE9BQUFDLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLE9BQUFFLEtBQUEsT0FBQUMsSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxLQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFELElBQUEsVUFBQUksSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxLQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFELElBQUEsVUFBQUksSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxLQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFELElBQUEsTUFBQU8sU0FBQSxPQUFBRCxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLE1BQUFPLElBQUEsZUFBQUMsU0FBQSxHQUFBVixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxLQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxPQUFBRixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxLQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxPQUFBRCxJQUFBLFVBQUFNLEdBQUEsRUFBQVAsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsS0FBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsTUFBQU8sSUFBQSxlQUFBQyxTQUFBLEdBQUFWLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLE9BQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLE9BQUFELElBQUEsVUFBQU0sR0FBQSxFQUFBUCxLQUFBLEVBQUFDLElBQUEsSUFB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