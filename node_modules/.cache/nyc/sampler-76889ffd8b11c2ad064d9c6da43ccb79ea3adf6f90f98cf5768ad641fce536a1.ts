"use strict";/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_49q4uo082(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/sampler/sampler.ts";var hash="6a721472b9d485f4c74431ee2cd439194f21fc66";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/sampler/sampler.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:0},end:{line:18,column:337}},"2":{start:{line:22,column:19},end:{line:22,column:34}},"3":{start:{line:23,column:25},end:{line:23,column:27}},"4":{start:{line:27,column:8},end:{line:27,column:36}},"5":{start:{line:30,column:8},end:{line:30,column:20}},"6":{start:{line:33,column:0},end:{line:33,column:38}},"7":{start:{line:37,column:8},end:{line:37,column:35}},"8":{start:{line:40,column:8},end:{line:40,column:21}},"9":{start:{line:43,column:0},end:{line:43,column:36}},"10":{start:{line:50,column:8},end:{line:50,column:58}},"11":{start:{line:51,column:8},end:{line:51,column:53}},"12":{start:{line:60,column:28},end:{line:62,column:17}},"13":{start:{line:64,column:27},end:{line:64,column:52}},"14":{start:{line:65,column:8},end:{line:70,column:9}},"15":{start:{line:66,column:12},end:{line:66,column:24}},"16":{start:{line:69,column:12},end:{line:69,column:25}},"17":{start:{line:73,column:0},end:{line:73,column:48}},"18":{start:{line:85,column:8},end:{line:90,column:9}},"19":{start:{line:86,column:12},end:{line:86,column:41}},"20":{start:{line:88,column:13},end:{line:90,column:9}},"21":{start:{line:89,column:12},end:{line:89,column:40}},"22":{start:{line:91,column:8},end:{line:91,column:51}},"23":{start:{line:94,column:0},end:{line:94,column:40}},"24":{start:{line:95,column:0},end:{line:95,column:44}},"25":{start:{line:96,column:0},end:{line:96,column:42}},"26":{start:{line:101,column:0},end:{line:101,column:39}},"27":{start:{line:103,column:0},end:{line:103,column:46}},"28":{start:{line:105,column:0},end:{line:105,column:50}},"29":{start:{line:107,column:0},end:{line:107,column:45}},"30":{start:{line:109,column:0},end:{line:109,column:40}},"31":{start:{line:113,column:8},end:{line:115,column:63}},"32":{start:{line:118,column:8},end:{line:120,column:56}},"33":{start:{line:123,column:8},end:{line:125,column:59}},"34":{start:{line:128,column:8},end:{line:130,column:51}},"35":{start:{line:133,column:0},end:{line:133,column:48}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:26,column:4},end:{line:26,column:5}},loc:{start:{line:26,column:18},end:{line:28,column:5}},line:26},"1":{name:"(anonymous_1)",decl:{start:{line:29,column:4},end:{line:29,column:5}},loc:{start:{line:29,column:26},end:{line:31,column:5}},line:29},"2":{name:"(anonymous_2)",decl:{start:{line:36,column:4},end:{line:36,column:5}},loc:{start:{line:36,column:18},end:{line:38,column:5}},line:36},"3":{name:"(anonymous_3)",decl:{start:{line:39,column:4},end:{line:39,column:5}},loc:{start:{line:39,column:26},end:{line:41,column:5}},line:39},"4":{name:"(anonymous_4)",decl:{start:{line:49,column:4},end:{line:49,column:5}},loc:{start:{line:49,column:29},end:{line:52,column:5}},line:49},"5":{name:"(anonymous_5)",decl:{start:{line:59,column:4},end:{line:59,column:5}},loc:{start:{line:59,column:26},end:{line:71,column:5}},line:59},"6":{name:"(anonymous_6)",decl:{start:{line:84,column:4},end:{line:84,column:5}},loc:{start:{line:84,column:35},end:{line:92,column:5}},line:84},"7":{name:"(anonymous_7)",decl:{start:{line:112,column:4},end:{line:112,column:5}},loc:{start:{line:112,column:63},end:{line:116,column:5}},line:112},"8":{name:"(anonymous_8)",decl:{start:{line:117,column:4},end:{line:117,column:5}},loc:{start:{line:117,column:57},end:{line:121,column:5}},line:117},"9":{name:"(anonymous_9)",decl:{start:{line:122,column:4},end:{line:122,column:5}},loc:{start:{line:122,column:60},end:{line:126,column:5}},line:122},"10":{name:"(anonymous_10)",decl:{start:{line:127,column:4},end:{line:127,column:5}},loc:{start:{line:127,column:52},end:{line:131,column:5}},line:127}},branchMap:{"0":{loc:{start:{line:60,column:28},end:{line:62,column:17}},type:"cond-expr",locations:[{start:{line:61,column:14},end:{line:61,column:66}},{start:{line:62,column:14},end:{line:62,column:17}}],line:60},"1":{loc:{start:{line:65,column:8},end:{line:70,column:9}},type:"if",locations:[{start:{line:65,column:8},end:{line:70,column:9}},{start:{line:65,column:8},end:{line:70,column:9}}],line:65},"2":{loc:{start:{line:85,column:8},end:{line:90,column:9}},type:"if",locations:[{start:{line:85,column:8},end:{line:90,column:9}},{start:{line:85,column:8},end:{line:90,column:9}}],line:85},"3":{loc:{start:{line:88,column:13},end:{line:90,column:9}},type:"if",locations:[{start:{line:88,column:13},end:{line:90,column:9}},{start:{line:88,column:13},end:{line:90,column:9}}],line:88},"4":{loc:{start:{line:113,column:15},end:{line:115,column:62}},type:"cond-expr",locations:[{start:{line:114,column:14},end:{line:114,column:54}},{start:{line:115,column:14},end:{line:115,column:62}}],line:113},"5":{loc:{start:{line:118,column:15},end:{line:120,column:55}},type:"cond-expr",locations:[{start:{line:119,column:14},end:{line:119,column:53}},{start:{line:120,column:14},end:{line:120,column:55}}],line:118},"6":{loc:{start:{line:123,column:15},end:{line:125,column:58}},type:"cond-expr",locations:[{start:{line:124,column:14},end:{line:124,column:57}},{start:{line:125,column:14},end:{line:125,column:58}}],line:123},"7":{loc:{start:{line:128,column:15},end:{line:130,column:50}},type:"cond-expr",locations:[{start:{line:129,column:14},end:{line:129,column:48}},{start:{line:130,column:14},end:{line:130,column:50}}],line:128}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/sampler/sampler.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/sampler/sampler.ts"],names:[],mappings:";AAAA;;;;;;;;;;;;;;GAcG;;;AAKH,yEAAyE;AACzE,yEAAyE;AACzE,oDAAoD;AACpD,MAAM,UAAU,GAAG,eAAe,CAAC;AACnC,MAAM,gBAAgB,GAAG,EAAE,CAAC;AAE5B,yCAAyC;AACzC,MAAa,aAAa;IAA1B;QACW,gBAAW,GAAG,QAAQ,CAAC;IAKlC,CAAC;IAHC,YAAY,CAAC,OAAe;QAC1B,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAND,sCAMC;AAED,sCAAsC;AACtC,MAAa,YAAY;IAAzB;QACW,gBAAW,GAAG,OAAO,CAAC;IAKjC,CAAC;IAHC,YAAY,CAAC,OAAe;QAC1B,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AAND,oCAMC;AAED,uDAAuD;AACvD,MAAa,kBAAkB;IAI7B;;OAEG;IACH,YAAY,WAAmB;QAC7B,IAAI,CAAC,WAAW,GAAG,gBAAgB,WAAW,GAAG,CAAC;QAClD,IAAI,CAAC,YAAY,GAAG,WAAW,GAAG,UAAU,CAAC;IAC/C,CAAC;IAED;;;;;OAKG;IACH,YAAY,CAAC,OAAe;QAC1B,MAAM,WAAW,GAAG,OAAO;YACzB,CAAC,CAAC,CAAC,eAAe,GAAG,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,gBAAgB,CAAC;YACtD,CAAC,CAAC,GAAG,CAAC;QACR,4DAA4D;QAC5D,MAAM,UAAU,GAAG,QAAQ,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;QAE7C,IAAI,UAAU,IAAI,IAAI,CAAC,YAAY,EAAE;YACnC,OAAO,IAAI,CAAC;SACb;aAAM;YACL,OAAO,KAAK,CAAC;SACd;IACH,CAAC;CACF;AA/BD,gDA+BC;AAED,gCAAgC;AAChC,MAAa,cAAc;IAIzB;;;;;;;OAOG;IACH,MAAM,CAAC,UAAU,CAAC,WAAmB;QACnC,IAAI,WAAW,IAAI,GAAG,EAAE;YACtB,OAAO,cAAc,CAAC,MAAM,CAAC;SAC9B;aAAM,IAAI,WAAW,IAAI,CAAC,EAAE;YAC3B,OAAO,cAAc,CAAC,KAAK,CAAC;SAC7B;QACD,OAAO,IAAI,kBAAkB,CAAC,WAAW,CAAC,CAAC;IAC7C,CAAC;;AAnBH,wCAoBC;AAnByB,qBAAM,GAAG,IAAI,aAAa,EAAE,CAAC;AAC7B,oBAAK,GAAG,IAAI,YAAY,EAAE,CAAC;AAoBrD;;;GAGG;AACU,QAAA,qBAAqB,GAAG,MAAM,CAAC;AAE5C,6CAA6C;AAChC,QAAA,gCAAgC,GAAG,EAAE,CAAC;AACnD,gDAAgD;AACnC,QAAA,mCAAmC,GAAG,GAAG,CAAC;AACvD,4CAA4C;AAC/B,QAAA,+BAA+B,GAAG,EAAE,CAAC;AAClD,uCAAuC;AAC1B,QAAA,0BAA0B,GAAG,EAAE,CAAC;AAE7C,mCAAmC;AACnC,MAAa,kBAAkB;IAC7B,MAAM,CAAC,kCAAkC,CACvC,eAA4B;QAE5B,OAAO,CAAC,eAAe,CAAC,gCAAgC;YACtD,CAAC,CAAC,wCAAgC;YAClC,CAAC,CAAC,eAAe,CAAC,gCAAgC,CAAC;IACvD,CAAC;IAED,MAAM,CAAC,4BAA4B,CAAC,eAA4B;QAC9D,OAAO,CAAC,eAAe,CAAC,yBAAyB;YAC/C,CAAC,CAAC,uCAA+B;YACjC,CAAC,CAAC,eAAe,CAAC,yBAAyB,CAAC;IAChD,CAAC;IAED,MAAM,CAAC,+BAA+B,CAAC,eAA4B;QACjE,OAAO,CAAC,eAAe,CAAC,4BAA4B;YAClD,CAAC,CAAC,2CAAmC;YACrC,CAAC,CAAC,eAAe,CAAC,4BAA4B,CAAC;IACnD,CAAC;IAED,MAAM,CAAC,uBAAuB,CAAC,eAA4B;QACzD,OAAO,CAAC,eAAe,CAAC,oBAAoB;YAC1C,CAAC,CAAC,kCAA0B;YAC5B,CAAC,CAAC,eAAe,CAAC,oBAAoB,CAAC;IAC3C,CAAC;CACF;AA1BD,gDA0BC",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TraceParams } from '../config/types';\nimport { Sampler } from './types';\n\n// We use 52-bits as our max number because it remains a javascript \"safe\n// integer\" for arithmetic and parsing while using the full hex range for\n// comparison to the lower order bytes on a traceId.\nconst MAX_NUMBER = 0xfffffffffffff;\nconst LOWER_BYTE_COUNT = 13;\n\n/**  Sampler that samples every trace. */\nexport class AlwaysSampler implements Sampler {\n  readonly description = 'always';\n\n  shouldSample(traceId: string): boolean {\n    return true;\n  }\n}\n\n/** Sampler that samples no traces. */\nexport class NeverSampler implements Sampler {\n  readonly description = 'never';\n\n  shouldSample(traceId: string): boolean {\n    return false;\n  }\n}\n\n/** Sampler that samples a given fraction of traces. */\nexport class ProbabilitySampler implements Sampler {\n  private idUpperBound: number;\n  readonly description: string;\n\n  /**\n   * Constructs a new Probability Sampler instance.\n   */\n  constructor(probability: number) {\n    this.description = `probability.(${probability})`;\n    this.idUpperBound = probability * MAX_NUMBER;\n  }\n\n  /**\n   * Checks if trace belong the sample.\n   * @param traceId Used to check the probability\n   * @returns a boolean. True if the traceId is in probability\n   * False if the traceId is not in probability.\n   */\n  shouldSample(traceId: string): boolean {\n    const LOWER_BYTES = traceId\n      ? ('0000000000000' + traceId).slice(-LOWER_BYTE_COUNT)\n      : '0';\n    // tslint:disable-next-line:ban Needed to parse hexadecimal.\n    const LOWER_LONG = parseInt(LOWER_BYTES, 16);\n\n    if (LOWER_LONG <= this.idUpperBound) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\n/** Builder class of Samplers */\nexport class SamplerBuilder {\n  private static readonly ALWAYS = new AlwaysSampler();\n  private static readonly NEVER = new NeverSampler();\n\n  /**\n   * If probability parameter is bigger then 1 return AlwaysSampler instance.\n   * If probability parameter is less than 0 returns NeverSampler instance.\n   * Else returns a Probability Sampler\n   *\n   * @param probability probability between 0 and 1\n   * @returns a Sampler object\n   */\n  static getSampler(probability: number): Sampler {\n    if (probability >= 1.0) {\n      return SamplerBuilder.ALWAYS;\n    } else if (probability <= 0) {\n      return SamplerBuilder.NEVER;\n    }\n    return new ProbabilitySampler(probability);\n  }\n}\n\n/**\n * The default sampler is a Probability sampler with the probability set to\n * 1/10000.\n */\nexport const DEFAULT_SAMPLING_RATE = 0.0001;\n\n/** Default Limit for Annotations per span */\nexport const DEFAULT_SPAN_MAX_NUM_ANNOTATIONS = 32;\n/** Default limit for Message events per span */\nexport const DEFAULT_SPAN_MAX_NUM_MESSAGE_EVENTS = 128;\n/** Default limit for Attributes per span */\nexport const DEFAULT_SPAN_MAX_NUM_ATTRIBUTES = 32;\n/** Default limit for Links per span */\nexport const DEFAULT_SPAN_MAX_NUM_LINKS = 32;\n\n/** Builder Class of TraceParams */\nexport class TraceParamsBuilder {\n  static getNumberOfAnnotationEventsPerSpan(\n    traceParameters: TraceParams\n  ): number {\n    return !traceParameters.numberOfAnnontationEventsPerSpan\n      ? DEFAULT_SPAN_MAX_NUM_ANNOTATIONS\n      : traceParameters.numberOfAnnontationEventsPerSpan;\n  }\n\n  static getNumberOfAttributesPerSpan(traceParameters: TraceParams): number {\n    return !traceParameters.numberOfAttributesPerSpan\n      ? DEFAULT_SPAN_MAX_NUM_ATTRIBUTES\n      : traceParameters.numberOfAttributesPerSpan;\n  }\n\n  static getNumberOfMessageEventsPerSpan(traceParameters: TraceParams): number {\n    return !traceParameters.numberOfMessageEventsPerSpan\n      ? DEFAULT_SPAN_MAX_NUM_MESSAGE_EVENTS\n      : traceParameters.numberOfMessageEventsPerSpan;\n  }\n\n  static getNumberOfLinksPerSpan(traceParameters: TraceParams): number {\n    return !traceParameters.numberOfLinksPerSpan\n      ? DEFAULT_SPAN_MAX_NUM_LINKS\n      : traceParameters.numberOfLinksPerSpan;\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"6a721472b9d485f4c74431ee2cd439194f21fc66"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_49q4uo082=function(){return actualCoverage;};}return actualCoverage;}cov_49q4uo082();cov_49q4uo082().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_49q4uo082().s[1]++;exports.TraceParamsBuilder=exports.DEFAULT_SPAN_MAX_NUM_LINKS=exports.DEFAULT_SPAN_MAX_NUM_ATTRIBUTES=exports.DEFAULT_SPAN_MAX_NUM_MESSAGE_EVENTS=exports.DEFAULT_SPAN_MAX_NUM_ANNOTATIONS=exports.DEFAULT_SAMPLING_RATE=exports.SamplerBuilder=exports.ProbabilitySampler=exports.NeverSampler=exports.AlwaysSampler=void 0;// We use 52-bits as our max number because it remains a javascript "safe
// integer" for arithmetic and parsing while using the full hex range for
// comparison to the lower order bytes on a traceId.
const MAX_NUMBER=(cov_49q4uo082().s[2]++,0xfffffffffffff);const LOWER_BYTE_COUNT=(cov_49q4uo082().s[3]++,13);/**  Sampler that samples every trace. */class AlwaysSampler{constructor(){cov_49q4uo082().f[0]++;cov_49q4uo082().s[4]++;this.description='always';}shouldSample(traceId){cov_49q4uo082().f[1]++;cov_49q4uo082().s[5]++;return true;}}cov_49q4uo082().s[6]++;exports.AlwaysSampler=AlwaysSampler;/** Sampler that samples no traces. */class NeverSampler{constructor(){cov_49q4uo082().f[2]++;cov_49q4uo082().s[7]++;this.description='never';}shouldSample(traceId){cov_49q4uo082().f[3]++;cov_49q4uo082().s[8]++;return false;}}cov_49q4uo082().s[9]++;exports.NeverSampler=NeverSampler;/** Sampler that samples a given fraction of traces. */class ProbabilitySampler{/**
     * Constructs a new Probability Sampler instance.
     */constructor(probability){cov_49q4uo082().f[4]++;cov_49q4uo082().s[10]++;this.description=`probability.(${probability})`;cov_49q4uo082().s[11]++;this.idUpperBound=probability*MAX_NUMBER;}/**
     * Checks if trace belong the sample.
     * @param traceId Used to check the probability
     * @returns a boolean. True if the traceId is in probability
     * False if the traceId is not in probability.
     */shouldSample(traceId){cov_49q4uo082().f[5]++;const LOWER_BYTES=(cov_49q4uo082().s[12]++,traceId?(cov_49q4uo082().b[0][0]++,('0000000000000'+traceId).slice(-LOWER_BYTE_COUNT)):(cov_49q4uo082().b[0][1]++,'0'));// tslint:disable-next-line:ban Needed to parse hexadecimal.
const LOWER_LONG=(cov_49q4uo082().s[13]++,parseInt(LOWER_BYTES,16));cov_49q4uo082().s[14]++;if(LOWER_LONG<=this.idUpperBound){cov_49q4uo082().b[1][0]++;cov_49q4uo082().s[15]++;return true;}else{cov_49q4uo082().b[1][1]++;cov_49q4uo082().s[16]++;return false;}}}cov_49q4uo082().s[17]++;exports.ProbabilitySampler=ProbabilitySampler;/** Builder class of Samplers */class SamplerBuilder{/**
     * If probability parameter is bigger then 1 return AlwaysSampler instance.
     * If probability parameter is less than 0 returns NeverSampler instance.
     * Else returns a Probability Sampler
     *
     * @param probability probability between 0 and 1
     * @returns a Sampler object
     */static getSampler(probability){cov_49q4uo082().f[6]++;cov_49q4uo082().s[18]++;if(probability>=1.0){cov_49q4uo082().b[2][0]++;cov_49q4uo082().s[19]++;return SamplerBuilder.ALWAYS;}else{cov_49q4uo082().b[2][1]++;cov_49q4uo082().s[20]++;if(probability<=0){cov_49q4uo082().b[3][0]++;cov_49q4uo082().s[21]++;return SamplerBuilder.NEVER;}else{cov_49q4uo082().b[3][1]++;}}cov_49q4uo082().s[22]++;return new ProbabilitySampler(probability);}}cov_49q4uo082().s[23]++;exports.SamplerBuilder=SamplerBuilder;cov_49q4uo082().s[24]++;SamplerBuilder.ALWAYS=new AlwaysSampler();cov_49q4uo082().s[25]++;SamplerBuilder.NEVER=new NeverSampler();/**
 * The default sampler is a Probability sampler with the probability set to
 * 1/10000.
 */cov_49q4uo082().s[26]++;exports.DEFAULT_SAMPLING_RATE=0.0001;/** Default Limit for Annotations per span */cov_49q4uo082().s[27]++;exports.DEFAULT_SPAN_MAX_NUM_ANNOTATIONS=32;/** Default limit for Message events per span */cov_49q4uo082().s[28]++;exports.DEFAULT_SPAN_MAX_NUM_MESSAGE_EVENTS=128;/** Default limit for Attributes per span */cov_49q4uo082().s[29]++;exports.DEFAULT_SPAN_MAX_NUM_ATTRIBUTES=32;/** Default limit for Links per span */cov_49q4uo082().s[30]++;exports.DEFAULT_SPAN_MAX_NUM_LINKS=32;/** Builder Class of TraceParams */class TraceParamsBuilder{static getNumberOfAnnotationEventsPerSpan(traceParameters){cov_49q4uo082().f[7]++;cov_49q4uo082().s[31]++;return!traceParameters.numberOfAnnontationEventsPerSpan?(cov_49q4uo082().b[4][0]++,exports.DEFAULT_SPAN_MAX_NUM_ANNOTATIONS):(cov_49q4uo082().b[4][1]++,traceParameters.numberOfAnnontationEventsPerSpan);}static getNumberOfAttributesPerSpan(traceParameters){cov_49q4uo082().f[8]++;cov_49q4uo082().s[32]++;return!traceParameters.numberOfAttributesPerSpan?(cov_49q4uo082().b[5][0]++,exports.DEFAULT_SPAN_MAX_NUM_ATTRIBUTES):(cov_49q4uo082().b[5][1]++,traceParameters.numberOfAttributesPerSpan);}static getNumberOfMessageEventsPerSpan(traceParameters){cov_49q4uo082().f[9]++;cov_49q4uo082().s[33]++;return!traceParameters.numberOfMessageEventsPerSpan?(cov_49q4uo082().b[6][0]++,exports.DEFAULT_SPAN_MAX_NUM_MESSAGE_EVENTS):(cov_49q4uo082().b[6][1]++,traceParameters.numberOfMessageEventsPerSpan);}static getNumberOfLinksPerSpan(traceParameters){cov_49q4uo082().f[10]++;cov_49q4uo082().s[34]++;return!traceParameters.numberOfLinksPerSpan?(cov_49q4uo082().b[7][0]++,exports.DEFAULT_SPAN_MAX_NUM_LINKS):(cov_49q4uo082().b[7][1]++,traceParameters.numberOfLinksPerSpan);}}cov_49q4uo082().s[35]++;exports.TraceParamsBuilder=TraceParamsBuilder;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,