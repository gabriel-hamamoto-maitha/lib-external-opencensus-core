"use strict";/**
 * Copyright 2019, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_1gd9khusxt(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/propagation/binary-serializer.ts";var hash="41734d77825a666b2f2c08e318e364f2de396516";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/propagation/binary-serializer.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:0},end:{line:18,column:101}},"2":{start:{line:48,column:18},end:{line:48,column:39}},"3":{start:{line:49,column:27},end:{line:49,column:56}},"4":{start:{line:51,column:0},end:{line:51,column:45}},"5":{start:{line:52,column:17},end:{line:52,column:23}},"6":{start:{line:53,column:19},end:{line:53,column:20}},"7":{start:{line:54,column:21},end:{line:54,column:22}},"8":{start:{line:55,column:25},end:{line:55,column:26}},"9":{start:{line:61,column:22},end:{line:61,column:24}},"10":{start:{line:62,column:4},end:{line:62,column:31}},"11":{start:{line:63,column:21},end:{line:63,column:22}},"12":{start:{line:64,column:17},end:{line:64,column:28}},"13":{start:{line:65,column:4},end:{line:69,column:7}},"14":{start:{line:66,column:8},end:{line:66,column:41}},"15":{start:{line:67,column:8},end:{line:67,column:44}},"16":{start:{line:68,column:8},end:{line:68,column:47}},"17":{start:{line:70,column:4},end:{line:72,column:5}},"18":{start:{line:71,column:8},end:{line:71,column:119}},"19":{start:{line:73,column:4},end:{line:73,column:34}},"20":{start:{line:75,column:0},end:{line:75,column:42}},"21":{start:{line:81,column:4},end:{line:83,column:5}},"22":{start:{line:82,column:8},end:{line:82,column:58}},"23":{start:{line:84,column:22},end:{line:84,column:55}},"24":{start:{line:85,column:4},end:{line:87,column:5}},"25":{start:{line:86,column:8},end:{line:86,column:107}},"26":{start:{line:88,column:4},end:{line:88,column:29}},"27":{start:{line:90,column:0},end:{line:90,column:46}},"28":{start:{line:92,column:4},end:{line:92,column:33}},"29":{start:{line:93,column:4},end:{line:93,column:41}},"30":{start:{line:94,column:4},end:{line:94,column:44}},"31":{start:{line:97,column:4},end:{line:97,column:69}},"32":{start:{line:98,column:4},end:{line:98,column:52}},"33":{start:{line:99,column:4},end:{line:99,column:21}},"34":{start:{line:102,column:17},end:{line:102,column:39}},"35":{start:{line:103,column:18},end:{line:103,column:31}},"36":{start:{line:104,column:21},end:{line:104,column:22}},"37":{start:{line:105,column:23},end:{line:105,column:24}},"38":{start:{line:106,column:4},end:{line:128,column:5}},"39":{start:{line:107,column:24},end:{line:107,column:53}},"40":{start:{line:108,column:8},end:{line:112,column:9}},"41":{start:{line:111,column:12},end:{line:111,column:18}},"42":{start:{line:113,column:8},end:{line:113,column:26}},"43":{start:{line:114,column:20},end:{line:114,column:54}},"44":{start:{line:115,column:8},end:{line:115,column:35}},"45":{start:{line:116,column:8},end:{line:116,column:33}},"46":{start:{line:117,column:8},end:{line:117,column:26}},"47":{start:{line:118,column:20},end:{line:118,column:54}},"48":{start:{line:119,column:8},end:{line:119,column:35}},"49":{start:{line:120,column:8},end:{line:120,column:33}},"50":{start:{line:121,column:8},end:{line:121,column:26}},"51":{start:{line:122,column:8},end:{line:127,column:9}},"52":{start:{line:123,column:12},end:{line:123,column:123}},"53":{start:{line:126,column:12},end:{line:126,column:52}},"54":{start:{line:129,column:4},end:{line:129,column:16}},"55":{start:{line:132,column:19},end:{line:132,column:66}},"56":{start:{line:133,column:4},end:{line:133,column:70}},"57":{start:{line:136,column:4},end:{line:136,column:27}}},fnMap:{"0":{name:"serializeBinary",decl:{start:{line:60,column:9},end:{line:60,column:24}},loc:{start:{line:60,column:33},end:{line:74,column:1}},line:60},"1":{name:"(anonymous_1)",decl:{start:{line:65,column:17},end:{line:65,column:18}},loc:{start:{line:65,column:39},end:{line:69,column:5}},line:65},"2":{name:"deserializeBinary",decl:{start:{line:80,column:9},end:{line:80,column:26}},loc:{start:{line:80,column:35},end:{line:89,column:1}},line:80},"3":{name:"encodeTag",decl:{start:{line:91,column:9},end:{line:91,column:18}},loc:{start:{line:91,column:48},end:{line:95,column:1}},line:91},"4":{name:"encodeString",decl:{start:{line:96,column:9},end:{line:96,column:21}},loc:{start:{line:96,column:40},end:{line:100,column:1}},line:96},"5":{name:"parseTags",decl:{start:{line:101,column:9},end:{line:101,column:18}},loc:{start:{line:101,column:27},end:{line:130,column:1}},line:101},"6":{name:"decodeString",decl:{start:{line:131,column:9},end:{line:131,column:21}},loc:{start:{line:131,column:38},end:{line:134,column:1}},line:131},"7":{name:"unicode",decl:{start:{line:135,column:9},end:{line:135,column:16}},loc:{start:{line:135,column:20},end:{line:137,column:1}},line:135}},branchMap:{"0":{loc:{start:{line:70,column:4},end:{line:72,column:5}},type:"if",locations:[{start:{line:70,column:4},end:{line:72,column:5}},{start:{line:70,column:4},end:{line:72,column:5}}],line:70},"1":{loc:{start:{line:81,column:4},end:{line:83,column:5}},type:"if",locations:[{start:{line:81,column:4},end:{line:83,column:5}},{start:{line:81,column:4},end:{line:83,column:5}}],line:81},"2":{loc:{start:{line:85,column:4},end:{line:87,column:5}},type:"if",locations:[{start:{line:85,column:4},end:{line:87,column:5}},{start:{line:85,column:4},end:{line:87,column:5}}],line:85},"3":{loc:{start:{line:108,column:8},end:{line:112,column:9}},type:"if",locations:[{start:{line:108,column:8},end:{line:112,column:9}},{start:{line:108,column:8},end:{line:112,column:9}}],line:108},"4":{loc:{start:{line:122,column:8},end:{line:127,column:9}},type:"if",locations:[{start:{line:122,column:8},end:{line:127,column:9}},{start:{line:122,column:8},end:{line:127,column:9}}],line:122}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/propagation/binary-serializer.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/propagation/binary-serializer.ts"],names:[],mappings:"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",sourcesContent:["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This module contains the functions for serializing and deserializing\n * TagMap (TagContext) with the binary format. It allows tags to propagate\n * across requests.\n *\n * <p>OpenCensus tag context encoding:\n *\n * <ul>\n *   <li>Tags are encoded in single byte sequence. The version 0 format is:\n *   <li>{@code <version_id><encoded_tags>}\n *   <li>{@code <version_id> -> a single byte, value 0}\n *   <li>{@code <encoded_tags> -> (<tag_field_id><tag_encoding>)*}\n *     <ul>\n *       <li>{@code <tag_field_id>} -> a single byte, value 0\n *       <li>{@code <tag_encoding>}:\n *         <ul>\n *           <li>{@code <tag_key_len><tag_key><tag_val_len><tag_val>}\n *             <ul>\n *               <li>{@code <tag_key_len>} -> varint encoded integer\n *               <li>{@code <tag_key>} -> tag_key_len bytes comprising tag name\n *               <li>{@code <tag_val_len>} -> varint encoded integer\n *               <li>{@code <tag_val>} -> tag_val_len bytes comprising tag value\n *             </ul>\n *           </li>\n *         </ul>\n *       </li>\n *     </ul>\n * </ul>\n */\n\nimport { TagMap } from '../tag-map';\nimport { TagKey, TagValue } from '../types';\nimport { DecodeVarint, EncodeVarint } from './variant-encoding';\n\n// This size limit only applies to the bytes representing tag keys and values.\nexport const TAG_MAP_SERIALIZED_SIZE_LIMIT = 8192;\n\nconst ENCODING = 'utf8';\nconst VERSION_ID = 0;\nconst TAG_FIELD_ID = 0;\nconst VERSION_ID_INDEX = 0;\n\n/**\n * Serializes a given TagMap to the on-the-wire format.\n * @param tagMap The TagMap to serialize.\n */\nexport function serializeBinary(tagMap: TagMap): Buffer {\n  const byteArray: number[] = [];\n  byteArray.push(VERSION_ID);\n  let totalChars = 0;\n  const tags = tagMap.tags;\n  tags.forEach((tagValue: TagValue, tagKey: TagKey) => {\n    totalChars += tagKey.name.length;\n    totalChars += tagValue.value.length;\n    encodeTag(tagKey, tagValue, byteArray);\n  });\n\n  if (totalChars > TAG_MAP_SERIALIZED_SIZE_LIMIT) {\n    throw new Error(\n      `Size of TagMap exceeds the maximum serialized size ${TAG_MAP_SERIALIZED_SIZE_LIMIT}`\n    );\n  }\n  return Buffer.from(byteArray);\n}\n\n/**\n * Deserializes input to TagMap based on the binary format standard.\n * @param buffer The TagMap to deserialize.\n */\nexport function deserializeBinary(buffer: Buffer): TagMap {\n  if (buffer.length === 0) {\n    throw new Error('Input buffer can not be empty.');\n  }\n  const versionId = buffer.readInt8(VERSION_ID_INDEX);\n  if (versionId > VERSION_ID) {\n    throw new Error(\n      `Wrong Version ID: ${versionId}. Currently supports version up to: ${VERSION_ID}`\n    );\n  }\n  return parseTags(buffer);\n}\n\nfunction encodeTag(tagKey: TagKey, tagValue: TagValue, byteArray: number[]) {\n  byteArray.push(TAG_FIELD_ID);\n  encodeString(tagKey.name, byteArray);\n  encodeString(tagValue.value, byteArray);\n}\n\nfunction encodeString(input: string, byteArray: number[]) {\n  byteArray.push(...EncodeVarint(input.length));\n  byteArray.push(...input.split('').map(unicode));\n  return byteArray;\n}\n\nfunction parseTags(buffer: Buffer): TagMap {\n  const tags = new TagMap();\n  const limit = buffer.length;\n  let totalChars = 0;\n  let currentIndex = 1;\n\n  while (currentIndex < limit) {\n    const fieldId = buffer.readInt8(currentIndex);\n    if (fieldId > TAG_FIELD_ID) {\n      // Stop parsing at the first unknown field ID, since there is no way to\n      // know its length.\n      break;\n    }\n    currentIndex += 1;\n    const key = decodeString(buffer, currentIndex);\n    currentIndex += key.length;\n    totalChars += key.length;\n\n    currentIndex += 1;\n    const val = decodeString(buffer, currentIndex);\n    currentIndex += val.length;\n    totalChars += val.length;\n\n    currentIndex += 1;\n    if (totalChars > TAG_MAP_SERIALIZED_SIZE_LIMIT) {\n      throw new Error(\n        `Size of TagMap exceeds the maximum serialized size ${TAG_MAP_SERIALIZED_SIZE_LIMIT}`\n      );\n    } else {\n      tags.set({ name: key }, { value: val });\n    }\n  }\n  return tags;\n}\n\nfunction decodeString(buffer: Buffer, offset: number): string {\n  const length = DecodeVarint(buffer, offset);\n  return buffer.toString(ENCODING, offset + 1, offset + 1 + length);\n}\n\nfunction unicode(x: string) {\n  return x.charCodeAt(0);\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"41734d77825a666b2f2c08e318e364f2de396516"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1gd9khusxt=function(){return actualCoverage;};}return actualCoverage;}cov_1gd9khusxt();cov_1gd9khusxt().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_1gd9khusxt().s[1]++;exports.deserializeBinary=exports.serializeBinary=exports.TAG_MAP_SERIALIZED_SIZE_LIMIT=void 0;/**
 * This module contains the functions for serializing and deserializing
 * TagMap (TagContext) with the binary format. It allows tags to propagate
 * across requests.
 *
 * <p>OpenCensus tag context encoding:
 *
 * <ul>
 *   <li>Tags are encoded in single byte sequence. The version 0 format is:
 *   <li>{@code <version_id><encoded_tags>}
 *   <li>{@code <version_id> -> a single byte, value 0}
 *   <li>{@code <encoded_tags> -> (<tag_field_id><tag_encoding>)*}
 *     <ul>
 *       <li>{@code <tag_field_id>} -> a single byte, value 0
 *       <li>{@code <tag_encoding>}:
 *         <ul>
 *           <li>{@code <tag_key_len><tag_key><tag_val_len><tag_val>}
 *             <ul>
 *               <li>{@code <tag_key_len>} -> varint encoded integer
 *               <li>{@code <tag_key>} -> tag_key_len bytes comprising tag name
 *               <li>{@code <tag_val_len>} -> varint encoded integer
 *               <li>{@code <tag_val>} -> tag_val_len bytes comprising tag value
 *             </ul>
 *           </li>
 *         </ul>
 *       </li>
 *     </ul>
 * </ul>
 */const tag_map_1=(cov_1gd9khusxt().s[2]++,require("../tag-map"));const variant_encoding_1=(cov_1gd9khusxt().s[3]++,require("./variant-encoding"));// This size limit only applies to the bytes representing tag keys and values.
cov_1gd9khusxt().s[4]++;exports.TAG_MAP_SERIALIZED_SIZE_LIMIT=8192;const ENCODING=(cov_1gd9khusxt().s[5]++,'utf8');const VERSION_ID=(cov_1gd9khusxt().s[6]++,0);const TAG_FIELD_ID=(cov_1gd9khusxt().s[7]++,0);const VERSION_ID_INDEX=(cov_1gd9khusxt().s[8]++,0);/**
 * Serializes a given TagMap to the on-the-wire format.
 * @param tagMap The TagMap to serialize.
 */function serializeBinary(tagMap){cov_1gd9khusxt().f[0]++;const byteArray=(cov_1gd9khusxt().s[9]++,[]);cov_1gd9khusxt().s[10]++;byteArray.push(VERSION_ID);let totalChars=(cov_1gd9khusxt().s[11]++,0);const tags=(cov_1gd9khusxt().s[12]++,tagMap.tags);cov_1gd9khusxt().s[13]++;tags.forEach((tagValue,tagKey)=>{cov_1gd9khusxt().f[1]++;cov_1gd9khusxt().s[14]++;totalChars+=tagKey.name.length;cov_1gd9khusxt().s[15]++;totalChars+=tagValue.value.length;cov_1gd9khusxt().s[16]++;encodeTag(tagKey,tagValue,byteArray);});cov_1gd9khusxt().s[17]++;if(totalChars>exports.TAG_MAP_SERIALIZED_SIZE_LIMIT){cov_1gd9khusxt().b[0][0]++;cov_1gd9khusxt().s[18]++;throw new Error(`Size of TagMap exceeds the maximum serialized size ${exports.TAG_MAP_SERIALIZED_SIZE_LIMIT}`);}else{cov_1gd9khusxt().b[0][1]++;}cov_1gd9khusxt().s[19]++;return Buffer.from(byteArray);}cov_1gd9khusxt().s[20]++;exports.serializeBinary=serializeBinary;/**
 * Deserializes input to TagMap based on the binary format standard.
 * @param buffer The TagMap to deserialize.
 */function deserializeBinary(buffer){cov_1gd9khusxt().f[2]++;cov_1gd9khusxt().s[21]++;if(buffer.length===0){cov_1gd9khusxt().b[1][0]++;cov_1gd9khusxt().s[22]++;throw new Error('Input buffer can not be empty.');}else{cov_1gd9khusxt().b[1][1]++;}const versionId=(cov_1gd9khusxt().s[23]++,buffer.readInt8(VERSION_ID_INDEX));cov_1gd9khusxt().s[24]++;if(versionId>VERSION_ID){cov_1gd9khusxt().b[2][0]++;cov_1gd9khusxt().s[25]++;throw new Error(`Wrong Version ID: ${versionId}. Currently supports version up to: ${VERSION_ID}`);}else{cov_1gd9khusxt().b[2][1]++;}cov_1gd9khusxt().s[26]++;return parseTags(buffer);}cov_1gd9khusxt().s[27]++;exports.deserializeBinary=deserializeBinary;function encodeTag(tagKey,tagValue,byteArray){cov_1gd9khusxt().f[3]++;cov_1gd9khusxt().s[28]++;byteArray.push(TAG_FIELD_ID);cov_1gd9khusxt().s[29]++;encodeString(tagKey.name,byteArray);cov_1gd9khusxt().s[30]++;encodeString(tagValue.value,byteArray);}function encodeString(input,byteArray){cov_1gd9khusxt().f[4]++;cov_1gd9khusxt().s[31]++;byteArray.push(...variant_encoding_1.EncodeVarint(input.length));cov_1gd9khusxt().s[32]++;byteArray.push(...input.split('').map(unicode));cov_1gd9khusxt().s[33]++;return byteArray;}function parseTags(buffer){cov_1gd9khusxt().f[5]++;const tags=(cov_1gd9khusxt().s[34]++,new tag_map_1.TagMap());const limit=(cov_1gd9khusxt().s[35]++,buffer.length);let totalChars=(cov_1gd9khusxt().s[36]++,0);let currentIndex=(cov_1gd9khusxt().s[37]++,1);cov_1gd9khusxt().s[38]++;while(currentIndex<limit){const fieldId=(cov_1gd9khusxt().s[39]++,buffer.readInt8(currentIndex));cov_1gd9khusxt().s[40]++;if(fieldId>TAG_FIELD_ID){cov_1gd9khusxt().b[3][0]++;cov_1gd9khusxt().s[41]++;// Stop parsing at the first unknown field ID, since there is no way to
// know its length.
break;}else{cov_1gd9khusxt().b[3][1]++;}cov_1gd9khusxt().s[42]++;currentIndex+=1;const key=(cov_1gd9khusxt().s[43]++,decodeString(buffer,currentIndex));cov_1gd9khusxt().s[44]++;currentIndex+=key.length;cov_1gd9khusxt().s[45]++;totalChars+=key.length;cov_1gd9khusxt().s[46]++;currentIndex+=1;const val=(cov_1gd9khusxt().s[47]++,decodeString(buffer,currentIndex));cov_1gd9khusxt().s[48]++;currentIndex+=val.length;cov_1gd9khusxt().s[49]++;totalChars+=val.length;cov_1gd9khusxt().s[50]++;currentIndex+=1;cov_1gd9khusxt().s[51]++;if(totalChars>exports.TAG_MAP_SERIALIZED_SIZE_LIMIT){cov_1gd9khusxt().b[4][0]++;cov_1gd9khusxt().s[52]++;throw new Error(`Size of TagMap exceeds the maximum serialized size ${exports.TAG_MAP_SERIALIZED_SIZE_LIMIT}`);}else{cov_1gd9khusxt().b[4][1]++;cov_1gd9khusxt().s[53]++;tags.set({name:key},{value:val});}}cov_1gd9khusxt().s[54]++;return tags;}function decodeString(buffer,offset){cov_1gd9khusxt().f[6]++;const length=(cov_1gd9khusxt().s[55]++,variant_encoding_1.DecodeVarint(buffer,offset));cov_1gd9khusxt().s[56]++;return buffer.toString(ENCODING,offset+1,offset+1+length);}function unicode(x){cov_1gd9khusxt().f[7]++;cov_1gd9khusxt().s[57]++;return x.charCodeAt(0);}//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,