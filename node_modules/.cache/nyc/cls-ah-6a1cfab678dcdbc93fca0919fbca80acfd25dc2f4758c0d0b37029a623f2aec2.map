{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/internal/cls-ah.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/internal/cls-ah.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Original file from Stackdriver Trace Agent for Node.js\n// https://github.com/GoogleCloudPlatform/cloud-trace-nodejs\n\nimport * as asyncHook from 'async_hooks';\nimport {\n  Context,\n  Func,\n  Namespace as CLSNamespace,\n} from 'continuation-local-storage';\nimport { EventEmitter } from 'events';\nimport * as shimmer from 'shimmer';\n\nconst WRAPPED = Symbol('context_wrapped');\n/** A map of AsyncResource IDs to Context objects. */\nlet contexts: Map<number, Context> = new Map();\nlet current: Context = {};\n\n// Create the hook.\nasyncHook.createHook({ init, before, destroy }).enable();\n\n// A list of well-known EventEmitter methods that add event listeners.\nconst EVENT_EMITTER_METHODS: Array<keyof EventEmitter> = [\n  'addListener',\n  'on',\n  'once',\n  'prependListener',\n  'prependOnceListener',\n];\n\nclass AsyncHooksNamespace implements CLSNamespace {\n  get name(): string {\n    throw new Error('Not implemented');\n  }\n\n  get active(): Context {\n    return current;\n  }\n\n  createContext(): Context {\n    throw new Error('Not implemented');\n  }\n\n  get(k: string) {\n    return current[k];\n  }\n\n  set<T>(k: string, v: T): T {\n    current[k] = v;\n    return v;\n  }\n\n  run<T>(fn: Func<T>): Context {\n    this.runAndReturn(fn);\n    return current;\n  }\n\n  runAndReturn<T>(fn: Func<T>): T {\n    const oldContext = current;\n    current = {};\n    if (oldContext['current_tag_map']) {\n      current['current_tag_map'] = oldContext['current_tag_map'];\n    }\n    const res = fn();\n    current = oldContext;\n    return res;\n  }\n\n  bind<T>(cb: Func<T>): Func<T> {\n    // TODO(kjin): Monitor https://github.com/Microsoft/TypeScript/pull/15473.\n    // When it's landed and released, we can remove these `any` casts.\n    // tslint:disable-next-line:no-any\n    if (((cb as any)[WRAPPED] as boolean) || !current) {\n      return cb;\n    }\n    const boundContext = current;\n    const contextWrapper = function(this: {}) {\n      const oldContext = current;\n      current = boundContext;\n      // @ts-expect-error ts-migrate(2345) FIXME: Argument of type 'IArguments' is not assignable to... Remove this comment to see the full error message\n      const res = cb.apply(this, arguments) as T;\n      current = oldContext;\n      return res;\n    };\n    // tslint:disable-next-line:no-any\n    (contextWrapper as any)[WRAPPED] = true;\n    Object.defineProperty(contextWrapper, 'length', {\n      enumerable: false,\n      configurable: true,\n      writable: false,\n      value: cb.length,\n    });\n    return contextWrapper;\n  }\n\n  // This function is not technically needed and all tests currently pass\n  // without it (after removing call sites). While it is not a complete\n  // solution, restoring correct context before running every request/response\n  // event handler reduces the number of situations in which userspace queuing\n  // will cause us to lose context.\n  bindEmitter(ee: NodeJS.EventEmitter): void {\n    const ns = this;\n    EVENT_EMITTER_METHODS.forEach(method => {\n      if (ee[method]) {\n        shimmer.wrap(ee, method, oldMethod => {\n          return function(this: {}, event: string, cb: Func<void>) {\n            // @ts-expect-error ts-migrate(2684) FIXME: The 'this' context of type '((event: string | symb... Remove this comment to see the full error message\n            return oldMethod.call(this, event, ns.bind(cb));\n          };\n        });\n      }\n    });\n  }\n}\n\nconst namespace = new AsyncHooksNamespace();\n\n// AsyncWrap Hooks\n\n/** init is called during object construction. */\nfunction init(\n  uid: number,\n  provider: string,\n  parentUid: number,\n  parentHandle: {}\n) {\n  contexts.set(uid, current);\n}\n\n/** before is called just before the resource's callback is called. */\nfunction before(uid: number) {\n  const maybeCurrent = contexts.get(uid);\n  if (maybeCurrent !== undefined) {\n    current = maybeCurrent;\n  }\n}\n\n/**\n * destroy is called when the object is no longer used, so also delete\n * its entry in the map.\n */\nfunction destroy(uid: number) {\n  contexts.delete(uid);\n}\n\nexport function createNamespace(): CLSNamespace {\n  return namespace;\n}\n\nexport function destroyNamespace(): void {\n  current = {};\n  contexts = new Map();\n}\n\nexport function getNamespace(): CLSNamespace {\n  return namespace;\n}\n\nexport function reset(): void {\n  throw new Error('Not implemented');\n}\n"]}