"use strict";/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_11tlp9x0y1(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/utils.ts";var hash="acbeb6f7920ca1ab3878db9bb004ba21192b5d8e";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/utils.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:0},end:{line:18,column:234}},"2":{start:{line:19,column:24},end:{line:19,column:27}},"3":{start:{line:20,column:26},end:{line:22,column:1}},"4":{start:{line:30,column:4},end:{line:33,column:31}},"5":{start:{line:31,column:19},end:{line:31,column:27}},"6":{start:{line:35,column:0},end:{line:35,column:42}},"7":{start:{line:43,column:4},end:{line:43,column:52}},"8":{start:{line:45,column:0},end:{line:45,column:58}},"9":{start:{line:55,column:4},end:{line:55,column:49}},"10":{start:{line:57,column:0},end:{line:57,column:64}},"11":{start:{line:62,column:4},end:{line:62,column:51}},"12":{start:{line:64,column:0},end:{line:64,column:58}},"13":{start:{line:69,column:4},end:{line:69,column:47}},"14":{start:{line:71,column:0},end:{line:71,column:60}},"15":{start:{line:75,column:4},end:{line:75,column:49}},"16":{start:{line:77,column:0},end:{line:77,column:54}},"17":{start:{line:81,column:4},end:{line:81,column:53}},"18":{start:{line:83,column:0},end:{line:83,column:48}}},fnMap:{"0":{name:"hashLabelValues",decl:{start:{line:29,column:9},end:{line:29,column:24}},loc:{start:{line:29,column:38},end:{line:34,column:1}},line:29},"1":{name:"(anonymous_1)",decl:{start:{line:31,column:13},end:{line:31,column:14}},loc:{start:{line:31,column:19},end:{line:31,column:27}},line:31},"2":{name:"initializeDefaultLabels",decl:{start:{line:42,column:9},end:{line:42,column:32}},loc:{start:{line:42,column:40},end:{line:44,column:1}},line:42},"3":{name:"isLengthAttributeInterface",decl:{start:{line:52,column:9},end:{line:52,column:35}},loc:{start:{line:54,column:5},end:{line:56,column:1}},line:54},"4":{name:"isLengthMethodInterface",decl:{start:{line:59,column:9},end:{line:59,column:32}},loc:{start:{line:61,column:5},end:{line:63,column:1}},line:61},"5":{name:"isSizeAttributeInterface",decl:{start:{line:66,column:9},end:{line:66,column:33}},loc:{start:{line:68,column:5},end:{line:70,column:1}},line:68},"6":{name:"isSizeMethodInterface",decl:{start:{line:74,column:9},end:{line:74,column:30}},loc:{start:{line:74,column:36},end:{line:76,column:1}},line:74},"7":{name:"isToValueInterface",decl:{start:{line:80,column:9},end:{line:80,column:27}},loc:{start:{line:80,column:33},end:{line:82,column:1}},line:80}},branchMap:{"0":{loc:{start:{line:55,column:11},end:{line:55,column:48}},type:"binary-expr",locations:[{start:{line:55,column:11},end:{line:55,column:14}},{start:{line:55,column:18},end:{line:55,column:48}}],line:55},"1":{loc:{start:{line:62,column:11},end:{line:62,column:50}},type:"binary-expr",locations:[{start:{line:62,column:11},end:{line:62,column:14}},{start:{line:62,column:18},end:{line:62,column:50}}],line:62},"2":{loc:{start:{line:69,column:11},end:{line:69,column:46}},type:"binary-expr",locations:[{start:{line:69,column:11},end:{line:69,column:14}},{start:{line:69,column:18},end:{line:69,column:46}}],line:69},"3":{loc:{start:{line:75,column:11},end:{line:75,column:48}},type:"binary-expr",locations:[{start:{line:75,column:11},end:{line:75,column:14}},{start:{line:75,column:18},end:{line:75,column:48}}],line:75},"4":{loc:{start:{line:81,column:11},end:{line:81,column:52}},type:"binary-expr",locations:[{start:{line:81,column:11},end:{line:81,column:14}},{start:{line:81,column:18},end:{line:81,column:52}}],line:81}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/utils.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/utils.ts"],names:[],mappings:";AAAA;;;;;;;;;;;;;;GAcG;;;AAWH,MAAM,eAAe,GAAG,GAAG,CAAC;AAC5B,MAAM,iBAAiB,GAAe;IACpC,KAAK,EAAE,IAAI;CACZ,CAAC;AAEF;;;;;GAKG;AACH,SAAgB,eAAe,CAAC,WAAyB;IACvD,OAAO,WAAW;SACf,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC;SACnB,IAAI,EAAE;SACN,IAAI,CAAC,eAAe,CAAC,CAAC;AAC3B,CAAC;AALD,0CAKC;AAED;;;;;GAKG;AACH,SAAgB,uBAAuB,CAAC,KAAa;IACnD,OAAO,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;AAClD,CAAC;AAFD,0DAEC;AAED,yEAAyE;AACzE,4DAA4D;AAC5D,wEAAwE;AACxE,2EAA2E;AAC3E,oCAAoC;AAEpC,oEAAoE;AACpE,SAAgB,0BAA0B;AACxC,kCAAkC;AAClC,GAAQ;IAER,OAAO,GAAG,IAAI,OAAO,GAAG,CAAC,MAAM,KAAK,QAAQ,CAAC;AAC/C,CAAC;AALD,gEAKC;AAED,iEAAiE;AACjE,SAAgB,uBAAuB;AACrC,kCAAkC;AAClC,GAAQ;IAER,OAAO,GAAG,IAAI,OAAO,GAAG,CAAC,MAAM,KAAK,UAAU,CAAC;AACjD,CAAC;AALD,0DAKC;AAED,kEAAkE;AAClE,SAAgB,wBAAwB;AACtC,kCAAkC;AAClC,GAAQ;IAER,OAAO,GAAG,IAAI,OAAO,GAAG,CAAC,IAAI,KAAK,QAAQ,CAAC;AAC7C,CAAC;AALD,4DAKC;AAED,+DAA+D;AAC/D,kCAAkC;AAClC,SAAgB,qBAAqB,CAAC,GAAQ;IAC5C,OAAO,GAAG,IAAI,OAAO,GAAG,CAAC,IAAI,KAAK,UAAU,CAAC;AAC/C,CAAC;AAFD,sDAEC;AAED,4DAA4D;AAC5D,kCAAkC;AAClC,SAAgB,kBAAkB,CAAC,GAAQ;IACzC,OAAO,GAAG,IAAI,OAAO,GAAG,CAAC,QAAQ,KAAK,UAAU,CAAC;AACnD,CAAC;AAFD,gDAEC",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LabelValue } from './export/types';\nimport {\n  LengthAttributeInterface,\n  LengthMethodInterface,\n  SizeAttributeInterface,\n  SizeMethodInterface,\n  ToValueInterface,\n} from './types';\n\nconst COMMA_SEPARATOR = ',';\nconst UNSET_LABEL_VALUE: LabelValue = {\n  value: null,\n};\n\n/**\n * Returns a string(comma separated) from the list of label values.\n *\n * @param labelValues The list of the label values.\n * @returns The hashed label values string.\n */\nexport function hashLabelValues(labelValues: LabelValue[]): string {\n  return labelValues\n    .map(lv => lv.value)\n    .sort()\n    .join(COMMA_SEPARATOR);\n}\n\n/**\n * Returns default label values.\n *\n * @param count The number of label values.\n * @returns The list of the label values.\n */\nexport function initializeDefaultLabels(count: number): LabelValue[] {\n  return new Array(count).fill(UNSET_LABEL_VALUE);\n}\n\n// TODO(mayurkale): Consider to use unknown type instead of any for below\n// functions, unknown type is available since TypeScript 3.0\n// Fact: unknown acts like a type-safe version of any by requiring us to\n// perform some type of checking before we can use the value of the unknown\n// element or any of its properties.\n\n// Checks if the specified collection is a LengthAttributeInterface.\nexport function isLengthAttributeInterface(\n  // tslint:disable-next-line:no-any\n  obj: any\n): obj is LengthAttributeInterface {\n  return obj && typeof obj.length === 'number';\n}\n\n// Checks if the specified collection is a LengthMethodInterface.\nexport function isLengthMethodInterface(\n  // tslint:disable-next-line:no-any\n  obj: any\n): obj is LengthMethodInterface {\n  return obj && typeof obj.length === 'function';\n}\n\n// Checks if the specified collection is a SizeAttributeInterface.\nexport function isSizeAttributeInterface(\n  // tslint:disable-next-line:no-any\n  obj: any\n): obj is SizeAttributeInterface {\n  return obj && typeof obj.size === 'number';\n}\n\n// Checks if the specified collection is a SizeMethodInterface.\n// tslint:disable-next-line:no-any\nexport function isSizeMethodInterface(obj: any): obj is SizeMethodInterface {\n  return obj && typeof obj.size === 'function';\n}\n\n// Checks if the specified callbackFn is a ToValueInterface.\n// tslint:disable-next-line:no-any\nexport function isToValueInterface(obj: any): obj is ToValueInterface {\n  return obj && typeof obj.getValue === 'function';\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"acbeb6f7920ca1ab3878db9bb004ba21192b5d8e"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_11tlp9x0y1=function(){return actualCoverage;};}return actualCoverage;}cov_11tlp9x0y1();cov_11tlp9x0y1().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_11tlp9x0y1().s[1]++;exports.isToValueInterface=exports.isSizeMethodInterface=exports.isSizeAttributeInterface=exports.isLengthMethodInterface=exports.isLengthAttributeInterface=exports.initializeDefaultLabels=exports.hashLabelValues=void 0;const COMMA_SEPARATOR=(cov_11tlp9x0y1().s[2]++,',');const UNSET_LABEL_VALUE=(cov_11tlp9x0y1().s[3]++,{value:null});/**
 * Returns a string(comma separated) from the list of label values.
 *
 * @param labelValues The list of the label values.
 * @returns The hashed label values string.
 */function hashLabelValues(labelValues){cov_11tlp9x0y1().f[0]++;cov_11tlp9x0y1().s[4]++;return labelValues.map(lv=>{cov_11tlp9x0y1().f[1]++;cov_11tlp9x0y1().s[5]++;return lv.value;}).sort().join(COMMA_SEPARATOR);}cov_11tlp9x0y1().s[6]++;exports.hashLabelValues=hashLabelValues;/**
 * Returns default label values.
 *
 * @param count The number of label values.
 * @returns The list of the label values.
 */function initializeDefaultLabels(count){cov_11tlp9x0y1().f[2]++;cov_11tlp9x0y1().s[7]++;return new Array(count).fill(UNSET_LABEL_VALUE);}cov_11tlp9x0y1().s[8]++;exports.initializeDefaultLabels=initializeDefaultLabels;// TODO(mayurkale): Consider to use unknown type instead of any for below
// functions, unknown type is available since TypeScript 3.0
// Fact: unknown acts like a type-safe version of any by requiring us to
// perform some type of checking before we can use the value of the unknown
// element or any of its properties.
// Checks if the specified collection is a LengthAttributeInterface.
function isLengthAttributeInterface(// tslint:disable-next-line:no-any
obj){cov_11tlp9x0y1().f[3]++;cov_11tlp9x0y1().s[9]++;return(cov_11tlp9x0y1().b[0][0]++,obj)&&(cov_11tlp9x0y1().b[0][1]++,typeof obj.length==='number');}cov_11tlp9x0y1().s[10]++;exports.isLengthAttributeInterface=isLengthAttributeInterface;// Checks if the specified collection is a LengthMethodInterface.
function isLengthMethodInterface(// tslint:disable-next-line:no-any
obj){cov_11tlp9x0y1().f[4]++;cov_11tlp9x0y1().s[11]++;return(cov_11tlp9x0y1().b[1][0]++,obj)&&(cov_11tlp9x0y1().b[1][1]++,typeof obj.length==='function');}cov_11tlp9x0y1().s[12]++;exports.isLengthMethodInterface=isLengthMethodInterface;// Checks if the specified collection is a SizeAttributeInterface.
function isSizeAttributeInterface(// tslint:disable-next-line:no-any
obj){cov_11tlp9x0y1().f[5]++;cov_11tlp9x0y1().s[13]++;return(cov_11tlp9x0y1().b[2][0]++,obj)&&(cov_11tlp9x0y1().b[2][1]++,typeof obj.size==='number');}cov_11tlp9x0y1().s[14]++;exports.isSizeAttributeInterface=isSizeAttributeInterface;// Checks if the specified collection is a SizeMethodInterface.
// tslint:disable-next-line:no-any
function isSizeMethodInterface(obj){cov_11tlp9x0y1().f[6]++;cov_11tlp9x0y1().s[15]++;return(cov_11tlp9x0y1().b[3][0]++,obj)&&(cov_11tlp9x0y1().b[3][1]++,typeof obj.size==='function');}cov_11tlp9x0y1().s[16]++;exports.isSizeMethodInterface=isSizeMethodInterface;// Checks if the specified callbackFn is a ToValueInterface.
// tslint:disable-next-line:no-any
function isToValueInterface(obj){cov_11tlp9x0y1().f[7]++;cov_11tlp9x0y1().s[17]++;return(cov_11tlp9x0y1().b[4][0]++,obj)&&(cov_11tlp9x0y1().b[4][1]++,typeof obj.getValue==='function');}cov_11tlp9x0y1().s[18]++;exports.isToValueInterface=isToValueInterface;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3VzZXJtYWl0aGEvdHJhZGVtYXN0ZXIvbGlicy9saWItZXh0ZXJuYWwtb3BlbmNlbnN1cy1ub2RlL3NyYy9tZXRyaWNzL3V0aWxzLnRzIiwic291cmNlcyI6WyIvVXNlcnMvdXNlcm1haXRoYS90cmFkZW1hc3Rlci9saWJzL2xpYi1leHRlcm5hbC1vcGVuY2Vuc3VzLW5vZGUvc3JjL21ldHJpY3MvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7OztHQWNHOzs7QUFXSCxNQUFNLGVBQWUsR0FBRyxHQUFHLENBQUM7QUFDNUIsTUFBTSxpQkFBaUIsR0FBZTtJQUNwQyxLQUFLLEVBQUUsSUFBSTtDQUNaLENBQUM7QUFFRjs7Ozs7R0FLRztBQUNILFNBQWdCLGVBQWUsQ0FBQyxXQUF5QjtJQUN2RCxPQUFPLFdBQVc7U0FDZixHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDO1NBQ25CLElBQUksRUFBRTtTQUNOLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUMzQixDQUFDO0FBTEQsMENBS0M7QUFFRDs7Ozs7R0FLRztBQUNILFNBQWdCLHVCQUF1QixDQUFDLEtBQWE7SUFDbkQsT0FBTyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUNsRCxDQUFDO0FBRkQsMERBRUM7QUFFRCx5RUFBeUU7QUFDekUsNERBQTREO0FBQzVELHdFQUF3RTtBQUN4RSwyRUFBMkU7QUFDM0Usb0NBQW9DO0FBRXBDLG9FQUFvRTtBQUNwRSxTQUFnQiwwQkFBMEI7QUFDeEMsa0NBQWtDO0FBQ2xDLEdBQVE7SUFFUixPQUFPLEdBQUcsSUFBSSxPQUFPLEdBQUcsQ0FBQyxNQUFNLEtBQUssUUFBUSxDQUFDO0FBQy9DLENBQUM7QUFMRCxnRUFLQztBQUVELGlFQUFpRTtBQUNqRSxTQUFnQix1QkFBdUI7QUFDckMsa0NBQWtDO0FBQ2xDLEdBQVE7SUFFUixPQUFPLEdBQUcsSUFBSSxPQUFPLEdBQUcsQ0FBQyxNQUFNLEtBQUssVUFBVSxDQUFDO0FBQ2pELENBQUM7QUFMRCwwREFLQztBQUVELGtFQUFrRTtBQUNsRSxTQUFnQix3QkFBd0I7QUFDdEMsa0NBQWtDO0FBQ2xDLEdBQVE7SUFFUixPQUFPLEdBQUcsSUFBSSxPQUFPLEdBQUcsQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUFDO0FBQzdDLENBQUM7QUFMRCw0REFLQztBQUVELCtEQUErRDtBQUMvRCxrQ0FBa0M7QUFDbEMsU0FBZ0IscUJBQXFCLENBQUMsR0FBUTtJQUM1QyxPQUFPLEdBQUcsSUFBSSxPQUFPLEdBQUcsQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDO0FBQy9DLENBQUM7QUFGRCxzREFFQztBQUVELDREQUE0RDtBQUM1RCxrQ0FBa0M7QUFDbEMsU0FBZ0Isa0JBQWtCLENBQUMsR0FBUTtJQUN6QyxPQUFPLEdBQUcsSUFBSSxPQUFPLEdBQUcsQ0FBQyxRQUFRLEtBQUssVUFBVSxDQUFDO0FBQ25ELENBQUM7QUFGRCxnREFFQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTgsIE9wZW5DZW5zdXMgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgTGFiZWxWYWx1ZSB9IGZyb20gJy4vZXhwb3J0L3R5cGVzJztcbmltcG9ydCB7XG4gIExlbmd0aEF0dHJpYnV0ZUludGVyZmFjZSxcbiAgTGVuZ3RoTWV0aG9kSW50ZXJmYWNlLFxuICBTaXplQXR0cmlidXRlSW50ZXJmYWNlLFxuICBTaXplTWV0aG9kSW50ZXJmYWNlLFxuICBUb1ZhbHVlSW50ZXJmYWNlLFxufSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgQ09NTUFfU0VQQVJBVE9SID0gJywnO1xuY29uc3QgVU5TRVRfTEFCRUxfVkFMVUU6IExhYmVsVmFsdWUgPSB7XG4gIHZhbHVlOiBudWxsLFxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgc3RyaW5nKGNvbW1hIHNlcGFyYXRlZCkgZnJvbSB0aGUgbGlzdCBvZiBsYWJlbCB2YWx1ZXMuXG4gKlxuICogQHBhcmFtIGxhYmVsVmFsdWVzIFRoZSBsaXN0IG9mIHRoZSBsYWJlbCB2YWx1ZXMuXG4gKiBAcmV0dXJucyBUaGUgaGFzaGVkIGxhYmVsIHZhbHVlcyBzdHJpbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoYXNoTGFiZWxWYWx1ZXMobGFiZWxWYWx1ZXM6IExhYmVsVmFsdWVbXSk6IHN0cmluZyB7XG4gIHJldHVybiBsYWJlbFZhbHVlc1xuICAgIC5tYXAobHYgPT4gbHYudmFsdWUpXG4gICAgLnNvcnQoKVxuICAgIC5qb2luKENPTU1BX1NFUEFSQVRPUik7XG59XG5cbi8qKlxuICogUmV0dXJucyBkZWZhdWx0IGxhYmVsIHZhbHVlcy5cbiAqXG4gKiBAcGFyYW0gY291bnQgVGhlIG51bWJlciBvZiBsYWJlbCB2YWx1ZXMuXG4gKiBAcmV0dXJucyBUaGUgbGlzdCBvZiB0aGUgbGFiZWwgdmFsdWVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZURlZmF1bHRMYWJlbHMoY291bnQ6IG51bWJlcik6IExhYmVsVmFsdWVbXSB7XG4gIHJldHVybiBuZXcgQXJyYXkoY291bnQpLmZpbGwoVU5TRVRfTEFCRUxfVkFMVUUpO1xufVxuXG4vLyBUT0RPKG1heXVya2FsZSk6IENvbnNpZGVyIHRvIHVzZSB1bmtub3duIHR5cGUgaW5zdGVhZCBvZiBhbnkgZm9yIGJlbG93XG4vLyBmdW5jdGlvbnMsIHVua25vd24gdHlwZSBpcyBhdmFpbGFibGUgc2luY2UgVHlwZVNjcmlwdCAzLjBcbi8vIEZhY3Q6IHVua25vd24gYWN0cyBsaWtlIGEgdHlwZS1zYWZlIHZlcnNpb24gb2YgYW55IGJ5IHJlcXVpcmluZyB1cyB0b1xuLy8gcGVyZm9ybSBzb21lIHR5cGUgb2YgY2hlY2tpbmcgYmVmb3JlIHdlIGNhbiB1c2UgdGhlIHZhbHVlIG9mIHRoZSB1bmtub3duXG4vLyBlbGVtZW50IG9yIGFueSBvZiBpdHMgcHJvcGVydGllcy5cblxuLy8gQ2hlY2tzIGlmIHRoZSBzcGVjaWZpZWQgY29sbGVjdGlvbiBpcyBhIExlbmd0aEF0dHJpYnV0ZUludGVyZmFjZS5cbmV4cG9ydCBmdW5jdGlvbiBpc0xlbmd0aEF0dHJpYnV0ZUludGVyZmFjZShcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICBvYmo6IGFueVxuKTogb2JqIGlzIExlbmd0aEF0dHJpYnV0ZUludGVyZmFjZSB7XG4gIHJldHVybiBvYmogJiYgdHlwZW9mIG9iai5sZW5ndGggPT09ICdudW1iZXInO1xufVxuXG4vLyBDaGVja3MgaWYgdGhlIHNwZWNpZmllZCBjb2xsZWN0aW9uIGlzIGEgTGVuZ3RoTWV0aG9kSW50ZXJmYWNlLlxuZXhwb3J0IGZ1bmN0aW9uIGlzTGVuZ3RoTWV0aG9kSW50ZXJmYWNlKFxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG4gIG9iajogYW55XG4pOiBvYmogaXMgTGVuZ3RoTWV0aG9kSW50ZXJmYWNlIHtcbiAgcmV0dXJuIG9iaiAmJiB0eXBlb2Ygb2JqLmxlbmd0aCA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuLy8gQ2hlY2tzIGlmIHRoZSBzcGVjaWZpZWQgY29sbGVjdGlvbiBpcyBhIFNpemVBdHRyaWJ1dGVJbnRlcmZhY2UuXG5leHBvcnQgZnVuY3Rpb24gaXNTaXplQXR0cmlidXRlSW50ZXJmYWNlKFxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG4gIG9iajogYW55XG4pOiBvYmogaXMgU2l6ZUF0dHJpYnV0ZUludGVyZmFjZSB7XG4gIHJldHVybiBvYmogJiYgdHlwZW9mIG9iai5zaXplID09PSAnbnVtYmVyJztcbn1cblxuLy8gQ2hlY2tzIGlmIHRoZSBzcGVjaWZpZWQgY29sbGVjdGlvbiBpcyBhIFNpemVNZXRob2RJbnRlcmZhY2UuXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG5leHBvcnQgZnVuY3Rpb24gaXNTaXplTWV0aG9kSW50ZXJmYWNlKG9iajogYW55KTogb2JqIGlzIFNpemVNZXRob2RJbnRlcmZhY2Uge1xuICByZXR1cm4gb2JqICYmIHR5cGVvZiBvYmouc2l6ZSA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuLy8gQ2hlY2tzIGlmIHRoZSBzcGVjaWZpZWQgY2FsbGJhY2tGbiBpcyBhIFRvVmFsdWVJbnRlcmZhY2UuXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG5leHBvcnQgZnVuY3Rpb24gaXNUb1ZhbHVlSW50ZXJmYWNlKG9iajogYW55KTogb2JqIGlzIFRvVmFsdWVJbnRlcmZhY2Uge1xuICByZXR1cm4gb2JqICYmIHR5cGVvZiBvYmouZ2V0VmFsdWUgPT09ICdmdW5jdGlvbic7XG59XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf-8;base64,