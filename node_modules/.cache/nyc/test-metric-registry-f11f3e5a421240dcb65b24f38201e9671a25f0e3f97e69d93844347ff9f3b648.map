{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-metric-registry.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-metric-registry.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,iCAAiC;AACjC,uDAAoD;AACpD,uDAKqC;AACrC,oEAAgE;AAChE,8CAAiD;AAEjD,MAAM,WAAW,GAAG,aAAa,CAAC;AAClC,MAAM,kBAAkB,GAAG,oBAAoB,CAAC;AAChD,MAAM,IAAI,GAAG,mBAAW,CAAC,IAAI,CAAC;AAC9B,MAAM,UAAU,GAAe,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,CAAC,CAAC;AACtE,MAAM,gBAAgB,GAAiB,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;AAC1D,MAAM,gBAAgB,GAAiB,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;AAE1D,MAAM,cAAc,GAAG;IACrB,WAAW,EAAE,kBAAkB;IAC/B,IAAI,EAAE,IAAI;IACV,SAAS,EAAE,UAAU;CACtB,CAAC;AAEF,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;IAC7B,IAAI,QAAwB,CAAC;IAC7B,MAAM,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC;IACpC,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC;IAC3B,MAAM,UAAU,GAAc,EAAE,OAAO,EAAE,UAAU,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC;IAElE,UAAU,CAAC,GAAG,EAAE;QACd,QAAQ,GAAG,IAAI,gCAAc,EAAE,CAAC;QAEhC,mJAAmJ;QACnJ,OAAO,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAClC,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,aAAa,CAAC;QAC/B,sEAAsE;QACtE,qBAAS,CAAC,kBAAkB,EAAE,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,OAAO,CAAC,MAAM,GAAG,YAAY,CAAC;QAC9B,IAAI,CAAC,GAAG,GAAG,SAAS,CAAC;QACrB,iEAAiE;QACjE,qBAAS,CAAC,wBAAwB,EAAE,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAChC,MAAM,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;QACvE,MAAM,UAAU,GAAG,UAAU,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,CAAC;QACtE,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAEpB,MAAM,OAAO,GAAG,QAAQ,CAAC,iBAAiB,EAAE,CAAC,UAAU,EAAE,CAAC;QAC1D,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACtC,MAAM,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC,GAAG,OAAO,CAAC;QAC7C,MAAM,CAAC,eAAe,CAAC,UAAU,EAAE;YACjC,IAAI,EAAE,WAAW;YACjB,WAAW,EAAE,kBAAkB;YAC/B,SAAS,EAAE,UAAU;YACrB,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,4BAAoB,CAAC,WAAW;SACvC,CAAC,CAAC;QACH,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,EAAE,MAAM,EAAE,CAAC,GAAG,UAAU,CAAC;QAChC,MAAM,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC;QACvB,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACrC,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,SAAS,EAAE;YACtC,OAAO,EAAE,UAAU,CAAC,OAAO;YAC3B,KAAK,EAAE,UAAU,CAAC,KAAK;SACxB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;QAChD,MAAM,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;QACvD,MAAM,UAAU,GAAG,UAAU,CAAC,oBAAoB,EAAE,CAAC;QACrD,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAEpB,MAAM,OAAO,GAAG,QAAQ,CAAC,iBAAiB,EAAE,CAAC,UAAU,EAAE,CAAC;QAC1D,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACtC,MAAM,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC,GAAG,OAAO,CAAC;QAC7C,MAAM,CAAC,eAAe,CAAC,UAAU,EAAE;YACjC,IAAI,EAAE,WAAW;YACjB,WAAW,EAAE,EAAE;YACf,SAAS,EAAE,EAAE;YACb,IAAI,EAAE,GAAG;YACT,IAAI,EAAE,4BAAoB,CAAC,WAAW;SACvC,CAAC,CAAC;QACH,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,EAAE,MAAM,EAAE,CAAC,GAAG,UAAU,CAAC;QAChC,MAAM,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC;QACvB,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACrC,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,SAAS,EAAE;YACtC,OAAO,EAAE,UAAU,CAAC,OAAO;YAC3B,KAAK,EAAE,UAAU,CAAC,KAAK;SACxB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+EAA+E,EAAE,GAAG,EAAE;QACvF,MAAM,cAAc,GAAG,IAAI,GAAG,EAAE,CAAC;QACjC,cAAc,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;QACnD,MAAM,SAAS,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,WAAW,EAAE,MAAM,EAAE,CAAC,CAAC;QACvD,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE;YACjB,QAAQ,CAAC,aAAa,CAAC,WAAW,EAAE,EAAE,cAAc,EAAE,SAAS,EAAE,CAAC,CAAC;QACrE,CAAC,EAAE,0HAA0H,CAAC,CAAC;IACjI,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC9B,IAAI,QAAwB,CAAC;IAC7B,MAAM,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC;IACpC,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC;IAC3B,MAAM,UAAU,GAAc,EAAE,OAAO,EAAE,UAAU,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC;IAElE,UAAU,CAAC,GAAG,EAAE;QACd,QAAQ,GAAG,IAAI,gCAAc,EAAE,CAAC;QAEhC,mJAAmJ;QACnJ,OAAO,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAClC,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,aAAa,CAAC;QAC/B,sEAAsE;QACtE,qBAAS,CAAC,kBAAkB,EAAE,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,OAAO,CAAC,MAAM,GAAG,YAAY,CAAC;QAC9B,IAAI,CAAC,GAAG,GAAG,SAAS,CAAC;QACrB,iEAAiE;QACjE,qBAAS,CAAC,wBAAwB,EAAE,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAChC,MAAM,WAAW,GAAG,QAAQ,CAAC,cAAc,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;QACzE,MAAM,UAAU,GAAG,WAAW,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,CAAC;QACvE,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAEpB,MAAM,WAAW,GAAG,WAAW,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,CAAC;QACxE,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAErB,MAAM,OAAO,GAAG,QAAQ,CAAC,iBAAiB,EAAE,CAAC,UAAU,EAAE,CAAC;QAC1D,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACtC,MAAM,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC,GAAG,OAAO,CAAC;QAC7C,MAAM,CAAC,eAAe,CAAC,UAAU,EAAE;YACjC,IAAI,EAAE,WAAW;YACjB,WAAW,EAAE,kBAAkB;YAC/B,SAAS,EAAE,UAAU;YACrB,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,4BAAoB,CAAC,YAAY;SACxC,CAAC,CAAC;QACH,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,EAAE,MAAM,EAAE,CAAC,GAAG,UAAU,CAAC;QAChC,MAAM,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC;QACvB,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACrC,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,SAAS,EAAE;YACtC,OAAO,EAAE,UAAU,CAAC,OAAO;YAC3B,KAAK,EAAE,UAAU,CAAC,KAAK;SACxB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qDAAqD,EAAE,GAAG,EAAE;QAC7D,QAAQ,CAAC,cAAc,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;QACrD,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE;YACjB,QAAQ,CAAC,cAAc,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;QACvD,CAAC,EAAE,0EAA0E,CAAC,CAAC;IACjF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kEAAkE,EAAE,GAAG,EAAE;QAC1E,IAAI,cAAc,GAAG,IAAI,GAAG,EAAE,CAAC;QAC/B,cAAc,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,IAAI,CAAC,CAAC;QACxC,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE;YACjB,QAAQ,CAAC,cAAc,CAAC,WAAW,EAAE,EAAE,cAAc,EAAE,CAAC,CAAC;QAC3D,CAAC,EAAE,uDAAuD,CAAC,CAAC;QAE5D,cAAc,GAAG,IAAI,GAAG,EAAE,CAAC;QAC3B,cAAc,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC/B,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE;YACjB,QAAQ,CAAC,cAAc,CAAC,WAAW,EAAE,EAAE,cAAc,EAAE,CAAC,CAAC;QAC3D,CAAC,EAAE,uDAAuD,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;QAChD,MAAM,WAAW,GAAG,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;QACzD,MAAM,UAAU,GAAG,WAAW,CAAC,oBAAoB,EAAE,CAAC;QACtD,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAEpB,MAAM,OAAO,GAAG,QAAQ,CAAC,iBAAiB,EAAE,CAAC,UAAU,EAAE,CAAC;QAC1D,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACtC,MAAM,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC,GAAG,OAAO,CAAC;QAC7C,MAAM,CAAC,eAAe,CAAC,UAAU,EAAE;YACjC,IAAI,EAAE,WAAW;YACjB,WAAW,EAAE,EAAE;YACf,SAAS,EAAE,EAAE;YACb,IAAI,EAAE,GAAG;YACT,IAAI,EAAE,4BAAoB,CAAC,YAAY;SACxC,CAAC,CAAC;QACH,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,EAAE,MAAM,EAAE,CAAC,GAAG,UAAU,CAAC;QAChC,MAAM,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC;QACvB,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACrC,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,SAAS,EAAE;YACtC,OAAO,EAAE,UAAU,CAAC,OAAO;YAC3B,KAAK,EAAE,UAAU,CAAC,KAAK;SACxB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;IACpC,IAAI,QAAwB,CAAC;IAC7B,MAAM,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC;IACpC,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC;IAC3B,MAAM,UAAU,GAAc,EAAE,OAAO,EAAE,UAAU,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC;IAElE,UAAU,CAAC,GAAG,EAAE;QACd,QAAQ,GAAG,IAAI,gCAAc,EAAE,CAAC;QAEhC,mJAAmJ;QACnJ,OAAO,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAClC,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,aAAa,CAAC;QAC/B,sEAAsE;QACtE,qBAAS,CAAC,kBAAkB,EAAE,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,OAAO,CAAC,MAAM,GAAG,YAAY,CAAC;QAC9B,IAAI,CAAC,GAAG,GAAG,SAAS,CAAC;QACrB,iEAAiE;QACjE,qBAAS,CAAC,wBAAwB,EAAE,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAChC,MAAM,GAAG,GAAG,IAAI,GAAG,EAAE,CAAC;QACtB,GAAG,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QACxB,MAAM,iBAAiB,GAAG,QAAQ,CAAC,oBAAoB,CACrD,WAAW,EACX,cAAc,CACf,CAAC;QACF,iBAAiB,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC;QAC1D,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAE1B,MAAM,OAAO,GAAG,QAAQ,CAAC,iBAAiB,EAAE,CAAC,UAAU,EAAE,CAAC;QAC1D,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACtC,MAAM,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC,GAAG,OAAO,CAAC;QAC7C,MAAM,CAAC,eAAe,CAAC,UAAU,EAAE;YACjC,IAAI,EAAE,WAAW;YACjB,WAAW,EAAE,kBAAkB;YAC/B,SAAS,EAAE,UAAU;YACrB,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,4BAAoB,CAAC,WAAW;SACvC,CAAC,CAAC;QACH,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,EAAE,MAAM,EAAE,CAAC,GAAG,UAAU,CAAC;QAChC,MAAM,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC;QACvB,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QACnC,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,SAAS,EAAE;YACtC,OAAO,EAAE,UAAU,CAAC,OAAO;YAC3B,KAAK,EAAE,UAAU,CAAC,KAAK;SACxB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qDAAqD,EAAE,GAAG,EAAE;QAC7D,QAAQ,CAAC,oBAAoB,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;QAC3D,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE;YACjB,QAAQ,CAAC,oBAAoB,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;QAC7D,CAAC,EAAE,0EAA0E,CAAC,CAAC;IACjF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+EAA+E,EAAE,GAAG,EAAE;QACvF,MAAM,cAAc,GAAG,IAAI,GAAG,EAAE,CAAC;QACjC,cAAc,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;QACnD,MAAM,SAAS,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,WAAW,EAAE,MAAM,EAAE,CAAC,CAAC;QACvD,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE;YACjB,QAAQ,CAAC,oBAAoB,CAAC,WAAW,EAAE,EAAE,cAAc,EAAE,SAAS,EAAE,CAAC,CAAC;QAC5E,CAAC,EAAE,0HAA0H,CAAC,CAAC;IACjI,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kEAAkE,EAAE,GAAG,EAAE;QAC1E,MAAM,cAAc,GAAG,IAAI,GAAG,EAAE,CAAC;QACjC,cAAc,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,IAAI,CAAC,CAAC;QACxC,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE;YACjB,QAAQ,CAAC,oBAAoB,CAAC,WAAW,EAAE,EAAE,cAAc,EAAE,CAAC,CAAC;QACjE,CAAC,EAAE,uDAAuD,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;QAChD,MAAM,GAAG,GAAG,IAAI,GAAG,EAAE,CAAC;QACtB,GAAG,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QACxB,MAAM,iBAAiB,GAAG,QAAQ,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;QACrE,iBAAiB,CAAC,gBAAgB,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;QAC5C,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAE1B,MAAM,OAAO,GAAG,QAAQ,CAAC,iBAAiB,EAAE,CAAC,UAAU,EAAE,CAAC;QAC1D,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACtC,MAAM,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC,GAAG,OAAO,CAAC;QAC7C,MAAM,CAAC,eAAe,CAAC,UAAU,EAAE;YACjC,IAAI,EAAE,WAAW;YACjB,WAAW,EAAE,EAAE;YACf,SAAS,EAAE,EAAE;YACb,IAAI,EAAE,GAAG;YACT,IAAI,EAAE,4BAAoB,CAAC,WAAW;SACvC,CAAC,CAAC;QACH,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,EAAE,MAAM,EAAE,CAAC,GAAG,UAAU,CAAC;QAChC,MAAM,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC;QACvB,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QACnC,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,SAAS,EAAE;YACtC,OAAO,EAAE,UAAU,CAAC,OAAO;YAC3B,KAAK,EAAE,UAAU,CAAC,KAAK;SACxB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;IACrC,IAAI,QAAwB,CAAC;IAC7B,MAAM,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC;IACpC,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC;IAC3B,MAAM,UAAU,GAAc,EAAE,OAAO,EAAE,UAAU,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC;IAElE,UAAU,CAAC,GAAG,EAAE;QACd,QAAQ,GAAG,IAAI,gCAAc,EAAE,CAAC;QAEhC,mJAAmJ;QACnJ,OAAO,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAClC,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,aAAa,CAAC;QAC/B,sEAAsE;QACtE,qBAAS,CAAC,kBAAkB,EAAE,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,OAAO,CAAC,MAAM,GAAG,YAAY,CAAC;QAC9B,IAAI,CAAC,GAAG,GAAG,SAAS,CAAC;QACrB,iEAAiE;QACjE,qBAAS,CAAC,wBAAwB,EAAE,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAChC,MAAM,YAAY;YAChB,QAAQ;gBACN,OAAO,GAAG,CAAC;YACb,CAAC;SACF;QACD,MAAM,kBAAkB,GAAG,QAAQ,CAAC,qBAAqB,CACvD,WAAW,EACX,cAAc,CACf,CAAC;QACF,kBAAkB,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,IAAI,YAAY,EAAE,CAAC,CAAC;QAE1E,MAAM,OAAO,GAAG,QAAQ,CAAC,iBAAiB,EAAE,CAAC,UAAU,EAAE,CAAC;QAC1D,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACtC,MAAM,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC,GAAG,OAAO,CAAC;QAC7C,MAAM,CAAC,eAAe,CAAC,UAAU,EAAE;YACjC,IAAI,EAAE,WAAW;YACjB,WAAW,EAAE,kBAAkB;YAC/B,SAAS,EAAE,UAAU;YACrB,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,4BAAoB,CAAC,YAAY;SACxC,CAAC,CAAC;QACH,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,EAAE,MAAM,EAAE,CAAC,GAAG,UAAU,CAAC;QAChC,MAAM,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC;QACvB,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACrC,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,SAAS,EAAE;YACtC,OAAO,EAAE,UAAU,CAAC,OAAO;YAC3B,KAAK,EAAE,UAAU,CAAC,KAAK;SACxB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qDAAqD,EAAE,GAAG,EAAE;QAC7D,QAAQ,CAAC,qBAAqB,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;QAC5D,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE;YACjB,QAAQ,CAAC,qBAAqB,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;QAC9D,CAAC,EAAE,0EAA0E,CAAC,CAAC;IACjF,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,IAAI,QAAwB,CAAC;IAC7B,MAAM,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC;IACpC,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC;IAC3B,MAAM,UAAU,GAAc,EAAE,OAAO,EAAE,UAAU,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC;IAElE,UAAU,CAAC,GAAG,EAAE;QACd,QAAQ,GAAG,IAAI,gCAAc,EAAE,CAAC;QAEhC,mJAAmJ;QACnJ,OAAO,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAClC,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,aAAa,CAAC;QAC/B,sEAAsE;QACtE,qBAAS,CAAC,kBAAkB,EAAE,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,OAAO,CAAC,MAAM,GAAG,YAAY,CAAC;QAC9B,IAAI,CAAC,GAAG,GAAG,SAAS,CAAC;QACrB,iEAAiE;QACjE,qBAAS,CAAC,wBAAwB,EAAE,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAChC,MAAM,UAAU,GAAG,QAAQ,CAAC,kBAAkB,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;QAC5E,MAAM,UAAU,GAAG,UAAU,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,CAAC;QACtE,UAAU,CAAC,GAAG,EAAE,CAAC;QAEjB,MAAM,OAAO,GAAG,QAAQ,CAAC,iBAAiB,EAAE,CAAC,UAAU,EAAE,CAAC;QAC1D,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACtC,MAAM,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC,GAAG,OAAO,CAAC;QAC7C,MAAM,CAAC,eAAe,CAAC,UAAU,EAAE;YACjC,IAAI,EAAE,WAAW;YACjB,WAAW,EAAE,kBAAkB;YAC/B,SAAS,EAAE,UAAU;YACrB,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,4BAAoB,CAAC,gBAAgB;SAC5C,CAAC,CAAC;QACH,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,EAAE,MAAM,EAAE,CAAC,GAAG,UAAU,CAAC;QAChC,MAAM,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC;QACvB,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QACnC,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,SAAS,EAAE;YACtC,OAAO,EAAE,UAAU,CAAC,OAAO;YAC3B,KAAK,EAAE,UAAU,CAAC,KAAK;SACxB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;QAChD,MAAM,UAAU,GAAG,QAAQ,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;QAC5D,MAAM,UAAU,GAAG,UAAU,CAAC,oBAAoB,EAAE,CAAC;QACrD,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAEpB,MAAM,OAAO,GAAG,QAAQ,CAAC,iBAAiB,EAAE,CAAC,UAAU,EAAE,CAAC;QAC1D,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACtC,MAAM,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC,GAAG,OAAO,CAAC;QAC7C,MAAM,CAAC,eAAe,CAAC,UAAU,EAAE;YACjC,IAAI,EAAE,WAAW;YACjB,WAAW,EAAE,EAAE;YACf,SAAS,EAAE,EAAE;YACb,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,4BAAoB,CAAC,gBAAgB;SAC5C,CAAC,CAAC;QACH,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,EAAE,MAAM,EAAE,CAAC,GAAG,UAAU,CAAC;QAChC,MAAM,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC;QACvB,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACrC,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,SAAS,EAAE;YACtC,OAAO,EAAE,UAAU,CAAC,OAAO;YAC3B,KAAK,EAAE,UAAU,CAAC,KAAK;SACxB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+EAA+E,EAAE,GAAG,EAAE;QACvF,MAAM,cAAc,GAAG,IAAI,GAAG,EAAE,CAAC;QACjC,cAAc,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;QACnD,MAAM,SAAS,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,WAAW,EAAE,MAAM,EAAE,CAAC,CAAC;QACvD,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE;YACjB,QAAQ,CAAC,kBAAkB,CAAC,WAAW,EAAE,EAAE,cAAc,EAAE,SAAS,EAAE,CAAC,CAAC;QAC1E,CAAC,EAAE,0HAA0H,CAAC,CAAC;IACjI,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;IACnC,IAAI,QAAwB,CAAC;IAC7B,MAAM,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC;IACpC,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC;IAC3B,MAAM,UAAU,GAAc,EAAE,OAAO,EAAE,UAAU,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC;IAElE,UAAU,CAAC,GAAG,EAAE;QACd,QAAQ,GAAG,IAAI,gCAAc,EAAE,CAAC;QAEhC,mJAAmJ;QACnJ,OAAO,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAClC,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,aAAa,CAAC;QAC/B,sEAAsE;QACtE,qBAAS,CAAC,kBAAkB,EAAE,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,OAAO,CAAC,MAAM,GAAG,YAAY,CAAC;QAC9B,IAAI,CAAC,GAAG,GAAG,SAAS,CAAC;QACrB,iEAAiE;QACjE,qBAAS,CAAC,wBAAwB,EAAE,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAChC,MAAM,UAAU,GAAG,QAAQ,CAAC,mBAAmB,CAC7C,WAAW,EACX,cAAc,CACf,CAAC;QACF,MAAM,UAAU,GAAG,UAAU,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,CAAC;QACtE,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAEpB,MAAM,OAAO,GAAG,QAAQ,CAAC,iBAAiB,EAAE,CAAC,UAAU,EAAE,CAAC;QAC1D,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACtC,MAAM,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC,GAAG,OAAO,CAAC;QAC7C,MAAM,CAAC,eAAe,CAAC,UAAU,EAAE;YACjC,IAAI,EAAE,WAAW;YACjB,WAAW,EAAE,kBAAkB;YAC/B,SAAS,EAAE,UAAU;YACrB,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,4BAAoB,CAAC,iBAAiB;SAC7C,CAAC,CAAC;QACH,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,EAAE,MAAM,EAAE,CAAC,GAAG,UAAU,CAAC;QAChC,MAAM,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC;QACvB,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACrC,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,SAAS,EAAE;YACtC,OAAO,EAAE,UAAU,CAAC,OAAO;YAC3B,KAAK,EAAE,UAAU,CAAC,KAAK;SACxB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;QAChD,MAAM,UAAU,GAAG,QAAQ,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC;QAC7D,MAAM,UAAU,GAAG,UAAU,CAAC,oBAAoB,EAAE,CAAC;QACrD,UAAU,CAAC,GAAG,EAAE,CAAC;QACjB,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAEvB,MAAM,OAAO,GAAG,QAAQ,CAAC,iBAAiB,EAAE,CAAC,UAAU,EAAE,CAAC;QAC1D,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACtC,MAAM,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC,GAAG,OAAO,CAAC;QAC7C,MAAM,CAAC,eAAe,CAAC,UAAU,EAAE;YACjC,IAAI,EAAE,WAAW;YACjB,WAAW,EAAE,EAAE;YACf,SAAS,EAAE,EAAE;YACb,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,4BAAoB,CAAC,iBAAiB;SAC7C,CAAC,CAAC;QACH,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,EAAE,MAAM,EAAE,CAAC,GAAG,UAAU,CAAC;QAChC,MAAM,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC;QACvB,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QACxC,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,SAAS,EAAE;YACtC,OAAO,EAAE,UAAU,CAAC,OAAO;YAC3B,KAAK,EAAE,UAAU,CAAC,KAAK;SACxB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+EAA+E,EAAE,GAAG,EAAE;QACvF,MAAM,cAAc,GAAG,IAAI,GAAG,EAAE,CAAC;QACjC,cAAc,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;QACnD,MAAM,SAAS,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,WAAW,EAAE,MAAM,EAAE,CAAC,CAAC;QACvD,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE;YACjB,QAAQ,CAAC,mBAAmB,CAAC,WAAW,EAAE,EAAE,cAAc,EAAE,SAAS,EAAE,CAAC,CAAC;QAC3E,CAAC,EAAE,0HAA0H,CAAC,CAAC;IACjI,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;IACzC,IAAI,QAAwB,CAAC;IAC7B,MAAM,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC;IACpC,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC;IAC3B,MAAM,UAAU,GAAc,EAAE,OAAO,EAAE,UAAU,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC;IAElE,UAAU,CAAC,GAAG,EAAE;QACd,QAAQ,GAAG,IAAI,gCAAc,EAAE,CAAC;QAEhC,mJAAmJ;QACnJ,OAAO,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAClC,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,aAAa,CAAC;QAC/B,sEAAsE;QACtE,qBAAS,CAAC,kBAAkB,EAAE,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,OAAO,CAAC,MAAM,GAAG,YAAY,CAAC;QAC9B,IAAI,CAAC,GAAG,GAAG,SAAS,CAAC;QACrB,iEAAiE;QACjE,qBAAS,CAAC,wBAAwB,EAAE,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAChC,MAAM,GAAG,GAAG,IAAI,GAAG,EAAE,CAAC;QACtB,GAAG,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QACxB,MAAM,sBAAsB,GAAG,QAAQ,CAAC,yBAAyB,CAC/D,WAAW,EACX,cAAc,CACf,CAAC;QACF,sBAAsB,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC;QAC/D,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAE1B,MAAM,OAAO,GAAG,QAAQ,CAAC,iBAAiB,EAAE,CAAC,UAAU,EAAE,CAAC;QAC1D,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACtC,MAAM,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC,GAAG,OAAO,CAAC;QAC7C,MAAM,CAAC,eAAe,CAAC,UAAU,EAAE;YACjC,IAAI,EAAE,WAAW;YACjB,WAAW,EAAE,kBAAkB;YAC/B,SAAS,EAAE,UAAU;YACrB,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,4BAAoB,CAAC,gBAAgB;SAC5C,CAAC,CAAC;QACH,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,eAAe,CAAC,UAAU,EAAE;YACjC;gBACE,WAAW,EAAE,gBAAgB;gBAC7B,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC;gBAC7C,cAAc,EAAE,UAAU;aAC3B;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qDAAqD,EAAE,GAAG,EAAE;QAC7D,QAAQ,CAAC,yBAAyB,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;QAChE,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE;YACjB,QAAQ,CAAC,yBAAyB,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;QAClE,CAAC,EAAE,0EAA0E,CAAC,CAAC;IACjF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+EAA+E,EAAE,GAAG,EAAE;QACvF,MAAM,cAAc,GAAG,IAAI,GAAG,EAAE,CAAC;QACjC,cAAc,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;QACnD,MAAM,SAAS,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,WAAW,EAAE,MAAM,EAAE,CAAC,CAAC;QACvD,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE;YACjB,QAAQ,CAAC,yBAAyB,CAAC,WAAW,EAAE;gBAC9C,cAAc;gBACd,SAAS;aACV,CAAC,CAAC;QACL,CAAC,EAAE,0HAA0H,CAAC,CAAC;IACjI,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kEAAkE,EAAE,GAAG,EAAE;QAC1E,MAAM,cAAc,GAAG,IAAI,GAAG,EAAE,CAAC;QACjC,cAAc,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,IAAI,CAAC,CAAC;QACxC,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE;YACjB,QAAQ,CAAC,yBAAyB,CAAC,WAAW,EAAE,EAAE,cAAc,EAAE,CAAC,CAAC;QACtE,CAAC,EAAE,uDAAuD,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;QAChD,MAAM,GAAG,GAAG,IAAI,GAAG,EAAE,CAAC;QACtB,GAAG,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QACxB,MAAM,sBAAsB,GAAG,QAAQ,CAAC,yBAAyB,CAC/D,WAAW,CACZ,CAAC;QACF,sBAAsB,CAAC,gBAAgB,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;QACjD,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAE1B,MAAM,OAAO,GAAG,QAAQ,CAAC,iBAAiB,EAAE,CAAC,UAAU,EAAE,CAAC;QAC1D,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACtC,MAAM,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC,GAAG,OAAO,CAAC;QAC7C,MAAM,CAAC,eAAe,CAAC,UAAU,EAAE;YACjC,IAAI,EAAE,WAAW;YACjB,WAAW,EAAE,EAAE;YACf,SAAS,EAAE,EAAE;YACb,IAAI,EAAE,GAAG;YACT,IAAI,EAAE,4BAAoB,CAAC,gBAAgB;SAC5C,CAAC,CAAC;QACH,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,eAAe,CAAC,UAAU,EAAE;YACjC;gBACE,WAAW,EAAE,EAAE;gBACf,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC;gBAC7C,cAAc,EAAE,UAAU;aAC3B;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,4BAA4B,EAAE,GAAG,EAAE;IAC1C,IAAI,QAAwB,CAAC;IAC7B,MAAM,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC;IACpC,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC;IAC3B,MAAM,UAAU,GAAc,EAAE,OAAO,EAAE,UAAU,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC;IAElE,UAAU,CAAC,GAAG,EAAE;QACd,QAAQ,GAAG,IAAI,gCAAc,EAAE,CAAC;QAEhC,mJAAmJ;QACnJ,OAAO,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAClC,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,aAAa,CAAC;QAC/B,sEAAsE;QACtE,qBAAS,CAAC,kBAAkB,EAAE,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,OAAO,CAAC,MAAM,GAAG,YAAY,CAAC;QAC9B,IAAI,CAAC,GAAG,GAAG,SAAS,CAAC;QACrB,iEAAiE;QACjE,qBAAS,CAAC,wBAAwB,EAAE,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAChC,MAAM,YAAY;YAChB,IAAI,KAAK;gBACP,OAAO,IAAI,CAAC;YACd,CAAC;SACF;QACD,MAAM,KAAK,GAAG,IAAI,YAAY,EAAE,CAAC;QACjC,MAAM,uBAAuB,GAAG,QAAQ,CAAC,0BAA0B,CACjE,WAAW,EACX,cAAc,CACf,CAAC;QACF,uBAAuB,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,GAAG,EAAE;YAC9D,OAAO,KAAK,CAAC,KAAK,CAAC;QACrB,CAAC,CAAC,CAAC;QAEH,MAAM,OAAO,GAAG,QAAQ,CAAC,iBAAiB,EAAE,CAAC,UAAU,EAAE,CAAC;QAC1D,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACtC,MAAM,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC,GAAG,OAAO,CAAC;QAC7C,MAAM,CAAC,eAAe,CAAC,UAAU,EAAE;YACjC,IAAI,EAAE,WAAW;YACjB,WAAW,EAAE,kBAAkB;YAC/B,SAAS,EAAE,UAAU;YACrB,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,4BAAoB,CAAC,iBAAiB;SAC7C,CAAC,CAAC;QACH,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,eAAe,CAAC,UAAU,EAAE;YACjC;gBACE,WAAW,EAAE,gBAAgB;gBAC7B,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC;gBAChD,cAAc,EAAE,UAAU;aAC3B;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qDAAqD,EAAE,GAAG,EAAE;QAC7D,QAAQ,CAAC,0BAA0B,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;QACjE,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE;YACjB,QAAQ,CAAC,0BAA0B,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;QACnE,CAAC,EAAE,0EAA0E,CAAC,CAAC;IACjF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+EAA+E,EAAE,GAAG,EAAE;QACvF,MAAM,cAAc,GAAG,IAAI,GAAG,EAAE,CAAC;QACjC,cAAc,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;QACnD,MAAM,SAAS,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,WAAW,EAAE,MAAM,EAAE,CAAC,CAAC;QACvD,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE;YACjB,QAAQ,CAAC,0BAA0B,CAAC,WAAW,EAAE;gBAC/C,cAAc;gBACd,SAAS;aACV,CAAC,CAAC;QACL,CAAC,EAAE,0HAA0H,CAAC,CAAC;IACjI,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kEAAkE,EAAE,GAAG,EAAE;QAC1E,MAAM,cAAc,GAAG,IAAI,GAAG,EAAE,CAAC;QACjC,cAAc,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,IAAI,CAAC,CAAC;QACxC,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE;YACjB,QAAQ,CAAC,0BAA0B,CAAC,WAAW,EAAE,EAAE,cAAc,EAAE,CAAC,CAAC;QACvE,CAAC,EAAE,uDAAuD,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;QAChD,MAAM,UAAU;YAAhB;gBACE,YAAO,GAAG,IAAI,CAAC;YAOjB,CAAC;YANC,IAAI,KAAK;gBACP,OAAO,IAAI,CAAC,OAAO,CAAC;YACtB,CAAC;YACD,GAAG;gBACD,IAAI,CAAC,OAAO,EAAE,CAAC;YACjB,CAAC;SACF;QACD,MAAM,GAAG,GAAG,IAAI,UAAU,EAAE,CAAC;QAC7B,MAAM,uBAAuB,GAAG,QAAQ,CAAC,0BAA0B,CACjE,WAAW,CACZ,CAAC;QACF,uBAAuB,CAAC,gBAAgB,CAAC,EAAE,EAAE,GAAG,EAAE;YAChD,OAAO,GAAG,CAAC,KAAK,CAAC;QACnB,CAAC,CAAC,CAAC;QACH,GAAG,CAAC,GAAG,EAAE,CAAC;QAEV,MAAM,OAAO,GAAG,QAAQ,CAAC,iBAAiB,EAAE,CAAC,UAAU,EAAE,CAAC;QAC1D,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACtC,MAAM,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC,GAAG,OAAO,CAAC;QAC7C,MAAM,CAAC,eAAe,CAAC,UAAU,EAAE;YACjC,IAAI,EAAE,WAAW;YACjB,WAAW,EAAE,EAAE;YACf,SAAS,EAAE,EAAE;YACb,IAAI,EAAE,GAAG;YACT,IAAI,EAAE,4BAAoB,CAAC,iBAAiB;SAC7C,CAAC,CAAC;QACH,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,eAAe,CAAC,UAAU,EAAE;YACjC;gBACE,WAAW,EAAE,EAAE;gBACf,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC;gBAChD,cAAc,EAAE,UAAU;aAC3B;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;IACnC,IAAI,QAAwB,CAAC;IAC7B,MAAM,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC;IACpC,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC;IAC3B,MAAM,UAAU,GAAc,EAAE,OAAO,EAAE,UAAU,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC;IAElE,UAAU,CAAC,GAAG,EAAE;QACd,QAAQ,GAAG,IAAI,gCAAc,EAAE,CAAC;QAEhC,mJAAmJ;QACnJ,OAAO,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAClC,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,aAAa,CAAC;QAC/B,sEAAsE;QACtE,qBAAS,CAAC,kBAAkB,EAAE,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,OAAO,CAAC,MAAM,GAAG,YAAY,CAAC;QAC9B,IAAI,CAAC,GAAG,GAAG,SAAS,CAAC;QACrB,iEAAiE;QACjE,qBAAS,CAAC,wBAAwB,EAAE,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uBAAuB,EAAE,GAAG,EAAE;QAC/B,MAAM,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;QAC1E,UAAU,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAE5D,MAAM,WAAW,GAAG,QAAQ,CAAC,cAAc,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;QAC5E,WAAW,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAE7D,MAAM,GAAG,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACtC,MAAM,iBAAiB,GAAG,QAAQ,CAAC,oBAAoB,CACrD,cAAc,EACd,cAAc,CACf,CAAC;QACF,iBAAiB,CAAC,gBAAgB,CAAC,gBAAgB,EAAE;YACnD,IAAI,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM;SACvB,CAAC,CAAC;QAEH,MAAM,eAAe,GAAG,QAAQ,CAAC,kBAAkB,CACjD,cAAc,EACd,cAAc,CACf,CAAC;QACF,eAAe,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,CAAC,GAAG,EAAE,CAAC;QAE9D,MAAM,OAAO,GAAG,QAAQ,CAAC,iBAAiB,EAAE,CAAC,UAAU,EAAE,CAAC;QAC1D,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACtC,MAAM,CACJ,EAAE,UAAU,EAAE,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE,EACpD,EAAE,UAAU,EAAE,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE,EACpD,EAAE,UAAU,EAAE,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE,EACpD,EAAE,UAAU,EAAE,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE,EACrD,GAAG,OAAO,CAAC;QACZ,MAAM,CAAC,eAAe,CAAC,WAAW,EAAE;YAClC,IAAI,EAAE,cAAc;YACpB,WAAW,EAAE,kBAAkB;YAC/B,SAAS,EAAE,UAAU;YACrB,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,4BAAoB,CAAC,WAAW;SACvC,CAAC,CAAC;QACH,MAAM,CAAC,eAAe,CAAC,WAAW,EAAE;YAClC,IAAI,EAAE,cAAc;YACpB,WAAW,EAAE,kBAAkB;YAC/B,SAAS,EAAE,UAAU;YACrB,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,4BAAoB,CAAC,YAAY;SACxC,CAAC,CAAC;QACH,MAAM,CAAC,eAAe,CAAC,WAAW,EAAE;YAClC,IAAI,EAAE,cAAc;YACpB,WAAW,EAAE,kBAAkB;YAC/B,SAAS,EAAE,UAAU;YACrB,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,4BAAoB,CAAC,WAAW;SACvC,CAAC,CAAC;QACH,MAAM,CAAC,eAAe,CAAC,WAAW,EAAE;YAClC,IAAI,EAAE,cAAc;YACpB,WAAW,EAAE,kBAAkB;YAC/B,SAAS,EAAE,UAAU;YACrB,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,4BAAoB,CAAC,gBAAgB;SAC5C,CAAC,CAAC;QACH,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC1C,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACpD,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACxD,MAAM,CAAC,WAAW,CAChB,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,EAC1C,UAAU,CAAC,OAAO,CACnB,CAAC;QACF,MAAM,CAAC,WAAW,CAChB,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,KAAK,EACxC,UAAU,CAAC,KAAK,CACjB,CAAC;QACF,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC1C,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACpD,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACxD,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC1C,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACpD,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QACtD,MAAM,CAAC,eAAe,CACpB,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,EAClC,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,CACnC,CAAC;QACF,MAAM,CAAC,eAAe,CACpB,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,EAClC,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,CACnC,CAAC;QACF,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC1C,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACpD,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport { TEST_ONLY } from '../src/common/time-util';\nimport {\n  LabelKey,\n  LabelValue,\n  MetricDescriptorType,\n  Timestamp,\n} from '../src/metrics/export/types';\nimport { MetricRegistry } from '../src/metrics/metric-registry';\nimport { MeasureUnit } from '../src/stats/types';\n\nconst METRIC_NAME = 'metric-name';\nconst METRIC_DESCRIPTION = 'metric-description';\nconst UNIT = MeasureUnit.UNIT;\nconst LABEL_KEYS: LabelKey[] = [{ key: 'code', description: 'desc' }];\nconst LABEL_VALUES_200: LabelValue[] = [{ value: '200' }];\nconst LABEL_VALUES_400: LabelValue[] = [{ value: '400' }];\n\nconst METRIC_OPTIONS = {\n  description: METRIC_DESCRIPTION,\n  unit: UNIT,\n  labelKeys: LABEL_KEYS,\n};\n\ndescribe('addInt64Gauge', () => {\n  let registry: MetricRegistry;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n\n  beforeEach(() => {\n    registry = new MetricRegistry();\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  it('should return a metric', () => {\n    const int64Gauge = registry.addInt64Gauge(METRIC_NAME, METRIC_OPTIONS);\n    const pointEntry = int64Gauge.getOrCreateTimeSeries(LABEL_VALUES_200);\n    pointEntry.add(100);\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: METRIC_DESCRIPTION,\n      labelKeys: LABEL_KEYS,\n      unit: UNIT,\n      type: MetricDescriptorType.GAUGE_INT64,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    const [{ points }] = timeseries;\n    const [point] = points;\n    assert.strictEqual(point.value, 100);\n    assert.deepStrictEqual(point.timestamp, {\n      seconds: mockedTime.seconds,\n      nanos: mockedTime.nanos,\n    });\n  });\n\n  it('should return a metric without options', () => {\n    const int64Gauge = registry.addInt64Gauge(METRIC_NAME);\n    const pointEntry = int64Gauge.getDefaultTimeSeries();\n    pointEntry.add(100);\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: '',\n      labelKeys: [],\n      unit: '1',\n      type: MetricDescriptorType.GAUGE_INT64,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    const [{ points }] = timeseries;\n    const [point] = points;\n    assert.strictEqual(point.value, 100);\n    assert.deepStrictEqual(point.timestamp, {\n      seconds: mockedTime.seconds,\n      nanos: mockedTime.nanos,\n    });\n  });\n\n  it('should throw an error when the duplicate keys in labelKeys and constantLabels', () => {\n    const constantLabels = new Map();\n    constantLabels.set({ key: 'k1' }, { value: 'v1' });\n    const labelKeys = [{ key: 'k1', description: 'desc' }];\n    assert.throws(() => {\n      registry.addInt64Gauge(METRIC_NAME, { constantLabels, labelKeys });\n    }, /^Error: The keys from LabelKeys should not be present in constantLabels or LabelKeys should not contains duplicate keys$/);\n  });\n});\n\ndescribe('addDoubleGauge', () => {\n  let registry: MetricRegistry;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n\n  beforeEach(() => {\n    registry = new MetricRegistry();\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  it('should return a metric', () => {\n    const doubleGauge = registry.addDoubleGauge(METRIC_NAME, METRIC_OPTIONS);\n    const pointEntry = doubleGauge.getOrCreateTimeSeries(LABEL_VALUES_200);\n    pointEntry.add(5.5);\n\n    const pointEntry1 = doubleGauge.getOrCreateTimeSeries(LABEL_VALUES_200);\n    pointEntry1.set(0.7);\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: METRIC_DESCRIPTION,\n      labelKeys: LABEL_KEYS,\n      unit: UNIT,\n      type: MetricDescriptorType.GAUGE_DOUBLE,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    const [{ points }] = timeseries;\n    const [point] = points;\n    assert.strictEqual(point.value, 0.7);\n    assert.deepStrictEqual(point.timestamp, {\n      seconds: mockedTime.seconds,\n      nanos: mockedTime.nanos,\n    });\n  });\n\n  it('should throw an error when the register same metric', () => {\n    registry.addDoubleGauge(METRIC_NAME, METRIC_OPTIONS);\n    assert.throws(() => {\n      registry.addDoubleGauge(METRIC_NAME, METRIC_OPTIONS);\n    }, /^Error: A metric with the name metric-name has already been registered.$/);\n  });\n\n  it('should throw an error when the constant labels elements are null', () => {\n    let constantLabels = new Map();\n    constantLabels.set({ key: 'k1' }, null);\n    assert.throws(() => {\n      registry.addDoubleGauge(METRIC_NAME, { constantLabels });\n    }, /^Error: constantLabels elements should not be a NULL$/);\n\n    constantLabels = new Map();\n    constantLabels.set(null, null);\n    assert.throws(() => {\n      registry.addDoubleGauge(METRIC_NAME, { constantLabels });\n    }, /^Error: constantLabels elements should not be a NULL$/);\n  });\n\n  it('should return a metric without options', () => {\n    const doubleGauge = registry.addDoubleGauge(METRIC_NAME);\n    const pointEntry = doubleGauge.getDefaultTimeSeries();\n    pointEntry.add(5.5);\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: '',\n      labelKeys: [],\n      unit: '1',\n      type: MetricDescriptorType.GAUGE_DOUBLE,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    const [{ points }] = timeseries;\n    const [point] = points;\n    assert.strictEqual(point.value, 5.5);\n    assert.deepStrictEqual(point.timestamp, {\n      seconds: mockedTime.seconds,\n      nanos: mockedTime.nanos,\n    });\n  });\n});\n\ndescribe('addDerivedInt64Gauge', () => {\n  let registry: MetricRegistry;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n\n  beforeEach(() => {\n    registry = new MetricRegistry();\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  it('should return a metric', () => {\n    const map = new Map();\n    map.set('key', 'value');\n    const derivedInt64Gauge = registry.addDerivedInt64Gauge(\n      METRIC_NAME,\n      METRIC_OPTIONS\n    );\n    derivedInt64Gauge.createTimeSeries(LABEL_VALUES_200, map);\n    map.set('key1', 'value1');\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: METRIC_DESCRIPTION,\n      labelKeys: LABEL_KEYS,\n      unit: UNIT,\n      type: MetricDescriptorType.GAUGE_INT64,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    const [{ points }] = timeseries;\n    const [point] = points;\n    assert.strictEqual(point.value, 2);\n    assert.deepStrictEqual(point.timestamp, {\n      seconds: mockedTime.seconds,\n      nanos: mockedTime.nanos,\n    });\n  });\n\n  it('should throw an error when the register same metric', () => {\n    registry.addDerivedInt64Gauge(METRIC_NAME, METRIC_OPTIONS);\n    assert.throws(() => {\n      registry.addDerivedInt64Gauge(METRIC_NAME, METRIC_OPTIONS);\n    }, /^Error: A metric with the name metric-name has already been registered.$/);\n  });\n\n  it('should throw an error when the duplicate keys in labelKeys and constantLabels', () => {\n    const constantLabels = new Map();\n    constantLabels.set({ key: 'k1' }, { value: 'v1' });\n    const labelKeys = [{ key: 'k1', description: 'desc' }];\n    assert.throws(() => {\n      registry.addDerivedInt64Gauge(METRIC_NAME, { constantLabels, labelKeys });\n    }, /^Error: The keys from LabelKeys should not be present in constantLabels or LabelKeys should not contains duplicate keys$/);\n  });\n\n  it('should throw an error when the constant labels elements are null', () => {\n    const constantLabels = new Map();\n    constantLabels.set({ key: 'k1' }, null);\n    assert.throws(() => {\n      registry.addDerivedInt64Gauge(METRIC_NAME, { constantLabels });\n    }, /^Error: constantLabels elements should not be a NULL$/);\n  });\n\n  it('should return a metric without options', () => {\n    const map = new Map();\n    map.set('key', 'value');\n    const derivedInt64Gauge = registry.addDerivedInt64Gauge(METRIC_NAME);\n    derivedInt64Gauge.createTimeSeries([], map);\n    map.set('key1', 'value1');\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: '',\n      labelKeys: [],\n      unit: '1',\n      type: MetricDescriptorType.GAUGE_INT64,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    const [{ points }] = timeseries;\n    const [point] = points;\n    assert.strictEqual(point.value, 2);\n    assert.deepStrictEqual(point.timestamp, {\n      seconds: mockedTime.seconds,\n      nanos: mockedTime.nanos,\n    });\n  });\n});\n\ndescribe('addDerivedDoubleGauge', () => {\n  let registry: MetricRegistry;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n\n  beforeEach(() => {\n    registry = new MetricRegistry();\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  it('should return a metric', () => {\n    class QueueManager {\n      getValue(): number {\n        return 0.7;\n      }\n    }\n    const derivedDoubleGauge = registry.addDerivedDoubleGauge(\n      METRIC_NAME,\n      METRIC_OPTIONS\n    );\n    derivedDoubleGauge.createTimeSeries(LABEL_VALUES_200, new QueueManager());\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: METRIC_DESCRIPTION,\n      labelKeys: LABEL_KEYS,\n      unit: UNIT,\n      type: MetricDescriptorType.GAUGE_DOUBLE,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    const [{ points }] = timeseries;\n    const [point] = points;\n    assert.strictEqual(point.value, 0.7);\n    assert.deepStrictEqual(point.timestamp, {\n      seconds: mockedTime.seconds,\n      nanos: mockedTime.nanos,\n    });\n  });\n\n  it('should throw an error when the register same metric', () => {\n    registry.addDerivedDoubleGauge(METRIC_NAME, METRIC_OPTIONS);\n    assert.throws(() => {\n      registry.addDerivedDoubleGauge(METRIC_NAME, METRIC_OPTIONS);\n    }, /^Error: A metric with the name metric-name has already been registered.$/);\n  });\n});\n\ndescribe('addInt64Cumulative', () => {\n  let registry: MetricRegistry;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n\n  beforeEach(() => {\n    registry = new MetricRegistry();\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  it('should return a metric', () => {\n    const int64Gauge = registry.addInt64Cumulative(METRIC_NAME, METRIC_OPTIONS);\n    const pointEntry = int64Gauge.getOrCreateTimeSeries(LABEL_VALUES_200);\n    pointEntry.inc();\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: METRIC_DESCRIPTION,\n      labelKeys: LABEL_KEYS,\n      unit: UNIT,\n      type: MetricDescriptorType.CUMULATIVE_INT64,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    const [{ points }] = timeseries;\n    const [point] = points;\n    assert.strictEqual(point.value, 1);\n    assert.deepStrictEqual(point.timestamp, {\n      seconds: mockedTime.seconds,\n      nanos: mockedTime.nanos,\n    });\n  });\n\n  it('should return a metric without options', () => {\n    const int64Gauge = registry.addInt64Cumulative(METRIC_NAME);\n    const pointEntry = int64Gauge.getDefaultTimeSeries();\n    pointEntry.inc(100);\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: '',\n      labelKeys: [],\n      unit: UNIT,\n      type: MetricDescriptorType.CUMULATIVE_INT64,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    const [{ points }] = timeseries;\n    const [point] = points;\n    assert.strictEqual(point.value, 100);\n    assert.deepStrictEqual(point.timestamp, {\n      seconds: mockedTime.seconds,\n      nanos: mockedTime.nanos,\n    });\n  });\n\n  it('should throw an error when the duplicate keys in labelKeys and constantLabels', () => {\n    const constantLabels = new Map();\n    constantLabels.set({ key: 'k1' }, { value: 'v1' });\n    const labelKeys = [{ key: 'k1', description: 'desc' }];\n    assert.throws(() => {\n      registry.addInt64Cumulative(METRIC_NAME, { constantLabels, labelKeys });\n    }, /^Error: The keys from LabelKeys should not be present in constantLabels or LabelKeys should not contains duplicate keys$/);\n  });\n});\n\ndescribe('addDoubleCumulative', () => {\n  let registry: MetricRegistry;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n\n  beforeEach(() => {\n    registry = new MetricRegistry();\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  it('should return a metric', () => {\n    const int64Gauge = registry.addDoubleCumulative(\n      METRIC_NAME,\n      METRIC_OPTIONS\n    );\n    const pointEntry = int64Gauge.getOrCreateTimeSeries(LABEL_VALUES_200);\n    pointEntry.inc(1.1);\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: METRIC_DESCRIPTION,\n      labelKeys: LABEL_KEYS,\n      unit: UNIT,\n      type: MetricDescriptorType.CUMULATIVE_DOUBLE,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    const [{ points }] = timeseries;\n    const [point] = points;\n    assert.strictEqual(point.value, 1.1);\n    assert.deepStrictEqual(point.timestamp, {\n      seconds: mockedTime.seconds,\n      nanos: mockedTime.nanos,\n    });\n  });\n\n  it('should return a metric without options', () => {\n    const int64Gauge = registry.addDoubleCumulative(METRIC_NAME);\n    const pointEntry = int64Gauge.getDefaultTimeSeries();\n    pointEntry.inc();\n    pointEntry.inc(100.12);\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: '',\n      labelKeys: [],\n      unit: UNIT,\n      type: MetricDescriptorType.CUMULATIVE_DOUBLE,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    const [{ points }] = timeseries;\n    const [point] = points;\n    assert.strictEqual(point.value, 101.12);\n    assert.deepStrictEqual(point.timestamp, {\n      seconds: mockedTime.seconds,\n      nanos: mockedTime.nanos,\n    });\n  });\n\n  it('should throw an error when the duplicate keys in labelKeys and constantLabels', () => {\n    const constantLabels = new Map();\n    constantLabels.set({ key: 'k1' }, { value: 'v1' });\n    const labelKeys = [{ key: 'k1', description: 'desc' }];\n    assert.throws(() => {\n      registry.addDoubleCumulative(METRIC_NAME, { constantLabels, labelKeys });\n    }, /^Error: The keys from LabelKeys should not be present in constantLabels or LabelKeys should not contains duplicate keys$/);\n  });\n});\n\ndescribe('addDerivedInt64Cumulative', () => {\n  let registry: MetricRegistry;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n\n  beforeEach(() => {\n    registry = new MetricRegistry();\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  it('should return a metric', () => {\n    const map = new Map();\n    map.set('key', 'value');\n    const derivedInt64Cumulative = registry.addDerivedInt64Cumulative(\n      METRIC_NAME,\n      METRIC_OPTIONS\n    );\n    derivedInt64Cumulative.createTimeSeries(LABEL_VALUES_200, map);\n    map.set('key1', 'value1');\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: METRIC_DESCRIPTION,\n      labelKeys: LABEL_KEYS,\n      unit: UNIT,\n      type: MetricDescriptorType.CUMULATIVE_INT64,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    assert.deepStrictEqual(timeseries, [\n      {\n        labelValues: LABEL_VALUES_200,\n        points: [{ value: 2, timestamp: mockedTime }],\n        startTimestamp: mockedTime,\n      },\n    ]);\n  });\n\n  it('should throw an error when the register same metric', () => {\n    registry.addDerivedInt64Cumulative(METRIC_NAME, METRIC_OPTIONS);\n    assert.throws(() => {\n      registry.addDerivedInt64Cumulative(METRIC_NAME, METRIC_OPTIONS);\n    }, /^Error: A metric with the name metric-name has already been registered.$/);\n  });\n\n  it('should throw an error when the duplicate keys in labelKeys and constantLabels', () => {\n    const constantLabels = new Map();\n    constantLabels.set({ key: 'k1' }, { value: 'v1' });\n    const labelKeys = [{ key: 'k1', description: 'desc' }];\n    assert.throws(() => {\n      registry.addDerivedInt64Cumulative(METRIC_NAME, {\n        constantLabels,\n        labelKeys,\n      });\n    }, /^Error: The keys from LabelKeys should not be present in constantLabels or LabelKeys should not contains duplicate keys$/);\n  });\n\n  it('should throw an error when the constant labels elements are null', () => {\n    const constantLabels = new Map();\n    constantLabels.set({ key: 'k1' }, null);\n    assert.throws(() => {\n      registry.addDerivedInt64Cumulative(METRIC_NAME, { constantLabels });\n    }, /^Error: constantLabels elements should not be a NULL$/);\n  });\n\n  it('should return a metric without options', () => {\n    const map = new Map();\n    map.set('key', 'value');\n    const derivedInt64Cumulative = registry.addDerivedInt64Cumulative(\n      METRIC_NAME\n    );\n    derivedInt64Cumulative.createTimeSeries([], map);\n    map.set('key1', 'value1');\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: '',\n      labelKeys: [],\n      unit: '1',\n      type: MetricDescriptorType.CUMULATIVE_INT64,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    assert.deepStrictEqual(timeseries, [\n      {\n        labelValues: [],\n        points: [{ value: 2, timestamp: mockedTime }],\n        startTimestamp: mockedTime,\n      },\n    ]);\n  });\n});\n\ndescribe('addDerivedDoubleCumulative', () => {\n  let registry: MetricRegistry;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n\n  beforeEach(() => {\n    registry = new MetricRegistry();\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  it('should return a metric', () => {\n    class QueueManager {\n      get Value(): number {\n        return 45.5;\n      }\n    }\n    const queue = new QueueManager();\n    const derivedDoubleCumulative = registry.addDerivedDoubleCumulative(\n      METRIC_NAME,\n      METRIC_OPTIONS\n    );\n    derivedDoubleCumulative.createTimeSeries(LABEL_VALUES_200, () => {\n      return queue.Value;\n    });\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: METRIC_DESCRIPTION,\n      labelKeys: LABEL_KEYS,\n      unit: UNIT,\n      type: MetricDescriptorType.CUMULATIVE_DOUBLE,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    assert.deepStrictEqual(timeseries, [\n      {\n        labelValues: LABEL_VALUES_200,\n        points: [{ value: 45.5, timestamp: mockedTime }],\n        startTimestamp: mockedTime,\n      },\n    ]);\n  });\n\n  it('should throw an error when the register same metric', () => {\n    registry.addDerivedDoubleCumulative(METRIC_NAME, METRIC_OPTIONS);\n    assert.throws(() => {\n      registry.addDerivedDoubleCumulative(METRIC_NAME, METRIC_OPTIONS);\n    }, /^Error: A metric with the name metric-name has already been registered.$/);\n  });\n\n  it('should throw an error when the duplicate keys in labelKeys and constantLabels', () => {\n    const constantLabels = new Map();\n    constantLabels.set({ key: 'k1' }, { value: 'v1' });\n    const labelKeys = [{ key: 'k1', description: 'desc' }];\n    assert.throws(() => {\n      registry.addDerivedDoubleCumulative(METRIC_NAME, {\n        constantLabels,\n        labelKeys,\n      });\n    }, /^Error: The keys from LabelKeys should not be present in constantLabels or LabelKeys should not contains duplicate keys$/);\n  });\n\n  it('should throw an error when the constant labels elements are null', () => {\n    const constantLabels = new Map();\n    constantLabels.set({ key: 'k1' }, null);\n    assert.throws(() => {\n      registry.addDerivedDoubleCumulative(METRIC_NAME, { constantLabels });\n    }, /^Error: constantLabels elements should not be a NULL$/);\n  });\n\n  it('should return a metric without options', () => {\n    class MemoryInfo {\n      current = 45.5;\n      get Value(): number {\n        return this.current;\n      }\n      inc() {\n        this.current++;\n      }\n    }\n    const mem = new MemoryInfo();\n    const derivedDoubleCumulative = registry.addDerivedDoubleCumulative(\n      METRIC_NAME\n    );\n    derivedDoubleCumulative.createTimeSeries([], () => {\n      return mem.Value;\n    });\n    mem.inc();\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 1);\n    const [{ descriptor, timeseries }] = metrics;\n    assert.deepStrictEqual(descriptor, {\n      name: METRIC_NAME,\n      description: '',\n      labelKeys: [],\n      unit: '1',\n      type: MetricDescriptorType.CUMULATIVE_DOUBLE,\n    });\n    assert.strictEqual(timeseries.length, 1);\n    assert.deepStrictEqual(timeseries, [\n      {\n        labelValues: [],\n        points: [{ value: 46.5, timestamp: mockedTime }],\n        startTimestamp: mockedTime,\n      },\n    ]);\n  });\n});\n\ndescribe('Add multiple gauges', () => {\n  let registry: MetricRegistry;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n\n  beforeEach(() => {\n    registry = new MetricRegistry();\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  it('should return metrics', () => {\n    const int64Gauge = registry.addInt64Gauge('metric-name1', METRIC_OPTIONS);\n    int64Gauge.getOrCreateTimeSeries(LABEL_VALUES_200).add(100);\n\n    const doubleGauge = registry.addDoubleGauge('metric-name2', METRIC_OPTIONS);\n    doubleGauge.getOrCreateTimeSeries(LABEL_VALUES_200).add(5.5);\n\n    const arr = new Array(5).fill('test');\n    const derivedInt64Gauge = registry.addDerivedInt64Gauge(\n      'metric-name3',\n      METRIC_OPTIONS\n    );\n    derivedInt64Gauge.createTimeSeries(LABEL_VALUES_400, {\n      size: () => arr.length,\n    });\n\n    const int64Cumulative = registry.addInt64Cumulative(\n      'metric-name4',\n      METRIC_OPTIONS\n    );\n    int64Cumulative.getOrCreateTimeSeries(LABEL_VALUES_200).inc();\n\n    const metrics = registry.getMetricProducer().getMetrics();\n    assert.strictEqual(metrics.length, 4);\n    const [\n      { descriptor: descriptor1, timeseries: timeseries1 },\n      { descriptor: descriptor2, timeseries: timeseries2 },\n      { descriptor: descriptor3, timeseries: timeseries3 },\n      { descriptor: descriptor4, timeseries: timeseries4 },\n    ] = metrics;\n    assert.deepStrictEqual(descriptor1, {\n      name: 'metric-name1',\n      description: METRIC_DESCRIPTION,\n      labelKeys: LABEL_KEYS,\n      unit: UNIT,\n      type: MetricDescriptorType.GAUGE_INT64,\n    });\n    assert.deepStrictEqual(descriptor2, {\n      name: 'metric-name2',\n      description: METRIC_DESCRIPTION,\n      labelKeys: LABEL_KEYS,\n      unit: UNIT,\n      type: MetricDescriptorType.GAUGE_DOUBLE,\n    });\n    assert.deepStrictEqual(descriptor3, {\n      name: 'metric-name3',\n      description: METRIC_DESCRIPTION,\n      labelKeys: LABEL_KEYS,\n      unit: UNIT,\n      type: MetricDescriptorType.GAUGE_INT64,\n    });\n    assert.deepStrictEqual(descriptor4, {\n      name: 'metric-name4',\n      description: METRIC_DESCRIPTION,\n      labelKeys: LABEL_KEYS,\n      unit: UNIT,\n      type: MetricDescriptorType.CUMULATIVE_INT64,\n    });\n    assert.strictEqual(timeseries1.length, 1);\n    assert.strictEqual(timeseries1[0].points.length, 1);\n    assert.strictEqual(timeseries1[0].points[0].value, 100);\n    assert.strictEqual(\n      timeseries1[0].points[0].timestamp.seconds,\n      mockedTime.seconds\n    );\n    assert.strictEqual(\n      timeseries1[0].points[0].timestamp.nanos,\n      mockedTime.nanos\n    );\n    assert.strictEqual(timeseries2.length, 1);\n    assert.strictEqual(timeseries2[0].points.length, 1);\n    assert.strictEqual(timeseries2[0].points[0].value, 5.5);\n    assert.strictEqual(timeseries3.length, 1);\n    assert.strictEqual(timeseries3[0].points.length, 1);\n    assert.strictEqual(timeseries3[0].points[0].value, 5);\n    assert.deepStrictEqual(\n      timeseries1[0].points[0].timestamp,\n      timeseries2[0].points[0].timestamp\n    );\n    assert.deepStrictEqual(\n      timeseries2[0].points[0].timestamp,\n      timeseries3[0].points[0].timestamp\n    );\n    assert.strictEqual(timeseries4.length, 1);\n    assert.strictEqual(timeseries4[0].points.length, 1);\n    assert.strictEqual(timeseries4[0].points[0].value, 1);\n  });\n});\n"]}