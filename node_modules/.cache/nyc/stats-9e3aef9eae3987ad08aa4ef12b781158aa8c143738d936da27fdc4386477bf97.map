{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/stats.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/stats.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as defaultLogger from '../common/console-logger';\nimport * as loggerTypes from '../common/types';\nimport { StatsEventListener } from '../exporters/types';\nimport * as cls from '../internal/cls';\nimport { Metric } from '../metrics/export/types';\nimport { Metrics } from '../metrics/metrics';\nimport { TagMap } from '../tags/tag-map';\nimport * as tagger from '../tags/tagger';\nimport { TagKey } from '../tags/types';\nimport { MetricProducerForStats } from './metric-producer';\nimport {\n  AggregationType,\n  Measure,\n  Measurement,\n  MeasureType,\n  MeasureUnit,\n  Stats,\n  View,\n} from './types';\nimport { BaseView } from './view';\n\nexport class BaseStats implements Stats {\n  /** A list of Stats exporters */\n  private statsEventListeners: StatsEventListener[] = [];\n  /** A map of Measures (name) to their corresponding Views */\n  private registeredViews: { [key: string]: View[] } = {};\n  /** An object to log information to */\n  private logger: loggerTypes.Logger;\n  /** Singleton instance */\n  private static singletonInstance: BaseStats;\n  /** Manage context automatic propagation */\n  private contextManager: cls.Namespace;\n\n  /**\n   * Creates stats\n   * @param logger\n   */\n  constructor(logger = defaultLogger) {\n    this.logger = logger.logger();\n    this.contextManager = cls.getNamespace();\n\n    // Create a new MetricProducerForStats and register it to\n    // MetricProducerManager when Stats is initialized.\n    const metricProducer = new MetricProducerForStats(this);\n    Metrics.getMetricProducerManager().add(metricProducer);\n  }\n\n  /** Gets the stats instance. */\n  static get instance(): Stats {\n    return this.singletonInstance || (this.singletonInstance = new this());\n  }\n\n  /**\n   * Registers a view to listen to new measurements in its measure.\n   * @param view The view to be registered\n   */\n  registerView(view: View): void {\n    if (this.registeredViews[view.measure.name]) {\n      this.registeredViews[view.measure.name].push(view);\n    } else {\n      this.registeredViews[view.measure.name] = [view];\n    }\n\n    view.registered = true;\n\n    // Notifies all exporters\n    for (const exporter of this.statsEventListeners) {\n      // tslint:disable-next-line:deprecation\n      exporter.onRegisterView(view);\n    }\n  }\n\n  /**\n   * Creates a view.\n   * @param name The view name\n   * @param measure The view measure\n   * @param aggregation The view aggregation type\n   * @param tagKeys The view columns (tag keys)\n   * @param description The view description\n   * @param bucketBoundaries An optional The view bucket boundaries for a\n   *     distribution aggregation type\n   */\n  createView(\n    name: string,\n    measure: Measure,\n    aggregation: AggregationType,\n    tagKeys: TagKey[],\n    description: string,\n    bucketBoundaries?: number[]\n  ): View {\n    const view = new BaseView(\n      name,\n      measure,\n      aggregation,\n      tagKeys,\n      description,\n      bucketBoundaries\n    );\n    return view;\n  }\n\n  /**\n   * Registers an exporter to send stats data to a service.\n   * @param exporter An stats exporter\n   */\n  registerExporter(exporter: StatsEventListener): void {\n    this.statsEventListeners.push(exporter);\n\n    for (const measureName of Object.keys(this.registeredViews)) {\n      for (const view of this.registeredViews[measureName]) {\n        // tslint:disable-next-line:deprecation\n        exporter.onRegisterView(view);\n      }\n    }\n    exporter.start();\n  }\n\n  /**\n   * Unregisters an exporter. It should be called whenever the exporter is not\n   * needed anymore.\n   * @param exporter An stats exporter\n   */\n  unregisterExporter(exporter: StatsEventListener): void {\n    if (exporter) {\n      this.statsEventListeners = this.statsEventListeners.filter(\n        currentExporter => currentExporter !== exporter\n      );\n      exporter.stop();\n    }\n  }\n\n  /**\n   * Creates a measure of type Double.\n   * @param name The measure name\n   * @param unit The measure unit\n   * @param description An optional measure description\n   */\n  createMeasureDouble(\n    name: string,\n    unit: MeasureUnit,\n    description?: string\n  ): Measure {\n    return { name, unit, type: MeasureType.DOUBLE, description };\n  }\n\n  /**\n   * Creates a measure of type Int64. Values must be integers up to\n   * Number.MAX_SAFE_INTERGER.\n   * @param name The measure name\n   * @param unit The measure unit\n   * @param description An optional measure description\n   */\n  createMeasureInt64(\n    name: string,\n    unit: MeasureUnit,\n    description?: string\n  ): Measure {\n    return { name, unit, type: MeasureType.INT64, description };\n  }\n\n  /**\n   * Verifies whether all measurements has positive value\n   * @param measurements A list of measurements\n   * @returns Whether values is positive\n   */\n  private hasNegativeValue(measurements: Measurement[]): boolean {\n    return measurements.some(measurement => measurement.value < 0);\n  }\n\n  /**\n   * Gets a collection of produced Metric`s to be exported.\n   * @returns The List of metrics.\n   */\n  getMetrics(): Metric[] {\n    const metrics: Metric[] = [];\n\n    for (const measureName of Object.keys(this.registeredViews)) {\n      for (const view of this.registeredViews[measureName]) {\n        metrics.push(view.getMetric(view.startTime));\n      }\n    }\n\n    return metrics;\n  }\n\n  /**\n   * Updates all views with the new measurements.\n   * @param measurements A list of measurements to record\n   * @param tags optional The tags to which the value is applied.\n   *     tags could either be explicitly passed to the method, or implicitly\n   *     read from current execution context.\n   * @param attachments optional The contextual information associated with an\n   *     example value. THe contextual information is represented as key - value\n   *     string pairs.\n   */\n  record(\n    measurements: Measurement[],\n    tags?: TagMap,\n    attachments?: { [key: string]: string }\n  ): void {\n    if (this.hasNegativeValue(measurements)) {\n      this.logger.warn(`Dropping measurments ${measurements}, value to record\n          must be non-negative.`);\n      return;\n    }\n\n    if (!tags) {\n      // Record against implicit (current) context\n      tags = this.getCurrentTagContext();\n    }\n\n    for (const measurement of measurements) {\n      const views = this.registeredViews[measurement.measure.name];\n      if (!views) {\n        break;\n      }\n      // Updates all views\n      for (const view of views) {\n        view.recordMeasurement(measurement, tags, attachments);\n      }\n\n      // Notifies all exporters\n      for (const exporter of this.statsEventListeners) {\n        // tslint:disable-next-line:deprecation\n        exporter.onRecord(views, measurement, tags.tags);\n      }\n    }\n  }\n\n  /**\n   * Remove all registered Views and exporters from the stats.\n   */\n  clear(): void {\n    this.registeredViews = {};\n    this.statsEventListeners = [];\n  }\n\n  /**\n   * Enters the scope of code where the given `TagMap` is in the current context\n   * (replacing the previous `TagMap`).\n   * @param tags The TagMap to be set to the current context.\n   * @param fn Callback function.\n   * @returns The callback return.\n   */\n  withTagContext<T>(tags: TagMap, fn: cls.Func<T>): T {\n    return tagger.withTagContext<T>(this.contextManager, tags, fn);\n  }\n\n  /** Gets the current tag context. */\n  getCurrentTagContext(): TagMap {\n    return tagger.getCurrentTagContext(this.contextManager);\n  }\n}\n"]}