"use strict";/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_m5uq6mk1b(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/tracer-base.ts";var hash="9249eaf3236d25e21c4b2850b6d8fddf52a98321";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/tracer-base.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:0},end:{line:18,column:32}},"2":{start:{line:19,column:13},end:{line:19,column:28}},"3":{start:{line:20,column:15},end:{line:20,column:53}},"4":{start:{line:21,column:27},end:{line:21,column:69}},"5":{start:{line:22,column:18},end:{line:22,column:47}},"6":{start:{line:23,column:30},end:{line:23,column:72}},"7":{start:{line:24,column:25},end:{line:24,column:62}},"8":{start:{line:25,column:20},end:{line:25,column:42}},"9":{start:{line:26,column:14},end:{line:26,column:32}},"10":{start:{line:34,column:8},end:{line:34,column:38}},"11":{start:{line:36,column:8},end:{line:36,column:30}},"12":{start:{line:38,column:8},end:{line:38,column:38}},"13":{start:{line:39,column:8},end:{line:39,column:33}},"14":{start:{line:40,column:8},end:{line:40,column:36}},"15":{start:{line:44,column:8},end:{line:46,column:9}},"16":{start:{line:45,column:12},end:{line:45,column:43}},"17":{start:{line:47,column:8},end:{line:47,column:50}},"18":{start:{line:58,column:8},end:{line:58,column:32}},"19":{start:{line:59,column:8},end:{line:59,column:29}},"20":{start:{line:60,column:8},end:{line:60,column:60}},"21":{start:{line:61,column:8},end:{line:61,column:115}},"22":{start:{line:62,column:8},end:{line:67,column:9}},"23":{start:{line:63,column:12},end:{line:63,column:154}},"24":{start:{line:64,column:12},end:{line:64,column:141}},"25":{start:{line:65,column:12},end:{line:65,column:147}},"26":{start:{line:66,column:12},end:{line:66,column:131}},"27":{start:{line:68,column:8},end:{line:68,column:20}},"28":{start:{line:72,column:8},end:{line:72,column:33}},"29":{start:{line:73,column:8},end:{line:73,column:20}},"30":{start:{line:77,column:8},end:{line:77,column:40}},"31":{start:{line:81,column:8},end:{line:81,column:32}},"32":{start:{line:89,column:28},end:{line:95,column:9}},"33":{start:{line:96,column:29},end:{line:96,column:47}},"34":{start:{line:97,column:24},end:{line:97,column:43}},"35":{start:{line:98,column:21},end:{line:98,column:43}},"36":{start:{line:99,column:21},end:{line:99,column:63}},"37":{start:{line:100,column:27},end:{line:100,column:49}},"38":{start:{line:102,column:8},end:{line:123,column:9}},"39":{start:{line:103,column:35},end:{line:103,column:78}},"40":{start:{line:105,column:12},end:{line:116,column:13}},"41":{start:{line:106,column:33},end:{line:106,column:110}},"42":{start:{line:108,column:42},end:{line:108,column:86}},"43":{start:{line:109,column:16},end:{line:113,column:17}},"44":{start:{line:110,column:20},end:{line:112,column:23}},"45":{start:{line:111,column:24},end:{line:111,column:75}},"46":{start:{line:114,column:16},end:{line:114,column:33}},"47":{start:{line:115,column:16},end:{line:115,column:36}},"48":{start:{line:118,column:12},end:{line:118,column:83}},"49":{start:{line:122,column:12},end:{line:122,column:86}},"50":{start:{line:124,column:33},end:{line:124,column:128}},"51":{start:{line:125,column:8},end:{line:125,column:36}},"52":{start:{line:129,column:8},end:{line:130,column:19}},"53":{start:{line:130,column:12},end:{line:130,column:19}},"54":{start:{line:131,column:8},end:{line:131,column:35}},"55":{start:{line:135,column:8},end:{line:136,column:19}},"56":{start:{line:136,column:12},end:{line:136,column:19}},"57":{start:{line:137,column:8},end:{line:137,column:33}},"58":{start:{line:144,column:8},end:{line:144,column:48}},"59":{start:{line:151,column:22},end:{line:151,column:67}},"60":{start:{line:152,column:8},end:{line:154,column:9}},"61":{start:{line:153,column:12},end:{line:153,column:49}},"62":{start:{line:157,column:8},end:{line:157,column:77}},"63":{start:{line:158,column:8},end:{line:160,column:9}},"64":{start:{line:159,column:12},end:{line:159,column:39}},"65":{start:{line:163,column:8},end:{line:163,column:75}},"66":{start:{line:164,column:8},end:{line:166,column:9}},"67":{start:{line:165,column:12},end:{line:165,column:37}},"68":{start:{line:173,column:8},end:{line:176,column:9}},"69":{start:{line:174,column:12},end:{line:174,column:91}},"70":{start:{line:175,column:12},end:{line:175,column:59}},"71":{start:{line:177,column:21},end:{line:177,column:60}},"72":{start:{line:179,column:34},end:{line:179,column:78}},"73":{start:{line:180,column:8},end:{line:184,column:9}},"74":{start:{line:181,column:12},end:{line:183,column:15}},"75":{start:{line:182,column:16},end:{line:182,column:63}},"76":{start:{line:185,column:8},end:{line:185,column:20}},"77":{start:{line:190,column:8},end:{line:194,column:9}},"78":{start:{line:193,column:12},end:{line:193,column:99}},"79":{start:{line:195,column:31},end:{line:195,column:35}},"80":{start:{line:197,column:8},end:{line:202,column:9}},"81":{start:{line:200,column:12},end:{line:200,column:85}},"82":{start:{line:201,column:12},end:{line:201,column:38}},"83":{start:{line:204,column:8},end:{line:204,column:50}},"84":{start:{line:207,column:0},end:{line:207,column:40}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:32,column:4},end:{line:32,column:5}},loc:{start:{line:32,column:18},end:{line:41,column:5}},line:32},"1":{name:"(anonymous_1)",decl:{start:{line:43,column:4},end:{line:43,column:5}},loc:{start:{line:43,column:22},end:{line:48,column:5}},line:43},"2":{name:"(anonymous_2)",decl:{start:{line:50,column:4},end:{line:50,column:5}},loc:{start:{line:50,column:29},end:{line:52,column:5}},line:50},"3":{name:"(anonymous_3)",decl:{start:{line:57,column:4},end:{line:57,column:5}},loc:{start:{line:57,column:18},end:{line:69,column:5}},line:57},"4":{name:"(anonymous_4)",decl:{start:{line:71,column:4},end:{line:71,column:5}},loc:{start:{line:71,column:11},end:{line:74,column:5}},line:71},"5":{name:"(anonymous_5)",decl:{start:{line:76,column:4},end:{line:76,column:5}},loc:{start:{line:76,column:25},end:{line:78,column:5}},line:76},"6":{name:"(anonymous_6)",decl:{start:{line:80,column:4},end:{line:80,column:5}},loc:{start:{line:80,column:17},end:{line:82,column:5}},line:80},"7":{name:"(anonymous_7)",decl:{start:{line:88,column:4},end:{line:88,column:5}},loc:{start:{line:88,column:31},end:{line:126,column:5}},line:88},"8":{name:"(anonymous_8)",decl:{start:{line:110,column:59},end:{line:110,column:60}},loc:{start:{line:110,column:66},end:{line:112,column:21}},line:110},"9":{name:"(anonymous_9)",decl:{start:{line:128,column:4},end:{line:128,column:5}},loc:{start:{line:128,column:22},end:{line:132,column:5}},line:128},"10":{name:"(anonymous_10)",decl:{start:{line:134,column:4},end:{line:134,column:5}},loc:{start:{line:134,column:20},end:{line:138,column:5}},line:134},"11":{name:"(anonymous_11)",decl:{start:{line:143,column:4},end:{line:143,column:5}},loc:{start:{line:143,column:40},end:{line:145,column:5}},line:143},"12":{name:"(anonymous_12)",decl:{start:{line:150,column:4},end:{line:150,column:5}},loc:{start:{line:150,column:42},end:{line:155,column:5}},line:150},"13":{name:"(anonymous_13)",decl:{start:{line:156,column:4},end:{line:156,column:5}},loc:{start:{line:156,column:26},end:{line:161,column:5}},line:156},"14":{name:"(anonymous_14)",decl:{start:{line:162,column:4},end:{line:162,column:5}},loc:{start:{line:162,column:24},end:{line:167,column:5}},line:162},"15":{name:"(anonymous_15)",decl:{start:{line:172,column:4},end:{line:172,column:5}},loc:{start:{line:172,column:28},end:{line:186,column:5}},line:172},"16":{name:"(anonymous_16)",decl:{start:{line:181,column:51},end:{line:181,column:52}},loc:{start:{line:181,column:58},end:{line:183,column:13}},line:181},"17":{name:"(anonymous_17)",decl:{start:{line:188,column:4},end:{line:188,column:5}},loc:{start:{line:188,column:43},end:{line:205,column:5}},line:188}},branchMap:{"0":{loc:{start:{line:44,column:8},end:{line:46,column:9}},type:"if",locations:[{start:{line:44,column:8},end:{line:46,column:9}},{start:{line:44,column:8},end:{line:46,column:9}}],line:44},"1":{loc:{start:{line:44,column:12},end:{line:44,column:50}},type:"binary-expr",locations:[{start:{line:44,column:12},end:{line:44,column:23}},{start:{line:44,column:27},end:{line:44,column:50}}],line:44},"2":{loc:{start:{line:60,column:22},end:{line:60,column:59}},type:"binary-expr",locations:[{start:{line:60,column:22},end:{line:60,column:40}},{start:{line:60,column:44},end:{line:60,column:59}}],line:60},"3":{loc:{start:{line:61,column:59},end:{line:61,column:113}},type:"binary-expr",locations:[{start:{line:61,column:59},end:{line:61,column:78}},{start:{line:61,column:82},end:{line:61,column:113}}],line:61},"4":{loc:{start:{line:62,column:8},end:{line:67,column:9}},type:"if",locations:[{start:{line:62,column:8},end:{line:67,column:9}},{start:{line:62,column:8},end:{line:67,column:9}}],line:62},"5":{loc:{start:{line:89,column:28},end:{line:95,column:9}},type:"binary-expr",locations:[{start:{line:89,column:28},end:{line:89,column:47}},{start:{line:89,column:51},end:{line:95,column:9}}],line:89},"6":{loc:{start:{line:98,column:21},end:{line:98,column:43}},type:"binary-expr",locations:[{start:{line:98,column:21},end:{line:98,column:33}},{start:{line:98,column:37},end:{line:98,column:43}}],line:98},"7":{loc:{start:{line:99,column:21},end:{line:99,column:63}},type:"binary-expr",locations:[{start:{line:99,column:21},end:{line:99,column:33}},{start:{line:99,column:37},end:{line:99,column:63}}],line:99},"8":{loc:{start:{line:102,column:8},end:{line:123,column:9}},type:"if",locations:[{start:{line:102,column:8},end:{line:123,column:9}},{start:{line:102,column:8},end:{line:123,column:9}}],line:102},"9":{loc:{start:{line:105,column:12},end:{line:116,column:13}},type:"if",locations:[{start:{line:105,column:12},end:{line:116,column:13}},{start:{line:105,column:12},end:{line:116,column:13}}],line:105},"10":{loc:{start:{line:108,column:42},end:{line:108,column:86}},type:"binary-expr",locations:[{start:{line:108,column:42},end:{line:108,column:53}},{start:{line:108,column:57},end:{line:108,column:86}}],line:108},"11":{loc:{start:{line:109,column:16},end:{line:113,column:17}},type:"if",locations:[{start:{line:109,column:16},end:{line:113,column:17}},{start:{line:109,column:16},end:{line:113,column:17}}],line:109},"12":{loc:{start:{line:129,column:8},end:{line:130,column:19}},type:"if",locations:[{start:{line:129,column:8},end:{line:130,column:19}},{start:{line:129,column:8},end:{line:130,column:19}}],line:129},"13":{loc:{start:{line:135,column:8},end:{line:136,column:19}},type:"if",locations:[{start:{line:135,column:8},end:{line:136,column:19}},{start:{line:135,column:8},end:{line:136,column:19}}],line:135},"14":{loc:{start:{line:152,column:8},end:{line:154,column:9}},type:"if",locations:[{start:{line:152,column:8},end:{line:154,column:9}},{start:{line:152,column:8},end:{line:154,column:9}}],line:152},"15":{loc:{start:{line:173,column:8},end:{line:176,column:9}},type:"if",locations:[{start:{line:173,column:8},end:{line:176,column:9}},{start:{line:173,column:8},end:{line:176,column:9}}],line:173},"16":{loc:{start:{line:173,column:12},end:{line:173,column:40}},type:"binary-expr",locations:[{start:{line:173,column:12},end:{line:173,column:20}},{start:{line:173,column:24},end:{line:173,column:40}}],line:173},"17":{loc:{start:{line:179,column:34},end:{line:179,column:78}},type:"binary-expr",locations:[{start:{line:179,column:34},end:{line:179,column:45}},{start:{line:179,column:49},end:{line:179,column:78}}],line:179},"18":{loc:{start:{line:180,column:8},end:{line:184,column:9}},type:"if",locations:[{start:{line:180,column:8},end:{line:184,column:9}},{start:{line:180,column:8},end:{line:184,column:9}}],line:180},"19":{loc:{start:{line:190,column:8},end:{line:194,column:9}},type:"if",locations:[{start:{line:190,column:8},end:{line:194,column:9}},{start:{line:190,column:8},end:{line:194,column:9}}],line:190},"20":{loc:{start:{line:190,column:12},end:{line:192,column:41}},type:"binary-expr",locations:[{start:{line:190,column:12},end:{line:190,column:19}},{start:{line:191,column:12},end:{line:191,column:46}},{start:{line:192,column:12},end:{line:192,column:41}}],line:190},"21":{loc:{start:{line:197,column:8},end:{line:202,column:9}},type:"if",locations:[{start:{line:197,column:8},end:{line:202,column:9}},{start:{line:197,column:8},end:{line:202,column:9}}],line:197},"22":{loc:{start:{line:197,column:12},end:{line:199,column:53}},type:"binary-expr",locations:[{start:{line:197,column:12},end:{line:197,column:19}},{start:{line:198,column:12},end:{line:198,column:31}},{start:{line:199,column:12},end:{line:199,column:53}}],line:197}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0,0],"21":[0,0],"22":[0,0,0]},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/tracer-base.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/tracer-base.ts"],names:[],mappings:"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",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as uuid from 'uuid';\nimport * as logger from '../../common/console-logger';\nimport * as loggerTypes from '../../common/types';\nimport * as configTypes from '../config/types';\nimport { TraceParams } from '../config/types';\nimport { noopPropagation } from '../propagation/noop-propagation';\nimport { Propagation } from '../propagation/types';\nimport {\n  DEFAULT_SAMPLING_RATE,\n  SamplerBuilder,\n  TraceParamsBuilder,\n} from '../sampler/sampler';\nimport * as samplerTypes from '../sampler/types';\nimport { NoRecordRootSpan } from './no-record/no-record-root-span';\nimport { NoRecordSpan } from './no-record/no-record-span';\nimport { RootSpan } from './root-span';\nimport * as types from './types';\n\n/**\n * This class represents a tracer.\n */\nexport class CoreTracerBase implements types.TracerBase {\n  /** Indicates if the tracer is active */\n  private activeLocal: boolean;\n  /** A configuration for starting the tracer */\n  private config!: configTypes.TracerConfig;\n  /** A list of end span event listeners */\n  private eventListenersLocal: types.SpanEventListener[] = [];\n  /** Bit to represent whether trace is sampled or not. */\n  private readonly IS_SAMPLED = 0x1;\n  /** A sampler used to make sample decisions */\n  sampler!: samplerTypes.Sampler;\n  /** An object to log information */\n  logger: loggerTypes.Logger = logger.logger();\n  /** A configuration object for trace parameters */\n  activeTraceParams: TraceParams;\n\n  /** Constructs a new TraceImpl instance. */\n  constructor() {\n    this.activeLocal = false;\n    this.activeTraceParams = {};\n  }\n\n  /** A propagation instance */\n  get propagation(): Propagation {\n    if (this.config && this.config.propagation) {\n      return this.config.propagation;\n    }\n    return noopPropagation;\n  }\n\n  /** Sets the current root span. */\n  setCurrentRootSpan(root: types.Span) {\n    // no-op, this is only required in case of tracer with cls.\n  }\n\n  /**\n   * Starts a tracer.\n   * @param config A tracer configuration object to start a tracer.\n   */\n  start(config: configTypes.TracerConfig): this {\n    this.activeLocal = true;\n    this.config = config;\n    this.logger = this.config.logger || logger.logger();\n    this.sampler = SamplerBuilder.getSampler(\n      config.samplingRate || DEFAULT_SAMPLING_RATE\n    );\n    if (config.traceParams) {\n      this.activeTraceParams.numberOfAnnontationEventsPerSpan = TraceParamsBuilder.getNumberOfAnnotationEventsPerSpan(\n        config.traceParams\n      );\n      this.activeTraceParams.numberOfAttributesPerSpan = TraceParamsBuilder.getNumberOfAttributesPerSpan(\n        config.traceParams\n      );\n      this.activeTraceParams.numberOfMessageEventsPerSpan = TraceParamsBuilder.getNumberOfMessageEventsPerSpan(\n        config.traceParams\n      );\n      this.activeTraceParams.numberOfLinksPerSpan = TraceParamsBuilder.getNumberOfLinksPerSpan(\n        config.traceParams\n      );\n    }\n    return this;\n  }\n\n  /** Stops the tracer. */\n  stop(): this {\n    this.activeLocal = false;\n    return this;\n  }\n\n  /** Gets the list of event listeners. */\n  get eventListeners(): types.SpanEventListener[] {\n    return this.eventListenersLocal;\n  }\n\n  /** Indicates if the tracer is active or not. */\n  get active(): boolean {\n    return this.activeLocal;\n  }\n\n  /**\n   * Starts a root span.\n   * @param options A TraceOptions object to start a root span.\n   * @param fn A callback function to run after starting a root span.\n   */\n  startRootSpan<T>(\n    options: types.TraceOptions,\n    fn: (root: types.Span) => T\n  ): T {\n    const spanContext: types.SpanContext = options.spanContext || {\n      spanId: '',\n      traceId: uuid\n        .v4()\n        .split('-')\n        .join(''),\n    };\n    const parentSpanId = spanContext.spanId;\n    const traceId = spanContext.traceId;\n    const name = options.name || 'span';\n    const kind = options.kind || types.SpanKind.UNSPECIFIED;\n    const traceState = spanContext.traceState;\n\n    // Tracer is active\n    if (this.active) {\n      const sampleDecision = this.makeSamplingDecision(options, traceId);\n      // Sampling is on\n      if (sampleDecision) {\n        const rootSpan = new RootSpan(\n          this,\n          name,\n          kind,\n          traceId,\n          parentSpanId,\n          traceState\n        );\n        // Add default attributes\n        const defaultAttributes = this.config && this.config.defaultAttributes;\n        if (defaultAttributes) {\n          Object.keys(defaultAttributes).forEach(key => {\n            rootSpan.addAttribute(key, defaultAttributes[key]);\n          });\n        }\n        rootSpan.start();\n        return fn(rootSpan);\n      }\n      // Sampling is off\n      this.logger.debug('Sampling is off, starting new no record root span');\n    } else {\n      // Tracer is inactive\n      this.logger.debug('Tracer is inactive, starting new no record root span');\n    }\n\n    const noRecordRootSpan = new NoRecordRootSpan(\n      this,\n      name,\n      kind,\n      traceId,\n      parentSpanId,\n      traceState\n    );\n    return fn(noRecordRootSpan);\n  }\n\n  /** Notifies listeners of the span start. */\n  onStartSpan(span: types.Span): void {\n    if (!this.active) return;\n    this.notifyStartSpan(span);\n  }\n\n  /** Notifies listeners of the span end. */\n  onEndSpan(span: types.Span): void {\n    if (!this.active) return;\n    this.notifyEndSpan(span);\n  }\n\n  /**\n   * Registers an end span event listener.\n   * @param listener The listener to register.\n   */\n  registerSpanEventListener(listener: types.SpanEventListener) {\n    this.eventListenersLocal.push(listener);\n  }\n\n  /**\n   * Unregisters an end span event listener.\n   * @param listener The listener to unregister.\n   */\n  unregisterSpanEventListener(listener: types.SpanEventListener) {\n    const index = this.eventListenersLocal.indexOf(listener, 0);\n    if (index > -1) {\n      this.eventListeners.splice(index, 1);\n    }\n  }\n\n  private notifyStartSpan(span: types.Span) {\n    this.logger.debug('starting to notify listeners the start of spans');\n    for (const listener of this.eventListenersLocal) {\n      listener.onStartSpan(span);\n    }\n  }\n\n  private notifyEndSpan(span: types.Span) {\n    this.logger.debug('starting to notify listeners the end of spans');\n    for (const listener of this.eventListenersLocal) {\n      listener.onEndSpan(span);\n    }\n  }\n\n  /**\n   * Starts a span.\n   * @param [options] A SpanOptions object to start a child span.\n   */\n  startChildSpan(options?: types.SpanOptions): types.Span {\n    if (!options || !options.childOf) {\n      this.logger.debug(\n        'no current trace found - must start a new root span first'\n      );\n      return new NoRecordSpan(this);\n    }\n    const span = options.childOf.startChildSpan(options);\n\n    // Add default attributes\n    const defaultAttributes = this.config && this.config.defaultAttributes;\n    if (defaultAttributes) {\n      Object.keys(defaultAttributes).forEach(key => {\n        span.addAttribute(key, defaultAttributes[key]);\n      });\n    }\n    return span;\n  }\n\n  /** Determine whether to sample request or not. */\n  private makeSamplingDecision(\n    options: types.TraceOptions,\n    traceId: string\n  ): boolean {\n    // If users set a specific sampler in the TraceOptions, use it.\n    if (\n      options &&\n      options.samplingRate !== undefined &&\n      options.samplingRate !== null\n    ) {\n      return SamplerBuilder.getSampler(options.samplingRate).shouldSample(\n        traceId\n      );\n    }\n    let propagatedSample = null;\n    // if there is a context propagation, keep the decision\n    if (\n      options &&\n      options.spanContext &&\n      options.spanContext.options !== undefined\n    ) {\n      propagatedSample = (options.spanContext.options & this.IS_SAMPLED) !== 0;\n      return !!propagatedSample;\n    }\n    // default global sampler\n    return this.sampler.shouldSample(traceId);\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"9249eaf3236d25e21c4b2850b6d8fddf52a98321"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_m5uq6mk1b=function(){return actualCoverage;};}return actualCoverage;}cov_m5uq6mk1b();cov_m5uq6mk1b().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_m5uq6mk1b().s[1]++;exports.CoreTracerBase=void 0;const uuid=(cov_m5uq6mk1b().s[2]++,require("uuid"));const logger=(cov_m5uq6mk1b().s[3]++,require("../../common/console-logger"));const noop_propagation_1=(cov_m5uq6mk1b().s[4]++,require("../propagation/noop-propagation"));const sampler_1=(cov_m5uq6mk1b().s[5]++,require("../sampler/sampler"));const no_record_root_span_1=(cov_m5uq6mk1b().s[6]++,require("./no-record/no-record-root-span"));const no_record_span_1=(cov_m5uq6mk1b().s[7]++,require("./no-record/no-record-span"));const root_span_1=(cov_m5uq6mk1b().s[8]++,require("./root-span"));const types=(cov_m5uq6mk1b().s[9]++,require("./types"));/**
 * This class represents a tracer.
 */class CoreTracerBase{/** Constructs a new TraceImpl instance. */constructor(){cov_m5uq6mk1b().f[0]++;cov_m5uq6mk1b().s[10]++;/** A list of end span event listeners */this.eventListenersLocal=[];/** Bit to represent whether trace is sampled or not. */cov_m5uq6mk1b().s[11]++;this.IS_SAMPLED=0x1;/** An object to log information */cov_m5uq6mk1b().s[12]++;this.logger=logger.logger();cov_m5uq6mk1b().s[13]++;this.activeLocal=false;cov_m5uq6mk1b().s[14]++;this.activeTraceParams={};}/** A propagation instance */get propagation(){cov_m5uq6mk1b().f[1]++;cov_m5uq6mk1b().s[15]++;if((cov_m5uq6mk1b().b[1][0]++,this.config)&&(cov_m5uq6mk1b().b[1][1]++,this.config.propagation)){cov_m5uq6mk1b().b[0][0]++;cov_m5uq6mk1b().s[16]++;return this.config.propagation;}else{cov_m5uq6mk1b().b[0][1]++;}cov_m5uq6mk1b().s[17]++;return noop_propagation_1.noopPropagation;}/** Sets the current root span. */setCurrentRootSpan(root){cov_m5uq6mk1b().f[2]++;}// no-op, this is only required in case of tracer with cls.
/**
     * Starts a tracer.
     * @param config A tracer configuration object to start a tracer.
     */start(config){cov_m5uq6mk1b().f[3]++;cov_m5uq6mk1b().s[18]++;this.activeLocal=true;cov_m5uq6mk1b().s[19]++;this.config=config;cov_m5uq6mk1b().s[20]++;this.logger=(cov_m5uq6mk1b().b[2][0]++,this.config.logger)||(cov_m5uq6mk1b().b[2][1]++,logger.logger());cov_m5uq6mk1b().s[21]++;this.sampler=sampler_1.SamplerBuilder.getSampler((cov_m5uq6mk1b().b[3][0]++,config.samplingRate)||(cov_m5uq6mk1b().b[3][1]++,sampler_1.DEFAULT_SAMPLING_RATE));cov_m5uq6mk1b().s[22]++;if(config.traceParams){cov_m5uq6mk1b().b[4][0]++;cov_m5uq6mk1b().s[23]++;this.activeTraceParams.numberOfAnnontationEventsPerSpan=sampler_1.TraceParamsBuilder.getNumberOfAnnotationEventsPerSpan(config.traceParams);cov_m5uq6mk1b().s[24]++;this.activeTraceParams.numberOfAttributesPerSpan=sampler_1.TraceParamsBuilder.getNumberOfAttributesPerSpan(config.traceParams);cov_m5uq6mk1b().s[25]++;this.activeTraceParams.numberOfMessageEventsPerSpan=sampler_1.TraceParamsBuilder.getNumberOfMessageEventsPerSpan(config.traceParams);cov_m5uq6mk1b().s[26]++;this.activeTraceParams.numberOfLinksPerSpan=sampler_1.TraceParamsBuilder.getNumberOfLinksPerSpan(config.traceParams);}else{cov_m5uq6mk1b().b[4][1]++;}cov_m5uq6mk1b().s[27]++;return this;}/** Stops the tracer. */stop(){cov_m5uq6mk1b().f[4]++;cov_m5uq6mk1b().s[28]++;this.activeLocal=false;cov_m5uq6mk1b().s[29]++;return this;}/** Gets the list of event listeners. */get eventListeners(){cov_m5uq6mk1b().f[5]++;cov_m5uq6mk1b().s[30]++;return this.eventListenersLocal;}/** Indicates if the tracer is active or not. */get active(){cov_m5uq6mk1b().f[6]++;cov_m5uq6mk1b().s[31]++;return this.activeLocal;}/**
     * Starts a root span.
     * @param options A TraceOptions object to start a root span.
     * @param fn A callback function to run after starting a root span.
     */startRootSpan(options,fn){cov_m5uq6mk1b().f[7]++;const spanContext=(cov_m5uq6mk1b().s[32]++,(cov_m5uq6mk1b().b[5][0]++,options.spanContext)||(cov_m5uq6mk1b().b[5][1]++,{spanId:'',traceId:uuid.v4().split('-').join('')}));const parentSpanId=(cov_m5uq6mk1b().s[33]++,spanContext.spanId);const traceId=(cov_m5uq6mk1b().s[34]++,spanContext.traceId);const name=(cov_m5uq6mk1b().s[35]++,(cov_m5uq6mk1b().b[6][0]++,options.name)||(cov_m5uq6mk1b().b[6][1]++,'span'));const kind=(cov_m5uq6mk1b().s[36]++,(cov_m5uq6mk1b().b[7][0]++,options.kind)||(cov_m5uq6mk1b().b[7][1]++,types.SpanKind.UNSPECIFIED));const traceState=(cov_m5uq6mk1b().s[37]++,spanContext.traceState);// Tracer is active
cov_m5uq6mk1b().s[38]++;if(this.active){cov_m5uq6mk1b().b[8][0]++;const sampleDecision=(cov_m5uq6mk1b().s[39]++,this.makeSamplingDecision(options,traceId));// Sampling is on
cov_m5uq6mk1b().s[40]++;if(sampleDecision){cov_m5uq6mk1b().b[9][0]++;const rootSpan=(cov_m5uq6mk1b().s[41]++,new root_span_1.RootSpan(this,name,kind,traceId,parentSpanId,traceState));// Add default attributes
const defaultAttributes=(cov_m5uq6mk1b().s[42]++,(cov_m5uq6mk1b().b[10][0]++,this.config)&&(cov_m5uq6mk1b().b[10][1]++,this.config.defaultAttributes));cov_m5uq6mk1b().s[43]++;if(defaultAttributes){cov_m5uq6mk1b().b[11][0]++;cov_m5uq6mk1b().s[44]++;Object.keys(defaultAttributes).forEach(key=>{cov_m5uq6mk1b().f[8]++;cov_m5uq6mk1b().s[45]++;rootSpan.addAttribute(key,defaultAttributes[key]);});}else{cov_m5uq6mk1b().b[11][1]++;}cov_m5uq6mk1b().s[46]++;rootSpan.start();cov_m5uq6mk1b().s[47]++;return fn(rootSpan);}else{cov_m5uq6mk1b().b[9][1]++;}// Sampling is off
cov_m5uq6mk1b().s[48]++;this.logger.debug('Sampling is off, starting new no record root span');}else{cov_m5uq6mk1b().b[8][1]++;cov_m5uq6mk1b().s[49]++;// Tracer is inactive
this.logger.debug('Tracer is inactive, starting new no record root span');}const noRecordRootSpan=(cov_m5uq6mk1b().s[50]++,new no_record_root_span_1.NoRecordRootSpan(this,name,kind,traceId,parentSpanId,traceState));cov_m5uq6mk1b().s[51]++;return fn(noRecordRootSpan);}/** Notifies listeners of the span start. */onStartSpan(span){cov_m5uq6mk1b().f[9]++;cov_m5uq6mk1b().s[52]++;if(!this.active){cov_m5uq6mk1b().b[12][0]++;cov_m5uq6mk1b().s[53]++;return;}else{cov_m5uq6mk1b().b[12][1]++;}cov_m5uq6mk1b().s[54]++;this.notifyStartSpan(span);}/** Notifies listeners of the span end. */onEndSpan(span){cov_m5uq6mk1b().f[10]++;cov_m5uq6mk1b().s[55]++;if(!this.active){cov_m5uq6mk1b().b[13][0]++;cov_m5uq6mk1b().s[56]++;return;}else{cov_m5uq6mk1b().b[13][1]++;}cov_m5uq6mk1b().s[57]++;this.notifyEndSpan(span);}/**
     * Registers an end span event listener.
     * @param listener The listener to register.
     */registerSpanEventListener(listener){cov_m5uq6mk1b().f[11]++;cov_m5uq6mk1b().s[58]++;this.eventListenersLocal.push(listener);}/**
     * Unregisters an end span event listener.
     * @param listener The listener to unregister.
     */unregisterSpanEventListener(listener){cov_m5uq6mk1b().f[12]++;const index=(cov_m5uq6mk1b().s[59]++,this.eventListenersLocal.indexOf(listener,0));cov_m5uq6mk1b().s[60]++;if(index>-1){cov_m5uq6mk1b().b[14][0]++;cov_m5uq6mk1b().s[61]++;this.eventListeners.splice(index,1);}else{cov_m5uq6mk1b().b[14][1]++;}}notifyStartSpan(span){cov_m5uq6mk1b().f[13]++;cov_m5uq6mk1b().s[62]++;this.logger.debug('starting to notify listeners the start of spans');cov_m5uq6mk1b().s[63]++;for(const listener of this.eventListenersLocal){cov_m5uq6mk1b().s[64]++;listener.onStartSpan(span);}}notifyEndSpan(span){cov_m5uq6mk1b().f[14]++;cov_m5uq6mk1b().s[65]++;this.logger.debug('starting to notify listeners the end of spans');cov_m5uq6mk1b().s[66]++;for(const listener of this.eventListenersLocal){cov_m5uq6mk1b().s[67]++;listener.onEndSpan(span);}}/**
     * Starts a span.
     * @param [options] A SpanOptions object to start a child span.
     */startChildSpan(options){cov_m5uq6mk1b().f[15]++;cov_m5uq6mk1b().s[68]++;if((cov_m5uq6mk1b().b[16][0]++,!options)||(cov_m5uq6mk1b().b[16][1]++,!options.childOf)){cov_m5uq6mk1b().b[15][0]++;cov_m5uq6mk1b().s[69]++;this.logger.debug('no current trace found - must start a new root span first');cov_m5uq6mk1b().s[70]++;return new no_record_span_1.NoRecordSpan(this);}else{cov_m5uq6mk1b().b[15][1]++;}const span=(cov_m5uq6mk1b().s[71]++,options.childOf.startChildSpan(options));// Add default attributes
const defaultAttributes=(cov_m5uq6mk1b().s[72]++,(cov_m5uq6mk1b().b[17][0]++,this.config)&&(cov_m5uq6mk1b().b[17][1]++,this.config.defaultAttributes));cov_m5uq6mk1b().s[73]++;if(defaultAttributes){cov_m5uq6mk1b().b[18][0]++;cov_m5uq6mk1b().s[74]++;Object.keys(defaultAttributes).forEach(key=>{cov_m5uq6mk1b().f[16]++;cov_m5uq6mk1b().s[75]++;span.addAttribute(key,defaultAttributes[key]);});}else{cov_m5uq6mk1b().b[18][1]++;}cov_m5uq6mk1b().s[76]++;return span;}/** Determine whether to sample request or not. */makeSamplingDecision(options,traceId){cov_m5uq6mk1b().f[17]++;cov_m5uq6mk1b().s[77]++;// If users set a specific sampler in the TraceOptions, use it.
if((cov_m5uq6mk1b().b[20][0]++,options)&&(cov_m5uq6mk1b().b[20][1]++,options.samplingRate!==undefined)&&(cov_m5uq6mk1b().b[20][2]++,options.samplingRate!==null)){cov_m5uq6mk1b().b[19][0]++;cov_m5uq6mk1b().s[78]++;return sampler_1.SamplerBuilder.getSampler(options.samplingRate).shouldSample(traceId);}else{cov_m5uq6mk1b().b[19][1]++;}let propagatedSample=(cov_m5uq6mk1b().s[79]++,null);// if there is a context propagation, keep the decision
cov_m5uq6mk1b().s[80]++;if((cov_m5uq6mk1b().b[22][0]++,options)&&(cov_m5uq6mk1b().b[22][1]++,options.spanContext)&&(cov_m5uq6mk1b().b[22][2]++,options.spanContext.options!==undefined)){cov_m5uq6mk1b().b[21][0]++;cov_m5uq6mk1b().s[81]++;propagatedSample=(options.spanContext.options&this.IS_SAMPLED)!==0;cov_m5uq6mk1b().s[82]++;return!!propagatedSample;}else{cov_m5uq6mk1b().b[21][1]++;}// default global sampler
cov_m5uq6mk1b().s[83]++;return this.sampler.shouldSample(traceId);}}cov_m5uq6mk1b().s[84]++;exports.CoreTracerBase=CoreTracerBase;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,