{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-metric-producer.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-metric-producer.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,iCAAiC;AAEjC,gCAOgB;AAChB,uDAIqC;AACrC,kEAAsE;AAEtE,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;IACzC,MAAM,sBAAsB,GAAG,IAAI,wCAAsB,CAAC,iBAAW,CAAC,CAAC;IAEvE,0BAA0B;IAC1B,MAAM,SAAS,GAAG,iBAAiB,CAAC;IACpC,MAAM,SAAS,GAAG,iBAAiB,CAAC;IACpC,MAAM,SAAS,GAAG,iBAAiB,CAAC;IACpC,MAAM,WAAW,GAAG,kBAAkB,CAAC;IAEvC,MAAM,aAAa,GAAG,iBAAW,CAAC,mBAAmB,CACnD,2BAA2B,EAC3B,iBAAW,CAAC,IAAI,EAChB,gBAAgB,CACjB,CAAC;IACF,MAAM,OAAO,GAAG,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC;IAC7D,MAAM,MAAM,GAAG,IAAI,YAAM,EAAE,CAAC;IAC5B,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,KAAK,EAAE,YAAY,EAAE,CAAC,CAAC;IAChD,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,KAAK,EAAE,YAAY,EAAE,CAAC,CAAC;IAChD,MAAM,SAAS,GAAe;QAC5B,EAAE,GAAG,EAAE,UAAU,EAAE,WAAW,EAAE,EAAE,EAAE;QACpC,EAAE,GAAG,EAAE,UAAU,EAAE,WAAW,EAAE,EAAE,EAAE;KACrC,CAAC;IACF,MAAM,WAAW,GAAiB;QAChC,EAAE,KAAK,EAAE,YAAY,EAAE;QACvB,EAAE,KAAK,EAAE,YAAY,EAAE;KACxB,CAAC;IACF,MAAM,YAAY,GAAgB,EAAE,OAAO,EAAE,aAAa,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;IACxE,MAAM,YAAY,GAAgB,EAAE,OAAO,EAAE,aAAa,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC;IAEzE,qBAAqB;IACrB,MAAM,yBAAyB,GAAG;QAChC,IAAI,EAAE,SAAS;QACf,WAAW;QACX,SAAS;QACT,IAAI,EAAE,iBAAW,CAAC,IAAI;QACtB,IAAI,EAAE,4BAAoB,CAAC,iBAAiB;KAC7C,CAAC;IACF,MAAM,yBAAyB,GAAG;QAChC,IAAI,EAAE,SAAS;QACf,WAAW;QACX,SAAS;QACT,IAAI,EAAE,iBAAW,CAAC,IAAI;QACtB,IAAI,EAAE,4BAAoB,CAAC,gBAAgB;KAC5C,CAAC;IACF,MAAM,yBAAyB,GAAG;QAChC,IAAI,EAAE,SAAS;QACf,WAAW;QACX,SAAS;QACT,IAAI,EAAE,iBAAW,CAAC,IAAI;QACtB,IAAI,EAAE,4BAAoB,CAAC,YAAY;KACxC,CAAC;IACF,MAAM,yBAAyB,GAAG;QAChC,IAAI,EAAE,SAAS;QACf,WAAW;QACX,SAAS;QACT,IAAI,EAAE,iBAAW,CAAC,IAAI;QACtB,IAAI,EAAE,4BAAoB,CAAC,uBAAuB;KACnD,CAAC;IAEF,EAAE,CAAC,sBAAsB,EAAE,GAAG,EAAE;QAC9B,MAAM,IAAI,GAAS,iBAAW,CAAC,UAAU,CACvC,SAAS,EACT,aAAa,EACb,qBAAe,CAAC,GAAG,EACnB,OAAO,EACP,WAAW,CACZ,CAAC;QACF,iBAAW,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAC/B,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;QAE7C,MAAM,OAAO,GAAG,sBAAsB,CAAC,UAAU,EAAE,CAAC;QAEpD,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACtC,MAAM,CACJ,EAAE,UAAU,EAAE,uBAAuB,EAAE,UAAU,EAAE,iBAAiB,EAAE,EACvE,GAAG,OAAO,CAAC;QACZ,MAAM,CAAC,eAAe,CAAC,uBAAuB,EAAE,yBAAyB,CAAC,CAAC;QAC3E,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAChD,MAAM,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;QACtE,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAChC,MAAM,IAAI,GAAS,iBAAW,CAAC,UAAU,CACvC,SAAS,EACT,aAAa,EACb,qBAAe,CAAC,KAAK,EACrB,OAAO,EACP,WAAW,CACZ,CAAC;QACF,iBAAW,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAC/B,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;QAE7C,IAAI,OAAO,GAAG,sBAAsB,CAAC,UAAU,EAAE,CAAC;QAElD,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACtC,MAAM,CACJ,EAAE,UAAU,EAAE,uBAAuB,EAAE,UAAU,EAAE,iBAAiB,EAAE,EACtE,EAAE,UAAU,EAAE,uBAAuB,EAAE,UAAU,EAAE,iBAAiB,EAAE,EACvE,GAAG,OAAO,CAAC;QACZ,MAAM,CAAC,eAAe,CAAC,uBAAuB,EAAE,yBAAyB,CAAC,CAAC;QAC3E,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAChD,MAAM,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;QACtE,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAC7D,MAAM,CAAC,eAAe,CAAC,uBAAuB,EAAE,yBAAyB,CAAC,CAAC;QAC3E,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAChD,MAAM,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;QACtE,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAE5D,oBAAoB;QACpB,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;QAC7C,OAAO,GAAG,sBAAsB,CAAC,UAAU,EAAE,CAAC;QAC9C,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IACtE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4BAA4B,EAAE,GAAG,EAAE;QACpC,MAAM,IAAI,GAAS,iBAAW,CAAC,UAAU,CACvC,SAAS,EACT,aAAa,EACb,qBAAe,CAAC,UAAU,EAC1B,OAAO,EACP,WAAW,CACZ,CAAC;QACF,iBAAW,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAC/B,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;QAC7C,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;QAE7C,MAAM,OAAO,GAAG,sBAAsB,CAAC,UAAU,EAAE,CAAC;QAEpD,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACtC,MAAM,CACJ,EAAE,UAAU,EAAE,uBAAuB,EAAE,UAAU,EAAE,iBAAiB,EAAE,EACtE,EAAE,UAAU,EAAE,uBAAuB,EAAE,UAAU,EAAE,iBAAiB,EAAE,EACtE,EAAE,UAAU,EAAE,uBAAuB,EAAE,UAAU,EAAE,iBAAiB,EAAE,EACvE,GAAG,OAAO,CAAC;QACZ,MAAM,CAAC,eAAe,CAAC,uBAAuB,EAAE,yBAAyB,CAAC,CAAC;QAC3E,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAChD,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAChD,MAAM,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;QACtE,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAC7D,MAAM,CAAC,eAAe,CAAC,uBAAuB,EAAE,yBAAyB,CAAC,CAAC;QAC3E,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAChD,MAAM,CAAC,eAAe,CAAC,uBAAuB,EAAE,yBAAyB,CAAC,CAAC;QAC3E,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAChD,MAAM,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;QACtE,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IAChE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE,GAAG,EAAE;QACvC,MAAM,iBAAiB,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QACpD,MAAM,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC1B,MAAM,IAAI,GAAS,iBAAW,CAAC,UAAU,CACvC,SAAS,EACT,aAAa,EACb,qBAAe,CAAC,YAAY,EAC5B,OAAO,EACP,WAAW,EACX,OAAO,CACR,CAAC;QACF,iBAAW,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAC/B,KAAK,MAAM,KAAK,IAAI,iBAAiB,EAAE;YACrC,MAAM,WAAW,GAAgB,EAAE,OAAO,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC;YACnE,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;SAC7C;QAED,MAAM,OAAO,GAAG,sBAAsB,CAAC,UAAU,EAAE,CAAC;QAEpD,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACtC,MAAM,CACJ,EAAE,UAAU,EAAE,uBAAuB,EAAE,UAAU,EAAE,iBAAiB,EAAE,EACtE,EAAE,UAAU,EAAE,uBAAuB,EAAE,UAAU,EAAE,iBAAiB,EAAE,EACtE,EAAE,UAAU,EAAE,uBAAuB,EAAE,UAAU,EAAE,iBAAiB,EAAE,EACtE,EAAE,UAAU,EAAE,uBAAuB,EAAE,UAAU,EAAE,iBAAiB,EAAE,EACvE,GAAG,OAAO,CAAC;QACZ,MAAM,CAAC,eAAe,CAAC,uBAAuB,EAAE,yBAAyB,CAAC,CAAC;QAC3E,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAChD,MAAM,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;QACtE,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAC7D,MAAM,CAAC,eAAe,CAAC,uBAAuB,EAAE,yBAAyB,CAAC,CAAC;QAC3E,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAChD,MAAM,CAAC,eAAe,CAAC,uBAAuB,EAAE,yBAAyB,CAAC,CAAC;QAC3E,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAChD,MAAM,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;QACtE,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAC9D,MAAM,CAAC,eAAe,CAAC,uBAAuB,EAAE,yBAAyB,CAAC,CAAC;QAC3E,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAChD,MAAM,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;QACtE,MAAM,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE;YAC3D,aAAa,EAAE,EAAE,QAAQ,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE;YAClD,OAAO,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;YACjE,KAAK,EAAE,CAAC;YACR,GAAG,EAAE,kBAAkB;YACvB,qBAAqB,EAAE,kBAAkB;SAC1C,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\n\nimport {\n  AggregationType,\n  globalStats,\n  Measurement,\n  MeasureUnit,\n  TagMap,\n  View,\n} from '../src';\nimport {\n  LabelKey,\n  LabelValue,\n  MetricDescriptorType,\n} from '../src/metrics/export/types';\nimport { MetricProducerForStats } from '../src/stats/metric-producer';\n\ndescribe('Metric producer for stats', () => {\n  const metricProducerForStats = new MetricProducerForStats(globalStats);\n\n  // constants for view name\n  const viewName1 = 'test/view/name1';\n  const viewName2 = 'test/view/name2';\n  const viewName3 = 'test/view/name2';\n  const description = 'test description';\n\n  const measureDouble = globalStats.createMeasureDouble(\n    'opencensus.io/test/double',\n    MeasureUnit.UNIT,\n    'Measure Double'\n  );\n  const tagKeys = [{ name: 'testKey1' }, { name: 'testKey2' }];\n  const tagMap = new TagMap();\n  tagMap.set(tagKeys[0], { value: 'testValue1' });\n  tagMap.set(tagKeys[1], { value: 'testValue2' });\n  const labelKeys: LabelKey[] = [\n    { key: 'testKey1', description: '' },\n    { key: 'testKey2', description: '' },\n  ];\n  const labelValues: LabelValue[] = [\n    { value: 'testValue1' },\n    { value: 'testValue2' },\n  ];\n  const measurement1: Measurement = { measure: measureDouble, value: 25 };\n  const measurement2: Measurement = { measure: measureDouble, value: 300 };\n\n  // expected constants\n  const expectedMetricDescriptor1 = {\n    name: viewName1,\n    description,\n    labelKeys,\n    unit: MeasureUnit.UNIT,\n    type: MetricDescriptorType.CUMULATIVE_DOUBLE,\n  };\n  const expectedMetricDescriptor2 = {\n    name: viewName2,\n    description,\n    labelKeys,\n    unit: MeasureUnit.UNIT,\n    type: MetricDescriptorType.CUMULATIVE_INT64,\n  };\n  const expectedMetricDescriptor3 = {\n    name: viewName3,\n    description,\n    labelKeys,\n    unit: MeasureUnit.UNIT,\n    type: MetricDescriptorType.GAUGE_DOUBLE,\n  };\n  const expectedMetricDescriptor4 = {\n    name: viewName3,\n    description,\n    labelKeys,\n    unit: MeasureUnit.UNIT,\n    type: MetricDescriptorType.CUMULATIVE_DISTRIBUTION,\n  };\n\n  it('should add sum stats', () => {\n    const view: View = globalStats.createView(\n      viewName1,\n      measureDouble,\n      AggregationType.SUM,\n      tagKeys,\n      description\n    );\n    globalStats.registerView(view);\n    view.recordMeasurement(measurement1, tagMap);\n\n    const metrics = metricProducerForStats.getMetrics();\n\n    assert.strictEqual(metrics.length, 1);\n    const [\n      { descriptor: actualMetricDescriptor1, timeseries: actualTimeSeries1 },\n    ] = metrics;\n    assert.deepStrictEqual(actualMetricDescriptor1, expectedMetricDescriptor1);\n    assert.strictEqual(actualTimeSeries1.length, 1);\n    assert.deepStrictEqual(actualTimeSeries1[0].labelValues, labelValues);\n    assert.strictEqual(actualTimeSeries1[0].points[0].value, 25);\n  });\n\n  it('should add count stats', () => {\n    const view: View = globalStats.createView(\n      viewName2,\n      measureDouble,\n      AggregationType.COUNT,\n      tagKeys,\n      description\n    );\n    globalStats.registerView(view);\n    view.recordMeasurement(measurement1, tagMap);\n\n    let metrics = metricProducerForStats.getMetrics();\n\n    assert.strictEqual(metrics.length, 2);\n    const [\n      { descriptor: actualMetricDescriptor1, timeseries: actualTimeSeries1 },\n      { descriptor: actualMetricDescriptor2, timeseries: actualTimeSeries2 },\n    ] = metrics;\n    assert.deepStrictEqual(actualMetricDescriptor1, expectedMetricDescriptor1);\n    assert.strictEqual(actualTimeSeries1.length, 1);\n    assert.deepStrictEqual(actualTimeSeries1[0].labelValues, labelValues);\n    assert.strictEqual(actualTimeSeries1[0].points[0].value, 25);\n    assert.deepStrictEqual(actualMetricDescriptor2, expectedMetricDescriptor2);\n    assert.strictEqual(actualTimeSeries2.length, 1);\n    assert.deepStrictEqual(actualTimeSeries2[0].labelValues, labelValues);\n    assert.strictEqual(actualTimeSeries2[0].points[0].value, 1);\n\n    // update count view\n    view.recordMeasurement(measurement2, tagMap);\n    metrics = metricProducerForStats.getMetrics();\n    assert.deepStrictEqual(metrics[1].timeseries[0].points[0].value, 2);\n  });\n\n  it('should add lastValue stats', () => {\n    const view: View = globalStats.createView(\n      viewName3,\n      measureDouble,\n      AggregationType.LAST_VALUE,\n      tagKeys,\n      description\n    );\n    globalStats.registerView(view);\n    view.recordMeasurement(measurement1, tagMap);\n    view.recordMeasurement(measurement2, tagMap);\n\n    const metrics = metricProducerForStats.getMetrics();\n\n    assert.strictEqual(metrics.length, 3);\n    const [\n      { descriptor: actualMetricDescriptor1, timeseries: actualTimeSeries1 },\n      { descriptor: actualMetricDescriptor2, timeseries: actualTimeSeries2 },\n      { descriptor: actualMetricDescriptor3, timeseries: actualTimeSeries3 },\n    ] = metrics;\n    assert.deepStrictEqual(actualMetricDescriptor1, expectedMetricDescriptor1);\n    assert.strictEqual(actualTimeSeries1.length, 1);\n    assert.strictEqual(actualTimeSeries1.length, 1);\n    assert.deepStrictEqual(actualTimeSeries1[0].labelValues, labelValues);\n    assert.strictEqual(actualTimeSeries1[0].points[0].value, 25);\n    assert.deepStrictEqual(actualMetricDescriptor2, expectedMetricDescriptor2);\n    assert.strictEqual(actualTimeSeries2.length, 1);\n    assert.deepStrictEqual(actualMetricDescriptor3, expectedMetricDescriptor3);\n    assert.strictEqual(actualTimeSeries3.length, 1);\n    assert.deepStrictEqual(actualTimeSeries3[0].labelValues, labelValues);\n    assert.strictEqual(actualTimeSeries3[0].points[0].value, 300);\n  });\n\n  it('should add distribution stats', () => {\n    const measurementValues = [1.1, 2.3, 3.2, 4.3, 5.2];\n    const buckets = [2, 4, 6];\n    const view: View = globalStats.createView(\n      viewName3,\n      measureDouble,\n      AggregationType.DISTRIBUTION,\n      tagKeys,\n      description,\n      buckets\n    );\n    globalStats.registerView(view);\n    for (const value of measurementValues) {\n      const measurement: Measurement = { measure: measureDouble, value };\n      view.recordMeasurement(measurement, tagMap);\n    }\n\n    const metrics = metricProducerForStats.getMetrics();\n\n    assert.strictEqual(metrics.length, 4);\n    const [\n      { descriptor: actualMetricDescriptor1, timeseries: actualTimeSeries1 },\n      { descriptor: actualMetricDescriptor2, timeseries: actualTimeSeries2 },\n      { descriptor: actualMetricDescriptor3, timeseries: actualTimeSeries3 },\n      { descriptor: actualMetricDescriptor4, timeseries: actualTimeSeries4 },\n    ] = metrics;\n    assert.deepStrictEqual(actualMetricDescriptor1, expectedMetricDescriptor1);\n    assert.strictEqual(actualTimeSeries1.length, 1);\n    assert.deepStrictEqual(actualTimeSeries1[0].labelValues, labelValues);\n    assert.strictEqual(actualTimeSeries1[0].points[0].value, 25);\n    assert.deepStrictEqual(actualMetricDescriptor2, expectedMetricDescriptor2);\n    assert.strictEqual(actualTimeSeries2.length, 1);\n    assert.deepStrictEqual(actualMetricDescriptor3, expectedMetricDescriptor3);\n    assert.strictEqual(actualTimeSeries3.length, 1);\n    assert.deepStrictEqual(actualTimeSeries3[0].labelValues, labelValues);\n    assert.strictEqual(actualTimeSeries3[0].points[0].value, 300);\n    assert.deepStrictEqual(actualMetricDescriptor4, expectedMetricDescriptor4);\n    assert.strictEqual(actualTimeSeries4.length, 1);\n    assert.deepStrictEqual(actualTimeSeries4[0].labelValues, labelValues);\n    assert.deepStrictEqual(actualTimeSeries4[0].points[0].value, {\n      bucketOptions: { explicit: { bounds: [2, 4, 6] } },\n      buckets: [{ count: 1 }, { count: 2 }, { count: 2 }, { count: 0 }],\n      count: 5,\n      sum: 16.099999999999998,\n      sumOfSquaredDeviation: 10.427999999999997,\n    });\n  });\n});\n"]}