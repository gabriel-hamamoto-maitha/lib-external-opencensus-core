{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/validations.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/validations.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAIH;;;;;;;GAOG;AACH,SAAgB,eAAe,CAAI,SAAY,EAAE,YAAoB;IACnE,IAAI,SAAS,KAAK,IAAI,IAAI,SAAS,KAAK,SAAS,EAAE;QACjD,MAAM,IAAI,KAAK,CAAC,qBAAqB,YAAY,YAAY,CAAC,CAAC;KAChE;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AALD,0CAKC;AAED;;;;;GAKG;AACH,SAAgB,4BAA4B,CAC1C,KAAU,EACV,YAAoB;IAEpB,MAAM,aAAa,GAAG,KAAK,CAAC,KAAK,CAC/B,OAAO,CAAC,EAAE,CAAC,OAAO,KAAK,IAAI,IAAI,OAAO,OAAO,KAAK,WAAW,CAC9D,CAAC;IACF,IAAI,CAAC,aAAa,EAAE;QAClB,MAAM,IAAI,KAAK,CAAC,GAAG,YAAY,gCAAgC,CAAC,CAAC;KAClE;AACH,CAAC;AAVD,oEAUC;AAED,0DAA0D;AAC1D,SAAgB,yBAAyB,CACvC,GAAc,EACd,YAAoB;IAEpB,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,GAAG,CAAC,OAAO,EAAE,EAAE;QACxC,IAAI,GAAG,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,EAAE;YAChC,MAAM,IAAI,KAAK,CAAC,GAAG,YAAY,gCAAgC,CAAC,CAAC;SAClE;KACF;AACH,CAAC;AATD,8DASC;AAED,sEAAsE;AACtE,SAAgB,qBAAqB,CACnC,IAAgB,EAChB,cAAyC;IAEzC,MAAM,mBAAmB,GAAG,IAAI,GAAG,CACjC,CAAC,GAAG,IAAI,EAAE,GAAG,cAAc,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CACpD,CAAC;IACF,IAAI,mBAAmB,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,GAAG,cAAc,CAAC,IAAI,EAAE;QAClE,MAAM,IAAI,KAAK,CACb,iHAAiH,CAClH,CAAC;KACH;AACH,CAAC;AAZD,sDAYC","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LabelKey, LabelValue } from '../metrics/export/types';\n\n/**\n * Validates that an object reference passed as a parameter to the calling\n * method is not null.\n *\n * @param reference An object reference.\n * @param errorMessage The exception message to use if the check fails.\n * @returns An object reference.\n */\nexport function validateNotNull<T>(reference: T, errorMessage: string): T {\n  if (reference === null || reference === undefined) {\n    throw new Error(`Missing mandatory ${errorMessage} parameter`);\n  }\n  return reference;\n}\n\n/**\n * Validates that an array passed as a parameter doesn't contain null element.\n *\n * @param list The argument list to check for null.\n * @param errorMessage The exception message to use if the check fails.\n */\nexport function validateArrayElementsNotNull<T>(\n  array: T[],\n  errorMessage: string\n) {\n  const areAllDefined = array.every(\n    element => element !== null && typeof element !== 'undefined'\n  );\n  if (!areAllDefined) {\n    throw new Error(`${errorMessage} elements should not be a NULL`);\n  }\n}\n\n/** Throws an error if any of the map elements is null. */\nexport function validateMapElementNotNull<K, V>(\n  map: Map<K, V>,\n  errorMessage: string\n) {\n  for (const [key, value] of map.entries()) {\n    if (key == null || value == null) {\n      throw new Error(`${errorMessage} elements should not be a NULL`);\n    }\n  }\n}\n\n/** Throws an error if any of the array element present in the map. */\nexport function validateDuplicateKeys(\n  keys: LabelKey[],\n  constantLabels: Map<LabelKey, LabelValue>\n) {\n  const keysAndConstantKeys = new Set(\n    [...keys, ...constantLabels.keys()].map(k => k.key)\n  );\n  if (keysAndConstantKeys.size !== keys.length + constantLabels.size) {\n    throw new Error(\n      `The keys from LabelKeys should not be present in constantLabels or LabelKeys should not contains duplicate keys`\n    );\n  }\n}\n"]}