{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/instrumentation/types.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/instrumentation/types.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Stats } from '../../stats/types';\nimport { Span, TracerBase } from '../model/types';\n\n/** Interface Plugin to apply patch. */\nexport interface Plugin {\n  /**\n   * Method that enables the instrumentation patch.\n   *\n   * @param moduleExports nodejs module exports from the module to patch\n   * @param tracer a tracer instance\n   * @param version version of the current instaled module to patch\n   * @param options plugin options\n   * @param basedir an optional module absolute path\n   * @param stats an optional stats instance\n   */\n  enable<T>(\n    moduleExports: T,\n    tracer: TracerBase,\n    version: string,\n    options: PluginConfig,\n    basedir?: string,\n    stats?: Stats\n  ): T;\n  /** Method to disable the instrumentation  */\n  disable(): void;\n}\n\n/**\n * Function that can be provided to plugin in order to add custom\n * attributes to spans\n */\nexport interface CustomAttributeFunction {\n  // tslint:disable-next-line:no-any\n  (span: Span, ...rest: any[]): void;\n}\n\nexport interface PluginConfig {\n  // tslint:disable-next-line:no-any\n  [key: string]: any;\n  applyCustomAttributesOnSpan?: CustomAttributeFunction;\n}\n\nexport interface NamedPluginConfig {\n  module: string;\n  config: PluginConfig;\n}\n\n/**\n * Type PluginNames: each key should be the name of the module to trace,\n * and its value should be the name of the package  which has the\n * plugin implementation.\n */\nexport interface PluginNames {\n  [pluginName: string]: string | NamedPluginConfig;\n}\n\nexport interface PluginInternalFilesVersion {\n  [pluginName: string]: string;\n}\n\n/**\n * Each key should be the name of the module to trace, and its value\n * a mapping of a property name to a internal plugin file name.\n */\nexport interface PluginInternalFiles {\n  [versions: string]: PluginInternalFilesVersion;\n}\n"]}