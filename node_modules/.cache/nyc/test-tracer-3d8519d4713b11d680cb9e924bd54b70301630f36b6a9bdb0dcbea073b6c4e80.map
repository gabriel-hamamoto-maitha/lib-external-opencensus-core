{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-tracer.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-tracer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\n\nimport { TracerConfig } from '../src/trace/config/types';\nimport { NoRecordSpan } from '../src/trace/model/no-record/no-record-span';\nimport { Span } from '../src/trace/model/span';\nimport { CoreTracer } from '../src/trace/model/tracer';\nimport * as types from '../src/trace/model/types';\n\nconst defaultConfig: TracerConfig = {\n  samplingRate: 1.0, // always sampler\n};\n\ndescribe('Tracer', () => {\n  const options = { name: 'test' };\n\n  /** Should create a Tracer instance */\n  describe('new Tracer()', () => {\n    it('should create a Tracer instance', () => {\n      const tracer = new CoreTracer();\n      assert.ok(tracer instanceof CoreTracer);\n    });\n  });\n\n  /** Should get/set the current RootSpan from tracer instance */\n  describe('get/set currentRootSpan()', () => {\n    const tracer = new CoreTracer().start(defaultConfig);\n    it('should get the current RootSpan from tracer instance', () => {\n      tracer.startRootSpan(options, root => {\n        assert.ok(root);\n        assert.ok(tracer.currentRootSpan instanceof Span);\n        assert.strictEqual(tracer.currentRootSpan, root);\n      });\n    });\n  });\n\n  /** Should create and start a new RootSpan instance with options */\n  describe('startRootSpan() with options', () => {\n    let rootSpanLocal: types.Span;\n    let tracer: types.Tracer;\n    before(() => {\n      tracer = new CoreTracer();\n      tracer.start(defaultConfig);\n      tracer.startRootSpan(options, rootSpan => {\n        rootSpanLocal = rootSpan;\n      });\n    });\n    it('should create a new RootSpan instance', () => {\n      assert.ok(rootSpanLocal instanceof Span);\n    });\n    it('should set current root span', () => {\n      tracer.startRootSpan(options, rootSpan => {\n        assert.ok(tracer.currentRootSpan instanceof Span);\n        assert.strictEqual(tracer.currentRootSpan, rootSpan);\n      });\n    });\n  });\n\n  /** Should set the current root span to null */\n  describe('clearCurrentRootSpan()', () => {\n    it('should set the current root span to null', () => {\n      const tracer = new CoreTracer();\n      tracer.start(defaultConfig);\n      tracer.startRootSpan(options, rootSpan => {\n        assert.ok(tracer.currentRootSpan instanceof Span);\n        assert.strictEqual(tracer.currentRootSpan, rootSpan);\n        tracer.clearCurrentTrace();\n        assert.strictEqual(tracer.currentRootSpan, null);\n      });\n    });\n  });\n\n  /** Should create and start a Span instance into a rootSpan */\n  describe('startChildSpan()', () => {\n    let span: types.Span;\n    let rootSpanLocal: types.Span;\n    let tracer: types.TracerBase;\n    before(() => {\n      tracer = new CoreTracer();\n      tracer.start(defaultConfig);\n      tracer.startRootSpan(options, rootSpan => {\n        rootSpanLocal = rootSpan;\n        span = tracer.startChildSpan({\n          name: 'spanName',\n          kind: types.SpanKind.CLIENT,\n        });\n      });\n    });\n    it('should create a Span instance', () => {\n      assert.ok(span instanceof Span);\n    });\n    it('should set child of to root span automatically', () => {\n      assert.strictEqual(rootSpanLocal.numberOfChildren, 1);\n      assert.ok(span.id);\n      // instance equal is not possible due circular dependencies\n      assert.strictEqual(rootSpanLocal.spans[0].id, span.id);\n    });\n  });\n\n  /** Should not create a Span instance */\n  describe('startChildSpan() before startRootSpan()', () => {\n    it('should create a NoRecordSpan instance, without a rootspan', () => {\n      const tracer = new CoreTracer();\n      tracer.start(defaultConfig);\n      const span = tracer.startChildSpan({\n        name: 'spanName',\n        kind: types.SpanKind.UNSPECIFIED,\n      });\n      assert.ok(span instanceof NoRecordSpan);\n    });\n  });\n});\n"]}