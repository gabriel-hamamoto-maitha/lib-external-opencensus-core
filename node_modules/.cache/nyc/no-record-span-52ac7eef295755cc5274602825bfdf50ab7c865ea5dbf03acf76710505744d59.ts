"use strict";function cov_2kxxtmzkkm(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/no-record/no-record-span.ts";var hash="a56396d30b992211c4b6e23f9b3ee685c30ce829";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/no-record/no-record-span.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:30}},"2":{start:{line:19,column:22},end:{line:19,column:60}},"3":{start:{line:20,column:15},end:{line:20,column:48}},"4":{start:{line:21,column:14},end:{line:21,column:33}},"5":{start:{line:22,column:18},end:{line:24,column:1}},"6":{start:{line:30,column:8},end:{line:30,column:34}},"7":{start:{line:32,column:8},end:{line:32,column:32}},"8":{start:{line:34,column:8},end:{line:34,column:47}},"9":{start:{line:36,column:8},end:{line:36,column:29}},"10":{start:{line:38,column:8},end:{line:38,column:30}},"11":{start:{line:40,column:8},end:{line:40,column:32}},"12":{start:{line:42,column:8},end:{line:42,column:24}},"13":{start:{line:44,column:8},end:{line:44,column:34}},"14":{start:{line:46,column:8},end:{line:46,column:32}},"15":{start:{line:48,column:8},end:{line:48,column:47}},"16":{start:{line:50,column:8},end:{line:50,column:32}},"17":{start:{line:52,column:8},end:{line:52,column:36}},"18":{start:{line:54,column:8},end:{line:54,column:40}},"19":{start:{line:56,column:8},end:{line:56,column:35}},"20":{start:{line:58,column:8},end:{line:58,column:41}},"21":{start:{line:60,column:8},end:{line:60,column:43}},"22":{start:{line:61,column:8},end:{line:61,column:29}},"23":{start:{line:62,column:8},end:{line:62,column:40}},"24":{start:{line:63,column:8},end:{line:69,column:9}},"25":{start:{line:64,column:12},end:{line:64,column:36}},"26":{start:{line:65,column:12},end:{line:65,column:37}},"27":{start:{line:68,column:12},end:{line:68,column:29}},"28":{start:{line:70,column:8},end:{line:70,column:69}},"29":{start:{line:74,column:8},end:{line:74,column:21}},"30":{start:{line:78,column:8},end:{line:78,column:18}},"31":{start:{line:82,column:8},end:{line:82,column:25}},"32":{start:{line:86,column:8},end:{line:88,column:9}},"33":{start:{line:87,column:12},end:{line:87,column:22}},"34":{start:{line:89,column:8},end:{line:89,column:34}},"35":{start:{line:93,column:8},end:{line:93,column:33}},"36":{start:{line:97,column:8},end:{line:97,column:31}},"37":{start:{line:101,column:8},end:{line:101,column:26}},"38":{start:{line:105,column:8},end:{line:105,column:18}},"39":{start:{line:109,column:8},end:{line:109,column:18}},"40":{start:{line:113,column:8},end:{line:113,column:17}},"41":{start:{line:117,column:8},end:{line:117,column:26}},"42":{start:{line:121,column:8},end:{line:126,column:10}},"43":{start:{line:130,column:8},end:{line:130,column:17}},"44":{start:{line:144,column:8},end:{line:144,column:33}},"45":{start:{line:148,column:8},end:{line:148,column:34}},"46":{start:{line:149,column:8},end:{line:149,column:31}},"47":{start:{line:158,column:30},end:{line:158,column:65}},"48":{start:{line:159,column:8},end:{line:160,column:46}},"49":{start:{line:160,column:12},end:{line:160,column:46}},"50":{start:{line:161,column:8},end:{line:162,column:46}},"51":{start:{line:162,column:12},end:{line:162,column:46}},"52":{start:{line:163,column:8},end:{line:163,column:30}},"53":{start:{line:164,column:8},end:{line:164,column:29}},"54":{start:{line:167,column:0},end:{line:167,column:36}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:28,column:4},end:{line:28,column:5}},loc:{start:{line:28,column:32},end:{line:71,column:5}},line:28},"1":{name:"(anonymous_1)",decl:{start:{line:73,column:4},end:{line:73,column:5}},loc:{start:{line:73,column:17},end:{line:75,column:5}},line:73},"2":{name:"(anonymous_2)",decl:{start:{line:77,column:4},end:{line:77,column:5}},loc:{start:{line:77,column:18},end:{line:79,column:5}},line:77},"3":{name:"(anonymous_3)",decl:{start:{line:81,column:4},end:{line:81,column:5}},loc:{start:{line:81,column:21},end:{line:83,column:5}},line:81},"4":{name:"(anonymous_4)",decl:{start:{line:85,column:4},end:{line:85,column:5}},loc:{start:{line:85,column:23},end:{line:90,column:5}},line:85},"5":{name:"(anonymous_5)",decl:{start:{line:92,column:4},end:{line:92,column:5}},loc:{start:{line:92,column:18},end:{line:94,column:5}},line:92},"6":{name:"(anonymous_6)",decl:{start:{line:96,column:4},end:{line:96,column:5}},loc:{start:{line:96,column:16},end:{line:98,column:5}},line:96},"7":{name:"(anonymous_7)",decl:{start:{line:100,column:4},end:{line:100,column:5}},loc:{start:{line:100,column:20},end:{line:102,column:5}},line:100},"8":{name:"(anonymous_8)",decl:{start:{line:104,column:4},end:{line:104,column:5}},loc:{start:{line:104,column:21},end:{line:106,column:5}},line:104},"9":{name:"(anonymous_9)",decl:{start:{line:108,column:4},end:{line:108,column:5}},loc:{start:{line:108,column:16},end:{line:110,column:5}},line:108},"10":{name:"(anonymous_10)",decl:{start:{line:112,column:4},end:{line:112,column:5}},loc:{start:{line:112,column:27},end:{line:114,column:5}},line:112},"11":{name:"(anonymous_11)",decl:{start:{line:116,column:4},end:{line:116,column:5}},loc:{start:{line:116,column:18},end:{line:118,column:5}},line:116},"12":{name:"(anonymous_12)",decl:{start:{line:120,column:4},end:{line:120,column:5}},loc:{start:{line:120,column:22},end:{line:127,column:5}},line:120},"13":{name:"(anonymous_13)",decl:{start:{line:129,column:4},end:{line:129,column:5}},loc:{start:{line:129,column:19},end:{line:131,column:5}},line:129},"14":{name:"(anonymous_14)",decl:{start:{line:133,column:4},end:{line:133,column:5}},loc:{start:{line:133,column:29},end:{line:133,column:32}},line:133},"15":{name:"(anonymous_15)",decl:{start:{line:135,column:4},end:{line:135,column:5}},loc:{start:{line:135,column:58},end:{line:135,column:61}},line:135},"16":{name:"(anonymous_16)",decl:{start:{line:137,column:4},end:{line:137,column:5}},loc:{start:{line:137,column:47},end:{line:137,column:50}},line:137},"17":{name:"(anonymous_17)",decl:{start:{line:139,column:4},end:{line:139,column:5}},loc:{start:{line:139,column:79},end:{line:139,column:82}},line:139},"18":{name:"(anonymous_18)",decl:{start:{line:141,column:4},end:{line:141,column:5}},loc:{start:{line:141,column:29},end:{line:141,column:32}},line:141},"19":{name:"(anonymous_19)",decl:{start:{line:143,column:4},end:{line:143,column:5}},loc:{start:{line:143,column:12},end:{line:145,column:5}},line:143},"20":{name:"(anonymous_20)",decl:{start:{line:147,column:4},end:{line:147,column:5}},loc:{start:{line:147,column:10},end:{line:150,column:5}},line:147},"21":{name:"(anonymous_21)",decl:{start:{line:152,column:4},end:{line:152,column:5}},loc:{start:{line:152,column:15},end:{line:152,column:18}},line:152},"22":{name:"(anonymous_22)",decl:{start:{line:157,column:4},end:{line:157,column:5}},loc:{start:{line:157,column:28},end:{line:165,column:5}},line:157}},branchMap:{"0":{loc:{start:{line:63,column:8},end:{line:69,column:9}},type:"if",locations:[{start:{line:63,column:8},end:{line:69,column:9}},{start:{line:63,column:8},end:{line:69,column:9}}],line:63},"1":{loc:{start:{line:70,column:22},end:{line:70,column:68}},type:"binary-expr",locations:[{start:{line:70,column:23},end:{line:70,column:32}},{start:{line:70,column:36},end:{line:70,column:52}},{start:{line:70,column:57},end:{line:70,column:68}}],line:70},"2":{loc:{start:{line:86,column:8},end:{line:88,column:9}},type:"if",locations:[{start:{line:86,column:8},end:{line:88,column:9}},{start:{line:86,column:8},end:{line:88,column:9}}],line:86},"3":{loc:{start:{line:135,column:43},end:{line:135,column:56}},type:"default-arg",locations:[{start:{line:135,column:55},end:{line:135,column:56}}],line:135},"4":{loc:{start:{line:139,column:30},end:{line:139,column:43}},type:"default-arg",locations:[{start:{line:139,column:42},end:{line:139,column:43}}],line:139},"5":{loc:{start:{line:159,column:8},end:{line:160,column:46}},type:"if",locations:[{start:{line:159,column:8},end:{line:160,column:46}},{start:{line:159,column:8},end:{line:160,column:46}}],line:159},"6":{loc:{start:{line:159,column:12},end:{line:159,column:35}},type:"binary-expr",locations:[{start:{line:159,column:12},end:{line:159,column:19}},{start:{line:159,column:23},end:{line:159,column:35}}],line:159},"7":{loc:{start:{line:161,column:8},end:{line:162,column:46}},type:"if",locations:[{start:{line:161,column:8},end:{line:162,column:46}},{start:{line:161,column:8},end:{line:162,column:46}}],line:161},"8":{loc:{start:{line:161,column:12},end:{line:161,column:35}},type:"binary-expr",locations:[{start:{line:161,column:12},end:{line:161,column:19}},{start:{line:161,column:23},end:{line:161,column:35}}],line:161}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},b:{"0":[0,0],"1":[0,0,0],"2":[0,0],"3":[0],"4":[0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/no-record/no-record-span.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/no-record/no-record-span.ts"],names:[],mappings:";;;AAAA;;;;;;;;;;;;;;GAcG;AACH,6DAAyD;AAEzD,iDAAsD;AAEtD,kCAAkC;AAElC,MAAM,SAAS,GAAG;IAChB,IAAI,EAAE,KAAK,CAAC,aAAa,CAAC,EAAE;CAC7B,CAAC;AAEF,+EAA+E;AAC/E,MAAa,YAAY;IA2CvB,+CAA+C;IAC/C,YAAY,MAAwB,EAAE,MAAqB;QA3C3D,yCAAyC;QACjC,iBAAY,GAAG,KAAK,CAAC;QAC7B,uCAAuC;QAC/B,eAAU,GAAG,KAAK,CAAC;QAK3B,sCAAsC;QACtC,WAAM,GAAW,wBAAU,CAAC;QAC5B,4DAA4D;QAC5D,eAAU,GAAqB,EAAE,CAAC;QAClC,kDAAkD;QAClD,gBAAW,GAAuB,EAAE,CAAC;QACrC,gEAAgE;QAChE,kBAAa,GAAyB,EAAE,CAAC;QACzC,qDAAqD;QACrD,UAAK,GAAiB,EAAE,CAAC;QACzB,gDAAgD;QAChD,iBAAY,GAAG,KAAK,CAAC;QAKrB,oCAAoC;QACpC,SAAI,GAAG,WAAW,CAAC;QACnB,oBAAoB;QACpB,SAAI,GAAmB,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC;QAClD,mCAAmC;QACnC,WAAM,GAAiB,SAAS,CAAC;QACjC,uBAAuB;QACvB,sBAAiB,GAA4B,EAAE,CAAC;QAEhD,wCAAwC;QACxC,2BAAsB,GAAG,CAAC,CAAC;QAC3B,mCAAmC;QACnC,sBAAiB,GAAG,CAAC,CAAC;QACtB,yCAAyC;QACzC,4BAAuB,GAAG,CAAC,CAAC;QAC5B,4CAA4C;QAC5C,8BAAyB,GAAG,CAAC,CAAC;QAI5B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,EAAE,GAAG,mBAAY,EAAE,CAAC;QACzB,IAAI,MAAM,EAAE;YACV,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;YACxB,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;SAC1B;aAAM;YACL,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;SAClB;QACD,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC;IAC/D,CAAC;IAED,6CAA6C;IAC7C,UAAU;QACR,OAAO,KAAK,CAAC;IACf,CAAC;IAED,uCAAuC;IACvC,IAAI,OAAO;QACT,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,2BAA2B;IAC3B,IAAI,UAAU;QACZ,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,sCAAsC;IACtC,IAAI,YAAY;QACd,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,OAAO,EAAE,CAAC;SACX;QACD,OAAO,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC;IAC5B,CAAC;IAED,qCAAqC;IACrC,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED,mCAAmC;IACnC,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED,2CAA2C;IAC3C,IAAI,SAAS;QACX,OAAO,IAAI,IAAI,EAAE,CAAC;IACpB,CAAC;IAED,2CAA2C;IAC3C,cAAc;QACZ,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,2CAA2C;IAC3C,IAAI,KAAK;QACP,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,2CAA2C;IAC3C,IAAI,gBAAgB;QAClB,OAAO,CAAC,CAAC;IACX,CAAC;IAED,2CAA2C;IAC3C,IAAI,OAAO;QACT,OAAO,IAAI,IAAI,EAAE,CAAC;IACpB,CAAC;IAED,0CAA0C;IAC1C,IAAI,WAAW;QACb,OAAO;YACL,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,MAAM,EAAE,IAAI,CAAC,EAAE;YACf,OAAO,EAAE,CAAC;YACV,UAAU,EAAE,IAAI,CAAC,UAAU;SAC5B,CAAC;IACJ,CAAC;IAED,2CAA2C;IAC3C,IAAI,QAAQ;QACV,OAAO,CAAC,CAAC;IACX,CAAC;IAED,2CAA2C;IAC3C,YAAY,CAAC,GAAW,EAAE,KAAyC,IAAG,CAAC;IAEvE,2CAA2C;IAC3C,aAAa,CACX,WAAmB,EACnB,UAA6B,EAC7B,SAAS,GAAG,CAAC,IACZ,CAAC;IAEJ,2CAA2C;IAC3C,OAAO,CACL,OAAe,EACf,MAAc,EACd,IAAoB,EACpB,UAA6B,IAC5B,CAAC;IAEJ,2CAA2C;IAC3C,eAAe,CACb,IAA4B,EAC5B,EAAU,EACV,SAAS,GAAG,CAAC,EACb,gBAAyB,EACzB,cAAuB,IACtB,CAAC;IAEJ,2CAA2C;IAC3C,SAAS,CAAC,IAAyB,EAAE,OAAgB,IAAG,CAAC;IAEzD,2CAA2C;IAC3C,KAAK;QACH,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;IAC3B,CAAC;IAED,2CAA2C;IAC3C,GAAG;QACD,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAC1B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;IACzB,CAAC;IAED,2CAA2C;IAC3C,QAAQ,KAAI,CAAC;IAEb;;;OAGG;IACH,cAAc,CAAC,OAA2B;QACxC,MAAM,aAAa,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAC1D,IAAI,OAAO,IAAI,OAAO,CAAC,IAAI;YAAE,aAAa,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QAC/D,IAAI,OAAO,IAAI,OAAO,CAAC,IAAI;YAAE,aAAa,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QAC/D,aAAa,CAAC,KAAK,EAAE,CAAC;QACtB,OAAO,aAAa,CAAC;IACvB,CAAC;CACF;AAxLD,oCAwLC",sourcesContent:["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { noopLogger } from '../../../common/noop-logger';\nimport { Logger } from '../../../common/types';\nimport { randomSpanId } from '../../../internal/util';\nimport * as configTypes from '../../config/types';\nimport * as types from '../types';\n\nconst STATUS_OK = {\n  code: types.CanonicalCode.OK,\n};\n\n/** Implementation for the SpanBase class that does not record trace events. */\nexport class NoRecordSpan implements types.Span {\n  /** Indicates if this span was started */\n  private startedLocal = false;\n  /** Indicates if this span was ended */\n  private endedLocal = false;\n  /** The Span ID of this span */\n  readonly id: string;\n  /** A tracer object */\n  readonly tracer: types.TracerBase;\n  /** An object to log information to */\n  logger: Logger = noopLogger;\n  /** A set of attributes, each in the format [KEY]:[VALUE] */\n  attributes: types.Attributes = {};\n  /** A text annotation with a set of attributes. */\n  annotations: types.Annotation[] = [];\n  /** An event describing a message sent/received between Spans */\n  messageEvents: types.MessageEvent[] = [];\n  /** Pointers from the current span to another span */\n  links: types.Link[] = [];\n  /** If the parent span is in another process. */\n  remoteParent = false;\n  /** This span's root span.  If it's a root span, it will point to this */\n  root: NoRecordSpan;\n  /** This span's parent. If it's a root span, must be empty */\n  parentSpan?: NoRecordSpan;\n  /** The resource name of the span */\n  name = 'no-record';\n  /** Kind of span. */\n  kind: types.SpanKind = types.SpanKind.UNSPECIFIED;\n  /** A final status for this span */\n  status: types.Status = STATUS_OK;\n  /** Trace Parameters */\n  activeTraceParams: configTypes.TraceParams = {};\n\n  /** The number of dropped attributes. */\n  droppedAttributesCount = 0;\n  /** The number of dropped links. */\n  droppedLinksCount = 0;\n  /** The number of dropped annotations. */\n  droppedAnnotationsCount = 0;\n  /** The number of dropped message events. */\n  droppedMessageEventsCount = 0;\n\n  /** Constructs a new SpanBaseModel instance. */\n  constructor(tracer: types.TracerBase, parent?: NoRecordSpan) {\n    this.tracer = tracer;\n    this.id = randomSpanId();\n    if (parent) {\n      this.root = parent.root;\n      this.parentSpan = parent;\n    } else {\n      this.root = this;\n    }\n    this.logger = (this.root && this.root.logger) || this.logger;\n  }\n\n  /** Returns whether a span is root or not. */\n  isRootSpan(): boolean {\n    return false;\n  }\n\n  /** Gets trace id of no-record span. */\n  get traceId(): string {\n    return '';\n  }\n\n  /** Gets the trace state */\n  get traceState(): types.TraceState | undefined {\n    return undefined;\n  }\n\n  /** Gets the ID of the parent span. */\n  get parentSpanId(): string {\n    if (!this.parentSpan) {\n      return '';\n    }\n    return this.parentSpan.id;\n  }\n\n  /** Indicates if span was started. */\n  get started(): boolean {\n    return this.startedLocal;\n  }\n\n  /** Indicates if span was ended. */\n  get ended(): boolean {\n    return this.endedLocal;\n  }\n\n  /** No-op implementation of this method. */\n  get startTime(): Date {\n    return new Date();\n  }\n\n  /** No-op implementation of this method. */\n  allDescendants(): types.Span[] {\n    return [];\n  }\n\n  /** No-op implementation of this method. */\n  get spans(): types.Span[] {\n    return [];\n  }\n\n  /** No-op implementation of this method. */\n  get numberOfChildren(): number {\n    return 0;\n  }\n\n  /** No-op implementation of this method. */\n  get endTime(): Date {\n    return new Date();\n  }\n\n  /** Gives the TraceContext of the span. */\n  get spanContext(): types.SpanContext {\n    return {\n      traceId: this.traceId,\n      spanId: this.id,\n      options: 0,\n      traceState: this.traceState,\n    };\n  }\n\n  /** No-op implementation of this method. */\n  get duration(): number {\n    return 0;\n  }\n\n  /** No-op implementation of this method. */\n  addAttribute(key: string, value: string | number | boolean | object) {}\n\n  /** No-op implementation of this method. */\n  addAnnotation(\n    description: string,\n    attributes?: types.Attributes,\n    timestamp = 0\n  ) {}\n\n  /** No-op implementation of this method. */\n  addLink(\n    traceId: string,\n    spanId: string,\n    type: types.LinkType,\n    attributes?: types.Attributes\n  ) {}\n\n  /** No-op implementation of this method. */\n  addMessageEvent(\n    type: types.MessageEventType,\n    id: number,\n    timestamp = 0,\n    uncompressedSize?: number,\n    compressedSize?: number\n  ) {}\n\n  /** No-op implementation of this method. */\n  setStatus(code: types.CanonicalCode, message?: string) {}\n\n  /** No-op implementation of this method. */\n  start() {\n    this.startedLocal = true;\n  }\n\n  /** No-op implementation of this method. */\n  end(): void {\n    this.startedLocal = false;\n    this.endedLocal = true;\n  }\n\n  /** No-op implementation of this method. */\n  truncate() {}\n\n  /**\n   * Starts a new no record child span in the no record root span.\n   * @param [options] A SpanOptions object to start a child span.\n   */\n  startChildSpan(options?: types.SpanOptions): types.Span {\n    const noRecordChild = new NoRecordSpan(this.tracer, this);\n    if (options && options.name) noRecordChild.name = options.name;\n    if (options && options.kind) noRecordChild.kind = options.kind;\n    noRecordChild.start();\n    return noRecordChild;\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"a56396d30b992211c4b6e23f9b3ee685c30ce829"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2kxxtmzkkm=function(){return actualCoverage;};}return actualCoverage;}cov_2kxxtmzkkm();cov_2kxxtmzkkm().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_2kxxtmzkkm().s[1]++;exports.NoRecordSpan=void 0;/**
 * Copyright 2019, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */const noop_logger_1=(cov_2kxxtmzkkm().s[2]++,require("../../../common/noop-logger"));const util_1=(cov_2kxxtmzkkm().s[3]++,require("../../../internal/util"));const types=(cov_2kxxtmzkkm().s[4]++,require("../types"));const STATUS_OK=(cov_2kxxtmzkkm().s[5]++,{code:types.CanonicalCode.OK});/** Implementation for the SpanBase class that does not record trace events. */class NoRecordSpan{/** Constructs a new SpanBaseModel instance. */constructor(tracer,parent){cov_2kxxtmzkkm().f[0]++;cov_2kxxtmzkkm().s[6]++;/** Indicates if this span was started */this.startedLocal=false;/** Indicates if this span was ended */cov_2kxxtmzkkm().s[7]++;this.endedLocal=false;/** An object to log information to */cov_2kxxtmzkkm().s[8]++;this.logger=noop_logger_1.noopLogger;/** A set of attributes, each in the format [KEY]:[VALUE] */cov_2kxxtmzkkm().s[9]++;this.attributes={};/** A text annotation with a set of attributes. */cov_2kxxtmzkkm().s[10]++;this.annotations=[];/** An event describing a message sent/received between Spans */cov_2kxxtmzkkm().s[11]++;this.messageEvents=[];/** Pointers from the current span to another span */cov_2kxxtmzkkm().s[12]++;this.links=[];/** If the parent span is in another process. */cov_2kxxtmzkkm().s[13]++;this.remoteParent=false;/** The resource name of the span */cov_2kxxtmzkkm().s[14]++;this.name='no-record';/** Kind of span. */cov_2kxxtmzkkm().s[15]++;this.kind=types.SpanKind.UNSPECIFIED;/** A final status for this span */cov_2kxxtmzkkm().s[16]++;this.status=STATUS_OK;/** Trace Parameters */cov_2kxxtmzkkm().s[17]++;this.activeTraceParams={};/** The number of dropped attributes. */cov_2kxxtmzkkm().s[18]++;this.droppedAttributesCount=0;/** The number of dropped links. */cov_2kxxtmzkkm().s[19]++;this.droppedLinksCount=0;/** The number of dropped annotations. */cov_2kxxtmzkkm().s[20]++;this.droppedAnnotationsCount=0;/** The number of dropped message events. */cov_2kxxtmzkkm().s[21]++;this.droppedMessageEventsCount=0;cov_2kxxtmzkkm().s[22]++;this.tracer=tracer;cov_2kxxtmzkkm().s[23]++;this.id=util_1.randomSpanId();cov_2kxxtmzkkm().s[24]++;if(parent){cov_2kxxtmzkkm().b[0][0]++;cov_2kxxtmzkkm().s[25]++;this.root=parent.root;cov_2kxxtmzkkm().s[26]++;this.parentSpan=parent;}else{cov_2kxxtmzkkm().b[0][1]++;cov_2kxxtmzkkm().s[27]++;this.root=this;}cov_2kxxtmzkkm().s[28]++;this.logger=(cov_2kxxtmzkkm().b[1][0]++,this.root)&&(cov_2kxxtmzkkm().b[1][1]++,this.root.logger)||(cov_2kxxtmzkkm().b[1][2]++,this.logger);}/** Returns whether a span is root or not. */isRootSpan(){cov_2kxxtmzkkm().f[1]++;cov_2kxxtmzkkm().s[29]++;return false;}/** Gets trace id of no-record span. */get traceId(){cov_2kxxtmzkkm().f[2]++;cov_2kxxtmzkkm().s[30]++;return'';}/** Gets the trace state */get traceState(){cov_2kxxtmzkkm().f[3]++;cov_2kxxtmzkkm().s[31]++;return undefined;}/** Gets the ID of the parent span. */get parentSpanId(){cov_2kxxtmzkkm().f[4]++;cov_2kxxtmzkkm().s[32]++;if(!this.parentSpan){cov_2kxxtmzkkm().b[2][0]++;cov_2kxxtmzkkm().s[33]++;return'';}else{cov_2kxxtmzkkm().b[2][1]++;}cov_2kxxtmzkkm().s[34]++;return this.parentSpan.id;}/** Indicates if span was started. */get started(){cov_2kxxtmzkkm().f[5]++;cov_2kxxtmzkkm().s[35]++;return this.startedLocal;}/** Indicates if span was ended. */get ended(){cov_2kxxtmzkkm().f[6]++;cov_2kxxtmzkkm().s[36]++;return this.endedLocal;}/** No-op implementation of this method. */get startTime(){cov_2kxxtmzkkm().f[7]++;cov_2kxxtmzkkm().s[37]++;return new Date();}/** No-op implementation of this method. */allDescendants(){cov_2kxxtmzkkm().f[8]++;cov_2kxxtmzkkm().s[38]++;return[];}/** No-op implementation of this method. */get spans(){cov_2kxxtmzkkm().f[9]++;cov_2kxxtmzkkm().s[39]++;return[];}/** No-op implementation of this method. */get numberOfChildren(){cov_2kxxtmzkkm().f[10]++;cov_2kxxtmzkkm().s[40]++;return 0;}/** No-op implementation of this method. */get endTime(){cov_2kxxtmzkkm().f[11]++;cov_2kxxtmzkkm().s[41]++;return new Date();}/** Gives the TraceContext of the span. */get spanContext(){cov_2kxxtmzkkm().f[12]++;cov_2kxxtmzkkm().s[42]++;return{traceId:this.traceId,spanId:this.id,options:0,traceState:this.traceState};}/** No-op implementation of this method. */get duration(){cov_2kxxtmzkkm().f[13]++;cov_2kxxtmzkkm().s[43]++;return 0;}/** No-op implementation of this method. */addAttribute(key,value){cov_2kxxtmzkkm().f[14]++;}/** No-op implementation of this method. */addAnnotation(description,attributes,timestamp=(cov_2kxxtmzkkm().b[3][0]++,0)){cov_2kxxtmzkkm().f[15]++;}/** No-op implementation of this method. */addLink(traceId,spanId,type,attributes){cov_2kxxtmzkkm().f[16]++;}/** No-op implementation of this method. */addMessageEvent(type,id,timestamp=(cov_2kxxtmzkkm().b[4][0]++,0),uncompressedSize,compressedSize){cov_2kxxtmzkkm().f[17]++;}/** No-op implementation of this method. */setStatus(code,message){cov_2kxxtmzkkm().f[18]++;}/** No-op implementation of this method. */start(){cov_2kxxtmzkkm().f[19]++;cov_2kxxtmzkkm().s[44]++;this.startedLocal=true;}/** No-op implementation of this method. */end(){cov_2kxxtmzkkm().f[20]++;cov_2kxxtmzkkm().s[45]++;this.startedLocal=false;cov_2kxxtmzkkm().s[46]++;this.endedLocal=true;}/** No-op implementation of this method. */truncate(){cov_2kxxtmzkkm().f[21]++;}/**
     * Starts a new no record child span in the no record root span.
     * @param [options] A SpanOptions object to start a child span.
     */startChildSpan(options){cov_2kxxtmzkkm().f[22]++;const noRecordChild=(cov_2kxxtmzkkm().s[47]++,new NoRecordSpan(this.tracer,this));cov_2kxxtmzkkm().s[48]++;if((cov_2kxxtmzkkm().b[6][0]++,options)&&(cov_2kxxtmzkkm().b[6][1]++,options.name)){cov_2kxxtmzkkm().b[5][0]++;cov_2kxxtmzkkm().s[49]++;noRecordChild.name=options.name;}else{cov_2kxxtmzkkm().b[5][1]++;}cov_2kxxtmzkkm().s[50]++;if((cov_2kxxtmzkkm().b[8][0]++,options)&&(cov_2kxxtmzkkm().b[8][1]++,options.kind)){cov_2kxxtmzkkm().b[7][0]++;cov_2kxxtmzkkm().s[51]++;noRecordChild.kind=options.kind;}else{cov_2kxxtmzkkm().b[7][1]++;}cov_2kxxtmzkkm().s[52]++;noRecordChild.start();cov_2kxxtmzkkm().s[53]++;return noRecordChild;}}cov_2kxxtmzkkm().s[54]++;exports.NoRecordSpan=NoRecordSpan;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,