"use strict";/**
 * Copyright 2019, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_5vw75cspj(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/propagation/variant-encoding.ts";var hash="bfb232444487037e6078a856796b37946f8dc591";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/propagation/variant-encoding.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:0},end:{line:18,column:53}},"2":{start:{line:21,column:12},end:{line:21,column:16}},"3":{start:{line:23,column:13},end:{line:23,column:17}},"4":{start:{line:29,column:16},end:{line:29,column:18}},"5":{start:{line:30,column:4},end:{line:35,column:26}},"6":{start:{line:31,column:21},end:{line:31,column:33}},"7":{start:{line:32,column:8},end:{line:32,column:21}},"8":{start:{line:33,column:18},end:{line:33,column:48}},"9":{start:{line:34,column:8},end:{line:34,column:20}},"10":{start:{line:36,column:4},end:{line:36,column:15}},"11":{start:{line:38,column:0},end:{line:38,column:36}},"12":{start:{line:45,column:14},end:{line:45,column:15}},"13":{start:{line:46,column:16},end:{line:46,column:17}},"14":{start:{line:48,column:18},end:{line:48,column:24}},"15":{start:{line:49,column:4},end:{line:56,column:40}},"16":{start:{line:50,column:8},end:{line:52,column:9}},"17":{start:{line:51,column:12},end:{line:51,column:47}},"18":{start:{line:53,column:8},end:{line:53,column:49}},"19":{start:{line:54,column:8},end:{line:54,column:45}},"20":{start:{line:55,column:8},end:{line:55,column:19}},"21":{start:{line:57,column:4},end:{line:57,column:15}},"22":{start:{line:59,column:0},end:{line:59,column:36}}},fnMap:{"0":{name:"EncodeVarint",decl:{start:{line:28,column:9},end:{line:28,column:21}},loc:{start:{line:28,column:29},end:{line:37,column:1}},line:28},"1":{name:"DecodeVarint",decl:{start:{line:44,column:9},end:{line:44,column:21}},loc:{start:{line:44,column:38},end:{line:58,column:1}},line:44}},branchMap:{"0":{loc:{start:{line:33,column:26},end:{line:33,column:47}},type:"cond-expr",locations:[{start:{line:33,column:40},end:{line:33,column:43}},{start:{line:33,column:46},end:{line:33,column:47}}],line:33},"1":{loc:{start:{line:50,column:8},end:{line:52,column:9}},type:"if",locations:[{start:{line:50,column:8},end:{line:52,column:9}},{start:{line:50,column:8},end:{line:52,column:9}}],line:50}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},f:{"0":0,"1":0},b:{"0":[0,0],"1":[0,0]},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/propagation/variant-encoding.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/propagation/variant-encoding.ts"],names:[],mappings:";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,4EAA4E;AAC5E,mEAAmE;AACnE,MAAM,GAAG,GAAG,IAAI,CAAC;AAEjB,oDAAoD;AACpD,MAAM,IAAI,GAAG,IAAI,CAAC;AAElB;;;GAGG;AACH,SAAgB,YAAY,CAAC,KAAa;IACxC,MAAM,GAAG,GAAa,EAAE,CAAC;IACzB,GAAG;QACD,MAAM,IAAI,GAAG,KAAK,GAAG,IAAI,CAAC;QAC1B,KAAK,MAAM,CAAC,CAAC;QACb,MAAM,CAAC,GAAG,IAAI,GAAG,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACzC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;KACb,QAAQ,KAAK,KAAK,CAAC,EAAE;IACtB,OAAO,GAAG,CAAC;AACb,CAAC;AATD,oCASC;AAED;;;;GAIG;AACH,SAAgB,YAAY,CAAC,MAAc,EAAE,MAAc;IACzD,IAAI,GAAG,GAAG,CAAC,CAAC;IACZ,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,IAAI,WAAW,CAAC;IAChB,IAAI,OAAO,GAAG,MAAM,CAAC;IACrB,GAAG;QACD,IAAI,KAAK,IAAI,EAAE,EAAE;YACf,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;SACpC;QACD,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAC;QACzC,GAAG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,KAAK,CAAC;QACrC,KAAK,IAAI,CAAC,CAAC;KACZ,QAAQ,CAAC,WAAW,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE;IACpC,OAAO,GAAG,CAAC;AACb,CAAC;AAdD,oCAcC",sourcesContent:["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// The MSB (most significant bit) indicates whether we've reached the end of\n// the number. Set means there is more than one byte in the varint.\nconst MSB = 0x80;\n\n// The REST indicates the lower 7 bits of each byte.\nconst REST = 0x7f;\n\n/**\n * Encodes a number in a variable-length encoding, 7 bits per byte.\n * @param value The input number.\n */\nexport function EncodeVarint(value: number) {\n  const ret: number[] = [];\n  do {\n    const bits = value & REST;\n    value >>>= 7;\n    const b = bits + (value !== 0 ? MSB : 0);\n    ret.push(b);\n  } while (value !== 0);\n  return ret;\n}\n\n/**\n * Decodes a varint from buffer.\n * @param buffer The source buffer.\n * @param offset The offset within buffer.\n */\nexport function DecodeVarint(buffer: Buffer, offset: number) {\n  let ret = 0;\n  let shift = 0;\n  let currentByte;\n  let counter = offset;\n  do {\n    if (shift >= 32) {\n      throw new Error('varint too long');\n    }\n    currentByte = buffer.readInt8(counter++);\n    ret |= (currentByte & REST) << shift;\n    shift += 7;\n  } while ((currentByte & MSB) !== 0);\n  return ret;\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"bfb232444487037e6078a856796b37946f8dc591"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_5vw75cspj=function(){return actualCoverage;};}return actualCoverage;}cov_5vw75cspj();cov_5vw75cspj().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_5vw75cspj().s[1]++;exports.DecodeVarint=exports.EncodeVarint=void 0;// The MSB (most significant bit) indicates whether we've reached the end of
// the number. Set means there is more than one byte in the varint.
const MSB=(cov_5vw75cspj().s[2]++,0x80);// The REST indicates the lower 7 bits of each byte.
const REST=(cov_5vw75cspj().s[3]++,0x7f);/**
 * Encodes a number in a variable-length encoding, 7 bits per byte.
 * @param value The input number.
 */function EncodeVarint(value){cov_5vw75cspj().f[0]++;const ret=(cov_5vw75cspj().s[4]++,[]);cov_5vw75cspj().s[5]++;do{const bits=(cov_5vw75cspj().s[6]++,value&REST);cov_5vw75cspj().s[7]++;value>>>=7;const b=(cov_5vw75cspj().s[8]++,bits+(value!==0?(cov_5vw75cspj().b[0][0]++,MSB):(cov_5vw75cspj().b[0][1]++,0)));cov_5vw75cspj().s[9]++;ret.push(b);}while(value!==0);cov_5vw75cspj().s[10]++;return ret;}cov_5vw75cspj().s[11]++;exports.EncodeVarint=EncodeVarint;/**
 * Decodes a varint from buffer.
 * @param buffer The source buffer.
 * @param offset The offset within buffer.
 */function DecodeVarint(buffer,offset){cov_5vw75cspj().f[1]++;let ret=(cov_5vw75cspj().s[12]++,0);let shift=(cov_5vw75cspj().s[13]++,0);let currentByte;let counter=(cov_5vw75cspj().s[14]++,offset);cov_5vw75cspj().s[15]++;do{cov_5vw75cspj().s[16]++;if(shift>=32){cov_5vw75cspj().b[1][0]++;cov_5vw75cspj().s[17]++;throw new Error('varint too long');}else{cov_5vw75cspj().b[1][1]++;}cov_5vw75cspj().s[18]++;currentByte=buffer.readInt8(counter++);cov_5vw75cspj().s[19]++;ret|=(currentByte&REST)<<shift;cov_5vw75cspj().s[20]++;shift+=7;}while((currentByte&MSB)!==0);cov_5vw75cspj().s[21]++;return ret;}cov_5vw75cspj().s[22]++;exports.DecodeVarint=DecodeVarint;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3VzZXJtYWl0aGEvdHJhZGVtYXN0ZXIvbGlicy9saWItZXh0ZXJuYWwtb3BlbmNlbnN1cy1ub2RlL3NyYy90YWdzL3Byb3BhZ2F0aW9uL3ZhcmlhbnQtZW5jb2RpbmcudHMiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VybWFpdGhhL3RyYWRlbWFzdGVyL2xpYnMvbGliLWV4dGVybmFsLW9wZW5jZW5zdXMtbm9kZS9zcmMvdGFncy9wcm9wYWdhdGlvbi92YXJpYW50LWVuY29kaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7R0FjRzs7O0FBRUgsNEVBQTRFO0FBQzVFLG1FQUFtRTtBQUNuRSxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUM7QUFFakIsb0RBQW9EO0FBQ3BELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQztBQUVsQjs7O0dBR0c7QUFDSCxTQUFnQixZQUFZLENBQUMsS0FBYTtJQUN4QyxNQUFNLEdBQUcsR0FBYSxFQUFFLENBQUM7SUFDekIsR0FBRztRQUNELE1BQU0sSUFBSSxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDMUIsS0FBSyxNQUFNLENBQUMsQ0FBQztRQUNiLE1BQU0sQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNiLFFBQVEsS0FBSyxLQUFLLENBQUMsRUFBRTtJQUN0QixPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFURCxvQ0FTQztBQUVEOzs7O0dBSUc7QUFDSCxTQUFnQixZQUFZLENBQUMsTUFBYyxFQUFFLE1BQWM7SUFDekQsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQ1osSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxXQUFXLENBQUM7SUFDaEIsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDO0lBQ3JCLEdBQUc7UUFDRCxJQUFJLEtBQUssSUFBSSxFQUFFLEVBQUU7WUFDZixNQUFNLElBQUksS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUM7U0FDcEM7UUFDRCxXQUFXLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQ3pDLEdBQUcsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQUM7UUFDckMsS0FBSyxJQUFJLENBQUMsQ0FBQztLQUNaLFFBQVEsQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO0lBQ3BDLE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQWRELG9DQWNDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOSwgT3BlbkNlbnN1cyBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vLyBUaGUgTVNCIChtb3N0IHNpZ25pZmljYW50IGJpdCkgaW5kaWNhdGVzIHdoZXRoZXIgd2UndmUgcmVhY2hlZCB0aGUgZW5kIG9mXG4vLyB0aGUgbnVtYmVyLiBTZXQgbWVhbnMgdGhlcmUgaXMgbW9yZSB0aGFuIG9uZSBieXRlIGluIHRoZSB2YXJpbnQuXG5jb25zdCBNU0IgPSAweDgwO1xuXG4vLyBUaGUgUkVTVCBpbmRpY2F0ZXMgdGhlIGxvd2VyIDcgYml0cyBvZiBlYWNoIGJ5dGUuXG5jb25zdCBSRVNUID0gMHg3ZjtcblxuLyoqXG4gKiBFbmNvZGVzIGEgbnVtYmVyIGluIGEgdmFyaWFibGUtbGVuZ3RoIGVuY29kaW5nLCA3IGJpdHMgcGVyIGJ5dGUuXG4gKiBAcGFyYW0gdmFsdWUgVGhlIGlucHV0IG51bWJlci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIEVuY29kZVZhcmludCh2YWx1ZTogbnVtYmVyKSB7XG4gIGNvbnN0IHJldDogbnVtYmVyW10gPSBbXTtcbiAgZG8ge1xuICAgIGNvbnN0IGJpdHMgPSB2YWx1ZSAmIFJFU1Q7XG4gICAgdmFsdWUgPj4+PSA3O1xuICAgIGNvbnN0IGIgPSBiaXRzICsgKHZhbHVlICE9PSAwID8gTVNCIDogMCk7XG4gICAgcmV0LnB1c2goYik7XG4gIH0gd2hpbGUgKHZhbHVlICE9PSAwKTtcbiAgcmV0dXJuIHJldDtcbn1cblxuLyoqXG4gKiBEZWNvZGVzIGEgdmFyaW50IGZyb20gYnVmZmVyLlxuICogQHBhcmFtIGJ1ZmZlciBUaGUgc291cmNlIGJ1ZmZlci5cbiAqIEBwYXJhbSBvZmZzZXQgVGhlIG9mZnNldCB3aXRoaW4gYnVmZmVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gRGVjb2RlVmFyaW50KGJ1ZmZlcjogQnVmZmVyLCBvZmZzZXQ6IG51bWJlcikge1xuICBsZXQgcmV0ID0gMDtcbiAgbGV0IHNoaWZ0ID0gMDtcbiAgbGV0IGN1cnJlbnRCeXRlO1xuICBsZXQgY291bnRlciA9IG9mZnNldDtcbiAgZG8ge1xuICAgIGlmIChzaGlmdCA+PSAzMikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd2YXJpbnQgdG9vIGxvbmcnKTtcbiAgICB9XG4gICAgY3VycmVudEJ5dGUgPSBidWZmZXIucmVhZEludDgoY291bnRlcisrKTtcbiAgICByZXQgfD0gKGN1cnJlbnRCeXRlICYgUkVTVCkgPDwgc2hpZnQ7XG4gICAgc2hpZnQgKz0gNztcbiAgfSB3aGlsZSAoKGN1cnJlbnRCeXRlICYgTVNCKSAhPT0gMCk7XG4gIHJldHVybiByZXQ7XG59XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf-8;base64,