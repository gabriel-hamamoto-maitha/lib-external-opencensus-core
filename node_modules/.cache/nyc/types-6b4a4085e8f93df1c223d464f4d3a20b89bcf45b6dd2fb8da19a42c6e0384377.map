{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/exporters/types.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/exporters/types.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Measurement, View } from '../stats/types';\nimport { TagKey, TagValue } from '../tags/types';\nimport * as configTypes from '../trace/config/types';\nimport * as modelTypes from '../trace/model/types';\n\n/** Defines a trace exporter interface. */\nexport interface Exporter extends modelTypes.SpanEventListener {\n  /**\n   * Sends a list of spans to the service.\n   * @param spans A list of spans to publish.\n   */\n  publish(spans: modelTypes.Span[]): Promise<number | string | void>;\n}\n\n/**\n * An interface that describes the possible events that will be emitted from a\n * Stats instance. Stats exporters should implement this interface.\n */\nexport interface StatsEventListener {\n  /**\n   * Is called whenever a new view is registered\n   * @deprecated since version 0.0.9 - use {@link start} instead\n   * @param view The registered view\n   */\n  onRegisterView(view: View): void;\n\n  /**\n   * Is called whenever a new measurement is recorded.\n   * @deprecated since version 0.0.9 - use {@link start} instead\n   * @param views The views related to the measurement\n   * @param measurement The recorded measurement\n   * @param tags The tags to which the value is applied\n   */\n  onRecord(\n    views: View[],\n    measurement: Measurement,\n    tags: Map<TagKey, TagValue>\n  ): void;\n\n  /**\n   * Starts the exporter that polls Metric from Metrics library and send\n   * batched data to backend.\n   */\n  start(): void;\n\n  /** Stops the exporter. */\n  stop(): void;\n}\n\nexport type ExporterConfig = configTypes.BufferConfig;\n"]}