{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/console-logger.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/console-logger.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,6BAA6B;AAG7B,MAAM,SAAS,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AAExC;;GAEG;AACH,MAAa,aAAa;IAKxB;;;OAGG;IACH,YAAY,OAA+C;QACzD,IAAI,GAAG,GAAwB,EAAE,CAAC;QAClC,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YAC/B,IAAI,OAAO,GAAG,CAAC,EAAE;gBACf,OAAO,GAAG,CAAC,CAAC;aACb;iBAAM,IAAI,OAAO,GAAG,aAAa,CAAC,MAAM,CAAC,MAAM,EAAE;gBAChD,OAAO,GAAG,aAAa,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;aAC3C;YACD,GAAG,GAAG,EAAE,KAAK,EAAE,aAAa,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC;SAChD;aAAM,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YACtC,GAAG,GAAG,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC;SAC1B;aAAM;YACL,GAAG,GAAG,OAAO,IAAI,EAAE,CAAC;SACrB;QACD,IAAI,GAAG,CAAC,KAAK;YAAE,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC;QACtC,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;YACtB,MAAM,EAAE,aAAa,CAAC,MAAM;YAC5B,KAAK,EAAE,GAAG,CAAC,KAAK,IAAI,QAAQ;SAC7B,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,kCAAkC;IAClC,KAAK,CAAC,OAAY,EAAE,GAAG,IAAW;QAChC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;IACnD,CAAC;IAED;;;;OAIG;IACH,kCAAkC;IAClC,IAAI,CAAC,OAAY,EAAE,GAAG,IAAW;QAC/B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;IAClD,CAAC;IAED;;;;OAIG;IACH,kCAAkC;IAClC,IAAI,CAAC,OAAY,EAAE,GAAG,IAAW;QAC/B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;IAClD,CAAC;IAED;;;;OAIG;IACH,kCAAkC;IAClC,KAAK,CAAC,OAAY,EAAE,GAAG,IAAW;QAChC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;IACnD,CAAC;;AApEH,sCAqEC;AAnEQ,oBAAM,GAAG,CAAC,QAAQ,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;AAqE/D;;;;GAIG;AACH,MAAM,MAAM,GAAG,CACb,OAA+C,EACjC,EAAE;IAChB,OAAO,IAAI,aAAa,CAAC,OAAO,CAAC,CAAC;AACpC,CAAC,CAAC;AAEO,wBAAM","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as util from 'util';\nimport * as types from './types';\n\nconst logDriver = require('log-driver');\n\n/**\n * This class implements a console logger.\n */\nexport class ConsoleLogger implements types.Logger {\n  private logger: typeof logDriver;\n  static LEVELS = ['silent', 'error', 'warn', 'info', 'debug'];\n  level?: string;\n\n  /**\n   * Constructs a new ConsoleLogger instance\n   * @param options A logger configuration object.\n   */\n  constructor(options?: types.LoggerOptions | string | number) {\n    let opt: types.LoggerOptions = {};\n    if (typeof options === 'number') {\n      if (options < 0) {\n        options = 0;\n      } else if (options > ConsoleLogger.LEVELS.length) {\n        options = ConsoleLogger.LEVELS.length - 1;\n      }\n      opt = { level: ConsoleLogger.LEVELS[options] };\n    } else if (typeof options === 'string') {\n      opt = { level: options };\n    } else {\n      opt = options || {};\n    }\n    if (opt.level) this.level = opt.level;\n    this.logger = logDriver({\n      levels: ConsoleLogger.LEVELS,\n      level: opt.level || 'silent',\n    });\n  }\n\n  /**\n   * Logger error function.\n   * @param message message error to log in console\n   * @param args arguments to log in console\n   */\n  // tslint:disable-next-line:no-any\n  error(message: any, ...args: any[]): void {\n    this.logger.error(util.format(message, ...args));\n  }\n\n  /**\n   * Logger warning function.\n   * @param message message warning to log in console\n   * @param args arguments to log in console\n   */\n  // tslint:disable-next-line:no-any\n  warn(message: any, ...args: any[]): void {\n    this.logger.warn(util.format(message, ...args));\n  }\n\n  /**\n   * Logger info function.\n   * @param message message info to log in console\n   * @param args arguments to log in console\n   */\n  // tslint:disable-next-line:no-any\n  info(message: any, ...args: any[]): void {\n    this.logger.info(util.format(message, ...args));\n  }\n\n  /**\n   * Logger debug function.\n   * @param message message debug to log in console\n   * @param args arguments to log in console\n   */\n  // tslint:disable-next-line:no-any\n  debug(message: any, ...args: any[]): void {\n    this.logger.debug(util.format(message, ...args));\n  }\n}\n\n/**\n * Function logger exported to others classes. Inspired by:\n * https://github.com/cainus/logdriver/blob/bba1761737ca72f04d6b445629848538d038484a/index.js#L50\n * @param options A logger options or strig to logger in console\n */\nconst logger = (\n  options?: types.LoggerOptions | string | number\n): types.Logger => {\n  return new ConsoleLogger(options);\n};\n\nexport { logger };\n"]}