"use strict";/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_2nlg708m5x(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/metric-producer.ts";var hash="347c8b372e9479a345d3aca184a094f574ceacb6";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/metric-producer.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:0},end:{line:18,column:40}},"2":{start:{line:19,column:31},end:{line:19,column:80}},"3":{start:{line:29,column:8},end:{line:29,column:16}},"4":{start:{line:30,column:8},end:{line:30,column:41}},"5":{start:{line:37,column:8},end:{line:37,column:46}},"6":{start:{line:40,column:0},end:{line:40,column:56}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:28,column:4},end:{line:28,column:5}},loc:{start:{line:28,column:30},end:{line:31,column:5}},line:28},"1":{name:"(anonymous_1)",decl:{start:{line:36,column:4},end:{line:36,column:5}},loc:{start:{line:36,column:17},end:{line:38,column:5}},line:36}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},f:{"0":0,"1":0},b:{},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/metric-producer.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/metric-producer.ts"],names:[],mappings:";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,iFAA4E;AAI5E;;;GAGG;AACH,MAAa,sBAAuB,SAAQ,yCAAkB;IAG5D;;OAEG;IACH,YAAY,YAAmB;QAC7B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACnC,CAAC;IAED;;;OAGG;IACH,UAAU;QACR,OAAO,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,CAAC;IACxC,CAAC;CACF;AAlBD,wDAkBC",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BaseMetricProducer } from '../metrics/export/base-metric-producer';\nimport { Metric } from '../metrics/export/types';\nimport { Stats } from './types';\n\n/**\n * A MetricProducer producer that can be registered for exporting using\n * MetricProducerManager.\n */\nexport class MetricProducerForStats extends BaseMetricProducer {\n  private statsManager: Stats;\n\n  /**\n   * @param statsManager The stats\n   */\n  constructor(statsManager: Stats) {\n    super();\n    this.statsManager = statsManager;\n  }\n\n  /**\n   * Gets a collection of produced Metric`s to be exported.\n   * @returns The List of metrics\n   */\n  getMetrics(): Metric[] {\n    return this.statsManager.getMetrics();\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"347c8b372e9479a345d3aca184a094f574ceacb6"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2nlg708m5x=function(){return actualCoverage;};}return actualCoverage;}cov_2nlg708m5x();cov_2nlg708m5x().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_2nlg708m5x().s[1]++;exports.MetricProducerForStats=void 0;const base_metric_producer_1=(cov_2nlg708m5x().s[2]++,require("../metrics/export/base-metric-producer"));/**
 * A MetricProducer producer that can be registered for exporting using
 * MetricProducerManager.
 */class MetricProducerForStats extends(base_metric_producer_1.BaseMetricProducer){/**
     * @param statsManager The stats
     */constructor(statsManager){cov_2nlg708m5x().f[0]++;cov_2nlg708m5x().s[3]++;super();cov_2nlg708m5x().s[4]++;this.statsManager=statsManager;}/**
     * Gets a collection of produced Metric`s to be exported.
     * @returns The List of metrics
     */getMetrics(){cov_2nlg708m5x().f[1]++;cov_2nlg708m5x().s[5]++;return this.statsManager.getMetrics();}}cov_2nlg708m5x().s[6]++;exports.MetricProducerForStats=MetricProducerForStats;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3VzZXJtYWl0aGEvdHJhZGVtYXN0ZXIvbGlicy9saWItZXh0ZXJuYWwtb3BlbmNlbnN1cy1ub2RlL3NyYy9zdGF0cy9tZXRyaWMtcHJvZHVjZXIudHMiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VybWFpdGhhL3RyYWRlbWFzdGVyL2xpYnMvbGliLWV4dGVybmFsLW9wZW5jZW5zdXMtbm9kZS9zcmMvc3RhdHMvbWV0cmljLXByb2R1Y2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7R0FjRzs7O0FBRUgsaUZBQTRFO0FBSTVFOzs7R0FHRztBQUNILE1BQWEsc0JBQXVCLFNBQVEseUNBQWtCO0lBRzVEOztPQUVHO0lBQ0gsWUFBWSxZQUFtQjtRQUM3QixLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO0lBQ25DLENBQUM7SUFFRDs7O09BR0c7SUFDSCxVQUFVO1FBQ1IsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3hDLENBQUM7Q0FDRjtBQWxCRCx3REFrQkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDE4LCBPcGVuQ2Vuc3VzIEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEJhc2VNZXRyaWNQcm9kdWNlciB9IGZyb20gJy4uL21ldHJpY3MvZXhwb3J0L2Jhc2UtbWV0cmljLXByb2R1Y2VyJztcbmltcG9ydCB7IE1ldHJpYyB9IGZyb20gJy4uL21ldHJpY3MvZXhwb3J0L3R5cGVzJztcbmltcG9ydCB7IFN0YXRzIH0gZnJvbSAnLi90eXBlcyc7XG5cbi8qKlxuICogQSBNZXRyaWNQcm9kdWNlciBwcm9kdWNlciB0aGF0IGNhbiBiZSByZWdpc3RlcmVkIGZvciBleHBvcnRpbmcgdXNpbmdcbiAqIE1ldHJpY1Byb2R1Y2VyTWFuYWdlci5cbiAqL1xuZXhwb3J0IGNsYXNzIE1ldHJpY1Byb2R1Y2VyRm9yU3RhdHMgZXh0ZW5kcyBCYXNlTWV0cmljUHJvZHVjZXIge1xuICBwcml2YXRlIHN0YXRzTWFuYWdlcjogU3RhdHM7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBzdGF0c01hbmFnZXIgVGhlIHN0YXRzXG4gICAqL1xuICBjb25zdHJ1Y3RvcihzdGF0c01hbmFnZXI6IFN0YXRzKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnN0YXRzTWFuYWdlciA9IHN0YXRzTWFuYWdlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGEgY29sbGVjdGlvbiBvZiBwcm9kdWNlZCBNZXRyaWNgcyB0byBiZSBleHBvcnRlZC5cbiAgICogQHJldHVybnMgVGhlIExpc3Qgb2YgbWV0cmljc1xuICAgKi9cbiAgZ2V0TWV0cmljcygpOiBNZXRyaWNbXSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdHNNYW5hZ2VyLmdldE1ldHJpY3MoKTtcbiAgfVxufVxuIl19
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMm5sZzcwOG01eCIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJlbmQiLCJmbk1hcCIsIm5hbWUiLCJkZWNsIiwibG9jIiwiYnJhbmNoTWFwIiwicyIsImYiLCJiIiwiaW5wdXRTb3VyY2VNYXAiLCJ2ZXJzaW9uIiwiZmlsZSIsInNvdXJjZXMiLCJuYW1lcyIsIm1hcHBpbmdzIiwic291cmNlc0NvbnRlbnQiLCJfY292ZXJhZ2VTY2hlbWEiLCJjb3ZlcmFnZSIsImFjdHVhbENvdmVyYWdlIiwiYmFzZV9tZXRyaWNfcHJvZHVjZXJfMSIsInJlcXVpcmUiLCJNZXRyaWNQcm9kdWNlckZvclN0YXRzIiwiQmFzZU1ldHJpY1Byb2R1Y2VyIiwiY29uc3RydWN0b3IiLCJzdGF0c01hbmFnZXIiLCJnZXRNZXRyaWNzIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VybWFpdGhhL3RyYWRlbWFzdGVyL2xpYnMvbGliLWV4dGVybmFsLW9wZW5jZW5zdXMtbm9kZS9zcmMvc3RhdHMvbWV0cmljLXByb2R1Y2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTgsIE9wZW5DZW5zdXMgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQmFzZU1ldHJpY1Byb2R1Y2VyIH0gZnJvbSAnLi4vbWV0cmljcy9leHBvcnQvYmFzZS1tZXRyaWMtcHJvZHVjZXInO1xuaW1wb3J0IHsgTWV0cmljIH0gZnJvbSAnLi4vbWV0cmljcy9leHBvcnQvdHlwZXMnO1xuaW1wb3J0IHsgU3RhdHMgfSBmcm9tICcuL3R5cGVzJztcblxuLyoqXG4gKiBBIE1ldHJpY1Byb2R1Y2VyIHByb2R1Y2VyIHRoYXQgY2FuIGJlIHJlZ2lzdGVyZWQgZm9yIGV4cG9ydGluZyB1c2luZ1xuICogTWV0cmljUHJvZHVjZXJNYW5hZ2VyLlxuICovXG5leHBvcnQgY2xhc3MgTWV0cmljUHJvZHVjZXJGb3JTdGF0cyBleHRlbmRzIEJhc2VNZXRyaWNQcm9kdWNlciB7XG4gIHByaXZhdGUgc3RhdHNNYW5hZ2VyOiBTdGF0cztcblxuICAvKipcbiAgICogQHBhcmFtIHN0YXRzTWFuYWdlciBUaGUgc3RhdHNcbiAgICovXG4gIGNvbnN0cnVjdG9yKHN0YXRzTWFuYWdlcjogU3RhdHMpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuc3RhdHNNYW5hZ2VyID0gc3RhdHNNYW5hZ2VyO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgYSBjb2xsZWN0aW9uIG9mIHByb2R1Y2VkIE1ldHJpY2BzIHRvIGJlIGV4cG9ydGVkLlxuICAgKiBAcmV0dXJucyBUaGUgTGlzdCBvZiBtZXRyaWNzXG4gICAqL1xuICBnZXRNZXRyaWNzKCk6IE1ldHJpY1tdIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0c01hbmFnZXIuZ2V0TWV0cmljcygpO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiJhQUFBOzs7Ozs7Ozs7Ozs7OztHQUFBLFNBQUFBLGVBQUEsTUFBQUMsSUFBQSxvR0FBQUMsSUFBQSxnREFBQUMsTUFBQSxLQUFBQyxRQUFBLHNCQUFBQyxHQUFBLG9CQUFBQyxZQUFBLEVBQUFMLElBQUEsZ0dBQUFNLFlBQUEsT0FBQUMsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsV0FBQUYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsV0FBQUYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsS0FBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsV0FBQUYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsV0FBQUYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsV0FBQUYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsV0FBQUYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsT0FBQUUsS0FBQSxPQUFBQyxJQUFBLGlCQUFBQyxJQUFBLEVBQUFOLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFLLEdBQUEsRUFBQVAsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsS0FBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsS0FBQUQsSUFBQSxVQUFBSSxJQUFBLGlCQUFBQyxJQUFBLEVBQUFOLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFLLEdBQUEsRUFBQVAsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsS0FBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsS0FBQUQsSUFBQSxNQUFBTyxTQUFBLElBQUFDLENBQUEsNkNBQUFDLENBQUEsZUFBQUMsQ0FBQSxJQUFBQyxjQUFBLEVBQUFDLE9BQUEsR0FBQUMsSUFBQSxnR0FBQUMsT0FBQSxrR0FBQUMsS0FBQSxJQUFBQyxRQUFBLGtSQUFBQyxjQUFBLGswQ0FBQUMsZUFBQSw0Q0FBQXpCLElBQUEsaURBQUEwQixRQUFBLENBQUF6QixNQUFBLENBQUFFLEdBQUEsSUFBQUYsTUFBQSxDQUFBRSxHQUFBLFVBQUF1QixRQUFBLENBQUEzQixJQUFBLEdBQUEyQixRQUFBLENBQUEzQixJQUFBLEVBQUFDLElBQUEsR0FBQUEsSUFBQSxFQUFBMEIsUUFBQSxDQUFBM0IsSUFBQSxFQUFBSyxZQUFBLE1BQUF1QixjQUFBLENBQUFELFFBQUEsQ0FBQTNCLElBQUEsR0FjRztBQUFBRCxjQUFBLFNBQUFBLENBQUEsU0FBQTZCLGNBQUEsV0FBQUEsY0FBQSxFQUFBN0IsY0FBQSxHQUFBQSxjQUFBLEdBQUFpQixDQUFBLE0sdUhBRUgsTUFBQWEsc0JBQUEsRUFBQTlCLGNBQUEsR0FBQWlCLENBQUEsTUFBQWMsT0FBQSw0Q0FJQTs7O0dBSUEsS0FBYSxDQUFBQyxzQkFBdUIsU0FBUUYsc0JBQUEsQ0FBQUcsa0JBQWtCLEVBRzVEOztPQUdBQyxZQUFZQyxZQUFtQixFQUFBbkMsY0FBQSxHQUFBa0IsQ0FBQSxNQUFBbEIsY0FBQSxHQUFBaUIsQ0FBQSxNQUM3QixLQUFLLEVBQUUsQ0FBQ2pCLGNBQUEsR0FBQWlCLENBQUEsTUFDUixJQUFJLENBQUNrQixZQUFZLENBQUdBLFlBQVksQ0FDbEMsQ0FFQTs7O09BSUFDLFVBQVVBLENBQUEsRUFBQXBDLGNBQUEsR0FBQWtCLENBQUEsTUFBQWxCLGNBQUEsR0FBQWlCLENBQUEsTUFDUixNQUFPLEtBQUksQ0FBQ2tCLFlBQVksQ0FBQ0MsVUFBVSxFQUFFLENBQ3ZDLEMsQ0FDRHBDLGNBQUEsR0FBQWlCLENBQUEsTUFsQkRvQixPQUFBLENBQUFMLHNCQUFBLENBQUFBLHNCQUFBLEMifQ==