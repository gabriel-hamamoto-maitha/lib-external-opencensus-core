{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/types.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/types.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MeasureUnit } from './../stats/types';\nimport { LabelKey, LabelValue, Metric } from './export/types';\n\n/** Provides a {@link Metric} with one or more {@link TimeSeries} */\nexport interface Meter {\n  /**\n   * Provides a Metric with one or more TimeSeries.\n   *\n   * @returns The Metric, or null if TimeSeries is not present in Metric.\n   */\n  getMetric(): Metric | null;\n}\n\n/** Options for every metric added to the MetricRegistry. */\nexport interface MetricOptions {\n  /** The description of the metric. */\n  readonly description?: string;\n  /** The unit of the metric. */\n  readonly unit?: MeasureUnit;\n  /** The list of the label keys. */\n  readonly labelKeys?: LabelKey[];\n  /** The map of constant labels for the Metric. */\n  readonly constantLabels?: Map<LabelKey, LabelValue>;\n\n  // TODO(mayurkale): Add resource information.\n  // https://github.com/census-instrumentation/opencensus-specs/pull/248\n}\n\n/** Interface for objects with \"length()\" method. */\nexport interface LengthMethodInterface {\n  length(): number;\n}\n\n/** Interface for objects with \"length\" attribute (e.g. Array). */\nexport interface LengthAttributeInterface {\n  length: number;\n}\n\n/** Interface for objects with \"size\" method. */\nexport interface SizeMethodInterface {\n  size(): number;\n}\n\n/** Interface for objects with \"size\" attribute (e.g. Map, Set). */\nexport interface SizeAttributeInterface {\n  size: number;\n}\n\n/** Interface for objects with \"getValue\" method. */\nexport interface ToValueInterface {\n  getValue(): number;\n}\n\nexport interface AccessorFunction {\n  (): number;\n}\n\nexport type AccessorInterface =\n  | LengthAttributeInterface\n  | LengthMethodInterface\n  | SizeAttributeInterface\n  | SizeMethodInterface\n  | ToValueInterface\n  | AccessorFunction;\n"]}