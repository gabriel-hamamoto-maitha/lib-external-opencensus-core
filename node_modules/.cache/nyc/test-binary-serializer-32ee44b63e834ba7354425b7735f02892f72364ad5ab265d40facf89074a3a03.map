{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-binary-serializer.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-binary-serializer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport {\n  deserializeBinary,\n  serializeBinary,\n  TAG_MAP_SERIALIZED_SIZE_LIMIT,\n} from '../src/tags/propagation/binary-serializer';\nimport { TagMap } from '../src/tags/tag-map';\n\nconst K1 = {\n  name: 'k1',\n};\nconst K2 = {\n  name: 'k2',\n};\nconst K3 = {\n  name: 'k3',\n};\nconst K4 = {\n  name: 'k4',\n};\n\nconst V1 = {\n  value: 'v1',\n};\nconst V2 = {\n  value: 'v2',\n};\nconst V3 = {\n  value: 'v3',\n};\nconst V4 = {\n  value: 'v4',\n};\n\ndescribe('Binary Format Serializer', () => {\n  const emptyTagMap = new TagMap();\n\n  const singleTagMap = new TagMap();\n  singleTagMap.set(K1, V1);\n\n  const multipleTagMap = new TagMap();\n  multipleTagMap.set(K1, V1);\n  multipleTagMap.set(K2, V2);\n  multipleTagMap.set(K3, V3);\n  multipleTagMap.set(K4, V4);\n\n  describe('serializeBinary', () => {\n    it('should serialize empty tag map', () => {\n      const binary = serializeBinary(emptyTagMap);\n      assert.deepStrictEqual(deserializeBinary(binary), emptyTagMap);\n    });\n\n    it('should serialize with one tag map', () => {\n      const binary = serializeBinary(singleTagMap);\n      assert.deepStrictEqual(deserializeBinary(binary), singleTagMap);\n    });\n\n    it('should serialize with multiple tag', () => {\n      const binary = serializeBinary(multipleTagMap);\n      assert.deepStrictEqual(deserializeBinary(binary), multipleTagMap);\n    });\n\n    it('should throw an error when exceeds the max serialized size', () => {\n      const tags = new TagMap();\n      for (let i = 0; i < TAG_MAP_SERIALIZED_SIZE_LIMIT / 8 - 1; i++) {\n        // Each tag will be with format {key : \"0123\", value : \"0123\"}, so the\n        // length of it is 8.\n        const pad = '0000'.substring(0, 4 - `${i}`.length);\n        const str = `${pad}${i}`;\n        tags.set({ name: str }, { value: str });\n      }\n      // The last tag will be of size 9, so the total size of the TagMap\n      // (8193) will be one byte more than limit.\n      tags.set({ name: 'last' }, { value: 'last1' });\n\n      assert.throws(() => {\n        serializeBinary(tags);\n      }, /^Error: Size of TagMap exceeds the maximum serialized size 8192/);\n    });\n  });\n\n  describe('deserializeBinary', () => {\n    it('should throw an error when invalid tagKey', () => {\n      const buff = Buffer.from([\n        0x01,\n        0x00,\n        0x02,\n        0x6b,\n        0x31,\n        0x02,\n        0x76,\n        0x31,\n      ]);\n      assert.throws(() => {\n        deserializeBinary(buff);\n      }, /^Error: Wrong Version ID: 1. Currently supports version up to: 0/);\n    });\n\n    it('should stop parsing at first unknown field ID', () => {\n      const expectedTags = new TagMap();\n      expectedTags.set(K1, V1);\n\n      const buff = Buffer.from([\n        0x00,\n        0x00,\n        0x02,\n        0x6b,\n        0x31,\n        0x02,\n        0x76,\n        0x31,\n        0x01,\n        0x02,\n        0x6b,\n        0x32,\n        0x02,\n        0x76,\n        0x32,\n      ]);\n      const tags = deserializeBinary(buff);\n      assert.strictEqual(tags.tags.size, 1);\n      assert.deepStrictEqual(tags, expectedTags);\n    });\n  });\n});\n"]}