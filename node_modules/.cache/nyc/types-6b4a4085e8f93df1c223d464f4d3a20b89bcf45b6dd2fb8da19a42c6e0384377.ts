"use strict";/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_sfubingni(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/exporters/types.ts";var hash="43ca8d24dd90667c7f92e625c001de4886ddb958";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/exporters/types.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}}},fnMap:{},branchMap:{},s:{"0":0},f:{},b:{},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/exporters/types.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/exporters/types.ts"],names:[],mappings:";AAAA;;;;;;;;;;;;;;GAcG",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Measurement, View } from '../stats/types';\nimport { TagKey, TagValue } from '../tags/types';\nimport * as configTypes from '../trace/config/types';\nimport * as modelTypes from '../trace/model/types';\n\n/** Defines a trace exporter interface. */\nexport interface Exporter extends modelTypes.SpanEventListener {\n  /**\n   * Sends a list of spans to the service.\n   * @param spans A list of spans to publish.\n   */\n  publish(spans: modelTypes.Span[]): Promise<number | string | void>;\n}\n\n/**\n * An interface that describes the possible events that will be emitted from a\n * Stats instance. Stats exporters should implement this interface.\n */\nexport interface StatsEventListener {\n  /**\n   * Is called whenever a new view is registered\n   * @deprecated since version 0.0.9 - use {@link start} instead\n   * @param view The registered view\n   */\n  onRegisterView(view: View): void;\n\n  /**\n   * Is called whenever a new measurement is recorded.\n   * @deprecated since version 0.0.9 - use {@link start} instead\n   * @param views The views related to the measurement\n   * @param measurement The recorded measurement\n   * @param tags The tags to which the value is applied\n   */\n  onRecord(\n    views: View[],\n    measurement: Measurement,\n    tags: Map<TagKey, TagValue>\n  ): void;\n\n  /**\n   * Starts the exporter that polls Metric from Metrics library and send\n   * batched data to backend.\n   */\n  start(): void;\n\n  /** Stops the exporter. */\n  stop(): void;\n}\n\nexport type ExporterConfig = configTypes.BufferConfig;\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"43ca8d24dd90667c7f92e625c001de4886ddb958"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_sfubingni=function(){return actualCoverage;};}return actualCoverage;}cov_sfubingni();cov_sfubingni().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3VzZXJtYWl0aGEvdHJhZGVtYXN0ZXIvbGlicy9saWItZXh0ZXJuYWwtb3BlbmNlbnN1cy1ub2RlL3NyYy9leHBvcnRlcnMvdHlwZXMudHMiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VybWFpdGhhL3RyYWRlbWFzdGVyL2xpYnMvbGliLWV4dGVybmFsLW9wZW5jZW5zdXMtbm9kZS9zcmMvZXhwb3J0ZXJzL3R5cGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7R0FjRyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTgsIE9wZW5DZW5zdXMgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgTWVhc3VyZW1lbnQsIFZpZXcgfSBmcm9tICcuLi9zdGF0cy90eXBlcyc7XG5pbXBvcnQgeyBUYWdLZXksIFRhZ1ZhbHVlIH0gZnJvbSAnLi4vdGFncy90eXBlcyc7XG5pbXBvcnQgKiBhcyBjb25maWdUeXBlcyBmcm9tICcuLi90cmFjZS9jb25maWcvdHlwZXMnO1xuaW1wb3J0ICogYXMgbW9kZWxUeXBlcyBmcm9tICcuLi90cmFjZS9tb2RlbC90eXBlcyc7XG5cbi8qKiBEZWZpbmVzIGEgdHJhY2UgZXhwb3J0ZXIgaW50ZXJmYWNlLiAqL1xuZXhwb3J0IGludGVyZmFjZSBFeHBvcnRlciBleHRlbmRzIG1vZGVsVHlwZXMuU3BhbkV2ZW50TGlzdGVuZXIge1xuICAvKipcbiAgICogU2VuZHMgYSBsaXN0IG9mIHNwYW5zIHRvIHRoZSBzZXJ2aWNlLlxuICAgKiBAcGFyYW0gc3BhbnMgQSBsaXN0IG9mIHNwYW5zIHRvIHB1Ymxpc2guXG4gICAqL1xuICBwdWJsaXNoKHNwYW5zOiBtb2RlbFR5cGVzLlNwYW5bXSk6IFByb21pc2U8bnVtYmVyIHwgc3RyaW5nIHwgdm9pZD47XG59XG5cbi8qKlxuICogQW4gaW50ZXJmYWNlIHRoYXQgZGVzY3JpYmVzIHRoZSBwb3NzaWJsZSBldmVudHMgdGhhdCB3aWxsIGJlIGVtaXR0ZWQgZnJvbSBhXG4gKiBTdGF0cyBpbnN0YW5jZS4gU3RhdHMgZXhwb3J0ZXJzIHNob3VsZCBpbXBsZW1lbnQgdGhpcyBpbnRlcmZhY2UuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU3RhdHNFdmVudExpc3RlbmVyIHtcbiAgLyoqXG4gICAqIElzIGNhbGxlZCB3aGVuZXZlciBhIG5ldyB2aWV3IGlzIHJlZ2lzdGVyZWRcbiAgICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAwLjAuOSAtIHVzZSB7QGxpbmsgc3RhcnR9IGluc3RlYWRcbiAgICogQHBhcmFtIHZpZXcgVGhlIHJlZ2lzdGVyZWQgdmlld1xuICAgKi9cbiAgb25SZWdpc3RlclZpZXcodmlldzogVmlldyk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIElzIGNhbGxlZCB3aGVuZXZlciBhIG5ldyBtZWFzdXJlbWVudCBpcyByZWNvcmRlZC5cbiAgICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAwLjAuOSAtIHVzZSB7QGxpbmsgc3RhcnR9IGluc3RlYWRcbiAgICogQHBhcmFtIHZpZXdzIFRoZSB2aWV3cyByZWxhdGVkIHRvIHRoZSBtZWFzdXJlbWVudFxuICAgKiBAcGFyYW0gbWVhc3VyZW1lbnQgVGhlIHJlY29yZGVkIG1lYXN1cmVtZW50XG4gICAqIEBwYXJhbSB0YWdzIFRoZSB0YWdzIHRvIHdoaWNoIHRoZSB2YWx1ZSBpcyBhcHBsaWVkXG4gICAqL1xuICBvblJlY29yZChcbiAgICB2aWV3czogVmlld1tdLFxuICAgIG1lYXN1cmVtZW50OiBNZWFzdXJlbWVudCxcbiAgICB0YWdzOiBNYXA8VGFnS2V5LCBUYWdWYWx1ZT5cbiAgKTogdm9pZDtcblxuICAvKipcbiAgICogU3RhcnRzIHRoZSBleHBvcnRlciB0aGF0IHBvbGxzIE1ldHJpYyBmcm9tIE1ldHJpY3MgbGlicmFyeSBhbmQgc2VuZFxuICAgKiBiYXRjaGVkIGRhdGEgdG8gYmFja2VuZC5cbiAgICovXG4gIHN0YXJ0KCk6IHZvaWQ7XG5cbiAgLyoqIFN0b3BzIHRoZSBleHBvcnRlci4gKi9cbiAgc3RvcCgpOiB2b2lkO1xufVxuXG5leHBvcnQgdHlwZSBFeHBvcnRlckNvbmZpZyA9IGNvbmZpZ1R5cGVzLkJ1ZmZlckNvbmZpZztcbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3Zfc2Z1YmluZ25pIiwicGF0aCIsImhhc2giLCJnbG9iYWwiLCJGdW5jdGlvbiIsImdjdiIsImNvdmVyYWdlRGF0YSIsInN0YXRlbWVudE1hcCIsInN0YXJ0IiwibGluZSIsImNvbHVtbiIsImVuZCIsImZuTWFwIiwiYnJhbmNoTWFwIiwicyIsImYiLCJiIiwiaW5wdXRTb3VyY2VNYXAiLCJ2ZXJzaW9uIiwiZmlsZSIsInNvdXJjZXMiLCJuYW1lcyIsIm1hcHBpbmdzIiwic291cmNlc0NvbnRlbnQiLCJfY292ZXJhZ2VTY2hlbWEiLCJjb3ZlcmFnZSIsImFjdHVhbENvdmVyYWdlIl0sInNvdXJjZXMiOlsiL1VzZXJzL3VzZXJtYWl0aGEvdHJhZGVtYXN0ZXIvbGlicy9saWItZXh0ZXJuYWwtb3BlbmNlbnN1cy1ub2RlL3NyYy9leHBvcnRlcnMvdHlwZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCwgT3BlbkNlbnN1cyBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBNZWFzdXJlbWVudCwgVmlldyB9IGZyb20gJy4uL3N0YXRzL3R5cGVzJztcbmltcG9ydCB7IFRhZ0tleSwgVGFnVmFsdWUgfSBmcm9tICcuLi90YWdzL3R5cGVzJztcbmltcG9ydCAqIGFzIGNvbmZpZ1R5cGVzIGZyb20gJy4uL3RyYWNlL2NvbmZpZy90eXBlcyc7XG5pbXBvcnQgKiBhcyBtb2RlbFR5cGVzIGZyb20gJy4uL3RyYWNlL21vZGVsL3R5cGVzJztcblxuLyoqIERlZmluZXMgYSB0cmFjZSBleHBvcnRlciBpbnRlcmZhY2UuICovXG5leHBvcnQgaW50ZXJmYWNlIEV4cG9ydGVyIGV4dGVuZHMgbW9kZWxUeXBlcy5TcGFuRXZlbnRMaXN0ZW5lciB7XG4gIC8qKlxuICAgKiBTZW5kcyBhIGxpc3Qgb2Ygc3BhbnMgdG8gdGhlIHNlcnZpY2UuXG4gICAqIEBwYXJhbSBzcGFucyBBIGxpc3Qgb2Ygc3BhbnMgdG8gcHVibGlzaC5cbiAgICovXG4gIHB1Ymxpc2goc3BhbnM6IG1vZGVsVHlwZXMuU3BhbltdKTogUHJvbWlzZTxudW1iZXIgfCBzdHJpbmcgfCB2b2lkPjtcbn1cblxuLyoqXG4gKiBBbiBpbnRlcmZhY2UgdGhhdCBkZXNjcmliZXMgdGhlIHBvc3NpYmxlIGV2ZW50cyB0aGF0IHdpbGwgYmUgZW1pdHRlZCBmcm9tIGFcbiAqIFN0YXRzIGluc3RhbmNlLiBTdGF0cyBleHBvcnRlcnMgc2hvdWxkIGltcGxlbWVudCB0aGlzIGludGVyZmFjZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTdGF0c0V2ZW50TGlzdGVuZXIge1xuICAvKipcbiAgICogSXMgY2FsbGVkIHdoZW5ldmVyIGEgbmV3IHZpZXcgaXMgcmVnaXN0ZXJlZFxuICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDAuMC45IC0gdXNlIHtAbGluayBzdGFydH0gaW5zdGVhZFxuICAgKiBAcGFyYW0gdmlldyBUaGUgcmVnaXN0ZXJlZCB2aWV3XG4gICAqL1xuICBvblJlZ2lzdGVyVmlldyh2aWV3OiBWaWV3KTogdm9pZDtcblxuICAvKipcbiAgICogSXMgY2FsbGVkIHdoZW5ldmVyIGEgbmV3IG1lYXN1cmVtZW50IGlzIHJlY29yZGVkLlxuICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDAuMC45IC0gdXNlIHtAbGluayBzdGFydH0gaW5zdGVhZFxuICAgKiBAcGFyYW0gdmlld3MgVGhlIHZpZXdzIHJlbGF0ZWQgdG8gdGhlIG1lYXN1cmVtZW50XG4gICAqIEBwYXJhbSBtZWFzdXJlbWVudCBUaGUgcmVjb3JkZWQgbWVhc3VyZW1lbnRcbiAgICogQHBhcmFtIHRhZ3MgVGhlIHRhZ3MgdG8gd2hpY2ggdGhlIHZhbHVlIGlzIGFwcGxpZWRcbiAgICovXG4gIG9uUmVjb3JkKFxuICAgIHZpZXdzOiBWaWV3W10sXG4gICAgbWVhc3VyZW1lbnQ6IE1lYXN1cmVtZW50LFxuICAgIHRhZ3M6IE1hcDxUYWdLZXksIFRhZ1ZhbHVlPlxuICApOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBTdGFydHMgdGhlIGV4cG9ydGVyIHRoYXQgcG9sbHMgTWV0cmljIGZyb20gTWV0cmljcyBsaWJyYXJ5IGFuZCBzZW5kXG4gICAqIGJhdGNoZWQgZGF0YSB0byBiYWNrZW5kLlxuICAgKi9cbiAgc3RhcnQoKTogdm9pZDtcblxuICAvKiogU3RvcHMgdGhlIGV4cG9ydGVyLiAqL1xuICBzdG9wKCk6IHZvaWQ7XG59XG5cbmV4cG9ydCB0eXBlIEV4cG9ydGVyQ29uZmlnID0gY29uZmlnVHlwZXMuQnVmZmVyQ29uZmlnO1xuIl0sIm1hcHBpbmdzIjoiYUFBQTs7Ozs7Ozs7Ozs7Ozs7R0FBQSxTQUFBQSxjQUFBLE1BQUFDLElBQUEsOEZBQUFDLElBQUEsZ0RBQUFDLE1BQUEsS0FBQUMsUUFBQSxzQkFBQUMsR0FBQSxvQkFBQUMsWUFBQSxFQUFBTCxJQUFBLDBGQUFBTSxZQUFBLE9BQUFDLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLE9BQUFFLEtBQUEsSUFBQUMsU0FBQSxJQUFBQyxDQUFBLFNBQUFDLENBQUEsSUFBQUMsQ0FBQSxJQUFBQyxjQUFBLEVBQUFDLE9BQUEsR0FBQUMsSUFBQSwwRkFBQUMsT0FBQSw0RkFBQUMsS0FBQSxJQUFBQyxRQUFBLDJCQUFBQyxjQUFBLHdwRUFBQUMsZUFBQSw0Q0FBQXRCLElBQUEsaURBQUF1QixRQUFBLENBQUF0QixNQUFBLENBQUFFLEdBQUEsSUFBQUYsTUFBQSxDQUFBRSxHQUFBLFVBQUFvQixRQUFBLENBQUF4QixJQUFBLEdBQUF3QixRQUFBLENBQUF4QixJQUFBLEVBQUFDLElBQUEsR0FBQUEsSUFBQSxFQUFBdUIsUUFBQSxDQUFBeEIsSUFBQSxFQUFBSyxZQUFBLE1BQUFvQixjQUFBLENBQUFELFFBQUEsQ0FBQXhCLElBQUEsR0FjRztBQUFBRCxhQUFBLFNBQUFBLENBQUEsU0FBQTBCLGNBQUEsV0FBQUEsY0FBQSxFQUFBMUIsYUFBQSxHQUFBQSxhQUFBLEdBQUFjLENBQUEsTSJ9