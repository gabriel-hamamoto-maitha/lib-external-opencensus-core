{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-text-format.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-text-format.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport { TagMap, TagTtl } from '../src';\nimport {\n  deserializeTextFormat,\n  MAX_NUMBER_OF_TAGS,\n  serializeTextFormat,\n} from '../src/tags/propagation/text-format';\n\nconst K1 = {\n  name: 'k1',\n};\nconst K2 = {\n  name: 'k2',\n};\n\nconst V1 = {\n  value: 'v1',\n};\nconst V2 = {\n  value: 'v2',\n};\n\ndescribe('Text Format Serializer', () => {\n  const emptyTagMap = new TagMap();\n\n  const singleTagMap = new TagMap();\n  singleTagMap.set(K1, V1);\n\n  const multipleTagMap = new TagMap();\n  multipleTagMap.set(K1, V1);\n  multipleTagMap.set(K2, V2);\n\n  const NO_PROPAGATION_MD = { tagTtl: TagTtl.NO_PROPAGATION };\n  const nonPropagatingTagMap = new TagMap();\n  nonPropagatingTagMap.set(K1, V1, NO_PROPAGATION_MD);\n\n  describe('serializeTextFormat', () => {\n    it('should serialize empty tag map', () => {\n      const textFormat = serializeTextFormat(emptyTagMap);\n      assert.strictEqual(textFormat, '');\n    });\n\n    it('should serialize with one tag map', () => {\n      const textFormat = serializeTextFormat(singleTagMap);\n      assert.deepStrictEqual(textFormat, 'k1=v1');\n    });\n\n    it('should serialize with multiple tag', () => {\n      const textFormat = serializeTextFormat(multipleTagMap);\n      assert.deepStrictEqual(textFormat, 'k1=v1,k2=v2');\n    });\n\n    it('should skip non propagating tag', () => {\n      const textFormat = serializeTextFormat(nonPropagatingTagMap);\n      assert.deepStrictEqual(textFormat, '');\n    });\n\n    it('should throw an error when exceeds the max number of tags', () => {\n      const tags = new TagMap();\n      for (let i = 0; i < MAX_NUMBER_OF_TAGS + 1; i++) {\n        tags.set({ name: `name-${i}` }, { value: `value-${i}` });\n      }\n\n      assert.throws(() => {\n        serializeTextFormat(tags);\n      }, /^Error: Number of tags in the TagMap exceeds limit 180/);\n    });\n  });\n\n  describe('deserializeTextFormat', () => {\n    it('should deserialize empty string', () => {\n      const deserializedTagMap = deserializeTextFormat('');\n      assert.deepStrictEqual(deserializedTagMap.tags.size, 0);\n    });\n\n    it('should deserialize with one key value pair', () => {\n      const deserializedTagMap = deserializeTextFormat('k1=v1');\n      assert.deepStrictEqual(deserializedTagMap.tags.size, 1);\n      assert.deepStrictEqual(deserializedTagMap, singleTagMap);\n    });\n\n    it('should deserialize with multiple pairs', () => {\n      const deserializedTagMap = deserializeTextFormat('k1=v1,k2=v2');\n      assert.deepStrictEqual(deserializedTagMap.tags.size, 2);\n      assert.deepStrictEqual(deserializedTagMap, multipleTagMap);\n    });\n\n    it('should deserialize with white spaces tag', () => {\n      const expectedTagMap = new TagMap();\n      expectedTagMap.set(K1, { value: ' v1' });\n      expectedTagMap.set({ name: ' k2' }, { value: 'v 2' });\n\n      const deserializedTagMap = deserializeTextFormat('k1= v1, k2=v 2');\n      assert.deepStrictEqual(deserializedTagMap.tags.size, 2);\n      assert.deepStrictEqual(deserializedTagMap, expectedTagMap);\n    });\n\n    it('should throw an error when tags are malformed', () => {\n      assert.throws(() => {\n        deserializeTextFormat('k1,v1,k2=v2');\n      }, /^Error: Malformed tag k1/);\n    });\n  });\n});\n"]}