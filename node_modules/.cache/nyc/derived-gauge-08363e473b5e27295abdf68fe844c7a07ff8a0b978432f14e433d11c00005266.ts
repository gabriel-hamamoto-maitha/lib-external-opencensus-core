"use strict";/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_mshxgz9hn(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/gauges/derived-gauge.ts";var hash="bf5ea5bfc00267d97e29e748a57a5381b6876c30";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/gauges/derived-gauge.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:0},end:{line:18,column:30}},"2":{start:{line:19,column:20},end:{line:19,column:53}},"3":{start:{line:20,column:22},end:{line:20,column:57}},"4":{start:{line:21,column:13},end:{line:21,column:32}},"5":{start:{line:37,column:8},end:{line:37,column:45}},"6":{start:{line:38,column:8},end:{line:38,column:42}},"7":{start:{line:39,column:8},end:{line:39,column:48}},"8":{start:{line:40,column:36},end:{line:40,column:76}},"9":{start:{line:41,column:8},end:{line:41,column:64}},"10":{start:{line:42,column:8},end:{line:48,column:10}},"11":{start:{line:64,column:8},end:{line:64,column:148}},"12":{start:{line:65,column:8},end:{line:65,column:68}},"13":{start:{line:66,column:21},end:{line:66,column:54}},"14":{start:{line:67,column:8},end:{line:69,column:9}},"15":{start:{line:68,column:12},end:{line:68,column:78}},"16":{start:{line:70,column:8},end:{line:72,column:9}},"17":{start:{line:71,column:12},end:{line:71,column:69}},"18":{start:{line:73,column:8},end:{line:93,column:9}},"19":{start:{line:74,column:12},end:{line:74,column:37}},"20":{start:{line:76,column:13},end:{line:93,column:9}},"21":{start:{line:77,column:12},end:{line:77,column:54}},"22":{start:{line:77,column:35},end:{line:77,column:53}},"23":{start:{line:79,column:13},end:{line:93,column:9}},"24":{start:{line:80,column:12},end:{line:80,column:50}},"25":{start:{line:80,column:35},end:{line:80,column:49}},"26":{start:{line:82,column:13},end:{line:93,column:9}},"27":{start:{line:83,column:12},end:{line:83,column:52}},"28":{start:{line:83,column:35},end:{line:83,column:51}},"29":{start:{line:85,column:13},end:{line:93,column:9}},"30":{start:{line:86,column:12},end:{line:86,column:48}},"31":{start:{line:86,column:35},end:{line:86,column:47}},"32":{start:{line:88,column:13},end:{line:93,column:9}},"33":{start:{line:89,column:12},end:{line:89,column:50}},"34":{start:{line:89,column:35},end:{line:89,column:49}},"35":{start:{line:92,column:12},end:{line:92,column:74}},"36":{start:{line:94,column:8},end:{line:94,column:84}},"37":{start:{line:104,column:8},end:{line:104,column:78}},"38":{start:{line:105,column:8},end:{line:105,column:72}},"39":{start:{line:112,column:8},end:{line:112,column:38}},"40":{start:{line:120,column:8},end:{line:122,column:9}},"41":{start:{line:121,column:12},end:{line:121,column:24}},"42":{start:{line:123,column:26},end:{line:123,column:69}},"43":{start:{line:124,column:8},end:{line:130,column:10}},"44":{start:{line:126,column:80},end:{line:129,column:13}},"45":{start:{line:133,column:0},end:{line:133,column:36}},"46":{start:{line:134,column:0},end:{line:134,column:40}},"47":{start:{line:135,column:0},end:{line:135,column:42}},"48":{start:{line:136,column:0},end:{line:136,column:28}},"49":{start:{line:137,column:0},end:{line:137,column:93}},"50":{start:{line:138,column:0},end:{line:138,column:114}},"51":{start:{line:139,column:0},end:{line:139,column:79}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:36,column:4},end:{line:36,column:5}},loc:{start:{line:36,column:74},end:{line:49,column:5}},line:36},"1":{name:"(anonymous_1)",decl:{start:{line:63,column:4},end:{line:63,column:5}},loc:{start:{line:63,column:43},end:{line:95,column:5}},line:63},"2":{name:"(anonymous_2)",decl:{start:{line:77,column:29},end:{line:77,column:30}},loc:{start:{line:77,column:35},end:{line:77,column:53}},line:77},"3":{name:"(anonymous_3)",decl:{start:{line:80,column:29},end:{line:80,column:30}},loc:{start:{line:80,column:35},end:{line:80,column:49}},line:80},"4":{name:"(anonymous_4)",decl:{start:{line:83,column:29},end:{line:83,column:30}},loc:{start:{line:83,column:35},end:{line:83,column:51}},line:83},"5":{name:"(anonymous_5)",decl:{start:{line:86,column:29},end:{line:86,column:30}},loc:{start:{line:86,column:35},end:{line:86,column:47}},line:86},"6":{name:"(anonymous_6)",decl:{start:{line:89,column:29},end:{line:89,column:30}},loc:{start:{line:89,column:35},end:{line:89,column:49}},line:89},"7":{name:"(anonymous_7)",decl:{start:{line:103,column:4},end:{line:103,column:5}},loc:{start:{line:103,column:34},end:{line:106,column:5}},line:103},"8":{name:"(anonymous_8)",decl:{start:{line:111,column:4},end:{line:111,column:5}},loc:{start:{line:111,column:12},end:{line:113,column:5}},line:111},"9":{name:"(anonymous_9)",decl:{start:{line:119,column:4},end:{line:119,column:5}},loc:{start:{line:119,column:16},end:{line:131,column:5}},line:119},"10":{name:"(anonymous_10)",decl:{start:{line:126,column:58},end:{line:126,column:59}},loc:{start:{line:126,column:80},end:{line:129,column:13}},line:126}},branchMap:{"0":{loc:{start:{line:67,column:8},end:{line:69,column:9}},type:"if",locations:[{start:{line:67,column:8},end:{line:69,column:9}},{start:{line:67,column:8},end:{line:69,column:9}}],line:67},"1":{loc:{start:{line:70,column:8},end:{line:72,column:9}},type:"if",locations:[{start:{line:70,column:8},end:{line:72,column:9}},{start:{line:70,column:8},end:{line:72,column:9}}],line:70},"2":{loc:{start:{line:73,column:8},end:{line:93,column:9}},type:"if",locations:[{start:{line:73,column:8},end:{line:93,column:9}},{start:{line:73,column:8},end:{line:93,column:9}}],line:73},"3":{loc:{start:{line:76,column:13},end:{line:93,column:9}},type:"if",locations:[{start:{line:76,column:13},end:{line:93,column:9}},{start:{line:76,column:13},end:{line:93,column:9}}],line:76},"4":{loc:{start:{line:79,column:13},end:{line:93,column:9}},type:"if",locations:[{start:{line:79,column:13},end:{line:93,column:9}},{start:{line:79,column:13},end:{line:93,column:9}}],line:79},"5":{loc:{start:{line:82,column:13},end:{line:93,column:9}},type:"if",locations:[{start:{line:82,column:13},end:{line:93,column:9}},{start:{line:82,column:13},end:{line:93,column:9}}],line:82},"6":{loc:{start:{line:85,column:13},end:{line:93,column:9}},type:"if",locations:[{start:{line:85,column:13},end:{line:93,column:9}},{start:{line:85,column:13},end:{line:93,column:9}}],line:85},"7":{loc:{start:{line:88,column:13},end:{line:93,column:9}},type:"if",locations:[{start:{line:88,column:13},end:{line:93,column:9}},{start:{line:88,column:13},end:{line:93,column:9}}],line:88},"8":{loc:{start:{line:120,column:8},end:{line:122,column:9}},type:"if",locations:[{start:{line:120,column:8},end:{line:122,column:9}},{start:{line:120,column:8},end:{line:122,column:9}}],line:120}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/gauges/derived-gauge.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/gauges/derived-gauge.ts"],names:[],mappings:";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,sDAAuE;AACvE,0DAGkC;AAYlC,iCAAiC;AASjC;;GAEG;AACH,MAAa,YAAY;IAiBvB;;;;;;;;;OASG;IACH,YACE,IAAY,EACZ,WAAmB,EACnB,IAAY,EACZ,IAA0B,EAC1B,SAAqB,EACZ,cAAyC;QAAzC,mBAAc,GAAd,cAAc,CAA2B;QA9B5C,qBAAgB,GAA4B,IAAI,GAAG,EAAE,CAAC;QAgC5D,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC,MAAM,CAAC;QACxC,MAAM,mBAAmB,GAAG,CAAC,GAAG,SAAS,EAAE,GAAG,cAAc,CAAC,IAAI,EAAE,CAAC,CAAC;QACrE,IAAI,CAAC,mBAAmB,GAAG,CAAC,GAAG,cAAc,CAAC,MAAM,EAAE,CAAC,CAAC;QAExD,IAAI,CAAC,gBAAgB,GAAG;YACtB,IAAI;YACJ,WAAW;YACX,IAAI;YACJ,IAAI;YACJ,SAAS,EAAE,mBAAmB;SAC/B,CAAC;IACJ,CAAC;IAED;;;;;;;;;;;;OAYG;IACH,gBAAgB,CACd,WAAyB,EACzB,OAA0B;QAE1B,0CAA4B,CAC1B,6BAAe,CAAC,WAAW,EAAE,YAAY,CAAC,YAAY,CAAC,EACvD,YAAY,CAAC,WAAW,CACzB,CAAC;QACF,6BAAe,CAAC,OAAO,EAAE,YAAY,CAAC,MAAM,CAAC,CAAC;QAE9C,MAAM,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;QAC/C,IAAI,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACnC,MAAM,IAAI,KAAK,CAAC,YAAY,CAAC,mCAAmC,CAAC,CAAC;SACnE;QACD,IAAI,IAAI,CAAC,eAAe,KAAK,WAAW,CAAC,MAAM,EAAE;YAC/C,MAAM,IAAI,KAAK,CAAC,YAAY,CAAC,0BAA0B,CAAC,CAAC;SAC1D;QAED,IAAI,OAAO,YAAY,QAAQ,EAAE;YAC/B,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC;SAC1B;aAAM,IAAI,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE;YAC3C,IAAI,CAAC,SAAS,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;SAC3C;aAAM,IAAI,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,EAAE;YACnD,IAAI,CAAC,SAAS,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC;SACvC;aAAM,IAAI,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,EAAE;YAChD,IAAI,CAAC,SAAS,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;SACzC;aAAM,IAAI,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,EAAE;YACjD,IAAI,CAAC,SAAS,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC;SACrC;aAAM,IAAI,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,EAAE;YAC9C,IAAI,CAAC,SAAS,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;SACvC;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,YAAY,CAAC,+BAA+B,CAAC,CAAC;SAC/D;QAED,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,WAAW,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;IAC9E,CAAC;IAED;;;;;;OAMG;IACH,gBAAgB,CAAC,WAAyB;QACxC,6BAAe,CAAC,WAAW,EAAE,YAAY,CAAC,YAAY,CAAC,CAAC;QACxD,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC,CAAC;IAClE,CAAC;IAED;;;OAGG;IACH,KAAK;QACH,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;IAChC,CAAC;IAED;;;;OAIG;IACH,SAAS;QACP,IAAI,IAAI,CAAC,gBAAgB,CAAC,IAAI,KAAK,CAAC,EAAE;YACpC,OAAO,IAAI,CAAC;SACb;QACD,MAAM,SAAS,GAAc,yCAA6B,EAAE,CAAC;QAC7D,OAAO;YACL,UAAU,EAAE,IAAI,CAAC,gBAAgB;YACjC,UAAU,EAAE,KAAK,CAAC,IAAI,CACpB,IAAI,CAAC,gBAAgB,EACrB,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,EAAc,EAAE,CAAC,CAAC;gBAChC,WAAW,EAAE,CAAC,GAAG,UAAU,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,mBAAmB,CAAC;gBACrE,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,UAAU,CAAC,SAAS,EAAE,EAAE,SAAS,EAAE,CAAC;aACvD,CAAC,CACH;SACF,CAAC;IACJ,CAAC;;AA1IH,oCA2IC;AApIyB,wBAAW,GAAG,YAAY,CAAC;AAC3B,yBAAY,GAAG,aAAa,CAAC;AAC7B,mBAAM,GAAG,KAAK,CAAC;AACf,uCAA0B,GAChD,kDAAkD,CAAC;AAC7B,gDAAmC,GACzD,8DAA8D,CAAC;AACzC,4CAA+B,GACrD,+BAA+B,CAAC",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getTimestampWithProcessHRTime } from '../../common/time-util';\nimport {\n  validateArrayElementsNotNull,\n  validateNotNull,\n} from '../../common/validations';\nimport {\n  LabelKey,\n  LabelValue,\n  Metric,\n  MetricDescriptor,\n  MetricDescriptorType,\n  TimeSeries,\n  Timestamp,\n} from '../export/types';\nimport * as types from '../types';\nimport { AccessorInterface } from '../types';\nimport * as util from '../utils';\n\ntype ValueExtractor = () => number;\n\ninterface GaugeEntry {\n  readonly labelValues: LabelValue[];\n  readonly extractor: ValueExtractor;\n}\n\n/**\n * DerivedGauge metric\n */\nexport class DerivedGauge implements types.Meter {\n  private metricDescriptor: MetricDescriptor;\n  private labelKeysLength: number;\n  private registeredPoints: Map<string, GaugeEntry> = new Map();\n  private extractor?: ValueExtractor;\n  private readonly constantLabelValues: LabelValue[];\n\n  private static readonly LABEL_VALUE = 'labelValue';\n  private static readonly LABEL_VALUES = 'labelValues';\n  private static readonly OBJECT = 'obj';\n  private static readonly ERROR_MESSAGE_INVALID_SIZE =\n    \"Label Keys and Label Values don't have same size\";\n  private static readonly ERROR_MESSAGE_DUPLICATE_TIME_SERIES =\n    'A different time series with the same labels already exists.';\n  private static readonly ERROR_MESSAGE_UNKNOWN_INTERFACE =\n    'Unknown interface/object type';\n\n  /**\n   * Constructs a new DerivedGauge instance.\n   *\n   * @param name The name of the metric.\n   * @param description The description of the metric.\n   * @param unit The unit of the metric.\n   * @param type The type of metric.\n   * @param labelKeys The list of the label keys.\n   * @param constantLabels The map of constant labels for the Metric.\n   */\n  constructor(\n    name: string,\n    description: string,\n    unit: string,\n    type: MetricDescriptorType,\n    labelKeys: LabelKey[],\n    readonly constantLabels: Map<LabelKey, LabelValue>\n  ) {\n    this.labelKeysLength = labelKeys.length;\n    const keysAndConstantKeys = [...labelKeys, ...constantLabels.keys()];\n    this.constantLabelValues = [...constantLabels.values()];\n\n    this.metricDescriptor = {\n      name,\n      description,\n      unit,\n      type,\n      labelKeys: keysAndConstantKeys,\n    };\n  }\n\n  /**\n   * Creates a TimeSeries. The value of a single point in the TimeSeries is\n   * observed from a obj or a function. The ValueExtractor is invoked whenever\n   * metrics are collected, meaning the reported value is up-to-date.\n   *\n   * @param labelValues The list of the label values.\n   * @param objOrFn obj The obj to get the size or length or value from. If\n   *     multiple options are available, the value (ToValueInterface) takes\n   *     precedence first, followed by length and size. e.g value -> length ->\n   *     size.\n   *     fn is the function that will be called to get the current value\n   *     of the gauge.\n   */\n  createTimeSeries(\n    labelValues: LabelValue[],\n    objOrFn: AccessorInterface\n  ): void {\n    validateArrayElementsNotNull(\n      validateNotNull(labelValues, DerivedGauge.LABEL_VALUES),\n      DerivedGauge.LABEL_VALUE\n    );\n    validateNotNull(objOrFn, DerivedGauge.OBJECT);\n\n    const hash = util.hashLabelValues(labelValues);\n    if (this.registeredPoints.has(hash)) {\n      throw new Error(DerivedGauge.ERROR_MESSAGE_DUPLICATE_TIME_SERIES);\n    }\n    if (this.labelKeysLength !== labelValues.length) {\n      throw new Error(DerivedGauge.ERROR_MESSAGE_INVALID_SIZE);\n    }\n\n    if (objOrFn instanceof Function) {\n      this.extractor = objOrFn;\n    } else if (util.isToValueInterface(objOrFn)) {\n      this.extractor = () => objOrFn.getValue();\n    } else if (util.isLengthAttributeInterface(objOrFn)) {\n      this.extractor = () => objOrFn.length;\n    } else if (util.isLengthMethodInterface(objOrFn)) {\n      this.extractor = () => objOrFn.length();\n    } else if (util.isSizeAttributeInterface(objOrFn)) {\n      this.extractor = () => objOrFn.size;\n    } else if (util.isSizeMethodInterface(objOrFn)) {\n      this.extractor = () => objOrFn.size();\n    } else {\n      throw new Error(DerivedGauge.ERROR_MESSAGE_UNKNOWN_INTERFACE);\n    }\n\n    this.registeredPoints.set(hash, { labelValues, extractor: this.extractor });\n  }\n\n  /**\n   * Removes the TimeSeries from the gauge metric, if it is present. i.e.\n   * references to previous Point objects are invalid (not part of the\n   * metric).\n   *\n   * @param labelValues The list of label values.\n   */\n  removeTimeSeries(labelValues: LabelValue[]): void {\n    validateNotNull(labelValues, DerivedGauge.LABEL_VALUES);\n    this.registeredPoints.delete(util.hashLabelValues(labelValues));\n  }\n\n  /**\n   * Removes all TimeSeries from the gauge metric. i.e. references to all\n   * previous Point objects are invalid (not part of the metric).\n   */\n  clear(): void {\n    this.registeredPoints.clear();\n  }\n\n  /**\n   * Provides a Metric with one or more TimeSeries.\n   *\n   * @returns The Metric, or null if TimeSeries is not present in Metric.\n   */\n  getMetric(): Metric | null {\n    if (this.registeredPoints.size === 0) {\n      return null;\n    }\n    const timestamp: Timestamp = getTimestampWithProcessHRTime();\n    return {\n      descriptor: this.metricDescriptor,\n      timeseries: Array.from(\n        this.registeredPoints,\n        ([_, gaugeEntry]): TimeSeries => ({\n          labelValues: [...gaugeEntry.labelValues, ...this.constantLabelValues],\n          points: [{ value: gaugeEntry.extractor(), timestamp }],\n        })\n      ),\n    };\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"bf5ea5bfc00267d97e29e748a57a5381b6876c30"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_mshxgz9hn=function(){return actualCoverage;};}return actualCoverage;}cov_mshxgz9hn();cov_mshxgz9hn().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_mshxgz9hn().s[1]++;exports.DerivedGauge=void 0;const time_util_1=(cov_mshxgz9hn().s[2]++,require("../../common/time-util"));const validations_1=(cov_mshxgz9hn().s[3]++,require("../../common/validations"));const util=(cov_mshxgz9hn().s[4]++,require("../utils"));/**
 * DerivedGauge metric
 */class DerivedGauge{/**
     * Constructs a new DerivedGauge instance.
     *
     * @param name The name of the metric.
     * @param description The description of the metric.
     * @param unit The unit of the metric.
     * @param type The type of metric.
     * @param labelKeys The list of the label keys.
     * @param constantLabels The map of constant labels for the Metric.
     */constructor(name,description,unit,type,labelKeys,constantLabels){cov_mshxgz9hn().f[0]++;cov_mshxgz9hn().s[5]++;this.constantLabels=constantLabels;cov_mshxgz9hn().s[6]++;this.registeredPoints=new Map();cov_mshxgz9hn().s[7]++;this.labelKeysLength=labelKeys.length;const keysAndConstantKeys=(cov_mshxgz9hn().s[8]++,[...labelKeys,...constantLabels.keys()]);cov_mshxgz9hn().s[9]++;this.constantLabelValues=[...constantLabels.values()];cov_mshxgz9hn().s[10]++;this.metricDescriptor={name,description,unit,type,labelKeys:keysAndConstantKeys};}/**
     * Creates a TimeSeries. The value of a single point in the TimeSeries is
     * observed from a obj or a function. The ValueExtractor is invoked whenever
     * metrics are collected, meaning the reported value is up-to-date.
     *
     * @param labelValues The list of the label values.
     * @param objOrFn obj The obj to get the size or length or value from. If
     *     multiple options are available, the value (ToValueInterface) takes
     *     precedence first, followed by length and size. e.g value -> length ->
     *     size.
     *     fn is the function that will be called to get the current value
     *     of the gauge.
     */createTimeSeries(labelValues,objOrFn){cov_mshxgz9hn().f[1]++;cov_mshxgz9hn().s[11]++;validations_1.validateArrayElementsNotNull(validations_1.validateNotNull(labelValues,DerivedGauge.LABEL_VALUES),DerivedGauge.LABEL_VALUE);cov_mshxgz9hn().s[12]++;validations_1.validateNotNull(objOrFn,DerivedGauge.OBJECT);const hash=(cov_mshxgz9hn().s[13]++,util.hashLabelValues(labelValues));cov_mshxgz9hn().s[14]++;if(this.registeredPoints.has(hash)){cov_mshxgz9hn().b[0][0]++;cov_mshxgz9hn().s[15]++;throw new Error(DerivedGauge.ERROR_MESSAGE_DUPLICATE_TIME_SERIES);}else{cov_mshxgz9hn().b[0][1]++;}cov_mshxgz9hn().s[16]++;if(this.labelKeysLength!==labelValues.length){cov_mshxgz9hn().b[1][0]++;cov_mshxgz9hn().s[17]++;throw new Error(DerivedGauge.ERROR_MESSAGE_INVALID_SIZE);}else{cov_mshxgz9hn().b[1][1]++;}cov_mshxgz9hn().s[18]++;if(objOrFn instanceof Function){cov_mshxgz9hn().b[2][0]++;cov_mshxgz9hn().s[19]++;this.extractor=objOrFn;}else{cov_mshxgz9hn().b[2][1]++;cov_mshxgz9hn().s[20]++;if(util.isToValueInterface(objOrFn)){cov_mshxgz9hn().b[3][0]++;cov_mshxgz9hn().s[21]++;this.extractor=()=>{cov_mshxgz9hn().f[2]++;cov_mshxgz9hn().s[22]++;return objOrFn.getValue();};}else{cov_mshxgz9hn().b[3][1]++;cov_mshxgz9hn().s[23]++;if(util.isLengthAttributeInterface(objOrFn)){cov_mshxgz9hn().b[4][0]++;cov_mshxgz9hn().s[24]++;this.extractor=()=>{cov_mshxgz9hn().f[3]++;cov_mshxgz9hn().s[25]++;return objOrFn.length;};}else{cov_mshxgz9hn().b[4][1]++;cov_mshxgz9hn().s[26]++;if(util.isLengthMethodInterface(objOrFn)){cov_mshxgz9hn().b[5][0]++;cov_mshxgz9hn().s[27]++;this.extractor=()=>{cov_mshxgz9hn().f[4]++;cov_mshxgz9hn().s[28]++;return objOrFn.length();};}else{cov_mshxgz9hn().b[5][1]++;cov_mshxgz9hn().s[29]++;if(util.isSizeAttributeInterface(objOrFn)){cov_mshxgz9hn().b[6][0]++;cov_mshxgz9hn().s[30]++;this.extractor=()=>{cov_mshxgz9hn().f[5]++;cov_mshxgz9hn().s[31]++;return objOrFn.size;};}else{cov_mshxgz9hn().b[6][1]++;cov_mshxgz9hn().s[32]++;if(util.isSizeMethodInterface(objOrFn)){cov_mshxgz9hn().b[7][0]++;cov_mshxgz9hn().s[33]++;this.extractor=()=>{cov_mshxgz9hn().f[6]++;cov_mshxgz9hn().s[34]++;return objOrFn.size();};}else{cov_mshxgz9hn().b[7][1]++;cov_mshxgz9hn().s[35]++;throw new Error(DerivedGauge.ERROR_MESSAGE_UNKNOWN_INTERFACE);}}}}}}cov_mshxgz9hn().s[36]++;this.registeredPoints.set(hash,{labelValues,extractor:this.extractor});}/**
     * Removes the TimeSeries from the gauge metric, if it is present. i.e.
     * references to previous Point objects are invalid (not part of the
     * metric).
     *
     * @param labelValues The list of label values.
     */removeTimeSeries(labelValues){cov_mshxgz9hn().f[7]++;cov_mshxgz9hn().s[37]++;validations_1.validateNotNull(labelValues,DerivedGauge.LABEL_VALUES);cov_mshxgz9hn().s[38]++;this.registeredPoints.delete(util.hashLabelValues(labelValues));}/**
     * Removes all TimeSeries from the gauge metric. i.e. references to all
     * previous Point objects are invalid (not part of the metric).
     */clear(){cov_mshxgz9hn().f[8]++;cov_mshxgz9hn().s[39]++;this.registeredPoints.clear();}/**
     * Provides a Metric with one or more TimeSeries.
     *
     * @returns The Metric, or null if TimeSeries is not present in Metric.
     */getMetric(){cov_mshxgz9hn().f[9]++;cov_mshxgz9hn().s[40]++;if(this.registeredPoints.size===0){cov_mshxgz9hn().b[8][0]++;cov_mshxgz9hn().s[41]++;return null;}else{cov_mshxgz9hn().b[8][1]++;}const timestamp=(cov_mshxgz9hn().s[42]++,time_util_1.getTimestampWithProcessHRTime());cov_mshxgz9hn().s[43]++;return{descriptor:this.metricDescriptor,timeseries:Array.from(this.registeredPoints,([_,gaugeEntry])=>{cov_mshxgz9hn().f[10]++;cov_mshxgz9hn().s[44]++;return{labelValues:[...gaugeEntry.labelValues,...this.constantLabelValues],points:[{value:gaugeEntry.extractor(),timestamp}]};})};}}cov_mshxgz9hn().s[45]++;exports.DerivedGauge=DerivedGauge;cov_mshxgz9hn().s[46]++;DerivedGauge.LABEL_VALUE='labelValue';cov_mshxgz9hn().s[47]++;DerivedGauge.LABEL_VALUES='labelValues';cov_mshxgz9hn().s[48]++;DerivedGauge.OBJECT='obj';cov_mshxgz9hn().s[49]++;DerivedGauge.ERROR_MESSAGE_INVALID_SIZE="Label Keys and Label Values don't have same size";cov_mshxgz9hn().s[50]++;DerivedGauge.ERROR_MESSAGE_DUPLICATE_TIME_SERIES='A different time series with the same labels already exists.';cov_mshxgz9hn().s[51]++;DerivedGauge.ERROR_MESSAGE_UNKNOWN_INTERFACE='Unknown interface/object type';//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,