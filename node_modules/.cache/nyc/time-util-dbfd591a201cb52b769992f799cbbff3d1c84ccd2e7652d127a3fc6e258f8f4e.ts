"use strict";/**
 * Copyright 2019, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_215tv3u1dw(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/time-util.ts";var hash="00ddad3425038b5ddc3253e62562f3bb880aeabf";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/time-util.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:0},end:{line:18,column:97}},"2":{start:{line:19,column:26},end:{line:19,column:29}},"3":{start:{line:20,column:24},end:{line:20,column:33}},"4":{start:{line:21,column:25},end:{line:21,column:40}},"5":{start:{line:22,column:13},end:{line:22,column:27}},"6":{start:{line:23,column:19},end:{line:23,column:25}},"7":{start:{line:24,column:23},end:{line:24,column:24}},"8":{start:{line:25,column:21},end:{line:25,column:22}},"9":{start:{line:27,column:4},end:{line:27,column:31}},"10":{start:{line:28,column:4},end:{line:28,column:28}},"11":{start:{line:29,column:20},end:{line:29,column:30}},"12":{start:{line:30,column:4},end:{line:30,column:63}},"13":{start:{line:31,column:4},end:{line:31,column:69}},"14":{start:{line:38,column:4},end:{line:38,column:28}},"15":{start:{line:46,column:38},end:{line:46,column:58}},"16":{start:{line:48,column:20},end:{line:48,column:49}},"17":{start:{line:49,column:18},end:{line:49,column:46}},"18":{start:{line:50,column:4},end:{line:52,column:5}},"19":{start:{line:51,column:8},end:{line:51,column:73}},"20":{start:{line:53,column:4},end:{line:53,column:30}},"21":{start:{line:55,column:0},end:{line:55,column:70}},"22":{start:{line:63,column:4},end:{line:66,column:6}},"23":{start:{line:68,column:0},end:{line:68,column:50}},"24":{start:{line:69,column:0},end:{line:69,column:21}},"25":{start:{line:70,column:0},end:{line:73,column:2}}},fnMap:{"0":{name:"setHrtimeReference",decl:{start:{line:26,column:9},end:{line:26,column:27}},loc:{start:{line:26,column:30},end:{line:32,column:1}},line:26},"1":{name:"resetHrtimeFunctionCache",decl:{start:{line:37,column:9},end:{line:37,column:33}},loc:{start:{line:37,column:36},end:{line:39,column:1}},line:37},"2":{name:"getTimestampWithProcessHRTime",decl:{start:{line:45,column:9},end:{line:45,column:38}},loc:{start:{line:45,column:41},end:{line:54,column:1}},line:45},"3":{name:"timestampFromMillis",decl:{start:{line:62,column:9},end:{line:62,column:28}},loc:{start:{line:62,column:41},end:{line:67,column:1}},line:62}},branchMap:{"0":{loc:{start:{line:50,column:4},end:{line:52,column:5}},type:"if",locations:[{start:{line:50,column:4},end:{line:52,column:5}},{start:{line:50,column:4},end:{line:52,column:5}}],line:50}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0]},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/time-util.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/time-util.ts"],names:[],mappings:";AAAA;;;;;;;;;;;;;;GAcG;;;AAIH,MAAM,iBAAiB,GAAG,GAAG,CAAC;AAC9B,MAAM,eAAe,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,MAAM,gBAAgB,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAEzC,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;AAC5B,IAAI,YAAY,GAAqB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC5C,IAAI,gBAAgB,GAAG,CAAC,CAAC;AACzB,IAAI,cAAc,GAAG,CAAC,CAAC;AAEvB,SAAS,kBAAkB;IACzB,wBAAwB,EAAE,CAAC;IAC3B,YAAY,GAAG,MAAM,EAAE,CAAC;IACxB,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IAC3B,gBAAgB,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,iBAAiB,CAAC,CAAC;IAC3D,cAAc,GAAG,CAAC,OAAO,GAAG,iBAAiB,CAAC,GAAG,eAAe,CAAC;AACnE,CAAC;AAED;;;GAGG;AACH,SAAS,wBAAwB;IAC/B,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;AAC1B,CAAC;AAED;;;;GAIG;AACH,SAAgB,6BAA6B;IAC3C,MAAM,CAAC,UAAU,EAAE,WAAW,CAAC,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC;IAEvD,6CAA6C;IAC7C,MAAM,OAAO,GAAG,gBAAgB,GAAG,UAAU,CAAC;IAC9C,MAAM,KAAK,GAAG,cAAc,GAAG,WAAW,CAAC;IAE3C,IAAI,KAAK,IAAI,gBAAgB,EAAE;QAC7B,OAAO,EAAE,OAAO,EAAE,OAAO,GAAG,CAAC,EAAE,KAAK,EAAE,KAAK,GAAG,gBAAgB,EAAE,CAAC;KAClE;IACD,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;AAC5B,CAAC;AAXD,sEAWC;AAED;;;;;GAKG;AACH,SAAgB,mBAAmB,CAAC,UAAkB;IACpD,OAAO;QACL,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,iBAAiB,CAAC;QACnD,KAAK,EAAE,CAAC,UAAU,GAAG,iBAAiB,CAAC,GAAG,eAAe;KAC1D,CAAC;AACJ,CAAC;AALD,kDAKC;AAED,kBAAkB,EAAE,CAAC;AAER,QAAA,SAAS,GAAG;IACvB,kBAAkB;IAClB,wBAAwB;CACzB,CAAC",sourcesContent:["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../metrics/export/types';\n\nconst MILLIS_PER_SECOND = 1e3;\nconst NANOS_PER_MILLI = 1e3 * 1e3;\nconst NANOS_PER_SECOND = 1e3 * 1e3 * 1e3;\n\nlet hrtime = process.hrtime;\nlet hrtimeOrigin: [number, number] = [0, 0];\nlet hrtimeRefSeconds = 0;\nlet hrtimeRefNanos = 0;\n\nfunction setHrtimeReference() {\n  resetHrtimeFunctionCache();\n  hrtimeOrigin = hrtime();\n  const refTime = Date.now();\n  hrtimeRefSeconds = Math.floor(refTime / MILLIS_PER_SECOND);\n  hrtimeRefNanos = (refTime % MILLIS_PER_SECOND) * NANOS_PER_MILLI;\n}\n\n/**\n * This is used to enable tests to mock process.hrtime while still allow us to\n * cache it.\n */\nfunction resetHrtimeFunctionCache() {\n  hrtime = process.hrtime;\n}\n\n/**\n * Gets the current timestamp with seconds and nanoseconds.\n *\n * @returns The Timestamp.\n */\nexport function getTimestampWithProcessHRTime(): Timestamp {\n  const [offsetSecs, offsetNanos] = hrtime(hrtimeOrigin);\n\n  // determine drift in seconds and nanoseconds\n  const seconds = hrtimeRefSeconds + offsetSecs;\n  const nanos = hrtimeRefNanos + offsetNanos;\n\n  if (nanos >= NANOS_PER_SECOND) {\n    return { seconds: seconds + 1, nanos: nanos % NANOS_PER_SECOND };\n  }\n  return { seconds, nanos };\n}\n\n/**\n * Creates a new timestamp from the given milliseconds.\n *\n * @param epochMilli the timestamp represented in milliseconds since epoch.\n * @returns new timestamp with specified fields.\n */\nexport function timestampFromMillis(epochMilli: number): Timestamp {\n  return {\n    seconds: Math.floor(epochMilli / MILLIS_PER_SECOND),\n    nanos: (epochMilli % MILLIS_PER_SECOND) * NANOS_PER_MILLI,\n  };\n}\n\nsetHrtimeReference();\n\nexport const TEST_ONLY = {\n  setHrtimeReference,\n  resetHrtimeFunctionCache,\n};\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"00ddad3425038b5ddc3253e62562f3bb880aeabf"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_215tv3u1dw=function(){return actualCoverage;};}return actualCoverage;}cov_215tv3u1dw();cov_215tv3u1dw().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_215tv3u1dw().s[1]++;exports.TEST_ONLY=exports.timestampFromMillis=exports.getTimestampWithProcessHRTime=void 0;const MILLIS_PER_SECOND=(cov_215tv3u1dw().s[2]++,1e3);const NANOS_PER_MILLI=(cov_215tv3u1dw().s[3]++,1e3*1e3);const NANOS_PER_SECOND=(cov_215tv3u1dw().s[4]++,1e3*1e3*1e3);let hrtime=(cov_215tv3u1dw().s[5]++,process.hrtime);let hrtimeOrigin=(cov_215tv3u1dw().s[6]++,[0,0]);let hrtimeRefSeconds=(cov_215tv3u1dw().s[7]++,0);let hrtimeRefNanos=(cov_215tv3u1dw().s[8]++,0);function setHrtimeReference(){cov_215tv3u1dw().f[0]++;cov_215tv3u1dw().s[9]++;resetHrtimeFunctionCache();cov_215tv3u1dw().s[10]++;hrtimeOrigin=hrtime();const refTime=(cov_215tv3u1dw().s[11]++,Date.now());cov_215tv3u1dw().s[12]++;hrtimeRefSeconds=Math.floor(refTime/MILLIS_PER_SECOND);cov_215tv3u1dw().s[13]++;hrtimeRefNanos=refTime%MILLIS_PER_SECOND*NANOS_PER_MILLI;}/**
 * This is used to enable tests to mock process.hrtime while still allow us to
 * cache it.
 */function resetHrtimeFunctionCache(){cov_215tv3u1dw().f[1]++;cov_215tv3u1dw().s[14]++;hrtime=process.hrtime;}/**
 * Gets the current timestamp with seconds and nanoseconds.
 *
 * @returns The Timestamp.
 */function getTimestampWithProcessHRTime(){cov_215tv3u1dw().f[2]++;const[offsetSecs,offsetNanos]=(cov_215tv3u1dw().s[15]++,hrtime(hrtimeOrigin));// determine drift in seconds and nanoseconds
const seconds=(cov_215tv3u1dw().s[16]++,hrtimeRefSeconds+offsetSecs);const nanos=(cov_215tv3u1dw().s[17]++,hrtimeRefNanos+offsetNanos);cov_215tv3u1dw().s[18]++;if(nanos>=NANOS_PER_SECOND){cov_215tv3u1dw().b[0][0]++;cov_215tv3u1dw().s[19]++;return{seconds:seconds+1,nanos:nanos%NANOS_PER_SECOND};}else{cov_215tv3u1dw().b[0][1]++;}cov_215tv3u1dw().s[20]++;return{seconds,nanos};}cov_215tv3u1dw().s[21]++;exports.getTimestampWithProcessHRTime=getTimestampWithProcessHRTime;/**
 * Creates a new timestamp from the given milliseconds.
 *
 * @param epochMilli the timestamp represented in milliseconds since epoch.
 * @returns new timestamp with specified fields.
 */function timestampFromMillis(epochMilli){cov_215tv3u1dw().f[3]++;cov_215tv3u1dw().s[22]++;return{seconds:Math.floor(epochMilli/MILLIS_PER_SECOND),nanos:epochMilli%MILLIS_PER_SECOND*NANOS_PER_MILLI};}cov_215tv3u1dw().s[23]++;exports.timestampFromMillis=timestampFromMillis;cov_215tv3u1dw().s[24]++;setHrtimeReference();cov_215tv3u1dw().s[25]++;exports.TEST_ONLY={setHrtimeReference,resetHrtimeFunctionCache};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3VzZXJtYWl0aGEvdHJhZGVtYXN0ZXIvbGlicy9saWItZXh0ZXJuYWwtb3BlbmNlbnN1cy1ub2RlL3NyYy9jb21tb24vdGltZS11dGlsLnRzIiwic291cmNlcyI6WyIvVXNlcnMvdXNlcm1haXRoYS90cmFkZW1hc3Rlci9saWJzL2xpYi1leHRlcm5hbC1vcGVuY2Vuc3VzLW5vZGUvc3JjL2NvbW1vbi90aW1lLXV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7OztHQWNHOzs7QUFJSCxNQUFNLGlCQUFpQixHQUFHLEdBQUcsQ0FBQztBQUM5QixNQUFNLGVBQWUsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQ2xDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFFekMsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztBQUM1QixJQUFJLFlBQVksR0FBcUIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDNUMsSUFBSSxnQkFBZ0IsR0FBRyxDQUFDLENBQUM7QUFDekIsSUFBSSxjQUFjLEdBQUcsQ0FBQyxDQUFDO0FBRXZCLFNBQVMsa0JBQWtCO0lBQ3pCLHdCQUF3QixFQUFFLENBQUM7SUFDM0IsWUFBWSxHQUFHLE1BQU0sRUFBRSxDQUFDO0lBQ3hCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUMzQixnQkFBZ0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxpQkFBaUIsQ0FBQyxDQUFDO0lBQzNELGNBQWMsR0FBRyxDQUFDLE9BQU8sR0FBRyxpQkFBaUIsQ0FBQyxHQUFHLGVBQWUsQ0FBQztBQUNuRSxDQUFDO0FBRUQ7OztHQUdHO0FBQ0gsU0FBUyx3QkFBd0I7SUFDL0IsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7QUFDMUIsQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxTQUFnQiw2QkFBNkI7SUFDM0MsTUFBTSxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7SUFFdkQsNkNBQTZDO0lBQzdDLE1BQU0sT0FBTyxHQUFHLGdCQUFnQixHQUFHLFVBQVUsQ0FBQztJQUM5QyxNQUFNLEtBQUssR0FBRyxjQUFjLEdBQUcsV0FBVyxDQUFDO0lBRTNDLElBQUksS0FBSyxJQUFJLGdCQUFnQixFQUFFO1FBQzdCLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxHQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxHQUFHLGdCQUFnQixFQUFFLENBQUM7S0FDbEU7SUFDRCxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDO0FBQzVCLENBQUM7QUFYRCxzRUFXQztBQUVEOzs7OztHQUtHO0FBQ0gsU0FBZ0IsbUJBQW1CLENBQUMsVUFBa0I7SUFDcEQsT0FBTztRQUNMLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxpQkFBaUIsQ0FBQztRQUNuRCxLQUFLLEVBQUUsQ0FBQyxVQUFVLEdBQUcsaUJBQWlCLENBQUMsR0FBRyxlQUFlO0tBQzFELENBQUM7QUFDSixDQUFDO0FBTEQsa0RBS0M7QUFFRCxrQkFBa0IsRUFBRSxDQUFDO0FBRVIsUUFBQSxTQUFTLEdBQUc7SUFDdkIsa0JBQWtCO0lBQ2xCLHdCQUF3QjtDQUN6QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOSwgT3BlbkNlbnN1cyBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBUaW1lc3RhbXAgfSBmcm9tICcuLi9tZXRyaWNzL2V4cG9ydC90eXBlcyc7XG5cbmNvbnN0IE1JTExJU19QRVJfU0VDT05EID0gMWUzO1xuY29uc3QgTkFOT1NfUEVSX01JTExJID0gMWUzICogMWUzO1xuY29uc3QgTkFOT1NfUEVSX1NFQ09ORCA9IDFlMyAqIDFlMyAqIDFlMztcblxubGV0IGhydGltZSA9IHByb2Nlc3MuaHJ0aW1lO1xubGV0IGhydGltZU9yaWdpbjogW251bWJlciwgbnVtYmVyXSA9IFswLCAwXTtcbmxldCBocnRpbWVSZWZTZWNvbmRzID0gMDtcbmxldCBocnRpbWVSZWZOYW5vcyA9IDA7XG5cbmZ1bmN0aW9uIHNldEhydGltZVJlZmVyZW5jZSgpIHtcbiAgcmVzZXRIcnRpbWVGdW5jdGlvbkNhY2hlKCk7XG4gIGhydGltZU9yaWdpbiA9IGhydGltZSgpO1xuICBjb25zdCByZWZUaW1lID0gRGF0ZS5ub3coKTtcbiAgaHJ0aW1lUmVmU2Vjb25kcyA9IE1hdGguZmxvb3IocmVmVGltZSAvIE1JTExJU19QRVJfU0VDT05EKTtcbiAgaHJ0aW1lUmVmTmFub3MgPSAocmVmVGltZSAlIE1JTExJU19QRVJfU0VDT05EKSAqIE5BTk9TX1BFUl9NSUxMSTtcbn1cblxuLyoqXG4gKiBUaGlzIGlzIHVzZWQgdG8gZW5hYmxlIHRlc3RzIHRvIG1vY2sgcHJvY2Vzcy5ocnRpbWUgd2hpbGUgc3RpbGwgYWxsb3cgdXMgdG9cbiAqIGNhY2hlIGl0LlxuICovXG5mdW5jdGlvbiByZXNldEhydGltZUZ1bmN0aW9uQ2FjaGUoKSB7XG4gIGhydGltZSA9IHByb2Nlc3MuaHJ0aW1lO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGN1cnJlbnQgdGltZXN0YW1wIHdpdGggc2Vjb25kcyBhbmQgbmFub3NlY29uZHMuXG4gKlxuICogQHJldHVybnMgVGhlIFRpbWVzdGFtcC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRpbWVzdGFtcFdpdGhQcm9jZXNzSFJUaW1lKCk6IFRpbWVzdGFtcCB7XG4gIGNvbnN0IFtvZmZzZXRTZWNzLCBvZmZzZXROYW5vc10gPSBocnRpbWUoaHJ0aW1lT3JpZ2luKTtcblxuICAvLyBkZXRlcm1pbmUgZHJpZnQgaW4gc2Vjb25kcyBhbmQgbmFub3NlY29uZHNcbiAgY29uc3Qgc2Vjb25kcyA9IGhydGltZVJlZlNlY29uZHMgKyBvZmZzZXRTZWNzO1xuICBjb25zdCBuYW5vcyA9IGhydGltZVJlZk5hbm9zICsgb2Zmc2V0TmFub3M7XG5cbiAgaWYgKG5hbm9zID49IE5BTk9TX1BFUl9TRUNPTkQpIHtcbiAgICByZXR1cm4geyBzZWNvbmRzOiBzZWNvbmRzICsgMSwgbmFub3M6IG5hbm9zICUgTkFOT1NfUEVSX1NFQ09ORCB9O1xuICB9XG4gIHJldHVybiB7IHNlY29uZHMsIG5hbm9zIH07XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyB0aW1lc3RhbXAgZnJvbSB0aGUgZ2l2ZW4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSBlcG9jaE1pbGxpIHRoZSB0aW1lc3RhbXAgcmVwcmVzZW50ZWQgaW4gbWlsbGlzZWNvbmRzIHNpbmNlIGVwb2NoLlxuICogQHJldHVybnMgbmV3IHRpbWVzdGFtcCB3aXRoIHNwZWNpZmllZCBmaWVsZHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0aW1lc3RhbXBGcm9tTWlsbGlzKGVwb2NoTWlsbGk6IG51bWJlcik6IFRpbWVzdGFtcCB7XG4gIHJldHVybiB7XG4gICAgc2Vjb25kczogTWF0aC5mbG9vcihlcG9jaE1pbGxpIC8gTUlMTElTX1BFUl9TRUNPTkQpLFxuICAgIG5hbm9zOiAoZXBvY2hNaWxsaSAlIE1JTExJU19QRVJfU0VDT05EKSAqIE5BTk9TX1BFUl9NSUxMSSxcbiAgfTtcbn1cblxuc2V0SHJ0aW1lUmVmZXJlbmNlKCk7XG5cbmV4cG9ydCBjb25zdCBURVNUX09OTFkgPSB7XG4gIHNldEhydGltZVJlZmVyZW5jZSxcbiAgcmVzZXRIcnRpbWVGdW5jdGlvbkNhY2hlLFxufTtcbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,