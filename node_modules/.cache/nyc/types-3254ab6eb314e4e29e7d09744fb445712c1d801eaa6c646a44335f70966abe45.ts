"use strict";/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_iz17f8xzh(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/types.ts";var hash="dbe421874106c07e2a602846239f257d352eabf1";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/types.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}}},fnMap:{},branchMap:{},s:{"0":0},f:{},b:{},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/types.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/types.ts"],names:[],mappings:";AAAA;;;;;;;;;;;;;;GAcG",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as exportersTypes from '../exporters/types';\nimport * as configTypes from './config/types';\nimport * as modelTypes from './model/types';\n\n/** Main interface for tracing. */\nexport interface Tracing {\n  /** Object responsible for managing a trace. */\n  readonly tracer: modelTypes.TracerBase;\n\n  /** Service to send collected traces to. */\n  readonly exporter: exportersTypes.Exporter;\n\n  /** Gets active status  */\n  active: boolean;\n\n  /**\n   * Starts tracing.\n   * @param userConfig A configuration object to start tracing.\n   * @returns The started Tracing instance.\n   */\n  start(userConfig?: configTypes.Config): Tracing;\n\n  /** Stops tracing. */\n  stop(): void;\n\n  /**\n   * Registers an exporter to send the collected traces to.\n   * @param exporter The exporter to send the traces to.\n   * @returns The tracing object.\n   */\n  registerExporter(exporter: exportersTypes.Exporter): Tracing;\n\n  /**\n   * Unregisters an exporter.\n   * @param exporter The exporter to stop sending traces to.\n   */\n  unregisterExporter(exporter: exportersTypes.Exporter): Tracing;\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"dbe421874106c07e2a602846239f257d352eabf1"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_iz17f8xzh=function(){return actualCoverage;};}return actualCoverage;}cov_iz17f8xzh();cov_iz17f8xzh().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3VzZXJtYWl0aGEvdHJhZGVtYXN0ZXIvbGlicy9saWItZXh0ZXJuYWwtb3BlbmNlbnN1cy1ub2RlL3NyYy90cmFjZS90eXBlcy50cyIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXJtYWl0aGEvdHJhZGVtYXN0ZXIvbGlicy9saWItZXh0ZXJuYWwtb3BlbmNlbnN1cy1ub2RlL3NyYy90cmFjZS90eXBlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7O0dBY0ciLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDE4LCBPcGVuQ2Vuc3VzIEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCAqIGFzIGV4cG9ydGVyc1R5cGVzIGZyb20gJy4uL2V4cG9ydGVycy90eXBlcyc7XG5pbXBvcnQgKiBhcyBjb25maWdUeXBlcyBmcm9tICcuL2NvbmZpZy90eXBlcyc7XG5pbXBvcnQgKiBhcyBtb2RlbFR5cGVzIGZyb20gJy4vbW9kZWwvdHlwZXMnO1xuXG4vKiogTWFpbiBpbnRlcmZhY2UgZm9yIHRyYWNpbmcuICovXG5leHBvcnQgaW50ZXJmYWNlIFRyYWNpbmcge1xuICAvKiogT2JqZWN0IHJlc3BvbnNpYmxlIGZvciBtYW5hZ2luZyBhIHRyYWNlLiAqL1xuICByZWFkb25seSB0cmFjZXI6IG1vZGVsVHlwZXMuVHJhY2VyQmFzZTtcblxuICAvKiogU2VydmljZSB0byBzZW5kIGNvbGxlY3RlZCB0cmFjZXMgdG8uICovXG4gIHJlYWRvbmx5IGV4cG9ydGVyOiBleHBvcnRlcnNUeXBlcy5FeHBvcnRlcjtcblxuICAvKiogR2V0cyBhY3RpdmUgc3RhdHVzICAqL1xuICBhY3RpdmU6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFN0YXJ0cyB0cmFjaW5nLlxuICAgKiBAcGFyYW0gdXNlckNvbmZpZyBBIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHRvIHN0YXJ0IHRyYWNpbmcuXG4gICAqIEByZXR1cm5zIFRoZSBzdGFydGVkIFRyYWNpbmcgaW5zdGFuY2UuXG4gICAqL1xuICBzdGFydCh1c2VyQ29uZmlnPzogY29uZmlnVHlwZXMuQ29uZmlnKTogVHJhY2luZztcblxuICAvKiogU3RvcHMgdHJhY2luZy4gKi9cbiAgc3RvcCgpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgYW4gZXhwb3J0ZXIgdG8gc2VuZCB0aGUgY29sbGVjdGVkIHRyYWNlcyB0by5cbiAgICogQHBhcmFtIGV4cG9ydGVyIFRoZSBleHBvcnRlciB0byBzZW5kIHRoZSB0cmFjZXMgdG8uXG4gICAqIEByZXR1cm5zIFRoZSB0cmFjaW5nIG9iamVjdC5cbiAgICovXG4gIHJlZ2lzdGVyRXhwb3J0ZXIoZXhwb3J0ZXI6IGV4cG9ydGVyc1R5cGVzLkV4cG9ydGVyKTogVHJhY2luZztcblxuICAvKipcbiAgICogVW5yZWdpc3RlcnMgYW4gZXhwb3J0ZXIuXG4gICAqIEBwYXJhbSBleHBvcnRlciBUaGUgZXhwb3J0ZXIgdG8gc3RvcCBzZW5kaW5nIHRyYWNlcyB0by5cbiAgICovXG4gIHVucmVnaXN0ZXJFeHBvcnRlcihleHBvcnRlcjogZXhwb3J0ZXJzVHlwZXMuRXhwb3J0ZXIpOiBUcmFjaW5nO1xufVxuIl19
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfaXoxN2Y4eHpoIiwicGF0aCIsImhhc2giLCJnbG9iYWwiLCJGdW5jdGlvbiIsImdjdiIsImNvdmVyYWdlRGF0YSIsInN0YXRlbWVudE1hcCIsInN0YXJ0IiwibGluZSIsImNvbHVtbiIsImVuZCIsImZuTWFwIiwiYnJhbmNoTWFwIiwicyIsImYiLCJiIiwiaW5wdXRTb3VyY2VNYXAiLCJ2ZXJzaW9uIiwiZmlsZSIsInNvdXJjZXMiLCJuYW1lcyIsIm1hcHBpbmdzIiwic291cmNlc0NvbnRlbnQiLCJfY292ZXJhZ2VTY2hlbWEiLCJjb3ZlcmFnZSIsImFjdHVhbENvdmVyYWdlIl0sInNvdXJjZXMiOlsiL1VzZXJzL3VzZXJtYWl0aGEvdHJhZGVtYXN0ZXIvbGlicy9saWItZXh0ZXJuYWwtb3BlbmNlbnN1cy1ub2RlL3NyYy90cmFjZS90eXBlcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDE4LCBPcGVuQ2Vuc3VzIEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCAqIGFzIGV4cG9ydGVyc1R5cGVzIGZyb20gJy4uL2V4cG9ydGVycy90eXBlcyc7XG5pbXBvcnQgKiBhcyBjb25maWdUeXBlcyBmcm9tICcuL2NvbmZpZy90eXBlcyc7XG5pbXBvcnQgKiBhcyBtb2RlbFR5cGVzIGZyb20gJy4vbW9kZWwvdHlwZXMnO1xuXG4vKiogTWFpbiBpbnRlcmZhY2UgZm9yIHRyYWNpbmcuICovXG5leHBvcnQgaW50ZXJmYWNlIFRyYWNpbmcge1xuICAvKiogT2JqZWN0IHJlc3BvbnNpYmxlIGZvciBtYW5hZ2luZyBhIHRyYWNlLiAqL1xuICByZWFkb25seSB0cmFjZXI6IG1vZGVsVHlwZXMuVHJhY2VyQmFzZTtcblxuICAvKiogU2VydmljZSB0byBzZW5kIGNvbGxlY3RlZCB0cmFjZXMgdG8uICovXG4gIHJlYWRvbmx5IGV4cG9ydGVyOiBleHBvcnRlcnNUeXBlcy5FeHBvcnRlcjtcblxuICAvKiogR2V0cyBhY3RpdmUgc3RhdHVzICAqL1xuICBhY3RpdmU6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFN0YXJ0cyB0cmFjaW5nLlxuICAgKiBAcGFyYW0gdXNlckNvbmZpZyBBIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHRvIHN0YXJ0IHRyYWNpbmcuXG4gICAqIEByZXR1cm5zIFRoZSBzdGFydGVkIFRyYWNpbmcgaW5zdGFuY2UuXG4gICAqL1xuICBzdGFydCh1c2VyQ29uZmlnPzogY29uZmlnVHlwZXMuQ29uZmlnKTogVHJhY2luZztcblxuICAvKiogU3RvcHMgdHJhY2luZy4gKi9cbiAgc3RvcCgpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgYW4gZXhwb3J0ZXIgdG8gc2VuZCB0aGUgY29sbGVjdGVkIHRyYWNlcyB0by5cbiAgICogQHBhcmFtIGV4cG9ydGVyIFRoZSBleHBvcnRlciB0byBzZW5kIHRoZSB0cmFjZXMgdG8uXG4gICAqIEByZXR1cm5zIFRoZSB0cmFjaW5nIG9iamVjdC5cbiAgICovXG4gIHJlZ2lzdGVyRXhwb3J0ZXIoZXhwb3J0ZXI6IGV4cG9ydGVyc1R5cGVzLkV4cG9ydGVyKTogVHJhY2luZztcblxuICAvKipcbiAgICogVW5yZWdpc3RlcnMgYW4gZXhwb3J0ZXIuXG4gICAqIEBwYXJhbSBleHBvcnRlciBUaGUgZXhwb3J0ZXIgdG8gc3RvcCBzZW5kaW5nIHRyYWNlcyB0by5cbiAgICovXG4gIHVucmVnaXN0ZXJFeHBvcnRlcihleHBvcnRlcjogZXhwb3J0ZXJzVHlwZXMuRXhwb3J0ZXIpOiBUcmFjaW5nO1xufVxuIl0sIm1hcHBpbmdzIjoiYUFBQTs7Ozs7Ozs7Ozs7Ozs7R0FBQSxTQUFBQSxjQUFBLE1BQUFDLElBQUEsMEZBQUFDLElBQUEsZ0RBQUFDLE1BQUEsS0FBQUMsUUFBQSxzQkFBQUMsR0FBQSxvQkFBQUMsWUFBQSxFQUFBTCxJQUFBLHNGQUFBTSxZQUFBLE9BQUFDLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLE9BQUFFLEtBQUEsSUFBQUMsU0FBQSxJQUFBQyxDQUFBLFNBQUFDLENBQUEsSUFBQUMsQ0FBQSxJQUFBQyxjQUFBLEVBQUFDLE9BQUEsR0FBQUMsSUFBQSxzRkFBQUMsT0FBQSx3RkFBQUMsS0FBQSxJQUFBQyxRQUFBLDJCQUFBQyxjQUFBLG90REFBQUMsZUFBQSw0Q0FBQXRCLElBQUEsaURBQUF1QixRQUFBLENBQUF0QixNQUFBLENBQUFFLEdBQUEsSUFBQUYsTUFBQSxDQUFBRSxHQUFBLFVBQUFvQixRQUFBLENBQUF4QixJQUFBLEdBQUF3QixRQUFBLENBQUF4QixJQUFBLEVBQUFDLElBQUEsR0FBQUEsSUFBQSxFQUFBdUIsUUFBQSxDQUFBeEIsSUFBQSxFQUFBSyxZQUFBLE1BQUFvQixjQUFBLENBQUFELFFBQUEsQ0FBQXhCLElBQUEsR0FjRztBQUFBRCxhQUFBLFNBQUFBLENBQUEsU0FBQTBCLGNBQUEsV0FBQUEsY0FBQSxFQUFBMUIsYUFBQSxHQUFBQSxhQUFBLEdBQUFjLENBQUEsTSJ9