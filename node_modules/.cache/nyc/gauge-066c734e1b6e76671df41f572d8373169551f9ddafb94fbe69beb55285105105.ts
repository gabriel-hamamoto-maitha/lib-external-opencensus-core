"use strict";/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_v9t74i5an(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/gauges/gauge.ts";var hash="f72bc7049c91fb12e2b1fe71d97235aebf4d18b8";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/gauges/gauge.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:0},end:{line:18,column:44}},"2":{start:{line:19,column:20},end:{line:19,column:53}},"3":{start:{line:20,column:22},end:{line:20,column:57}},"4":{start:{line:21,column:16},end:{line:21,column:35}},"5":{start:{line:37,column:8},end:{line:37,column:35}},"6":{start:{line:38,column:8},end:{line:38,column:45}},"7":{start:{line:39,column:8},end:{line:39,column:42}},"8":{start:{line:40,column:8},end:{line:40,column:48}},"9":{start:{line:41,column:36},end:{line:41,column:76}},"10":{start:{line:42,column:8},end:{line:42,column:64}},"11":{start:{line:43,column:8},end:{line:49,column:10}},"12":{start:{line:50,column:8},end:{line:50,column:88}},"13":{start:{line:64,column:8},end:{line:64,column:134}},"14":{start:{line:65,column:8},end:{line:65,column:52}},"15":{start:{line:74,column:8},end:{line:74,column:64}},"16":{start:{line:84,column:8},end:{line:84,column:71}},"17":{start:{line:85,column:8},end:{line:85,column:75}},"18":{start:{line:92,column:8},end:{line:92,column:38}},"19":{start:{line:103,column:21},end:{line:103,column:57}},"20":{start:{line:105,column:8},end:{line:107,column:9}},"21":{start:{line:106,column:12},end:{line:106,column:51}},"22":{start:{line:108,column:8},end:{line:110,column:9}},"23":{start:{line:109,column:12},end:{line:109,column:62}},"24":{start:{line:111,column:22},end:{line:111,column:83}},"25":{start:{line:112,column:8},end:{line:112,column:47}},"26":{start:{line:113,column:8},end:{line:113,column:21}},"27":{start:{line:121,column:8},end:{line:123,column:9}},"28":{start:{line:122,column:12},end:{line:122,column:24}},"29":{start:{line:124,column:26},end:{line:124,column:69}},"30":{start:{line:125,column:8},end:{line:128,column:10}},"31":{start:{line:127,column:74},end:{line:127,column:104}},"32":{start:{line:131,column:0},end:{line:131,column:22}},"33":{start:{line:132,column:0},end:{line:132,column:33}},"34":{start:{line:133,column:0},end:{line:133,column:35}},"35":{start:{line:134,column:0},end:{line:134,column:86}},"36":{start:{line:140,column:8},end:{line:140,column:23}},"37":{start:{line:141,column:8},end:{line:141,column:39}},"38":{start:{line:149,column:8},end:{line:149,column:38}},"39":{start:{line:157,column:8},end:{line:157,column:25}},"40":{start:{line:166,column:8},end:{line:169,column:10}},"41":{start:{line:172,column:0},end:{line:172,column:32}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:36,column:4},end:{line:36,column:5}},loc:{start:{line:36,column:74},end:{line:51,column:5}},line:36},"1":{name:"(anonymous_1)",decl:{start:{line:63,column:4},end:{line:63,column:5}},loc:{start:{line:63,column:39},end:{line:66,column:5}},line:63},"2":{name:"(anonymous_2)",decl:{start:{line:73,column:4},end:{line:73,column:5}},loc:{start:{line:73,column:27},end:{line:75,column:5}},line:73},"3":{name:"(anonymous_3)",decl:{start:{line:83,column:4},end:{line:83,column:5}},loc:{start:{line:83,column:34},end:{line:86,column:5}},line:83},"4":{name:"(anonymous_4)",decl:{start:{line:91,column:4},end:{line:91,column:5}},loc:{start:{line:91,column:12},end:{line:93,column:5}},line:91},"5":{name:"(anonymous_5)",decl:{start:{line:102,column:4},end:{line:102,column:5}},loc:{start:{line:102,column:36},end:{line:114,column:5}},line:102},"6":{name:"(anonymous_6)",decl:{start:{line:120,column:4},end:{line:120,column:5}},loc:{start:{line:120,column:16},end:{line:129,column:5}},line:120},"7":{name:"(anonymous_7)",decl:{start:{line:127,column:58},end:{line:127,column:59}},loc:{start:{line:127,column:74},end:{line:127,column:104}},line:127},"8":{name:"(anonymous_8)",decl:{start:{line:139,column:4},end:{line:139,column:5}},loc:{start:{line:139,column:29},end:{line:142,column:5}},line:139},"9":{name:"(anonymous_9)",decl:{start:{line:148,column:4},end:{line:148,column:5}},loc:{start:{line:148,column:13},end:{line:150,column:5}},line:148},"10":{name:"(anonymous_10)",decl:{start:{line:156,column:4},end:{line:156,column:5}},loc:{start:{line:156,column:13},end:{line:158,column:5}},line:156},"11":{name:"(anonymous_11)",decl:{start:{line:165,column:4},end:{line:165,column:5}},loc:{start:{line:165,column:29},end:{line:170,column:5}},line:165}},branchMap:{"0":{loc:{start:{line:105,column:8},end:{line:107,column:9}},type:"if",locations:[{start:{line:105,column:8},end:{line:107,column:9}},{start:{line:105,column:8},end:{line:107,column:9}}],line:105},"1":{loc:{start:{line:108,column:8},end:{line:110,column:9}},type:"if",locations:[{start:{line:108,column:8},end:{line:110,column:9}},{start:{line:108,column:8},end:{line:110,column:9}}],line:108},"2":{loc:{start:{line:121,column:8},end:{line:123,column:9}},type:"if",locations:[{start:{line:121,column:8},end:{line:123,column:9}},{start:{line:121,column:8},end:{line:123,column:9}}],line:121}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},b:{"0":[0,0],"1":[0,0],"2":[0,0]},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/gauges/gauge.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/gauges/gauge.ts"],names:[],mappings:";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,sDAAuE;AACvE,0DAGkC;AAWlC,oCAAoE;AAGpE;;GAEG;AACH,MAAa,KAAK;IAYhB;;;;;;;;;OASG;IACH,YACE,IAAY,EACZ,WAAmB,EACnB,IAAY,EACZ,IAA0B,EACjB,SAAqB,EACrB,cAAyC;QADzC,cAAS,GAAT,SAAS,CAAY;QACrB,mBAAc,GAAd,cAAc,CAA2B;QAxB5C,qBAAgB,GAA6B,IAAI,GAAG,EAAE,CAAC;QA0B7D,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC,MAAM,CAAC;QACxC,MAAM,mBAAmB,GAAG,CAAC,GAAG,SAAS,EAAE,GAAG,cAAc,CAAC,IAAI,EAAE,CAAC,CAAC;QACrE,IAAI,CAAC,mBAAmB,GAAG,CAAC,GAAG,cAAc,CAAC,MAAM,EAAE,CAAC,CAAC;QAExD,IAAI,CAAC,gBAAgB,GAAG;YACtB,IAAI;YACJ,WAAW;YACX,IAAI;YACJ,IAAI;YACJ,SAAS,EAAE,mBAAmB;SAC/B,CAAC;QACF,IAAI,CAAC,kBAAkB,GAAG,+BAAuB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IAC1E,CAAC;IAED;;;;;;;;;;OAUG;IACH,qBAAqB,CAAC,WAAyB;QAC7C,0CAA4B,CAC1B,6BAAe,CAAC,WAAW,EAAE,KAAK,CAAC,YAAY,CAAC,EAChD,KAAK,CAAC,WAAW,CAClB,CAAC;QACF,OAAO,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;IAC9C,CAAC;IAED;;;;;OAKG;IACH,oBAAoB;QAClB,OAAO,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;IAC1D,CAAC;IAED;;;;;;OAMG;IACH,gBAAgB,CAAC,WAAyB;QACxC,6BAAe,CAAC,WAAW,EAAE,KAAK,CAAC,YAAY,CAAC,CAAC;QACjD,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,uBAAe,CAAC,WAAW,CAAC,CAAC,CAAC;IAC7D,CAAC;IAED;;;OAGG;IACH,KAAK;QACH,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;IAChC,CAAC;IAED;;;;;;;OAOG;IACK,kBAAkB,CAAC,WAAyB;QAClD,MAAM,IAAI,GAAG,uBAAe,CAAC,WAAW,CAAC,CAAC;QAC1C,4EAA4E;QAC5E,IAAI,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACnC,OAAO,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAE,CAAC;SACzC;QACD,IAAI,IAAI,CAAC,eAAe,KAAK,WAAW,CAAC,MAAM,EAAE;YAC/C,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAC;SACnD;QAED,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,CAAC,GAAG,WAAW,EAAE,GAAG,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC;QAC5E,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACvC,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;;;OAIG;IACH,SAAS;QACP,IAAI,IAAI,CAAC,gBAAgB,CAAC,IAAI,KAAK,CAAC,EAAE;YACpC,OAAO,IAAI,CAAC;SACb;QACD,MAAM,SAAS,GAAc,yCAA6B,EAAE,CAAC;QAC7D,OAAO;YACL,UAAU,EAAE,IAAI,CAAC,gBAAgB;YACjC,UAAU,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE,EAAE,CAC3D,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,CAC/B;SACF,CAAC;IACJ,CAAC;;AApIH,sBAqIC;AA9HyB,iBAAW,GAAG,YAAY,CAAC;AAC3B,kBAAY,GAAG,aAAa,CAAC;AAC7B,gCAA0B,GAChD,kDAAkD,CAAC;AA6HvD;;GAEG;AACH,MAAa,UAAU;IAIrB,YAAY,WAAyB;QAF7B,UAAK,GAAG,CAAC,CAAC;QAGhB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACjC,CAAC;IAED;;;;OAIG;IACH,GAAG,CAAC,GAAW;QACb,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;IAChC,CAAC;IAED;;;;OAIG;IACH,GAAG,CAAC,GAAW;QACb,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;IACnB,CAAC;IAED;;;;;OAKG;IACH,aAAa,CAAC,SAAoB;QAChC,OAAO;YACL,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,SAAS,EAAE,CAAC;SAC3C,CAAC;IACJ,CAAC;CACF;AAtCD,gCAsCC",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getTimestampWithProcessHRTime } from '../../common/time-util';\nimport {\n  validateArrayElementsNotNull,\n  validateNotNull,\n} from '../../common/validations';\nimport {\n  LabelKey,\n  LabelValue,\n  Metric,\n  MetricDescriptor,\n  MetricDescriptorType,\n  TimeSeries,\n  Timestamp,\n} from '../export/types';\nimport { Meter } from '../types';\nimport { hashLabelValues, initializeDefaultLabels } from '../utils';\nimport * as types from './types';\n\n/**\n * Gauge metric\n */\nexport class Gauge implements Meter {\n  private readonly metricDescriptor: MetricDescriptor;\n  private labelKeysLength: number;\n  private defaultLabelValues: LabelValue[];\n  private registeredPoints: Map<string, types.Point> = new Map();\n  private readonly constantLabelValues: LabelValue[];\n\n  private static readonly LABEL_VALUE = 'labelValue';\n  private static readonly LABEL_VALUES = 'labelValues';\n  private static readonly ERROR_MESSAGE_INVALID_SIZE =\n    \"Label Keys and Label Values don't have same size\";\n\n  /**\n   * Constructs a new Gauge instance.\n   *\n   * @param name The name of the metric.\n   * @param description The description of the metric.\n   * @param unit The unit of the metric.\n   * @param type The type of metric.\n   * @param labelKeys The list of the label keys.\n   * @param constantLabels The map of constant labels for the Metric.\n   */\n  constructor(\n    name: string,\n    description: string,\n    unit: string,\n    type: MetricDescriptorType,\n    readonly labelKeys: LabelKey[],\n    readonly constantLabels: Map<LabelKey, LabelValue>\n  ) {\n    this.labelKeysLength = labelKeys.length;\n    const keysAndConstantKeys = [...labelKeys, ...constantLabels.keys()];\n    this.constantLabelValues = [...constantLabels.values()];\n\n    this.metricDescriptor = {\n      name,\n      description,\n      unit,\n      type,\n      labelKeys: keysAndConstantKeys,\n    };\n    this.defaultLabelValues = initializeDefaultLabels(this.labelKeysLength);\n  }\n\n  /**\n   * Creates a TimeSeries and returns a Point if the specified\n   * labelValues is not already associated with this gauge, else returns an\n   * existing Point.\n   *\n   * It is recommended to keep a reference to the Point instead of always\n   * calling this method for manual operations.\n   *\n   * @param labelValues The list of the label values.\n   * @returns The value of single gauge.\n   */\n  getOrCreateTimeSeries(labelValues: LabelValue[]): types.Point {\n    validateArrayElementsNotNull(\n      validateNotNull(labelValues, Gauge.LABEL_VALUES),\n      Gauge.LABEL_VALUE\n    );\n    return this.registerTimeSeries(labelValues);\n  }\n\n  /**\n   * Returns a Point for a gauge with all labels not set, or default\n   * labels.\n   *\n   * @returns The value of single gauge.\n   */\n  getDefaultTimeSeries(): types.Point {\n    return this.registerTimeSeries(this.defaultLabelValues);\n  }\n\n  /**\n   * Removes the TimeSeries from the gauge metric, if it is present. i.e.\n   * references to previous Point objects are invalid (not part of the\n   * metric).\n   *\n   * @param labelValues The list of label values.\n   */\n  removeTimeSeries(labelValues: LabelValue[]): void {\n    validateNotNull(labelValues, Gauge.LABEL_VALUES);\n    this.registeredPoints.delete(hashLabelValues(labelValues));\n  }\n\n  /**\n   * Removes all TimeSeries from the gauge metric. i.e. references to all\n   * previous Point objects are invalid (not part of the metric).\n   */\n  clear(): void {\n    this.registeredPoints.clear();\n  }\n\n  /**\n   * Registers a TimeSeries and returns a Point if the specified\n   * labelValues is not already associated with this gauge, else returns an\n   * existing Point.\n   *\n   * @param labelValues The list of the label values.\n   * @returns The value of single gauge.\n   */\n  private registerTimeSeries(labelValues: LabelValue[]): types.Point {\n    const hash = hashLabelValues(labelValues);\n    // return if the specified labelValues is already associated with the point.\n    if (this.registeredPoints.has(hash)) {\n      return this.registeredPoints.get(hash)!;\n    }\n    if (this.labelKeysLength !== labelValues.length) {\n      throw new Error(Gauge.ERROR_MESSAGE_INVALID_SIZE);\n    }\n\n    const point = new PointEntry([...labelValues, ...this.constantLabelValues]);\n    this.registeredPoints.set(hash, point);\n    return point;\n  }\n\n  /**\n   * Provides a Metric with one or more TimeSeries.\n   *\n   * @returns The Metric, or null if TimeSeries is not present in Metric.\n   */\n  getMetric(): Metric | null {\n    if (this.registeredPoints.size === 0) {\n      return null;\n    }\n    const timestamp: Timestamp = getTimestampWithProcessHRTime();\n    return {\n      descriptor: this.metricDescriptor,\n      timeseries: Array.from(this.registeredPoints, ([_, point]) =>\n        point.getTimeSeries(timestamp)\n      ),\n    };\n  }\n}\n\n/**\n * The value of a single point in the Gauge.TimeSeries.\n */\nexport class PointEntry implements types.Point {\n  private readonly labelValues: LabelValue[];\n  private value = 0;\n\n  constructor(labelValues: LabelValue[]) {\n    this.labelValues = labelValues;\n  }\n\n  /**\n   * Adds the given value to the current value. The values can be negative.\n   *\n   * @param amt The value to add.\n   */\n  add(amt: number): void {\n    this.value = this.value + amt;\n  }\n\n  /**\n   * Sets the given value.\n   *\n   * @param val The new value.\n   */\n  set(val: number): void {\n    this.value = val;\n  }\n\n  /**\n   * Returns the TimeSeries with one or more Point.\n   *\n   * @param timestamp The time at which the gauge is recorded.\n   * @returns The TimeSeries.\n   */\n  getTimeSeries(timestamp: Timestamp): TimeSeries {\n    return {\n      labelValues: this.labelValues,\n      points: [{ value: this.value, timestamp }],\n    };\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"f72bc7049c91fb12e2b1fe71d97235aebf4d18b8"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_v9t74i5an=function(){return actualCoverage;};}return actualCoverage;}cov_v9t74i5an();cov_v9t74i5an().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_v9t74i5an().s[1]++;exports.PointEntry=exports.Gauge=void 0;const time_util_1=(cov_v9t74i5an().s[2]++,require("../../common/time-util"));const validations_1=(cov_v9t74i5an().s[3]++,require("../../common/validations"));const utils_1=(cov_v9t74i5an().s[4]++,require("../utils"));/**
 * Gauge metric
 */class Gauge{/**
     * Constructs a new Gauge instance.
     *
     * @param name The name of the metric.
     * @param description The description of the metric.
     * @param unit The unit of the metric.
     * @param type The type of metric.
     * @param labelKeys The list of the label keys.
     * @param constantLabels The map of constant labels for the Metric.
     */constructor(name,description,unit,type,labelKeys,constantLabels){cov_v9t74i5an().f[0]++;cov_v9t74i5an().s[5]++;this.labelKeys=labelKeys;cov_v9t74i5an().s[6]++;this.constantLabels=constantLabels;cov_v9t74i5an().s[7]++;this.registeredPoints=new Map();cov_v9t74i5an().s[8]++;this.labelKeysLength=labelKeys.length;const keysAndConstantKeys=(cov_v9t74i5an().s[9]++,[...labelKeys,...constantLabels.keys()]);cov_v9t74i5an().s[10]++;this.constantLabelValues=[...constantLabels.values()];cov_v9t74i5an().s[11]++;this.metricDescriptor={name,description,unit,type,labelKeys:keysAndConstantKeys};cov_v9t74i5an().s[12]++;this.defaultLabelValues=utils_1.initializeDefaultLabels(this.labelKeysLength);}/**
     * Creates a TimeSeries and returns a Point if the specified
     * labelValues is not already associated with this gauge, else returns an
     * existing Point.
     *
     * It is recommended to keep a reference to the Point instead of always
     * calling this method for manual operations.
     *
     * @param labelValues The list of the label values.
     * @returns The value of single gauge.
     */getOrCreateTimeSeries(labelValues){cov_v9t74i5an().f[1]++;cov_v9t74i5an().s[13]++;validations_1.validateArrayElementsNotNull(validations_1.validateNotNull(labelValues,Gauge.LABEL_VALUES),Gauge.LABEL_VALUE);cov_v9t74i5an().s[14]++;return this.registerTimeSeries(labelValues);}/**
     * Returns a Point for a gauge with all labels not set, or default
     * labels.
     *
     * @returns The value of single gauge.
     */getDefaultTimeSeries(){cov_v9t74i5an().f[2]++;cov_v9t74i5an().s[15]++;return this.registerTimeSeries(this.defaultLabelValues);}/**
     * Removes the TimeSeries from the gauge metric, if it is present. i.e.
     * references to previous Point objects are invalid (not part of the
     * metric).
     *
     * @param labelValues The list of label values.
     */removeTimeSeries(labelValues){cov_v9t74i5an().f[3]++;cov_v9t74i5an().s[16]++;validations_1.validateNotNull(labelValues,Gauge.LABEL_VALUES);cov_v9t74i5an().s[17]++;this.registeredPoints.delete(utils_1.hashLabelValues(labelValues));}/**
     * Removes all TimeSeries from the gauge metric. i.e. references to all
     * previous Point objects are invalid (not part of the metric).
     */clear(){cov_v9t74i5an().f[4]++;cov_v9t74i5an().s[18]++;this.registeredPoints.clear();}/**
     * Registers a TimeSeries and returns a Point if the specified
     * labelValues is not already associated with this gauge, else returns an
     * existing Point.
     *
     * @param labelValues The list of the label values.
     * @returns The value of single gauge.
     */registerTimeSeries(labelValues){cov_v9t74i5an().f[5]++;const hash=(cov_v9t74i5an().s[19]++,utils_1.hashLabelValues(labelValues));// return if the specified labelValues is already associated with the point.
cov_v9t74i5an().s[20]++;if(this.registeredPoints.has(hash)){cov_v9t74i5an().b[0][0]++;cov_v9t74i5an().s[21]++;return this.registeredPoints.get(hash);}else{cov_v9t74i5an().b[0][1]++;}cov_v9t74i5an().s[22]++;if(this.labelKeysLength!==labelValues.length){cov_v9t74i5an().b[1][0]++;cov_v9t74i5an().s[23]++;throw new Error(Gauge.ERROR_MESSAGE_INVALID_SIZE);}else{cov_v9t74i5an().b[1][1]++;}const point=(cov_v9t74i5an().s[24]++,new PointEntry([...labelValues,...this.constantLabelValues]));cov_v9t74i5an().s[25]++;this.registeredPoints.set(hash,point);cov_v9t74i5an().s[26]++;return point;}/**
     * Provides a Metric with one or more TimeSeries.
     *
     * @returns The Metric, or null if TimeSeries is not present in Metric.
     */getMetric(){cov_v9t74i5an().f[6]++;cov_v9t74i5an().s[27]++;if(this.registeredPoints.size===0){cov_v9t74i5an().b[2][0]++;cov_v9t74i5an().s[28]++;return null;}else{cov_v9t74i5an().b[2][1]++;}const timestamp=(cov_v9t74i5an().s[29]++,time_util_1.getTimestampWithProcessHRTime());cov_v9t74i5an().s[30]++;return{descriptor:this.metricDescriptor,timeseries:Array.from(this.registeredPoints,([_,point])=>{cov_v9t74i5an().f[7]++;cov_v9t74i5an().s[31]++;return point.getTimeSeries(timestamp);})};}}cov_v9t74i5an().s[32]++;exports.Gauge=Gauge;cov_v9t74i5an().s[33]++;Gauge.LABEL_VALUE='labelValue';cov_v9t74i5an().s[34]++;Gauge.LABEL_VALUES='labelValues';cov_v9t74i5an().s[35]++;Gauge.ERROR_MESSAGE_INVALID_SIZE="Label Keys and Label Values don't have same size";/**
 * The value of a single point in the Gauge.TimeSeries.
 */class PointEntry{constructor(labelValues){cov_v9t74i5an().f[8]++;cov_v9t74i5an().s[36]++;this.value=0;cov_v9t74i5an().s[37]++;this.labelValues=labelValues;}/**
     * Adds the given value to the current value. The values can be negative.
     *
     * @param amt The value to add.
     */add(amt){cov_v9t74i5an().f[9]++;cov_v9t74i5an().s[38]++;this.value=this.value+amt;}/**
     * Sets the given value.
     *
     * @param val The new value.
     */set(val){cov_v9t74i5an().f[10]++;cov_v9t74i5an().s[39]++;this.value=val;}/**
     * Returns the TimeSeries with one or more Point.
     *
     * @param timestamp The time at which the gauge is recorded.
     * @returns The TimeSeries.
     */getTimeSeries(timestamp){cov_v9t74i5an().f[11]++;cov_v9t74i5an().s[40]++;return{labelValues:this.labelValues,points:[{value:this.value,timestamp}]};}}cov_v9t74i5an().s[41]++;exports.PointEntry=PointEntry;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3VzZXJtYWl0aGEvdHJhZGVtYXN0ZXIvbGlicy9saWItZXh0ZXJuYWwtb3BlbmNlbnN1cy1ub2RlL3NyYy9tZXRyaWNzL2dhdWdlcy9nYXVnZS50cyIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXJtYWl0aGEvdHJhZGVtYXN0ZXIvbGlicy9saWItZXh0ZXJuYWwtb3BlbmNlbnN1cy1ub2RlL3NyYy9tZXRyaWNzL2dhdWdlcy9nYXVnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7O0dBY0c7OztBQUVILHNEQUF1RTtBQUN2RSwwREFHa0M7QUFXbEMsb0NBQW9FO0FBR3BFOztHQUVHO0FBQ0gsTUFBYSxLQUFLO0lBWWhCOzs7Ozs7Ozs7T0FTRztJQUNILFlBQ0UsSUFBWSxFQUNaLFdBQW1CLEVBQ25CLElBQVksRUFDWixJQUEwQixFQUNqQixTQUFxQixFQUNyQixjQUF5QztRQUR6QyxjQUFTLEdBQVQsU0FBUyxDQUFZO1FBQ3JCLG1CQUFjLEdBQWQsY0FBYyxDQUEyQjtRQXhCNUMscUJBQWdCLEdBQTZCLElBQUksR0FBRyxFQUFFLENBQUM7UUEwQjdELElBQUksQ0FBQyxlQUFlLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQztRQUN4QyxNQUFNLG1CQUFtQixHQUFHLENBQUMsR0FBRyxTQUFTLEVBQUUsR0FBRyxjQUFjLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNyRSxJQUFJLENBQUMsbUJBQW1CLEdBQUcsQ0FBQyxHQUFHLGNBQWMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBRXhELElBQUksQ0FBQyxnQkFBZ0IsR0FBRztZQUN0QixJQUFJO1lBQ0osV0FBVztZQUNYLElBQUk7WUFDSixJQUFJO1lBQ0osU0FBUyxFQUFFLG1CQUFtQjtTQUMvQixDQUFDO1FBQ0YsSUFBSSxDQUFDLGtCQUFrQixHQUFHLCtCQUF1QixDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBRUQ7Ozs7Ozs7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Q0FBQyxTQUFvQjtRQUNoQyxPQUFPO1lBQ0wsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXO1lBQzdCLE1BQU0sRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLENBQUM7U0FDM0MsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQXRDRCxnQ0FzQ0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDE4LCBPcGVuQ2Vuc3VzIEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IGdldFRpbWVzdGFtcFdpdGhQcm9jZXNzSFJUaW1lIH0gZnJvbSAnLi4vLi4vY29tbW9uL3RpbWUtdXRpbCc7XG5pbXBvcnQge1xuICB2YWxpZGF0ZUFycmF5RWxlbWVudHNOb3ROdWxsLFxuICB2YWxpZGF0ZU5vdE51bGwsXG59IGZyb20gJy4uLy4uL2NvbW1vbi92YWxpZGF0aW9ucyc7XG5pbXBvcnQge1xuICBMYWJlbEtleSxcbiAgTGFiZWxWYWx1ZSxcbiAgTWV0cmljLFxuICBNZXRyaWNEZXNjcmlwdG9yLFxuICBNZXRyaWNEZXNjcmlwdG9yVHlwZSxcbiAgVGltZVNlcmllcyxcbiAgVGltZXN0YW1wLFxufSBmcm9tICcuLi9leHBvcnQvdHlwZXMnO1xuaW1wb3J0IHsgTWV0ZXIgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBoYXNoTGFiZWxWYWx1ZXMsIGluaXRpYWxpemVEZWZhdWx0TGFiZWxzIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0ICogYXMgdHlwZXMgZnJvbSAnLi90eXBlcyc7XG5cbi8qKlxuICogR2F1Z2UgbWV0cmljXG4gKi9cbmV4cG9ydCBjbGFzcyBHYXVnZSBpbXBsZW1lbnRzIE1ldGVyIHtcbiAgcHJpdmF0ZSByZWFkb25seSBtZXRyaWNEZXNjcmlwdG9yOiBNZXRyaWNEZXNjcmlwdG9yO1xuICBwcml2YXRlIGxhYmVsS2V5c0xlbmd0aDogbnVtYmVyO1xuICBwcml2YXRlIGRlZmF1bHRMYWJlbFZhbHVlczogTGFiZWxWYWx1ZVtdO1xuICBwcml2YXRlIHJlZ2lzdGVyZWRQb2ludHM6IE1hcDxzdHJpbmcsIHR5cGVzLlBvaW50PiA9IG5ldyBNYXAoKTtcbiAgcHJpdmF0ZSByZWFkb25seSBjb25zdGFudExhYmVsVmFsdWVzOiBMYWJlbFZhbHVlW107XG5cbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgTEFCRUxfVkFMVUUgPSAnbGFiZWxWYWx1ZSc7XG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IExBQkVMX1ZBTFVFUyA9ICdsYWJlbFZhbHVlcyc7XG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IEVSUk9SX01FU1NBR0VfSU5WQUxJRF9TSVpFID1cbiAgICBcIkxhYmVsIEtleXMgYW5kIExhYmVsIFZhbHVlcyBkb24ndCBoYXZlIHNhbWUgc2l6ZVwiO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIGEgbmV3IEdhdWdlIGluc3RhbmNlLlxuICAgKlxuICAgKiBAcGFyYW0gbmFtZSBUaGUgbmFtZSBvZiB0aGUgbWV0cmljLlxuICAgKiBAcGFyYW0gZGVzY3JpcHRpb24gVGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBtZXRyaWMuXG4gICAqIEBwYXJhbSB1bml0IFRoZSB1bml0IG9mIHRoZSBtZXRyaWMuXG4gICAqIEBwYXJhbSB0eXBlIFRoZSB0eXBlIG9mIG1ldHJpYy5cbiAgICogQHBhcmFtIGxhYmVsS2V5cyBUaGUgbGlzdCBvZiB0aGUgbGFiZWwga2V5cy5cbiAgICogQHBhcmFtIGNvbnN0YW50TGFiZWxzIFRoZSBtYXAgb2YgY29uc3RhbnQgbGFiZWxzIGZvciB0aGUgTWV0cmljLlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmcsXG4gICAgdW5pdDogc3RyaW5nLFxuICAgIHR5cGU6IE1ldHJpY0Rlc2NyaXB0b3JUeXBlLFxuICAgIHJlYWRvbmx5IGxhYmVsS2V5czogTGFiZWxLZXlbXSxcbiAgICByZWFkb25seSBjb25zdGFudExhYmVsczogTWFwPExhYmVsS2V5LCBMYWJlbFZhbHVlPlxuICApIHtcbiAgICB0aGlzLmxhYmVsS2V5c0xlbmd0aCA9IGxhYmVsS2V5cy5sZW5ndGg7XG4gICAgY29uc3Qga2V5c0FuZENvbnN0YW50S2V5cyA9IFsuLi5sYWJlbEtleXMsIC4uLmNvbnN0YW50TGFiZWxzLmtleXMoKV07XG4gICAgdGhpcy5jb25zdGFudExhYmVsVmFsdWVzID0gWy4uLmNvbnN0YW50TGFiZWxzLnZhbHVlcygpXTtcblxuICAgIHRoaXMubWV0cmljRGVzY3JpcHRvciA9IHtcbiAgICAgIG5hbWUsXG4gICAgICBkZXNjcmlwdGlvbixcbiAgICAgIHVuaXQsXG4gICAgICB0eXBlLFxuICAgICAgbGFiZWxLZXlzOiBrZXlzQW5kQ29uc3RhbnRLZXlzLFxuICAgIH07XG4gICAgdGhpcy5kZWZhdWx0TGFiZWxWYWx1ZXMgPSBpbml0aWFsaXplRGVmYXVsdExhYmVscyh0aGlzLmxhYmVsS2V5c0xlbmd0aCk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIFRpbWVTZXJpZXMgYW5kIHJldHVybnMgYSBQb2ludCBpZiB0aGUgc3BlY2lmaWVkXG4gICAqIGxhYmVsVmFsdWVzIGlzIG5vdCBhbHJlYWR5IGFzc29jaWF0ZWQgd2l0aCB0aGlzIGdhdWdlLCBlbHNlIHJldHVybnMgYW5cbiAgICogZXhpc3RpbmcgUG9pbnQuXG4gICAqXG4gICAqIEl0IGlzIHJlY29tbWVuZGVkIHRvIGtlZXAgYSByZWZlcmVuY2UgdG8gdGhlIFBvaW50IGluc3RlYWQgb2YgYWx3YXlzXG4gICAqIGNhbGxpbmcgdGhpcyBtZXRob2QgZm9yIG1hbnVhbCBvcGVyYXRpb25zLlxuICAgKlxuICAgKiBAcGFyYW0gbGFiZWxWYWx1ZXMgVGhlIGxpc3Qgb2YgdGhlIGxhYmVsIHZhbHVlcy5cbiAgICogQHJldHVybnMgVGhlIHZhbHVlIG9mIHNpbmdsZSBnYXVnZS5cbiAgICovXG4gIGdldE9yQ3JlYXRlVGltZVNlcmllcyhsYWJlbFZhbHVlczogTGFiZWxWYWx1ZVtdKTogdHlwZXMuUG9pbnQge1xuICAgIHZhbGlkYXRlQXJyYXlFbGVtZW50c05vdE51bGwoXG4gICAgICB2YWxpZGF0ZU5vdE51bGwobGFiZWxWYWx1ZXMsIEdhdWdlLkxBQkVMX1ZBTFVFUyksXG4gICAgICBHYXVnZS5MQUJFTF9WQUxVRVxuICAgICk7XG4gICAgcmV0dXJuIHRoaXMucmVnaXN0ZXJUaW1lU2VyaWVzKGxhYmVsVmFsdWVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgUG9pbnQgZm9yIGEgZ2F1Z2Ugd2l0aCBhbGwgbGFiZWxzIG5vdCBzZXQsIG9yIGRlZmF1bHRcbiAgICogbGFiZWxzLlxuICAgKlxuICAgKiBAcmV0dXJucyBUaGUgdmFsdWUgb2Ygc2luZ2xlIGdhdWdlLlxuICAgKi9cbiAgZ2V0RGVmYXVsdFRpbWVTZXJpZXMoKTogdHlwZXMuUG9pbnQge1xuICAgIHJldHVybiB0aGlzLnJlZ2lzdGVyVGltZVNlcmllcyh0aGlzLmRlZmF1bHRMYWJlbFZhbHVlcyk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyB0aGUgVGltZVNlcmllcyBmcm9tIHRoZSBnYXVnZSBtZXRyaWMsIGlmIGl0IGlzIHByZXNlbnQuIGkuZS5cbiAgICogcmVmZXJlbmNlcyB0byBwcmV2aW91cyBQb2ludCBvYmplY3RzIGFyZSBpbnZhbGlkIChub3QgcGFydCBvZiB0aGVcbiAgICogbWV0cmljKS5cbiAgICpcbiAgICogQHBhcmFtIGxhYmVsVmFsdWVzIFRoZSBsaXN0IG9mIGxhYmVsIHZhbHVlcy5cbiAgICovXG4gIHJlbW92ZVRpbWVTZXJpZXMobGFiZWxWYWx1ZXM6IExhYmVsVmFsdWVbXSk6IHZvaWQge1xuICAgIHZhbGlkYXRlTm90TnVsbChsYWJlbFZhbHVlcywgR2F1Z2UuTEFCRUxfVkFMVUVTKTtcbiAgICB0aGlzLnJlZ2lzdGVyZWRQb2ludHMuZGVsZXRlKGhhc2hMYWJlbFZhbHVlcyhsYWJlbFZhbHVlcykpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYWxsIFRpbWVTZXJpZXMgZnJvbSB0aGUgZ2F1Z2UgbWV0cmljLiBpLmUuIHJlZmVyZW5jZXMgdG8gYWxsXG4gICAqIHByZXZpb3VzIFBvaW50IG9iamVjdHMgYXJlIGludmFsaWQgKG5vdCBwYXJ0IG9mIHRoZSBtZXRyaWMpLlxuICAgKi9cbiAgY2xlYXIoKTogdm9pZCB7XG4gICAgdGhpcy5yZWdpc3RlcmVkUG9pbnRzLmNsZWFyKCk7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIGEgVGltZVNlcmllcyBhbmQgcmV0dXJucyBhIFBvaW50IGlmIHRoZSBzcGVjaWZpZWRcbiAgICogbGFiZWxWYWx1ZXMgaXMgbm90IGFscmVhZHkgYXNzb2NpYXRlZCB3aXRoIHRoaXMgZ2F1Z2UsIGVsc2UgcmV0dXJucyBhblxuICAgKiBleGlzdGluZyBQb2ludC5cbiAgICpcbiAgICogQHBhcmFtIGxhYmVsVmFsdWVzIFRoZSBsaXN0IG9mIHRoZSBsYWJlbCB2YWx1ZXMuXG4gICAqIEByZXR1cm5zIFRoZSB2YWx1ZSBvZiBzaW5nbGUgZ2F1Z2UuXG4gICAqL1xuICBwcml2YXRlIHJlZ2lzdGVyVGltZVNlcmllcyhsYWJlbFZhbHVlczogTGFiZWxWYWx1ZVtdKTogdHlwZXMuUG9pbnQge1xuICAgIGNvbnN0IGhhc2ggPSBoYXNoTGFiZWxWYWx1ZXMobGFiZWxWYWx1ZXMpO1xuICAgIC8vIHJldHVybiBpZiB0aGUgc3BlY2lmaWVkIGxhYmVsVmFsdWVzIGlzIGFscmVhZHkgYXNzb2NpYXRlZCB3aXRoIHRoZSBwb2ludC5cbiAgICBpZiAodGhpcy5yZWdpc3RlcmVkUG9pbnRzLmhhcyhoYXNoKSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVnaXN0ZXJlZFBvaW50cy5nZXQoaGFzaCkhO1xuICAgIH1cbiAgICBpZiAodGhpcy5sYWJlbEtleXNMZW5ndGggIT09IGxhYmVsVmFsdWVzLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKEdhdWdlLkVSUk9SX01FU1NBR0VfSU5WQUxJRF9TSVpFKTtcbiAgICB9XG5cbiAgICBjb25zdCBwb2ludCA9IG5ldyBQb2ludEVudHJ5KFsuLi5sYWJlbFZhbHVlcywgLi4udGhpcy5jb25zdGFudExhYmVsVmFsdWVzXSk7XG4gICAgdGhpcy5yZWdpc3RlcmVkUG9pbnRzLnNldChoYXNoLCBwb2ludCk7XG4gICAgcmV0dXJuIHBvaW50O1xuICB9XG5cbiAgLyoqXG4gICAqIFByb3ZpZGVzIGEgTWV0cmljIHdpdGggb25lIG9yIG1vcmUgVGltZVNlcmllcy5cbiAgICpcbiAgICogQHJldHVybnMgVGhlIE1ldHJpYywgb3IgbnVsbCBpZiBUaW1lU2VyaWVzIGlzIG5vdCBwcmVzZW50IGluIE1ldHJpYy5cbiAgICovXG4gIGdldE1ldHJpYygpOiBNZXRyaWMgfCBudWxsIHtcbiAgICBpZiAodGhpcy5yZWdpc3RlcmVkUG9pbnRzLnNpemUgPT09IDApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCB0aW1lc3RhbXA6IFRpbWVzdGFtcCA9IGdldFRpbWVzdGFtcFdpdGhQcm9jZXNzSFJUaW1lKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRlc2NyaXB0b3I6IHRoaXMubWV0cmljRGVzY3JpcHRvcixcbiAgICAgIHRpbWVzZXJpZXM6IEFycmF5LmZyb20odGhpcy5yZWdpc3RlcmVkUG9pbnRzLCAoW18sIHBvaW50XSkgPT5cbiAgICAgICAgcG9pbnQuZ2V0VGltZVNlcmllcyh0aW1lc3RhbXApXG4gICAgICApLFxuICAgIH07XG4gIH1cbn1cblxuLyoqXG4gKiBUaGUgdmFsdWUgb2YgYSBzaW5nbGUgcG9pbnQgaW4gdGhlIEdhdWdlLlRpbWVTZXJpZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBQb2ludEVudHJ5IGltcGxlbWVudHMgdHlwZXMuUG9pbnQge1xuICBwcml2YXRlIHJlYWRvbmx5IGxhYmVsVmFsdWVzOiBMYWJlbFZhbHVlW107XG4gIHByaXZhdGUgdmFsdWUgPSAwO1xuXG4gIGNvbnN0cnVjdG9yKGxhYmVsVmFsdWVzOiBMYWJlbFZhbHVlW10pIHtcbiAgICB0aGlzLmxhYmVsVmFsdWVzID0gbGFiZWxWYWx1ZXM7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyB0aGUgZ2l2ZW4gdmFsdWUgdG8gdGhlIGN1cnJlbnQgdmFsdWUuIFRoZSB2YWx1ZXMgY2FuIGJlIG5lZ2F0aXZlLlxuICAgKlxuICAgKiBAcGFyYW0gYW10IFRoZSB2YWx1ZSB0byBhZGQuXG4gICAqL1xuICBhZGQoYW10OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLnZhbHVlID0gdGhpcy52YWx1ZSArIGFtdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBnaXZlbiB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHZhbCBUaGUgbmV3IHZhbHVlLlxuICAgKi9cbiAgc2V0KHZhbDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBUaW1lU2VyaWVzIHdpdGggb25lIG9yIG1vcmUgUG9pbnQuXG4gICAqXG4gICAqIEBwYXJhbSB0aW1lc3RhbXAgVGhlIHRpbWUgYXQgd2hpY2ggdGhlIGdhdWdlIGlzIHJlY29yZGVkLlxuICAgKiBAcmV0dXJucyBUaGUgVGltZVNlcmllcy5cbiAgICovXG4gIGdldFRpbWVTZXJpZXModGltZXN0YW1wOiBUaW1lc3RhbXApOiBUaW1lU2VyaWVzIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGFiZWxWYWx1ZXM6IHRoaXMubGFiZWxWYWx1ZXMsXG4gICAgICBwb2ludHM6IFt7IHZhbHVlOiB0aGlzLnZhbHVlLCB0aW1lc3RhbXAgfV0sXG4gICAgfTtcbiAgfVxufVxuIl19
//# sourceMappingURL=data:application/json;charset=utf-8;base64,