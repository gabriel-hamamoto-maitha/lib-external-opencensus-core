{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/exporters/console-exporter.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/exporters/console-exporter.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAMH,uDAAmD;AACnD,mDAAmD;AAGnD,4BAA4B;AAC5B,MAAa,YAAY;IAEvB,WAAW,CAAC,IAAqB,IAAG,CAAC;IACrC,SAAS,CAAC,IAAqB,IAAG,CAAC;IACnC,OAAO,CAAC,KAAwB;QAC9B,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;CACF;AAPD,oCAOC;AAED,iDAAiD;AACjD,MAAa,eAAe;IAK1B;;;;OAIG;IACH,YAAY,MAAsB;QAChC,IAAI,CAAC,MAAM,GAAG,IAAI,gCAAc,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAC/C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;IACjD,CAAC;IAED,WAAW,CAAC,IAAqB,IAAG,CAAC;IAErC;;;OAGG;IACH,SAAS,CAAC,IAAqB;QAC7B,yEAAyE;QACzE,uDAAuD;QACvD,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YAAE,OAAO;QAC/B,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IAED;;;OAGG;IACH,OAAO,CAAC,KAAwB;QAC9B,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACf,MAAM,QAAQ,GAAG,uBAAuB,IAAI,CAAC,OAAO,aAAa,IAAI,CAAC,EAAE,WAAW,IAAI,CAAC,IAAI,IAAI,CAAC;YACjG,MAAM,SAAS,GAAa,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CACjD,CAAC,gBAAgB,KAAK,CAAC,EAAE,WAAW,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAC9D,CAAC;YAEF,MAAM,MAAM,GAAa,EAAE,CAAC;YAC5B,MAAM,CAAC,IAAI,CAAC,QAAQ,GAAG,mBAAmB,GAAG,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACxE,OAAO,CAAC,GAAG,CAAC,GAAG,MAAM,EAAE,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;QACH,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;CACF;AA7CD,0CA6CC;AAED,sEAAsE;AACtE,MAAa,oBAAoB;IAC/B;;;OAGG;IACH,cAAc,CAAC,IAAU;QACvB,OAAO,CAAC,GAAG,CACT,oBAAoB,IAAI,CAAC,IAAI,yBAAyB,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAC1E,CAAC;IACJ,CAAC;IACD;;;;;OAKG;IACH,QAAQ,CACN,KAAa,EACb,WAAwB,EACxB,IAA2B;QAE3B,OAAO,CAAC,GAAG,CAAC,yBAAyB,WAAW,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;IACnE,CAAC;IAED;;;OAGG;IACH,KAAK;QACH,2CAA2C;IAC7C,CAAC;IAED,0BAA0B;IAC1B,IAAI,KAAU,CAAC;CAChB;AAlCD,oDAkCC","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as loggerTypes from '../common/types';\nimport { Measurement, View } from '../stats/types';\nimport { TagKey, TagValue } from '../tags/types';\nimport * as modelTypes from '../trace/model/types';\nimport { ExporterBuffer } from './exporter-buffer';\nimport * as logger from '../common/console-logger';\nimport { Exporter, ExporterConfig, StatsEventListener } from './types';\n\n/** Do not send span data */\nexport class NoopExporter implements Exporter {\n  logger?: loggerTypes.Logger;\n  onStartSpan(span: modelTypes.Span) {}\n  onEndSpan(span: modelTypes.Span) {}\n  publish(spans: modelTypes.Span[]) {\n    return Promise.resolve();\n  }\n}\n\n/** Format and sends span data to the console. */\nexport class ConsoleExporter implements Exporter {\n  /** Buffer object to store the spans. */\n  logger: loggerTypes.Logger;\n  private buffer: ExporterBuffer;\n\n  /**\n   * Constructs a new ConsoleExporter instance.\n   * @param config Exporter configuration object to create a console log\n   *     exporter.\n   */\n  constructor(config: ExporterConfig) {\n    this.buffer = new ExporterBuffer(this, config);\n    this.logger = config.logger || logger.logger();\n  }\n\n  onStartSpan(span: modelTypes.Span) {}\n\n  /**\n   * Event called when a span is ended.\n   * @param span Ended span.\n   */\n  onEndSpan(span: modelTypes.Span) {\n    // Add spans of a trace together when root is ended, skip non root spans.\n    // publish function will extract child spans from root.\n    if (!span.isRootSpan()) return;\n    this.buffer.addToBuffer(span);\n  }\n\n  /**\n   * Sends the spans information to the console.\n   * @param spans A list of spans to publish.\n   */\n  publish(spans: modelTypes.Span[]) {\n    spans.map(span => {\n      const ROOT_STR = `RootSpan: {traceId: ${span.traceId}, spanId: ${span.id}, name: ${span.name} }`;\n      const SPANS_STR: string[] = span.spans.map(child =>\n        [`\\t\\t{spanId: ${child.id}, name: ${child.name}}`].join('\\n')\n      );\n\n      const result: string[] = [];\n      result.push(ROOT_STR + '\\n\\tChildSpans:\\n' + `${SPANS_STR.join('\\n')}`);\n      console.log(`${result}`);\n    });\n    return Promise.resolve();\n  }\n}\n\n/** Exporter that receives stats data and shows in the log console. */\nexport class ConsoleStatsExporter implements StatsEventListener {\n  /**\n   * Event called when a view is registered\n   * @param view registered view\n   */\n  onRegisterView(view: View) {\n    console.log(\n      `View registered: ${view.name}, Measure registered: ${view.measure.name}`\n    );\n  }\n  /**\n   * Event called when a measurement is recorded\n   * @param view recorded view from measurement\n   * @param measurement recorded measurement\n   * @param tags The tags to which the value is applied\n   */\n  onRecord(\n    views: View[],\n    measurement: Measurement,\n    tags: Map<TagKey, TagValue>\n  ) {\n    console.log(`Measurement recorded: ${measurement.measure.name}`);\n  }\n\n  /**\n   * Starts the Console exporter that polls Metric from Metrics library and\n   * shows in the log console..\n   */\n  start(): void {\n    // TODO(mayurkale): dependency with PR#253.\n  }\n\n  /** Stops the exporter. */\n  stop(): void {}\n}\n"]}