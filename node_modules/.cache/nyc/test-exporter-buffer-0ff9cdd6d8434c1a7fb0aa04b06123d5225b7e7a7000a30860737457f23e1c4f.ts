"use strict";/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_wnysce76g(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-exporter-buffer.ts";var hash="db154710c62c307802e64b5c5c768f5355a93b5c";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-exporter-buffer.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:15},end:{line:18,column:32}},"2":{start:{line:19,column:14},end:{line:19,column:31}},"3":{start:{line:20,column:15},end:{line:20,column:54}},"4":{start:{line:21,column:27},end:{line:21,column:71}},"5":{start:{line:22,column:26},end:{line:22,column:69}},"6":{start:{line:23,column:20},end:{line:23,column:59}},"7":{start:{line:24,column:17},end:{line:24,column:53}},"8":{start:{line:25,column:17},end:{line:25,column:54}},"9":{start:{line:26,column:28},end:{line:26,column:29}},"10":{start:{line:27,column:31},end:{line:27,column:35}},"11":{start:{line:28,column:15},end:{line:28,column:50}},"12":{start:{line:29,column:28},end:{line:33,column:1}},"13":{start:{line:34,column:13},end:{line:34,column:25}},"14":{start:{line:35,column:13},end:{line:35,column:34}},"15":{start:{line:36,column:16},end:{line:36,column:50}},"16":{start:{line:37,column:21},end:{line:37,column:23}},"17":{start:{line:38,column:24},end:{line:52,column:1}},"18":{start:{line:39,column:22},end:{line:39,column:24}},"19":{start:{line:40,column:4},end:{line:50,column:5}},"20":{start:{line:40,column:17},end:{line:40,column:18}},"21":{start:{line:41,column:25},end:{line:41,column:103}},"22":{start:{line:42,column:8},end:{line:42,column:25}},"23":{start:{line:43,column:8},end:{line:48,column:9}},"24":{start:{line:43,column:21},end:{line:43,column:22}},"25":{start:{line:44,column:12},end:{line:47,column:15}},"26":{start:{line:49,column:8},end:{line:49,column:33}},"27":{start:{line:51,column:4},end:{line:51,column:21}},"28":{start:{line:53,column:0},end:{line:115,column:3}},"29":{start:{line:58,column:4},end:{line:63,column:7}},"30":{start:{line:59,column:8},end:{line:62,column:11}},"31":{start:{line:60,column:27},end:{line:60,column:94}},"32":{start:{line:61,column:12},end:{line:61,column:74}},"33":{start:{line:67,column:4},end:{line:75,column:7}},"34":{start:{line:68,column:8},end:{line:74,column:11}},"35":{start:{line:69,column:27},end:{line:69,column:94}},"36":{start:{line:70,column:34},end:{line:70,column:58}},"37":{start:{line:71,column:33},end:{line:71,column:68}},"38":{start:{line:72,column:12},end:{line:72,column:80}},"39":{start:{line:73,column:12},end:{line:73,column:76}},"40":{start:{line:79,column:4},end:{line:85,column:7}},"41":{start:{line:80,column:8},end:{line:84,column:11}},"42":{start:{line:81,column:27},end:{line:81,column:94}},"43":{start:{line:82,column:12},end:{line:82,column:100}},"44":{start:{line:83,column:12},end:{line:83,column:60}},"45":{start:{line:89,column:4},end:{line:100,column:7}},"46":{start:{line:90,column:8},end:{line:99,column:11}},"47":{start:{line:91,column:27},end:{line:91,column:94}},"48":{start:{line:92,column:30},end:{line:92,column:66}},"49":{start:{line:93,column:12},end:{line:95,column:13}},"50":{start:{line:94,column:16},end:{line:94,column:45}},"51":{start:{line:96,column:12},end:{line:96,column:81}},"52":{start:{line:97,column:12},end:{line:97,column:100}},"53":{start:{line:98,column:12},end:{line:98,column:60}},"54":{start:{line:104,column:4},end:{line:114,column:7}},"55":{start:{line:105,column:8},end:{line:113,column:25}},"56":{start:{line:106,column:27},end:{line:106,column:94}},"57":{start:{line:107,column:12},end:{line:107,column:100}},"58":{start:{line:108,column:12},end:{line:108,column:60}},"59":{start:{line:109,column:12},end:{line:112,column:45}},"60":{start:{line:110,column:16},end:{line:110,column:64}},"61":{start:{line:111,column:16},end:{line:111,column:23}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:38,column:24},end:{line:38,column:25}},loc:{start:{line:38,column:33},end:{line:52,column:1}},line:38},"1":{name:"(anonymous_1)",decl:{start:{line:53,column:27},end:{line:53,column:28}},loc:{start:{line:53,column:33},end:{line:115,column:1}},line:53},"2":{name:"(anonymous_2)",decl:{start:{line:58,column:37},end:{line:58,column:38}},loc:{start:{line:58,column:43},end:{line:63,column:5}},line:58},"3":{name:"(anonymous_3)",decl:{start:{line:59,column:46},end:{line:59,column:47}},loc:{start:{line:59,column:52},end:{line:62,column:9}},line:59},"4":{name:"(anonymous_4)",decl:{start:{line:67,column:30},end:{line:67,column:31}},loc:{start:{line:67,column:36},end:{line:75,column:5}},line:67},"5":{name:"(anonymous_5)",decl:{start:{line:68,column:36},end:{line:68,column:37}},loc:{start:{line:68,column:42},end:{line:74,column:9}},line:68},"6":{name:"(anonymous_6)",decl:{start:{line:79,column:28},end:{line:79,column:29}},loc:{start:{line:79,column:34},end:{line:85,column:5}},line:79},"7":{name:"(anonymous_7)",decl:{start:{line:80,column:48},end:{line:80,column:49}},loc:{start:{line:80,column:54},end:{line:84,column:9}},line:80},"8":{name:"(anonymous_8)",decl:{start:{line:89,column:41},end:{line:89,column:42}},loc:{start:{line:89,column:47},end:{line:100,column:5}},line:89},"9":{name:"(anonymous_9)",decl:{start:{line:90,column:33},end:{line:90,column:34}},loc:{start:{line:90,column:39},end:{line:99,column:9}},line:90},"10":{name:"(anonymous_10)",decl:{start:{line:104,column:52},end:{line:104,column:53}},loc:{start:{line:104,column:58},end:{line:114,column:5}},line:104},"11":{name:"(anonymous_11)",decl:{start:{line:105,column:38},end:{line:105,column:39}},loc:{start:{line:105,column:46},end:{line:113,column:9}},line:105},"12":{name:"(anonymous_12)",decl:{start:{line:109,column:23},end:{line:109,column:24}},loc:{start:{line:109,column:29},end:{line:112,column:13}},line:109}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},b:{},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-exporter-buffer.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-exporter-buffer.ts"],names:[],mappings:"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",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport { SpanKind } from '../src';\nimport * as logger from '../src/common/console-logger';\nimport { NoopExporter } from '../src/exporters/console-exporter';\nimport { ExporterBuffer } from '../src/exporters/exporter-buffer';\nimport { RootSpan } from '../src/trace/model/root-span';\nimport { CoreTracer } from '../src/trace/model/tracer';\n\nconst exporter = new NoopExporter();\nconst DEFAULT_BUFFER_SIZE = 3;\nconst DEFAULT_BUFFER_TIMEOUT = 2000; // time in milliseconds\nconst tracer = new CoreTracer().start({});\n\nconst defaultBufferConfig = {\n  bufferSize: DEFAULT_BUFFER_SIZE,\n  bufferTimeout: DEFAULT_BUFFER_TIMEOUT,\n  logger: logger.logger(),\n};\n\nconst name = 'MySpanName';\nconst kind = SpanKind.SERVER;\nconst traceId = 'd4cda95b652f4a1592b449d5929fda1b';\nconst parentSpanId = '';\n\nconst createRootSpans = (num: number): RootSpan[] => {\n  const rootSpans = [];\n  for (let i = 0; i < num; i++) {\n    const rootSpan = new RootSpan(\n      tracer,\n      `rootSpan.${i}`,\n      kind,\n      traceId,\n      parentSpanId\n    );\n    rootSpan.start();\n    for (let j = 0; j < 10; j++) {\n      rootSpan.startChildSpan({\n        name: `childSpan.${i}.${j}`,\n        kind: SpanKind.CLIENT,\n      });\n    }\n    rootSpans.push(rootSpan);\n  }\n  return rootSpans;\n};\n\ndescribe('ExporterBuffer', () => {\n  /**\n   * Should create a Buffer with exporter, DEFAULT_BUFFER_SIZE and\n   * DEFAULT_BUFFER_TIMEOUT\n   */\n  describe('new ExporterBuffer()', () => {\n    it('should create a Buffer instance', () => {\n      const buffer = new ExporterBuffer(exporter, defaultBufferConfig);\n      assert.ok(buffer instanceof ExporterBuffer);\n    });\n  });\n\n  /**\n   * Should return the Buffer\n   */\n  describe('setBufferSize', () => {\n    it('should set BufferSize', () => {\n      const buffer = new ExporterBuffer(exporter, defaultBufferConfig);\n      const newBufferSize = DEFAULT_BUFFER_SIZE + 10;\n      const bufferResize = buffer.setBufferSize(newBufferSize);\n      assert.ok(bufferResize instanceof ExporterBuffer);\n      assert.strictEqual(bufferResize.getBufferSize(), newBufferSize);\n    });\n  });\n\n  /**\n   * Should add one item to the Buffer\n   */\n  describe('addToBuffer', () => {\n    it('should add one item to the Buffer', () => {\n      const buffer = new ExporterBuffer(exporter, defaultBufferConfig);\n      buffer.addToBuffer(\n        new RootSpan(tracer, name, kind, traceId, parentSpanId)\n      );\n      assert.strictEqual(buffer.getQueue().length, 1);\n    });\n  });\n\n  /**\n   * Should force flush\n   */\n  describe('addToBuffer force flush ', () => {\n    it('should force flush', () => {\n      const buffer = new ExporterBuffer(exporter, defaultBufferConfig);\n      const rootSpans = createRootSpans(DEFAULT_BUFFER_SIZE);\n      for (const rootSpan of rootSpans) {\n        buffer.addToBuffer(rootSpan);\n      }\n      assert.strictEqual(buffer.getQueue().length, buffer.getBufferSize());\n      buffer.addToBuffer(\n        new RootSpan(tracer, name, kind, traceId, parentSpanId)\n      );\n      assert.strictEqual(buffer.getQueue().length, 0);\n    });\n  });\n\n  /**\n   * Should flush by timeout\n   */\n  describe('addToBuffer force flush by timeout ', () => {\n    it('should flush by timeout', done => {\n      const buffer = new ExporterBuffer(exporter, defaultBufferConfig);\n      buffer.addToBuffer(\n        new RootSpan(tracer, name, kind, traceId, parentSpanId)\n      );\n      assert.strictEqual(buffer.getQueue().length, 1);\n      setTimeout(() => {\n        assert.strictEqual(buffer.getQueue().length, 0);\n        done();\n      }, DEFAULT_BUFFER_TIMEOUT + 100);\n    }).timeout(5000);\n  });\n});\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"db154710c62c307802e64b5c5c768f5355a93b5c"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_wnysce76g=function(){return actualCoverage;};}return actualCoverage;}cov_wnysce76g();cov_wnysce76g().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const assert=(cov_wnysce76g().s[1]++,require("assert"));const src_1=(cov_wnysce76g().s[2]++,require("../src"));const logger=(cov_wnysce76g().s[3]++,require("../src/common/console-logger"));const console_exporter_1=(cov_wnysce76g().s[4]++,require("../src/exporters/console-exporter"));const exporter_buffer_1=(cov_wnysce76g().s[5]++,require("../src/exporters/exporter-buffer"));const root_span_1=(cov_wnysce76g().s[6]++,require("../src/trace/model/root-span"));const tracer_1=(cov_wnysce76g().s[7]++,require("../src/trace/model/tracer"));const exporter=(cov_wnysce76g().s[8]++,new console_exporter_1.NoopExporter());const DEFAULT_BUFFER_SIZE=(cov_wnysce76g().s[9]++,3);const DEFAULT_BUFFER_TIMEOUT=(cov_wnysce76g().s[10]++,2000);// time in milliseconds
const tracer=(cov_wnysce76g().s[11]++,new tracer_1.CoreTracer().start({}));const defaultBufferConfig=(cov_wnysce76g().s[12]++,{bufferSize:DEFAULT_BUFFER_SIZE,bufferTimeout:DEFAULT_BUFFER_TIMEOUT,logger:logger.logger()});const name=(cov_wnysce76g().s[13]++,'MySpanName');const kind=(cov_wnysce76g().s[14]++,src_1.SpanKind.SERVER);const traceId=(cov_wnysce76g().s[15]++,'d4cda95b652f4a1592b449d5929fda1b');const parentSpanId=(cov_wnysce76g().s[16]++,'');cov_wnysce76g().s[17]++;const createRootSpans=num=>{cov_wnysce76g().f[0]++;const rootSpans=(cov_wnysce76g().s[18]++,[]);cov_wnysce76g().s[19]++;for(let i=(cov_wnysce76g().s[20]++,0);i<num;i++){const rootSpan=(cov_wnysce76g().s[21]++,new root_span_1.RootSpan(tracer,`rootSpan.${i}`,kind,traceId,parentSpanId));cov_wnysce76g().s[22]++;rootSpan.start();cov_wnysce76g().s[23]++;for(let j=(cov_wnysce76g().s[24]++,0);j<10;j++){cov_wnysce76g().s[25]++;rootSpan.startChildSpan({name:`childSpan.${i}.${j}`,kind:src_1.SpanKind.CLIENT});}cov_wnysce76g().s[26]++;rootSpans.push(rootSpan);}cov_wnysce76g().s[27]++;return rootSpans;};cov_wnysce76g().s[28]++;describe('ExporterBuffer',()=>{cov_wnysce76g().f[1]++;cov_wnysce76g().s[29]++;/**
     * Should create a Buffer with exporter, DEFAULT_BUFFER_SIZE and
     * DEFAULT_BUFFER_TIMEOUT
     */describe('new ExporterBuffer()',()=>{cov_wnysce76g().f[2]++;cov_wnysce76g().s[30]++;it('should create a Buffer instance',()=>{cov_wnysce76g().f[3]++;const buffer=(cov_wnysce76g().s[31]++,new exporter_buffer_1.ExporterBuffer(exporter,defaultBufferConfig));cov_wnysce76g().s[32]++;assert.ok(buffer instanceof exporter_buffer_1.ExporterBuffer);});});/**
     * Should return the Buffer
     */cov_wnysce76g().s[33]++;describe('setBufferSize',()=>{cov_wnysce76g().f[4]++;cov_wnysce76g().s[34]++;it('should set BufferSize',()=>{cov_wnysce76g().f[5]++;const buffer=(cov_wnysce76g().s[35]++,new exporter_buffer_1.ExporterBuffer(exporter,defaultBufferConfig));const newBufferSize=(cov_wnysce76g().s[36]++,DEFAULT_BUFFER_SIZE+10);const bufferResize=(cov_wnysce76g().s[37]++,buffer.setBufferSize(newBufferSize));cov_wnysce76g().s[38]++;assert.ok(bufferResize instanceof exporter_buffer_1.ExporterBuffer);cov_wnysce76g().s[39]++;assert.strictEqual(bufferResize.getBufferSize(),newBufferSize);});});/**
     * Should add one item to the Buffer
     */cov_wnysce76g().s[40]++;describe('addToBuffer',()=>{cov_wnysce76g().f[6]++;cov_wnysce76g().s[41]++;it('should add one item to the Buffer',()=>{cov_wnysce76g().f[7]++;const buffer=(cov_wnysce76g().s[42]++,new exporter_buffer_1.ExporterBuffer(exporter,defaultBufferConfig));cov_wnysce76g().s[43]++;buffer.addToBuffer(new root_span_1.RootSpan(tracer,name,kind,traceId,parentSpanId));cov_wnysce76g().s[44]++;assert.strictEqual(buffer.getQueue().length,1);});});/**
     * Should force flush
     */cov_wnysce76g().s[45]++;describe('addToBuffer force flush ',()=>{cov_wnysce76g().f[8]++;cov_wnysce76g().s[46]++;it('should force flush',()=>{cov_wnysce76g().f[9]++;const buffer=(cov_wnysce76g().s[47]++,new exporter_buffer_1.ExporterBuffer(exporter,defaultBufferConfig));const rootSpans=(cov_wnysce76g().s[48]++,createRootSpans(DEFAULT_BUFFER_SIZE));cov_wnysce76g().s[49]++;for(const rootSpan of rootSpans){cov_wnysce76g().s[50]++;buffer.addToBuffer(rootSpan);}cov_wnysce76g().s[51]++;assert.strictEqual(buffer.getQueue().length,buffer.getBufferSize());cov_wnysce76g().s[52]++;buffer.addToBuffer(new root_span_1.RootSpan(tracer,name,kind,traceId,parentSpanId));cov_wnysce76g().s[53]++;assert.strictEqual(buffer.getQueue().length,0);});});/**
     * Should flush by timeout
     */cov_wnysce76g().s[54]++;describe('addToBuffer force flush by timeout ',()=>{cov_wnysce76g().f[10]++;cov_wnysce76g().s[55]++;it('should flush by timeout',done=>{cov_wnysce76g().f[11]++;const buffer=(cov_wnysce76g().s[56]++,new exporter_buffer_1.ExporterBuffer(exporter,defaultBufferConfig));cov_wnysce76g().s[57]++;buffer.addToBuffer(new root_span_1.RootSpan(tracer,name,kind,traceId,parentSpanId));cov_wnysce76g().s[58]++;assert.strictEqual(buffer.getQueue().length,1);cov_wnysce76g().s[59]++;setTimeout(()=>{cov_wnysce76g().f[12]++;cov_wnysce76g().s[60]++;assert.strictEqual(buffer.getQueue().length,0);cov_wnysce76g().s[61]++;done();},DEFAULT_BUFFER_TIMEOUT+100);}).timeout(5000);});});//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,