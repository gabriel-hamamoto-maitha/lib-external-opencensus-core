"use strict";/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_3xofe9b9d(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/internal/util.ts";var hash="b0e94fda0a9f922c4ef91407b01e1feb660d2eac";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/internal/util.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:0},end:{line:18,column:30}},"2":{start:{line:21,column:15},end:{line:21,column:32}},"3":{start:{line:22,column:29},end:{line:22,column:30}},"4":{start:{line:25,column:21},end:{line:25,column:55}},"5":{start:{line:26,column:23},end:{line:26,column:44}},"6":{start:{line:27,column:20},end:{line:27,column:38}},"7":{start:{line:28,column:25},end:{line:30,column:45}},"8":{start:{line:29,column:12},end:{line:29,column:40}},"9":{start:{line:30,column:12},end:{line:30,column:45}},"10":{start:{line:32,column:4},end:{line:32,column:46}},"11":{start:{line:34,column:0},end:{line:34,column:36}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:29,column:6},end:{line:29,column:7}},loc:{start:{line:29,column:12},end:{line:29,column:40}},line:29},"1":{name:"(anonymous_1)",decl:{start:{line:30,column:6},end:{line:30,column:7}},loc:{start:{line:30,column:12},end:{line:30,column:45}},line:30},"2":{name:"randomSpanId",decl:{start:{line:31,column:9},end:{line:31,column:21}},loc:{start:{line:31,column:24},end:{line:33,column:1}},line:31}},branchMap:{"0":{loc:{start:{line:28,column:25},end:{line:30,column:45}},type:"cond-expr",locations:[{start:{line:29,column:6},end:{line:29,column:40}},{start:{line:30,column:6},end:{line:30,column:45}}],line:28}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},f:{"0":0,"1":0,"2":0},b:{"0":[0,0]},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/internal/util.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/internal/util.ts"],names:[],mappings:";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,6CAA6C;AAC7C,4DAA4D;AAE5D,iCAAiC;AAEjC,MAAM,oBAAoB,GAAG,CAAC,CAAC;AAE/B,gFAAgF;AAChF,4BAA4B;AAC5B,MAAM,YAAY,GAAG,MAAM,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;AACxD,MAAM,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;AAC7C,MAAM,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC;AACvC,MAAM,gBAAgB,GAAG,cAAc;IACrC,CAAC,CAAC,GAAG,EAAE,CAAC,cAAc,CAAC,YAAY,CAAC;IACpC,CAAC,CAAC,GAAG,EAAE,CAAC,WAAW,CAAC,oBAAoB,CAAC,CAAC;AAE5C,SAAgB,YAAY;IAC1B,OAAO,gBAAgB,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAC5C,CAAC;AAFD,oCAEC",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Code snippets from Stackdriver Trace Agent\n// https://github.com/GoogleCloudPlatform/cloud-trace-nodejs\n\nimport * as crypto from 'crypto';\n\nconst SPAN_ID_RANDOM_BYTES = 8;\n\n// Use the faster crypto.randomFillSync when available (Node 7+) falling back to\n// using crypto.randomBytes.\nconst spanIdBuffer = Buffer.alloc(SPAN_ID_RANDOM_BYTES);\nconst randomFillSync = crypto.randomFillSync;\nconst randomBytes = crypto.randomBytes;\nconst spanRandomBuffer = randomFillSync\n  ? () => randomFillSync(spanIdBuffer)\n  : () => randomBytes(SPAN_ID_RANDOM_BYTES);\n\nexport function randomSpanId() {\n  return spanRandomBuffer().toString('hex');\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"b0e94fda0a9f922c4ef91407b01e1feb660d2eac"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_3xofe9b9d=function(){return actualCoverage;};}return actualCoverage;}cov_3xofe9b9d();cov_3xofe9b9d().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_3xofe9b9d().s[1]++;exports.randomSpanId=void 0;// Code snippets from Stackdriver Trace Agent
// https://github.com/GoogleCloudPlatform/cloud-trace-nodejs
const crypto=(cov_3xofe9b9d().s[2]++,require("crypto"));const SPAN_ID_RANDOM_BYTES=(cov_3xofe9b9d().s[3]++,8);// Use the faster crypto.randomFillSync when available (Node 7+) falling back to
// using crypto.randomBytes.
const spanIdBuffer=(cov_3xofe9b9d().s[4]++,Buffer.alloc(SPAN_ID_RANDOM_BYTES));const randomFillSync=(cov_3xofe9b9d().s[5]++,crypto.randomFillSync);const randomBytes=(cov_3xofe9b9d().s[6]++,crypto.randomBytes);const spanRandomBuffer=(cov_3xofe9b9d().s[7]++,randomFillSync?(cov_3xofe9b9d().b[0][0]++,()=>{cov_3xofe9b9d().f[0]++;cov_3xofe9b9d().s[8]++;return randomFillSync(spanIdBuffer);}):(cov_3xofe9b9d().b[0][1]++,()=>{cov_3xofe9b9d().f[1]++;cov_3xofe9b9d().s[9]++;return randomBytes(SPAN_ID_RANDOM_BYTES);}));function randomSpanId(){cov_3xofe9b9d().f[2]++;cov_3xofe9b9d().s[10]++;return spanRandomBuffer().toString('hex');}cov_3xofe9b9d().s[11]++;exports.randomSpanId=randomSpanId;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3VzZXJtYWl0aGEvdHJhZGVtYXN0ZXIvbGlicy9saWItZXh0ZXJuYWwtb3BlbmNlbnN1cy1ub2RlL3NyYy9pbnRlcm5hbC91dGlsLnRzIiwic291cmNlcyI6WyIvVXNlcnMvdXNlcm1haXRoYS90cmFkZW1hc3Rlci9saWJzL2xpYi1leHRlcm5hbC1vcGVuY2Vuc3VzLW5vZGUvc3JjL2ludGVybmFsL3V0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7OztHQWNHOzs7QUFFSCw2Q0FBNkM7QUFDN0MsNERBQTREO0FBRTVELGlDQUFpQztBQUVqQyxNQUFNLG9CQUFvQixHQUFHLENBQUMsQ0FBQztBQUUvQixnRkFBZ0Y7QUFDaEYsNEJBQTRCO0FBQzVCLE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUN4RCxNQUFNLGNBQWMsR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDO0FBQzdDLE1BQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUM7QUFDdkMsTUFBTSxnQkFBZ0IsR0FBRyxjQUFjO0lBQ3JDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDO0lBQ3BDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUU1QyxTQUFnQixZQUFZO0lBQzFCLE9BQU8sZ0JBQWdCLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDNUMsQ0FBQztBQUZELG9DQUVDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCwgT3BlbkNlbnN1cyBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vLyBDb2RlIHNuaXBwZXRzIGZyb20gU3RhY2tkcml2ZXIgVHJhY2UgQWdlbnRcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9Hb29nbGVDbG91ZFBsYXRmb3JtL2Nsb3VkLXRyYWNlLW5vZGVqc1xuXG5pbXBvcnQgKiBhcyBjcnlwdG8gZnJvbSAnY3J5cHRvJztcblxuY29uc3QgU1BBTl9JRF9SQU5ET01fQllURVMgPSA4O1xuXG4vLyBVc2UgdGhlIGZhc3RlciBjcnlwdG8ucmFuZG9tRmlsbFN5bmMgd2hlbiBhdmFpbGFibGUgKE5vZGUgNyspIGZhbGxpbmcgYmFjayB0b1xuLy8gdXNpbmcgY3J5cHRvLnJhbmRvbUJ5dGVzLlxuY29uc3Qgc3BhbklkQnVmZmVyID0gQnVmZmVyLmFsbG9jKFNQQU5fSURfUkFORE9NX0JZVEVTKTtcbmNvbnN0IHJhbmRvbUZpbGxTeW5jID0gY3J5cHRvLnJhbmRvbUZpbGxTeW5jO1xuY29uc3QgcmFuZG9tQnl0ZXMgPSBjcnlwdG8ucmFuZG9tQnl0ZXM7XG5jb25zdCBzcGFuUmFuZG9tQnVmZmVyID0gcmFuZG9tRmlsbFN5bmNcbiAgPyAoKSA9PiByYW5kb21GaWxsU3luYyhzcGFuSWRCdWZmZXIpXG4gIDogKCkgPT4gcmFuZG9tQnl0ZXMoU1BBTl9JRF9SQU5ET01fQllURVMpO1xuXG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tU3BhbklkKCkge1xuICByZXR1cm4gc3BhblJhbmRvbUJ1ZmZlcigpLnRvU3RyaW5nKCdoZXgnKTtcbn1cbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfM3hvZmU5YjlkIiwicGF0aCIsImhhc2giLCJnbG9iYWwiLCJGdW5jdGlvbiIsImdjdiIsImNvdmVyYWdlRGF0YSIsInN0YXRlbWVudE1hcCIsInN0YXJ0IiwibGluZSIsImNvbHVtbiIsImVuZCIsImZuTWFwIiwibmFtZSIsImRlY2wiLCJsb2MiLCJicmFuY2hNYXAiLCJ0eXBlIiwibG9jYXRpb25zIiwicyIsImYiLCJiIiwiaW5wdXRTb3VyY2VNYXAiLCJ2ZXJzaW9uIiwiZmlsZSIsInNvdXJjZXMiLCJuYW1lcyIsIm1hcHBpbmdzIiwic291cmNlc0NvbnRlbnQiLCJfY292ZXJhZ2VTY2hlbWEiLCJjb3ZlcmFnZSIsImFjdHVhbENvdmVyYWdlIiwiY3J5cHRvIiwicmVxdWlyZSIsIlNQQU5fSURfUkFORE9NX0JZVEVTIiwic3BhbklkQnVmZmVyIiwiQnVmZmVyIiwiYWxsb2MiLCJyYW5kb21GaWxsU3luYyIsInJhbmRvbUJ5dGVzIiwic3BhblJhbmRvbUJ1ZmZlciIsInJhbmRvbVNwYW5JZCIsInRvU3RyaW5nIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VybWFpdGhhL3RyYWRlbWFzdGVyL2xpYnMvbGliLWV4dGVybmFsLW9wZW5jZW5zdXMtbm9kZS9zcmMvaW50ZXJuYWwvdXRpbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDE4LCBPcGVuQ2Vuc3VzIEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8vIENvZGUgc25pcHBldHMgZnJvbSBTdGFja2RyaXZlciBUcmFjZSBBZ2VudFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL0dvb2dsZUNsb3VkUGxhdGZvcm0vY2xvdWQtdHJhY2Utbm9kZWpzXG5cbmltcG9ydCAqIGFzIGNyeXB0byBmcm9tICdjcnlwdG8nO1xuXG5jb25zdCBTUEFOX0lEX1JBTkRPTV9CWVRFUyA9IDg7XG5cbi8vIFVzZSB0aGUgZmFzdGVyIGNyeXB0by5yYW5kb21GaWxsU3luYyB3aGVuIGF2YWlsYWJsZSAoTm9kZSA3KykgZmFsbGluZyBiYWNrIHRvXG4vLyB1c2luZyBjcnlwdG8ucmFuZG9tQnl0ZXMuXG5jb25zdCBzcGFuSWRCdWZmZXIgPSBCdWZmZXIuYWxsb2MoU1BBTl9JRF9SQU5ET01fQllURVMpO1xuY29uc3QgcmFuZG9tRmlsbFN5bmMgPSBjcnlwdG8ucmFuZG9tRmlsbFN5bmM7XG5jb25zdCByYW5kb21CeXRlcyA9IGNyeXB0by5yYW5kb21CeXRlcztcbmNvbnN0IHNwYW5SYW5kb21CdWZmZXIgPSByYW5kb21GaWxsU3luY1xuICA/ICgpID0+IHJhbmRvbUZpbGxTeW5jKHNwYW5JZEJ1ZmZlcilcbiAgOiAoKSA9PiByYW5kb21CeXRlcyhTUEFOX0lEX1JBTkRPTV9CWVRFUyk7XG5cbmV4cG9ydCBmdW5jdGlvbiByYW5kb21TcGFuSWQoKSB7XG4gIHJldHVybiBzcGFuUmFuZG9tQnVmZmVyKCkudG9TdHJpbmcoJ2hleCcpO1xufVxuIl0sIm1hcHBpbmdzIjoiYUFBQTs7Ozs7Ozs7Ozs7Ozs7R0FBQSxTQUFBQSxjQUFBLE1BQUFDLElBQUEsNEZBQUFDLElBQUEsZ0RBQUFDLE1BQUEsS0FBQUMsUUFBQSxzQkFBQUMsR0FBQSxvQkFBQUMsWUFBQSxFQUFBTCxJQUFBLHdGQUFBTSxZQUFBLE9BQUFDLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLE9BQUFFLEtBQUEsT0FBQUMsSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxLQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLE1BQUFELElBQUEsVUFBQUksSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxLQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLE1BQUFELElBQUEsVUFBQUksSUFBQSxnQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxNQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFELElBQUEsTUFBQU8sU0FBQSxPQUFBRCxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLE1BQUFPLElBQUEsYUFBQUMsU0FBQSxHQUFBVixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxPQUFBRixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxPQUFBRCxJQUFBLE1BQUFVLENBQUEsNkVBQUFDLENBQUEscUJBQUFDLENBQUEsYUFBQUMsY0FBQSxFQUFBQyxPQUFBLEdBQUFDLElBQUEsd0ZBQUFDLE9BQUEsMEZBQUFDLEtBQUEsSUFBQUMsUUFBQSwrZUFBQUMsY0FBQSxzd0NBQUFDLGVBQUEsNENBQUEzQixJQUFBLGlEQUFBNEIsUUFBQSxDQUFBM0IsTUFBQSxDQUFBRSxHQUFBLElBQUFGLE1BQUEsQ0FBQUUsR0FBQSxVQUFBeUIsUUFBQSxDQUFBN0IsSUFBQSxHQUFBNkIsUUFBQSxDQUFBN0IsSUFBQSxFQUFBQyxJQUFBLEdBQUFBLElBQUEsRUFBQTRCLFFBQUEsQ0FBQTdCLElBQUEsRUFBQUssWUFBQSxNQUFBeUIsY0FBQSxDQUFBRCxRQUFBLENBQUE3QixJQUFBLEdBY0c7QUFBQUQsYUFBQSxTQUFBQSxDQUFBLFNBQUErQixjQUFBLFdBQUFBLGNBQUEsRUFBQS9CLGFBQUEsR0FBQUEsYUFBQSxHQUFBbUIsQ0FBQSxNLDRHQUVIO0FBQ0E7QUFFQSxNQUFBYSxNQUFBLEVBQUFoQyxhQUFBLEdBQUFtQixDQUFBLE1BQUFjLE9BQUEsWUFFQSxLQUFNLENBQUFDLG9CQUFvQixFQUFBbEMsYUFBQSxHQUFBbUIsQ0FBQSxNQUFHLENBQUMsRUFFOUI7QUFDQTtBQUNBLEtBQU0sQ0FBQWdCLFlBQVksRUFBQW5DLGFBQUEsR0FBQW1CLENBQUEsTUFBR2lCLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDSCxvQkFBb0IsQ0FBQyxFQUN2RCxLQUFNLENBQUFJLGNBQWMsRUFBQXRDLGFBQUEsR0FBQW1CLENBQUEsTUFBR2EsTUFBTSxDQUFDTSxjQUFjLEVBQzVDLEtBQU0sQ0FBQUMsV0FBVyxFQUFBdkMsYUFBQSxHQUFBbUIsQ0FBQSxNQUFHYSxNQUFNLENBQUNPLFdBQVcsRUFDdEMsS0FBTSxDQUFBQyxnQkFBZ0IsRUFBQXhDLGFBQUEsR0FBQW1CLENBQUEsTUFBR21CLGNBQWMsRUFBQXRDLGFBQUEsR0FBQXFCLENBQUEsU0FDbkMsSUFBTSxDQUFBckIsYUFBQSxHQUFBb0IsQ0FBQSxNQUFBcEIsYUFBQSxHQUFBbUIsQ0FBQSxhQUFBbUIsY0FBYyxDQUFDSCxZQUFZLENBQUMsQ0FBRCxDQUFDLEdBQUFuQyxhQUFBLEdBQUFxQixDQUFBLFNBQ2xDLElBQU0sQ0FBQXJCLGFBQUEsR0FBQW9CLENBQUEsTUFBQXBCLGFBQUEsR0FBQW1CLENBQUEsYUFBQW9CLFdBQVcsQ0FBQ0wsb0JBQW9CLENBQUMsQ0FBRCxDQUFDLEdBRTNDLFFBQWdCLENBQUFPLFlBQVlBLENBQUEsRUFBQXpDLGFBQUEsR0FBQW9CLENBQUEsTUFBQXBCLGFBQUEsR0FBQW1CLENBQUEsT0FDMUIsTUFBTyxDQUFBcUIsZ0JBQWdCLEVBQUUsQ0FBQ0UsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUMzQyxDQUFDMUMsYUFBQSxHQUFBbUIsQ0FBQSxPQUZEd0IsT0FBQSxDQUFBRixZQUFBLENBQUFBLFlBQUEsQyJ9