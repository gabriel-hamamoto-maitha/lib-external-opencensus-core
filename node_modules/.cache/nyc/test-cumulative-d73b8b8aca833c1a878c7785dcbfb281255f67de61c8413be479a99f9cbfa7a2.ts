"use strict";/**
 * Copyright 2019, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_t4qllvg67(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-cumulative.ts";var hash="591b33205dcae42867bcd95878eb7796f61fd732";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-cumulative.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:15},end:{line:18,column:32}},"2":{start:{line:19,column:20},end:{line:19,column:54}},"3":{start:{line:20,column:21},end:{line:20,column:68}},"4":{start:{line:21,column:16},end:{line:21,column:54}},"5":{start:{line:22,column:20},end:{line:22,column:33}},"6":{start:{line:23,column:27},end:{line:23,column:47}},"7":{start:{line:24,column:13},end:{line:24,column:16}},"8":{start:{line:25,column:25},end:{line:25,column:70}},"9":{start:{line:26,column:26},end:{line:26,column:72}},"10":{start:{line:27,column:19},end:{line:27,column:57}},"11":{start:{line:28,column:25},end:{line:28,column:43}},"12":{start:{line:29,column:25},end:{line:29,column:43}},"13":{start:{line:30,column:27},end:{line:30,column:63}},"14":{start:{line:31,column:26},end:{line:33,column:1}},"15":{start:{line:34,column:30},end:{line:34,column:39}},"16":{start:{line:35,column:24},end:{line:35,column:33}},"17":{start:{line:36,column:0},end:{line:36,column:82}},"18":{start:{line:37,column:0},end:{line:311,column:3}},"19":{start:{line:39,column:25},end:{line:39,column:39}},"20":{start:{line:40,column:22},end:{line:40,column:30}},"21":{start:{line:41,column:23},end:{line:41,column:58}},"22":{start:{line:42,column:37},end:{line:48,column:5}},"23":{start:{line:49,column:4},end:{line:56,column:7}},"24":{start:{line:50,column:8},end:{line:50,column:139}},"25":{start:{line:52,column:8},end:{line:52,column:42}},"26":{start:{line:52,column:31},end:{line:52,column:41}},"27":{start:{line:53,column:8},end:{line:53,column:39}},"28":{start:{line:53,column:25},end:{line:53,column:38}},"29":{start:{line:55,column:8},end:{line:55,column:51}},"30":{start:{line:57,column:4},end:{line:62,column:7}},"31":{start:{line:58,column:8},end:{line:58,column:38}},"32":{start:{line:59,column:8},end:{line:59,column:29}},"33":{start:{line:61,column:8},end:{line:61,column:57}},"34":{start:{line:63,column:4},end:{line:163,column:7}},"35":{start:{line:64,column:8},end:{line:96,column:11}},"36":{start:{line:65,column:26},end:{line:65,column:74}},"37":{start:{line:66,column:12},end:{line:66,column:24}},"38":{start:{line:67,column:25},end:{line:67,column:45}},"39":{start:{line:68,column:12},end:{line:68,column:80}},"40":{start:{line:69,column:12},end:{line:69,column:60}},"41":{start:{line:70,column:12},end:{line:76,column:15}},"42":{start:{line:78,column:12},end:{line:78,column:25}},"43":{start:{line:79,column:27},end:{line:79,column:75}},"44":{start:{line:80,column:12},end:{line:80,column:25}},"45":{start:{line:81,column:12},end:{line:81,column:42}},"46":{start:{line:82,column:12},end:{line:82,column:80}},"47":{start:{line:83,column:12},end:{line:83,column:60}},"48":{start:{line:84,column:12},end:{line:95,column:15}},"49":{start:{line:97,column:8},end:{line:101,column:11}},"50":{start:{line:98,column:12},end:{line:100,column:76}},"51":{start:{line:99,column:16},end:{line:99,column:67}},"52":{start:{line:102,column:8},end:{line:107,column:11}},"53":{start:{line:103,column:26},end:{line:103,column:74}},"54":{start:{line:104,column:12},end:{line:106,column:78}},"55":{start:{line:105,column:16},end:{line:105,column:31}},"56":{start:{line:108,column:8},end:{line:113,column:11}},"57":{start:{line:109,column:26},end:{line:109,column:74}},"58":{start:{line:110,column:12},end:{line:112,column:64}},"59":{start:{line:111,column:16},end:{line:111,column:31}},"60":{start:{line:114,column:8},end:{line:119,column:11}},"61":{start:{line:115,column:26},end:{line:115,column:74}},"62":{start:{line:116,column:12},end:{line:118,column:69}},"63":{start:{line:117,column:16},end:{line:117,column:35}},"64":{start:{line:120,column:8},end:{line:135,column:11}},"65":{start:{line:121,column:26},end:{line:121,column:74}},"66":{start:{line:122,column:12},end:{line:122,column:26}},"67":{start:{line:123,column:12},end:{line:123,column:26}},"68":{start:{line:124,column:12},end:{line:124,column:24}},"69":{start:{line:125,column:27},end:{line:125,column:47}},"70":{start:{line:126,column:12},end:{line:126,column:80}},"71":{start:{line:127,column:12},end:{line:127,column:60}},"72":{start:{line:128,column:12},end:{line:134,column:15}},"73":{start:{line:136,column:8},end:{line:162,column:11}},"74":{start:{line:137,column:26},end:{line:137,column:74}},"75":{start:{line:138,column:12},end:{line:138,column:26}},"76":{start:{line:139,column:25},end:{line:139,column:45}},"77":{start:{line:140,column:12},end:{line:140,column:80}},"78":{start:{line:141,column:12},end:{line:141,column:60}},"79":{start:{line:142,column:12},end:{line:148,column:15}},"80":{start:{line:150,column:27},end:{line:150,column:75}},"81":{start:{line:151,column:12},end:{line:151,column:27}},"82":{start:{line:152,column:12},end:{line:152,column:42}},"83":{start:{line:153,column:12},end:{line:153,column:80}},"84":{start:{line:154,column:12},end:{line:154,column:60}},"85":{start:{line:155,column:12},end:{line:161,column:15}},"86":{start:{line:164,column:4},end:{line:285,column:7}},"87":{start:{line:165,column:8},end:{line:185,column:11}},"88":{start:{line:166,column:26},end:{line:166,column:57}},"89":{start:{line:167,column:12},end:{line:167,column:26}},"90":{start:{line:169,column:12},end:{line:169,column:46}},"91":{start:{line:169,column:35},end:{line:169,column:45}},"92":{start:{line:170,column:12},end:{line:170,column:43}},"93":{start:{line:170,column:29},end:{line:170,column:42}},"94":{start:{line:172,column:12},end:{line:172,column:55}},"95":{start:{line:173,column:27},end:{line:173,column:47}},"96":{start:{line:174,column:12},end:{line:174,column:80}},"97":{start:{line:175,column:12},end:{line:175,column:60}},"98":{start:{line:176,column:12},end:{line:184,column:15}},"99":{start:{line:186,column:8},end:{line:203,column:11}},"100":{start:{line:187,column:12},end:{line:190,column:38}},"101":{start:{line:191,column:26},end:{line:194,column:14}},"102":{start:{line:195,column:12},end:{line:195,column:27}},"103":{start:{line:196,column:27},end:{line:199,column:14}},"104":{start:{line:200,column:12},end:{line:200,column:28}},"105":{start:{line:201,column:27},end:{line:201,column:47}},"106":{start:{line:202,column:12},end:{line:202,column:60}},"107":{start:{line:204,column:8},end:{line:233,column:11}},"108":{start:{line:205,column:12},end:{line:208,column:32}},"109":{start:{line:209,column:26},end:{line:212,column:14}},"110":{start:{line:213,column:12},end:{line:213,column:27}},"111":{start:{line:214,column:27},end:{line:214,column:47}},"112":{start:{line:215,column:12},end:{line:215,column:58}},"113":{start:{line:216,column:12},end:{line:216,column:60}},"114":{start:{line:217,column:12},end:{line:221,column:15}},"115":{start:{line:222,column:12},end:{line:232,column:15}},"116":{start:{line:234,column:8},end:{line:257,column:11}},"117":{start:{line:235,column:12},end:{line:239,column:38}},"118":{start:{line:240,column:26},end:{line:240,column:57}},"119":{start:{line:241,column:12},end:{line:241,column:27}},"120":{start:{line:242,column:27},end:{line:242,column:47}},"121":{start:{line:243,column:12},end:{line:243,column:74}},"122":{start:{line:244,column:12},end:{line:244,column:62}},"123":{start:{line:245,column:12},end:{line:245,column:60}},"124":{start:{line:246,column:12},end:{line:256,column:15}},"125":{start:{line:258,column:8},end:{line:284,column:11}},"126":{start:{line:259,column:26},end:{line:259,column:57}},"127":{start:{line:260,column:12},end:{line:260,column:27}},"128":{start:{line:261,column:25},end:{line:261,column:45}},"129":{start:{line:262,column:12},end:{line:262,column:80}},"130":{start:{line:263,column:12},end:{line:263,column:60}},"131":{start:{line:264,column:12},end:{line:270,column:15}},"132":{start:{line:272,column:27},end:{line:272,column:58}},"133":{start:{line:273,column:12},end:{line:273,column:28}},"134":{start:{line:274,column:12},end:{line:274,column:42}},"135":{start:{line:275,column:12},end:{line:275,column:80}},"136":{start:{line:276,column:12},end:{line:276,column:60}},"137":{start:{line:277,column:12},end:{line:283,column:15}},"138":{start:{line:286,column:4},end:{line:296,column:7}},"139":{start:{line:287,column:8},end:{line:295,column:11}},"140":{start:{line:288,column:26},end:{line:288,column:74}},"141":{start:{line:289,column:12},end:{line:289,column:26}},"142":{start:{line:290,column:25},end:{line:290,column:45}},"143":{start:{line:291,column:12},end:{line:291,column:80}},"144":{start:{line:292,column:12},end:{line:292,column:56}},"145":{start:{line:293,column:12},end:{line:293,column:42}},"146":{start:{line:294,column:12},end:{line:294,column:49}},"147":{start:{line:297,column:4},end:{line:310,column:7}},"148":{start:{line:298,column:8},end:{line:309,column:11}},"149":{start:{line:299,column:26},end:{line:299,column:74}},"150":{start:{line:300,column:12},end:{line:300,column:26}},"151":{start:{line:301,column:27},end:{line:301,column:75}},"152":{start:{line:302,column:12},end:{line:302,column:27}},"153":{start:{line:303,column:25},end:{line:303,column:45}},"154":{start:{line:304,column:12},end:{line:304,column:80}},"155":{start:{line:305,column:12},end:{line:305,column:60}},"156":{start:{line:306,column:12},end:{line:306,column:29}},"157":{start:{line:307,column:12},end:{line:307,column:42}},"158":{start:{line:308,column:12},end:{line:308,column:49}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:37,column:23},end:{line:37,column:24}},loc:{start:{line:37,column:29},end:{line:311,column:1}},line:37},"1":{name:"(anonymous_1)",decl:{start:{line:49,column:15},end:{line:49,column:16}},loc:{start:{line:49,column:21},end:{line:56,column:5}},line:49},"2":{name:"(anonymous_2)",decl:{start:{line:52,column:25},end:{line:52,column:26}},loc:{start:{line:52,column:31},end:{line:52,column:41}},line:52},"3":{name:"(anonymous_3)",decl:{start:{line:53,column:19},end:{line:53,column:20}},loc:{start:{line:53,column:25},end:{line:53,column:38}},line:53},"4":{name:"(anonymous_4)",decl:{start:{line:57,column:14},end:{line:57,column:15}},loc:{start:{line:57,column:20},end:{line:62,column:5}},line:57},"5":{name:"(anonymous_5)",decl:{start:{line:63,column:40},end:{line:63,column:41}},loc:{start:{line:63,column:46},end:{line:163,column:5}},line:63},"6":{name:"(anonymous_6)",decl:{start:{line:64,column:37},end:{line:64,column:38}},loc:{start:{line:64,column:43},end:{line:96,column:9}},line:64},"7":{name:"(anonymous_7)",decl:{start:{line:97,column:81},end:{line:97,column:82}},loc:{start:{line:97,column:87},end:{line:101,column:9}},line:97},"8":{name:"(anonymous_8)",decl:{start:{line:98,column:26},end:{line:98,column:27}},loc:{start:{line:98,column:32},end:{line:100,column:13}},line:98},"9":{name:"(anonymous_9)",decl:{start:{line:102,column:68},end:{line:102,column:69}},loc:{start:{line:102,column:74},end:{line:107,column:9}},line:102},"10":{name:"(anonymous_10)",decl:{start:{line:104,column:26},end:{line:104,column:27}},loc:{start:{line:104,column:32},end:{line:106,column:13}},line:104},"11":{name:"(anonymous_11)",decl:{start:{line:108,column:62},end:{line:108,column:63}},loc:{start:{line:108,column:68},end:{line:113,column:9}},line:108},"12":{name:"(anonymous_12)",decl:{start:{line:110,column:26},end:{line:110,column:27}},loc:{start:{line:110,column:32},end:{line:112,column:13}},line:110},"13":{name:"(anonymous_13)",decl:{start:{line:114,column:73},end:{line:114,column:74}},loc:{start:{line:114,column:79},end:{line:119,column:9}},line:114},"14":{name:"(anonymous_14)",decl:{start:{line:116,column:26},end:{line:116,column:27}},loc:{start:{line:116,column:32},end:{line:118,column:13}},line:116},"15":{name:"(anonymous_15)",decl:{start:{line:120,column:43},end:{line:120,column:44}},loc:{start:{line:120,column:49},end:{line:135,column:9}},line:120},"16":{name:"(anonymous_16)",decl:{start:{line:136,column:54},end:{line:136,column:55}},loc:{start:{line:136,column:60},end:{line:162,column:9}},line:136},"17":{name:"(anonymous_17)",decl:{start:{line:164,column:39},end:{line:164,column:40}},loc:{start:{line:164,column:45},end:{line:285,column:5}},line:164},"18":{name:"(anonymous_18)",decl:{start:{line:165,column:51},end:{line:165,column:52}},loc:{start:{line:165,column:57},end:{line:185,column:9}},line:165},"19":{name:"(anonymous_19)",decl:{start:{line:169,column:29},end:{line:169,column:30}},loc:{start:{line:169,column:35},end:{line:169,column:45}},line:169},"20":{name:"(anonymous_20)",decl:{start:{line:170,column:23},end:{line:170,column:24}},loc:{start:{line:170,column:29},end:{line:170,column:42}},line:170},"21":{name:"(anonymous_21)",decl:{start:{line:186,column:68},end:{line:186,column:69}},loc:{start:{line:186,column:74},end:{line:203,column:9}},line:186},"22":{name:"(anonymous_22)",decl:{start:{line:204,column:41},end:{line:204,column:42}},loc:{start:{line:204,column:47},end:{line:233,column:9}},line:204},"23":{name:"(anonymous_23)",decl:{start:{line:234,column:58},end:{line:234,column:59}},loc:{start:{line:234,column:64},end:{line:257,column:9}},line:234},"24":{name:"(anonymous_24)",decl:{start:{line:258,column:63},end:{line:258,column:64}},loc:{start:{line:258,column:69},end:{line:284,column:9}},line:258},"25":{name:"(anonymous_25)",decl:{start:{line:286,column:35},end:{line:286,column:36}},loc:{start:{line:286,column:41},end:{line:296,column:5}},line:286},"26":{name:"(anonymous_26)",decl:{start:{line:287,column:39},end:{line:287,column:40}},loc:{start:{line:287,column:45},end:{line:295,column:9}},line:287},"27":{name:"(anonymous_27)",decl:{start:{line:297,column:24},end:{line:297,column:25}},loc:{start:{line:297,column:30},end:{line:310,column:5}},line:297},"28":{name:"(anonymous_28)",decl:{start:{line:298,column:42},end:{line:298,column:43}},loc:{start:{line:298,column:48},end:{line:309,column:9}},line:298}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0},b:{},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-cumulative.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-cumulative.ts"],names:[],mappings:"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",sourcesContent:["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport { TEST_ONLY } from '../src/common/time-util';\nimport { Cumulative } from '../src/metrics/cumulative/cumulative';\nimport {\n  LabelKey,\n  LabelValue,\n  MetricDescriptorType,\n  Timestamp,\n} from '../src/metrics/export/types';\n\nconst METRIC_NAME = 'metric-name';\nconst METRIC_DESCRIPTION = 'metric-description';\nconst UNIT = '1';\nconst CUMULATIVE_INT64 = MetricDescriptorType.CUMULATIVE_INT64;\nconst CUMULATIVE_DOUBLE = MetricDescriptorType.CUMULATIVE_DOUBLE;\nconst LABEL_KEYS: LabelKey[] = [{ key: 'code', description: 'desc' }];\nconst LABEL_VALUES_200: LabelValue[] = [{ value: '200' }];\nconst LABEL_VALUES_400: LabelValue[] = [{ value: '400' }];\nconst LABEL_VALUES_EXRTA: LabelValue[] = [{ value: '200' }, { value: '400' }];\nconst UNSET_LABEL_VALUE: LabelValue = {\n  value: null,\n};\nconst EMPTY_CONSTANT_LABELS = new Map();\nconst CONSTANT_LABELS = new Map();\nCONSTANT_LABELS.set(\n  { key: 'host', description: 'host' },\n  { value: 'localhost' }\n);\n\ndescribe('CUMULATIVE', () => {\n  let instance: Cumulative;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n  const expectedMetricDescriptor = {\n    name: METRIC_NAME,\n    description: METRIC_DESCRIPTION,\n    unit: UNIT,\n    type: CUMULATIVE_INT64,\n    labelKeys: LABEL_KEYS,\n  };\n\n  beforeEach(() => {\n    instance = new Cumulative(\n      METRIC_NAME,\n      METRIC_DESCRIPTION,\n      UNIT,\n      CUMULATIVE_INT64,\n      LABEL_KEYS,\n      EMPTY_CONSTANT_LABELS\n    );\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  describe('getOrCreateTimeSeries()', () => {\n    it('should return a Metric', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      point.inc();\n\n      let metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 1, timestamp: mockedTime }],\n          startTimestamp: mockedTime,\n        },\n      ]);\n\n      // inc value and create new timeseries.\n      point.inc(5);\n      const point1 = instance.getOrCreateTimeSeries(LABEL_VALUES_400);\n      point1.inc();\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 2);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 6, timestamp: mockedTime }],\n          startTimestamp: mockedTime,\n        },\n        {\n          labelValues: LABEL_VALUES_400,\n          points: [{ value: 1, timestamp: mockedTime }],\n          startTimestamp: mockedTime,\n        },\n      ]);\n    });\n\n    it('should throw an error when the keys and values dont have same size', () => {\n      assert.throws(() => {\n        instance.getOrCreateTimeSeries(LABEL_VALUES_EXRTA);\n      }, /^Error: Label Keys and Label Values don't have same size$/);\n    });\n\n    it('should throw an error when the inc number is negative', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      assert.throws(() => {\n        point.inc(-10);\n      }, /^Error: It is not possible to decrease a cumulative metric$/);\n    });\n\n    it('should throw an error when the inc input is NaN', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      assert.throws(() => {\n        point.inc(NaN);\n      }, /^TypeError: Value is not a valid number: NaN$/);\n    });\n\n    it('should throw a TypeError when the inc number is not finite', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      assert.throws(() => {\n        point.inc(100 / 0);\n      }, /^TypeError: Value is not a valid number: Infinity$/);\n    });\n\n    it('should reset the point value', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      point.inc(10);\n      point.reset();\n      point.inc();\n      const metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 1, timestamp: mockedTime }],\n          startTimestamp: mockedTime,\n        },\n      ]);\n    });\n\n    it('should not create same timeseries again', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      point.inc(10);\n      let metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 10, timestamp: mockedTime }],\n          startTimestamp: mockedTime,\n        },\n      ]);\n      // create timeseries with same labels.\n      const point1 = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      point1.inc(30);\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 40, timestamp: mockedTime }],\n          startTimestamp: mockedTime,\n        },\n      ]);\n    });\n  });\n\n  describe('getDefaultTimeSeries()', () => {\n    it('should create new default timeseries', () => {\n      const point = instance.getDefaultTimeSeries();\n      point.inc(10);\n\n      // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n      process.hrtime = () => [100, 1e7];\n      Date.now = () => 1480000000000;\n      // Force the clock to recalibrate the time offset with the mocked time\n      TEST_ONLY.setHrtimeReference();\n\n      const metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: [UNSET_LABEL_VALUE],\n          points: [\n            { value: 10, timestamp: { seconds: 1480000100, nanos: 1e7 } },\n          ],\n          startTimestamp: mockedTime,\n        },\n      ]);\n    });\n\n    it('should return same timeseries for interchanged labels', () => {\n      instance = new Cumulative(\n        METRIC_NAME,\n        METRIC_DESCRIPTION,\n        UNIT,\n        CUMULATIVE_INT64,\n        [\n          { key: 'k1', description: 'desc' },\n          { key: 'k2', description: 'desc' },\n        ],\n        EMPTY_CONSTANT_LABELS\n      );\n      const point = instance.getOrCreateTimeSeries([\n        { value: '200' },\n        { value: '400' },\n      ]);\n      point.inc(200);\n      const point1 = instance.getOrCreateTimeSeries([\n        { value: '400' },\n        { value: '200' },\n      ]);\n      point1.inc(400);\n      const metric = instance.getMetric();\n      assert.strictEqual(metric!.timeseries.length, 1);\n    });\n\n    it('should add constant labels', () => {\n      instance = new Cumulative(\n        METRIC_NAME,\n        METRIC_DESCRIPTION,\n        UNIT,\n        CUMULATIVE_DOUBLE,\n        [\n          { key: 'k1', description: 'desc' },\n          { key: 'k2', description: 'desc' },\n        ],\n        CONSTANT_LABELS\n      );\n      const point = instance.getOrCreateTimeSeries([\n        { value: '200' },\n        { value: '400' },\n      ]);\n      point.inc(200);\n      const metric = instance.getMetric();\n      assert.strictEqual(metric!.descriptor.type, 5);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.descriptor.labelKeys, [\n        { key: 'k1', description: 'desc' },\n        { key: 'k2', description: 'desc' },\n        { key: 'host', description: 'host' },\n      ]);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: [\n            { value: '200' },\n            { value: '400' },\n            { value: 'localhost' },\n          ],\n          points: [{ value: 200, timestamp: mockedTime }],\n          startTimestamp: mockedTime,\n        },\n      ]);\n    });\n\n    it('should create same labelValues as labelKeys', () => {\n      instance = new Cumulative(\n        METRIC_NAME,\n        METRIC_DESCRIPTION,\n        UNIT,\n        CUMULATIVE_DOUBLE,\n        [\n          { key: 'k1', description: 'desc' },\n          { key: 'k2', description: 'desc' },\n          { key: 'k3', description: 'desc' },\n        ],\n        EMPTY_CONSTANT_LABELS\n      );\n      const point = instance.getDefaultTimeSeries();\n      point.inc(200);\n      const metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor.labelKeys.length, 3);\n      assert.deepStrictEqual(metric!.descriptor.type, 5);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: [\n            UNSET_LABEL_VALUE,\n            UNSET_LABEL_VALUE,\n            UNSET_LABEL_VALUE,\n          ],\n          points: [{ value: 200, timestamp: mockedTime }],\n          startTimestamp: mockedTime,\n        },\n      ]);\n    });\n\n    it('should use previously created default timeseries', () => {\n      const point = instance.getDefaultTimeSeries();\n      point.inc(300);\n      let metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: [UNSET_LABEL_VALUE],\n          points: [{ value: 300, timestamp: mockedTime }],\n          startTimestamp: mockedTime,\n        },\n      ]);\n      // get default timeseries again.\n      const point1 = instance.getDefaultTimeSeries();\n      point1.inc(400);\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: [UNSET_LABEL_VALUE],\n          points: [{ value: 700, timestamp: mockedTime }],\n          startTimestamp: mockedTime,\n        },\n      ]);\n    });\n  });\n\n  describe('removeTimeSeries()', () => {\n    it('should remove TimeSeries', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      point.inc(10);\n      let metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      instance.removeTimeSeries(LABEL_VALUES_200);\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric, null);\n    });\n  });\n\n  describe('clear()', () => {\n    it('should clear all TimeSeries', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      point.inc(10);\n      const point1 = instance.getOrCreateTimeSeries(LABEL_VALUES_400);\n      point1.inc(10);\n      let metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 2);\n      instance.clear();\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric, null);\n    });\n  });\n});\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"591b33205dcae42867bcd95878eb7796f61fd732"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_t4qllvg67=function(){return actualCoverage;};}return actualCoverage;}cov_t4qllvg67();cov_t4qllvg67().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const assert=(cov_t4qllvg67().s[1]++,require("assert"));const time_util_1=(cov_t4qllvg67().s[2]++,require("../src/common/time-util"));const cumulative_1=(cov_t4qllvg67().s[3]++,require("../src/metrics/cumulative/cumulative"));const types_1=(cov_t4qllvg67().s[4]++,require("../src/metrics/export/types"));const METRIC_NAME=(cov_t4qllvg67().s[5]++,'metric-name');const METRIC_DESCRIPTION=(cov_t4qllvg67().s[6]++,'metric-description');const UNIT=(cov_t4qllvg67().s[7]++,'1');const CUMULATIVE_INT64=(cov_t4qllvg67().s[8]++,types_1.MetricDescriptorType.CUMULATIVE_INT64);const CUMULATIVE_DOUBLE=(cov_t4qllvg67().s[9]++,types_1.MetricDescriptorType.CUMULATIVE_DOUBLE);const LABEL_KEYS=(cov_t4qllvg67().s[10]++,[{key:'code',description:'desc'}]);const LABEL_VALUES_200=(cov_t4qllvg67().s[11]++,[{value:'200'}]);const LABEL_VALUES_400=(cov_t4qllvg67().s[12]++,[{value:'400'}]);const LABEL_VALUES_EXRTA=(cov_t4qllvg67().s[13]++,[{value:'200'},{value:'400'}]);const UNSET_LABEL_VALUE=(cov_t4qllvg67().s[14]++,{value:null});const EMPTY_CONSTANT_LABELS=(cov_t4qllvg67().s[15]++,new Map());const CONSTANT_LABELS=(cov_t4qllvg67().s[16]++,new Map());cov_t4qllvg67().s[17]++;CONSTANT_LABELS.set({key:'host',description:'host'},{value:'localhost'});cov_t4qllvg67().s[18]++;describe('CUMULATIVE',()=>{cov_t4qllvg67().f[0]++;let instance;const realHrtimeFn=(cov_t4qllvg67().s[19]++,process.hrtime);const realNowFn=(cov_t4qllvg67().s[20]++,Date.now);const mockedTime=(cov_t4qllvg67().s[21]++,{seconds:1450000100,nanos:1e7});const expectedMetricDescriptor=(cov_t4qllvg67().s[22]++,{name:METRIC_NAME,description:METRIC_DESCRIPTION,unit:UNIT,type:CUMULATIVE_INT64,labelKeys:LABEL_KEYS});cov_t4qllvg67().s[23]++;beforeEach(()=>{cov_t4qllvg67().f[1]++;cov_t4qllvg67().s[24]++;instance=new cumulative_1.Cumulative(METRIC_NAME,METRIC_DESCRIPTION,UNIT,CUMULATIVE_INT64,LABEL_KEYS,EMPTY_CONSTANT_LABELS);// @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message
cov_t4qllvg67().s[25]++;process.hrtime=()=>{cov_t4qllvg67().f[2]++;cov_t4qllvg67().s[26]++;return[100,1e7];};cov_t4qllvg67().s[27]++;Date.now=()=>{cov_t4qllvg67().f[3]++;cov_t4qllvg67().s[28]++;return 1450000000000;};// Force the clock to recalibrate the time offset with the mocked time
cov_t4qllvg67().s[29]++;time_util_1.TEST_ONLY.setHrtimeReference();});cov_t4qllvg67().s[30]++;afterEach(()=>{cov_t4qllvg67().f[4]++;cov_t4qllvg67().s[31]++;process.hrtime=realHrtimeFn;cov_t4qllvg67().s[32]++;Date.now=realNowFn;// Reset the hrtime reference so that it uses a real clock again.
cov_t4qllvg67().s[33]++;time_util_1.TEST_ONLY.resetHrtimeFunctionCache();});cov_t4qllvg67().s[34]++;describe('getOrCreateTimeSeries()',()=>{cov_t4qllvg67().f[5]++;cov_t4qllvg67().s[35]++;it('should return a Metric',()=>{cov_t4qllvg67().f[6]++;const point=(cov_t4qllvg67().s[36]++,instance.getOrCreateTimeSeries(LABEL_VALUES_200));cov_t4qllvg67().s[37]++;point.inc();let metric=(cov_t4qllvg67().s[38]++,instance.getMetric());cov_t4qllvg67().s[39]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_t4qllvg67().s[40]++;assert.strictEqual(metric.timeseries.length,1);cov_t4qllvg67().s[41]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:LABEL_VALUES_200,points:[{value:1,timestamp:mockedTime}],startTimestamp:mockedTime}]);// inc value and create new timeseries.
cov_t4qllvg67().s[42]++;point.inc(5);const point1=(cov_t4qllvg67().s[43]++,instance.getOrCreateTimeSeries(LABEL_VALUES_400));cov_t4qllvg67().s[44]++;point1.inc();cov_t4qllvg67().s[45]++;metric=instance.getMetric();cov_t4qllvg67().s[46]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_t4qllvg67().s[47]++;assert.strictEqual(metric.timeseries.length,2);cov_t4qllvg67().s[48]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:LABEL_VALUES_200,points:[{value:6,timestamp:mockedTime}],startTimestamp:mockedTime},{labelValues:LABEL_VALUES_400,points:[{value:1,timestamp:mockedTime}],startTimestamp:mockedTime}]);});cov_t4qllvg67().s[49]++;it('should throw an error when the keys and values dont have same size',()=>{cov_t4qllvg67().f[7]++;cov_t4qllvg67().s[50]++;assert.throws(()=>{cov_t4qllvg67().f[8]++;cov_t4qllvg67().s[51]++;instance.getOrCreateTimeSeries(LABEL_VALUES_EXRTA);},/^Error: Label Keys and Label Values don't have same size$/);});cov_t4qllvg67().s[52]++;it('should throw an error when the inc number is negative',()=>{cov_t4qllvg67().f[9]++;const point=(cov_t4qllvg67().s[53]++,instance.getOrCreateTimeSeries(LABEL_VALUES_200));cov_t4qllvg67().s[54]++;assert.throws(()=>{cov_t4qllvg67().f[10]++;cov_t4qllvg67().s[55]++;point.inc(-10);},/^Error: It is not possible to decrease a cumulative metric$/);});cov_t4qllvg67().s[56]++;it('should throw an error when the inc input is NaN',()=>{cov_t4qllvg67().f[11]++;const point=(cov_t4qllvg67().s[57]++,instance.getOrCreateTimeSeries(LABEL_VALUES_200));cov_t4qllvg67().s[58]++;assert.throws(()=>{cov_t4qllvg67().f[12]++;cov_t4qllvg67().s[59]++;point.inc(NaN);},/^TypeError: Value is not a valid number: NaN$/);});cov_t4qllvg67().s[60]++;it('should throw a TypeError when the inc number is not finite',()=>{cov_t4qllvg67().f[13]++;const point=(cov_t4qllvg67().s[61]++,instance.getOrCreateTimeSeries(LABEL_VALUES_200));cov_t4qllvg67().s[62]++;assert.throws(()=>{cov_t4qllvg67().f[14]++;cov_t4qllvg67().s[63]++;point.inc(100/0);},/^TypeError: Value is not a valid number: Infinity$/);});cov_t4qllvg67().s[64]++;it('should reset the point value',()=>{cov_t4qllvg67().f[15]++;const point=(cov_t4qllvg67().s[65]++,instance.getOrCreateTimeSeries(LABEL_VALUES_200));cov_t4qllvg67().s[66]++;point.inc(10);cov_t4qllvg67().s[67]++;point.reset();cov_t4qllvg67().s[68]++;point.inc();const metric=(cov_t4qllvg67().s[69]++,instance.getMetric());cov_t4qllvg67().s[70]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_t4qllvg67().s[71]++;assert.strictEqual(metric.timeseries.length,1);cov_t4qllvg67().s[72]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:LABEL_VALUES_200,points:[{value:1,timestamp:mockedTime}],startTimestamp:mockedTime}]);});cov_t4qllvg67().s[73]++;it('should not create same timeseries again',()=>{cov_t4qllvg67().f[16]++;const point=(cov_t4qllvg67().s[74]++,instance.getOrCreateTimeSeries(LABEL_VALUES_200));cov_t4qllvg67().s[75]++;point.inc(10);let metric=(cov_t4qllvg67().s[76]++,instance.getMetric());cov_t4qllvg67().s[77]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_t4qllvg67().s[78]++;assert.strictEqual(metric.timeseries.length,1);cov_t4qllvg67().s[79]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:LABEL_VALUES_200,points:[{value:10,timestamp:mockedTime}],startTimestamp:mockedTime}]);// create timeseries with same labels.
const point1=(cov_t4qllvg67().s[80]++,instance.getOrCreateTimeSeries(LABEL_VALUES_200));cov_t4qllvg67().s[81]++;point1.inc(30);cov_t4qllvg67().s[82]++;metric=instance.getMetric();cov_t4qllvg67().s[83]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_t4qllvg67().s[84]++;assert.strictEqual(metric.timeseries.length,1);cov_t4qllvg67().s[85]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:LABEL_VALUES_200,points:[{value:40,timestamp:mockedTime}],startTimestamp:mockedTime}]);});});cov_t4qllvg67().s[86]++;describe('getDefaultTimeSeries()',()=>{cov_t4qllvg67().f[17]++;cov_t4qllvg67().s[87]++;it('should create new default timeseries',()=>{cov_t4qllvg67().f[18]++;const point=(cov_t4qllvg67().s[88]++,instance.getDefaultTimeSeries());cov_t4qllvg67().s[89]++;point.inc(10);// @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message
cov_t4qllvg67().s[90]++;process.hrtime=()=>{cov_t4qllvg67().f[19]++;cov_t4qllvg67().s[91]++;return[100,1e7];};cov_t4qllvg67().s[92]++;Date.now=()=>{cov_t4qllvg67().f[20]++;cov_t4qllvg67().s[93]++;return 1480000000000;};// Force the clock to recalibrate the time offset with the mocked time
cov_t4qllvg67().s[94]++;time_util_1.TEST_ONLY.setHrtimeReference();const metric=(cov_t4qllvg67().s[95]++,instance.getMetric());cov_t4qllvg67().s[96]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_t4qllvg67().s[97]++;assert.strictEqual(metric.timeseries.length,1);cov_t4qllvg67().s[98]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:[UNSET_LABEL_VALUE],points:[{value:10,timestamp:{seconds:1480000100,nanos:1e7}}],startTimestamp:mockedTime}]);});cov_t4qllvg67().s[99]++;it('should return same timeseries for interchanged labels',()=>{cov_t4qllvg67().f[21]++;cov_t4qllvg67().s[100]++;instance=new cumulative_1.Cumulative(METRIC_NAME,METRIC_DESCRIPTION,UNIT,CUMULATIVE_INT64,[{key:'k1',description:'desc'},{key:'k2',description:'desc'}],EMPTY_CONSTANT_LABELS);const point=(cov_t4qllvg67().s[101]++,instance.getOrCreateTimeSeries([{value:'200'},{value:'400'}]));cov_t4qllvg67().s[102]++;point.inc(200);const point1=(cov_t4qllvg67().s[103]++,instance.getOrCreateTimeSeries([{value:'400'},{value:'200'}]));cov_t4qllvg67().s[104]++;point1.inc(400);const metric=(cov_t4qllvg67().s[105]++,instance.getMetric());cov_t4qllvg67().s[106]++;assert.strictEqual(metric.timeseries.length,1);});cov_t4qllvg67().s[107]++;it('should add constant labels',()=>{cov_t4qllvg67().f[22]++;cov_t4qllvg67().s[108]++;instance=new cumulative_1.Cumulative(METRIC_NAME,METRIC_DESCRIPTION,UNIT,CUMULATIVE_DOUBLE,[{key:'k1',description:'desc'},{key:'k2',description:'desc'}],CONSTANT_LABELS);const point=(cov_t4qllvg67().s[109]++,instance.getOrCreateTimeSeries([{value:'200'},{value:'400'}]));cov_t4qllvg67().s[110]++;point.inc(200);const metric=(cov_t4qllvg67().s[111]++,instance.getMetric());cov_t4qllvg67().s[112]++;assert.strictEqual(metric.descriptor.type,5);cov_t4qllvg67().s[113]++;assert.strictEqual(metric.timeseries.length,1);cov_t4qllvg67().s[114]++;assert.deepStrictEqual(metric.descriptor.labelKeys,[{key:'k1',description:'desc'},{key:'k2',description:'desc'},{key:'host',description:'host'}]);cov_t4qllvg67().s[115]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:[{value:'200'},{value:'400'},{value:'localhost'}],points:[{value:200,timestamp:mockedTime}],startTimestamp:mockedTime}]);});cov_t4qllvg67().s[116]++;it('should create same labelValues as labelKeys',()=>{cov_t4qllvg67().f[23]++;cov_t4qllvg67().s[117]++;instance=new cumulative_1.Cumulative(METRIC_NAME,METRIC_DESCRIPTION,UNIT,CUMULATIVE_DOUBLE,[{key:'k1',description:'desc'},{key:'k2',description:'desc'},{key:'k3',description:'desc'}],EMPTY_CONSTANT_LABELS);const point=(cov_t4qllvg67().s[118]++,instance.getDefaultTimeSeries());cov_t4qllvg67().s[119]++;point.inc(200);const metric=(cov_t4qllvg67().s[120]++,instance.getMetric());cov_t4qllvg67().s[121]++;assert.deepStrictEqual(metric.descriptor.labelKeys.length,3);cov_t4qllvg67().s[122]++;assert.deepStrictEqual(metric.descriptor.type,5);cov_t4qllvg67().s[123]++;assert.strictEqual(metric.timeseries.length,1);cov_t4qllvg67().s[124]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:[UNSET_LABEL_VALUE,UNSET_LABEL_VALUE,UNSET_LABEL_VALUE],points:[{value:200,timestamp:mockedTime}],startTimestamp:mockedTime}]);});cov_t4qllvg67().s[125]++;it('should use previously created default timeseries',()=>{cov_t4qllvg67().f[24]++;const point=(cov_t4qllvg67().s[126]++,instance.getDefaultTimeSeries());cov_t4qllvg67().s[127]++;point.inc(300);let metric=(cov_t4qllvg67().s[128]++,instance.getMetric());cov_t4qllvg67().s[129]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_t4qllvg67().s[130]++;assert.strictEqual(metric.timeseries.length,1);cov_t4qllvg67().s[131]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:[UNSET_LABEL_VALUE],points:[{value:300,timestamp:mockedTime}],startTimestamp:mockedTime}]);// get default timeseries again.
const point1=(cov_t4qllvg67().s[132]++,instance.getDefaultTimeSeries());cov_t4qllvg67().s[133]++;point1.inc(400);cov_t4qllvg67().s[134]++;metric=instance.getMetric();cov_t4qllvg67().s[135]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_t4qllvg67().s[136]++;assert.strictEqual(metric.timeseries.length,1);cov_t4qllvg67().s[137]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:[UNSET_LABEL_VALUE],points:[{value:700,timestamp:mockedTime}],startTimestamp:mockedTime}]);});});cov_t4qllvg67().s[138]++;describe('removeTimeSeries()',()=>{cov_t4qllvg67().f[25]++;cov_t4qllvg67().s[139]++;it('should remove TimeSeries',()=>{cov_t4qllvg67().f[26]++;const point=(cov_t4qllvg67().s[140]++,instance.getOrCreateTimeSeries(LABEL_VALUES_200));cov_t4qllvg67().s[141]++;point.inc(10);let metric=(cov_t4qllvg67().s[142]++,instance.getMetric());cov_t4qllvg67().s[143]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_t4qllvg67().s[144]++;instance.removeTimeSeries(LABEL_VALUES_200);cov_t4qllvg67().s[145]++;metric=instance.getMetric();cov_t4qllvg67().s[146]++;assert.deepStrictEqual(metric,null);});});cov_t4qllvg67().s[147]++;describe('clear()',()=>{cov_t4qllvg67().f[27]++;cov_t4qllvg67().s[148]++;it('should clear all TimeSeries',()=>{cov_t4qllvg67().f[28]++;const point=(cov_t4qllvg67().s[149]++,instance.getOrCreateTimeSeries(LABEL_VALUES_200));cov_t4qllvg67().s[150]++;point.inc(10);const point1=(cov_t4qllvg67().s[151]++,instance.getOrCreateTimeSeries(LABEL_VALUES_400));cov_t4qllvg67().s[152]++;point1.inc(10);let metric=(cov_t4qllvg67().s[153]++,instance.getMetric());cov_t4qllvg67().s[154]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_t4qllvg67().s[155]++;assert.strictEqual(metric.timeseries.length,2);cov_t4qllvg67().s[156]++;instance.clear();cov_t4qllvg67().s[157]++;metric=instance.getMetric();cov_t4qllvg67().s[158]++;assert.deepStrictEqual(metric,null);});});});//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,