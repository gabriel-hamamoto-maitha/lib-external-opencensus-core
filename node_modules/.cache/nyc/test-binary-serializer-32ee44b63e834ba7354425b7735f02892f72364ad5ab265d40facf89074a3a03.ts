"use strict";/**
 * Copyright 2019, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_nvlbfkixt(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-binary-serializer.ts";var hash="9bb9fcc62e32e11b39cf95f24db3644390f45739";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-binary-serializer.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:15},end:{line:18,column:32}},"2":{start:{line:19,column:28},end:{line:19,column:80}},"3":{start:{line:20,column:18},end:{line:20,column:48}},"4":{start:{line:21,column:11},end:{line:23,column:1}},"5":{start:{line:24,column:11},end:{line:26,column:1}},"6":{start:{line:27,column:11},end:{line:29,column:1}},"7":{start:{line:30,column:11},end:{line:32,column:1}},"8":{start:{line:33,column:11},end:{line:35,column:1}},"9":{start:{line:36,column:11},end:{line:38,column:1}},"10":{start:{line:39,column:11},end:{line:41,column:1}},"11":{start:{line:42,column:11},end:{line:44,column:1}},"12":{start:{line:45,column:0},end:{line:125,column:3}},"13":{start:{line:46,column:24},end:{line:46,column:46}},"14":{start:{line:47,column:25},end:{line:47,column:47}},"15":{start:{line:48,column:4},end:{line:48,column:29}},"16":{start:{line:49,column:27},end:{line:49,column:49}},"17":{start:{line:50,column:4},end:{line:50,column:31}},"18":{start:{line:51,column:4},end:{line:51,column:31}},"19":{start:{line:52,column:4},end:{line:52,column:31}},"20":{start:{line:53,column:4},end:{line:53,column:31}},"21":{start:{line:54,column:4},end:{line:83,column:7}},"22":{start:{line:55,column:8},end:{line:58,column:11}},"23":{start:{line:56,column:27},end:{line:56,column:75}},"24":{start:{line:57,column:12},end:{line:57,column:95}},"25":{start:{line:59,column:8},end:{line:62,column:11}},"26":{start:{line:60,column:27},end:{line:60,column:76}},"27":{start:{line:61,column:12},end:{line:61,column:96}},"28":{start:{line:63,column:8},end:{line:66,column:11}},"29":{start:{line:64,column:27},end:{line:64,column:78}},"30":{start:{line:65,column:12},end:{line:65,column:98}},"31":{start:{line:67,column:8},end:{line:82,column:11}},"32":{start:{line:68,column:25},end:{line:68,column:47}},"33":{start:{line:69,column:12},end:{line:75,column:13}},"34":{start:{line:69,column:25},end:{line:69,column:26}},"35":{start:{line:72,column:28},end:{line:72,column:66}},"36":{start:{line:73,column:28},end:{line:73,column:40}},"37":{start:{line:74,column:16},end:{line:74,column:56}},"38":{start:{line:78,column:12},end:{line:78,column:59}},"39":{start:{line:79,column:12},end:{line:81,column:82}},"40":{start:{line:80,column:16},end:{line:80,column:58}},"41":{start:{line:84,column:4},end:{line:124,column:7}},"42":{start:{line:85,column:8},end:{line:99,column:11}},"43":{start:{line:86,column:25},end:{line:95,column:14}},"44":{start:{line:96,column:12},end:{line:98,column:83}},"45":{start:{line:97,column:16},end:{line:97,column:60}},"46":{start:{line:100,column:8},end:{line:123,column:11}},"47":{start:{line:101,column:33},end:{line:101,column:55}},"48":{start:{line:102,column:12},end:{line:102,column:37}},"49":{start:{line:103,column:25},end:{line:119,column:14}},"50":{start:{line:120,column:25},end:{line:120,column:68}},"51":{start:{line:121,column:12},end:{line:121,column:50}},"52":{start:{line:122,column:12},end:{line:122,column:55}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:45,column:37},end:{line:45,column:38}},loc:{start:{line:45,column:43},end:{line:125,column:1}},line:45},"1":{name:"(anonymous_1)",decl:{start:{line:54,column:32},end:{line:54,column:33}},loc:{start:{line:54,column:38},end:{line:83,column:5}},line:54},"2":{name:"(anonymous_2)",decl:{start:{line:55,column:45},end:{line:55,column:46}},loc:{start:{line:55,column:51},end:{line:58,column:9}},line:55},"3":{name:"(anonymous_3)",decl:{start:{line:59,column:48},end:{line:59,column:49}},loc:{start:{line:59,column:54},end:{line:62,column:9}},line:59},"4":{name:"(anonymous_4)",decl:{start:{line:63,column:49},end:{line:63,column:50}},loc:{start:{line:63,column:55},end:{line:66,column:9}},line:63},"5":{name:"(anonymous_5)",decl:{start:{line:67,column:73},end:{line:67,column:74}},loc:{start:{line:67,column:79},end:{line:82,column:9}},line:67},"6":{name:"(anonymous_6)",decl:{start:{line:79,column:26},end:{line:79,column:27}},loc:{start:{line:79,column:32},end:{line:81,column:13}},line:79},"7":{name:"(anonymous_7)",decl:{start:{line:84,column:34},end:{line:84,column:35}},loc:{start:{line:84,column:40},end:{line:124,column:5}},line:84},"8":{name:"(anonymous_8)",decl:{start:{line:85,column:56},end:{line:85,column:57}},loc:{start:{line:85,column:62},end:{line:99,column:9}},line:85},"9":{name:"(anonymous_9)",decl:{start:{line:96,column:26},end:{line:96,column:27}},loc:{start:{line:96,column:32},end:{line:98,column:13}},line:96},"10":{name:"(anonymous_10)",decl:{start:{line:100,column:60},end:{line:100,column:61}},loc:{start:{line:100,column:66},end:{line:123,column:9}},line:100}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},b:{},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-binary-serializer.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-binary-serializer.ts"],names:[],mappings:"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",sourcesContent:["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport {\n  deserializeBinary,\n  serializeBinary,\n  TAG_MAP_SERIALIZED_SIZE_LIMIT,\n} from '../src/tags/propagation/binary-serializer';\nimport { TagMap } from '../src/tags/tag-map';\n\nconst K1 = {\n  name: 'k1',\n};\nconst K2 = {\n  name: 'k2',\n};\nconst K3 = {\n  name: 'k3',\n};\nconst K4 = {\n  name: 'k4',\n};\n\nconst V1 = {\n  value: 'v1',\n};\nconst V2 = {\n  value: 'v2',\n};\nconst V3 = {\n  value: 'v3',\n};\nconst V4 = {\n  value: 'v4',\n};\n\ndescribe('Binary Format Serializer', () => {\n  const emptyTagMap = new TagMap();\n\n  const singleTagMap = new TagMap();\n  singleTagMap.set(K1, V1);\n\n  const multipleTagMap = new TagMap();\n  multipleTagMap.set(K1, V1);\n  multipleTagMap.set(K2, V2);\n  multipleTagMap.set(K3, V3);\n  multipleTagMap.set(K4, V4);\n\n  describe('serializeBinary', () => {\n    it('should serialize empty tag map', () => {\n      const binary = serializeBinary(emptyTagMap);\n      assert.deepStrictEqual(deserializeBinary(binary), emptyTagMap);\n    });\n\n    it('should serialize with one tag map', () => {\n      const binary = serializeBinary(singleTagMap);\n      assert.deepStrictEqual(deserializeBinary(binary), singleTagMap);\n    });\n\n    it('should serialize with multiple tag', () => {\n      const binary = serializeBinary(multipleTagMap);\n      assert.deepStrictEqual(deserializeBinary(binary), multipleTagMap);\n    });\n\n    it('should throw an error when exceeds the max serialized size', () => {\n      const tags = new TagMap();\n      for (let i = 0; i < TAG_MAP_SERIALIZED_SIZE_LIMIT / 8 - 1; i++) {\n        // Each tag will be with format {key : \"0123\", value : \"0123\"}, so the\n        // length of it is 8.\n        const pad = '0000'.substring(0, 4 - `${i}`.length);\n        const str = `${pad}${i}`;\n        tags.set({ name: str }, { value: str });\n      }\n      // The last tag will be of size 9, so the total size of the TagMap\n      // (8193) will be one byte more than limit.\n      tags.set({ name: 'last' }, { value: 'last1' });\n\n      assert.throws(() => {\n        serializeBinary(tags);\n      }, /^Error: Size of TagMap exceeds the maximum serialized size 8192/);\n    });\n  });\n\n  describe('deserializeBinary', () => {\n    it('should throw an error when invalid tagKey', () => {\n      const buff = Buffer.from([\n        0x01,\n        0x00,\n        0x02,\n        0x6b,\n        0x31,\n        0x02,\n        0x76,\n        0x31,\n      ]);\n      assert.throws(() => {\n        deserializeBinary(buff);\n      }, /^Error: Wrong Version ID: 1. Currently supports version up to: 0/);\n    });\n\n    it('should stop parsing at first unknown field ID', () => {\n      const expectedTags = new TagMap();\n      expectedTags.set(K1, V1);\n\n      const buff = Buffer.from([\n        0x00,\n        0x00,\n        0x02,\n        0x6b,\n        0x31,\n        0x02,\n        0x76,\n        0x31,\n        0x01,\n        0x02,\n        0x6b,\n        0x32,\n        0x02,\n        0x76,\n        0x32,\n      ]);\n      const tags = deserializeBinary(buff);\n      assert.strictEqual(tags.tags.size, 1);\n      assert.deepStrictEqual(tags, expectedTags);\n    });\n  });\n});\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"9bb9fcc62e32e11b39cf95f24db3644390f45739"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_nvlbfkixt=function(){return actualCoverage;};}return actualCoverage;}cov_nvlbfkixt();cov_nvlbfkixt().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const assert=(cov_nvlbfkixt().s[1]++,require("assert"));const binary_serializer_1=(cov_nvlbfkixt().s[2]++,require("../src/tags/propagation/binary-serializer"));const tag_map_1=(cov_nvlbfkixt().s[3]++,require("../src/tags/tag-map"));const K1=(cov_nvlbfkixt().s[4]++,{name:'k1'});const K2=(cov_nvlbfkixt().s[5]++,{name:'k2'});const K3=(cov_nvlbfkixt().s[6]++,{name:'k3'});const K4=(cov_nvlbfkixt().s[7]++,{name:'k4'});const V1=(cov_nvlbfkixt().s[8]++,{value:'v1'});const V2=(cov_nvlbfkixt().s[9]++,{value:'v2'});const V3=(cov_nvlbfkixt().s[10]++,{value:'v3'});const V4=(cov_nvlbfkixt().s[11]++,{value:'v4'});cov_nvlbfkixt().s[12]++;describe('Binary Format Serializer',()=>{cov_nvlbfkixt().f[0]++;const emptyTagMap=(cov_nvlbfkixt().s[13]++,new tag_map_1.TagMap());const singleTagMap=(cov_nvlbfkixt().s[14]++,new tag_map_1.TagMap());cov_nvlbfkixt().s[15]++;singleTagMap.set(K1,V1);const multipleTagMap=(cov_nvlbfkixt().s[16]++,new tag_map_1.TagMap());cov_nvlbfkixt().s[17]++;multipleTagMap.set(K1,V1);cov_nvlbfkixt().s[18]++;multipleTagMap.set(K2,V2);cov_nvlbfkixt().s[19]++;multipleTagMap.set(K3,V3);cov_nvlbfkixt().s[20]++;multipleTagMap.set(K4,V4);cov_nvlbfkixt().s[21]++;describe('serializeBinary',()=>{cov_nvlbfkixt().f[1]++;cov_nvlbfkixt().s[22]++;it('should serialize empty tag map',()=>{cov_nvlbfkixt().f[2]++;const binary=(cov_nvlbfkixt().s[23]++,binary_serializer_1.serializeBinary(emptyTagMap));cov_nvlbfkixt().s[24]++;assert.deepStrictEqual(binary_serializer_1.deserializeBinary(binary),emptyTagMap);});cov_nvlbfkixt().s[25]++;it('should serialize with one tag map',()=>{cov_nvlbfkixt().f[3]++;const binary=(cov_nvlbfkixt().s[26]++,binary_serializer_1.serializeBinary(singleTagMap));cov_nvlbfkixt().s[27]++;assert.deepStrictEqual(binary_serializer_1.deserializeBinary(binary),singleTagMap);});cov_nvlbfkixt().s[28]++;it('should serialize with multiple tag',()=>{cov_nvlbfkixt().f[4]++;const binary=(cov_nvlbfkixt().s[29]++,binary_serializer_1.serializeBinary(multipleTagMap));cov_nvlbfkixt().s[30]++;assert.deepStrictEqual(binary_serializer_1.deserializeBinary(binary),multipleTagMap);});cov_nvlbfkixt().s[31]++;it('should throw an error when exceeds the max serialized size',()=>{cov_nvlbfkixt().f[5]++;const tags=(cov_nvlbfkixt().s[32]++,new tag_map_1.TagMap());cov_nvlbfkixt().s[33]++;for(let i=(cov_nvlbfkixt().s[34]++,0);i<binary_serializer_1.TAG_MAP_SERIALIZED_SIZE_LIMIT/8-1;i++){// Each tag will be with format {key : "0123", value : "0123"}, so the
// length of it is 8.
const pad=(cov_nvlbfkixt().s[35]++,'0000'.substring(0,4-`${i}`.length));const str=(cov_nvlbfkixt().s[36]++,`${pad}${i}`);cov_nvlbfkixt().s[37]++;tags.set({name:str},{value:str});}// The last tag will be of size 9, so the total size of the TagMap
// (8193) will be one byte more than limit.
cov_nvlbfkixt().s[38]++;tags.set({name:'last'},{value:'last1'});cov_nvlbfkixt().s[39]++;assert.throws(()=>{cov_nvlbfkixt().f[6]++;cov_nvlbfkixt().s[40]++;binary_serializer_1.serializeBinary(tags);},/^Error: Size of TagMap exceeds the maximum serialized size 8192/);});});cov_nvlbfkixt().s[41]++;describe('deserializeBinary',()=>{cov_nvlbfkixt().f[7]++;cov_nvlbfkixt().s[42]++;it('should throw an error when invalid tagKey',()=>{cov_nvlbfkixt().f[8]++;const buff=(cov_nvlbfkixt().s[43]++,Buffer.from([0x01,0x00,0x02,0x6b,0x31,0x02,0x76,0x31]));cov_nvlbfkixt().s[44]++;assert.throws(()=>{cov_nvlbfkixt().f[9]++;cov_nvlbfkixt().s[45]++;binary_serializer_1.deserializeBinary(buff);},/^Error: Wrong Version ID: 1. Currently supports version up to: 0/);});cov_nvlbfkixt().s[46]++;it('should stop parsing at first unknown field ID',()=>{cov_nvlbfkixt().f[10]++;const expectedTags=(cov_nvlbfkixt().s[47]++,new tag_map_1.TagMap());cov_nvlbfkixt().s[48]++;expectedTags.set(K1,V1);const buff=(cov_nvlbfkixt().s[49]++,Buffer.from([0x00,0x00,0x02,0x6b,0x31,0x02,0x76,0x31,0x01,0x02,0x6b,0x32,0x02,0x76,0x32]));const tags=(cov_nvlbfkixt().s[50]++,binary_serializer_1.deserializeBinary(buff));cov_nvlbfkixt().s[51]++;assert.strictEqual(tags.tags.size,1);cov_nvlbfkixt().s[52]++;assert.deepStrictEqual(tags,expectedTags);});});});//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,