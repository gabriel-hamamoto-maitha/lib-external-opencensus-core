"use strict";/**
 * Copyright 2019, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 the "License";
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_moee3pm14(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-time-util.ts";var hash="fbbf23f546dd5a65663dcf52edaa785d12f3a0ab";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-time-util.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:15},end:{line:18,column:32}},"2":{start:{line:19,column:20},end:{line:19,column:54}},"3":{start:{line:20,column:0},end:{line:47,column:3}},"4":{start:{line:21,column:25},end:{line:21,column:39}},"5":{start:{line:22,column:22},end:{line:22,column:30}},"6":{start:{line:23,column:4},end:{line:28,column:7}},"7":{start:{line:24,column:8},end:{line:24,column:38}},"8":{start:{line:25,column:8},end:{line:25,column:29}},"9":{start:{line:27,column:8},end:{line:27,column:57}},"10":{start:{line:29,column:4},end:{line:37,column:7}},"11":{start:{line:31,column:8},end:{line:31,column:42}},"12":{start:{line:31,column:31},end:{line:31,column:41}},"13":{start:{line:32,column:8},end:{line:32,column:39}},"14":{start:{line:32,column:25},end:{line:32,column:38}},"15":{start:{line:34,column:8},end:{line:34,column:51}},"16":{start:{line:35,column:28},end:{line:35,column:71}},"17":{start:{line:36,column:8},end:{line:36,column:81}},"18":{start:{line:38,column:4},end:{line:46,column:7}},"19":{start:{line:40,column:8},end:{line:40,column:50}},"20":{start:{line:40,column:31},end:{line:40,column:49}},"21":{start:{line:41,column:8},end:{line:41,column:39}},"22":{start:{line:41,column:25},end:{line:41,column:38}},"23":{start:{line:43,column:8},end:{line:43,column:51}},"24":{start:{line:44,column:28},end:{line:44,column:71}},"25":{start:{line:45,column:8},end:{line:45,column:80}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:20,column:44},end:{line:20,column:45}},loc:{start:{line:20,column:50},end:{line:47,column:1}},line:20},"1":{name:"(anonymous_1)",decl:{start:{line:23,column:14},end:{line:23,column:15}},loc:{start:{line:23,column:20},end:{line:28,column:5}},line:23},"2":{name:"(anonymous_2)",decl:{start:{line:29,column:73},end:{line:29,column:74}},loc:{start:{line:29,column:79},end:{line:37,column:5}},line:29},"3":{name:"(anonymous_3)",decl:{start:{line:31,column:25},end:{line:31,column:26}},loc:{start:{line:31,column:31},end:{line:31,column:41}},line:31},"4":{name:"(anonymous_4)",decl:{start:{line:32,column:19},end:{line:32,column:20}},loc:{start:{line:32,column:25},end:{line:32,column:38}},line:32},"5":{name:"(anonymous_5)",decl:{start:{line:38,column:40},end:{line:38,column:41}},loc:{start:{line:38,column:46},end:{line:46,column:5}},line:38},"6":{name:"(anonymous_6)",decl:{start:{line:40,column:25},end:{line:40,column:26}},loc:{start:{line:40,column:31},end:{line:40,column:49}},line:40},"7":{name:"(anonymous_7)",decl:{start:{line:41,column:19},end:{line:41,column:20}},loc:{start:{line:41,column:25},end:{line:41,column:38}},line:41}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},b:{},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-time-util.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-time-util.ts"],names:[],mappings:";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,iCAAiC;AACjC,uDAGiC;AAEjC,QAAQ,CAAC,iCAAiC,EAAE,GAAG,EAAE;IAC/C,MAAM,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC;IACpC,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC;IAE3B,SAAS,CAAC,GAAG,EAAE;QACb,OAAO,CAAC,MAAM,GAAG,YAAY,CAAC;QAC9B,IAAI,CAAC,GAAG,GAAG,SAAS,CAAC;QACrB,iEAAiE;QACjE,qBAAS,CAAC,wBAAwB,EAAE,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;QACxE,mJAAmJ;QACnJ,OAAO,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAClC,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,aAAa,CAAC;QAC/B,sEAAsE;QACtE,qBAAS,CAAC,kBAAkB,EAAE,CAAC;QAE/B,MAAM,WAAW,GAAG,yCAA6B,EAAE,CAAC;QAEpD,MAAM,CAAC,eAAe,CAAC,WAAW,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC;IAC3E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE,GAAG,EAAE;QACvC,mJAAmJ;QACnJ,OAAO,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;QAC1C,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,aAAa,CAAC;QAC/B,sEAAsE;QACtE,qBAAS,CAAC,kBAAkB,EAAE,CAAC;QAE/B,MAAM,WAAW,GAAG,yCAA6B,EAAE,CAAC;QAEpD,MAAM,CAAC,eAAe,CAAC,WAAW,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC;IAC1E,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC",sourcesContent:["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 the \"License\";\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport {\n  getTimestampWithProcessHRTime,\n  TEST_ONLY,\n} from '../src/common/time-util';\n\ndescribe('getTimestampWithProcessHRTime()', () => {\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  it('should return timestamp with respect to now and process.hrtime', () => {\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n\n    const currentTime = getTimestampWithProcessHRTime();\n\n    assert.deepStrictEqual(currentTime, { seconds: 1450000100, nanos: 1e7 });\n  });\n\n  it('should handle excess of nanos', () => {\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 10000000012];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n\n    const currentTime = getTimestampWithProcessHRTime();\n\n    assert.deepStrictEqual(currentTime, { seconds: 1450000101, nanos: 12 });\n  });\n});\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"fbbf23f546dd5a65663dcf52edaa785d12f3a0ab"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_moee3pm14=function(){return actualCoverage;};}return actualCoverage;}cov_moee3pm14();cov_moee3pm14().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const assert=(cov_moee3pm14().s[1]++,require("assert"));const time_util_1=(cov_moee3pm14().s[2]++,require("../src/common/time-util"));cov_moee3pm14().s[3]++;describe('getTimestampWithProcessHRTime()',()=>{cov_moee3pm14().f[0]++;const realHrtimeFn=(cov_moee3pm14().s[4]++,process.hrtime);const realNowFn=(cov_moee3pm14().s[5]++,Date.now);cov_moee3pm14().s[6]++;afterEach(()=>{cov_moee3pm14().f[1]++;cov_moee3pm14().s[7]++;process.hrtime=realHrtimeFn;cov_moee3pm14().s[8]++;Date.now=realNowFn;// Reset the hrtime reference so that it uses a real clock again.
cov_moee3pm14().s[9]++;time_util_1.TEST_ONLY.resetHrtimeFunctionCache();});cov_moee3pm14().s[10]++;it('should return timestamp with respect to now and process.hrtime',()=>{cov_moee3pm14().f[2]++;cov_moee3pm14().s[11]++;// @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message
process.hrtime=()=>{cov_moee3pm14().f[3]++;cov_moee3pm14().s[12]++;return[100,1e7];};cov_moee3pm14().s[13]++;Date.now=()=>{cov_moee3pm14().f[4]++;cov_moee3pm14().s[14]++;return 1450000000000;};// Force the clock to recalibrate the time offset with the mocked time
cov_moee3pm14().s[15]++;time_util_1.TEST_ONLY.setHrtimeReference();const currentTime=(cov_moee3pm14().s[16]++,time_util_1.getTimestampWithProcessHRTime());cov_moee3pm14().s[17]++;assert.deepStrictEqual(currentTime,{seconds:1450000100,nanos:1e7});});cov_moee3pm14().s[18]++;it('should handle excess of nanos',()=>{cov_moee3pm14().f[5]++;cov_moee3pm14().s[19]++;// @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message
process.hrtime=()=>{cov_moee3pm14().f[6]++;cov_moee3pm14().s[20]++;return[100,10000000012];};cov_moee3pm14().s[21]++;Date.now=()=>{cov_moee3pm14().f[7]++;cov_moee3pm14().s[22]++;return 1450000000000;};// Force the clock to recalibrate the time offset with the mocked time
cov_moee3pm14().s[23]++;time_util_1.TEST_ONLY.setHrtimeReference();const currentTime=(cov_moee3pm14().s[24]++,time_util_1.getTimestampWithProcessHRTime());cov_moee3pm14().s[25]++;assert.deepStrictEqual(currentTime,{seconds:1450000101,nanos:12});});});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3VzZXJtYWl0aGEvdHJhZGVtYXN0ZXIvbGlicy9saWItZXh0ZXJuYWwtb3BlbmNlbnN1cy1ub2RlL3Rlc3QvdGVzdC10aW1lLXV0aWwudHMiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VybWFpdGhhL3RyYWRlbWFzdGVyL2xpYnMvbGliLWV4dGVybmFsLW9wZW5jZW5zdXMtbm9kZS90ZXN0L3Rlc3QtdGltZS11dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7R0FjRzs7QUFFSCxpQ0FBaUM7QUFDakMsdURBR2lDO0FBRWpDLFFBQVEsQ0FBQyxpQ0FBaUMsRUFBRSxHQUFHLEVBQUU7SUFDL0MsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztJQUNwQyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBRTNCLFNBQVMsQ0FBQyxHQUFHLEVBQUU7UUFDYixPQUFPLENBQUMsTUFBTSxHQUFHLFlBQVksQ0FBQztRQUM5QixJQUFJLENBQUMsR0FBRyxHQUFHLFNBQVMsQ0FBQztRQUNyQixpRUFBaUU7UUFDakUscUJBQVMsQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO0lBQ3ZDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGdFQUFnRSxFQUFFLEdBQUcsRUFBRTtRQUN4RSxtSkFBbUo7UUFDbkosT0FBTyxDQUFDLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQztRQUMvQixzRUFBc0U7UUFDdEUscUJBQVMsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBRS9CLE1BQU0sV0FBVyxHQUFHLHlDQUE2QixFQUFFLENBQUM7UUFFcEQsTUFBTSxDQUFDLGVBQWUsQ0FBQyxXQUFXLEVBQUUsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQzNFLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLCtCQUErQixFQUFFLEdBQUcsRUFBRTtRQUN2QyxtSkFBbUo7UUFDbkosT0FBTyxDQUFDLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUMxQyxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQztRQUMvQixzRUFBc0U7UUFDdEUscUJBQVMsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBRS9CLE1BQU0sV0FBVyxHQUFHLHlDQUE2QixFQUFFLENBQUM7UUFFcEQsTUFBTSxDQUFDLGVBQWUsQ0FBQyxXQUFXLEVBQUUsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzFFLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDE5LCBPcGVuQ2Vuc3VzIEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wIHRoZSBcIkxpY2Vuc2VcIjtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgKiBhcyBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcbmltcG9ydCB7XG4gIGdldFRpbWVzdGFtcFdpdGhQcm9jZXNzSFJUaW1lLFxuICBURVNUX09OTFksXG59IGZyb20gJy4uL3NyYy9jb21tb24vdGltZS11dGlsJztcblxuZGVzY3JpYmUoJ2dldFRpbWVzdGFtcFdpdGhQcm9jZXNzSFJUaW1lKCknLCAoKSA9PiB7XG4gIGNvbnN0IHJlYWxIcnRpbWVGbiA9IHByb2Nlc3MuaHJ0aW1lO1xuICBjb25zdCByZWFsTm93Rm4gPSBEYXRlLm5vdztcblxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIHByb2Nlc3MuaHJ0aW1lID0gcmVhbEhydGltZUZuO1xuICAgIERhdGUubm93ID0gcmVhbE5vd0ZuO1xuICAgIC8vIFJlc2V0IHRoZSBocnRpbWUgcmVmZXJlbmNlIHNvIHRoYXQgaXQgdXNlcyBhIHJlYWwgY2xvY2sgYWdhaW4uXG4gICAgVEVTVF9PTkxZLnJlc2V0SHJ0aW1lRnVuY3Rpb25DYWNoZSgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJldHVybiB0aW1lc3RhbXAgd2l0aCByZXNwZWN0IHRvIG5vdyBhbmQgcHJvY2Vzcy5ocnRpbWUnLCAoKSA9PiB7XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciB0cy1taWdyYXRlKDI3NDEpIEZJWE1FOiBQcm9wZXJ0eSAnYmlnaW50JyBpcyBtaXNzaW5nIGluIHR5cGUgJygpID0+IFtudW1iZS4uLiBSZW1vdmUgdGhpcyBjb21tZW50IHRvIHNlZSB0aGUgZnVsbCBlcnJvciBtZXNzYWdlXG4gICAgcHJvY2Vzcy5ocnRpbWUgPSAoKSA9PiBbMTAwLCAxZTddO1xuICAgIERhdGUubm93ID0gKCkgPT4gMTQ1MDAwMDAwMDAwMDtcbiAgICAvLyBGb3JjZSB0aGUgY2xvY2sgdG8gcmVjYWxpYnJhdGUgdGhlIHRpbWUgb2Zmc2V0IHdpdGggdGhlIG1vY2tlZCB0aW1lXG4gICAgVEVTVF9PTkxZLnNldEhydGltZVJlZmVyZW5jZSgpO1xuXG4gICAgY29uc3QgY3VycmVudFRpbWUgPSBnZXRUaW1lc3RhbXBXaXRoUHJvY2Vzc0hSVGltZSgpO1xuXG4gICAgYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChjdXJyZW50VGltZSwgeyBzZWNvbmRzOiAxNDUwMDAwMTAwLCBuYW5vczogMWU3IH0pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGhhbmRsZSBleGNlc3Mgb2YgbmFub3MnLCAoKSA9PiB7XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciB0cy1taWdyYXRlKDI3NDEpIEZJWE1FOiBQcm9wZXJ0eSAnYmlnaW50JyBpcyBtaXNzaW5nIGluIHR5cGUgJygpID0+IFtudW1iZS4uLiBSZW1vdmUgdGhpcyBjb21tZW50IHRvIHNlZSB0aGUgZnVsbCBlcnJvciBtZXNzYWdlXG4gICAgcHJvY2Vzcy5ocnRpbWUgPSAoKSA9PiBbMTAwLCAxMDAwMDAwMDAxMl07XG4gICAgRGF0ZS5ub3cgPSAoKSA9PiAxNDUwMDAwMDAwMDAwO1xuICAgIC8vIEZvcmNlIHRoZSBjbG9jayB0byByZWNhbGlicmF0ZSB0aGUgdGltZSBvZmZzZXQgd2l0aCB0aGUgbW9ja2VkIHRpbWVcbiAgICBURVNUX09OTFkuc2V0SHJ0aW1lUmVmZXJlbmNlKCk7XG5cbiAgICBjb25zdCBjdXJyZW50VGltZSA9IGdldFRpbWVzdGFtcFdpdGhQcm9jZXNzSFJUaW1lKCk7XG5cbiAgICBhc3NlcnQuZGVlcFN0cmljdEVxdWFsKGN1cnJlbnRUaW1lLCB7IHNlY29uZHM6IDE0NTAwMDAxMDEsIG5hbm9zOiAxMiB9KTtcbiAgfSk7XG59KTtcbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,