"use strict";/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_28eii3731h(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/stats.ts";var hash="08cda5c5585119d2fbb9fec7d56daac1b03533d4";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/stats.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:0},end:{line:18,column:27}},"2":{start:{line:19,column:22},end:{line:19,column:57}},"3":{start:{line:20,column:12},end:{line:20,column:38}},"4":{start:{line:21,column:18},end:{line:21,column:47}},"5":{start:{line:22,column:15},end:{line:22,column:40}},"6":{start:{line:23,column:26},end:{line:23,column:54}},"7":{start:{line:24,column:16},end:{line:24,column:34}},"8":{start:{line:25,column:15},end:{line:25,column:32}},"9":{start:{line:33,column:8},end:{line:33,column:38}},"10":{start:{line:35,column:8},end:{line:35,column:34}},"11":{start:{line:36,column:8},end:{line:36,column:38}},"12":{start:{line:37,column:8},end:{line:37,column:49}},"13":{start:{line:40,column:31},end:{line:40,column:81}},"14":{start:{line:41,column:8},end:{line:41,column:73}},"15":{start:{line:45,column:8},end:{line:45,column:79}},"16":{start:{line:52,column:8},end:{line:57,column:9}},"17":{start:{line:53,column:12},end:{line:53,column:63}},"18":{start:{line:56,column:12},end:{line:56,column:61}},"19":{start:{line:58,column:8},end:{line:58,column:31}},"20":{start:{line:60,column:8},end:{line:63,column:9}},"21":{start:{line:62,column:12},end:{line:62,column:42}},"22":{start:{line:76,column:21},end:{line:76,column:108}},"23":{start:{line:77,column:8},end:{line:77,column:20}},"24":{start:{line:84,column:8},end:{line:84,column:48}},"25":{start:{line:85,column:8},end:{line:90,column:9}},"26":{start:{line:86,column:12},end:{line:89,column:13}},"27":{start:{line:88,column:16},end:{line:88,column:46}},"28":{start:{line:91,column:8},end:{line:91,column:25}},"29":{start:{line:99,column:8},end:{line:102,column:9}},"30":{start:{line:100,column:12},end:{line:100,column:120}},"31":{start:{line:100,column:90},end:{line:100,column:118}},"32":{start:{line:101,column:12},end:{line:101,column:28}},"33":{start:{line:111,column:8},end:{line:111,column:77}},"34":{start:{line:121,column:8},end:{line:121,column:76}},"35":{start:{line:129,column:8},end:{line:129,column:71}},"36":{start:{line:129,column:48},end:{line:129,column:69}},"37":{start:{line:136,column:24},end:{line:136,column:26}},"38":{start:{line:137,column:8},end:{line:141,column:9}},"39":{start:{line:138,column:12},end:{line:140,column:13}},"40":{start:{line:139,column:16},end:{line:139,column:61}},"41":{start:{line:142,column:8},end:{line:142,column:23}},"42":{start:{line:155,column:8},end:{line:159,column:9}},"43":{start:{line:156,column:12},end:{line:157,column:34}},"44":{start:{line:158,column:12},end:{line:158,column:19}},"45":{start:{line:160,column:8},end:{line:163,column:9}},"46":{start:{line:162,column:12},end:{line:162,column:47}},"47":{start:{line:164,column:8},end:{line:178,column:9}},"48":{start:{line:165,column:26},end:{line:165,column:72}},"49":{start:{line:166,column:12},end:{line:168,column:13}},"50":{start:{line:167,column:16},end:{line:167,column:22}},"51":{start:{line:170,column:12},end:{line:172,column:13}},"52":{start:{line:171,column:16},end:{line:171,column:71}},"53":{start:{line:174,column:12},end:{line:177,column:13}},"54":{start:{line:176,column:16},end:{line:176,column:65}},"55":{start:{line:184,column:8},end:{line:184,column:34}},"56":{start:{line:185,column:8},end:{line:185,column:38}},"57":{start:{line:195,column:8},end:{line:195,column:68}},"58":{start:{line:199,column:8},end:{line:199,column:64}},"59":{start:{line:202,column:0},end:{line:202,column:30}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:31,column:4},end:{line:31,column:5}},loc:{start:{line:31,column:40},end:{line:42,column:5}},line:31},"1":{name:"(anonymous_1)",decl:{start:{line:44,column:4},end:{line:44,column:5}},loc:{start:{line:44,column:26},end:{line:46,column:5}},line:44},"2":{name:"(anonymous_2)",decl:{start:{line:51,column:4},end:{line:51,column:5}},loc:{start:{line:51,column:23},end:{line:64,column:5}},line:51},"3":{name:"(anonymous_3)",decl:{start:{line:75,column:4},end:{line:75,column:5}},loc:{start:{line:75,column:83},end:{line:78,column:5}},line:75},"4":{name:"(anonymous_4)",decl:{start:{line:83,column:4},end:{line:83,column:5}},loc:{start:{line:83,column:31},end:{line:92,column:5}},line:83},"5":{name:"(anonymous_5)",decl:{start:{line:98,column:4},end:{line:98,column:5}},loc:{start:{line:98,column:33},end:{line:103,column:5}},line:98},"6":{name:"(anonymous_6)",decl:{start:{line:100,column:71},end:{line:100,column:72}},loc:{start:{line:100,column:90},end:{line:100,column:118}},line:100},"7":{name:"(anonymous_7)",decl:{start:{line:110,column:4},end:{line:110,column:5}},loc:{start:{line:110,column:49},end:{line:112,column:5}},line:110},"8":{name:"(anonymous_8)",decl:{start:{line:120,column:4},end:{line:120,column:5}},loc:{start:{line:120,column:48},end:{line:122,column:5}},line:120},"9":{name:"(anonymous_9)",decl:{start:{line:128,column:4},end:{line:128,column:5}},loc:{start:{line:128,column:35},end:{line:130,column:5}},line:128},"10":{name:"(anonymous_10)",decl:{start:{line:129,column:33},end:{line:129,column:34}},loc:{start:{line:129,column:48},end:{line:129,column:69}},line:129},"11":{name:"(anonymous_11)",decl:{start:{line:135,column:4},end:{line:135,column:5}},loc:{start:{line:135,column:17},end:{line:143,column:5}},line:135},"12":{name:"(anonymous_12)",decl:{start:{line:154,column:4},end:{line:154,column:5}},loc:{start:{line:154,column:44},end:{line:179,column:5}},line:154},"13":{name:"(anonymous_13)",decl:{start:{line:183,column:4},end:{line:183,column:5}},loc:{start:{line:183,column:12},end:{line:186,column:5}},line:183},"14":{name:"(anonymous_14)",decl:{start:{line:194,column:4},end:{line:194,column:5}},loc:{start:{line:194,column:29},end:{line:196,column:5}},line:194},"15":{name:"(anonymous_15)",decl:{start:{line:198,column:4},end:{line:198,column:5}},loc:{start:{line:198,column:27},end:{line:200,column:5}},line:198}},branchMap:{"0":{loc:{start:{line:31,column:16},end:{line:31,column:38}},type:"default-arg",locations:[{start:{line:31,column:25},end:{line:31,column:38}}],line:31},"1":{loc:{start:{line:45,column:15},end:{line:45,column:78}},type:"binary-expr",locations:[{start:{line:45,column:15},end:{line:45,column:37}},{start:{line:45,column:42},end:{line:45,column:77}}],line:45},"2":{loc:{start:{line:52,column:8},end:{line:57,column:9}},type:"if",locations:[{start:{line:52,column:8},end:{line:57,column:9}},{start:{line:52,column:8},end:{line:57,column:9}}],line:52},"3":{loc:{start:{line:99,column:8},end:{line:102,column:9}},type:"if",locations:[{start:{line:99,column:8},end:{line:102,column:9}},{start:{line:99,column:8},end:{line:102,column:9}}],line:99},"4":{loc:{start:{line:155,column:8},end:{line:159,column:9}},type:"if",locations:[{start:{line:155,column:8},end:{line:159,column:9}},{start:{line:155,column:8},end:{line:159,column:9}}],line:155},"5":{loc:{start:{line:160,column:8},end:{line:163,column:9}},type:"if",locations:[{start:{line:160,column:8},end:{line:163,column:9}},{start:{line:160,column:8},end:{line:163,column:9}}],line:160},"6":{loc:{start:{line:166,column:12},end:{line:168,column:13}},type:"if",locations:[{start:{line:166,column:12},end:{line:168,column:13}},{start:{line:166,column:12},end:{line:168,column:13}}],line:166}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},b:{"0":[0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/stats.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/stats.ts"],names:[],mappings:";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,0DAA0D;AAG1D,uCAAuC;AAEvC,gDAA6C;AAE7C,yCAAyC;AAEzC,uDAA2D;AAC3D,mCAQiB;AACjB,iCAAkC;AAElC,MAAa,SAAS;IAYpB;;;OAGG;IACH,YAAY,MAAM,GAAG,aAAa;QAflC,gCAAgC;QACxB,wBAAmB,GAAyB,EAAE,CAAC;QACvD,4DAA4D;QACpD,oBAAe,GAA8B,EAAE,CAAC;QAatD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC;QAC9B,IAAI,CAAC,cAAc,GAAG,GAAG,CAAC,YAAY,EAAE,CAAC;QAEzC,yDAAyD;QACzD,mDAAmD;QACnD,MAAM,cAAc,GAAG,IAAI,wCAAsB,CAAC,IAAI,CAAC,CAAC;QACxD,iBAAO,CAAC,wBAAwB,EAAE,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;IACzD,CAAC;IAED,+BAA+B;IAC/B,MAAM,KAAK,QAAQ;QACjB,OAAO,IAAI,CAAC,iBAAiB,IAAI,CAAC,IAAI,CAAC,iBAAiB,GAAG,IAAI,IAAI,EAAE,CAAC,CAAC;IACzE,CAAC;IAED;;;OAGG;IACH,YAAY,CAAC,IAAU;QACrB,IAAI,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAC3C,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACpD;aAAM;YACL,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;SAClD;QAED,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QAEvB,yBAAyB;QACzB,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,mBAAmB,EAAE;YAC/C,uCAAuC;YACvC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;SAC/B;IACH,CAAC;IAED;;;;;;;;;OASG;IACH,UAAU,CACR,IAAY,EACZ,OAAgB,EAChB,WAA4B,EAC5B,OAAiB,EACjB,WAAmB,EACnB,gBAA2B;QAE3B,MAAM,IAAI,GAAG,IAAI,eAAQ,CACvB,IAAI,EACJ,OAAO,EACP,WAAW,EACX,OAAO,EACP,WAAW,EACX,gBAAgB,CACjB,CAAC;QACF,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;OAGG;IACH,gBAAgB,CAAC,QAA4B;QAC3C,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAExC,KAAK,MAAM,WAAW,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE;YAC3D,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,EAAE;gBACpD,uCAAuC;gBACvC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;aAC/B;SACF;QACD,QAAQ,CAAC,KAAK,EAAE,CAAC;IACnB,CAAC;IAED;;;;OAIG;IACH,kBAAkB,CAAC,QAA4B;QAC7C,IAAI,QAAQ,EAAE;YACZ,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CACxD,eAAe,CAAC,EAAE,CAAC,eAAe,KAAK,QAAQ,CAChD,CAAC;YACF,QAAQ,CAAC,IAAI,EAAE,CAAC;SACjB;IACH,CAAC;IAED;;;;;OAKG;IACH,mBAAmB,CACjB,IAAY,EACZ,IAAiB,EACjB,WAAoB;QAEpB,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,mBAAW,CAAC,MAAM,EAAE,WAAW,EAAE,CAAC;IAC/D,CAAC;IAED;;;;;;OAMG;IACH,kBAAkB,CAChB,IAAY,EACZ,IAAiB,EACjB,WAAoB;QAEpB,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,mBAAW,CAAC,KAAK,EAAE,WAAW,EAAE,CAAC;IAC9D,CAAC;IAED;;;;OAIG;IACK,gBAAgB,CAAC,YAA2B;QAClD,OAAO,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,WAAW,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;IACjE,CAAC;IAED;;;OAGG;IACH,UAAU;QACR,MAAM,OAAO,GAAa,EAAE,CAAC;QAE7B,KAAK,MAAM,WAAW,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE;YAC3D,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,EAAE;gBACpD,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;aAC9C;SACF;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;;;;;;;;OASG;IACH,MAAM,CACJ,YAA2B,EAC3B,IAAa,EACb,WAAuC;QAEvC,IAAI,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,EAAE;YACvC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,wBAAwB,YAAY;gCAC3B,CAAC,CAAC;YAC5B,OAAO;SACR;QAED,IAAI,CAAC,IAAI,EAAE;YACT,4CAA4C;YAC5C,IAAI,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;SACpC;QAED,KAAK,MAAM,WAAW,IAAI,YAAY,EAAE;YACtC,MAAM,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAC7D,IAAI,CAAC,KAAK,EAAE;gBACV,MAAM;aACP;YACD,oBAAoB;YACpB,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;gBACxB,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,IAAI,EAAE,WAAW,CAAC,CAAC;aACxD;YAED,yBAAyB;YACzB,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,mBAAmB,EAAE;gBAC/C,uCAAuC;gBACvC,QAAQ,CAAC,QAAQ,CAAC,KAAK,EAAE,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;aAClD;SACF;IACH,CAAC;IAED;;OAEG;IACH,KAAK;QACH,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;QAC1B,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;IAChC,CAAC;IAED;;;;;;OAMG;IACH,cAAc,CAAI,IAAY,EAAE,EAAe;QAC7C,OAAO,MAAM,CAAC,cAAc,CAAI,IAAI,CAAC,cAAc,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;IACjE,CAAC;IAED,oCAAoC;IACpC,oBAAoB;QAClB,OAAO,MAAM,CAAC,oBAAoB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IAC1D,CAAC;CACF;AAvOD,8BAuOC",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as defaultLogger from '../common/console-logger';\nimport * as loggerTypes from '../common/types';\nimport { StatsEventListener } from '../exporters/types';\nimport * as cls from '../internal/cls';\nimport { Metric } from '../metrics/export/types';\nimport { Metrics } from '../metrics/metrics';\nimport { TagMap } from '../tags/tag-map';\nimport * as tagger from '../tags/tagger';\nimport { TagKey } from '../tags/types';\nimport { MetricProducerForStats } from './metric-producer';\nimport {\n  AggregationType,\n  Measure,\n  Measurement,\n  MeasureType,\n  MeasureUnit,\n  Stats,\n  View,\n} from './types';\nimport { BaseView } from './view';\n\nexport class BaseStats implements Stats {\n  /** A list of Stats exporters */\n  private statsEventListeners: StatsEventListener[] = [];\n  /** A map of Measures (name) to their corresponding Views */\n  private registeredViews: { [key: string]: View[] } = {};\n  /** An object to log information to */\n  private logger: loggerTypes.Logger;\n  /** Singleton instance */\n  private static singletonInstance: BaseStats;\n  /** Manage context automatic propagation */\n  private contextManager: cls.Namespace;\n\n  /**\n   * Creates stats\n   * @param logger\n   */\n  constructor(logger = defaultLogger) {\n    this.logger = logger.logger();\n    this.contextManager = cls.getNamespace();\n\n    // Create a new MetricProducerForStats and register it to\n    // MetricProducerManager when Stats is initialized.\n    const metricProducer = new MetricProducerForStats(this);\n    Metrics.getMetricProducerManager().add(metricProducer);\n  }\n\n  /** Gets the stats instance. */\n  static get instance(): Stats {\n    return this.singletonInstance || (this.singletonInstance = new this());\n  }\n\n  /**\n   * Registers a view to listen to new measurements in its measure.\n   * @param view The view to be registered\n   */\n  registerView(view: View): void {\n    if (this.registeredViews[view.measure.name]) {\n      this.registeredViews[view.measure.name].push(view);\n    } else {\n      this.registeredViews[view.measure.name] = [view];\n    }\n\n    view.registered = true;\n\n    // Notifies all exporters\n    for (const exporter of this.statsEventListeners) {\n      // tslint:disable-next-line:deprecation\n      exporter.onRegisterView(view);\n    }\n  }\n\n  /**\n   * Creates a view.\n   * @param name The view name\n   * @param measure The view measure\n   * @param aggregation The view aggregation type\n   * @param tagKeys The view columns (tag keys)\n   * @param description The view description\n   * @param bucketBoundaries An optional The view bucket boundaries for a\n   *     distribution aggregation type\n   */\n  createView(\n    name: string,\n    measure: Measure,\n    aggregation: AggregationType,\n    tagKeys: TagKey[],\n    description: string,\n    bucketBoundaries?: number[]\n  ): View {\n    const view = new BaseView(\n      name,\n      measure,\n      aggregation,\n      tagKeys,\n      description,\n      bucketBoundaries\n    );\n    return view;\n  }\n\n  /**\n   * Registers an exporter to send stats data to a service.\n   * @param exporter An stats exporter\n   */\n  registerExporter(exporter: StatsEventListener): void {\n    this.statsEventListeners.push(exporter);\n\n    for (const measureName of Object.keys(this.registeredViews)) {\n      for (const view of this.registeredViews[measureName]) {\n        // tslint:disable-next-line:deprecation\n        exporter.onRegisterView(view);\n      }\n    }\n    exporter.start();\n  }\n\n  /**\n   * Unregisters an exporter. It should be called whenever the exporter is not\n   * needed anymore.\n   * @param exporter An stats exporter\n   */\n  unregisterExporter(exporter: StatsEventListener): void {\n    if (exporter) {\n      this.statsEventListeners = this.statsEventListeners.filter(\n        currentExporter => currentExporter !== exporter\n      );\n      exporter.stop();\n    }\n  }\n\n  /**\n   * Creates a measure of type Double.\n   * @param name The measure name\n   * @param unit The measure unit\n   * @param description An optional measure description\n   */\n  createMeasureDouble(\n    name: string,\n    unit: MeasureUnit,\n    description?: string\n  ): Measure {\n    return { name, unit, type: MeasureType.DOUBLE, description };\n  }\n\n  /**\n   * Creates a measure of type Int64. Values must be integers up to\n   * Number.MAX_SAFE_INTERGER.\n   * @param name The measure name\n   * @param unit The measure unit\n   * @param description An optional measure description\n   */\n  createMeasureInt64(\n    name: string,\n    unit: MeasureUnit,\n    description?: string\n  ): Measure {\n    return { name, unit, type: MeasureType.INT64, description };\n  }\n\n  /**\n   * Verifies whether all measurements has positive value\n   * @param measurements A list of measurements\n   * @returns Whether values is positive\n   */\n  private hasNegativeValue(measurements: Measurement[]): boolean {\n    return measurements.some(measurement => measurement.value < 0);\n  }\n\n  /**\n   * Gets a collection of produced Metric`s to be exported.\n   * @returns The List of metrics.\n   */\n  getMetrics(): Metric[] {\n    const metrics: Metric[] = [];\n\n    for (const measureName of Object.keys(this.registeredViews)) {\n      for (const view of this.registeredViews[measureName]) {\n        metrics.push(view.getMetric(view.startTime));\n      }\n    }\n\n    return metrics;\n  }\n\n  /**\n   * Updates all views with the new measurements.\n   * @param measurements A list of measurements to record\n   * @param tags optional The tags to which the value is applied.\n   *     tags could either be explicitly passed to the method, or implicitly\n   *     read from current execution context.\n   * @param attachments optional The contextual information associated with an\n   *     example value. THe contextual information is represented as key - value\n   *     string pairs.\n   */\n  record(\n    measurements: Measurement[],\n    tags?: TagMap,\n    attachments?: { [key: string]: string }\n  ): void {\n    if (this.hasNegativeValue(measurements)) {\n      this.logger.warn(`Dropping measurments ${measurements}, value to record\n          must be non-negative.`);\n      return;\n    }\n\n    if (!tags) {\n      // Record against implicit (current) context\n      tags = this.getCurrentTagContext();\n    }\n\n    for (const measurement of measurements) {\n      const views = this.registeredViews[measurement.measure.name];\n      if (!views) {\n        break;\n      }\n      // Updates all views\n      for (const view of views) {\n        view.recordMeasurement(measurement, tags, attachments);\n      }\n\n      // Notifies all exporters\n      for (const exporter of this.statsEventListeners) {\n        // tslint:disable-next-line:deprecation\n        exporter.onRecord(views, measurement, tags.tags);\n      }\n    }\n  }\n\n  /**\n   * Remove all registered Views and exporters from the stats.\n   */\n  clear(): void {\n    this.registeredViews = {};\n    this.statsEventListeners = [];\n  }\n\n  /**\n   * Enters the scope of code where the given `TagMap` is in the current context\n   * (replacing the previous `TagMap`).\n   * @param tags The TagMap to be set to the current context.\n   * @param fn Callback function.\n   * @returns The callback return.\n   */\n  withTagContext<T>(tags: TagMap, fn: cls.Func<T>): T {\n    return tagger.withTagContext<T>(this.contextManager, tags, fn);\n  }\n\n  /** Gets the current tag context. */\n  getCurrentTagContext(): TagMap {\n    return tagger.getCurrentTagContext(this.contextManager);\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"08cda5c5585119d2fbb9fec7d56daac1b03533d4"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_28eii3731h=function(){return actualCoverage;};}return actualCoverage;}cov_28eii3731h();cov_28eii3731h().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_28eii3731h().s[1]++;exports.BaseStats=void 0;const defaultLogger=(cov_28eii3731h().s[2]++,require("../common/console-logger"));const cls=(cov_28eii3731h().s[3]++,require("../internal/cls"));const metrics_1=(cov_28eii3731h().s[4]++,require("../metrics/metrics"));const tagger=(cov_28eii3731h().s[5]++,require("../tags/tagger"));const metric_producer_1=(cov_28eii3731h().s[6]++,require("./metric-producer"));const types_1=(cov_28eii3731h().s[7]++,require("./types"));const view_1=(cov_28eii3731h().s[8]++,require("./view"));class BaseStats{/**
     * Creates stats
     * @param logger
     */constructor(logger=(cov_28eii3731h().b[0][0]++,defaultLogger)){cov_28eii3731h().f[0]++;cov_28eii3731h().s[9]++;/** A list of Stats exporters */this.statsEventListeners=[];/** A map of Measures (name) to their corresponding Views */cov_28eii3731h().s[10]++;this.registeredViews={};cov_28eii3731h().s[11]++;this.logger=logger.logger();cov_28eii3731h().s[12]++;this.contextManager=cls.getNamespace();// Create a new MetricProducerForStats and register it to
// MetricProducerManager when Stats is initialized.
const metricProducer=(cov_28eii3731h().s[13]++,new metric_producer_1.MetricProducerForStats(this));cov_28eii3731h().s[14]++;metrics_1.Metrics.getMetricProducerManager().add(metricProducer);}/** Gets the stats instance. */static get instance(){cov_28eii3731h().f[1]++;cov_28eii3731h().s[15]++;return(cov_28eii3731h().b[1][0]++,this.singletonInstance)||(cov_28eii3731h().b[1][1]++,this.singletonInstance=new this());}/**
     * Registers a view to listen to new measurements in its measure.
     * @param view The view to be registered
     */registerView(view){cov_28eii3731h().f[2]++;cov_28eii3731h().s[16]++;if(this.registeredViews[view.measure.name]){cov_28eii3731h().b[2][0]++;cov_28eii3731h().s[17]++;this.registeredViews[view.measure.name].push(view);}else{cov_28eii3731h().b[2][1]++;cov_28eii3731h().s[18]++;this.registeredViews[view.measure.name]=[view];}cov_28eii3731h().s[19]++;view.registered=true;// Notifies all exporters
cov_28eii3731h().s[20]++;for(const exporter of this.statsEventListeners){cov_28eii3731h().s[21]++;// tslint:disable-next-line:deprecation
exporter.onRegisterView(view);}}/**
     * Creates a view.
     * @param name The view name
     * @param measure The view measure
     * @param aggregation The view aggregation type
     * @param tagKeys The view columns (tag keys)
     * @param description The view description
     * @param bucketBoundaries An optional The view bucket boundaries for a
     *     distribution aggregation type
     */createView(name,measure,aggregation,tagKeys,description,bucketBoundaries){cov_28eii3731h().f[3]++;const view=(cov_28eii3731h().s[22]++,new view_1.BaseView(name,measure,aggregation,tagKeys,description,bucketBoundaries));cov_28eii3731h().s[23]++;return view;}/**
     * Registers an exporter to send stats data to a service.
     * @param exporter An stats exporter
     */registerExporter(exporter){cov_28eii3731h().f[4]++;cov_28eii3731h().s[24]++;this.statsEventListeners.push(exporter);cov_28eii3731h().s[25]++;for(const measureName of Object.keys(this.registeredViews)){cov_28eii3731h().s[26]++;for(const view of this.registeredViews[measureName]){cov_28eii3731h().s[27]++;// tslint:disable-next-line:deprecation
exporter.onRegisterView(view);}}cov_28eii3731h().s[28]++;exporter.start();}/**
     * Unregisters an exporter. It should be called whenever the exporter is not
     * needed anymore.
     * @param exporter An stats exporter
     */unregisterExporter(exporter){cov_28eii3731h().f[5]++;cov_28eii3731h().s[29]++;if(exporter){cov_28eii3731h().b[3][0]++;cov_28eii3731h().s[30]++;this.statsEventListeners=this.statsEventListeners.filter(currentExporter=>{cov_28eii3731h().f[6]++;cov_28eii3731h().s[31]++;return currentExporter!==exporter;});cov_28eii3731h().s[32]++;exporter.stop();}else{cov_28eii3731h().b[3][1]++;}}/**
     * Creates a measure of type Double.
     * @param name The measure name
     * @param unit The measure unit
     * @param description An optional measure description
     */createMeasureDouble(name,unit,description){cov_28eii3731h().f[7]++;cov_28eii3731h().s[33]++;return{name,unit,type:types_1.MeasureType.DOUBLE,description};}/**
     * Creates a measure of type Int64. Values must be integers up to
     * Number.MAX_SAFE_INTERGER.
     * @param name The measure name
     * @param unit The measure unit
     * @param description An optional measure description
     */createMeasureInt64(name,unit,description){cov_28eii3731h().f[8]++;cov_28eii3731h().s[34]++;return{name,unit,type:types_1.MeasureType.INT64,description};}/**
     * Verifies whether all measurements has positive value
     * @param measurements A list of measurements
     * @returns Whether values is positive
     */hasNegativeValue(measurements){cov_28eii3731h().f[9]++;cov_28eii3731h().s[35]++;return measurements.some(measurement=>{cov_28eii3731h().f[10]++;cov_28eii3731h().s[36]++;return measurement.value<0;});}/**
     * Gets a collection of produced Metric`s to be exported.
     * @returns The List of metrics.
     */getMetrics(){cov_28eii3731h().f[11]++;const metrics=(cov_28eii3731h().s[37]++,[]);cov_28eii3731h().s[38]++;for(const measureName of Object.keys(this.registeredViews)){cov_28eii3731h().s[39]++;for(const view of this.registeredViews[measureName]){cov_28eii3731h().s[40]++;metrics.push(view.getMetric(view.startTime));}}cov_28eii3731h().s[41]++;return metrics;}/**
     * Updates all views with the new measurements.
     * @param measurements A list of measurements to record
     * @param tags optional The tags to which the value is applied.
     *     tags could either be explicitly passed to the method, or implicitly
     *     read from current execution context.
     * @param attachments optional The contextual information associated with an
     *     example value. THe contextual information is represented as key - value
     *     string pairs.
     */record(measurements,tags,attachments){cov_28eii3731h().f[12]++;cov_28eii3731h().s[42]++;if(this.hasNegativeValue(measurements)){cov_28eii3731h().b[4][0]++;cov_28eii3731h().s[43]++;this.logger.warn(`Dropping measurments ${measurements}, value to record
          must be non-negative.`);cov_28eii3731h().s[44]++;return;}else{cov_28eii3731h().b[4][1]++;}cov_28eii3731h().s[45]++;if(!tags){cov_28eii3731h().b[5][0]++;cov_28eii3731h().s[46]++;// Record against implicit (current) context
tags=this.getCurrentTagContext();}else{cov_28eii3731h().b[5][1]++;}cov_28eii3731h().s[47]++;for(const measurement of measurements){const views=(cov_28eii3731h().s[48]++,this.registeredViews[measurement.measure.name]);cov_28eii3731h().s[49]++;if(!views){cov_28eii3731h().b[6][0]++;cov_28eii3731h().s[50]++;break;}else{cov_28eii3731h().b[6][1]++;}// Updates all views
cov_28eii3731h().s[51]++;for(const view of views){cov_28eii3731h().s[52]++;view.recordMeasurement(measurement,tags,attachments);}// Notifies all exporters
cov_28eii3731h().s[53]++;for(const exporter of this.statsEventListeners){cov_28eii3731h().s[54]++;// tslint:disable-next-line:deprecation
exporter.onRecord(views,measurement,tags.tags);}}}/**
     * Remove all registered Views and exporters from the stats.
     */clear(){cov_28eii3731h().f[13]++;cov_28eii3731h().s[55]++;this.registeredViews={};cov_28eii3731h().s[56]++;this.statsEventListeners=[];}/**
     * Enters the scope of code where the given `TagMap` is in the current context
     * (replacing the previous `TagMap`).
     * @param tags The TagMap to be set to the current context.
     * @param fn Callback function.
     * @returns The callback return.
     */withTagContext(tags,fn){cov_28eii3731h().f[14]++;cov_28eii3731h().s[57]++;return tagger.withTagContext(this.contextManager,tags,fn);}/** Gets the current tag context. */getCurrentTagContext(){cov_28eii3731h().f[15]++;cov_28eii3731h().s[58]++;return tagger.getCurrentTagContext(this.contextManager);}}cov_28eii3731h().s[59]++;exports.BaseStats=BaseStats;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,