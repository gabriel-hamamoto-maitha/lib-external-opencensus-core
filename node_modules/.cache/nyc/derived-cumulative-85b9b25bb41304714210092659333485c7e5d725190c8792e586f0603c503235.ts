"use strict";/**
 * Copyright 2019, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_1ca6cllhim(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/cumulative/derived-cumulative.ts";var hash="0657d143b2eb84e8636a7b8f346c8a77f13cb725";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/cumulative/derived-cumulative.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:0},end:{line:18,column:35}},"2":{start:{line:19,column:20},end:{line:19,column:53}},"3":{start:{line:20,column:22},end:{line:20,column:57}},"4":{start:{line:21,column:13},end:{line:21,column:32}},"5":{start:{line:40,column:8},end:{line:40,column:45}},"6":{start:{line:41,column:8},end:{line:41,column:42}},"7":{start:{line:42,column:8},end:{line:42,column:48}},"8":{start:{line:43,column:36},end:{line:43,column:76}},"9":{start:{line:44,column:8},end:{line:44,column:64}},"10":{start:{line:45,column:8},end:{line:51,column:10}},"11":{start:{line:52,column:8},end:{line:52,column:35}},"12":{start:{line:68,column:8},end:{line:68,column:124}},"13":{start:{line:69,column:8},end:{line:69,column:54}},"14":{start:{line:70,column:21},end:{line:70,column:54}},"15":{start:{line:71,column:8},end:{line:73,column:9}},"16":{start:{line:72,column:12},end:{line:72,column:92}},"17":{start:{line:74,column:8},end:{line:76,column:9}},"18":{start:{line:75,column:12},end:{line:75,column:80}},"19":{start:{line:77,column:8},end:{line:97,column:9}},"20":{start:{line:78,column:12},end:{line:78,column:37}},"21":{start:{line:80,column:13},end:{line:97,column:9}},"22":{start:{line:81,column:12},end:{line:81,column:54}},"23":{start:{line:81,column:35},end:{line:81,column:53}},"24":{start:{line:83,column:13},end:{line:97,column:9}},"25":{start:{line:84,column:12},end:{line:84,column:50}},"26":{start:{line:84,column:35},end:{line:84,column:49}},"27":{start:{line:86,column:13},end:{line:97,column:9}},"28":{start:{line:87,column:12},end:{line:87,column:52}},"29":{start:{line:87,column:35},end:{line:87,column:51}},"30":{start:{line:89,column:13},end:{line:97,column:9}},"31":{start:{line:90,column:12},end:{line:90,column:48}},"32":{start:{line:90,column:35},end:{line:90,column:47}},"33":{start:{line:92,column:13},end:{line:97,column:9}},"34":{start:{line:93,column:12},end:{line:93,column:50}},"35":{start:{line:93,column:35},end:{line:93,column:49}},"36":{start:{line:96,column:12},end:{line:96,column:61}},"37":{start:{line:98,column:8},end:{line:102,column:11}},"38":{start:{line:112,column:8},end:{line:112,column:66}},"39":{start:{line:113,column:8},end:{line:113,column:72}},"40":{start:{line:120,column:8},end:{line:120,column:38}},"41":{start:{line:128,column:8},end:{line:130,column:9}},"42":{start:{line:129,column:12},end:{line:129,column:24}},"43":{start:{line:131,column:26},end:{line:131,column:69}},"44":{start:{line:132,column:8},end:{line:149,column:10}},"45":{start:{line:135,column:33},end:{line:135,column:60}},"46":{start:{line:136,column:30},end:{line:138,column:47}},"47":{start:{line:139,column:16},end:{line:139,column:50}},"48":{start:{line:140,column:16},end:{line:147,column:18}},"49":{start:{line:152,column:0},end:{line:152,column:46}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:39,column:4},end:{line:39,column:5}},loc:{start:{line:39,column:85},end:{line:53,column:5}},line:39},"1":{name:"(anonymous_1)",decl:{start:{line:67,column:4},end:{line:67,column:5}},loc:{start:{line:67,column:43},end:{line:103,column:5}},line:67},"2":{name:"(anonymous_2)",decl:{start:{line:81,column:29},end:{line:81,column:30}},loc:{start:{line:81,column:35},end:{line:81,column:53}},line:81},"3":{name:"(anonymous_3)",decl:{start:{line:84,column:29},end:{line:84,column:30}},loc:{start:{line:84,column:35},end:{line:84,column:49}},line:84},"4":{name:"(anonymous_4)",decl:{start:{line:87,column:29},end:{line:87,column:30}},loc:{start:{line:87,column:35},end:{line:87,column:51}},line:87},"5":{name:"(anonymous_5)",decl:{start:{line:90,column:29},end:{line:90,column:30}},loc:{start:{line:90,column:35},end:{line:90,column:47}},line:90},"6":{name:"(anonymous_6)",decl:{start:{line:93,column:29},end:{line:93,column:30}},loc:{start:{line:93,column:35},end:{line:93,column:49}},line:93},"7":{name:"(anonymous_7)",decl:{start:{line:111,column:4},end:{line:111,column:5}},loc:{start:{line:111,column:34},end:{line:114,column:5}},line:111},"8":{name:"(anonymous_8)",decl:{start:{line:119,column:4},end:{line:119,column:5}},loc:{start:{line:119,column:12},end:{line:121,column:5}},line:119},"9":{name:"(anonymous_9)",decl:{start:{line:127,column:4},end:{line:127,column:5}},loc:{start:{line:127,column:16},end:{line:150,column:5}},line:127},"10":{name:"(anonymous_10)",decl:{start:{line:134,column:58},end:{line:134,column:59}},loc:{start:{line:134,column:84},end:{line:148,column:13}},line:134}},branchMap:{"0":{loc:{start:{line:71,column:8},end:{line:73,column:9}},type:"if",locations:[{start:{line:71,column:8},end:{line:73,column:9}},{start:{line:71,column:8},end:{line:73,column:9}}],line:71},"1":{loc:{start:{line:74,column:8},end:{line:76,column:9}},type:"if",locations:[{start:{line:74,column:8},end:{line:76,column:9}},{start:{line:74,column:8},end:{line:76,column:9}}],line:74},"2":{loc:{start:{line:77,column:8},end:{line:97,column:9}},type:"if",locations:[{start:{line:77,column:8},end:{line:97,column:9}},{start:{line:77,column:8},end:{line:97,column:9}}],line:77},"3":{loc:{start:{line:80,column:13},end:{line:97,column:9}},type:"if",locations:[{start:{line:80,column:13},end:{line:97,column:9}},{start:{line:80,column:13},end:{line:97,column:9}}],line:80},"4":{loc:{start:{line:83,column:13},end:{line:97,column:9}},type:"if",locations:[{start:{line:83,column:13},end:{line:97,column:9}},{start:{line:83,column:13},end:{line:97,column:9}}],line:83},"5":{loc:{start:{line:86,column:13},end:{line:97,column:9}},type:"if",locations:[{start:{line:86,column:13},end:{line:97,column:9}},{start:{line:86,column:13},end:{line:97,column:9}}],line:86},"6":{loc:{start:{line:89,column:13},end:{line:97,column:9}},type:"if",locations:[{start:{line:89,column:13},end:{line:97,column:9}},{start:{line:89,column:13},end:{line:97,column:9}}],line:89},"7":{loc:{start:{line:92,column:13},end:{line:97,column:9}},type:"if",locations:[{start:{line:92,column:13},end:{line:97,column:9}},{start:{line:92,column:13},end:{line:97,column:9}}],line:92},"8":{loc:{start:{line:128,column:8},end:{line:130,column:9}},type:"if",locations:[{start:{line:128,column:8},end:{line:130,column:9}},{start:{line:128,column:8},end:{line:130,column:9}}],line:128},"9":{loc:{start:{line:136,column:30},end:{line:138,column:47}},type:"cond-expr",locations:[{start:{line:137,column:22},end:{line:137,column:30}},{start:{line:138,column:22},end:{line:138,column:47}}],line:136}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/cumulative/derived-cumulative.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/cumulative/derived-cumulative.ts"],names:[],mappings:"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",sourcesContent:["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getTimestampWithProcessHRTime } from '../../common/time-util';\nimport {\n  validateArrayElementsNotNull,\n  validateNotNull,\n} from '../../common/validations';\nimport {\n  LabelKey,\n  LabelValue,\n  Metric,\n  MetricDescriptor,\n  MetricDescriptorType,\n  TimeSeries,\n  Timestamp,\n} from '../export/types';\nimport { Meter } from '../types';\nimport { AccessorInterface } from '../types';\nimport * as util from '../utils';\n\ntype ValueExtractor = () => number;\n\n/**\n * An interface that describes the entry for every TimeSeries (Point) added to\n * the Cumulative metric.\n */\ninterface CumulativeEntry {\n  /** The list of the label values. */\n  readonly labelValues: LabelValue[];\n  /** The function to get the actual value of point. */\n  readonly extractor: ValueExtractor;\n  /** The previous value of the point. */\n  prevValue: number;\n}\n\n/**\n * DerivedCumulative metric is used to record aggregated metrics that\n * represents a single numerical value accumulated over a time interval.\n */\nexport class DerivedCumulative implements Meter {\n  private metricDescriptor: MetricDescriptor;\n  private labelKeysLength: number;\n  private registeredPoints: Map<string, CumulativeEntry> = new Map();\n  private extractor?: ValueExtractor;\n  private readonly constantLabelValues: LabelValue[];\n  private startTime: Timestamp;\n\n  /**\n   * Constructs a new DerivedCumulative instance.\n   *\n   * @param name The name of the metric.\n   * @param description The description of the metric.\n   * @param unit The unit of the metric.\n   * @param type The type of metric.\n   * @param labelKeys The list of the label keys.\n   * @param constantLabels The map of constant labels for the Metric.\n   * @param startTime The time when the cumulative metric start measuring the\n   *     value.\n   */\n  constructor(\n    name: string,\n    description: string,\n    unit: string,\n    type: MetricDescriptorType,\n    labelKeys: LabelKey[],\n    readonly constantLabels: Map<LabelKey, LabelValue>,\n    startTime: Timestamp\n  ) {\n    this.labelKeysLength = labelKeys.length;\n    const keysAndConstantKeys = [...labelKeys, ...constantLabels.keys()];\n    this.constantLabelValues = [...constantLabels.values()];\n\n    this.metricDescriptor = {\n      name,\n      description,\n      unit,\n      type,\n      labelKeys: keysAndConstantKeys,\n    };\n    this.startTime = startTime;\n  }\n\n  /**\n   * Creates a TimeSeries. The value of a single point in the TimeSeries is\n   * observed from an object or function. The ValueExtractor is invoked whenever\n   * metrics are collected, meaning the reported value is up-to-date.\n   *\n   * @param labelValues The list of the label values.\n   * @param objOrFn obj The obj to get the size or length or value from. If\n   *     multiple options are available, the value (ToValueInterface) takes\n   *     precedence first, followed by length and size. e.g value -> length ->\n   *     size.\n   *     fn is the function that will be called to get the current value\n   *     of the cumulative.\n   */\n  createTimeSeries(\n    labelValues: LabelValue[],\n    objOrFn: AccessorInterface\n  ): void {\n    validateArrayElementsNotNull(\n      validateNotNull(labelValues, 'labelValues'),\n      'labelValue'\n    );\n    validateNotNull(objOrFn, 'obj');\n\n    const hash = util.hashLabelValues(labelValues);\n    if (this.registeredPoints.has(hash)) {\n      throw new Error(\n        'A different time series with the same labels already exists.'\n      );\n    }\n    if (this.labelKeysLength !== labelValues.length) {\n      throw new Error(\"Label Keys and Label Values don't have same size\");\n    }\n\n    if (objOrFn instanceof Function) {\n      this.extractor = objOrFn;\n    } else if (util.isToValueInterface(objOrFn)) {\n      this.extractor = () => objOrFn.getValue();\n    } else if (util.isLengthAttributeInterface(objOrFn)) {\n      this.extractor = () => objOrFn.length;\n    } else if (util.isLengthMethodInterface(objOrFn)) {\n      this.extractor = () => objOrFn.length();\n    } else if (util.isSizeAttributeInterface(objOrFn)) {\n      this.extractor = () => objOrFn.size;\n    } else if (util.isSizeMethodInterface(objOrFn)) {\n      this.extractor = () => objOrFn.size();\n    } else {\n      throw new Error('Unknown interface/object type');\n    }\n\n    this.registeredPoints.set(hash, {\n      labelValues,\n      extractor: this.extractor,\n      prevValue: 0,\n    });\n  }\n\n  /**\n   * Removes the TimeSeries from the cumulative metric, if it is present. i.e.\n   * references to previous Point objects are invalid (not part of the\n   * metric).\n   *\n   * @param labelValues The list of label values.\n   */\n  removeTimeSeries(labelValues: LabelValue[]): void {\n    validateNotNull(labelValues, 'labelValues');\n    this.registeredPoints.delete(util.hashLabelValues(labelValues));\n  }\n\n  /**\n   * Removes all TimeSeries from the cumulative metric. i.e. references to all\n   * previous Point objects are invalid (not part of the metric).\n   */\n  clear(): void {\n    this.registeredPoints.clear();\n  }\n\n  /**\n   * Provides a Metric with one or more TimeSeries.\n   *\n   * @returns The Metric, or null if TimeSeries is not present in Metric.\n   */\n  getMetric(): Metric | null {\n    if (this.registeredPoints.size === 0) {\n      return null;\n    }\n    const timestamp: Timestamp = getTimestampWithProcessHRTime();\n    return {\n      descriptor: this.metricDescriptor,\n      timeseries: Array.from(\n        this.registeredPoints,\n        ([_, cumulativeEntry]): TimeSeries => {\n          const newValue = cumulativeEntry.extractor();\n          const value =\n            newValue > cumulativeEntry.prevValue\n              ? newValue\n              : cumulativeEntry.prevValue;\n          cumulativeEntry.prevValue = value;\n\n          return {\n            labelValues: [\n              ...cumulativeEntry.labelValues,\n              ...this.constantLabelValues,\n            ],\n            points: [{ value, timestamp }],\n            startTimestamp: this.startTime,\n          };\n        }\n      ),\n    };\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"0657d143b2eb84e8636a7b8f346c8a77f13cb725"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1ca6cllhim=function(){return actualCoverage;};}return actualCoverage;}cov_1ca6cllhim();cov_1ca6cllhim().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_1ca6cllhim().s[1]++;exports.DerivedCumulative=void 0;const time_util_1=(cov_1ca6cllhim().s[2]++,require("../../common/time-util"));const validations_1=(cov_1ca6cllhim().s[3]++,require("../../common/validations"));const util=(cov_1ca6cllhim().s[4]++,require("../utils"));/**
 * DerivedCumulative metric is used to record aggregated metrics that
 * represents a single numerical value accumulated over a time interval.
 */class DerivedCumulative{/**
     * Constructs a new DerivedCumulative instance.
     *
     * @param name The name of the metric.
     * @param description The description of the metric.
     * @param unit The unit of the metric.
     * @param type The type of metric.
     * @param labelKeys The list of the label keys.
     * @param constantLabels The map of constant labels for the Metric.
     * @param startTime The time when the cumulative metric start measuring the
     *     value.
     */constructor(name,description,unit,type,labelKeys,constantLabels,startTime){cov_1ca6cllhim().f[0]++;cov_1ca6cllhim().s[5]++;this.constantLabels=constantLabels;cov_1ca6cllhim().s[6]++;this.registeredPoints=new Map();cov_1ca6cllhim().s[7]++;this.labelKeysLength=labelKeys.length;const keysAndConstantKeys=(cov_1ca6cllhim().s[8]++,[...labelKeys,...constantLabels.keys()]);cov_1ca6cllhim().s[9]++;this.constantLabelValues=[...constantLabels.values()];cov_1ca6cllhim().s[10]++;this.metricDescriptor={name,description,unit,type,labelKeys:keysAndConstantKeys};cov_1ca6cllhim().s[11]++;this.startTime=startTime;}/**
     * Creates a TimeSeries. The value of a single point in the TimeSeries is
     * observed from an object or function. The ValueExtractor is invoked whenever
     * metrics are collected, meaning the reported value is up-to-date.
     *
     * @param labelValues The list of the label values.
     * @param objOrFn obj The obj to get the size or length or value from. If
     *     multiple options are available, the value (ToValueInterface) takes
     *     precedence first, followed by length and size. e.g value -> length ->
     *     size.
     *     fn is the function that will be called to get the current value
     *     of the cumulative.
     */createTimeSeries(labelValues,objOrFn){cov_1ca6cllhim().f[1]++;cov_1ca6cllhim().s[12]++;validations_1.validateArrayElementsNotNull(validations_1.validateNotNull(labelValues,'labelValues'),'labelValue');cov_1ca6cllhim().s[13]++;validations_1.validateNotNull(objOrFn,'obj');const hash=(cov_1ca6cllhim().s[14]++,util.hashLabelValues(labelValues));cov_1ca6cllhim().s[15]++;if(this.registeredPoints.has(hash)){cov_1ca6cllhim().b[0][0]++;cov_1ca6cllhim().s[16]++;throw new Error('A different time series with the same labels already exists.');}else{cov_1ca6cllhim().b[0][1]++;}cov_1ca6cllhim().s[17]++;if(this.labelKeysLength!==labelValues.length){cov_1ca6cllhim().b[1][0]++;cov_1ca6cllhim().s[18]++;throw new Error("Label Keys and Label Values don't have same size");}else{cov_1ca6cllhim().b[1][1]++;}cov_1ca6cllhim().s[19]++;if(objOrFn instanceof Function){cov_1ca6cllhim().b[2][0]++;cov_1ca6cllhim().s[20]++;this.extractor=objOrFn;}else{cov_1ca6cllhim().b[2][1]++;cov_1ca6cllhim().s[21]++;if(util.isToValueInterface(objOrFn)){cov_1ca6cllhim().b[3][0]++;cov_1ca6cllhim().s[22]++;this.extractor=()=>{cov_1ca6cllhim().f[2]++;cov_1ca6cllhim().s[23]++;return objOrFn.getValue();};}else{cov_1ca6cllhim().b[3][1]++;cov_1ca6cllhim().s[24]++;if(util.isLengthAttributeInterface(objOrFn)){cov_1ca6cllhim().b[4][0]++;cov_1ca6cllhim().s[25]++;this.extractor=()=>{cov_1ca6cllhim().f[3]++;cov_1ca6cllhim().s[26]++;return objOrFn.length;};}else{cov_1ca6cllhim().b[4][1]++;cov_1ca6cllhim().s[27]++;if(util.isLengthMethodInterface(objOrFn)){cov_1ca6cllhim().b[5][0]++;cov_1ca6cllhim().s[28]++;this.extractor=()=>{cov_1ca6cllhim().f[4]++;cov_1ca6cllhim().s[29]++;return objOrFn.length();};}else{cov_1ca6cllhim().b[5][1]++;cov_1ca6cllhim().s[30]++;if(util.isSizeAttributeInterface(objOrFn)){cov_1ca6cllhim().b[6][0]++;cov_1ca6cllhim().s[31]++;this.extractor=()=>{cov_1ca6cllhim().f[5]++;cov_1ca6cllhim().s[32]++;return objOrFn.size;};}else{cov_1ca6cllhim().b[6][1]++;cov_1ca6cllhim().s[33]++;if(util.isSizeMethodInterface(objOrFn)){cov_1ca6cllhim().b[7][0]++;cov_1ca6cllhim().s[34]++;this.extractor=()=>{cov_1ca6cllhim().f[6]++;cov_1ca6cllhim().s[35]++;return objOrFn.size();};}else{cov_1ca6cllhim().b[7][1]++;cov_1ca6cllhim().s[36]++;throw new Error('Unknown interface/object type');}}}}}}cov_1ca6cllhim().s[37]++;this.registeredPoints.set(hash,{labelValues,extractor:this.extractor,prevValue:0});}/**
     * Removes the TimeSeries from the cumulative metric, if it is present. i.e.
     * references to previous Point objects are invalid (not part of the
     * metric).
     *
     * @param labelValues The list of label values.
     */removeTimeSeries(labelValues){cov_1ca6cllhim().f[7]++;cov_1ca6cllhim().s[38]++;validations_1.validateNotNull(labelValues,'labelValues');cov_1ca6cllhim().s[39]++;this.registeredPoints.delete(util.hashLabelValues(labelValues));}/**
     * Removes all TimeSeries from the cumulative metric. i.e. references to all
     * previous Point objects are invalid (not part of the metric).
     */clear(){cov_1ca6cllhim().f[8]++;cov_1ca6cllhim().s[40]++;this.registeredPoints.clear();}/**
     * Provides a Metric with one or more TimeSeries.
     *
     * @returns The Metric, or null if TimeSeries is not present in Metric.
     */getMetric(){cov_1ca6cllhim().f[9]++;cov_1ca6cllhim().s[41]++;if(this.registeredPoints.size===0){cov_1ca6cllhim().b[8][0]++;cov_1ca6cllhim().s[42]++;return null;}else{cov_1ca6cllhim().b[8][1]++;}const timestamp=(cov_1ca6cllhim().s[43]++,time_util_1.getTimestampWithProcessHRTime());cov_1ca6cllhim().s[44]++;return{descriptor:this.metricDescriptor,timeseries:Array.from(this.registeredPoints,([_,cumulativeEntry])=>{cov_1ca6cllhim().f[10]++;const newValue=(cov_1ca6cllhim().s[45]++,cumulativeEntry.extractor());const value=(cov_1ca6cllhim().s[46]++,newValue>cumulativeEntry.prevValue?(cov_1ca6cllhim().b[9][0]++,newValue):(cov_1ca6cllhim().b[9][1]++,cumulativeEntry.prevValue));cov_1ca6cllhim().s[47]++;cumulativeEntry.prevValue=value;cov_1ca6cllhim().s[48]++;return{labelValues:[...cumulativeEntry.labelValues,...this.constantLabelValues],points:[{value,timestamp}],startTimestamp:this.startTime};})};}}cov_1ca6cllhim().s[49]++;exports.DerivedCumulative=DerivedCumulative;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,