{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/internal/clock.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/internal/clock.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH;;GAEG;AACH,MAAa,KAAK;IAUhB,uCAAuC;IACvC,YAAY,SAAgB;QAV5B,wCAAwC;QAChC,eAAU,GAAG,KAAK,CAAC;QAK3B,uDAAuD;QAC/C,SAAI,GAAqB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAItC,yEAAyE;QACzE,+BAA+B;QAC/B,IAAI,CAAC,cAAc,GAAG,SAAS,IAAI,IAAI,IAAI,EAAE,CAAC;QAC9C,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;IACtC,CAAC;IAED,sBAAsB;IACtB,GAAG;QACD,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,OAAO;SACR;QACD,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC7C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;IACzB,CAAC;IAED,uEAAuE;IACvE,IAAI,WAAW;QACb,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC9C,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACnC,MAAM,QAAQ,GAAG,EAAE,GAAG,GAAG,CAAC;QAC1B,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,QAAQ,CAAC,CAAC;IACvD,CAAC;IAED,sCAAsC;IACtC,IAAI,QAAQ;QACV,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,OAAO,CAAC,CAAC;SACV;QACD,MAAM,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC7C,OAAO,EAAE,GAAG,GAAG,CAAC;IAClB,CAAC;IAED,wBAAwB;IACxB,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IAED;;;OAGG;IACH,IAAI,OAAO;QACT,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC3D;QACD,OAAO,IAAI,IAAI,EAAE,CAAC;IACpB,CAAC;IAED,wCAAwC;IACxC,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;CACF;AAhED,sBAgEC","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The Clock class is used to record the duration and endTime for spans.\n */\nexport class Clock {\n  /** Indicates if the clock is endend. */\n  private endedLocal = false;\n  /** Indicates the clock's start time. */\n  private startTimeLocal: Date;\n  /** The time in high resolution in a [seconds, nanoseconds]. */\n  private hrtimeLocal: [number, number];\n  /** The duration between start and end of the clock. */\n  private diff: [number, number] = [0, 0];\n\n  /** Constructs a new Clock instance. */\n  constructor(startTime?: Date) {\n    // In some cases clocks need to be relative to other resources, passing a\n    // startTime makes it possible.\n    this.startTimeLocal = startTime || new Date();\n    this.hrtimeLocal = process.hrtime();\n  }\n\n  /** Ends the clock. */\n  end(): void {\n    if (this.endedLocal) {\n      return;\n    }\n    this.diff = process.hrtime(this.hrtimeLocal);\n    this.endedLocal = true;\n  }\n\n  /** Gets the current date from ellapsed milliseconds and start time. */\n  get currentDate(): Date {\n    const diff = process.hrtime(this.hrtimeLocal);\n    const ns = diff[0] * 1e9 + diff[1];\n    const ellapsed = ns / 1e6;\n    return new Date(this.startTime.getTime() + ellapsed);\n  }\n\n  /** Gets the duration of the clock. */\n  get duration(): number {\n    if (!this.endedLocal) {\n      return 0;\n    }\n    const ns = this.diff[0] * 1e9 + this.diff[1];\n    return ns / 1e6;\n  }\n\n  /** Starts the clock. */\n  get startTime(): Date {\n    return this.startTimeLocal;\n  }\n\n  /**\n   * Gets the time so far.\n   * @returns A Date object with the current duration.\n   */\n  get endTime(): Date {\n    if (this.ended) {\n      return new Date(this.startTime.getTime() + this.duration);\n    }\n    return new Date();\n  }\n\n  /** Indicates if the clock was ended. */\n  get ended(): boolean {\n    return this.endedLocal;\n  }\n}\n"]}