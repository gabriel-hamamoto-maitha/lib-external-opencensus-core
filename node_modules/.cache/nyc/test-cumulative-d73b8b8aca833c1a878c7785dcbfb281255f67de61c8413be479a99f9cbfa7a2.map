{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-cumulative.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-cumulative.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport { TEST_ONLY } from '../src/common/time-util';\nimport { Cumulative } from '../src/metrics/cumulative/cumulative';\nimport {\n  LabelKey,\n  LabelValue,\n  MetricDescriptorType,\n  Timestamp,\n} from '../src/metrics/export/types';\n\nconst METRIC_NAME = 'metric-name';\nconst METRIC_DESCRIPTION = 'metric-description';\nconst UNIT = '1';\nconst CUMULATIVE_INT64 = MetricDescriptorType.CUMULATIVE_INT64;\nconst CUMULATIVE_DOUBLE = MetricDescriptorType.CUMULATIVE_DOUBLE;\nconst LABEL_KEYS: LabelKey[] = [{ key: 'code', description: 'desc' }];\nconst LABEL_VALUES_200: LabelValue[] = [{ value: '200' }];\nconst LABEL_VALUES_400: LabelValue[] = [{ value: '400' }];\nconst LABEL_VALUES_EXRTA: LabelValue[] = [{ value: '200' }, { value: '400' }];\nconst UNSET_LABEL_VALUE: LabelValue = {\n  value: null,\n};\nconst EMPTY_CONSTANT_LABELS = new Map();\nconst CONSTANT_LABELS = new Map();\nCONSTANT_LABELS.set(\n  { key: 'host', description: 'host' },\n  { value: 'localhost' }\n);\n\ndescribe('CUMULATIVE', () => {\n  let instance: Cumulative;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n  const expectedMetricDescriptor = {\n    name: METRIC_NAME,\n    description: METRIC_DESCRIPTION,\n    unit: UNIT,\n    type: CUMULATIVE_INT64,\n    labelKeys: LABEL_KEYS,\n  };\n\n  beforeEach(() => {\n    instance = new Cumulative(\n      METRIC_NAME,\n      METRIC_DESCRIPTION,\n      UNIT,\n      CUMULATIVE_INT64,\n      LABEL_KEYS,\n      EMPTY_CONSTANT_LABELS\n    );\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  describe('getOrCreateTimeSeries()', () => {\n    it('should return a Metric', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      point.inc();\n\n      let metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 1, timestamp: mockedTime }],\n          startTimestamp: mockedTime,\n        },\n      ]);\n\n      // inc value and create new timeseries.\n      point.inc(5);\n      const point1 = instance.getOrCreateTimeSeries(LABEL_VALUES_400);\n      point1.inc();\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 2);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 6, timestamp: mockedTime }],\n          startTimestamp: mockedTime,\n        },\n        {\n          labelValues: LABEL_VALUES_400,\n          points: [{ value: 1, timestamp: mockedTime }],\n          startTimestamp: mockedTime,\n        },\n      ]);\n    });\n\n    it('should throw an error when the keys and values dont have same size', () => {\n      assert.throws(() => {\n        instance.getOrCreateTimeSeries(LABEL_VALUES_EXRTA);\n      }, /^Error: Label Keys and Label Values don't have same size$/);\n    });\n\n    it('should throw an error when the inc number is negative', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      assert.throws(() => {\n        point.inc(-10);\n      }, /^Error: It is not possible to decrease a cumulative metric$/);\n    });\n\n    it('should throw an error when the inc input is NaN', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      assert.throws(() => {\n        point.inc(NaN);\n      }, /^TypeError: Value is not a valid number: NaN$/);\n    });\n\n    it('should throw a TypeError when the inc number is not finite', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      assert.throws(() => {\n        point.inc(100 / 0);\n      }, /^TypeError: Value is not a valid number: Infinity$/);\n    });\n\n    it('should reset the point value', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      point.inc(10);\n      point.reset();\n      point.inc();\n      const metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 1, timestamp: mockedTime }],\n          startTimestamp: mockedTime,\n        },\n      ]);\n    });\n\n    it('should not create same timeseries again', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      point.inc(10);\n      let metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 10, timestamp: mockedTime }],\n          startTimestamp: mockedTime,\n        },\n      ]);\n      // create timeseries with same labels.\n      const point1 = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      point1.inc(30);\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [{ value: 40, timestamp: mockedTime }],\n          startTimestamp: mockedTime,\n        },\n      ]);\n    });\n  });\n\n  describe('getDefaultTimeSeries()', () => {\n    it('should create new default timeseries', () => {\n      const point = instance.getDefaultTimeSeries();\n      point.inc(10);\n\n      // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n      process.hrtime = () => [100, 1e7];\n      Date.now = () => 1480000000000;\n      // Force the clock to recalibrate the time offset with the mocked time\n      TEST_ONLY.setHrtimeReference();\n\n      const metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: [UNSET_LABEL_VALUE],\n          points: [\n            { value: 10, timestamp: { seconds: 1480000100, nanos: 1e7 } },\n          ],\n          startTimestamp: mockedTime,\n        },\n      ]);\n    });\n\n    it('should return same timeseries for interchanged labels', () => {\n      instance = new Cumulative(\n        METRIC_NAME,\n        METRIC_DESCRIPTION,\n        UNIT,\n        CUMULATIVE_INT64,\n        [\n          { key: 'k1', description: 'desc' },\n          { key: 'k2', description: 'desc' },\n        ],\n        EMPTY_CONSTANT_LABELS\n      );\n      const point = instance.getOrCreateTimeSeries([\n        { value: '200' },\n        { value: '400' },\n      ]);\n      point.inc(200);\n      const point1 = instance.getOrCreateTimeSeries([\n        { value: '400' },\n        { value: '200' },\n      ]);\n      point1.inc(400);\n      const metric = instance.getMetric();\n      assert.strictEqual(metric!.timeseries.length, 1);\n    });\n\n    it('should add constant labels', () => {\n      instance = new Cumulative(\n        METRIC_NAME,\n        METRIC_DESCRIPTION,\n        UNIT,\n        CUMULATIVE_DOUBLE,\n        [\n          { key: 'k1', description: 'desc' },\n          { key: 'k2', description: 'desc' },\n        ],\n        CONSTANT_LABELS\n      );\n      const point = instance.getOrCreateTimeSeries([\n        { value: '200' },\n        { value: '400' },\n      ]);\n      point.inc(200);\n      const metric = instance.getMetric();\n      assert.strictEqual(metric!.descriptor.type, 5);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.descriptor.labelKeys, [\n        { key: 'k1', description: 'desc' },\n        { key: 'k2', description: 'desc' },\n        { key: 'host', description: 'host' },\n      ]);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: [\n            { value: '200' },\n            { value: '400' },\n            { value: 'localhost' },\n          ],\n          points: [{ value: 200, timestamp: mockedTime }],\n          startTimestamp: mockedTime,\n        },\n      ]);\n    });\n\n    it('should create same labelValues as labelKeys', () => {\n      instance = new Cumulative(\n        METRIC_NAME,\n        METRIC_DESCRIPTION,\n        UNIT,\n        CUMULATIVE_DOUBLE,\n        [\n          { key: 'k1', description: 'desc' },\n          { key: 'k2', description: 'desc' },\n          { key: 'k3', description: 'desc' },\n        ],\n        EMPTY_CONSTANT_LABELS\n      );\n      const point = instance.getDefaultTimeSeries();\n      point.inc(200);\n      const metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor.labelKeys.length, 3);\n      assert.deepStrictEqual(metric!.descriptor.type, 5);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: [\n            UNSET_LABEL_VALUE,\n            UNSET_LABEL_VALUE,\n            UNSET_LABEL_VALUE,\n          ],\n          points: [{ value: 200, timestamp: mockedTime }],\n          startTimestamp: mockedTime,\n        },\n      ]);\n    });\n\n    it('should use previously created default timeseries', () => {\n      const point = instance.getDefaultTimeSeries();\n      point.inc(300);\n      let metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: [UNSET_LABEL_VALUE],\n          points: [{ value: 300, timestamp: mockedTime }],\n          startTimestamp: mockedTime,\n        },\n      ]);\n      // get default timeseries again.\n      const point1 = instance.getDefaultTimeSeries();\n      point1.inc(400);\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: [UNSET_LABEL_VALUE],\n          points: [{ value: 700, timestamp: mockedTime }],\n          startTimestamp: mockedTime,\n        },\n      ]);\n    });\n  });\n\n  describe('removeTimeSeries()', () => {\n    it('should remove TimeSeries', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      point.inc(10);\n      let metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      instance.removeTimeSeries(LABEL_VALUES_200);\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric, null);\n    });\n  });\n\n  describe('clear()', () => {\n    it('should clear all TimeSeries', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      point.inc(10);\n      const point1 = instance.getOrCreateTimeSeries(LABEL_VALUES_400);\n      point1.inc(10);\n      let metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 2);\n      instance.clear();\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric, null);\n    });\n  });\n});\n"]}