{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/metric-registry.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/metric-registry.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getTimestampWithProcessHRTime } from '../common/time-util';\nimport {\n  validateArrayElementsNotNull,\n  validateDuplicateKeys,\n  validateMapElementNotNull,\n  validateNotNull,\n} from '../common/validations';\nimport { MeasureUnit } from '../stats/types';\nimport { Cumulative } from './cumulative/cumulative';\nimport { DerivedCumulative } from './cumulative/derived-cumulative';\nimport { BaseMetricProducer } from './export/base-metric-producer';\nimport {\n  LabelKey,\n  LabelValue,\n  Metric,\n  MetricDescriptorType,\n  MetricProducer,\n  Timestamp,\n} from './export/types';\nimport { DerivedGauge } from './gauges/derived-gauge';\nimport { Gauge } from './gauges/gauge';\nimport { Meter, MetricOptions } from './types';\n\n/**\n * Creates and manages application's set of metrics.\n */\nexport class MetricRegistry {\n  private registeredMetrics: Map<string, Meter> = new Map();\n  private metricProducer: MetricProducer;\n\n  private static readonly NAME = 'name';\n  private static readonly LABEL_KEY = 'labelKey';\n  private static readonly CONSTANT_LABELS = 'constantLabels';\n  private static readonly DEFAULT_DESCRIPTION = '';\n  private static readonly DEFAULT_UNIT = MeasureUnit.UNIT;\n  private static readonly DEFAULT_LABEL_KEYS = [];\n  private static readonly DEFAULT_CONSTANT_LABEL = new Map();\n\n  constructor() {\n    this.metricProducer = new MetricProducerForRegistry(this.registeredMetrics);\n  }\n\n  /**\n   * Builds a new Int64 gauge to be added to the registry. This is more\n   * convenient form when you want to manually increase and decrease values as\n   * per your service requirements.\n   *\n   * @param name The name of the metric.\n   * @param options The options for the metric.\n   * @returns A Int64 Gauge metric.\n   */\n  addInt64Gauge(name: string, options?: MetricOptions): Gauge {\n    const description =\n      (options && options.description) || MetricRegistry.DEFAULT_DESCRIPTION;\n    const unit = (options && options.unit) || MetricRegistry.DEFAULT_UNIT;\n    const labelKeys =\n      (options && options.labelKeys) || MetricRegistry.DEFAULT_LABEL_KEYS;\n    const constantLabels =\n      (options && options.constantLabels) ||\n      MetricRegistry.DEFAULT_CONSTANT_LABEL;\n    // TODO(mayurkale): Add support for resource\n\n    this.validateLables(labelKeys, constantLabels);\n\n    const labelKeysCopy = Object.assign([], labelKeys);\n    const int64Gauge = new Gauge(\n      validateNotNull(name, MetricRegistry.NAME),\n      description,\n      unit,\n      MetricDescriptorType.GAUGE_INT64,\n      labelKeysCopy,\n      constantLabels\n    );\n    this.registerMetric(name, int64Gauge);\n    return int64Gauge;\n  }\n\n  /**\n   * Builds a new double gauge to be added to the registry. This is more\n   * convenient form when you want to manually increase and decrease values as\n   * per your service requirements.\n   *\n   * @param name The name of the metric.\n   * @param options The options for the metric.\n   * @returns A Double Gauge metric.\n   */\n  addDoubleGauge(name: string, options?: MetricOptions): Gauge {\n    const description =\n      (options && options.description) || MetricRegistry.DEFAULT_DESCRIPTION;\n    const unit = (options && options.unit) || MetricRegistry.DEFAULT_UNIT;\n    const labelKeys =\n      (options && options.labelKeys) || MetricRegistry.DEFAULT_LABEL_KEYS;\n    const constantLabels =\n      (options && options.constantLabels) ||\n      MetricRegistry.DEFAULT_CONSTANT_LABEL;\n    // TODO(mayurkale): Add support for resource\n\n    this.validateLables(labelKeys, constantLabels);\n\n    const labelKeysCopy = Object.assign([], labelKeys);\n    const doubleGauge = new Gauge(\n      validateNotNull(name, MetricRegistry.NAME),\n      description,\n      unit,\n      MetricDescriptorType.GAUGE_DOUBLE,\n      labelKeysCopy,\n      constantLabels\n    );\n    this.registerMetric(name, doubleGauge);\n    return doubleGauge;\n  }\n\n  /**\n   * Builds a new derived Int64 gauge to be added to the registry. This is more\n   * convenient form when you want to manually increase and decrease values as\n   * per your service requirements.\n   *\n   * @param name The name of the metric.\n   * @param options The options for the metric.\n   * @returns A Int64 DerivedGauge metric.\n   */\n  addDerivedInt64Gauge(name: string, options?: MetricOptions): DerivedGauge {\n    const description =\n      (options && options.description) || MetricRegistry.DEFAULT_DESCRIPTION;\n    const unit = (options && options.unit) || MetricRegistry.DEFAULT_UNIT;\n    const labelKeys =\n      (options && options.labelKeys) || MetricRegistry.DEFAULT_LABEL_KEYS;\n    const constantLabels =\n      (options && options.constantLabels) ||\n      MetricRegistry.DEFAULT_CONSTANT_LABEL;\n    // TODO(mayurkale): Add support for resource\n\n    this.validateLables(labelKeys, constantLabels);\n\n    const labelKeysCopy = Object.assign([], labelKeys);\n    const derivedInt64Gauge = new DerivedGauge(\n      validateNotNull(name, MetricRegistry.NAME),\n      description,\n      unit,\n      MetricDescriptorType.GAUGE_INT64,\n      labelKeysCopy,\n      constantLabels\n    );\n    this.registerMetric(name, derivedInt64Gauge);\n    return derivedInt64Gauge;\n  }\n\n  /**\n   * Builds a new derived double gauge to be added to the registry. This is more\n   * convenient form when you want to manually increase and decrease values as\n   * per your service requirements.\n   *\n   * @param name The name of the metric.\n   * @param options The options for the metric.\n   * @returns A Double DerivedGauge metric.\n   */\n  addDerivedDoubleGauge(name: string, options?: MetricOptions): DerivedGauge {\n    const description =\n      (options && options.description) || MetricRegistry.DEFAULT_DESCRIPTION;\n    const unit = (options && options.unit) || MetricRegistry.DEFAULT_UNIT;\n    const labelKeys =\n      (options && options.labelKeys) || MetricRegistry.DEFAULT_LABEL_KEYS;\n    const constantLabels =\n      (options && options.constantLabels) ||\n      MetricRegistry.DEFAULT_CONSTANT_LABEL;\n    // TODO(mayurkale): Add support for resource\n\n    this.validateLables(labelKeys, constantLabels);\n\n    const labelKeysCopy = Object.assign([], labelKeys);\n    const derivedDoubleGauge = new DerivedGauge(\n      validateNotNull(name, MetricRegistry.NAME),\n      description,\n      unit,\n      MetricDescriptorType.GAUGE_DOUBLE,\n      labelKeysCopy,\n      constantLabels\n    );\n    this.registerMetric(name, derivedDoubleGauge);\n    return derivedDoubleGauge;\n  }\n\n  /**\n   * Builds a new Int64 cumulative to be added to the registry. This API is\n   * useful when you want to manually increase and reset values as per service\n   * requirements.\n   *\n   * @param name The name of the metric.\n   * @param options The options for the metric.\n   * @returns A Int64 Cumulative metric.\n   */\n  addInt64Cumulative(name: string, options?: MetricOptions): Cumulative {\n    const description =\n      (options && options.description) || MetricRegistry.DEFAULT_DESCRIPTION;\n    const unit = (options && options.unit) || MetricRegistry.DEFAULT_UNIT;\n    const labelKeys =\n      (options && options.labelKeys) || MetricRegistry.DEFAULT_LABEL_KEYS;\n    const constantLabels =\n      (options && options.constantLabels) ||\n      MetricRegistry.DEFAULT_CONSTANT_LABEL;\n    // TODO(mayurkale): Add support for resource\n\n    this.validateLables(labelKeys, constantLabels);\n\n    const labelKeysCopy = Object.assign([], labelKeys);\n    const int64Cumulative = new Cumulative(\n      validateNotNull(name, MetricRegistry.NAME),\n      description,\n      unit,\n      MetricDescriptorType.CUMULATIVE_INT64,\n      labelKeysCopy,\n      constantLabels\n    );\n    this.registerMetric(name, int64Cumulative);\n    return int64Cumulative;\n  }\n\n  /**\n   * Builds a new double cumulative to be added to the registry. This API is\n   * useful when you want to manually increase and reset values as per service\n   * requirements.\n   *\n   * @param name The name of the metric.\n   * @param options The options for the metric.\n   * @returns A Double Cumulative metric.\n   */\n  addDoubleCumulative(name: string, options?: MetricOptions): Cumulative {\n    const description =\n      (options && options.description) || MetricRegistry.DEFAULT_DESCRIPTION;\n    const unit = (options && options.unit) || MetricRegistry.DEFAULT_UNIT;\n    const labelKeys =\n      (options && options.labelKeys) || MetricRegistry.DEFAULT_LABEL_KEYS;\n    const constantLabels =\n      (options && options.constantLabels) ||\n      MetricRegistry.DEFAULT_CONSTANT_LABEL;\n    // TODO(mayurkale): Add support for resource\n\n    this.validateLables(labelKeys, constantLabels);\n\n    const labelKeysCopy = Object.assign([], labelKeys);\n    const doubleCumulative = new Cumulative(\n      validateNotNull(name, MetricRegistry.NAME),\n      description,\n      unit,\n      MetricDescriptorType.CUMULATIVE_DOUBLE,\n      labelKeysCopy,\n      constantLabels\n    );\n    this.registerMetric(name, doubleCumulative);\n    return doubleCumulative;\n  }\n\n  /**\n   * Builds a new derived Int64 Cumulative to be added to the registry.\n   *\n   * @param name The name of the metric.\n   * @param options The options for the metric.\n   * @returns A Int64 DerivedCumulative metric.\n   */\n  addDerivedInt64Cumulative(\n    name: string,\n    options?: MetricOptions\n  ): DerivedCumulative {\n    const description =\n      (options && options.description) || MetricRegistry.DEFAULT_DESCRIPTION;\n    const unit = (options && options.unit) || MetricRegistry.DEFAULT_UNIT;\n    const labelKeys =\n      (options && options.labelKeys) || MetricRegistry.DEFAULT_LABEL_KEYS;\n    const constantLabels =\n      (options && options.constantLabels) ||\n      MetricRegistry.DEFAULT_CONSTANT_LABEL;\n    // TODO(mayurkale): Add support for resource\n\n    this.validateLables(labelKeys, constantLabels);\n\n    const labelKeysCopy = Object.assign([], labelKeys);\n    const startTime: Timestamp = getTimestampWithProcessHRTime();\n    const derivedInt64Cumulative = new DerivedCumulative(\n      validateNotNull(name, MetricRegistry.NAME),\n      description,\n      unit,\n      MetricDescriptorType.CUMULATIVE_INT64,\n      labelKeysCopy,\n      constantLabels,\n      startTime\n    );\n    this.registerMetric(name, derivedInt64Cumulative);\n    return derivedInt64Cumulative;\n  }\n\n  /**\n   * Builds a new derived Double Cumulative to be added to the registry.\n   *\n   * @param name The name of the metric.\n   * @param options The options for the metric.\n   * @returns A Double DerivedCumulative metric.\n   */\n  addDerivedDoubleCumulative(\n    name: string,\n    options?: MetricOptions\n  ): DerivedCumulative {\n    const description =\n      (options && options.description) || MetricRegistry.DEFAULT_DESCRIPTION;\n    const unit = (options && options.unit) || MetricRegistry.DEFAULT_UNIT;\n    const labelKeys =\n      (options && options.labelKeys) || MetricRegistry.DEFAULT_LABEL_KEYS;\n    const constantLabels =\n      (options && options.constantLabels) ||\n      MetricRegistry.DEFAULT_CONSTANT_LABEL;\n    // TODO(mayurkale): Add support for resource\n\n    this.validateLables(labelKeys, constantLabels);\n\n    const labelKeysCopy = Object.assign([], labelKeys);\n    const startTime: Timestamp = getTimestampWithProcessHRTime();\n    const derivedDoubleCumulative = new DerivedCumulative(\n      validateNotNull(name, MetricRegistry.NAME),\n      description,\n      unit,\n      MetricDescriptorType.CUMULATIVE_DOUBLE,\n      labelKeysCopy,\n      constantLabels,\n      startTime\n    );\n    this.registerMetric(name, derivedDoubleCumulative);\n    return derivedDoubleCumulative;\n  }\n\n  /**\n   * Registers metric to register.\n   *\n   * @param name The name of the metric.\n   * @param meter The metric to register.\n   */\n  private registerMetric(name: string, meter: Meter): void {\n    if (this.registeredMetrics.has(name)) {\n      throw new Error(\n        `A metric with the name ${name} has already been registered.`\n      );\n    }\n    this.registeredMetrics.set(name, meter);\n  }\n\n  /**\n   * Gets a metric producer for registry.\n   *\n   * @returns The metric producer.\n   */\n  getMetricProducer(): MetricProducer {\n    return this.metricProducer;\n  }\n\n  /** Validates labelKeys and constantLabels. */\n  private validateLables(\n    labelKeys: LabelKey[],\n    constantLabels: Map<LabelKey, LabelValue>\n  ) {\n    validateArrayElementsNotNull(labelKeys, MetricRegistry.LABEL_KEY);\n    validateMapElementNotNull(constantLabels, MetricRegistry.CONSTANT_LABELS);\n    validateDuplicateKeys(labelKeys, constantLabels);\n  }\n}\n\n/**\n * A MetricProducerForRegistry is a producer that can be registered for\n * exporting using MetricProducerManager.\n */\nclass MetricProducerForRegistry extends BaseMetricProducer {\n  private registeredMetrics: Map<string, Meter>;\n\n  constructor(registeredMetrics: Map<string, Meter>) {\n    super();\n    this.registeredMetrics = registeredMetrics;\n  }\n\n  /**\n   * Gets a collection of produced Metric`s to be exported.\n   *\n   * @returns The list of metrics.\n   */\n  getMetrics(): Metric[] {\n    return Array.from(this.registeredMetrics.values())\n      .map(meter => meter.getMetric())\n      .filter(meter => !!meter) as Metric[];\n  }\n}\n"]}