"use strict";/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_2r7w4uf73i(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/types.ts";var hash="917eb3a7401890fa18b615b30b5b66fe3d394281";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/types.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:0},end:{line:18,column:96}},"2":{start:{line:21,column:0},end:{line:153,column:74}},"3":{start:{line:25,column:4},end:{line:25,column:50}},"4":{start:{line:29,column:4},end:{line:29,column:64}},"5":{start:{line:37,column:4},end:{line:37,column:60}},"6":{start:{line:44,column:4},end:{line:44,column:78}},"7":{start:{line:52,column:4},end:{line:52,column:80}},"8":{start:{line:56,column:4},end:{line:56,column:64}},"9":{start:{line:61,column:4},end:{line:61,column:74}},"10":{start:{line:70,column:4},end:{line:70,column:80}},"11":{start:{line:75,column:4},end:{line:75,column:82}},"12":{start:{line:98,column:4},end:{line:98,column:84}},"13":{start:{line:106,column:4},end:{line:106,column:61}},"14":{start:{line:124,column:4},end:{line:124,column:71}},"15":{start:{line:128,column:4},end:{line:128,column:73}},"16":{start:{line:134,column:4},end:{line:134,column:63}},"17":{start:{line:143,column:4},end:{line:143,column:69}},"18":{start:{line:147,column:4},end:{line:147,column:65}},"19":{start:{line:152,column:4},end:{line:152,column:77}},"20":{start:{line:156,column:0},end:{line:163,column:83}},"21":{start:{line:158,column:4},end:{line:158,column:74}},"22":{start:{line:160,column:4},end:{line:160,column:60}},"23":{start:{line:162,column:4},end:{line:162,column:68}},"24":{start:{line:169,column:0},end:{line:182,column:59}},"25":{start:{line:171,column:4},end:{line:171,column:58}},"26":{start:{line:176,column:4},end:{line:176,column:48}},"27":{start:{line:181,column:4},end:{line:181,column:48}},"28":{start:{line:188,column:0},end:{line:198,column:59}},"29":{start:{line:193,column:4},end:{line:193,column:58}},"30":{start:{line:195,column:4},end:{line:195,column:70}},"31":{start:{line:197,column:4},end:{line:197,column:72}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:21,column:1},end:{line:21,column:2}},loc:{start:{line:21,column:26},end:{line:153,column:1}},line:21},"1":{name:"(anonymous_1)",decl:{start:{line:156,column:1},end:{line:156,column:2}},loc:{start:{line:156,column:29},end:{line:163,column:1}},line:156},"2":{name:"(anonymous_2)",decl:{start:{line:169,column:1},end:{line:169,column:2}},loc:{start:{line:169,column:21},end:{line:182,column:1}},line:169},"3":{name:"(anonymous_3)",decl:{start:{line:188,column:1},end:{line:188,column:2}},loc:{start:{line:188,column:21},end:{line:198,column:1}},line:188}},branchMap:{"0":{loc:{start:{line:153,column:19},end:{line:153,column:72}},type:"binary-expr",locations:[{start:{line:153,column:19},end:{line:153,column:40}},{start:{line:153,column:45},end:{line:153,column:71}}],line:153},"1":{loc:{start:{line:163,column:22},end:{line:163,column:81}},type:"binary-expr",locations:[{start:{line:163,column:22},end:{line:163,column:46}},{start:{line:163,column:51},end:{line:163,column:80}}],line:163},"2":{loc:{start:{line:182,column:14},end:{line:182,column:57}},type:"binary-expr",locations:[{start:{line:182,column:14},end:{line:182,column:30}},{start:{line:182,column:35},end:{line:182,column:56}}],line:182},"3":{loc:{start:{line:198,column:14},end:{line:198,column:57}},type:"binary-expr",locations:[{start:{line:198,column:14},end:{line:198,column:30}},{start:{line:198,column:35},end:{line:198,column:56}}],line:198}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0]},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/types.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/types.ts"],names:[],mappings:";AAAA;;;;;;;;;;;;;;GAcG;;;AA2BH,gDAAgD;AAChD,IAAY,aAoIX;AApID,WAAY,aAAa;IACvB;;OAEG;IACH,6CAAM,CAAA;IACN;;OAEG;IACH,2DAAa,CAAA;IACb;;;;;;OAMG;IACH,uDAAW,CAAA;IACX;;;;;OAKG;IACH,yEAAoB,CAAA;IACpB;;;;;;OAMG;IACH,2EAAqB,CAAA;IACrB;;OAEG;IACH,2DAAa,CAAA;IACb;;;OAGG;IACH,qEAAkB,CAAA;IAClB;;;;;;;OAOG;IACH,2EAAqB,CAAA;IACrB;;;OAGG;IACH,6EAAsB,CAAA;IACtB;;;;;;;;;;;;;;;;;;;;;OAqBG;IACH,+EAAuB,CAAA;IACvB;;;;;;OAMG;IACH,wDAAY,CAAA;IACZ;;;;;;;;;;;;;;;;OAgBG;IACH,kEAAiB,CAAA;IACjB;;OAEG;IACH,oEAAkB,CAAA;IAClB;;;;OAIG;IACH,0DAAa,CAAA;IACb;;;;;;;OAOG;IACH,gEAAgB,CAAA;IAChB;;OAEG;IACH,4DAAc,CAAA;IACd;;;OAGG;IACH,wEAAoB,CAAA;AACtB,CAAC,EApIW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAoIxB;AA6FD,iEAAiE;AACjE,IAAY,gBAOX;AAPD,WAAY,gBAAgB;IAC1B,0BAA0B;IAC1B,qEAAe,CAAA;IACf,gCAAgC;IAChC,uDAAQ,CAAA;IACR,oCAAoC;IACpC,+DAAY,CAAA;AACd,CAAC,EAPW,gBAAgB,GAAhB,wBAAgB,KAAhB,wBAAgB,QAO3B;AAED;;;GAGG;AACH,IAAY,QAaX;AAbD,WAAY,QAAQ;IAClB,kBAAkB;IAClB,qDAAe,CAAA;IACf;;;OAGG;IACH,2CAAU,CAAA;IACV;;;OAGG;IACH,2CAAU,CAAA;AACZ,CAAC,EAbW,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAanB;AAED;;;GAGG;AACH,IAAY,QAUX;AAVD,WAAY,QAAQ;IAClB;;;OAGG;IACH,qDAAe,CAAA;IACf,sDAAsD;IACtD,iEAAqB,CAAA;IACrB,uDAAuD;IACvD,mEAAsB,CAAA;AACxB,CAAC,EAVW,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAUnB",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as loggerTypes from '../../common/types';\nimport * as configTypes from '../config/types';\nimport { Propagation } from '../propagation/types';\nimport * as samplerTypes from '../sampler/types';\n\n/** Default type for functions */\n// tslint:disable:no-any\nexport type Func<T> = (...args: any[]) => T;\n\n/** Maps a label to a string, number or boolean. */\nexport interface Attributes {\n  [attributeKey: string]: string | number | boolean;\n}\n\n/**\n * The status of a Span by providing a standard CanonicalCode in conjunction\n * with an optional descriptive message.\n */\nexport interface Status {\n  /** The canonical code of this message. */\n  code: CanonicalCode;\n  /** A developer-facing error message. */\n  message?: string;\n}\n\n/** An enumeration of canonical status codes. */\nexport enum CanonicalCode {\n  /**\n   * Not an error; returned on success\n   */\n  OK = 0,\n  /**\n   * The operation was cancelled (typically by the caller).\n   */\n  CANCELLED = 1,\n  /**\n   * Unknown error.  An example of where this error may be returned is\n   * if a status value received from another address space belongs to\n   * an error-space that is not known in this address space.  Also\n   * errors raised by APIs that do not return enough error information\n   * may be converted to this error.\n   */\n  UNKNOWN = 2,\n  /**\n   * Client specified an invalid argument.  Note that this differs\n   * from FAILED_PRECONDITION.  INVALID_ARGUMENT indicates arguments\n   * that are problematic regardless of the state of the system\n   * (e.g., a malformed file name).\n   */\n  INVALID_ARGUMENT = 3,\n  /**\n   * Deadline expired before operation could complete.  For operations\n   * that change the state of the system, this error may be returned\n   * even if the operation has completed successfully.  For example, a\n   * successful response from a server could have been delayed long\n   * enough for the deadline to expire.\n   */\n  DEADLINE_EXCEEDED = 4,\n  /**\n   * Some requested entity (e.g., file or directory) was not found.\n   */\n  NOT_FOUND = 5,\n  /**\n   * Some entity that we attempted to create (e.g., file or directory)\n   * already exists.\n   */\n  ALREADY_EXISTS = 6,\n  /**\n   * The caller does not have permission to execute the specified\n   * operation.  PERMISSION_DENIED must not be used for rejections\n   * caused by exhausting some resource (use RESOURCE_EXHAUSTED\n   * instead for those errors).  PERMISSION_DENIED must not be\n   * used if the caller can not be identified (use UNAUTHENTICATED\n   * instead for those errors).\n   */\n  PERMISSION_DENIED = 7,\n  /**\n   * Some resource has been exhausted, perhaps a per-user quota, or\n   * perhaps the entire file system is out of space.\n   */\n  RESOURCE_EXHAUSTED = 8,\n  /**\n   * Operation was rejected because the system is not in a state\n   * required for the operation's execution.  For example, directory\n   * to be deleted may be non-empty, an rmdir operation is applied to\n   * a non-directory, etc.\n   *\n   * A litmus test that may help a service implementor in deciding\n   * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:\n   *\n   *  - Use UNAVAILABLE if the client can retry just the failing call.\n   *  - Use ABORTED if the client should retry at a higher-level\n   *    (e.g., restarting a read-modify-write sequence).\n   *  - Use FAILED_PRECONDITION if the client should not retry until\n   *    the system state has been explicitly fixed.  E.g., if an \"rmdir\"\n   *    fails because the directory is non-empty, FAILED_PRECONDITION\n   *    should be returned since the client should not retry unless\n   *    they have first fixed up the directory by deleting files from it.\n   *  - Use FAILED_PRECONDITION if the client performs conditional\n   *    REST Get/Update/Delete on a resource and the resource on the\n   *    server does not match the condition. E.g., conflicting\n   *    read-modify-write on the same resource.\n   */\n  FAILED_PRECONDITION = 9,\n  /**\n   * The operation was aborted, typically due to a concurrency issue\n   * like sequencer check failures, transaction aborts, etc.\n   *\n   * See litmus test above for deciding between FAILED_PRECONDITION,\n   * ABORTED, and UNAVAILABLE.\n   */\n  ABORTED = 10,\n  /**\n   * Operation was attempted past the valid range.  E.g., seeking or\n   * reading past end of file.\n   *\n   * Unlike INVALID_ARGUMENT, this error indicates a problem that may\n   * be fixed if the system state changes. For example, a 32-bit file\n   * system will generate INVALID_ARGUMENT if asked to read at an\n   * offset that is not in the range [0,2^32-1], but it will generate\n   * OUT_OF_RANGE if asked to read from an offset past the current\n   * file size.\n   *\n   * There is a fair bit of overlap between FAILED_PRECONDITION and\n   * OUT_OF_RANGE.  We recommend using OUT_OF_RANGE (the more specific\n   * error) when it applies so that callers who are iterating through\n   * a space can easily look for an OUT_OF_RANGE error to detect when\n   * they are done.\n   */\n  OUT_OF_RANGE = 11,\n  /**\n   * Operation is not implemented or not supported/enabled in this service.\n   */\n  UNIMPLEMENTED = 12,\n  /**\n   * Internal errors.  Means some invariants expected by underlying\n   * system has been broken.  If you see one of these errors,\n   * something is very broken.\n   */\n  INTERNAL = 13,\n  /**\n   * The service is currently unavailable.  This is a most likely a\n   * transient condition and may be corrected by retrying with\n   * a backoff.\n   *\n   * See litmus test above for deciding between FAILED_PRECONDITION,\n   * ABORTED, and UNAVAILABLE.\n   */\n  UNAVAILABLE = 14,\n  /**\n   * Unrecoverable data loss or corruption.\n   */\n  DATA_LOSS = 15,\n  /**\n   * The request does not have valid authentication credentials for the\n   * operation.\n   */\n  UNAUTHENTICATED = 16,\n}\n\n/** A text annotation with a set of attributes. */\nexport interface Annotation {\n  /** A user-supplied message describing the event. */\n  description: string;\n  /** A timestamp for the event event. */\n  timestamp: number;\n  /** A set of attributes on the annotation. */\n  attributes: Attributes;\n}\n\n/** An event describing a message sent/received between Spans. */\nexport interface MessageEvent {\n  /** A timestamp for the event. */\n  timestamp: number;\n  /** Indicates whether the message was sent or received. */\n  type: MessageEventType;\n  /**\n   * An identifier for the MessageEvent's message that can be used to match\n   * SENT and RECEIVED MessageEvents. Message event ids should start with 1 for\n   * both sent and received messages and increment by 1 for each message\n   * sent/received.\n   */\n  id: number;\n  /** The number of uncompressed bytes sent or received. */\n  uncompressedSize?: number;\n  /**\n   * The number of compressed bytes sent or received. If zero or\n   * undefined, assumed to be the same size as uncompressed.\n   */\n  compressedSize?: number;\n}\n\n/**\n * A pointer from the current span to another span in the same trace or in a\n * different trace.\n */\nexport interface Link {\n  /** The trace ID for a trace within a project. */\n  traceId: string;\n  /** The span ID for a span within a trace. */\n  spanId: string;\n  /** The relationship of the current span relative to the linked. */\n  type: LinkType;\n  /** A set of attributes on the link. */\n  attributes: Attributes;\n}\n\n/** Defines the trace options */\nexport interface TraceOptions {\n  /** Root span name */\n  name: string;\n  /** Trace context */\n  spanContext?: SpanContext;\n  /** Span kind */\n  kind?: SpanKind;\n  /** Determines the sampling rate. Ranges from 0.0 to 1.0 */\n  samplingRate?: number;\n}\n\n/** Defines the span options */\nexport interface SpanOptions {\n  /** Span name */\n  name: string;\n  /** Span kind */\n  kind?: SpanKind;\n  /** The new span's parent */\n  childOf?: Span;\n}\n\nexport type TraceState = string;\n\n/** Defines the span context */\nexport interface SpanContext {\n  /** Trace ID */\n  traceId: string;\n  /** Span ID */\n  spanId: string;\n  /** Options */\n  options?: number;\n  /** TraceState */\n  traceState?: TraceState;\n}\n\n/** Defines an end span event listener */\nexport interface SpanEventListener {\n  /** Happens when a span is started */\n  onStartSpan(span: Span): void;\n  /** Happens when a span is ended */\n  onEndSpan(span: Span): void;\n}\n\n/** An event describing a message sent/received between Spans. */\nexport enum MessageEventType {\n  /** Unknown event type. */\n  UNSPECIFIED = 0,\n  /** Indicates a sent message. */\n  SENT = 1,\n  /** Indicates a received message. */\n  RECEIVED = 2,\n}\n\n/**\n * Type of span. Can be used to specify additional relationships between spans\n * in addition to a parent/child relationship.\n */\nexport enum SpanKind {\n  /** Unspecified */\n  UNSPECIFIED = 0,\n  /**\n   * Indicates that the span covers server-side handling of an RPC or other\n   * remote network request.\n   */\n  SERVER = 1,\n  /**\n   * Indicates that the span covers the client-side wrapper around an RPC or\n   * other remote request.\n   */\n  CLIENT = 2,\n}\n\n/**\n * Type of link. The relationship of the current span relative to the linked\n * span.\n */\nexport enum LinkType {\n  /**\n   * The relationship of the two spans is unknown, or known but other\n   * than parent-child.\n   */\n  UNSPECIFIED = 0,\n  /** The linked span is a child of the current span. */\n  CHILD_LINKED_SPAN = 1,\n  /** The linked span is a parent of the current span. */\n  PARENT_LINKED_SPAN = 2,\n}\n\n/** Interface for Span */\nexport interface Span {\n  /** The Span ID of this span */\n  readonly id: string;\n\n  /** A tracer object, exposong the tracer makes it possible to create child\n   * spans from the span instance like. span.tracer.startChildSpan()\n   */\n  tracer: TracerBase;\n\n  /** If the parent span is in another process. */\n  remoteParent: boolean;\n\n  /** The span ID of this span's parent. If it's a root span, must be empty */\n  parentSpanId: string;\n\n  /** The resource name of the span */\n  name: string;\n\n  /** Kind of span. */\n  kind: SpanKind;\n\n  /** An object to log information to */\n  logger: loggerTypes.Logger;\n\n  /** A final status for this span */\n  status: Status;\n\n  /** A set of attributes, each in the format [KEY]:[VALUE] */\n  attributes: Attributes;\n\n  /** A text annotation with a set of attributes. */\n  annotations: Annotation[];\n\n  /** An event describing a message sent/received between Spans. */\n  messageEvents: MessageEvent[];\n\n  /** Pointers from the current span to another span */\n  links: Link[];\n\n  /** Recursively gets the descendant spans. */\n  allDescendants(): Span[];\n\n  /** The list of immediate child spans. */\n  spans: Span[];\n\n  /** The number of direct children */\n  numberOfChildren: number;\n\n  /** Trace id asscoiated with span. */\n  readonly traceId: string;\n\n  /** Trace state associated with span */\n  readonly traceState?: TraceState;\n\n  /** Indicates if span was started. */\n  readonly started: boolean;\n\n  /** Indicates if span was ended. */\n  readonly ended: boolean;\n\n  /**\n   * Gives a timestap that indicates the span's start time in RFC3339 UTC\n   * \"Zulu\" format.\n   */\n  readonly startTime: Date;\n\n  /**\n   * Gives a timestap that indicates the span's end time in RFC3339 UTC\n   * \"Zulu\" format.\n   */\n  readonly endTime: Date;\n\n  /**\n   * Gives a timestap that indicates the span's duration in RFC3339 UTC\n   * \"Zulu\" format.\n   */\n  readonly duration: number;\n\n  /** Gives the TraceContext of the span. */\n  readonly spanContext: SpanContext;\n\n  /** Trace Parameters */\n  activeTraceParams: configTypes.TraceParams;\n\n  /** The number of dropped attributes. */\n  droppedAttributesCount: number;\n\n  /** The number of dropped links. */\n  droppedLinksCount: number;\n\n  /** The number of dropped annotations. */\n  droppedAnnotationsCount: number;\n\n  /** The number of dropped message events. */\n  droppedMessageEventsCount: number;\n\n  /**\n   * Adds an atribute to the span.\n   * @param key Describes the value added.\n   * @param value The result of an operation.\n   */\n  addAttribute(key: string, value: string | number | boolean | object): void;\n\n  /**\n   * Adds an annotation to the span.\n   * @param description Describes the event.\n   * @param attributes A set of attributes on the annotation.\n   * @param timestamp A timestamp for this event.\n   */\n  addAnnotation(\n    description: string,\n    attributes?: Attributes,\n    timestamp?: number\n  ): void;\n\n  /**\n   * Adds a link to the span.\n   * @param traceId The trace ID for a trace within a project.\n   * @param spanId The span ID for a span within a trace.\n   * @param type The relationship of the current span relative to the linked.\n   * @param attributes A set of attributes on the link.\n   */\n  addLink(\n    traceId: string,\n    spanId: string,\n    type: LinkType,\n    attributes?: Attributes\n  ): void;\n\n  /**\n   * Adds a message event to the span.\n   * @param type The type of message event.\n   * @param id An identifier for the message event.\n   * @param timestamp A timestamp for this event.\n   * @param uncompressedSize The number of uncompressed bytes sent or received.\n   * @param compressedSize The number of compressed bytes sent or received. If\n   *     zero or undefined, assumed to be the same size as uncompressed.\n   */\n  addMessageEvent(\n    type: MessageEventType,\n    id: number,\n    timestamp?: number,\n    uncompressedSize?: number,\n    compressedSize?: number\n  ): void;\n\n  /**\n   * Sets a status to the span.\n   * @param code The canonical status code.\n   * @param message optional A developer-facing error message.\n   */\n  setStatus(code: CanonicalCode, message?: string): void;\n\n  /** Starts a span. */\n  start(): void;\n\n  /** Ends a span and all of its children, recursively. */\n  end(): void;\n\n  /** Forces to end a span. */\n  truncate(): void;\n\n  /** Starts a new Span instance as a child of this instance */\n  startChildSpan(options?: SpanOptions): Span;\n\n  /** Returns whether a span is root or not. */\n  isRootSpan(): boolean;\n}\n\n/** Interface for TracerBase */\nexport interface TracerBase extends SpanEventListener {\n  /** A sampler that will decide if the span will be sampled or not */\n  sampler: samplerTypes.Sampler;\n\n  /** A configuration for starting the tracer */\n  logger: loggerTypes.Logger;\n\n  /** A configuration object for trace parameters */\n  activeTraceParams: configTypes.TraceParams;\n\n  /** A propagation instance */\n  readonly propagation: Propagation;\n\n  /** Get the eventListeners from tracer instance */\n  readonly eventListeners: SpanEventListener[];\n\n  /** Get the active status from tracer instance */\n  readonly active: boolean;\n\n  /**\n   * Start a tracer instance\n   * @param config Configuration for tracer instace\n   * @returns A tracer instance started\n   */\n  start(config: configTypes.TracerConfig): this;\n\n  /** Stop the tracer instance */\n  stop(): this;\n\n  /**\n   * Start a new RootSpan to currentRootSpan\n   * @param options Options for tracer instance\n   * @param fn Callback function\n   * @returns The callback return\n   */\n  startRootSpan<T>(options: TraceOptions, fn: (root: Span) => T): T;\n\n  /**\n   * Register a OnEndSpanEventListener on the tracer instance\n   * @param listener An OnEndSpanEventListener instance\n   */\n  registerSpanEventListener(listener: SpanEventListener): void;\n\n  /**\n   * Unregisters an end span event listener.\n   * @param listener The listener to unregister.\n   */\n  unregisterSpanEventListener(listener: SpanEventListener): void;\n\n  /**\n   * Start a new Span instance to the currentRootSpan\n   * @param [options] A TraceOptions object to start a root span.\n   * @returns The new Span instance started\n   */\n  startChildSpan(options?: SpanOptions): Span;\n\n  /** Sets the current root span. */\n  setCurrentRootSpan(root: Span): void;\n}\n\n/** Interface for Tracer */\nexport interface Tracer extends TracerBase {\n  /** Get and set the currentRootSpan to tracer instance */\n  currentRootSpan: Span;\n\n  /** Clear the currentRootSpan from tracer instance */\n  clearCurrentTrace(): void;\n\n  /**\n   * Binds the trace context to the given function.\n   * This is necessary in order to create child spans correctly in functions\n   * that are called asynchronously (for example, in a network response\n   * handler).\n   * @param fn A function to which to bind the trace context.\n   */\n  wrap<T>(fn: Func<T>): Func<T>;\n\n  /**\n   * Binds the trace context to the given event emitter.\n   * This is necessary in order to create child spans correctly in event\n   * handlers.\n   * @param emitter An event emitter whose handlers should have\n   *     the trace context binded to them.\n   */\n  wrapEmitter(emitter: NodeJS.EventEmitter): void;\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"917eb3a7401890fa18b615b30b5b66fe3d394281"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2r7w4uf73i=function(){return actualCoverage;};}return actualCoverage;}cov_2r7w4uf73i();cov_2r7w4uf73i().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_2r7w4uf73i().s[1]++;exports.LinkType=exports.SpanKind=exports.MessageEventType=exports.CanonicalCode=void 0;/** An enumeration of canonical status codes. */var CanonicalCode;cov_2r7w4uf73i().s[2]++;(function(CanonicalCode){cov_2r7w4uf73i().f[0]++;cov_2r7w4uf73i().s[3]++;/**
     * Not an error; returned on success
     */CanonicalCode[CanonicalCode["OK"]=0]="OK";/**
     * The operation was cancelled (typically by the caller).
     */cov_2r7w4uf73i().s[4]++;CanonicalCode[CanonicalCode["CANCELLED"]=1]="CANCELLED";/**
     * Unknown error.  An example of where this error may be returned is
     * if a status value received from another address space belongs to
     * an error-space that is not known in this address space.  Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     */cov_2r7w4uf73i().s[5]++;CanonicalCode[CanonicalCode["UNKNOWN"]=2]="UNKNOWN";/**
     * Client specified an invalid argument.  Note that this differs
     * from FAILED_PRECONDITION.  INVALID_ARGUMENT indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     */cov_2r7w4uf73i().s[6]++;CanonicalCode[CanonicalCode["INVALID_ARGUMENT"]=3]="INVALID_ARGUMENT";/**
     * Deadline expired before operation could complete.  For operations
     * that change the state of the system, this error may be returned
     * even if the operation has completed successfully.  For example, a
     * successful response from a server could have been delayed long
     * enough for the deadline to expire.
     */cov_2r7w4uf73i().s[7]++;CanonicalCode[CanonicalCode["DEADLINE_EXCEEDED"]=4]="DEADLINE_EXCEEDED";/**
     * Some requested entity (e.g., file or directory) was not found.
     */cov_2r7w4uf73i().s[8]++;CanonicalCode[CanonicalCode["NOT_FOUND"]=5]="NOT_FOUND";/**
     * Some entity that we attempted to create (e.g., file or directory)
     * already exists.
     */cov_2r7w4uf73i().s[9]++;CanonicalCode[CanonicalCode["ALREADY_EXISTS"]=6]="ALREADY_EXISTS";/**
     * The caller does not have permission to execute the specified
     * operation.  PERMISSION_DENIED must not be used for rejections
     * caused by exhausting some resource (use RESOURCE_EXHAUSTED
     * instead for those errors).  PERMISSION_DENIED must not be
     * used if the caller can not be identified (use UNAUTHENTICATED
     * instead for those errors).
     */cov_2r7w4uf73i().s[10]++;CanonicalCode[CanonicalCode["PERMISSION_DENIED"]=7]="PERMISSION_DENIED";/**
     * Some resource has been exhausted, perhaps a per-user quota, or
     * perhaps the entire file system is out of space.
     */cov_2r7w4uf73i().s[11]++;CanonicalCode[CanonicalCode["RESOURCE_EXHAUSTED"]=8]="RESOURCE_EXHAUSTED";/**
     * Operation was rejected because the system is not in a state
     * required for the operation's execution.  For example, directory
     * to be deleted may be non-empty, an rmdir operation is applied to
     * a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
     *
     *  - Use UNAVAILABLE if the client can retry just the failing call.
     *  - Use ABORTED if the client should retry at a higher-level
     *    (e.g., restarting a read-modify-write sequence).
     *  - Use FAILED_PRECONDITION if the client should not retry until
     *    the system state has been explicitly fixed.  E.g., if an "rmdir"
     *    fails because the directory is non-empty, FAILED_PRECONDITION
     *    should be returned since the client should not retry unless
     *    they have first fixed up the directory by deleting files from it.
     *  - Use FAILED_PRECONDITION if the client performs conditional
     *    REST Get/Update/Delete on a resource and the resource on the
     *    server does not match the condition. E.g., conflicting
     *    read-modify-write on the same resource.
     */cov_2r7w4uf73i().s[12]++;CanonicalCode[CanonicalCode["FAILED_PRECONDITION"]=9]="FAILED_PRECONDITION";/**
     * The operation was aborted, typically due to a concurrency issue
     * like sequencer check failures, transaction aborts, etc.
     *
     * See litmus test above for deciding between FAILED_PRECONDITION,
     * ABORTED, and UNAVAILABLE.
     */cov_2r7w4uf73i().s[13]++;CanonicalCode[CanonicalCode["ABORTED"]=10]="ABORTED";/**
     * Operation was attempted past the valid range.  E.g., seeking or
     * reading past end of file.
     *
     * Unlike INVALID_ARGUMENT, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate INVALID_ARGUMENT if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OUT_OF_RANGE if asked to read from an offset past the current
     * file size.
     *
     * There is a fair bit of overlap between FAILED_PRECONDITION and
     * OUT_OF_RANGE.  We recommend using OUT_OF_RANGE (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OUT_OF_RANGE error to detect when
     * they are done.
     */cov_2r7w4uf73i().s[14]++;CanonicalCode[CanonicalCode["OUT_OF_RANGE"]=11]="OUT_OF_RANGE";/**
     * Operation is not implemented or not supported/enabled in this service.
     */cov_2r7w4uf73i().s[15]++;CanonicalCode[CanonicalCode["UNIMPLEMENTED"]=12]="UNIMPLEMENTED";/**
     * Internal errors.  Means some invariants expected by underlying
     * system has been broken.  If you see one of these errors,
     * something is very broken.
     */cov_2r7w4uf73i().s[16]++;CanonicalCode[CanonicalCode["INTERNAL"]=13]="INTERNAL";/**
     * The service is currently unavailable.  This is a most likely a
     * transient condition and may be corrected by retrying with
     * a backoff.
     *
     * See litmus test above for deciding between FAILED_PRECONDITION,
     * ABORTED, and UNAVAILABLE.
     */cov_2r7w4uf73i().s[17]++;CanonicalCode[CanonicalCode["UNAVAILABLE"]=14]="UNAVAILABLE";/**
     * Unrecoverable data loss or corruption.
     */cov_2r7w4uf73i().s[18]++;CanonicalCode[CanonicalCode["DATA_LOSS"]=15]="DATA_LOSS";/**
     * The request does not have valid authentication credentials for the
     * operation.
     */cov_2r7w4uf73i().s[19]++;CanonicalCode[CanonicalCode["UNAUTHENTICATED"]=16]="UNAUTHENTICATED";})(CanonicalCode=(cov_2r7w4uf73i().b[0][0]++,exports.CanonicalCode)||(cov_2r7w4uf73i().b[0][1]++,exports.CanonicalCode={}));/** An event describing a message sent/received between Spans. */var MessageEventType;cov_2r7w4uf73i().s[20]++;(function(MessageEventType){cov_2r7w4uf73i().f[1]++;cov_2r7w4uf73i().s[21]++;/** Unknown event type. */MessageEventType[MessageEventType["UNSPECIFIED"]=0]="UNSPECIFIED";/** Indicates a sent message. */cov_2r7w4uf73i().s[22]++;MessageEventType[MessageEventType["SENT"]=1]="SENT";/** Indicates a received message. */cov_2r7w4uf73i().s[23]++;MessageEventType[MessageEventType["RECEIVED"]=2]="RECEIVED";})(MessageEventType=(cov_2r7w4uf73i().b[1][0]++,exports.MessageEventType)||(cov_2r7w4uf73i().b[1][1]++,exports.MessageEventType={}));/**
 * Type of span. Can be used to specify additional relationships between spans
 * in addition to a parent/child relationship.
 */var SpanKind;cov_2r7w4uf73i().s[24]++;(function(SpanKind){cov_2r7w4uf73i().f[2]++;cov_2r7w4uf73i().s[25]++;/** Unspecified */SpanKind[SpanKind["UNSPECIFIED"]=0]="UNSPECIFIED";/**
     * Indicates that the span covers server-side handling of an RPC or other
     * remote network request.
     */cov_2r7w4uf73i().s[26]++;SpanKind[SpanKind["SERVER"]=1]="SERVER";/**
     * Indicates that the span covers the client-side wrapper around an RPC or
     * other remote request.
     */cov_2r7w4uf73i().s[27]++;SpanKind[SpanKind["CLIENT"]=2]="CLIENT";})(SpanKind=(cov_2r7w4uf73i().b[2][0]++,exports.SpanKind)||(cov_2r7w4uf73i().b[2][1]++,exports.SpanKind={}));/**
 * Type of link. The relationship of the current span relative to the linked
 * span.
 */var LinkType;cov_2r7w4uf73i().s[28]++;(function(LinkType){cov_2r7w4uf73i().f[3]++;cov_2r7w4uf73i().s[29]++;/**
     * The relationship of the two spans is unknown, or known but other
     * than parent-child.
     */LinkType[LinkType["UNSPECIFIED"]=0]="UNSPECIFIED";/** The linked span is a child of the current span. */cov_2r7w4uf73i().s[30]++;LinkType[LinkType["CHILD_LINKED_SPAN"]=1]="CHILD_LINKED_SPAN";/** The linked span is a parent of the current span. */cov_2r7w4uf73i().s[31]++;LinkType[LinkType["PARENT_LINKED_SPAN"]=2]="PARENT_LINKED_SPAN";})(LinkType=(cov_2r7w4uf73i().b[3][0]++,exports.LinkType)||(cov_2r7w4uf73i().b[3][1]++,exports.LinkType={}));//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMnI3dzR1ZjczaSIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJlbmQiLCJmbk1hcCIsIm5hbWUiLCJkZWNsIiwibG9jIiwiYnJhbmNoTWFwIiwidHlwZSIsImxvY2F0aW9ucyIsInMiLCJmIiwiYiIsImlucHV0U291cmNlTWFwIiwidmVyc2lvbiIsImZpbGUiLCJzb3VyY2VzIiwibmFtZXMiLCJtYXBwaW5ncyIsInNvdXJjZXNDb250ZW50IiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSIsIkNhbm9uaWNhbENvZGUiLCJleHBvcnRzIiwiTWVzc2FnZUV2ZW50VHlwZSIsIlNwYW5LaW5kIiwiTGlua1R5cGUiXSwic291cmNlcyI6WyIvVXNlcnMvdXNlcm1haXRoYS90cmFkZW1hc3Rlci9saWJzL2xpYi1leHRlcm5hbC1vcGVuY2Vuc3VzLW5vZGUvc3JjL3RyYWNlL21vZGVsL3R5cGVzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTgsIE9wZW5DZW5zdXMgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0ICogYXMgbG9nZ2VyVHlwZXMgZnJvbSAnLi4vLi4vY29tbW9uL3R5cGVzJztcbmltcG9ydCAqIGFzIGNvbmZpZ1R5cGVzIGZyb20gJy4uL2NvbmZpZy90eXBlcyc7XG5pbXBvcnQgeyBQcm9wYWdhdGlvbiB9IGZyb20gJy4uL3Byb3BhZ2F0aW9uL3R5cGVzJztcbmltcG9ydCAqIGFzIHNhbXBsZXJUeXBlcyBmcm9tICcuLi9zYW1wbGVyL3R5cGVzJztcblxuLyoqIERlZmF1bHQgdHlwZSBmb3IgZnVuY3Rpb25zICovXG4vLyB0c2xpbnQ6ZGlzYWJsZTpuby1hbnlcbmV4cG9ydCB0eXBlIEZ1bmM8VD4gPSAoLi4uYXJnczogYW55W10pID0+IFQ7XG5cbi8qKiBNYXBzIGEgbGFiZWwgdG8gYSBzdHJpbmcsIG51bWJlciBvciBib29sZWFuLiAqL1xuZXhwb3J0IGludGVyZmFjZSBBdHRyaWJ1dGVzIHtcbiAgW2F0dHJpYnV0ZUtleTogc3RyaW5nXTogc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBUaGUgc3RhdHVzIG9mIGEgU3BhbiBieSBwcm92aWRpbmcgYSBzdGFuZGFyZCBDYW5vbmljYWxDb2RlIGluIGNvbmp1bmN0aW9uXG4gKiB3aXRoIGFuIG9wdGlvbmFsIGRlc2NyaXB0aXZlIG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU3RhdHVzIHtcbiAgLyoqIFRoZSBjYW5vbmljYWwgY29kZSBvZiB0aGlzIG1lc3NhZ2UuICovXG4gIGNvZGU6IENhbm9uaWNhbENvZGU7XG4gIC8qKiBBIGRldmVsb3Blci1mYWNpbmcgZXJyb3IgbWVzc2FnZS4gKi9cbiAgbWVzc2FnZT86IHN0cmluZztcbn1cblxuLyoqIEFuIGVudW1lcmF0aW9uIG9mIGNhbm9uaWNhbCBzdGF0dXMgY29kZXMuICovXG5leHBvcnQgZW51bSBDYW5vbmljYWxDb2RlIHtcbiAgLyoqXG4gICAqIE5vdCBhbiBlcnJvcjsgcmV0dXJuZWQgb24gc3VjY2Vzc1xuICAgKi9cbiAgT0sgPSAwLFxuICAvKipcbiAgICogVGhlIG9wZXJhdGlvbiB3YXMgY2FuY2VsbGVkICh0eXBpY2FsbHkgYnkgdGhlIGNhbGxlcikuXG4gICAqL1xuICBDQU5DRUxMRUQgPSAxLFxuICAvKipcbiAgICogVW5rbm93biBlcnJvci4gIEFuIGV4YW1wbGUgb2Ygd2hlcmUgdGhpcyBlcnJvciBtYXkgYmUgcmV0dXJuZWQgaXNcbiAgICogaWYgYSBzdGF0dXMgdmFsdWUgcmVjZWl2ZWQgZnJvbSBhbm90aGVyIGFkZHJlc3Mgc3BhY2UgYmVsb25ncyB0b1xuICAgKiBhbiBlcnJvci1zcGFjZSB0aGF0IGlzIG5vdCBrbm93biBpbiB0aGlzIGFkZHJlc3Mgc3BhY2UuICBBbHNvXG4gICAqIGVycm9ycyByYWlzZWQgYnkgQVBJcyB0aGF0IGRvIG5vdCByZXR1cm4gZW5vdWdoIGVycm9yIGluZm9ybWF0aW9uXG4gICAqIG1heSBiZSBjb252ZXJ0ZWQgdG8gdGhpcyBlcnJvci5cbiAgICovXG4gIFVOS05PV04gPSAyLFxuICAvKipcbiAgICogQ2xpZW50IHNwZWNpZmllZCBhbiBpbnZhbGlkIGFyZ3VtZW50LiAgTm90ZSB0aGF0IHRoaXMgZGlmZmVyc1xuICAgKiBmcm9tIEZBSUxFRF9QUkVDT05ESVRJT04uICBJTlZBTElEX0FSR1VNRU5UIGluZGljYXRlcyBhcmd1bWVudHNcbiAgICogdGhhdCBhcmUgcHJvYmxlbWF0aWMgcmVnYXJkbGVzcyBvZiB0aGUgc3RhdGUgb2YgdGhlIHN5c3RlbVxuICAgKiAoZS5nLiwgYSBtYWxmb3JtZWQgZmlsZSBuYW1lKS5cbiAgICovXG4gIElOVkFMSURfQVJHVU1FTlQgPSAzLFxuICAvKipcbiAgICogRGVhZGxpbmUgZXhwaXJlZCBiZWZvcmUgb3BlcmF0aW9uIGNvdWxkIGNvbXBsZXRlLiAgRm9yIG9wZXJhdGlvbnNcbiAgICogdGhhdCBjaGFuZ2UgdGhlIHN0YXRlIG9mIHRoZSBzeXN0ZW0sIHRoaXMgZXJyb3IgbWF5IGJlIHJldHVybmVkXG4gICAqIGV2ZW4gaWYgdGhlIG9wZXJhdGlvbiBoYXMgY29tcGxldGVkIHN1Y2Nlc3NmdWxseS4gIEZvciBleGFtcGxlLCBhXG4gICAqIHN1Y2Nlc3NmdWwgcmVzcG9uc2UgZnJvbSBhIHNlcnZlciBjb3VsZCBoYXZlIGJlZW4gZGVsYXllZCBsb25nXG4gICAqIGVub3VnaCBmb3IgdGhlIGRlYWRsaW5lIHRvIGV4cGlyZS5cbiAgICovXG4gIERFQURMSU5FX0VYQ0VFREVEID0gNCxcbiAgLyoqXG4gICAqIFNvbWUgcmVxdWVzdGVkIGVudGl0eSAoZS5nLiwgZmlsZSBvciBkaXJlY3RvcnkpIHdhcyBub3QgZm91bmQuXG4gICAqL1xuICBOT1RfRk9VTkQgPSA1LFxuICAvKipcbiAgICogU29tZSBlbnRpdHkgdGhhdCB3ZSBhdHRlbXB0ZWQgdG8gY3JlYXRlIChlLmcuLCBmaWxlIG9yIGRpcmVjdG9yeSlcbiAgICogYWxyZWFkeSBleGlzdHMuXG4gICAqL1xuICBBTFJFQURZX0VYSVNUUyA9IDYsXG4gIC8qKlxuICAgKiBUaGUgY2FsbGVyIGRvZXMgbm90IGhhdmUgcGVybWlzc2lvbiB0byBleGVjdXRlIHRoZSBzcGVjaWZpZWRcbiAgICogb3BlcmF0aW9uLiAgUEVSTUlTU0lPTl9ERU5JRUQgbXVzdCBub3QgYmUgdXNlZCBmb3IgcmVqZWN0aW9uc1xuICAgKiBjYXVzZWQgYnkgZXhoYXVzdGluZyBzb21lIHJlc291cmNlICh1c2UgUkVTT1VSQ0VfRVhIQVVTVEVEXG4gICAqIGluc3RlYWQgZm9yIHRob3NlIGVycm9ycykuICBQRVJNSVNTSU9OX0RFTklFRCBtdXN0IG5vdCBiZVxuICAgKiB1c2VkIGlmIHRoZSBjYWxsZXIgY2FuIG5vdCBiZSBpZGVudGlmaWVkICh1c2UgVU5BVVRIRU5USUNBVEVEXG4gICAqIGluc3RlYWQgZm9yIHRob3NlIGVycm9ycykuXG4gICAqL1xuICBQRVJNSVNTSU9OX0RFTklFRCA9IDcsXG4gIC8qKlxuICAgKiBTb21lIHJlc291cmNlIGhhcyBiZWVuIGV4aGF1c3RlZCwgcGVyaGFwcyBhIHBlci11c2VyIHF1b3RhLCBvclxuICAgKiBwZXJoYXBzIHRoZSBlbnRpcmUgZmlsZSBzeXN0ZW0gaXMgb3V0IG9mIHNwYWNlLlxuICAgKi9cbiAgUkVTT1VSQ0VfRVhIQVVTVEVEID0gOCxcbiAgLyoqXG4gICAqIE9wZXJhdGlvbiB3YXMgcmVqZWN0ZWQgYmVjYXVzZSB0aGUgc3lzdGVtIGlzIG5vdCBpbiBhIHN0YXRlXG4gICAqIHJlcXVpcmVkIGZvciB0aGUgb3BlcmF0aW9uJ3MgZXhlY3V0aW9uLiAgRm9yIGV4YW1wbGUsIGRpcmVjdG9yeVxuICAgKiB0byBiZSBkZWxldGVkIG1heSBiZSBub24tZW1wdHksIGFuIHJtZGlyIG9wZXJhdGlvbiBpcyBhcHBsaWVkIHRvXG4gICAqIGEgbm9uLWRpcmVjdG9yeSwgZXRjLlxuICAgKlxuICAgKiBBIGxpdG11cyB0ZXN0IHRoYXQgbWF5IGhlbHAgYSBzZXJ2aWNlIGltcGxlbWVudG9yIGluIGRlY2lkaW5nXG4gICAqIGJldHdlZW4gRkFJTEVEX1BSRUNPTkRJVElPTiwgQUJPUlRFRCwgYW5kIFVOQVZBSUxBQkxFOlxuICAgKlxuICAgKiAgLSBVc2UgVU5BVkFJTEFCTEUgaWYgdGhlIGNsaWVudCBjYW4gcmV0cnkganVzdCB0aGUgZmFpbGluZyBjYWxsLlxuICAgKiAgLSBVc2UgQUJPUlRFRCBpZiB0aGUgY2xpZW50IHNob3VsZCByZXRyeSBhdCBhIGhpZ2hlci1sZXZlbFxuICAgKiAgICAoZS5nLiwgcmVzdGFydGluZyBhIHJlYWQtbW9kaWZ5LXdyaXRlIHNlcXVlbmNlKS5cbiAgICogIC0gVXNlIEZBSUxFRF9QUkVDT05ESVRJT04gaWYgdGhlIGNsaWVudCBzaG91bGQgbm90IHJldHJ5IHVudGlsXG4gICAqICAgIHRoZSBzeXN0ZW0gc3RhdGUgaGFzIGJlZW4gZXhwbGljaXRseSBmaXhlZC4gIEUuZy4sIGlmIGFuIFwicm1kaXJcIlxuICAgKiAgICBmYWlscyBiZWNhdXNlIHRoZSBkaXJlY3RvcnkgaXMgbm9uLWVtcHR5LCBGQUlMRURfUFJFQ09ORElUSU9OXG4gICAqICAgIHNob3VsZCBiZSByZXR1cm5lZCBzaW5jZSB0aGUgY2xpZW50IHNob3VsZCBub3QgcmV0cnkgdW5sZXNzXG4gICAqICAgIHRoZXkgaGF2ZSBmaXJzdCBmaXhlZCB1cCB0aGUgZGlyZWN0b3J5IGJ5IGRlbGV0aW5nIGZpbGVzIGZyb20gaXQuXG4gICAqICAtIFVzZSBGQUlMRURfUFJFQ09ORElUSU9OIGlmIHRoZSBjbGllbnQgcGVyZm9ybXMgY29uZGl0aW9uYWxcbiAgICogICAgUkVTVCBHZXQvVXBkYXRlL0RlbGV0ZSBvbiBhIHJlc291cmNlIGFuZCB0aGUgcmVzb3VyY2Ugb24gdGhlXG4gICAqICAgIHNlcnZlciBkb2VzIG5vdCBtYXRjaCB0aGUgY29uZGl0aW9uLiBFLmcuLCBjb25mbGljdGluZ1xuICAgKiAgICByZWFkLW1vZGlmeS13cml0ZSBvbiB0aGUgc2FtZSByZXNvdXJjZS5cbiAgICovXG4gIEZBSUxFRF9QUkVDT05ESVRJT04gPSA5LFxuICAvKipcbiAgICogVGhlIG9wZXJhdGlvbiB3YXMgYWJvcnRlZCwgdHlwaWNhbGx5IGR1ZSB0byBhIGNvbmN1cnJlbmN5IGlzc3VlXG4gICAqIGxpa2Ugc2VxdWVuY2VyIGNoZWNrIGZhaWx1cmVzLCB0cmFuc2FjdGlvbiBhYm9ydHMsIGV0Yy5cbiAgICpcbiAgICogU2VlIGxpdG11cyB0ZXN0IGFib3ZlIGZvciBkZWNpZGluZyBiZXR3ZWVuIEZBSUxFRF9QUkVDT05ESVRJT04sXG4gICAqIEFCT1JURUQsIGFuZCBVTkFWQUlMQUJMRS5cbiAgICovXG4gIEFCT1JURUQgPSAxMCxcbiAgLyoqXG4gICAqIE9wZXJhdGlvbiB3YXMgYXR0ZW1wdGVkIHBhc3QgdGhlIHZhbGlkIHJhbmdlLiAgRS5nLiwgc2Vla2luZyBvclxuICAgKiByZWFkaW5nIHBhc3QgZW5kIG9mIGZpbGUuXG4gICAqXG4gICAqIFVubGlrZSBJTlZBTElEX0FSR1VNRU5ULCB0aGlzIGVycm9yIGluZGljYXRlcyBhIHByb2JsZW0gdGhhdCBtYXlcbiAgICogYmUgZml4ZWQgaWYgdGhlIHN5c3RlbSBzdGF0ZSBjaGFuZ2VzLiBGb3IgZXhhbXBsZSwgYSAzMi1iaXQgZmlsZVxuICAgKiBzeXN0ZW0gd2lsbCBnZW5lcmF0ZSBJTlZBTElEX0FSR1VNRU5UIGlmIGFza2VkIHRvIHJlYWQgYXQgYW5cbiAgICogb2Zmc2V0IHRoYXQgaXMgbm90IGluIHRoZSByYW5nZSBbMCwyXjMyLTFdLCBidXQgaXQgd2lsbCBnZW5lcmF0ZVxuICAgKiBPVVRfT0ZfUkFOR0UgaWYgYXNrZWQgdG8gcmVhZCBmcm9tIGFuIG9mZnNldCBwYXN0IHRoZSBjdXJyZW50XG4gICAqIGZpbGUgc2l6ZS5cbiAgICpcbiAgICogVGhlcmUgaXMgYSBmYWlyIGJpdCBvZiBvdmVybGFwIGJldHdlZW4gRkFJTEVEX1BSRUNPTkRJVElPTiBhbmRcbiAgICogT1VUX09GX1JBTkdFLiAgV2UgcmVjb21tZW5kIHVzaW5nIE9VVF9PRl9SQU5HRSAodGhlIG1vcmUgc3BlY2lmaWNcbiAgICogZXJyb3IpIHdoZW4gaXQgYXBwbGllcyBzbyB0aGF0IGNhbGxlcnMgd2hvIGFyZSBpdGVyYXRpbmcgdGhyb3VnaFxuICAgKiBhIHNwYWNlIGNhbiBlYXNpbHkgbG9vayBmb3IgYW4gT1VUX09GX1JBTkdFIGVycm9yIHRvIGRldGVjdCB3aGVuXG4gICAqIHRoZXkgYXJlIGRvbmUuXG4gICAqL1xuICBPVVRfT0ZfUkFOR0UgPSAxMSxcbiAgLyoqXG4gICAqIE9wZXJhdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgb3Igbm90IHN1cHBvcnRlZC9lbmFibGVkIGluIHRoaXMgc2VydmljZS5cbiAgICovXG4gIFVOSU1QTEVNRU5URUQgPSAxMixcbiAgLyoqXG4gICAqIEludGVybmFsIGVycm9ycy4gIE1lYW5zIHNvbWUgaW52YXJpYW50cyBleHBlY3RlZCBieSB1bmRlcmx5aW5nXG4gICAqIHN5c3RlbSBoYXMgYmVlbiBicm9rZW4uICBJZiB5b3Ugc2VlIG9uZSBvZiB0aGVzZSBlcnJvcnMsXG4gICAqIHNvbWV0aGluZyBpcyB2ZXJ5IGJyb2tlbi5cbiAgICovXG4gIElOVEVSTkFMID0gMTMsXG4gIC8qKlxuICAgKiBUaGUgc2VydmljZSBpcyBjdXJyZW50bHkgdW5hdmFpbGFibGUuICBUaGlzIGlzIGEgbW9zdCBsaWtlbHkgYVxuICAgKiB0cmFuc2llbnQgY29uZGl0aW9uIGFuZCBtYXkgYmUgY29ycmVjdGVkIGJ5IHJldHJ5aW5nIHdpdGhcbiAgICogYSBiYWNrb2ZmLlxuICAgKlxuICAgKiBTZWUgbGl0bXVzIHRlc3QgYWJvdmUgZm9yIGRlY2lkaW5nIGJldHdlZW4gRkFJTEVEX1BSRUNPTkRJVElPTixcbiAgICogQUJPUlRFRCwgYW5kIFVOQVZBSUxBQkxFLlxuICAgKi9cbiAgVU5BVkFJTEFCTEUgPSAxNCxcbiAgLyoqXG4gICAqIFVucmVjb3ZlcmFibGUgZGF0YSBsb3NzIG9yIGNvcnJ1cHRpb24uXG4gICAqL1xuICBEQVRBX0xPU1MgPSAxNSxcbiAgLyoqXG4gICAqIFRoZSByZXF1ZXN0IGRvZXMgbm90IGhhdmUgdmFsaWQgYXV0aGVudGljYXRpb24gY3JlZGVudGlhbHMgZm9yIHRoZVxuICAgKiBvcGVyYXRpb24uXG4gICAqL1xuICBVTkFVVEhFTlRJQ0FURUQgPSAxNixcbn1cblxuLyoqIEEgdGV4dCBhbm5vdGF0aW9uIHdpdGggYSBzZXQgb2YgYXR0cmlidXRlcy4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQW5ub3RhdGlvbiB7XG4gIC8qKiBBIHVzZXItc3VwcGxpZWQgbWVzc2FnZSBkZXNjcmliaW5nIHRoZSBldmVudC4gKi9cbiAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgLyoqIEEgdGltZXN0YW1wIGZvciB0aGUgZXZlbnQgZXZlbnQuICovXG4gIHRpbWVzdGFtcDogbnVtYmVyO1xuICAvKiogQSBzZXQgb2YgYXR0cmlidXRlcyBvbiB0aGUgYW5ub3RhdGlvbi4gKi9cbiAgYXR0cmlidXRlczogQXR0cmlidXRlcztcbn1cblxuLyoqIEFuIGV2ZW50IGRlc2NyaWJpbmcgYSBtZXNzYWdlIHNlbnQvcmVjZWl2ZWQgYmV0d2VlbiBTcGFucy4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTWVzc2FnZUV2ZW50IHtcbiAgLyoqIEEgdGltZXN0YW1wIGZvciB0aGUgZXZlbnQuICovXG4gIHRpbWVzdGFtcDogbnVtYmVyO1xuICAvKiogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIG1lc3NhZ2Ugd2FzIHNlbnQgb3IgcmVjZWl2ZWQuICovXG4gIHR5cGU6IE1lc3NhZ2VFdmVudFR5cGU7XG4gIC8qKlxuICAgKiBBbiBpZGVudGlmaWVyIGZvciB0aGUgTWVzc2FnZUV2ZW50J3MgbWVzc2FnZSB0aGF0IGNhbiBiZSB1c2VkIHRvIG1hdGNoXG4gICAqIFNFTlQgYW5kIFJFQ0VJVkVEIE1lc3NhZ2VFdmVudHMuIE1lc3NhZ2UgZXZlbnQgaWRzIHNob3VsZCBzdGFydCB3aXRoIDEgZm9yXG4gICAqIGJvdGggc2VudCBhbmQgcmVjZWl2ZWQgbWVzc2FnZXMgYW5kIGluY3JlbWVudCBieSAxIGZvciBlYWNoIG1lc3NhZ2VcbiAgICogc2VudC9yZWNlaXZlZC5cbiAgICovXG4gIGlkOiBudW1iZXI7XG4gIC8qKiBUaGUgbnVtYmVyIG9mIHVuY29tcHJlc3NlZCBieXRlcyBzZW50IG9yIHJlY2VpdmVkLiAqL1xuICB1bmNvbXByZXNzZWRTaXplPzogbnVtYmVyO1xuICAvKipcbiAgICogVGhlIG51bWJlciBvZiBjb21wcmVzc2VkIGJ5dGVzIHNlbnQgb3IgcmVjZWl2ZWQuIElmIHplcm8gb3JcbiAgICogdW5kZWZpbmVkLCBhc3N1bWVkIHRvIGJlIHRoZSBzYW1lIHNpemUgYXMgdW5jb21wcmVzc2VkLlxuICAgKi9cbiAgY29tcHJlc3NlZFNpemU/OiBudW1iZXI7XG59XG5cbi8qKlxuICogQSBwb2ludGVyIGZyb20gdGhlIGN1cnJlbnQgc3BhbiB0byBhbm90aGVyIHNwYW4gaW4gdGhlIHNhbWUgdHJhY2Ugb3IgaW4gYVxuICogZGlmZmVyZW50IHRyYWNlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIExpbmsge1xuICAvKiogVGhlIHRyYWNlIElEIGZvciBhIHRyYWNlIHdpdGhpbiBhIHByb2plY3QuICovXG4gIHRyYWNlSWQ6IHN0cmluZztcbiAgLyoqIFRoZSBzcGFuIElEIGZvciBhIHNwYW4gd2l0aGluIGEgdHJhY2UuICovXG4gIHNwYW5JZDogc3RyaW5nO1xuICAvKiogVGhlIHJlbGF0aW9uc2hpcCBvZiB0aGUgY3VycmVudCBzcGFuIHJlbGF0aXZlIHRvIHRoZSBsaW5rZWQuICovXG4gIHR5cGU6IExpbmtUeXBlO1xuICAvKiogQSBzZXQgb2YgYXR0cmlidXRlcyBvbiB0aGUgbGluay4gKi9cbiAgYXR0cmlidXRlczogQXR0cmlidXRlcztcbn1cblxuLyoqIERlZmluZXMgdGhlIHRyYWNlIG9wdGlvbnMgKi9cbmV4cG9ydCBpbnRlcmZhY2UgVHJhY2VPcHRpb25zIHtcbiAgLyoqIFJvb3Qgc3BhbiBuYW1lICovXG4gIG5hbWU6IHN0cmluZztcbiAgLyoqIFRyYWNlIGNvbnRleHQgKi9cbiAgc3BhbkNvbnRleHQ/OiBTcGFuQ29udGV4dDtcbiAgLyoqIFNwYW4ga2luZCAqL1xuICBraW5kPzogU3BhbktpbmQ7XG4gIC8qKiBEZXRlcm1pbmVzIHRoZSBzYW1wbGluZyByYXRlLiBSYW5nZXMgZnJvbSAwLjAgdG8gMS4wICovXG4gIHNhbXBsaW5nUmF0ZT86IG51bWJlcjtcbn1cblxuLyoqIERlZmluZXMgdGhlIHNwYW4gb3B0aW9ucyAqL1xuZXhwb3J0IGludGVyZmFjZSBTcGFuT3B0aW9ucyB7XG4gIC8qKiBTcGFuIG5hbWUgKi9cbiAgbmFtZTogc3RyaW5nO1xuICAvKiogU3BhbiBraW5kICovXG4gIGtpbmQ/OiBTcGFuS2luZDtcbiAgLyoqIFRoZSBuZXcgc3BhbidzIHBhcmVudCAqL1xuICBjaGlsZE9mPzogU3Bhbjtcbn1cblxuZXhwb3J0IHR5cGUgVHJhY2VTdGF0ZSA9IHN0cmluZztcblxuLyoqIERlZmluZXMgdGhlIHNwYW4gY29udGV4dCAqL1xuZXhwb3J0IGludGVyZmFjZSBTcGFuQ29udGV4dCB7XG4gIC8qKiBUcmFjZSBJRCAqL1xuICB0cmFjZUlkOiBzdHJpbmc7XG4gIC8qKiBTcGFuIElEICovXG4gIHNwYW5JZDogc3RyaW5nO1xuICAvKiogT3B0aW9ucyAqL1xuICBvcHRpb25zPzogbnVtYmVyO1xuICAvKiogVHJhY2VTdGF0ZSAqL1xuICB0cmFjZVN0YXRlPzogVHJhY2VTdGF0ZTtcbn1cblxuLyoqIERlZmluZXMgYW4gZW5kIHNwYW4gZXZlbnQgbGlzdGVuZXIgKi9cbmV4cG9ydCBpbnRlcmZhY2UgU3BhbkV2ZW50TGlzdGVuZXIge1xuICAvKiogSGFwcGVucyB3aGVuIGEgc3BhbiBpcyBzdGFydGVkICovXG4gIG9uU3RhcnRTcGFuKHNwYW46IFNwYW4pOiB2b2lkO1xuICAvKiogSGFwcGVucyB3aGVuIGEgc3BhbiBpcyBlbmRlZCAqL1xuICBvbkVuZFNwYW4oc3BhbjogU3Bhbik6IHZvaWQ7XG59XG5cbi8qKiBBbiBldmVudCBkZXNjcmliaW5nIGEgbWVzc2FnZSBzZW50L3JlY2VpdmVkIGJldHdlZW4gU3BhbnMuICovXG5leHBvcnQgZW51bSBNZXNzYWdlRXZlbnRUeXBlIHtcbiAgLyoqIFVua25vd24gZXZlbnQgdHlwZS4gKi9cbiAgVU5TUEVDSUZJRUQgPSAwLFxuICAvKiogSW5kaWNhdGVzIGEgc2VudCBtZXNzYWdlLiAqL1xuICBTRU5UID0gMSxcbiAgLyoqIEluZGljYXRlcyBhIHJlY2VpdmVkIG1lc3NhZ2UuICovXG4gIFJFQ0VJVkVEID0gMixcbn1cblxuLyoqXG4gKiBUeXBlIG9mIHNwYW4uIENhbiBiZSB1c2VkIHRvIHNwZWNpZnkgYWRkaXRpb25hbCByZWxhdGlvbnNoaXBzIGJldHdlZW4gc3BhbnNcbiAqIGluIGFkZGl0aW9uIHRvIGEgcGFyZW50L2NoaWxkIHJlbGF0aW9uc2hpcC5cbiAqL1xuZXhwb3J0IGVudW0gU3BhbktpbmQge1xuICAvKiogVW5zcGVjaWZpZWQgKi9cbiAgVU5TUEVDSUZJRUQgPSAwLFxuICAvKipcbiAgICogSW5kaWNhdGVzIHRoYXQgdGhlIHNwYW4gY292ZXJzIHNlcnZlci1zaWRlIGhhbmRsaW5nIG9mIGFuIFJQQyBvciBvdGhlclxuICAgKiByZW1vdGUgbmV0d29yayByZXF1ZXN0LlxuICAgKi9cbiAgU0VSVkVSID0gMSxcbiAgLyoqXG4gICAqIEluZGljYXRlcyB0aGF0IHRoZSBzcGFuIGNvdmVycyB0aGUgY2xpZW50LXNpZGUgd3JhcHBlciBhcm91bmQgYW4gUlBDIG9yXG4gICAqIG90aGVyIHJlbW90ZSByZXF1ZXN0LlxuICAgKi9cbiAgQ0xJRU5UID0gMixcbn1cblxuLyoqXG4gKiBUeXBlIG9mIGxpbmsuIFRoZSByZWxhdGlvbnNoaXAgb2YgdGhlIGN1cnJlbnQgc3BhbiByZWxhdGl2ZSB0byB0aGUgbGlua2VkXG4gKiBzcGFuLlxuICovXG5leHBvcnQgZW51bSBMaW5rVHlwZSB7XG4gIC8qKlxuICAgKiBUaGUgcmVsYXRpb25zaGlwIG9mIHRoZSB0d28gc3BhbnMgaXMgdW5rbm93biwgb3Iga25vd24gYnV0IG90aGVyXG4gICAqIHRoYW4gcGFyZW50LWNoaWxkLlxuICAgKi9cbiAgVU5TUEVDSUZJRUQgPSAwLFxuICAvKiogVGhlIGxpbmtlZCBzcGFuIGlzIGEgY2hpbGQgb2YgdGhlIGN1cnJlbnQgc3Bhbi4gKi9cbiAgQ0hJTERfTElOS0VEX1NQQU4gPSAxLFxuICAvKiogVGhlIGxpbmtlZCBzcGFuIGlzIGEgcGFyZW50IG9mIHRoZSBjdXJyZW50IHNwYW4uICovXG4gIFBBUkVOVF9MSU5LRURfU1BBTiA9IDIsXG59XG5cbi8qKiBJbnRlcmZhY2UgZm9yIFNwYW4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU3BhbiB7XG4gIC8qKiBUaGUgU3BhbiBJRCBvZiB0aGlzIHNwYW4gKi9cbiAgcmVhZG9ubHkgaWQ6IHN0cmluZztcblxuICAvKiogQSB0cmFjZXIgb2JqZWN0LCBleHBvc29uZyB0aGUgdHJhY2VyIG1ha2VzIGl0IHBvc3NpYmxlIHRvIGNyZWF0ZSBjaGlsZFxuICAgKiBzcGFucyBmcm9tIHRoZSBzcGFuIGluc3RhbmNlIGxpa2UuIHNwYW4udHJhY2VyLnN0YXJ0Q2hpbGRTcGFuKClcbiAgICovXG4gIHRyYWNlcjogVHJhY2VyQmFzZTtcblxuICAvKiogSWYgdGhlIHBhcmVudCBzcGFuIGlzIGluIGFub3RoZXIgcHJvY2Vzcy4gKi9cbiAgcmVtb3RlUGFyZW50OiBib29sZWFuO1xuXG4gIC8qKiBUaGUgc3BhbiBJRCBvZiB0aGlzIHNwYW4ncyBwYXJlbnQuIElmIGl0J3MgYSByb290IHNwYW4sIG11c3QgYmUgZW1wdHkgKi9cbiAgcGFyZW50U3BhbklkOiBzdHJpbmc7XG5cbiAgLyoqIFRoZSByZXNvdXJjZSBuYW1lIG9mIHRoZSBzcGFuICovXG4gIG5hbWU6IHN0cmluZztcblxuICAvKiogS2luZCBvZiBzcGFuLiAqL1xuICBraW5kOiBTcGFuS2luZDtcblxuICAvKiogQW4gb2JqZWN0IHRvIGxvZyBpbmZvcm1hdGlvbiB0byAqL1xuICBsb2dnZXI6IGxvZ2dlclR5cGVzLkxvZ2dlcjtcblxuICAvKiogQSBmaW5hbCBzdGF0dXMgZm9yIHRoaXMgc3BhbiAqL1xuICBzdGF0dXM6IFN0YXR1cztcblxuICAvKiogQSBzZXQgb2YgYXR0cmlidXRlcywgZWFjaCBpbiB0aGUgZm9ybWF0IFtLRVldOltWQUxVRV0gKi9cbiAgYXR0cmlidXRlczogQXR0cmlidXRlcztcblxuICAvKiogQSB0ZXh0IGFubm90YXRpb24gd2l0aCBhIHNldCBvZiBhdHRyaWJ1dGVzLiAqL1xuICBhbm5vdGF0aW9uczogQW5ub3RhdGlvbltdO1xuXG4gIC8qKiBBbiBldmVudCBkZXNjcmliaW5nIGEgbWVzc2FnZSBzZW50L3JlY2VpdmVkIGJldHdlZW4gU3BhbnMuICovXG4gIG1lc3NhZ2VFdmVudHM6IE1lc3NhZ2VFdmVudFtdO1xuXG4gIC8qKiBQb2ludGVycyBmcm9tIHRoZSBjdXJyZW50IHNwYW4gdG8gYW5vdGhlciBzcGFuICovXG4gIGxpbmtzOiBMaW5rW107XG5cbiAgLyoqIFJlY3Vyc2l2ZWx5IGdldHMgdGhlIGRlc2NlbmRhbnQgc3BhbnMuICovXG4gIGFsbERlc2NlbmRhbnRzKCk6IFNwYW5bXTtcblxuICAvKiogVGhlIGxpc3Qgb2YgaW1tZWRpYXRlIGNoaWxkIHNwYW5zLiAqL1xuICBzcGFuczogU3BhbltdO1xuXG4gIC8qKiBUaGUgbnVtYmVyIG9mIGRpcmVjdCBjaGlsZHJlbiAqL1xuICBudW1iZXJPZkNoaWxkcmVuOiBudW1iZXI7XG5cbiAgLyoqIFRyYWNlIGlkIGFzc2NvaWF0ZWQgd2l0aCBzcGFuLiAqL1xuICByZWFkb25seSB0cmFjZUlkOiBzdHJpbmc7XG5cbiAgLyoqIFRyYWNlIHN0YXRlIGFzc29jaWF0ZWQgd2l0aCBzcGFuICovXG4gIHJlYWRvbmx5IHRyYWNlU3RhdGU/OiBUcmFjZVN0YXRlO1xuXG4gIC8qKiBJbmRpY2F0ZXMgaWYgc3BhbiB3YXMgc3RhcnRlZC4gKi9cbiAgcmVhZG9ubHkgc3RhcnRlZDogYm9vbGVhbjtcblxuICAvKiogSW5kaWNhdGVzIGlmIHNwYW4gd2FzIGVuZGVkLiAqL1xuICByZWFkb25seSBlbmRlZDogYm9vbGVhbjtcblxuICAvKipcbiAgICogR2l2ZXMgYSB0aW1lc3RhcCB0aGF0IGluZGljYXRlcyB0aGUgc3BhbidzIHN0YXJ0IHRpbWUgaW4gUkZDMzMzOSBVVENcbiAgICogXCJadWx1XCIgZm9ybWF0LlxuICAgKi9cbiAgcmVhZG9ubHkgc3RhcnRUaW1lOiBEYXRlO1xuXG4gIC8qKlxuICAgKiBHaXZlcyBhIHRpbWVzdGFwIHRoYXQgaW5kaWNhdGVzIHRoZSBzcGFuJ3MgZW5kIHRpbWUgaW4gUkZDMzMzOSBVVENcbiAgICogXCJadWx1XCIgZm9ybWF0LlxuICAgKi9cbiAgcmVhZG9ubHkgZW5kVGltZTogRGF0ZTtcblxuICAvKipcbiAgICogR2l2ZXMgYSB0aW1lc3RhcCB0aGF0IGluZGljYXRlcyB0aGUgc3BhbidzIGR1cmF0aW9uIGluIFJGQzMzMzkgVVRDXG4gICAqIFwiWnVsdVwiIGZvcm1hdC5cbiAgICovXG4gIHJlYWRvbmx5IGR1cmF0aW9uOiBudW1iZXI7XG5cbiAgLyoqIEdpdmVzIHRoZSBUcmFjZUNvbnRleHQgb2YgdGhlIHNwYW4uICovXG4gIHJlYWRvbmx5IHNwYW5Db250ZXh0OiBTcGFuQ29udGV4dDtcblxuICAvKiogVHJhY2UgUGFyYW1ldGVycyAqL1xuICBhY3RpdmVUcmFjZVBhcmFtczogY29uZmlnVHlwZXMuVHJhY2VQYXJhbXM7XG5cbiAgLyoqIFRoZSBudW1iZXIgb2YgZHJvcHBlZCBhdHRyaWJ1dGVzLiAqL1xuICBkcm9wcGVkQXR0cmlidXRlc0NvdW50OiBudW1iZXI7XG5cbiAgLyoqIFRoZSBudW1iZXIgb2YgZHJvcHBlZCBsaW5rcy4gKi9cbiAgZHJvcHBlZExpbmtzQ291bnQ6IG51bWJlcjtcblxuICAvKiogVGhlIG51bWJlciBvZiBkcm9wcGVkIGFubm90YXRpb25zLiAqL1xuICBkcm9wcGVkQW5ub3RhdGlvbnNDb3VudDogbnVtYmVyO1xuXG4gIC8qKiBUaGUgbnVtYmVyIG9mIGRyb3BwZWQgbWVzc2FnZSBldmVudHMuICovXG4gIGRyb3BwZWRNZXNzYWdlRXZlbnRzQ291bnQ6IG51bWJlcjtcblxuICAvKipcbiAgICogQWRkcyBhbiBhdHJpYnV0ZSB0byB0aGUgc3Bhbi5cbiAgICogQHBhcmFtIGtleSBEZXNjcmliZXMgdGhlIHZhbHVlIGFkZGVkLlxuICAgKiBAcGFyYW0gdmFsdWUgVGhlIHJlc3VsdCBvZiBhbiBvcGVyYXRpb24uXG4gICAqL1xuICBhZGRBdHRyaWJ1dGUoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuIHwgb2JqZWN0KTogdm9pZDtcblxuICAvKipcbiAgICogQWRkcyBhbiBhbm5vdGF0aW9uIHRvIHRoZSBzcGFuLlxuICAgKiBAcGFyYW0gZGVzY3JpcHRpb24gRGVzY3JpYmVzIHRoZSBldmVudC5cbiAgICogQHBhcmFtIGF0dHJpYnV0ZXMgQSBzZXQgb2YgYXR0cmlidXRlcyBvbiB0aGUgYW5ub3RhdGlvbi5cbiAgICogQHBhcmFtIHRpbWVzdGFtcCBBIHRpbWVzdGFtcCBmb3IgdGhpcyBldmVudC5cbiAgICovXG4gIGFkZEFubm90YXRpb24oXG4gICAgZGVzY3JpcHRpb246IHN0cmluZyxcbiAgICBhdHRyaWJ1dGVzPzogQXR0cmlidXRlcyxcbiAgICB0aW1lc3RhbXA/OiBudW1iZXJcbiAgKTogdm9pZDtcblxuICAvKipcbiAgICogQWRkcyBhIGxpbmsgdG8gdGhlIHNwYW4uXG4gICAqIEBwYXJhbSB0cmFjZUlkIFRoZSB0cmFjZSBJRCBmb3IgYSB0cmFjZSB3aXRoaW4gYSBwcm9qZWN0LlxuICAgKiBAcGFyYW0gc3BhbklkIFRoZSBzcGFuIElEIGZvciBhIHNwYW4gd2l0aGluIGEgdHJhY2UuXG4gICAqIEBwYXJhbSB0eXBlIFRoZSByZWxhdGlvbnNoaXAgb2YgdGhlIGN1cnJlbnQgc3BhbiByZWxhdGl2ZSB0byB0aGUgbGlua2VkLlxuICAgKiBAcGFyYW0gYXR0cmlidXRlcyBBIHNldCBvZiBhdHRyaWJ1dGVzIG9uIHRoZSBsaW5rLlxuICAgKi9cbiAgYWRkTGluayhcbiAgICB0cmFjZUlkOiBzdHJpbmcsXG4gICAgc3BhbklkOiBzdHJpbmcsXG4gICAgdHlwZTogTGlua1R5cGUsXG4gICAgYXR0cmlidXRlcz86IEF0dHJpYnV0ZXNcbiAgKTogdm9pZDtcblxuICAvKipcbiAgICogQWRkcyBhIG1lc3NhZ2UgZXZlbnQgdG8gdGhlIHNwYW4uXG4gICAqIEBwYXJhbSB0eXBlIFRoZSB0eXBlIG9mIG1lc3NhZ2UgZXZlbnQuXG4gICAqIEBwYXJhbSBpZCBBbiBpZGVudGlmaWVyIGZvciB0aGUgbWVzc2FnZSBldmVudC5cbiAgICogQHBhcmFtIHRpbWVzdGFtcCBBIHRpbWVzdGFtcCBmb3IgdGhpcyBldmVudC5cbiAgICogQHBhcmFtIHVuY29tcHJlc3NlZFNpemUgVGhlIG51bWJlciBvZiB1bmNvbXByZXNzZWQgYnl0ZXMgc2VudCBvciByZWNlaXZlZC5cbiAgICogQHBhcmFtIGNvbXByZXNzZWRTaXplIFRoZSBudW1iZXIgb2YgY29tcHJlc3NlZCBieXRlcyBzZW50IG9yIHJlY2VpdmVkLiBJZlxuICAgKiAgICAgemVybyBvciB1bmRlZmluZWQsIGFzc3VtZWQgdG8gYmUgdGhlIHNhbWUgc2l6ZSBhcyB1bmNvbXByZXNzZWQuXG4gICAqL1xuICBhZGRNZXNzYWdlRXZlbnQoXG4gICAgdHlwZTogTWVzc2FnZUV2ZW50VHlwZSxcbiAgICBpZDogbnVtYmVyLFxuICAgIHRpbWVzdGFtcD86IG51bWJlcixcbiAgICB1bmNvbXByZXNzZWRTaXplPzogbnVtYmVyLFxuICAgIGNvbXByZXNzZWRTaXplPzogbnVtYmVyXG4gICk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFNldHMgYSBzdGF0dXMgdG8gdGhlIHNwYW4uXG4gICAqIEBwYXJhbSBjb2RlIFRoZSBjYW5vbmljYWwgc3RhdHVzIGNvZGUuXG4gICAqIEBwYXJhbSBtZXNzYWdlIG9wdGlvbmFsIEEgZGV2ZWxvcGVyLWZhY2luZyBlcnJvciBtZXNzYWdlLlxuICAgKi9cbiAgc2V0U3RhdHVzKGNvZGU6IENhbm9uaWNhbENvZGUsIG1lc3NhZ2U/OiBzdHJpbmcpOiB2b2lkO1xuXG4gIC8qKiBTdGFydHMgYSBzcGFuLiAqL1xuICBzdGFydCgpOiB2b2lkO1xuXG4gIC8qKiBFbmRzIGEgc3BhbiBhbmQgYWxsIG9mIGl0cyBjaGlsZHJlbiwgcmVjdXJzaXZlbHkuICovXG4gIGVuZCgpOiB2b2lkO1xuXG4gIC8qKiBGb3JjZXMgdG8gZW5kIGEgc3Bhbi4gKi9cbiAgdHJ1bmNhdGUoKTogdm9pZDtcblxuICAvKiogU3RhcnRzIGEgbmV3IFNwYW4gaW5zdGFuY2UgYXMgYSBjaGlsZCBvZiB0aGlzIGluc3RhbmNlICovXG4gIHN0YXJ0Q2hpbGRTcGFuKG9wdGlvbnM/OiBTcGFuT3B0aW9ucyk6IFNwYW47XG5cbiAgLyoqIFJldHVybnMgd2hldGhlciBhIHNwYW4gaXMgcm9vdCBvciBub3QuICovXG4gIGlzUm9vdFNwYW4oKTogYm9vbGVhbjtcbn1cblxuLyoqIEludGVyZmFjZSBmb3IgVHJhY2VyQmFzZSAqL1xuZXhwb3J0IGludGVyZmFjZSBUcmFjZXJCYXNlIGV4dGVuZHMgU3BhbkV2ZW50TGlzdGVuZXIge1xuICAvKiogQSBzYW1wbGVyIHRoYXQgd2lsbCBkZWNpZGUgaWYgdGhlIHNwYW4gd2lsbCBiZSBzYW1wbGVkIG9yIG5vdCAqL1xuICBzYW1wbGVyOiBzYW1wbGVyVHlwZXMuU2FtcGxlcjtcblxuICAvKiogQSBjb25maWd1cmF0aW9uIGZvciBzdGFydGluZyB0aGUgdHJhY2VyICovXG4gIGxvZ2dlcjogbG9nZ2VyVHlwZXMuTG9nZ2VyO1xuXG4gIC8qKiBBIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGZvciB0cmFjZSBwYXJhbWV0ZXJzICovXG4gIGFjdGl2ZVRyYWNlUGFyYW1zOiBjb25maWdUeXBlcy5UcmFjZVBhcmFtcztcblxuICAvKiogQSBwcm9wYWdhdGlvbiBpbnN0YW5jZSAqL1xuICByZWFkb25seSBwcm9wYWdhdGlvbjogUHJvcGFnYXRpb247XG5cbiAgLyoqIEdldCB0aGUgZXZlbnRMaXN0ZW5lcnMgZnJvbSB0cmFjZXIgaW5zdGFuY2UgKi9cbiAgcmVhZG9ubHkgZXZlbnRMaXN0ZW5lcnM6IFNwYW5FdmVudExpc3RlbmVyW107XG5cbiAgLyoqIEdldCB0aGUgYWN0aXZlIHN0YXR1cyBmcm9tIHRyYWNlciBpbnN0YW5jZSAqL1xuICByZWFkb25seSBhY3RpdmU6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFN0YXJ0IGEgdHJhY2VyIGluc3RhbmNlXG4gICAqIEBwYXJhbSBjb25maWcgQ29uZmlndXJhdGlvbiBmb3IgdHJhY2VyIGluc3RhY2VcbiAgICogQHJldHVybnMgQSB0cmFjZXIgaW5zdGFuY2Ugc3RhcnRlZFxuICAgKi9cbiAgc3RhcnQoY29uZmlnOiBjb25maWdUeXBlcy5UcmFjZXJDb25maWcpOiB0aGlzO1xuXG4gIC8qKiBTdG9wIHRoZSB0cmFjZXIgaW5zdGFuY2UgKi9cbiAgc3RvcCgpOiB0aGlzO1xuXG4gIC8qKlxuICAgKiBTdGFydCBhIG5ldyBSb290U3BhbiB0byBjdXJyZW50Um9vdFNwYW5cbiAgICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyBmb3IgdHJhY2VyIGluc3RhbmNlXG4gICAqIEBwYXJhbSBmbiBDYWxsYmFjayBmdW5jdGlvblxuICAgKiBAcmV0dXJucyBUaGUgY2FsbGJhY2sgcmV0dXJuXG4gICAqL1xuICBzdGFydFJvb3RTcGFuPFQ+KG9wdGlvbnM6IFRyYWNlT3B0aW9ucywgZm46IChyb290OiBTcGFuKSA9PiBUKTogVDtcblxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBPbkVuZFNwYW5FdmVudExpc3RlbmVyIG9uIHRoZSB0cmFjZXIgaW5zdGFuY2VcbiAgICogQHBhcmFtIGxpc3RlbmVyIEFuIE9uRW5kU3BhbkV2ZW50TGlzdGVuZXIgaW5zdGFuY2VcbiAgICovXG4gIHJlZ2lzdGVyU3BhbkV2ZW50TGlzdGVuZXIobGlzdGVuZXI6IFNwYW5FdmVudExpc3RlbmVyKTogdm9pZDtcblxuICAvKipcbiAgICogVW5yZWdpc3RlcnMgYW4gZW5kIHNwYW4gZXZlbnQgbGlzdGVuZXIuXG4gICAqIEBwYXJhbSBsaXN0ZW5lciBUaGUgbGlzdGVuZXIgdG8gdW5yZWdpc3Rlci5cbiAgICovXG4gIHVucmVnaXN0ZXJTcGFuRXZlbnRMaXN0ZW5lcihsaXN0ZW5lcjogU3BhbkV2ZW50TGlzdGVuZXIpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBTdGFydCBhIG5ldyBTcGFuIGluc3RhbmNlIHRvIHRoZSBjdXJyZW50Um9vdFNwYW5cbiAgICogQHBhcmFtIFtvcHRpb25zXSBBIFRyYWNlT3B0aW9ucyBvYmplY3QgdG8gc3RhcnQgYSByb290IHNwYW4uXG4gICAqIEByZXR1cm5zIFRoZSBuZXcgU3BhbiBpbnN0YW5jZSBzdGFydGVkXG4gICAqL1xuICBzdGFydENoaWxkU3BhbihvcHRpb25zPzogU3Bhbk9wdGlvbnMpOiBTcGFuO1xuXG4gIC8qKiBTZXRzIHRoZSBjdXJyZW50IHJvb3Qgc3Bhbi4gKi9cbiAgc2V0Q3VycmVudFJvb3RTcGFuKHJvb3Q6IFNwYW4pOiB2b2lkO1xufVxuXG4vKiogSW50ZXJmYWNlIGZvciBUcmFjZXIgKi9cbmV4cG9ydCBpbnRlcmZhY2UgVHJhY2VyIGV4dGVuZHMgVHJhY2VyQmFzZSB7XG4gIC8qKiBHZXQgYW5kIHNldCB0aGUgY3VycmVudFJvb3RTcGFuIHRvIHRyYWNlciBpbnN0YW5jZSAqL1xuICBjdXJyZW50Um9vdFNwYW46IFNwYW47XG5cbiAgLyoqIENsZWFyIHRoZSBjdXJyZW50Um9vdFNwYW4gZnJvbSB0cmFjZXIgaW5zdGFuY2UgKi9cbiAgY2xlYXJDdXJyZW50VHJhY2UoKTogdm9pZDtcblxuICAvKipcbiAgICogQmluZHMgdGhlIHRyYWNlIGNvbnRleHQgdG8gdGhlIGdpdmVuIGZ1bmN0aW9uLlxuICAgKiBUaGlzIGlzIG5lY2Vzc2FyeSBpbiBvcmRlciB0byBjcmVhdGUgY2hpbGQgc3BhbnMgY29ycmVjdGx5IGluIGZ1bmN0aW9uc1xuICAgKiB0aGF0IGFyZSBjYWxsZWQgYXN5bmNocm9ub3VzbHkgKGZvciBleGFtcGxlLCBpbiBhIG5ldHdvcmsgcmVzcG9uc2VcbiAgICogaGFuZGxlcikuXG4gICAqIEBwYXJhbSBmbiBBIGZ1bmN0aW9uIHRvIHdoaWNoIHRvIGJpbmQgdGhlIHRyYWNlIGNvbnRleHQuXG4gICAqL1xuICB3cmFwPFQ+KGZuOiBGdW5jPFQ+KTogRnVuYzxUPjtcblxuICAvKipcbiAgICogQmluZHMgdGhlIHRyYWNlIGNvbnRleHQgdG8gdGhlIGdpdmVuIGV2ZW50IGVtaXR0ZXIuXG4gICAqIFRoaXMgaXMgbmVjZXNzYXJ5IGluIG9yZGVyIHRvIGNyZWF0ZSBjaGlsZCBzcGFucyBjb3JyZWN0bHkgaW4gZXZlbnRcbiAgICogaGFuZGxlcnMuXG4gICAqIEBwYXJhbSBlbWl0dGVyIEFuIGV2ZW50IGVtaXR0ZXIgd2hvc2UgaGFuZGxlcnMgc2hvdWxkIGhhdmVcbiAgICogICAgIHRoZSB0cmFjZSBjb250ZXh0IGJpbmRlZCB0byB0aGVtLlxuICAgKi9cbiAgd3JhcEVtaXR0ZXIoZW1pdHRlcjogTm9kZUpTLkV2ZW50RW1pdHRlcik6IHZvaWQ7XG59XG4iXSwibWFwcGluZ3MiOiJhQUFBOzs7Ozs7Ozs7Ozs7OztHQUFBLFNBQUFBLGVBQUEsTUFBQUMsSUFBQSxnR0FBQUMsSUFBQSxnREFBQUMsTUFBQSxLQUFBQyxRQUFBLHNCQUFBQyxHQUFBLG9CQUFBQyxZQUFBLEVBQUFMLElBQUEsNEZBQUFNLFlBQUEsT0FBQUMsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsV0FBQUYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsV0FBQUYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsV0FBQUYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsV0FBQUYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsV0FBQUYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsV0FBQUYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsV0FBQUYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsV0FBQUYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsV0FBQUYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsWUFBQUYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsWUFBQUYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsWUFBQUYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsWUFBQUYsS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsWUFBQUYsS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsWUFBQUYsS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsWUFBQUYsS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsWUFBQUYsS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsWUFBQUYsS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsWUFBQUYsS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsWUFBQUYsS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsWUFBQUYsS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsWUFBQUYsS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsWUFBQUYsS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsWUFBQUYsS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsWUFBQUYsS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsWUFBQUYsS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsWUFBQUYsS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsWUFBQUYsS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsWUFBQUYsS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsWUFBQUYsS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsWUFBQUYsS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsT0FBQUUsS0FBQSxPQUFBQyxJQUFBLGlCQUFBQyxJQUFBLEVBQUFOLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFLLEdBQUEsRUFBQVAsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsS0FBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsS0FBQUQsSUFBQSxVQUFBSSxJQUFBLGlCQUFBQyxJQUFBLEVBQUFOLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLEtBQUFLLEdBQUEsRUFBQVAsS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1BQUEsS0FBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsS0FBQUQsSUFBQSxXQUFBSSxJQUFBLGlCQUFBQyxJQUFBLEVBQUFOLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLEtBQUFLLEdBQUEsRUFBQVAsS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1BQUEsS0FBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsS0FBQUQsSUFBQSxXQUFBSSxJQUFBLGlCQUFBQyxJQUFBLEVBQUFOLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLEtBQUFLLEdBQUEsRUFBQVAsS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1BQUEsS0FBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsS0FBQUQsSUFBQSxPQUFBTyxTQUFBLE9BQUFELEdBQUEsRUFBQVAsS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1BQUEsS0FBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsTUFBQU8sSUFBQSxlQUFBQyxTQUFBLEdBQUFWLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLE9BQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLE9BQUFELElBQUEsV0FBQU0sR0FBQSxFQUFBUCxLQUFBLEVBQUFDLElBQUEsS0FBQUMsTUFBQSxLQUFBQyxHQUFBLEVBQUFGLElBQUEsS0FBQUMsTUFBQSxNQUFBTyxJQUFBLGVBQUFDLFNBQUEsR0FBQVYsS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1BQUEsS0FBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsT0FBQUYsS0FBQSxFQUFBQyxJ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