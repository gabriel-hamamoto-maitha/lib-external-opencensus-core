{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-root-span.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-root-span.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport { NoRecordSpan } from '../src/trace/model/no-record/no-record-span';\nimport { RootSpan } from '../src/trace/model/root-span';\nimport { Span } from '../src/trace/model/span';\nimport { CoreTracer } from '../src/trace/model/tracer';\nimport * as types from '../src/trace/model/types';\nimport { Annotation, Link } from '../src/trace/model/types';\n\nconst tracer = new CoreTracer();\n\ndescribe('RootSpan', () => {\n  const name = 'MySpanName';\n  const kind = types.SpanKind.SERVER;\n  const traceId = 'd4cda95b652f4a1592b449d5929fda1b';\n  const parentSpanId = '';\n\n  /**\n   * Should create a RootSpan instance\n   */\n  describe('new RootSpan()', () => {\n    it('should create a RootSpan instance', () => {\n      const root = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      assert.ok(root instanceof RootSpan);\n    });\n  });\n\n  /**\n   * Should get span list from rootspan instance\n   */\n  describe('get spans()', () => {\n    it('should get span list from rootspan instance', () => {\n      const root = new RootSpan(tracer, name, kind, traceId, '');\n      root.start();\n      const span = root.startChildSpan({\n        name: 'spanName',\n        kind: types.SpanKind.CLIENT,\n      });\n\n      assert.strictEqual(root.spans.length, 1);\n      assert.strictEqual(span, root.spans[0]);\n      assert.strictEqual(span.kind, types.SpanKind.CLIENT);\n      assert.strictEqual(root.parentSpanId, parentSpanId);\n\n      for (const span of root.spans) {\n        assert.ok(span instanceof Span);\n      }\n    });\n  });\n\n  describe('get numberOfChildren()', () => {\n    it('should get numberOfChildren from rootspan instance', () => {\n      const root = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      root.start();\n      assert.strictEqual(root.numberOfChildren, 0);\n      root.startChildSpan({\n        name: 'spanName',\n        kind: types.SpanKind.UNSPECIFIED,\n      });\n      assert.strictEqual(root.numberOfChildren, 1);\n\n      for (let i = 0; i < 10; i++) {\n        root.startChildSpan({\n          name: 'spanName' + i,\n          kind: types.SpanKind.UNSPECIFIED,\n        });\n      }\n      assert.strictEqual(root.numberOfChildren, 11);\n    });\n  });\n\n  describe('nested spans', () => {\n    it('should get nested spans from rootspan instance', () => {\n      const root = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      root.start();\n      assert.strictEqual(root.numberOfChildren, 0);\n      const child1 = root.startChildSpan({\n        name: 'child1',\n        kind: types.SpanKind.UNSPECIFIED,\n      });\n      assert.strictEqual(root.numberOfChildren, 1);\n      assert.strictEqual(child1.numberOfChildren, 0);\n      const child2 = root.startChildSpan({\n        name: 'child2',\n        kind: types.SpanKind.UNSPECIFIED,\n      });\n      assert.strictEqual(root.numberOfChildren, 2);\n      const grandchild1 = child1.startChildSpan({\n        name: 'grandchild1',\n        kind: types.SpanKind.UNSPECIFIED,\n      });\n      assert.strictEqual(root.numberOfChildren, 2);\n      assert.strictEqual(child1.numberOfChildren, 1);\n      assert.strictEqual(child2.numberOfChildren, 0);\n      assert.strictEqual(grandchild1.numberOfChildren, 0);\n\n      assert.strictEqual(root.spans.length, 2);\n      assert.strictEqual(child1, root.spans[0]);\n      assert.strictEqual(child2, root.spans[1]);\n      assert.strictEqual(grandchild1.parentSpanId, child1.id);\n\n      assert.strictEqual(child1.spans.length, 1);\n      assert.strictEqual(grandchild1, child1.spans[0]);\n\n      assert.strictEqual(child2.spans.length, 0);\n      assert.strictEqual(grandchild1.spans.length, 0);\n\n      assert.strictEqual(root.allDescendants().length, 3);\n    });\n  });\n\n  /**\n   * Should get trace id from rootspan instance\n   */\n  describe('new traceId()', () => {\n    it('should get trace id from rootspan instance', () => {\n      const root = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      root.start();\n      assert.strictEqual(root.traceId, root.spanContext.traceId);\n\n      const child = root.startChildSpan({\n        name: 'child',\n        kind: types.SpanKind.UNSPECIFIED,\n      });\n      assert.strictEqual(root.traceId, child.traceId);\n    });\n  });\n\n  /**\n   * Should create and start a RootSpan instance\n   */\n  describe('start()', () => {\n    it('should start a RootSpan instance', () => {\n      const root = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      root.start();\n      assert.ok(root.started);\n    });\n  });\n\n  /**\n   * Should create and start a new span instance\n   */\n  describe('startSpan()', () => {\n    let root: RootSpan, span: types.Span;\n\n    before(() => {\n      root = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      root.start();\n      span = root.startChildSpan({\n        name: 'spanName',\n        kind: types.SpanKind.UNSPECIFIED,\n      });\n    });\n\n    it('should create span instance', () => {\n      assert.ok(span instanceof Span);\n    });\n\n    it('should start a span instance', () => {\n      assert.ok(span.started);\n    });\n  });\n\n  /**\n   * Should not start a span from a not started rootspan\n   */\n  describe('startSpan() before start rootspan', () => {\n    it('should create NoRecordSpan', () => {\n      const root = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      const span = root.startChildSpan({\n        name: 'spanName',\n        kind: types.SpanKind.UNSPECIFIED,\n      });\n      assert.ok(span instanceof NoRecordSpan);\n    });\n  });\n\n  /**\n   * Should not create a span from a ended rootspan\n   */\n  describe('startSpan() after rootspan ended', () => {\n    it('should create NoRecordSpan', () => {\n      const root = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      root.start();\n      root.end();\n      const span = root.startChildSpan({\n        name: 'spanName',\n        kind: types.SpanKind.UNSPECIFIED,\n      });\n      assert.ok(span instanceof NoRecordSpan);\n    });\n  });\n\n  /**\n   * Should end a rootspan instance\n   */\n  describe('end()', () => {\n    it('should end the rootspan instance', () => {\n      const root = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      root.start();\n      root.end();\n      assert.ok(root.ended);\n    });\n  });\n\n  /**\n   * Should not end a rootspan which was not started\n   */\n  describe('end() before start rootspan', () => {\n    it('should not end rootspan', () => {\n      const root = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      root.end();\n      assert.ok(!root.ended);\n    });\n  });\n\n  /**\n   * Should end all spans inside rootspan\n   */\n  describe('end() before end all spans', () => {\n    it('should end all spans inside rootspan', () => {\n      const root = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      root.start();\n      const child = root.startChildSpan({\n        name: 'child',\n        kind: types.SpanKind.UNSPECIFIED,\n      });\n      child.startChildSpan({\n        name: 'grandchild',\n        kind: types.SpanKind.UNSPECIFIED,\n      });\n      root.end();\n\n      for (const span of root.allDescendants()) {\n        assert.ok(span.ended);\n      }\n    });\n  });\n\n  /**\n   * Should add an attrinbutes\n   */\n  describe('addAtribute()', () => {\n    it('should add an attribute', () => {\n      const rootSpan = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      rootSpan.start();\n\n      ['String', 'Number', 'Boolean'].map(attType => {\n        rootSpan.addAttribute('testKey' + attType, 'testValue' + attType);\n        assert.strictEqual(\n          rootSpan.attributes['testKey' + attType],\n          'testValue' + attType\n        );\n      });\n    });\n  });\n\n  /**\n   * Should add an annotation\n   */\n  describe('addAnnotation()', () => {\n    it('should add an annotation', () => {\n      // tslint:disable:no-any\n      function instanceOfAnnotation(object: any): object is Annotation {\n        return (\n          'description' in object &&\n          'timestamp' in object &&\n          'attributes' in object\n        );\n      }\n\n      const rootSpan = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      rootSpan.start();\n\n      rootSpan.addAnnotation('description test', {}, Date.now());\n\n      assert.ok(rootSpan.annotations.length > 0);\n      assert.ok(instanceOfAnnotation(rootSpan.annotations[0]));\n    });\n\n    it('should add an annotation without attributes and timestamp', () => {\n      const rootSpan = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      rootSpan.start();\n\n      rootSpan.addAnnotation('description test');\n\n      assert.ok(rootSpan.annotations.length > 0);\n      assert.strictEqual(rootSpan.droppedAnnotationsCount, 0);\n      assert.strictEqual(\n        rootSpan.annotations[0].description,\n        'description test'\n      );\n      assert.deepStrictEqual(rootSpan.annotations[0].attributes, {});\n      assert.ok(rootSpan.annotations[0].timestamp > 0);\n    });\n  });\n\n  /**\n   * Should add a Link.\n   */\n  describe('addLink()', () => {\n    it('should add a Link', () => {\n      // tslint:disable:no-any\n      function instanceOfLink(object: any): object is Link {\n        return 'traceId' in object && 'spanId' in object && 'type' in object;\n      }\n\n      const rootSpan = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      rootSpan.start();\n\n      const span = new Span(tracer, rootSpan);\n      span.start();\n\n      rootSpan.addLink(\n        rootSpan.traceId,\n        span.id,\n        types.LinkType.CHILD_LINKED_SPAN\n      );\n\n      assert.ok(rootSpan.links.length > 0);\n      assert.strictEqual(rootSpan.droppedLinksCount, 0);\n      assert.ok(instanceOfLink(rootSpan.links[0]));\n    });\n  });\n\n  /**\n   * Should add a Message Event.\n   */\n  describe('addMessageEvent()', () => {\n    it('should add a Message Event', () => {\n      // tslint:disable:no-any\n      function instanceOfLink(object: any): object is Link {\n        return 'type' in object && 'id' in object;\n      }\n\n      const rootSpan = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      rootSpan.start();\n      rootSpan.addMessageEvent(types.MessageEventType.UNSPECIFIED, 1);\n\n      assert.ok(rootSpan.messageEvents.length > 0);\n      assert.strictEqual(rootSpan.droppedMessageEventsCount, 0);\n      assert.ok(instanceOfLink(rootSpan.messageEvents[0]));\n    });\n  });\n\n  describe('get traceState()', () => {\n    it('should handle optional / undefined traceState', () => {\n      const root = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      assert.ok(root instanceof RootSpan);\n      assert.strictEqual(root.traceState, undefined);\n    });\n\n    it('should create a RootSpan instance with traceState', () => {\n      const root = new RootSpan(\n        tracer,\n        name,\n        kind,\n        traceId,\n        parentSpanId,\n        'traceState'\n      );\n      assert.ok(root instanceof RootSpan);\n      assert.strictEqual(root.traceState, 'traceState');\n    });\n  });\n});\n"]}