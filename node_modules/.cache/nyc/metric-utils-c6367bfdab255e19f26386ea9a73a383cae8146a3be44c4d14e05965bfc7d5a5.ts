"use strict";/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_1val1ghrez(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/metric-utils.ts";var hash="b84c4fd4bd6ce285e0bc225d2fbe2cf37f2eca55";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/metric-utils.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:0},end:{line:18,column:29}},"2":{start:{line:19,column:16},end:{line:19,column:50}},"3":{start:{line:20,column:16},end:{line:20,column:34}},"4":{start:{line:30,column:8},end:{line:55,column:9}},"5":{start:{line:31,column:12},end:{line:38,column:13}},"6":{start:{line:33,column:20},end:{line:33,column:73}},"7":{start:{line:35,column:20},end:{line:35,column:74}},"8":{start:{line:37,column:20},end:{line:37,column:76}},"9":{start:{line:40,column:13},end:{line:55,column:9}},"10":{start:{line:41,column:12},end:{line:41,column:65}},"11":{start:{line:43,column:13},end:{line:55,column:9}},"12":{start:{line:44,column:12},end:{line:44,column:72}},"13":{start:{line:46,column:13},end:{line:55,column:9}},"14":{start:{line:47,column:12},end:{line:54,column:13}},"15":{start:{line:49,column:20},end:{line:49,column:68}},"16":{start:{line:51,column:20},end:{line:51,column:69}},"17":{start:{line:53,column:20},end:{line:53,column:76}},"18":{start:{line:56,column:8},end:{line:56,column:67}},"19":{start:{line:64,column:8},end:{line:72,column:10}},"20":{start:{line:71,column:23},end:{line:71,column:60}},"21":{start:{line:80,column:8},end:{line:82,column:12}},"22":{start:{line:80,column:42},end:{line:82,column:9}},"23":{start:{line:85,column:0},end:{line:85,column:34}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:29,column:4},end:{line:29,column:5}},loc:{start:{line:29,column:41},end:{line:57,column:5}},line:29},"1":{name:"(anonymous_1)",decl:{start:{line:63,column:4},end:{line:63,column:5}},loc:{start:{line:63,column:40},end:{line:73,column:5}},line:63},"2":{name:"(anonymous_2)",decl:{start:{line:71,column:12},end:{line:71,column:13}},loc:{start:{line:71,column:23},end:{line:71,column:60}},line:71},"3":{name:"(anonymous_3)",decl:{start:{line:79,column:4},end:{line:79,column:5}},loc:{start:{line:79,column:45},end:{line:83,column:5}},line:79},"4":{name:"(anonymous_4)",decl:{start:{line:80,column:29},end:{line:80,column:30}},loc:{start:{line:80,column:42},end:{line:82,column:9}},line:80}},branchMap:{"0":{loc:{start:{line:30,column:8},end:{line:55,column:9}},type:"if",locations:[{start:{line:30,column:8},end:{line:55,column:9}},{start:{line:30,column:8},end:{line:55,column:9}}],line:30},"1":{loc:{start:{line:31,column:12},end:{line:38,column:13}},type:"switch",locations:[{start:{line:32,column:16},end:{line:33,column:73}},{start:{line:34,column:16},end:{line:35,column:74}},{start:{line:36,column:16},end:{line:37,column:76}}],line:31},"2":{loc:{start:{line:40,column:13},end:{line:55,column:9}},type:"if",locations:[{start:{line:40,column:13},end:{line:55,column:9}},{start:{line:40,column:13},end:{line:55,column:9}}],line:40},"3":{loc:{start:{line:43,column:13},end:{line:55,column:9}},type:"if",locations:[{start:{line:43,column:13},end:{line:55,column:9}},{start:{line:43,column:13},end:{line:55,column:9}}],line:43},"4":{loc:{start:{line:46,column:13},end:{line:55,column:9}},type:"if",locations:[{start:{line:46,column:13},end:{line:55,column:9}},{start:{line:46,column:13},end:{line:55,column:9}}],line:46},"5":{loc:{start:{line:47,column:12},end:{line:54,column:13}},type:"switch",locations:[{start:{line:48,column:16},end:{line:49,column:68}},{start:{line:50,column:16},end:{line:51,column:69}},{start:{line:52,column:16},end:{line:53,column:76}}],line:47},"6":{loc:{start:{line:81,column:19},end:{line:81,column:51}},type:"cond-expr",locations:[{start:{line:81,column:30},end:{line:81,column:44}},{start:{line:81,column:47},end:{line:81,column:51}}],line:81}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{"0":[0,0],"1":[0,0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0],"6":[0,0]},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/metric-utils.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/metric-utils.ts"],names:[],mappings:";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,mDAIiC;AAEjC,mCAAsE;AAEtE,+DAA+D;AAC/D,MAAa,WAAW;IACtB;;;;;OAKG;IACK,MAAM,CAAC,OAAO,CACpB,OAAgB,EAChB,WAA4B;QAE5B,IAAI,WAAW,KAAK,uBAAe,CAAC,GAAG,EAAE;YACvC,QAAQ,OAAO,CAAC,IAAI,EAAE;gBACpB,KAAK,mBAAW,CAAC,KAAK;oBACpB,OAAO,4BAAoB,CAAC,gBAAgB,CAAC;gBAC/C,KAAK,mBAAW,CAAC,MAAM;oBACrB,OAAO,4BAAoB,CAAC,iBAAiB,CAAC;gBAChD;oBACE,MAAM,IAAI,KAAK,CAAC,wBAAwB,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;aAC3D;SACF;aAAM,IAAI,WAAW,KAAK,uBAAe,CAAC,KAAK,EAAE;YAChD,OAAO,4BAAoB,CAAC,gBAAgB,CAAC;SAC9C;aAAM,IAAI,WAAW,KAAK,uBAAe,CAAC,YAAY,EAAE;YACvD,OAAO,4BAAoB,CAAC,uBAAuB,CAAC;SACrD;aAAM,IAAI,WAAW,KAAK,uBAAe,CAAC,UAAU,EAAE;YACrD,QAAQ,OAAO,CAAC,IAAI,EAAE;gBACpB,KAAK,mBAAW,CAAC,KAAK;oBACpB,OAAO,4BAAoB,CAAC,WAAW,CAAC;gBAC1C,KAAK,mBAAW,CAAC,MAAM;oBACrB,OAAO,4BAAoB,CAAC,YAAY,CAAC;gBAC3C;oBACE,MAAM,IAAI,KAAK,CAAC,wBAAwB,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;aAC3D;SACF;QACD,MAAM,IAAI,KAAK,CAAC,4BAA4B,WAAW,EAAE,CAAC,CAAC;IAC7D,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,sBAAsB,CAAC,IAAU;QACtC,OAAO;YACL,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI;YACvB,IAAI,EAAE,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC;YACzD,SAAS,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,GAAG;YAC9B,mCAAmC;YACnC,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,MAAM,CAAC,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC,CAClD;SACF,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,sBAAsB,CAC3B,SAAiC;QAEjC,OAAO,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAChC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI;SACxC,CAAC,CAAC,CAAC;IACN,CAAC;CACF;AAnED,kCAmEC",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  LabelValue,\n  MetricDescriptor,\n  MetricDescriptorType,\n} from '../metrics/export/types';\nimport { TagValue } from '../tags/types';\nimport { AggregationType, Measure, MeasureType, View } from './types';\n\n/** Utils to convert Stats data models to Metric data models */\nexport class MetricUtils {\n  /**\n   * Gets the corresponding metric type for the given stats type.\n   * @param measure The measure for which to find a metric type\n   * @param aggregation The aggregation for which to find a metric type\n   * @returns The Type of metric descriptor\n   */\n  private static getType(\n    measure: Measure,\n    aggregation: AggregationType\n  ): MetricDescriptorType {\n    if (aggregation === AggregationType.SUM) {\n      switch (measure.type) {\n        case MeasureType.INT64:\n          return MetricDescriptorType.CUMULATIVE_INT64;\n        case MeasureType.DOUBLE:\n          return MetricDescriptorType.CUMULATIVE_DOUBLE;\n        default:\n          throw new Error(`Unknown measure type ${measure.type}`);\n      }\n    } else if (aggregation === AggregationType.COUNT) {\n      return MetricDescriptorType.CUMULATIVE_INT64;\n    } else if (aggregation === AggregationType.DISTRIBUTION) {\n      return MetricDescriptorType.CUMULATIVE_DISTRIBUTION;\n    } else if (aggregation === AggregationType.LAST_VALUE) {\n      switch (measure.type) {\n        case MeasureType.INT64:\n          return MetricDescriptorType.GAUGE_INT64;\n        case MeasureType.DOUBLE:\n          return MetricDescriptorType.GAUGE_DOUBLE;\n        default:\n          throw new Error(`Unknown measure type ${measure.type}`);\n      }\n    }\n    throw new Error(`Unknown aggregation type ${aggregation}`);\n  }\n\n  /**\n   * Gets a MetricDescriptor for given view.\n   * @param view The view for which to build a metric descriptor\n   * @returns The MetricDescriptor.\n   */\n  static viewToMetricDescriptor(view: View): MetricDescriptor {\n    return {\n      name: view.name,\n      description: view.description,\n      unit: view.measure.unit,\n      type: MetricUtils.getType(view.measure, view.aggregation),\n      labelKeys: view.getColumns().map(\n        // TODO(mayurkale): add description\n        tagKey => ({ key: tagKey.name, description: '' })\n      ),\n    };\n  }\n\n  /**\n   * Converts tag values to label values.\n   * @param tagValues the list of tag values\n   * @returns The List of label values\n   */\n  static tagValuesToLabelValues(\n    tagValues: Array<TagValue | null>\n  ): LabelValue[] {\n    return tagValues.map(tagValue => ({\n      value: tagValue ? tagValue.value : null,\n    }));\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"b84c4fd4bd6ce285e0bc225d2fbe2cf37f2eca55"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1val1ghrez=function(){return actualCoverage;};}return actualCoverage;}cov_1val1ghrez();cov_1val1ghrez().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_1val1ghrez().s[1]++;exports.MetricUtils=void 0;const types_1=(cov_1val1ghrez().s[2]++,require("../metrics/export/types"));const types_2=(cov_1val1ghrez().s[3]++,require("./types"));/** Utils to convert Stats data models to Metric data models */class MetricUtils{/**
     * Gets the corresponding metric type for the given stats type.
     * @param measure The measure for which to find a metric type
     * @param aggregation The aggregation for which to find a metric type
     * @returns The Type of metric descriptor
     */static getType(measure,aggregation){cov_1val1ghrez().f[0]++;cov_1val1ghrez().s[4]++;if(aggregation===types_2.AggregationType.SUM){cov_1val1ghrez().b[0][0]++;cov_1val1ghrez().s[5]++;switch(measure.type){case types_2.MeasureType.INT64:cov_1val1ghrez().b[1][0]++;cov_1val1ghrez().s[6]++;return types_1.MetricDescriptorType.CUMULATIVE_INT64;case types_2.MeasureType.DOUBLE:cov_1val1ghrez().b[1][1]++;cov_1val1ghrez().s[7]++;return types_1.MetricDescriptorType.CUMULATIVE_DOUBLE;default:cov_1val1ghrez().b[1][2]++;cov_1val1ghrez().s[8]++;throw new Error(`Unknown measure type ${measure.type}`);}}else{cov_1val1ghrez().b[0][1]++;cov_1val1ghrez().s[9]++;if(aggregation===types_2.AggregationType.COUNT){cov_1val1ghrez().b[2][0]++;cov_1val1ghrez().s[10]++;return types_1.MetricDescriptorType.CUMULATIVE_INT64;}else{cov_1val1ghrez().b[2][1]++;cov_1val1ghrez().s[11]++;if(aggregation===types_2.AggregationType.DISTRIBUTION){cov_1val1ghrez().b[3][0]++;cov_1val1ghrez().s[12]++;return types_1.MetricDescriptorType.CUMULATIVE_DISTRIBUTION;}else{cov_1val1ghrez().b[3][1]++;cov_1val1ghrez().s[13]++;if(aggregation===types_2.AggregationType.LAST_VALUE){cov_1val1ghrez().b[4][0]++;cov_1val1ghrez().s[14]++;switch(measure.type){case types_2.MeasureType.INT64:cov_1val1ghrez().b[5][0]++;cov_1val1ghrez().s[15]++;return types_1.MetricDescriptorType.GAUGE_INT64;case types_2.MeasureType.DOUBLE:cov_1val1ghrez().b[5][1]++;cov_1val1ghrez().s[16]++;return types_1.MetricDescriptorType.GAUGE_DOUBLE;default:cov_1val1ghrez().b[5][2]++;cov_1val1ghrez().s[17]++;throw new Error(`Unknown measure type ${measure.type}`);}}else{cov_1val1ghrez().b[4][1]++;}}}}cov_1val1ghrez().s[18]++;throw new Error(`Unknown aggregation type ${aggregation}`);}/**
     * Gets a MetricDescriptor for given view.
     * @param view The view for which to build a metric descriptor
     * @returns The MetricDescriptor.
     */static viewToMetricDescriptor(view){cov_1val1ghrez().f[1]++;cov_1val1ghrez().s[19]++;return{name:view.name,description:view.description,unit:view.measure.unit,type:MetricUtils.getType(view.measure,view.aggregation),labelKeys:view.getColumns().map(// TODO(mayurkale): add description
tagKey=>{cov_1val1ghrez().f[2]++;cov_1val1ghrez().s[20]++;return{key:tagKey.name,description:''};})};}/**
     * Converts tag values to label values.
     * @param tagValues the list of tag values
     * @returns The List of label values
     */static tagValuesToLabelValues(tagValues){cov_1val1ghrez().f[3]++;cov_1val1ghrez().s[21]++;return tagValues.map(tagValue=>{cov_1val1ghrez().f[4]++;cov_1val1ghrez().s[22]++;return{value:tagValue?(cov_1val1ghrez().b[6][0]++,tagValue.value):(cov_1val1ghrez().b[6][1]++,null)};});}}cov_1val1ghrez().s[23]++;exports.MetricUtils=MetricUtils;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3VzZXJtYWl0aGEvdHJhZGVtYXN0ZXIvbGlicy9saWItZXh0ZXJuYWwtb3BlbmNlbnN1cy1ub2RlL3NyYy9zdGF0cy9tZXRyaWMtdXRpbHMudHMiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VybWFpdGhhL3RyYWRlbWFzdGVyL2xpYnMvbGliLWV4dGVybmFsLW9wZW5jZW5zdXMtbm9kZS9zcmMvc3RhdHMvbWV0cmljLXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7R0FjRzs7O0FBRUgsbURBSWlDO0FBRWpDLG1DQUFzRTtBQUV0RSwrREFBK0Q7QUFDL0QsTUFBYSxXQUFXO0lBQ3RCOzs7OztPQUtHO0lBQ0ssTUFBTSxDQUFDLE9BQU8sQ0FDcEIsT0FBZ0IsRUFDaEIsV0FBNEI7UUFFNUIsSUFBSSxXQUFXLEtBQUssdUJBQWUsQ0FBQyxHQUFHLEVBQUU7WUFDdkMsUUFBUSxPQUFPLENBQUMsSUFBSSxFQUFFO2dCQUNwQixLQUFLLG1CQUFXLENBQUMsS0FBSztvQkFDcEIsT0FBTyw0QkFBb0IsQ0FBQyxnQkFBZ0IsQ0FBQztnQkFDL0MsS0FBSyxtQkFBVyxDQUFDLE1BQU07b0JBQ3JCLE9BQU8sNEJBQW9CLENBQUMsaUJBQWlCLENBQUM7Z0JBQ2hEO29CQUNFLE1BQU0sSUFBSSxLQUFLLENBQUMsd0JBQXdCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO2FBQzNEO1NBQ0Y7YUFBTSxJQUFJLFdBQVcsS0FBSyx1QkFBZSxDQUFDLEtBQUssRUFBRTtZQUNoRCxPQUFPLDRCQUFvQixDQUFDLGdCQUFnQixDQUFDO1NBQzlDO2FBQU0sSUFBSSxXQUFXLEtBQUssdUJBQWUsQ0FBQyxZQUFZLEVBQUU7WUFDdkQsT0FBTyw0QkFBb0IsQ0FBQyx1QkFBdUIsQ0FBQztTQUNyRDthQUFNLElBQUksV0FBVyxLQUFLLHVCQUFlLENBQUMsVUFBVSxFQUFFO1lBQ3JELFFBQVEsT0FBTyxDQUFDLElBQUksRUFBRTtnQkFDcEIsS0FBSyxtQkFBVyxDQUFDLEtBQUs7b0JBQ3BCLE9BQU8sNEJBQW9CLENBQUMsV0FBVyxDQUFDO2dCQUMxQyxLQUFLLG1CQUFXLENBQUMsTUFBTTtvQkFDckIsT0FBTyw0QkFBb0IsQ0FBQyxZQUFZLENBQUM7Z0JBQzNDO29CQUNFLE1BQU0sSUFBSSxLQUFLLENBQUMsd0JBQXdCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO2FBQzNEO1NBQ0Y7UUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLHNCQUFzQixDQUFDLElBQVU7UUFDdEMsT0FBTztZQUNMLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNmLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVztZQUM3QixJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJO1lBQ3ZCLElBQUksRUFBRSxXQUFXLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQztZQUN6RCxTQUFTLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLEdBQUc7WUFDOUIsbUNBQW1DO1lBQ25DLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUNsRDtTQUNGLENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxzQkFBc0IsQ0FDM0IsU0FBaUM7UUFFakMsT0FBTyxTQUFTLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNoQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJO1NBQ3hDLENBQUMsQ0FBQyxDQUFDO0lBQ04sQ0FBQztDQUNGO0FBbkVELGtDQW1FQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTgsIE9wZW5DZW5zdXMgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtcbiAgTGFiZWxWYWx1ZSxcbiAgTWV0cmljRGVzY3JpcHRvcixcbiAgTWV0cmljRGVzY3JpcHRvclR5cGUsXG59IGZyb20gJy4uL21ldHJpY3MvZXhwb3J0L3R5cGVzJztcbmltcG9ydCB7IFRhZ1ZhbHVlIH0gZnJvbSAnLi4vdGFncy90eXBlcyc7XG5pbXBvcnQgeyBBZ2dyZWdhdGlvblR5cGUsIE1lYXN1cmUsIE1lYXN1cmVUeXBlLCBWaWV3IH0gZnJvbSAnLi90eXBlcyc7XG5cbi8qKiBVdGlscyB0byBjb252ZXJ0IFN0YXRzIGRhdGEgbW9kZWxzIHRvIE1ldHJpYyBkYXRhIG1vZGVscyAqL1xuZXhwb3J0IGNsYXNzIE1ldHJpY1V0aWxzIHtcbiAgLyoqXG4gICAqIEdldHMgdGhlIGNvcnJlc3BvbmRpbmcgbWV0cmljIHR5cGUgZm9yIHRoZSBnaXZlbiBzdGF0cyB0eXBlLlxuICAgKiBAcGFyYW0gbWVhc3VyZSBUaGUgbWVhc3VyZSBmb3Igd2hpY2ggdG8gZmluZCBhIG1ldHJpYyB0eXBlXG4gICAqIEBwYXJhbSBhZ2dyZWdhdGlvbiBUaGUgYWdncmVnYXRpb24gZm9yIHdoaWNoIHRvIGZpbmQgYSBtZXRyaWMgdHlwZVxuICAgKiBAcmV0dXJucyBUaGUgVHlwZSBvZiBtZXRyaWMgZGVzY3JpcHRvclxuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgZ2V0VHlwZShcbiAgICBtZWFzdXJlOiBNZWFzdXJlLFxuICAgIGFnZ3JlZ2F0aW9uOiBBZ2dyZWdhdGlvblR5cGVcbiAgKTogTWV0cmljRGVzY3JpcHRvclR5cGUge1xuICAgIGlmIChhZ2dyZWdhdGlvbiA9PT0gQWdncmVnYXRpb25UeXBlLlNVTSkge1xuICAgICAgc3dpdGNoIChtZWFzdXJlLnR5cGUpIHtcbiAgICAgICAgY2FzZSBNZWFzdXJlVHlwZS5JTlQ2NDpcbiAgICAgICAgICByZXR1cm4gTWV0cmljRGVzY3JpcHRvclR5cGUuQ1VNVUxBVElWRV9JTlQ2NDtcbiAgICAgICAgY2FzZSBNZWFzdXJlVHlwZS5ET1VCTEU6XG4gICAgICAgICAgcmV0dXJuIE1ldHJpY0Rlc2NyaXB0b3JUeXBlLkNVTVVMQVRJVkVfRE9VQkxFO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBtZWFzdXJlIHR5cGUgJHttZWFzdXJlLnR5cGV9YCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChhZ2dyZWdhdGlvbiA9PT0gQWdncmVnYXRpb25UeXBlLkNPVU5UKSB7XG4gICAgICByZXR1cm4gTWV0cmljRGVzY3JpcHRvclR5cGUuQ1VNVUxBVElWRV9JTlQ2NDtcbiAgICB9IGVsc2UgaWYgKGFnZ3JlZ2F0aW9uID09PSBBZ2dyZWdhdGlvblR5cGUuRElTVFJJQlVUSU9OKSB7XG4gICAgICByZXR1cm4gTWV0cmljRGVzY3JpcHRvclR5cGUuQ1VNVUxBVElWRV9ESVNUUklCVVRJT047XG4gICAgfSBlbHNlIGlmIChhZ2dyZWdhdGlvbiA9PT0gQWdncmVnYXRpb25UeXBlLkxBU1RfVkFMVUUpIHtcbiAgICAgIHN3aXRjaCAobWVhc3VyZS50eXBlKSB7XG4gICAgICAgIGNhc2UgTWVhc3VyZVR5cGUuSU5UNjQ6XG4gICAgICAgICAgcmV0dXJuIE1ldHJpY0Rlc2NyaXB0b3JUeXBlLkdBVUdFX0lOVDY0O1xuICAgICAgICBjYXNlIE1lYXN1cmVUeXBlLkRPVUJMRTpcbiAgICAgICAgICByZXR1cm4gTWV0cmljRGVzY3JpcHRvclR5cGUuR0FVR0VfRE9VQkxFO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBtZWFzdXJlIHR5cGUgJHttZWFzdXJlLnR5cGV9YCk7XG4gICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBhZ2dyZWdhdGlvbiB0eXBlICR7YWdncmVnYXRpb259YCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyBhIE1ldHJpY0Rlc2NyaXB0b3IgZm9yIGdpdmVuIHZpZXcuXG4gICAqIEBwYXJhbSB2aWV3IFRoZSB2aWV3IGZvciB3aGljaCB0byBidWlsZCBhIG1ldHJpYyBkZXNjcmlwdG9yXG4gICAqIEByZXR1cm5zIFRoZSBNZXRyaWNEZXNjcmlwdG9yLlxuICAgKi9cbiAgc3RhdGljIHZpZXdUb01ldHJpY0Rlc2NyaXB0b3IodmlldzogVmlldyk6IE1ldHJpY0Rlc2NyaXB0b3Ige1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiB2aWV3Lm5hbWUsXG4gICAgICBkZXNjcmlwdGlvbjogdmlldy5kZXNjcmlwdGlvbixcbiAgICAgIHVuaXQ6IHZpZXcubWVhc3VyZS51bml0LFxuICAgICAgdHlwZTogTWV0cmljVXRpbHMuZ2V0VHlwZSh2aWV3Lm1lYXN1cmUsIHZpZXcuYWdncmVnYXRpb24pLFxuICAgICAgbGFiZWxLZXlzOiB2aWV3LmdldENvbHVtbnMoKS5tYXAoXG4gICAgICAgIC8vIFRPRE8obWF5dXJrYWxlKTogYWRkIGRlc2NyaXB0aW9uXG4gICAgICAgIHRhZ0tleSA9PiAoeyBrZXk6IHRhZ0tleS5uYW1lLCBkZXNjcmlwdGlvbjogJycgfSlcbiAgICAgICksXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyB0YWcgdmFsdWVzIHRvIGxhYmVsIHZhbHVlcy5cbiAgICogQHBhcmFtIHRhZ1ZhbHVlcyB0aGUgbGlzdCBvZiB0YWcgdmFsdWVzXG4gICAqIEByZXR1cm5zIFRoZSBMaXN0IG9mIGxhYmVsIHZhbHVlc1xuICAgKi9cbiAgc3RhdGljIHRhZ1ZhbHVlc1RvTGFiZWxWYWx1ZXMoXG4gICAgdGFnVmFsdWVzOiBBcnJheTxUYWdWYWx1ZSB8IG51bGw+XG4gICk6IExhYmVsVmFsdWVbXSB7XG4gICAgcmV0dXJuIHRhZ1ZhbHVlcy5tYXAodGFnVmFsdWUgPT4gKHtcbiAgICAgIHZhbHVlOiB0YWdWYWx1ZSA/IHRhZ1ZhbHVlLnZhbHVlIDogbnVsbCxcbiAgICB9KSk7XG4gIH1cbn1cbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,