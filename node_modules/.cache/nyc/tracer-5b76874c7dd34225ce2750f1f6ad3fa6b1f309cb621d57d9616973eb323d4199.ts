"use strict";/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_18r7tnwkwb(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/tracer.ts";var hash="0e6508870975d90a8686a743923e4399c053c60b";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/tracer.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:0},end:{line:18,column:28}},"2":{start:{line:19,column:12},end:{line:19,column:41}},"3":{start:{line:20,column:25},end:{line:20,column:62}},"4":{start:{line:21,column:22},end:{line:21,column:46}},"5":{start:{line:34,column:8},end:{line:34,column:16}},"6":{start:{line:35,column:8},end:{line:35,column:49}},"7":{start:{line:36,column:8},end:{line:36,column:33}},"8":{start:{line:40,column:8},end:{line:40,column:51}},"9":{start:{line:44,column:8},end:{line:44,column:38}},"10":{start:{line:48,column:8},end:{line:50,column:9}},"11":{start:{line:49,column:12},end:{line:49,column:54}},"12":{start:{line:58,column:21},end:{line:58,column:25}},"13":{start:{line:59,column:8},end:{line:63,column:11}},"14":{start:{line:60,column:12},end:{line:62,column:15}},"15":{start:{line:61,column:16},end:{line:61,column:32}},"16":{start:{line:67,column:8},end:{line:68,column:19}},"17":{start:{line:68,column:12},end:{line:68,column:19}},"18":{start:{line:69,column:8},end:{line:72,column:9}},"19":{start:{line:71,column:12},end:{line:71,column:98}},"20":{start:{line:73,column:8},end:{line:73,column:39}},"21":{start:{line:77,column:8},end:{line:78,column:19}},"22":{start:{line:78,column:12},end:{line:78,column:19}},"23":{start:{line:79,column:8},end:{line:82,column:9}},"24":{start:{line:81,column:12},end:{line:81,column:96}},"25":{start:{line:83,column:8},end:{line:83,column:30}},"26":{start:{line:87,column:8},end:{line:89,column:9}},"27":{start:{line:88,column:12},end:{line:88,column:54}},"28":{start:{line:96,column:8},end:{line:98,column:9}},"29":{start:{line:97,column:12},end:{line:97,column:91}},"30":{start:{line:99,column:8},end:{line:99,column:138}},"31":{start:{line:109,column:8},end:{line:111,column:9}},"32":{start:{line:110,column:12},end:{line:110,column:22}},"33":{start:{line:112,column:26},end:{line:112,column:45}},"34":{start:{line:113,column:8},end:{line:113,column:34}},"35":{start:{line:123,column:8},end:{line:125,column:9}},"36":{start:{line:124,column:12},end:{line:124,column:19}},"37":{start:{line:126,column:26},end:{line:126,column:45}},"38":{start:{line:127,column:8},end:{line:127,column:39}},"39":{start:{line:130,column:0},end:{line:130,column:32}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:33,column:4},end:{line:33,column:5}},loc:{start:{line:33,column:18},end:{line:37,column:5}},line:33},"1":{name:"(anonymous_1)",decl:{start:{line:39,column:4},end:{line:39,column:5}},loc:{start:{line:39,column:26},end:{line:41,column:5}},line:39},"2":{name:"(anonymous_2)",decl:{start:{line:43,column:4},end:{line:43,column:5}},loc:{start:{line:43,column:30},end:{line:45,column:5}},line:43},"3":{name:"(anonymous_3)",decl:{start:{line:47,column:4},end:{line:47,column:5}},loc:{start:{line:47,column:29},end:{line:51,column:5}},line:47},"4":{name:"(anonymous_4)",decl:{start:{line:57,column:4},end:{line:57,column:5}},loc:{start:{line:57,column:31},end:{line:64,column:5}},line:57},"5":{name:"(anonymous_5)",decl:{start:{line:59,column:48},end:{line:59,column:49}},loc:{start:{line:59,column:54},end:{line:63,column:9}},line:59},"6":{name:"(anonymous_6)",decl:{start:{line:60,column:48},end:{line:60,column:49}},loc:{start:{line:60,column:56},end:{line:62,column:13}},line:60},"7":{name:"(anonymous_7)",decl:{start:{line:66,column:4},end:{line:66,column:5}},loc:{start:{line:66,column:22},end:{line:74,column:5}},line:66},"8":{name:"(anonymous_8)",decl:{start:{line:76,column:4},end:{line:76,column:5}},loc:{start:{line:76,column:20},end:{line:84,column:5}},line:76},"9":{name:"(anonymous_9)",decl:{start:{line:86,column:4},end:{line:86,column:5}},loc:{start:{line:86,column:24},end:{line:90,column:5}},line:86},"10":{name:"(anonymous_10)",decl:{start:{line:95,column:4},end:{line:95,column:5}},loc:{start:{line:95,column:28},end:{line:100,column:5}},line:95},"11":{name:"(anonymous_11)",decl:{start:{line:108,column:4},end:{line:108,column:5}},loc:{start:{line:108,column:13},end:{line:114,column:5}},line:108},"12":{name:"(anonymous_12)",decl:{start:{line:122,column:4},end:{line:122,column:5}},loc:{start:{line:122,column:25},end:{line:128,column:5}},line:122}},branchMap:{"0":{loc:{start:{line:48,column:8},end:{line:50,column:9}},type:"if",locations:[{start:{line:48,column:8},end:{line:50,column:9}},{start:{line:48,column:8},end:{line:50,column:9}}],line:48},"1":{loc:{start:{line:67,column:8},end:{line:68,column:19}},type:"if",locations:[{start:{line:67,column:8},end:{line:68,column:19}},{start:{line:67,column:8},end:{line:68,column:19}}],line:67},"2":{loc:{start:{line:69,column:8},end:{line:72,column:9}},type:"if",locations:[{start:{line:69,column:8},end:{line:72,column:9}},{start:{line:69,column:8},end:{line:72,column:9}}],line:69},"3":{loc:{start:{line:69,column:12},end:{line:70,column:57}},type:"binary-expr",locations:[{start:{line:69,column:12},end:{line:69,column:33}},{start:{line:70,column:12},end:{line:70,column:57}}],line:69},"4":{loc:{start:{line:77,column:8},end:{line:78,column:19}},type:"if",locations:[{start:{line:77,column:8},end:{line:78,column:19}},{start:{line:77,column:8},end:{line:78,column:19}}],line:77},"5":{loc:{start:{line:79,column:8},end:{line:82,column:9}},type:"if",locations:[{start:{line:79,column:8},end:{line:82,column:9}},{start:{line:79,column:8},end:{line:82,column:9}}],line:79},"6":{loc:{start:{line:79,column:12},end:{line:80,column:57}},type:"binary-expr",locations:[{start:{line:79,column:12},end:{line:79,column:33}},{start:{line:80,column:12},end:{line:80,column:57}}],line:79},"7":{loc:{start:{line:87,column:8},end:{line:89,column:9}},type:"if",locations:[{start:{line:87,column:8},end:{line:89,column:9}},{start:{line:87,column:8},end:{line:89,column:9}}],line:87},"8":{loc:{start:{line:96,column:8},end:{line:98,column:9}},type:"if",locations:[{start:{line:96,column:8},end:{line:98,column:9}},{start:{line:96,column:8},end:{line:98,column:9}}],line:96},"9":{loc:{start:{line:99,column:61},end:{line:99,column:124}},type:"binary-expr",locations:[{start:{line:99,column:61},end:{line:99,column:81}},{start:{line:99,column:85},end:{line:99,column:124}}],line:99},"10":{loc:{start:{line:109,column:8},end:{line:111,column:9}},type:"if",locations:[{start:{line:109,column:8},end:{line:111,column:9}},{start:{line:109,column:8},end:{line:111,column:9}}],line:109},"11":{loc:{start:{line:123,column:8},end:{line:125,column:9}},type:"if",locations:[{start:{line:123,column:8},end:{line:125,column:9}},{start:{line:123,column:8},end:{line:125,column:9}}],line:123}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0]},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/tracer.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/tracer.ts"],names:[],mappings:";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,0CAA0C;AAC1C,+DAA0D;AAC1D,+CAA+C;AAG/C;;;;;;;;GAQG;AACH,MAAa,UAAW,SAAQ,4BAAc;IAI5C,2CAA2C;IAC3C;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,cAAc,GAAG,GAAG,CAAC,YAAY,EAAE,CAAC;QACzC,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC3B,CAAC;IAED,kCAAkC;IAClC,IAAI,eAAe;QACjB,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IAC7C,CAAC;IAED,kCAAkC;IAClC,IAAI,eAAe,CAAC,IAAgB;QAClC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IAED,kCAAkC;IAClC,kBAAkB,CAAC,IAAgB;QACjC,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE;YAC9B,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;SAC3C;IACH,CAAC;IAED;;;;OAIG;IACH,aAAa,CACX,OAA2B,EAC3B,EAA2B;QAE3B,MAAM,IAAI,GAAG,IAAI,CAAC;QAClB,OAAO,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,GAAG,EAAE;YAC3C,OAAO,KAAK,CAAC,aAAa,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE;gBACzC,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC;YAClB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED,4CAA4C;IAC5C,WAAW,CAAC,IAAgB;QAC1B,IAAI,CAAC,IAAI,CAAC,MAAM;YAAE,OAAO;QACzB,IACE,CAAC,IAAI,CAAC,eAAe;YACrB,IAAI,CAAC,eAAe,CAAC,OAAO,KAAK,IAAI,CAAC,OAAO,EAC7C;YACA,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,kEAAkE,CACnE,CAAC;SACH;QACD,OAAO,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IAED,0CAA0C;IAC1C,SAAS,CAAC,IAAgB;QACxB,IAAI,CAAC,IAAI,CAAC,MAAM;YAAE,OAAO;QACzB,IACE,CAAC,IAAI,CAAC,eAAe;YACrB,IAAI,CAAC,eAAe,CAAC,OAAO,KAAK,IAAI,CAAC,OAAO,EAC7C;YACA,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,gEAAgE,CACjE,CAAC;SACH;QACD,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IACxB,CAAC;IAED,oCAAoC;IACpC,iBAAiB;QACf,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE;YAC9B,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;SAC3C;IACH,CAAC;IAED;;;OAGG;IACH,cAAc,CAAC,OAA2B;QACxC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;YACzB,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,2DAA2D,CAC5D,CAAC;SACH;QAED,OAAO,KAAK,CAAC,cAAc,CACzB,MAAM,CAAC,MAAM,CACX,EAAE,OAAO,EAAE,IAAI,CAAC,eAAe,IAAI,IAAI,6BAAY,CAAC,IAAI,CAAC,EAAE,EAC3D,OAAO,CACR,CACF,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACH,IAAI,CAAI,EAAiB;QACvB,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,OAAO,EAAE,CAAC;SACX;QACD,MAAM,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC;QACtC,OAAO,SAAS,CAAC,IAAI,CAAI,EAAE,CAAC,CAAC;IAC/B,CAAC;IAED;;;;;;OAMG;IACH,WAAW,CAAC,OAA4B;QACtC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,OAAO;SACR;QACD,MAAM,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC;QACtC,SAAS,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IACjC,CAAC;CACF;AAhID,gCAgIC",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as cls from '../../internal/cls';\nimport { NoRecordSpan } from './no-record/no-record-span';\nimport { CoreTracerBase } from './tracer-base';\nimport * as types from './types';\n\n/**\n * This class represents a tracer with Continuation Local Storage (CLS).\n *\n * CLS helps keep tracking the root span over function calls automatically.\n * It is capable of storing, propagating and retrieving arbitrary\n * continuation-local data (also called \"context\").\n * CLS comes with some performance overhead, you can read more about it here:\n * https://github.com/othiym23/node-continuation-local-storage/issues/59\n */\nexport class CoreTracer extends CoreTracerBase implements types.Tracer {\n  /** Manage context automatic propagation */\n  private contextManager: cls.Namespace;\n\n  /** Constructs a new TraceImpl instance. */\n  constructor() {\n    super();\n    this.contextManager = cls.getNamespace();\n    this.clearCurrentTrace();\n  }\n\n  /** Gets the current root span. */\n  get currentRootSpan(): types.Span {\n    return this.contextManager.get('rootspan');\n  }\n\n  /** Sets the current root span. */\n  set currentRootSpan(root: types.Span) {\n    this.setCurrentRootSpan(root);\n  }\n\n  /** Sets the current root span. */\n  setCurrentRootSpan(root: types.Span) {\n    if (this.contextManager.active) {\n      this.contextManager.set('rootspan', root);\n    }\n  }\n\n  /**\n   * Starts a root span.\n   * @param options A TraceOptions object to start a root span.\n   * @param fn A callback function to run after starting a root span.\n   */\n  startRootSpan<T>(\n    options: types.TraceOptions,\n    fn: (root: types.Span) => T\n  ): T {\n    const self = this;\n    return self.contextManager.runAndReturn(() => {\n      return super.startRootSpan(options, root => {\n        return fn(root);\n      });\n    });\n  }\n\n  /** Notifies listeners of the span start. */\n  onStartSpan(span: types.Span): void {\n    if (!this.active) return;\n    if (\n      !this.currentRootSpan ||\n      this.currentRootSpan.traceId !== span.traceId\n    ) {\n      this.logger.debug(\n        'currentRootSpan != root on notifyStart. Need more investigation.'\n      );\n    }\n    return super.onStartSpan(span);\n  }\n\n  /** Notifies listeners of the span end. */\n  onEndSpan(span: types.Span): void {\n    if (!this.active) return;\n    if (\n      !this.currentRootSpan ||\n      this.currentRootSpan.traceId !== span.traceId\n    ) {\n      this.logger.debug(\n        'currentRootSpan != root on notifyEnd. Need more investigation.'\n      );\n    }\n    super.onEndSpan(span);\n  }\n\n  /** Clears the current root span. */\n  clearCurrentTrace() {\n    if (this.contextManager.active) {\n      this.contextManager.set('rootspan', null);\n    }\n  }\n\n  /**\n   * Starts a span.\n   * @param [options] A SpanOptions object to start a child span.\n   */\n  startChildSpan(options?: types.SpanOptions): types.Span {\n    if (!this.currentRootSpan) {\n      this.logger.debug(\n        'no current trace found - must start a new root span first'\n      );\n    }\n\n    return super.startChildSpan(\n      Object.assign(\n        { childOf: this.currentRootSpan || new NoRecordSpan(this) },\n        options\n      )\n    );\n  }\n\n  /**\n   * Binds the trace context to the given function.\n   * This is necessary in order to create child spans correctly in functions\n   * that are called asynchronously (for example, in a network response\n   * handler).\n   * @param fn A function to which to bind the trace context.\n   */\n  wrap<T>(fn: types.Func<T>): types.Func<T> {\n    if (!this.active) {\n      return fn;\n    }\n    const namespace = this.contextManager;\n    return namespace.bind<T>(fn);\n  }\n\n  /**\n   * Binds the trace context to the given event emitter.\n   * This is necessary in order to create child spans correctly in event\n   * handlers.\n   * @param emitter An event emitter whose handlers should have\n   *     the trace context binded to them.\n   */\n  wrapEmitter(emitter: NodeJS.EventEmitter): void {\n    if (!this.active) {\n      return;\n    }\n    const namespace = this.contextManager;\n    namespace.bindEmitter(emitter);\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"0e6508870975d90a8686a743923e4399c053c60b"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_18r7tnwkwb=function(){return actualCoverage;};}return actualCoverage;}cov_18r7tnwkwb();cov_18r7tnwkwb().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_18r7tnwkwb().s[1]++;exports.CoreTracer=void 0;const cls=(cov_18r7tnwkwb().s[2]++,require("../../internal/cls"));const no_record_span_1=(cov_18r7tnwkwb().s[3]++,require("./no-record/no-record-span"));const tracer_base_1=(cov_18r7tnwkwb().s[4]++,require("./tracer-base"));/**
 * This class represents a tracer with Continuation Local Storage (CLS).
 *
 * CLS helps keep tracking the root span over function calls automatically.
 * It is capable of storing, propagating and retrieving arbitrary
 * continuation-local data (also called "context").
 * CLS comes with some performance overhead, you can read more about it here:
 * https://github.com/othiym23/node-continuation-local-storage/issues/59
 */class CoreTracer extends(tracer_base_1.CoreTracerBase){/** Constructs a new TraceImpl instance. */constructor(){cov_18r7tnwkwb().f[0]++;cov_18r7tnwkwb().s[5]++;super();cov_18r7tnwkwb().s[6]++;this.contextManager=cls.getNamespace();cov_18r7tnwkwb().s[7]++;this.clearCurrentTrace();}/** Gets the current root span. */get currentRootSpan(){cov_18r7tnwkwb().f[1]++;cov_18r7tnwkwb().s[8]++;return this.contextManager.get('rootspan');}/** Sets the current root span. */set currentRootSpan(root){cov_18r7tnwkwb().f[2]++;cov_18r7tnwkwb().s[9]++;this.setCurrentRootSpan(root);}/** Sets the current root span. */setCurrentRootSpan(root){cov_18r7tnwkwb().f[3]++;cov_18r7tnwkwb().s[10]++;if(this.contextManager.active){cov_18r7tnwkwb().b[0][0]++;cov_18r7tnwkwb().s[11]++;this.contextManager.set('rootspan',root);}else{cov_18r7tnwkwb().b[0][1]++;}}/**
     * Starts a root span.
     * @param options A TraceOptions object to start a root span.
     * @param fn A callback function to run after starting a root span.
     */startRootSpan(options,fn){cov_18r7tnwkwb().f[4]++;const self=(cov_18r7tnwkwb().s[12]++,this);cov_18r7tnwkwb().s[13]++;return self.contextManager.runAndReturn(()=>{cov_18r7tnwkwb().f[5]++;cov_18r7tnwkwb().s[14]++;return super.startRootSpan(options,root=>{cov_18r7tnwkwb().f[6]++;cov_18r7tnwkwb().s[15]++;return fn(root);});});}/** Notifies listeners of the span start. */onStartSpan(span){cov_18r7tnwkwb().f[7]++;cov_18r7tnwkwb().s[16]++;if(!this.active){cov_18r7tnwkwb().b[1][0]++;cov_18r7tnwkwb().s[17]++;return;}else{cov_18r7tnwkwb().b[1][1]++;}cov_18r7tnwkwb().s[18]++;if((cov_18r7tnwkwb().b[3][0]++,!this.currentRootSpan)||(cov_18r7tnwkwb().b[3][1]++,this.currentRootSpan.traceId!==span.traceId)){cov_18r7tnwkwb().b[2][0]++;cov_18r7tnwkwb().s[19]++;this.logger.debug('currentRootSpan != root on notifyStart. Need more investigation.');}else{cov_18r7tnwkwb().b[2][1]++;}cov_18r7tnwkwb().s[20]++;return super.onStartSpan(span);}/** Notifies listeners of the span end. */onEndSpan(span){cov_18r7tnwkwb().f[8]++;cov_18r7tnwkwb().s[21]++;if(!this.active){cov_18r7tnwkwb().b[4][0]++;cov_18r7tnwkwb().s[22]++;return;}else{cov_18r7tnwkwb().b[4][1]++;}cov_18r7tnwkwb().s[23]++;if((cov_18r7tnwkwb().b[6][0]++,!this.currentRootSpan)||(cov_18r7tnwkwb().b[6][1]++,this.currentRootSpan.traceId!==span.traceId)){cov_18r7tnwkwb().b[5][0]++;cov_18r7tnwkwb().s[24]++;this.logger.debug('currentRootSpan != root on notifyEnd. Need more investigation.');}else{cov_18r7tnwkwb().b[5][1]++;}cov_18r7tnwkwb().s[25]++;super.onEndSpan(span);}/** Clears the current root span. */clearCurrentTrace(){cov_18r7tnwkwb().f[9]++;cov_18r7tnwkwb().s[26]++;if(this.contextManager.active){cov_18r7tnwkwb().b[7][0]++;cov_18r7tnwkwb().s[27]++;this.contextManager.set('rootspan',null);}else{cov_18r7tnwkwb().b[7][1]++;}}/**
     * Starts a span.
     * @param [options] A SpanOptions object to start a child span.
     */startChildSpan(options){cov_18r7tnwkwb().f[10]++;cov_18r7tnwkwb().s[28]++;if(!this.currentRootSpan){cov_18r7tnwkwb().b[8][0]++;cov_18r7tnwkwb().s[29]++;this.logger.debug('no current trace found - must start a new root span first');}else{cov_18r7tnwkwb().b[8][1]++;}cov_18r7tnwkwb().s[30]++;return super.startChildSpan(Object.assign({childOf:(cov_18r7tnwkwb().b[9][0]++,this.currentRootSpan)||(cov_18r7tnwkwb().b[9][1]++,new no_record_span_1.NoRecordSpan(this))},options));}/**
     * Binds the trace context to the given function.
     * This is necessary in order to create child spans correctly in functions
     * that are called asynchronously (for example, in a network response
     * handler).
     * @param fn A function to which to bind the trace context.
     */wrap(fn){cov_18r7tnwkwb().f[11]++;cov_18r7tnwkwb().s[31]++;if(!this.active){cov_18r7tnwkwb().b[10][0]++;cov_18r7tnwkwb().s[32]++;return fn;}else{cov_18r7tnwkwb().b[10][1]++;}const namespace=(cov_18r7tnwkwb().s[33]++,this.contextManager);cov_18r7tnwkwb().s[34]++;return namespace.bind(fn);}/**
     * Binds the trace context to the given event emitter.
     * This is necessary in order to create child spans correctly in event
     * handlers.
     * @param emitter An event emitter whose handlers should have
     *     the trace context binded to them.
     */wrapEmitter(emitter){cov_18r7tnwkwb().f[12]++;cov_18r7tnwkwb().s[35]++;if(!this.active){cov_18r7tnwkwb().b[11][0]++;cov_18r7tnwkwb().s[36]++;return;}else{cov_18r7tnwkwb().b[11][1]++;}const namespace=(cov_18r7tnwkwb().s[37]++,this.contextManager);cov_18r7tnwkwb().s[38]++;namespace.bindEmitter(emitter);}}cov_18r7tnwkwb().s[39]++;exports.CoreTracer=CoreTracer;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,