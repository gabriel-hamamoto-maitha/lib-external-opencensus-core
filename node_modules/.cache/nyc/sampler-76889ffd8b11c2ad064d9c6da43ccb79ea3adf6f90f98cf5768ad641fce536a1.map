{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/sampler/sampler.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/sampler/sampler.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TraceParams } from '../config/types';\nimport { Sampler } from './types';\n\n// We use 52-bits as our max number because it remains a javascript \"safe\n// integer\" for arithmetic and parsing while using the full hex range for\n// comparison to the lower order bytes on a traceId.\nconst MAX_NUMBER = 0xfffffffffffff;\nconst LOWER_BYTE_COUNT = 13;\n\n/**  Sampler that samples every trace. */\nexport class AlwaysSampler implements Sampler {\n  readonly description = 'always';\n\n  shouldSample(traceId: string): boolean {\n    return true;\n  }\n}\n\n/** Sampler that samples no traces. */\nexport class NeverSampler implements Sampler {\n  readonly description = 'never';\n\n  shouldSample(traceId: string): boolean {\n    return false;\n  }\n}\n\n/** Sampler that samples a given fraction of traces. */\nexport class ProbabilitySampler implements Sampler {\n  private idUpperBound: number;\n  readonly description: string;\n\n  /**\n   * Constructs a new Probability Sampler instance.\n   */\n  constructor(probability: number) {\n    this.description = `probability.(${probability})`;\n    this.idUpperBound = probability * MAX_NUMBER;\n  }\n\n  /**\n   * Checks if trace belong the sample.\n   * @param traceId Used to check the probability\n   * @returns a boolean. True if the traceId is in probability\n   * False if the traceId is not in probability.\n   */\n  shouldSample(traceId: string): boolean {\n    const LOWER_BYTES = traceId\n      ? ('0000000000000' + traceId).slice(-LOWER_BYTE_COUNT)\n      : '0';\n    // tslint:disable-next-line:ban Needed to parse hexadecimal.\n    const LOWER_LONG = parseInt(LOWER_BYTES, 16);\n\n    if (LOWER_LONG <= this.idUpperBound) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\n/** Builder class of Samplers */\nexport class SamplerBuilder {\n  private static readonly ALWAYS = new AlwaysSampler();\n  private static readonly NEVER = new NeverSampler();\n\n  /**\n   * If probability parameter is bigger then 1 return AlwaysSampler instance.\n   * If probability parameter is less than 0 returns NeverSampler instance.\n   * Else returns a Probability Sampler\n   *\n   * @param probability probability between 0 and 1\n   * @returns a Sampler object\n   */\n  static getSampler(probability: number): Sampler {\n    if (probability >= 1.0) {\n      return SamplerBuilder.ALWAYS;\n    } else if (probability <= 0) {\n      return SamplerBuilder.NEVER;\n    }\n    return new ProbabilitySampler(probability);\n  }\n}\n\n/**\n * The default sampler is a Probability sampler with the probability set to\n * 1/10000.\n */\nexport const DEFAULT_SAMPLING_RATE = 0.0001;\n\n/** Default Limit for Annotations per span */\nexport const DEFAULT_SPAN_MAX_NUM_ANNOTATIONS = 32;\n/** Default limit for Message events per span */\nexport const DEFAULT_SPAN_MAX_NUM_MESSAGE_EVENTS = 128;\n/** Default limit for Attributes per span */\nexport const DEFAULT_SPAN_MAX_NUM_ATTRIBUTES = 32;\n/** Default limit for Links per span */\nexport const DEFAULT_SPAN_MAX_NUM_LINKS = 32;\n\n/** Builder Class of TraceParams */\nexport class TraceParamsBuilder {\n  static getNumberOfAnnotationEventsPerSpan(\n    traceParameters: TraceParams\n  ): number {\n    return !traceParameters.numberOfAnnontationEventsPerSpan\n      ? DEFAULT_SPAN_MAX_NUM_ANNOTATIONS\n      : traceParameters.numberOfAnnontationEventsPerSpan;\n  }\n\n  static getNumberOfAttributesPerSpan(traceParameters: TraceParams): number {\n    return !traceParameters.numberOfAttributesPerSpan\n      ? DEFAULT_SPAN_MAX_NUM_ATTRIBUTES\n      : traceParameters.numberOfAttributesPerSpan;\n  }\n\n  static getNumberOfMessageEventsPerSpan(traceParameters: TraceParams): number {\n    return !traceParameters.numberOfMessageEventsPerSpan\n      ? DEFAULT_SPAN_MAX_NUM_MESSAGE_EVENTS\n      : traceParameters.numberOfMessageEventsPerSpan;\n  }\n\n  static getNumberOfLinksPerSpan(traceParameters: TraceParams): number {\n    return !traceParameters.numberOfLinksPerSpan\n      ? DEFAULT_SPAN_MAX_NUM_LINKS\n      : traceParameters.numberOfLinksPerSpan;\n  }\n}\n"]}