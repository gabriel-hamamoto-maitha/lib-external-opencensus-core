"use strict";function cov_2pzg248fc3(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/span.ts";var hash="daa13407c50fbb7876573bc771f86565e8e57b20";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/span.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:22}},"2":{start:{line:19,column:22},end:{line:19,column:57}},"3":{start:{line:20,column:16},end:{line:20,column:47}},"4":{start:{line:21,column:15},end:{line:21,column:45}},"5":{start:{line:22,column:25},end:{line:22,column:62}},"6":{start:{line:23,column:14},end:{line:23,column:32}},"7":{start:{line:24,column:18},end:{line:26,column:1}},"8":{start:{line:32,column:8},end:{line:32,column:34}},"9":{start:{line:34,column:8},end:{line:34,column:32}},"10":{start:{line:36,column:8},end:{line:36,column:47}},"11":{start:{line:38,column:8},end:{line:38,column:29}},"12":{start:{line:40,column:8},end:{line:40,column:30}},"13":{start:{line:42,column:8},end:{line:42,column:32}},"14":{start:{line:44,column:8},end:{line:44,column:24}},"15":{start:{line:46,column:8},end:{line:46,column:34}},"16":{start:{line:48,column:8},end:{line:48,column:27}},"17":{start:{line:50,column:8},end:{line:50,column:47}},"18":{start:{line:52,column:8},end:{line:52,column:32}},"19":{start:{line:54,column:8},end:{line:54,column:36}},"20":{start:{line:56,column:8},end:{line:56,column:40}},"21":{start:{line:58,column:8},end:{line:58,column:35}},"22":{start:{line:60,column:8},end:{line:60,column:41}},"23":{start:{line:62,column:8},end:{line:62,column:43}},"24":{start:{line:63,column:8},end:{line:63,column:29}},"25":{start:{line:64,column:8},end:{line:64,column:47}},"26":{start:{line:65,column:8},end:{line:65,column:40}},"27":{start:{line:66,column:8},end:{line:66,column:29}},"28":{start:{line:67,column:8},end:{line:74,column:9}},"29":{start:{line:68,column:12},end:{line:68,column:36}},"30":{start:{line:69,column:12},end:{line:69,column:37}},"31":{start:{line:70,column:12},end:{line:70,column:65}},"32":{start:{line:73,column:12},end:{line:73,column:29}},"33":{start:{line:75,column:8},end:{line:75,column:69}},"34":{start:{line:79,column:8},end:{line:79,column:21}},"35":{start:{line:83,column:8},end:{line:83,column:33}},"36":{start:{line:87,column:8},end:{line:87,column:36}},"37":{start:{line:94,column:8},end:{line:96,column:9}},"38":{start:{line:95,column:12},end:{line:95,column:31}},"39":{start:{line:97,column:8},end:{line:97,column:34}},"40":{start:{line:101,column:8},end:{line:101,column:33}},"41":{start:{line:105,column:8},end:{line:105,column:31}},"42":{start:{line:112,column:8},end:{line:115,column:9}},"43":{start:{line:113,column:12},end:{line:113,column:67}},"44":{start:{line:114,column:12},end:{line:114,column:30}},"45":{start:{line:116,column:8},end:{line:116,column:36}},"46":{start:{line:120,column:8},end:{line:125,column:15}},"47":{start:{line:121,column:12},end:{line:121,column:26}},"48":{start:{line:122,column:25},end:{line:122,column:45}},"49":{start:{line:123,column:12},end:{line:123,column:35}},"50":{start:{line:124,column:12},end:{line:124,column:23}},"51":{start:{line:129,column:8},end:{line:129,column:31}},"52":{start:{line:133,column:8},end:{line:133,column:38}},"53":{start:{line:140,column:8},end:{line:143,column:9}},"54":{start:{line:141,column:12},end:{line:141,column:65}},"55":{start:{line:142,column:12},end:{line:142,column:30}},"56":{start:{line:144,column:8},end:{line:144,column:34}},"57":{start:{line:150,column:8},end:{line:153,column:9}},"58":{start:{line:151,column:12},end:{line:151,column:66}},"59":{start:{line:152,column:12},end:{line:152,column:21}},"60":{start:{line:154,column:8},end:{line:154,column:35}},"61":{start:{line:158,column:8},end:{line:163,column:10}},"62":{start:{line:172,column:8},end:{line:174,column:9}},"63":{start:{line:173,column:12},end:{line:173,column:40}},"64":{start:{line:175,column:8},end:{line:182,column:9}},"65":{start:{line:177,column:12},end:{line:177,column:42}},"66":{start:{line:178,column:41},end:{line:178,column:77}},"67":{start:{line:179,column:12},end:{line:181,column:13}},"68":{start:{line:180,column:16},end:{line:180,column:61}},"69":{start:{line:183,column:32},end:{line:183,column:89}},"70":{start:{line:184,column:8},end:{line:184,column:47}},"71":{start:{line:193,column:8},end:{line:197,column:9}},"72":{start:{line:195,column:12},end:{line:195,column:37}},"73":{start:{line:196,column:12},end:{line:196,column:43}},"74":{start:{line:198,column:8},end:{line:198,column:70}},"75":{start:{line:208,column:8},end:{line:211,column:9}},"76":{start:{line:209,column:12},end:{line:209,column:31}},"77":{start:{line:210,column:12},end:{line:210,column:37}},"78":{start:{line:212,column:8},end:{line:212,column:63}},"79":{start:{line:224,column:8},end:{line:228,column:9}},"80":{start:{line:226,column:12},end:{line:226,column:39}},"81":{start:{line:227,column:12},end:{line:227,column:45}},"82":{start:{line:229,column:8},end:{line:235,column:11}},"83":{start:{line:243,column:8},end:{line:243,column:40}},"84":{start:{line:247,column:8},end:{line:250,column:9}},"85":{start:{line:248,column:12},end:{line:248,column:160}},"86":{start:{line:249,column:12},end:{line:249,column:19}},"87":{start:{line:252,column:8},end:{line:257,column:9}},"88":{start:{line:253,column:12},end:{line:253,column:78}},"89":{start:{line:256,column:12},end:{line:256,column:45}},"90":{start:{line:258,column:8},end:{line:258,column:33}},"91":{start:{line:259,column:8},end:{line:265,column:11}},"92":{start:{line:266,column:8},end:{line:267,column:49}},"93":{start:{line:267,column:12},end:{line:267,column:49}},"94":{start:{line:268,column:8},end:{line:268,column:38}},"95":{start:{line:272,column:8},end:{line:275,column:9}},"96":{start:{line:273,column:12},end:{line:273,column:156}},"97":{start:{line:274,column:12},end:{line:274,column:19}},"98":{start:{line:276,column:8},end:{line:279,column:9}},"99":{start:{line:277,column:12},end:{line:277,column:153}},"100":{start:{line:278,column:12},end:{line:278,column:19}},"101":{start:{line:280,column:8},end:{line:280,column:34}},"102":{start:{line:281,column:8},end:{line:281,column:31}},"103":{start:{line:282,column:8},end:{line:282,column:25}},"104":{start:{line:285,column:8},end:{line:289,column:9}},"105":{start:{line:286,column:12},end:{line:288,column:13}},"106":{start:{line:287,column:16},end:{line:287,column:32}},"107":{start:{line:290,column:8},end:{line:290,column:36}},"108":{start:{line:294,column:8},end:{line:294,column:19}},"109":{start:{line:295,column:8},end:{line:298,column:11}},"110":{start:{line:305,column:8},end:{line:308,column:9}},"111":{start:{line:306,column:12},end:{line:306,column:154}},"112":{start:{line:307,column:12},end:{line:307,column:66}},"113":{start:{line:309,column:8},end:{line:312,column:9}},"114":{start:{line:310,column:12},end:{line:310,column:159}},"115":{start:{line:311,column:12},end:{line:311,column:66}},"116":{start:{line:313,column:22},end:{line:313,column:49}},"117":{start:{line:314,column:8},end:{line:315,column:38}},"118":{start:{line:315,column:12},end:{line:315,column:38}},"119":{start:{line:316,column:8},end:{line:317,column:38}},"120":{start:{line:317,column:12},end:{line:317,column:38}},"121":{start:{line:318,column:8},end:{line:318,column:22}},"122":{start:{line:319,column:8},end:{line:319,column:36}},"123":{start:{line:320,column:8},end:{line:320,column:21}},"124":{start:{line:323,column:0},end:{line:323,column:20}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:30,column:4},end:{line:30,column:5}},loc:{start:{line:30,column:32},end:{line:76,column:5}},line:30},"1":{name:"(anonymous_1)",decl:{start:{line:78,column:4},end:{line:78,column:5}},loc:{start:{line:78,column:17},end:{line:80,column:5}},line:78},"2":{name:"(anonymous_2)",decl:{start:{line:82,column:4},end:{line:82,column:5}},loc:{start:{line:82,column:18},end:{line:84,column:5}},line:82},"3":{name:"(anonymous_3)",decl:{start:{line:86,column:4},end:{line:86,column:5}},loc:{start:{line:86,column:21},end:{line:88,column:5}},line:86},"4":{name:"(anonymous_4)",decl:{start:{line:93,column:4},end:{line:93,column:5}},loc:{start:{line:93,column:23},end:{line:98,column:5}},line:93},"5":{name:"(anonymous_5)",decl:{start:{line:100,column:4},end:{line:100,column:5}},loc:{start:{line:100,column:18},end:{line:102,column:5}},line:100},"6":{name:"(anonymous_6)",decl:{start:{line:104,column:4},end:{line:104,column:5}},loc:{start:{line:104,column:16},end:{line:106,column:5}},line:104},"7":{name:"(anonymous_7)",decl:{start:{line:111,column:4},end:{line:111,column:5}},loc:{start:{line:111,column:20},end:{line:117,column:5}},line:111},"8":{name:"(anonymous_8)",decl:{start:{line:119,column:4},end:{line:119,column:5}},loc:{start:{line:119,column:21},end:{line:126,column:5}},line:119},"9":{name:"(anonymous_9)",decl:{start:{line:120,column:38},end:{line:120,column:39}},loc:{start:{line:120,column:52},end:{line:125,column:9}},line:120},"10":{name:"(anonymous_10)",decl:{start:{line:128,column:4},end:{line:128,column:5}},loc:{start:{line:128,column:16},end:{line:130,column:5}},line:128},"11":{name:"(anonymous_11)",decl:{start:{line:132,column:4},end:{line:132,column:5}},loc:{start:{line:132,column:27},end:{line:134,column:5}},line:132},"12":{name:"(anonymous_12)",decl:{start:{line:139,column:4},end:{line:139,column:5}},loc:{start:{line:139,column:18},end:{line:145,column:5}},line:139},"13":{name:"(anonymous_13)",decl:{start:{line:149,column:4},end:{line:149,column:5}},loc:{start:{line:149,column:19},end:{line:155,column:5}},line:149},"14":{name:"(anonymous_14)",decl:{start:{line:157,column:4},end:{line:157,column:5}},loc:{start:{line:157,column:22},end:{line:164,column:5}},line:157},"15":{name:"(anonymous_15)",decl:{start:{line:171,column:4},end:{line:171,column:5}},loc:{start:{line:171,column:29},end:{line:185,column:5}},line:171},"16":{name:"(anonymous_16)",decl:{start:{line:192,column:4},end:{line:192,column:5}},loc:{start:{line:192,column:72},end:{line:199,column:5}},line:192},"17":{name:"(anonymous_17)",decl:{start:{line:207,column:4},end:{line:207,column:5}},loc:{start:{line:207,column:52},end:{line:213,column:5}},line:207},"18":{name:"(anonymous_18)",decl:{start:{line:223,column:4},end:{line:223,column:5}},loc:{start:{line:223,column:88},end:{line:236,column:5}},line:223},"19":{name:"(anonymous_19)",decl:{start:{line:242,column:4},end:{line:242,column:5}},loc:{start:{line:242,column:29},end:{line:244,column:5}},line:242},"20":{name:"(anonymous_20)",decl:{start:{line:246,column:4},end:{line:246,column:5}},loc:{start:{line:246,column:12},end:{line:269,column:5}},line:246},"21":{name:"(anonymous_21)",decl:{start:{line:271,column:4},end:{line:271,column:5}},loc:{start:{line:271,column:10},end:{line:291,column:5}},line:271},"22":{name:"(anonymous_22)",decl:{start:{line:293,column:4},end:{line:293,column:5}},loc:{start:{line:293,column:15},end:{line:299,column:5}},line:293},"23":{name:"(anonymous_23)",decl:{start:{line:304,column:4},end:{line:304,column:5}},loc:{start:{line:304,column:28},end:{line:321,column:5}},line:304}},branchMap:{"0":{loc:{start:{line:67,column:8},end:{line:74,column:9}},type:"if",locations:[{start:{line:67,column:8},end:{line:74,column:9}},{start:{line:67,column:8},end:{line:74,column:9}}],line:67},"1":{loc:{start:{line:75,column:22},end:{line:75,column:68}},type:"binary-expr",locations:[{start:{line:75,column:23},end:{line:75,column:32}},{start:{line:75,column:36},end:{line:75,column:52}},{start:{line:75,column:57},end:{line:75,column:68}}],line:75},"2":{loc:{start:{line:94,column:8},end:{line:96,column:9}},type:"if",locations:[{start:{line:94,column:8},end:{line:96,column:9}},{start:{line:94,column:8},end:{line:96,column:9}}],line:94},"3":{loc:{start:{line:112,column:8},end:{line:115,column:9}},type:"if",locations:[{start:{line:112,column:8},end:{line:115,column:9}},{start:{line:112,column:8},end:{line:115,column:9}}],line:112},"4":{loc:{start:{line:140,column:8},end:{line:143,column:9}},type:"if",locations:[{start:{line:140,column:8},end:{line:143,column:9}},{start:{line:140,column:8},end:{line:143,column:9}}],line:140},"5":{loc:{start:{line:150,column:8},end:{line:153,column:9}},type:"if",locations:[{start:{line:150,column:8},end:{line:153,column:9}},{start:{line:150,column:8},end:{line:153,column:9}}],line:150},"6":{loc:{start:{line:172,column:8},end:{line:174,column:9}},type:"if",locations:[{start:{line:172,column:8},end:{line:174,column:9}},{start:{line:172,column:8},end:{line:174,column:9}}],line:172},"7":{loc:{start:{line:175,column:8},end:{line:182,column:9}},type:"if",locations:[{start:{line:175,column:8},end:{line:182,column:9}},{start:{line:175,column:8},end:{line:182,column:9}}],line:175},"8":{loc:{start:{line:179,column:12},end:{line:181,column:13}},type:"if",locations:[{start:{line:179,column:12},end:{line:181,column:13}},{start:{line:179,column:12},end:{line:181,column:13}}],line:179},"9":{loc:{start:{line:183,column:32},end:{line:183,column:89}},type:"cond-expr",locations:[{start:{line:183,column:60},end:{line:183,column:81}},{start:{line:183,column:84},end:{line:183,column:89}}],line:183},"10":{loc:{start:{line:192,column:31},end:{line:192,column:46}},type:"default-arg",locations:[{start:{line:192,column:44},end:{line:192,column:46}}],line:192},"11":{loc:{start:{line:192,column:48},end:{line:192,column:70}},type:"default-arg",locations:[{start:{line:192,column:60},end:{line:192,column:70}}],line:192},"12":{loc:{start:{line:193,column:8},end:{line:197,column:9}},type:"if",locations:[{start:{line:193,column:8},end:{line:197,column:9}},{start:{line:193,column:8},end:{line:197,column:9}}],line:193},"13":{loc:{start:{line:207,column:35},end:{line:207,column:50}},type:"default-arg",locations:[{start:{line:207,column:48},end:{line:207,column:50}}],line:207},"14":{loc:{start:{line:208,column:8},end:{line:211,column:9}},type:"if",locations:[{start:{line:208,column:8},end:{line:211,column:9}},{start:{line:208,column:8},end:{line:211,column:9}}],line:208},"15":{loc:{start:{line:223,column:30},end:{line:223,column:52}},type:"default-arg",locations:[{start:{line:223,column:42},end:{line:223,column:52}}],line:223},"16":{loc:{start:{line:224,column:8},end:{line:228,column:9}},type:"if",locations:[{start:{line:224,column:8},end:{line:228,column:9}},{start:{line:224,column:8},end:{line:228,column:9}}],line:224},"17":{loc:{start:{line:247,column:8},end:{line:250,column:9}},type:"if",locations:[{start:{line:247,column:8},end:{line:250,column:9}},{start:{line:247,column:8},end:{line:250,column:9}}],line:247},"18":{loc:{start:{line:252,column:8},end:{line:257,column:9}},type:"if",locations:[{start:{line:252,column:8},end:{line:257,column:9}},{start:{line:252,column:8},end:{line:257,column:9}}],line:252},"19":{loc:{start:{line:266,column:8},end:{line:267,column:49}},type:"if",locations:[{start:{line:266,column:8},end:{line:267,column:49}},{start:{line:266,column:8},end:{line:267,column:49}}],line:266},"20":{loc:{start:{line:272,column:8},end:{line:275,column:9}},type:"if",locations:[{start:{line:272,column:8},end:{line:275,column:9}},{start:{line:272,column:8},end:{line:275,column:9}}],line:272},"21":{loc:{start:{line:276,column:8},end:{line:279,column:9}},type:"if",locations:[{start:{line:276,column:8},end:{line:279,column:9}},{start:{line:276,column:8},end:{line:279,column:9}}],line:276},"22":{loc:{start:{line:286,column:12},end:{line:288,column:13}},type:"if",locations:[{start:{line:286,column:12},end:{line:288,column:13}},{start:{line:286,column:12},end:{line:288,column:13}}],line:286},"23":{loc:{start:{line:286,column:16},end:{line:286,column:43}},type:"binary-expr",locations:[{start:{line:286,column:16},end:{line:286,column:27}},{start:{line:286,column:31},end:{line:286,column:43}}],line:286},"24":{loc:{start:{line:305,column:8},end:{line:308,column:9}},type:"if",locations:[{start:{line:305,column:8},end:{line:308,column:9}},{start:{line:305,column:8},end:{line:308,column:9}}],line:305},"25":{loc:{start:{line:309,column:8},end:{line:312,column:9}},type:"if",locations:[{start:{line:309,column:8},end:{line:312,column:9}},{start:{line:309,column:8},end:{line:312,column:9}}],line:309},"26":{loc:{start:{line:314,column:8},end:{line:315,column:38}},type:"if",locations:[{start:{line:314,column:8},end:{line:315,column:38}},{start:{line:314,column:8},end:{line:315,column:38}}],line:314},"27":{loc:{start:{line:314,column:12},end:{line:314,column:35}},type:"binary-expr",locations:[{start:{line:314,column:12},end:{line:314,column:19}},{start:{line:314,column:23},end:{line:314,column:35}}],line:314},"28":{loc:{start:{line:316,column:8},end:{line:317,column:38}},type:"if",locations:[{start:{line:316,column:8},end:{line:317,column:38}},{start:{line:316,column:8},end:{line:317,column:38}}],line:316},"29":{loc:{start:{line:316,column:12},end:{line:316,column:35}},type:"binary-expr",locations:[{start:{line:316,column:12},end:{line:316,column:19}},{start:{line:316,column:23},end:{line:316,column:35}}],line:316}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0},b:{"0":[0,0],"1":[0,0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0],"11":[0],"12":[0,0],"13":[0],"14":[0,0],"15":[0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0]},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/span.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/span.ts"],names:[],mappings:"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",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { noopLogger } from '../../common/noop-logger';\nimport { Logger } from '../../common/types';\nimport { Clock } from '../../internal/clock';\nimport { randomSpanId } from '../../internal/util';\nimport * as configTypes from '../config/types';\n\nimport { NoRecordSpan } from './no-record/no-record-span';\nimport * as types from './types';\n\nconst STATUS_OK = {\n  code: types.CanonicalCode.OK,\n};\n\n/** Defines a base model for spans. */\nexport class Span implements types.Span {\n  protected className: string;\n  /** The clock used to mesure the beginning and ending of a span */\n  private clock!: Clock;\n  /** Indicates if this span was started */\n  private startedLocal = false;\n  /** Indicates if this span was ended */\n  private endedLocal = false;\n  /** A list of child spans which are immediate, local children of this span */\n  private spansLocal: types.Span[];\n  /** The Span ID of this span */\n  readonly id: string;\n  /** A tracer object */\n  readonly tracer: types.TracerBase;\n  /** An object to log information to */\n  logger: Logger = noopLogger;\n  /** A set of attributes, each in the format [KEY]:[VALUE] */\n  attributes: types.Attributes = {};\n  /** A text annotation with a set of attributes. */\n  annotations: types.Annotation[] = [];\n  /** An event describing a message sent/received between Spans */\n  messageEvents: types.MessageEvent[] = [];\n  /** Pointers from the current span to another span */\n  links: types.Link[] = [];\n  /** If the parent span is in another process. */\n  remoteParent = false;\n  /** This span's root span.  If it's a root span, it will point to this */\n  root: Span;\n  /** This span's parent. If it's a root span, must be empty */\n  parentSpan?: Span;\n  /** The resource name of the span */\n  name = 'span';\n  /** Kind of span. */\n  kind: types.SpanKind = types.SpanKind.UNSPECIFIED;\n  /** A final status for this span */\n  status: types.Status = STATUS_OK;\n  /** Trace Parameters */\n  activeTraceParams: configTypes.TraceParams = {};\n\n  /** The number of dropped attributes. */\n  droppedAttributesCount = 0;\n  /** The number of dropped links. */\n  droppedLinksCount = 0;\n  /** The number of dropped annotations. */\n  droppedAnnotationsCount = 0;\n  /** The number of dropped message events. */\n  droppedMessageEventsCount = 0;\n\n  /** Constructs a new Span instance. */\n  constructor(tracer: types.TracerBase, parent?: Span) {\n    this.tracer = tracer;\n    this.className = this.constructor.name;\n    this.id = randomSpanId();\n    this.spansLocal = [];\n    if (parent) {\n      this.root = parent.root;\n      this.parentSpan = parent;\n      this.activeTraceParams = this.root.activeTraceParams;\n    } else {\n      this.root = this;\n    }\n    this.logger = (this.root && this.root.logger) || this.logger;\n  }\n\n  /** Returns whether a span is root or not. */\n  isRootSpan(): boolean {\n    return false;\n  }\n\n  /** Gets the trace ID. */\n  get traceId(): string {\n    return this.root.traceId;\n  }\n\n  /** Gets the trace state */\n  get traceState(): types.TraceState | undefined {\n    return this.root.traceState;\n  }\n\n  /**\n   * Gets the ID of the parent span.\n   * RootSpan doesn't have a parentSpan but it override this method.\n   */\n  get parentSpanId(): string {\n    if (!this.parentSpan) {\n      return 'no-parent';\n    }\n    return this.parentSpan.id;\n  }\n\n  /** Indicates if span was started. */\n  get started(): boolean {\n    return this.startedLocal;\n  }\n\n  /** Indicates if span was ended. */\n  get ended(): boolean {\n    return this.endedLocal;\n  }\n\n  /**\n   * Gives a timestamp that indicates the span's start time in RFC3339 UTC\n   * \"Zulu\" format.\n   */\n  get startTime(): Date {\n    if (!this.clock) {\n      this.logger.debug('calling startTime() on null clock');\n      return new Date();\n    }\n\n    return this.clock.startTime;\n  }\n\n  /** Recursively gets the descendant spans. */\n  allDescendants(): types.Span[] {\n    return this.spansLocal.reduce((acc: types.Span[], cur) => {\n      acc.push(cur);\n      const desc = cur.allDescendants();\n      acc = acc.concat(desc);\n      return acc;\n    }, []);\n  }\n\n  /** The list of immediate child spans. */\n  get spans(): types.Span[] {\n    return this.spansLocal;\n  }\n\n  /** The number of direct children. */\n  get numberOfChildren(): number {\n    return this.spansLocal.length;\n  }\n\n  /**\n   * Gives a timestamp that indicates the span's end time in RFC3339 UTC\n   * \"Zulu\" format.\n   */\n  get endTime(): Date {\n    if (!this.clock) {\n      this.logger.debug('calling endTime() on null clock');\n      return new Date();\n    }\n\n    return this.clock.endTime;\n  }\n\n  /**\n   * Gets the duration of the clock.\n   */\n  get duration(): number {\n    if (!this.clock) {\n      this.logger.debug('calling duration() on null clock');\n      return 0;\n    }\n\n    return this.clock.duration;\n  }\n\n  /** Gives the TraceContext of the span. */\n  get spanContext(): types.SpanContext {\n    return {\n      traceId: this.traceId,\n      spanId: this.id,\n      options: 0x1, // always traced\n      traceState: this.traceState,\n    };\n  }\n\n  /**\n   * Adds an atribute to the span.\n   * @param key Describes the value added.\n   * @param value The result of an operation. If the value is a typeof object\n   *     it has to be JSON.stringify-able, cannot contain circular dependencies.\n   */\n  addAttribute(key: string, value: string | number | boolean | object) {\n    if (this.attributes[key]) {\n      delete this.attributes[key];\n    }\n\n    if (\n      Object.keys(this.attributes).length >=\n      this.activeTraceParams.numberOfAttributesPerSpan!\n    ) {\n      this.droppedAttributesCount++;\n      const attributeKeyToDelete = Object.keys(this.attributes).shift();\n      if (attributeKeyToDelete) {\n        delete this.attributes[attributeKeyToDelete];\n      }\n    }\n    const serializedValue =\n      typeof value === 'object' ? JSON.stringify(value) : value;\n    this.attributes[key] = serializedValue;\n  }\n\n  /**\n   * Adds an annotation to the span.\n   * @param description Describes the event.\n   * @param attributes A set of attributes on the annotation.\n   * @param timestamp A time, in milliseconds. Defaults to Date.now()\n   */\n  addAnnotation(\n    description: string,\n    attributes: types.Attributes = {},\n    timestamp = Date.now()\n  ) {\n    if (\n      this.annotations.length >=\n      this.activeTraceParams.numberOfAnnontationEventsPerSpan!\n    ) {\n      this.annotations.shift();\n      this.droppedAnnotationsCount++;\n    }\n    this.annotations.push({ description, attributes, timestamp });\n  }\n\n  /**\n   * Adds a link to the span.\n   * @param traceId The trace ID for a trace within a project.\n   * @param spanId The span ID for a span within a trace.\n   * @param type The relationship of the current span relative to the linked.\n   * @param attributes A set of attributes on the link.\n   */\n  addLink(\n    traceId: string,\n    spanId: string,\n    type: types.LinkType,\n    attributes: types.Attributes = {}\n  ) {\n    if (this.links.length >= this.activeTraceParams.numberOfLinksPerSpan!) {\n      this.links.shift();\n      this.droppedLinksCount++;\n    }\n\n    this.links.push({ traceId, spanId, type, attributes });\n  }\n\n  /**\n   * Adds a message event to the span.\n   * @param type The type of message event.\n   * @param id An identifier for the message event.\n   * @param timestamp A time in milliseconds. Defaults to Date.now()\n   * @param uncompressedSize The number of uncompressed bytes sent or received\n   * @param compressedSize The number of compressed bytes sent or received. If\n   *     zero or undefined, assumed to be the same size as uncompressed.\n   */\n  addMessageEvent(\n    type: types.MessageEventType,\n    id: number,\n    timestamp = Date.now(),\n    uncompressedSize?: number,\n    compressedSize?: number\n  ) {\n    if (\n      this.messageEvents.length >=\n      this.activeTraceParams.numberOfMessageEventsPerSpan!\n    ) {\n      this.messageEvents.shift();\n      this.droppedMessageEventsCount++;\n    }\n\n    this.messageEvents.push({\n      type,\n      id,\n      timestamp,\n      uncompressedSize,\n      compressedSize,\n    });\n  }\n\n  /**\n   * Sets a status to the span.\n   * @param code The canonical status code.\n   * @param message optional A developer-facing error message.\n   */\n  setStatus(code: types.CanonicalCode, message?: string) {\n    this.status = { code, message };\n  }\n\n  /** Starts the span. */\n  start() {\n    if (this.started) {\n      this.logger.debug(\n        'calling %s.start() on already started %s %o',\n        this.className,\n        this.className,\n        { id: this.id, name: this.name, type: this.kind }\n      );\n      return;\n    }\n    // start child span's clock from root's current time to preserve integrity.\n    if (this.parentSpan) {\n      this.clock = new Clock(this.parentSpan.clock.currentDate);\n    } else {\n      this.clock = new Clock();\n    }\n    this.startedLocal = true;\n    this.logger.debug('starting %s  %o', this.className, {\n      traceId: this.traceId,\n      id: this.id,\n      name: this.name,\n      parentSpanId: this.parentSpanId,\n      traceState: this.traceState,\n    });\n\n    if (this.isRootSpan()) this.tracer.setCurrentRootSpan(this);\n    this.tracer.onStartSpan(this);\n  }\n\n  /** Ends the span and all of its children, recursively. */\n  end(): void {\n    if (this.ended) {\n      this.logger.debug(\n        'calling %s.end() on already ended %s %o',\n        this.className,\n        this.className,\n        { id: this.id, name: this.name, type: this.kind }\n      );\n      return;\n    }\n    if (!this.started) {\n      this.logger.error(\n        'calling %s.end() on un-started %s %o',\n        this.className,\n        this.className,\n        { id: this.id, name: this.name, type: this.kind }\n      );\n      return;\n    }\n    this.startedLocal = false;\n    this.endedLocal = true;\n    this.clock.end();\n\n    // TODO: Should ending a span force its children to end by default?\n    // Issue: https://github.com/open-telemetry/opentelemetry-node/issues/4\n    for (const span of this.spansLocal) {\n      if (!span.ended && span.started) {\n        span.truncate();\n      }\n    }\n\n    this.tracer.onEndSpan(this);\n  }\n\n  /** Forces the span to end. */\n  truncate() {\n    this.end();\n    this.logger.debug('truncating %s  %o', this.className, {\n      id: this.id,\n      name: this.name,\n    });\n  }\n\n  /**\n   * Starts a new child span.\n   * @param [options] A SpanOptions object to start a child span.\n   */\n  startChildSpan(options?: types.SpanOptions): types.Span {\n    if (this.ended) {\n      this.logger.debug(\n        'calling %s.startSpan() on ended %s %o',\n        this.className,\n        this.className,\n        { id: this.id, name: this.name, kind: this.kind }\n      );\n      return new NoRecordSpan(this.tracer);\n    }\n    if (!this.started) {\n      this.logger.debug(\n        'calling %s.startSpan() on un-started %s %o',\n        this.className,\n        this.className,\n        { id: this.id, name: this.name, kind: this.kind }\n      );\n      return new NoRecordSpan(this.tracer);\n    }\n\n    const child = new Span(this.tracer, this);\n    if (options && options.name) child.name = options.name;\n    if (options && options.kind) child.kind = options.kind;\n\n    child.start();\n    this.spansLocal.push(child);\n    return child;\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"daa13407c50fbb7876573bc771f86565e8e57b20"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2pzg248fc3=function(){return actualCoverage;};}return actualCoverage;}cov_2pzg248fc3();cov_2pzg248fc3().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_2pzg248fc3().s[1]++;exports.Span=void 0;/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */const noop_logger_1=(cov_2pzg248fc3().s[2]++,require("../../common/noop-logger"));const clock_1=(cov_2pzg248fc3().s[3]++,require("../../internal/clock"));const util_1=(cov_2pzg248fc3().s[4]++,require("../../internal/util"));const no_record_span_1=(cov_2pzg248fc3().s[5]++,require("./no-record/no-record-span"));const types=(cov_2pzg248fc3().s[6]++,require("./types"));const STATUS_OK=(cov_2pzg248fc3().s[7]++,{code:types.CanonicalCode.OK});/** Defines a base model for spans. */class Span{/** Constructs a new Span instance. */constructor(tracer,parent){cov_2pzg248fc3().f[0]++;cov_2pzg248fc3().s[8]++;/** Indicates if this span was started */this.startedLocal=false;/** Indicates if this span was ended */cov_2pzg248fc3().s[9]++;this.endedLocal=false;/** An object to log information to */cov_2pzg248fc3().s[10]++;this.logger=noop_logger_1.noopLogger;/** A set of attributes, each in the format [KEY]:[VALUE] */cov_2pzg248fc3().s[11]++;this.attributes={};/** A text annotation with a set of attributes. */cov_2pzg248fc3().s[12]++;this.annotations=[];/** An event describing a message sent/received between Spans */cov_2pzg248fc3().s[13]++;this.messageEvents=[];/** Pointers from the current span to another span */cov_2pzg248fc3().s[14]++;this.links=[];/** If the parent span is in another process. */cov_2pzg248fc3().s[15]++;this.remoteParent=false;/** The resource name of the span */cov_2pzg248fc3().s[16]++;this.name='span';/** Kind of span. */cov_2pzg248fc3().s[17]++;this.kind=types.SpanKind.UNSPECIFIED;/** A final status for this span */cov_2pzg248fc3().s[18]++;this.status=STATUS_OK;/** Trace Parameters */cov_2pzg248fc3().s[19]++;this.activeTraceParams={};/** The number of dropped attributes. */cov_2pzg248fc3().s[20]++;this.droppedAttributesCount=0;/** The number of dropped links. */cov_2pzg248fc3().s[21]++;this.droppedLinksCount=0;/** The number of dropped annotations. */cov_2pzg248fc3().s[22]++;this.droppedAnnotationsCount=0;/** The number of dropped message events. */cov_2pzg248fc3().s[23]++;this.droppedMessageEventsCount=0;cov_2pzg248fc3().s[24]++;this.tracer=tracer;cov_2pzg248fc3().s[25]++;this.className=this.constructor.name;cov_2pzg248fc3().s[26]++;this.id=util_1.randomSpanId();cov_2pzg248fc3().s[27]++;this.spansLocal=[];cov_2pzg248fc3().s[28]++;if(parent){cov_2pzg248fc3().b[0][0]++;cov_2pzg248fc3().s[29]++;this.root=parent.root;cov_2pzg248fc3().s[30]++;this.parentSpan=parent;cov_2pzg248fc3().s[31]++;this.activeTraceParams=this.root.activeTraceParams;}else{cov_2pzg248fc3().b[0][1]++;cov_2pzg248fc3().s[32]++;this.root=this;}cov_2pzg248fc3().s[33]++;this.logger=(cov_2pzg248fc3().b[1][0]++,this.root)&&(cov_2pzg248fc3().b[1][1]++,this.root.logger)||(cov_2pzg248fc3().b[1][2]++,this.logger);}/** Returns whether a span is root or not. */isRootSpan(){cov_2pzg248fc3().f[1]++;cov_2pzg248fc3().s[34]++;return false;}/** Gets the trace ID. */get traceId(){cov_2pzg248fc3().f[2]++;cov_2pzg248fc3().s[35]++;return this.root.traceId;}/** Gets the trace state */get traceState(){cov_2pzg248fc3().f[3]++;cov_2pzg248fc3().s[36]++;return this.root.traceState;}/**
     * Gets the ID of the parent span.
     * RootSpan doesn't have a parentSpan but it override this method.
     */get parentSpanId(){cov_2pzg248fc3().f[4]++;cov_2pzg248fc3().s[37]++;if(!this.parentSpan){cov_2pzg248fc3().b[2][0]++;cov_2pzg248fc3().s[38]++;return'no-parent';}else{cov_2pzg248fc3().b[2][1]++;}cov_2pzg248fc3().s[39]++;return this.parentSpan.id;}/** Indicates if span was started. */get started(){cov_2pzg248fc3().f[5]++;cov_2pzg248fc3().s[40]++;return this.startedLocal;}/** Indicates if span was ended. */get ended(){cov_2pzg248fc3().f[6]++;cov_2pzg248fc3().s[41]++;return this.endedLocal;}/**
     * Gives a timestamp that indicates the span's start time in RFC3339 UTC
     * "Zulu" format.
     */get startTime(){cov_2pzg248fc3().f[7]++;cov_2pzg248fc3().s[42]++;if(!this.clock){cov_2pzg248fc3().b[3][0]++;cov_2pzg248fc3().s[43]++;this.logger.debug('calling startTime() on null clock');cov_2pzg248fc3().s[44]++;return new Date();}else{cov_2pzg248fc3().b[3][1]++;}cov_2pzg248fc3().s[45]++;return this.clock.startTime;}/** Recursively gets the descendant spans. */allDescendants(){cov_2pzg248fc3().f[8]++;cov_2pzg248fc3().s[46]++;return this.spansLocal.reduce((acc,cur)=>{cov_2pzg248fc3().f[9]++;cov_2pzg248fc3().s[47]++;acc.push(cur);const desc=(cov_2pzg248fc3().s[48]++,cur.allDescendants());cov_2pzg248fc3().s[49]++;acc=acc.concat(desc);cov_2pzg248fc3().s[50]++;return acc;},[]);}/** The list of immediate child spans. */get spans(){cov_2pzg248fc3().f[10]++;cov_2pzg248fc3().s[51]++;return this.spansLocal;}/** The number of direct children. */get numberOfChildren(){cov_2pzg248fc3().f[11]++;cov_2pzg248fc3().s[52]++;return this.spansLocal.length;}/**
     * Gives a timestamp that indicates the span's end time in RFC3339 UTC
     * "Zulu" format.
     */get endTime(){cov_2pzg248fc3().f[12]++;cov_2pzg248fc3().s[53]++;if(!this.clock){cov_2pzg248fc3().b[4][0]++;cov_2pzg248fc3().s[54]++;this.logger.debug('calling endTime() on null clock');cov_2pzg248fc3().s[55]++;return new Date();}else{cov_2pzg248fc3().b[4][1]++;}cov_2pzg248fc3().s[56]++;return this.clock.endTime;}/**
     * Gets the duration of the clock.
     */get duration(){cov_2pzg248fc3().f[13]++;cov_2pzg248fc3().s[57]++;if(!this.clock){cov_2pzg248fc3().b[5][0]++;cov_2pzg248fc3().s[58]++;this.logger.debug('calling duration() on null clock');cov_2pzg248fc3().s[59]++;return 0;}else{cov_2pzg248fc3().b[5][1]++;}cov_2pzg248fc3().s[60]++;return this.clock.duration;}/** Gives the TraceContext of the span. */get spanContext(){cov_2pzg248fc3().f[14]++;cov_2pzg248fc3().s[61]++;return{traceId:this.traceId,spanId:this.id,options:0x1,traceState:this.traceState};}/**
     * Adds an atribute to the span.
     * @param key Describes the value added.
     * @param value The result of an operation. If the value is a typeof object
     *     it has to be JSON.stringify-able, cannot contain circular dependencies.
     */addAttribute(key,value){cov_2pzg248fc3().f[15]++;cov_2pzg248fc3().s[62]++;if(this.attributes[key]){cov_2pzg248fc3().b[6][0]++;cov_2pzg248fc3().s[63]++;delete this.attributes[key];}else{cov_2pzg248fc3().b[6][1]++;}cov_2pzg248fc3().s[64]++;if(Object.keys(this.attributes).length>=this.activeTraceParams.numberOfAttributesPerSpan){cov_2pzg248fc3().b[7][0]++;cov_2pzg248fc3().s[65]++;this.droppedAttributesCount++;const attributeKeyToDelete=(cov_2pzg248fc3().s[66]++,Object.keys(this.attributes).shift());cov_2pzg248fc3().s[67]++;if(attributeKeyToDelete){cov_2pzg248fc3().b[8][0]++;cov_2pzg248fc3().s[68]++;delete this.attributes[attributeKeyToDelete];}else{cov_2pzg248fc3().b[8][1]++;}}else{cov_2pzg248fc3().b[7][1]++;}const serializedValue=(cov_2pzg248fc3().s[69]++,typeof value==='object'?(cov_2pzg248fc3().b[9][0]++,JSON.stringify(value)):(cov_2pzg248fc3().b[9][1]++,value));cov_2pzg248fc3().s[70]++;this.attributes[key]=serializedValue;}/**
     * Adds an annotation to the span.
     * @param description Describes the event.
     * @param attributes A set of attributes on the annotation.
     * @param timestamp A time, in milliseconds. Defaults to Date.now()
     */addAnnotation(description,attributes=(cov_2pzg248fc3().b[10][0]++,{}),timestamp=(cov_2pzg248fc3().b[11][0]++,Date.now())){cov_2pzg248fc3().f[16]++;cov_2pzg248fc3().s[71]++;if(this.annotations.length>=this.activeTraceParams.numberOfAnnontationEventsPerSpan){cov_2pzg248fc3().b[12][0]++;cov_2pzg248fc3().s[72]++;this.annotations.shift();cov_2pzg248fc3().s[73]++;this.droppedAnnotationsCount++;}else{cov_2pzg248fc3().b[12][1]++;}cov_2pzg248fc3().s[74]++;this.annotations.push({description,attributes,timestamp});}/**
     * Adds a link to the span.
     * @param traceId The trace ID for a trace within a project.
     * @param spanId The span ID for a span within a trace.
     * @param type The relationship of the current span relative to the linked.
     * @param attributes A set of attributes on the link.
     */addLink(traceId,spanId,type,attributes=(cov_2pzg248fc3().b[13][0]++,{})){cov_2pzg248fc3().f[17]++;cov_2pzg248fc3().s[75]++;if(this.links.length>=this.activeTraceParams.numberOfLinksPerSpan){cov_2pzg248fc3().b[14][0]++;cov_2pzg248fc3().s[76]++;this.links.shift();cov_2pzg248fc3().s[77]++;this.droppedLinksCount++;}else{cov_2pzg248fc3().b[14][1]++;}cov_2pzg248fc3().s[78]++;this.links.push({traceId,spanId,type,attributes});}/**
     * Adds a message event to the span.
     * @param type The type of message event.
     * @param id An identifier for the message event.
     * @param timestamp A time in milliseconds. Defaults to Date.now()
     * @param uncompressedSize The number of uncompressed bytes sent or received
     * @param compressedSize The number of compressed bytes sent or received. If
     *     zero or undefined, assumed to be the same size as uncompressed.
     */addMessageEvent(type,id,timestamp=(cov_2pzg248fc3().b[15][0]++,Date.now()),uncompressedSize,compressedSize){cov_2pzg248fc3().f[18]++;cov_2pzg248fc3().s[79]++;if(this.messageEvents.length>=this.activeTraceParams.numberOfMessageEventsPerSpan){cov_2pzg248fc3().b[16][0]++;cov_2pzg248fc3().s[80]++;this.messageEvents.shift();cov_2pzg248fc3().s[81]++;this.droppedMessageEventsCount++;}else{cov_2pzg248fc3().b[16][1]++;}cov_2pzg248fc3().s[82]++;this.messageEvents.push({type,id,timestamp,uncompressedSize,compressedSize});}/**
     * Sets a status to the span.
     * @param code The canonical status code.
     * @param message optional A developer-facing error message.
     */setStatus(code,message){cov_2pzg248fc3().f[19]++;cov_2pzg248fc3().s[83]++;this.status={code,message};}/** Starts the span. */start(){cov_2pzg248fc3().f[20]++;cov_2pzg248fc3().s[84]++;if(this.started){cov_2pzg248fc3().b[17][0]++;cov_2pzg248fc3().s[85]++;this.logger.debug('calling %s.start() on already started %s %o',this.className,this.className,{id:this.id,name:this.name,type:this.kind});cov_2pzg248fc3().s[86]++;return;}else{cov_2pzg248fc3().b[17][1]++;}// start child span's clock from root's current time to preserve integrity.
cov_2pzg248fc3().s[87]++;if(this.parentSpan){cov_2pzg248fc3().b[18][0]++;cov_2pzg248fc3().s[88]++;this.clock=new clock_1.Clock(this.parentSpan.clock.currentDate);}else{cov_2pzg248fc3().b[18][1]++;cov_2pzg248fc3().s[89]++;this.clock=new clock_1.Clock();}cov_2pzg248fc3().s[90]++;this.startedLocal=true;cov_2pzg248fc3().s[91]++;this.logger.debug('starting %s  %o',this.className,{traceId:this.traceId,id:this.id,name:this.name,parentSpanId:this.parentSpanId,traceState:this.traceState});cov_2pzg248fc3().s[92]++;if(this.isRootSpan()){cov_2pzg248fc3().b[19][0]++;cov_2pzg248fc3().s[93]++;this.tracer.setCurrentRootSpan(this);}else{cov_2pzg248fc3().b[19][1]++;}cov_2pzg248fc3().s[94]++;this.tracer.onStartSpan(this);}/** Ends the span and all of its children, recursively. */end(){cov_2pzg248fc3().f[21]++;cov_2pzg248fc3().s[95]++;if(this.ended){cov_2pzg248fc3().b[20][0]++;cov_2pzg248fc3().s[96]++;this.logger.debug('calling %s.end() on already ended %s %o',this.className,this.className,{id:this.id,name:this.name,type:this.kind});cov_2pzg248fc3().s[97]++;return;}else{cov_2pzg248fc3().b[20][1]++;}cov_2pzg248fc3().s[98]++;if(!this.started){cov_2pzg248fc3().b[21][0]++;cov_2pzg248fc3().s[99]++;this.logger.error('calling %s.end() on un-started %s %o',this.className,this.className,{id:this.id,name:this.name,type:this.kind});cov_2pzg248fc3().s[100]++;return;}else{cov_2pzg248fc3().b[21][1]++;}cov_2pzg248fc3().s[101]++;this.startedLocal=false;cov_2pzg248fc3().s[102]++;this.endedLocal=true;cov_2pzg248fc3().s[103]++;this.clock.end();// TODO: Should ending a span force its children to end by default?
// Issue: https://github.com/open-telemetry/opentelemetry-node/issues/4
cov_2pzg248fc3().s[104]++;for(const span of this.spansLocal){cov_2pzg248fc3().s[105]++;if((cov_2pzg248fc3().b[23][0]++,!span.ended)&&(cov_2pzg248fc3().b[23][1]++,span.started)){cov_2pzg248fc3().b[22][0]++;cov_2pzg248fc3().s[106]++;span.truncate();}else{cov_2pzg248fc3().b[22][1]++;}}cov_2pzg248fc3().s[107]++;this.tracer.onEndSpan(this);}/** Forces the span to end. */truncate(){cov_2pzg248fc3().f[22]++;cov_2pzg248fc3().s[108]++;this.end();cov_2pzg248fc3().s[109]++;this.logger.debug('truncating %s  %o',this.className,{id:this.id,name:this.name});}/**
     * Starts a new child span.
     * @param [options] A SpanOptions object to start a child span.
     */startChildSpan(options){cov_2pzg248fc3().f[23]++;cov_2pzg248fc3().s[110]++;if(this.ended){cov_2pzg248fc3().b[24][0]++;cov_2pzg248fc3().s[111]++;this.logger.debug('calling %s.startSpan() on ended %s %o',this.className,this.className,{id:this.id,name:this.name,kind:this.kind});cov_2pzg248fc3().s[112]++;return new no_record_span_1.NoRecordSpan(this.tracer);}else{cov_2pzg248fc3().b[24][1]++;}cov_2pzg248fc3().s[113]++;if(!this.started){cov_2pzg248fc3().b[25][0]++;cov_2pzg248fc3().s[114]++;this.logger.debug('calling %s.startSpan() on un-started %s %o',this.className,this.className,{id:this.id,name:this.name,kind:this.kind});cov_2pzg248fc3().s[115]++;return new no_record_span_1.NoRecordSpan(this.tracer);}else{cov_2pzg248fc3().b[25][1]++;}const child=(cov_2pzg248fc3().s[116]++,new Span(this.tracer,this));cov_2pzg248fc3().s[117]++;if((cov_2pzg248fc3().b[27][0]++,options)&&(cov_2pzg248fc3().b[27][1]++,options.name)){cov_2pzg248fc3().b[26][0]++;cov_2pzg248fc3().s[118]++;child.name=options.name;}else{cov_2pzg248fc3().b[26][1]++;}cov_2pzg248fc3().s[119]++;if((cov_2pzg248fc3().b[29][0]++,options)&&(cov_2pzg248fc3().b[29][1]++,options.kind)){cov_2pzg248fc3().b[28][0]++;cov_2pzg248fc3().s[120]++;child.kind=options.kind;}else{cov_2pzg248fc3().b[28][1]++;}cov_2pzg248fc3().s[121]++;child.start();cov_2pzg248fc3().s[122]++;this.spansLocal.push(child);cov_2pzg248fc3().s[123]++;return child;}}cov_2pzg248fc3().s[124]++;exports.Span=Span;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3VzZXJtYWl0aGEvdHJhZGVtYXN0ZXIvbGlicy9saWItZXh0ZXJuYWwtb3BlbmNlbnN1cy1ub2RlL3NyYy90cmFjZS9tb2RlbC9zcGFuLnRzIiwic291cmNlcyI6WyIvVXNlcnMvdXNlcm1haXRoYS90cmFkZW1hc3Rlci9saWJzL2xpYi1leHRlcm5hbC1vcGVuY2Vuc3VzLW5vZGUvc3JjL3RyYWNlL21vZGVsL3NwYW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7O0dBY0c7QUFDSCwwREFBc0Q7QUFFdEQsZ0RBQTZDO0FBQzdDLDhDQUFtRDtBQUduRCwrREFBMEQ7QUFDMUQsaUNBQWlDO0FBRWpDLE1BQU0sU0FBUyxHQUFHO0lBQ2hCLElBQUksRUFBRSxLQUFLLENBQUMsYUFBYSxDQUFDLEVBQUU7Q0FDN0IsQ0FBQztBQUVGLHNDQUFzQztBQUN0QyxNQUFhLElBQUk7SUFnRGYsc0NBQXNDO0lBQ3RDLFlBQVksTUFBd0IsRUFBRSxNQUFhO1FBN0NuRCx5Q0FBeUM7UUFDakMsaUJBQVksR0FBRyxLQUFLLENBQUM7UUFDN0IsdUNBQXVDO1FBQy9CLGVBQVUsR0FBRyxLQUFLLENBQUM7UUFPM0Isc0NBQXNDO1FBQ3RDLFdBQU0sR0FBVyx3QkFBVSxDQUFDO1FBQzVCLDREQUE0RDtRQUM1RCxlQUFVLEdBQXFCLEVBQUUsQ0FBQztRQUNsQyxrREFBa0Q7UUFDbEQsZ0JBQVcsR0FBdUIsRUFBRSxDQUFDO1FBQ3JDLGdFQUFnRTtRQUNoRSxrQkFBYSxHQUF5QixFQUFFLENBQUM7UUFDekMscURBQXFEO1FBQ3JELFVBQUssR0FBaUIsRUFBRSxDQUFDO1FBQ3pCLGdEQUFnRDtRQUNoRCxpQkFBWSxHQUFHLEtBQUssQ0FBQztRQUtyQixvQ0FBb0M7UUFDcEMsU0FBSSxHQUFHLE1BQU0sQ0FBQztRQUNkLG9CQUFvQjtRQUNwQixTQUFJLEdBQW1CLEtBQUssQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDO1FBQ2xELG1DQUFtQztR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QUMsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQ2xELENBQUM7WUFDRixPQUFPLElBQUksNkJBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEM7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNqQixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FDZiw0Q0FBNEMsRUFDNUMsSUFBSSxDQUFDLFNBQVMsRUFDZCxJQUFJLENBQUMsU0FBUyxFQUNkLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FDbEQsQ0FBQztZQUNGLE9BQU8sSUFBSSw2QkFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN0QztRQUVELE1BQU0sS0FBSyxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDMUMsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLElBQUk7WUFBRSxLQUFLLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7UUFDdkQsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLElBQUk7WUFBRSxLQUFLLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7UUFFdkQsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUIsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0NBQ0Y7QUFoWUQsb0JBZ1lDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCwgT3BlbkNlbnN1cyBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgbm9vcExvZ2dlciB9IGZyb20gJy4uLy4uL2NvbW1vbi9ub29wLWxvZ2dlcic7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi8uLi9jb21tb24vdHlwZXMnO1xuaW1wb3J0IHsgQ2xvY2sgfSBmcm9tICcuLi8uLi9pbnRlcm5hbC9jbG9jayc7XG5pbXBvcnQgeyByYW5kb21TcGFuSWQgfSBmcm9tICcuLi8uLi9pbnRlcm5hbC91dGlsJztcbmltcG9ydCAqIGFzIGNvbmZpZ1R5cGVzIGZyb20gJy4uL2NvbmZpZy90eXBlcyc7XG5cbmltcG9ydCB7IE5vUmVjb3JkU3BhbiB9IGZyb20gJy4vbm8tcmVjb3JkL25vLXJlY29yZC1zcGFuJztcbmltcG9ydCAqIGFzIHR5cGVzIGZyb20gJy4vdHlwZXMnO1xuXG5jb25zdCBTVEFUVVNfT0sgPSB7XG4gIGNvZGU6IHR5cGVzLkNhbm9uaWNhbENvZGUuT0ssXG59O1xuXG4vKiogRGVmaW5lcyBhIGJhc2UgbW9kZWwgZm9yIHNwYW5zLiAqL1xuZXhwb3J0IGNsYXNzIFNwYW4gaW1wbGVtZW50cyB0eXBlcy5TcGFuIHtcbiAgcHJvdGVjdGVkIGNsYXNzTmFtZTogc3RyaW5nO1xuICAvKiogVGhlIGNsb2NrIHVzZWQgdG8gbWVzdXJlIHRoZSBiZWdpbm5pbmcgYW5kIGVuZGluZyBvZiBhIHNwYW4gKi9cbiAgcHJpdmF0ZSBjbG9jayE6IENsb2NrO1xuICAvKiogSW5kaWNhdGVzIGlmIHRoaXMgc3BhbiB3YXMgc3RhcnRlZCAqL1xuICBwcml2YXRlIHN0YXJ0ZWRMb2NhbCA9IGZhbHNlO1xuICAvKiogSW5kaWNhdGVzIGlmIHRoaXMgc3BhbiB3YXMgZW5kZWQgKi9cbiAgcHJpdmF0ZSBlbmRlZExvY2FsID0gZmFsc2U7XG4gIC8qKiBBIGxpc3Qgb2YgY2hpbGQgc3BhbnMgd2hpY2ggYXJlIGltbWVkaWF0ZSwgbG9jYWwgY2hpbGRyZW4gb2YgdGhpcyBzcGFuICovXG4gIHByaXZhdGUgc3BhbnNMb2NhbDogdHlwZXMuU3BhbltdO1xuICAvKiogVGhlIFNwYW4gSUQgb2YgdGhpcyBzcGFuICovXG4gIHJlYWRvbmx5IGlkOiBzdHJpbmc7XG4gIC8qKiBBIHRyYWNlciBvYmplY3QgKi9cbiAgcmVhZG9ubHkgdHJhY2VyOiB0eXBlcy5UcmFjZXJCYXNlO1xuICAvKiogQW4gb2JqZWN0IHRvIGxvZyBpbmZvcm1hdGlvbiB0byAqL1xuICBsb2dnZXI6IExvZ2dlciA9IG5vb3BMb2dnZXI7XG4gIC8qKiBBIHNldCBvZiBhdHRyaWJ1dGVzLCBlYWNoIGluIHRoZSBmb3JtYXQgW0tFWV06W1ZBTFVFXSAqL1xuICBhdHRyaWJ1dGVzOiB0eXBlcy5BdHRyaWJ1dGVzID0ge307XG4gIC8qKiBBIHRleHQgYW5ub3RhdGlvbiB3aXRoIGEgc2V0IG9mIGF0dHJpYnV0ZXMuICovXG4gIGFubm90YXRpb25zOiB0eXBlcy5Bbm5vdGF0aW9uW10gPSBbXTtcbiAgLyoqIEFuIGV2ZW50IGRlc2NyaWJpbmcgYSBtZXNzYWdlIHNlbnQvcmVjZWl2ZWQgYmV0d2VlbiBTcGFucyAqL1xuICBtZXNzYWdlRXZlbnRzOiB0eXBlcy5NZXNzYWdlRXZlbnRbXSA9IFtdO1xuICAvKiogUG9pbnRlcnMgZnJvbSB0aGUgY3VycmVudCBzcGFuIHRvIGFub3RoZXIgc3BhbiAqL1xuICBsaW5rczogdHlwZXMuTGlua1tdID0gW107XG4gIC8qKiBJZiB0aGUgcGFyZW50IHNwYW4gaXMgaW4gYW5vdGhlciBwcm9jZXNzLiAqL1xuICByZW1vdGVQYXJlbnQgPSBmYWxzZTtcbiAgLyoqIFRoaXMgc3BhbidzIHJvb3Qgc3Bhbi4gIElmIGl0J3MgYSByb290IHNwYW4sIGl0IHdpbGwgcG9pbnQgdG8gdGhpcyAqL1xuICByb290OiBTcGFuO1xuICAvKiogVGhpcyBzcGFuJ3MgcGFyZW50LiBJZiBpdCdzIGEgcm9vdCBzcGFuLCBtdXN0IGJlIGVtcHR5ICovXG4gIHBhcmVudFNwYW4/OiBTcGFuO1xuICAvKiogVGhlIHJlc291cmNlIG5hbWUgb2YgdGhlIHNwYW4gKi9cbiAgbmFtZSA9ICdzcGFuJztcbiAgLyoqIEtpbmQgb2Ygc3Bhbi4gKi9cbiAga2luZDogdHlwZXMuU3BhbktpbmQgPSB0eXBlcy5TcGFuS2luZC5VTlNQRUNJRklFRDtcbiAgLyoqIEEgZmluYWwgc3RhdHVzIGZvciB0aGlzIHNwYW4gKi9cbiAgc3RhdHVzOiB0eXBlcy5TdGF0dXMgPSBTVEFUVVNfT0s7XG4gIC8qKiBUcmFjZSBQYXJhbWV0ZXJzICovXG4gIGFjdGl2ZVRyYWNlUGFyYW1zOiBjb25maWdUeXBlcy5UcmFjZVBhcmFtcyA9IHt9O1xuXG4gIC8qKiBUaGUgbnVtYmVyIG9mIGRyb3BwZWQgYXR0cmlidXRlcy4gKi9cbiAgZHJvcHBlZEF0dHJpYnV0ZXNDb3VudCA9IDA7XG4gIC8qKiBUaGUgbnVtYmVyIG9mIGRyb3BwZWQgbGlua3MuICovXG4gIGRyb3BwZWRMaW5rc0NvdW50ID0gMDtcbiAgLyoqIFRoZSBudW1iZXIgb2YgZHJvcHBlZCBhbm5vdGF0aW9ucy4gKi9cbiAgZHJvcHBlZEFubm90YXRpb25zQ291bnQgPSAwO1xuICAvKiogVGhlIG51bWJlciBvZiBkcm9wcGVkIG1lc3NhZ2UgZXZlbnRzLiAqL1xuICBkcm9wcGVkTWVzc2FnZUV2ZW50c0NvdW50ID0gMDtcblxuICAvKiogQ29uc3RydWN0cyBhIG5ldyBTcGFuIGluc3RhbmNlLiAqL1xuICBjb25zdHJ1Y3Rvcih0cmFjZXI6IHR5cGVzLlRyYWNlckJhc2UsIHBhcmVudD86IFNwYW4pIHtcbiAgICB0aGlzLnRyYWNlciA9IHRyYWNlcjtcbiAgICB0aGlzLmNsYXNzTmFtZSA9IHRoaXMuY29uc3RydWN0b3IubmFtZTtcbiAgICB0aGlzLmlkID0gcmFuZG9tU3BhbklkKCk7XG4gICAgdGhpcy5zcGFuc0xvY2FsID0gW107XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgdGhpcy5yb290ID0gcGFyZW50LnJvb3Q7XG4gICAgICB0aGlzLnBhcmVudFNwYW4gPSBwYXJlbnQ7XG4gICAgICB0aGlzLmFjdGl2ZVRyYWNlUGFyYW1zID0gdGhpcy5yb290LmFjdGl2ZVRyYWNlUGFyYW1zO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJvb3QgPSB0aGlzO1xuICAgIH1cbiAgICB0aGlzLmxvZ2dlciA9ICh0aGlzLnJvb3QgJiYgdGhpcy5yb290LmxvZ2dlcikgfHwgdGhpcy5sb2dnZXI7XG4gIH1cblxuICAvKiogUmV0dXJucyB3aGV0aGVyIGEgc3BhbiBpcyByb290IG9yIG5vdC4gKi9cbiAgaXNSb290U3BhbigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKiogR2V0cyB0aGUgdHJhY2UgSUQuICovXG4gIGdldCB0cmFjZUlkKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMucm9vdC50cmFjZUlkO1xuICB9XG5cbiAgLyoqIEdldHMgdGhlIHRyYWNlIHN0YXRlICovXG4gIGdldCB0cmFjZVN0YXRlKCk6IHR5cGVzLlRyYWNlU3RhdGUgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLnJvb3QudHJhY2VTdGF0ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBJRCBvZiB0aGUgcGFyZW50IHNwYW4uXG4gICAqIFJvb3RTcGFuIGRvZXNuJ3QgaGF2ZSBhIHBhcmVudFNwYW4gYnV0IGl0IG92ZXJyaWRlIHRoaXMgbWV0aG9kLlxuICAgKi9cbiAgZ2V0IHBhcmVudFNwYW5JZCgpOiBzdHJpbmcge1xuICAgIGlmICghdGhpcy5wYXJlbnRTcGFuKSB7XG4gICAgICByZXR1cm4gJ25vLXBhcmVudCc7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnBhcmVudFNwYW4uaWQ7XG4gIH1cblxuICAvKiogSW5kaWNhdGVzIGlmIHNwYW4gd2FzIHN0YXJ0ZWQuICovXG4gIGdldCBzdGFydGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnN0YXJ0ZWRMb2NhbDtcbiAgfVxuXG4gIC8qKiBJbmRpY2F0ZXMgaWYgc3BhbiB3YXMgZW5kZWQuICovXG4gIGdldCBlbmRlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5lbmRlZExvY2FsO1xuICB9XG5cbiAgLyoqXG4gICAqIEdpdmVzIGEgdGltZXN0YW1wIHRoYXQgaW5kaWNhdGVzIHRoZSBzcGFuJ3Mgc3RhcnQgdGltZSBpbiBSRkMzMzM5IFVUQ1xuICAgKiBcIlp1bHVcIiBmb3JtYXQuXG4gICAqL1xuICBnZXQgc3RhcnRUaW1lKCk6IERhdGUge1xuICAgIGlmICghdGhpcy5jbG9jaykge1xuICAgICAgdGhpcy5sb2dnZXIuZGVidWcoJ2NhbGxpbmcgc3RhcnRUaW1lKCkgb24gbnVsbCBjbG9jaycpO1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuY2xvY2suc3RhcnRUaW1lO1xuICB9XG5cbiAgLyoqIFJlY3Vyc2l2ZWx5IGdldHMgdGhlIGRlc2NlbmRhbnQgc3BhbnMuICovXG4gIGFsbERlc2NlbmRhbnRzKCk6IHR5cGVzLlNwYW5bXSB7XG4gICAgcmV0dXJuIHRoaXMuc3BhbnNMb2NhbC5yZWR1Y2UoKGFjYzogdHlwZXMuU3BhbltdLCBjdXIpID0+IHtcbiAgICAgIGFjYy5wdXNoKGN1cik7XG4gICAgICBjb25zdCBkZXNjID0gY3VyLmFsbERlc2NlbmRhbnRzKCk7XG4gICAgICBhY2MgPSBhY2MuY29uY2F0KGRlc2MpO1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBbXSk7XG4gIH1cblxuICAvKiogVGhlIGxpc3Qgb2YgaW1tZWRpYXRlIGNoaWxkIHNwYW5zLiAqL1xuICBnZXQgc3BhbnMoKTogdHlwZXMuU3BhbltdIHtcbiAgICByZXR1cm4gdGhpcy5zcGFuc0xvY2FsO1xuICB9XG5cbiAgLyoqIFRoZSBudW1iZXIgb2YgZGlyZWN0IGNoaWxkcmVuLiAqL1xuICBnZXQgbnVtYmVyT2ZDaGlsZHJlbigpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnNwYW5zTG9jYWwubGVuZ3RoO1xuICB9XG5cbiAgLyoqXG4gICAqIEdpdmVzIGEgdGltZXN0YW1wIHRoYXQgaW5kaWNhdGVzIHRoZSBzcGFuJ3MgZW5kIHRpbWUgaW4gUkZDMzMzOSBVVENcbiAgICogXCJadWx1XCIgZm9ybWF0LlxuICAgKi9cbiAgZ2V0IGVuZFRpbWUoKTogRGF0ZSB7XG4gICAgaWYgKCF0aGlzLmNsb2NrKSB7XG4gICAgICB0aGlzLmxvZ2dlci5kZWJ1ZygnY2FsbGluZyBlbmRUaW1lKCkgb24gbnVsbCBjbG9jaycpO1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuY2xvY2suZW5kVGltZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBkdXJhdGlvbiBvZiB0aGUgY2xvY2suXG4gICAqL1xuICBnZXQgZHVyYXRpb24oKTogbnVtYmVyIHtcbiAgICBpZiAoIXRoaXMuY2xvY2spIHtcbiAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKCdjYWxsaW5nIGR1cmF0aW9uKCkgb24gbnVsbCBjbG9jaycpO1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuY2xvY2suZHVyYXRpb247XG4gIH1cblxuICAvKiogR2l2ZXMgdGhlIFRyYWNlQ29udGV4dCBvZiB0aGUgc3Bhbi4gKi9cbiAgZ2V0IHNwYW5Db250ZXh0KCk6IHR5cGVzLlNwYW5Db250ZXh0IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHJhY2VJZDogdGhpcy50cmFjZUlkLFxuICAgICAgc3BhbklkOiB0aGlzLmlkLFxuICAgICAgb3B0aW9uczogMHgxLCAvLyBhbHdheXMgdHJhY2VkXG4gICAgICB0cmFjZVN0YXRlOiB0aGlzLnRyYWNlU3RhdGUsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGFuIGF0cmlidXRlIHRvIHRoZSBzcGFuLlxuICAgKiBAcGFyYW0ga2V5IERlc2NyaWJlcyB0aGUgdmFsdWUgYWRkZWQuXG4gICAqIEBwYXJhbSB2YWx1ZSBUaGUgcmVzdWx0IG9mIGFuIG9wZXJhdGlvbi4gSWYgdGhlIHZhbHVlIGlzIGEgdHlwZW9mIG9iamVjdFxuICAgKiAgICAgaXQgaGFzIHRvIGJlIEpTT04uc3RyaW5naWZ5LWFibGUsIGNhbm5vdCBjb250YWluIGNpcmN1bGFyIGRlcGVuZGVuY2llcy5cbiAgICovXG4gIGFkZEF0dHJpYnV0ZShrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4gfCBvYmplY3QpIHtcbiAgICBpZiAodGhpcy5hdHRyaWJ1dGVzW2tleV0pIHtcbiAgICAgIGRlbGV0ZSB0aGlzLmF0dHJpYnV0ZXNba2V5XTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBPYmplY3Qua2V5cyh0aGlzLmF0dHJpYnV0ZXMpLmxlbmd0aCA+PVxuICAgICAgdGhpcy5hY3RpdmVUcmFjZVBhcmFtcy5udW1iZXJPZkF0dHJpYnV0ZXNQZXJTcGFuIVxuICAgICkge1xuICAgICAgdGhpcy5kcm9wcGVkQXR0cmlidXRlc0NvdW50Kys7XG4gICAgICBjb25zdCBhdHRyaWJ1dGVLZXlUb0RlbGV0ZSA9IE9iamVjdC5rZXlzKHRoaXMuYXR0cmlidXRlcykuc2hpZnQoKTtcbiAgICAgIGlmIChhdHRyaWJ1dGVLZXlUb0RlbGV0ZSkge1xuICAgICAgICBkZWxldGUgdGhpcy5hdHRyaWJ1dGVzW2F0dHJpYnV0ZUtleVRvRGVsZXRlXTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgc2VyaWFsaXplZFZhbHVlID1cbiAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgPyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgOiB2YWx1ZTtcbiAgICB0aGlzLmF0dHJpYnV0ZXNba2V5XSA9IHNlcmlhbGl6ZWRWYWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGFuIGFubm90YXRpb24gdG8gdGhlIHNwYW4uXG4gICAqIEBwYXJhbSBkZXNjcmlwdGlvbiBEZXNjcmliZXMgdGhlIGV2ZW50LlxuICAgKiBAcGFyYW0gYXR0cmlidXRlcyBBIHNldCBvZiBhdHRyaWJ1dGVzIG9uIHRoZSBhbm5vdGF0aW9uLlxuICAgKiBAcGFyYW0gdGltZXN0YW1wIEEgdGltZSwgaW4gbWlsbGlzZWNvbmRzLiBEZWZhdWx0cyB0byBEYXRlLm5vdygpXG4gICAqL1xuICBhZGRBbm5vdGF0aW9uKFxuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmcsXG4gICAgYXR0cmlidXRlczogdHlwZXMuQXR0cmlidXRlcyA9IHt9LFxuICAgIHRpbWVzdGFtcCA9IERhdGUubm93KClcbiAgKSB7XG4gICAgaWYgKFxuICAgICAgdGhpcy5hbm5vdGF0aW9ucy5sZW5ndGggPj1cbiAgICAgIHRoaXMuYWN0aXZlVHJhY2VQYXJhbXMubnVtYmVyT2ZBbm5vbnRhdGlvbkV2ZW50c1BlclNwYW4hXG4gICAgKSB7XG4gICAgICB0aGlzLmFubm90YXRpb25zLnNoaWZ0KCk7XG4gICAgICB0aGlzLmRyb3BwZWRBbm5vdGF0aW9uc0NvdW50Kys7XG4gICAgfVxuICAgIHRoaXMuYW5ub3RhdGlvbnMucHVzaCh7IGRlc2NyaXB0aW9uLCBhdHRyaWJ1dGVzLCB0aW1lc3RhbXAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIGxpbmsgdG8gdGhlIHNwYW4uXG4gICAqIEBwYXJhbSB0cmFjZUlkIFRoZSB0cmFjZSBJRCBmb3IgYSB0cmFjZSB3aXRoaW4gYSBwcm9qZWN0LlxuICAgKiBAcGFyYW0gc3BhbklkIFRoZSBzcGFuIElEIGZvciBhIHNwYW4gd2l0aGluIGEgdHJhY2UuXG4gICAqIEBwYXJhbSB0eXBlIFRoZSByZWxhdGlvbnNoaXAgb2YgdGhlIGN1cnJlbnQgc3BhbiByZWxhdGl2ZSB0byB0aGUgbGlua2VkLlxuICAgKiBAcGFyYW0gYXR0cmlidXRlcyBBIHNldCBvZiBhdHRyaWJ1dGVzIG9uIHRoZSBsaW5rLlxuICAgKi9cbiAgYWRkTGluayhcbiAgICB0cmFjZUlkOiBzdHJpbmcsXG4gICAgc3BhbklkOiBzdHJpbmcsXG4gICAgdHlwZTogdHlwZXMuTGlua1R5cGUsXG4gICAgYXR0cmlidXRlczogdHlwZXMuQXR0cmlidXRlcyA9IHt9XG4gICkge1xuICAgIGlmICh0aGlzLmxpbmtzLmxlbmd0aCA+PSB0aGlzLmFjdGl2ZVRyYWNlUGFyYW1zLm51bWJlck9mTGlua3NQZXJTcGFuISkge1xuICAgICAgdGhpcy5saW5rcy5zaGlmdCgpO1xuICAgICAgdGhpcy5kcm9wcGVkTGlua3NDb3VudCsrO1xuICAgIH1cblxuICAgIHRoaXMubGlua3MucHVzaCh7IHRyYWNlSWQsIHNwYW5JZCwgdHlwZSwgYXR0cmlidXRlcyB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgbWVzc2FnZSBldmVudCB0byB0aGUgc3Bhbi5cbiAgICogQHBhcmFtIHR5cGUgVGhlIHR5cGUgb2YgbWVzc2FnZSBldmVudC5cbiAgICogQHBhcmFtIGlkIEFuIGlkZW50aWZpZXIgZm9yIHRoZSBtZXNzYWdlIGV2ZW50LlxuICAgKiBAcGFyYW0gdGltZXN0YW1wIEEgdGltZSBpbiBtaWxsaXNlY29uZHMuIERlZmF1bHRzIHRvIERhdGUubm93KClcbiAgICogQHBhcmFtIHVuY29tcHJlc3NlZFNpemUgVGhlIG51bWJlciBvZiB1bmNvbXByZXNzZWQgYnl0ZXMgc2VudCBvciByZWNlaXZlZFxuICAgKiBAcGFyYW0gY29tcHJlc3NlZFNpemUgVGhlIG51bWJlciBvZiBjb21wcmVzc2VkIGJ5dGVzIHNlbnQgb3IgcmVjZWl2ZWQuIElmXG4gICAqICAgICB6ZXJvIG9yIHVuZGVmaW5lZCwgYXNzdW1lZCB0byBiZSB0aGUgc2FtZSBzaXplIGFzIHVuY29tcHJlc3NlZC5cbiAgICovXG4gIGFkZE1lc3NhZ2VFdmVudChcbiAgICB0eXBlOiB0eXBlcy5NZXNzYWdlRXZlbnRUeXBlLFxuICAgIGlkOiBudW1iZXIsXG4gICAgdGltZXN0YW1wID0gRGF0ZS5ub3coKSxcbiAgICB1bmNvbXByZXNzZWRTaXplPzogbnVtYmVyLFxuICAgIGNvbXByZXNzZWRTaXplPzogbnVtYmVyXG4gICkge1xuICAgIGlmIChcbiAgICAgIHRoaXMubWVzc2FnZUV2ZW50cy5sZW5ndGggPj1cbiAgICAgIHRoaXMuYWN0aXZlVHJhY2VQYXJhbXMubnVtYmVyT2ZNZXNzYWdlRXZlbnRzUGVyU3BhbiFcbiAgICApIHtcbiAgICAgIHRoaXMubWVzc2FnZUV2ZW50cy5zaGlmdCgpO1xuICAgICAgdGhpcy5kcm9wcGVkTWVzc2FnZUV2ZW50c0NvdW50Kys7XG4gICAgfVxuXG4gICAgdGhpcy5tZXNzYWdlRXZlbnRzLnB1c2goe1xuICAgICAgdHlwZSxcbiAgICAgIGlkLFxuICAgICAgdGltZXN0YW1wLFxuICAgICAgdW5jb21wcmVzc2VkU2l6ZSxcbiAgICAgIGNvbXByZXNzZWRTaXplLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgYSBzdGF0dXMgdG8gdGhlIHNwYW4uXG4gICAqIEBwYXJhbSBjb2RlIFRoZSBjYW5vbmljYWwgc3RhdHVzIGNvZGUuXG4gICAqIEBwYXJhbSBtZXNzYWdlIG9wdGlvbmFsIEEgZGV2ZWxvcGVyLWZhY2luZyBlcnJvciBtZXNzYWdlLlxuICAgKi9cbiAgc2V0U3RhdHVzKGNvZGU6IHR5cGVzLkNhbm9uaWNhbENvZGUsIG1lc3NhZ2U/OiBzdHJpbmcpIHtcbiAgICB0aGlzLnN0YXR1cyA9IHsgY29kZSwgbWVzc2FnZSB9O1xuICB9XG5cbiAgLyoqIFN0YXJ0cyB0aGUgc3Bhbi4gKi9cbiAgc3RhcnQoKSB7XG4gICAgaWYgKHRoaXMuc3RhcnRlZCkge1xuICAgICAgdGhpcy5sb2dnZXIuZGVidWcoXG4gICAgICAgICdjYWxsaW5nICVzLnN0YXJ0KCkgb24gYWxyZWFkeSBzdGFydGVkICVzICVvJyxcbiAgICAgICAgdGhpcy5jbGFzc05hbWUsXG4gICAgICAgIHRoaXMuY2xhc3NOYW1lLFxuICAgICAgICB7IGlkOiB0aGlzLmlkLCBuYW1lOiB0aGlzLm5hbWUsIHR5cGU6IHRoaXMua2luZCB9XG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBzdGFydCBjaGlsZCBzcGFuJ3MgY2xvY2sgZnJvbSByb290J3MgY3VycmVudCB0aW1lIHRvIHByZXNlcnZlIGludGVncml0eS5cbiAgICBpZiAodGhpcy5wYXJlbnRTcGFuKSB7XG4gICAgICB0aGlzLmNsb2NrID0gbmV3IENsb2NrKHRoaXMucGFyZW50U3Bhbi5jbG9jay5jdXJyZW50RGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY2xvY2sgPSBuZXcgQ2xvY2soKTtcbiAgICB9XG4gICAgdGhpcy5zdGFydGVkTG9jYWwgPSB0cnVlO1xuICAgIHRoaXMubG9nZ2VyLmRlYnVnKCdzdGFydGluZyAlcyAgJW8nLCB0aGlzLmNsYXNzTmFtZSwge1xuICAgICAgdHJhY2VJZDogdGhpcy50cmFjZUlkLFxuICAgICAgaWQ6IHRoaXMuaWQsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICBwYXJlbnRTcGFuSWQ6IHRoaXMucGFyZW50U3BhbklkLFxuICAgICAgdHJhY2VTdGF0ZTogdGhpcy50cmFjZVN0YXRlLFxuICAgIH0pO1xuXG4gICAgaWYgKHRoaXMuaXNSb290U3BhbigpKSB0aGlzLnRyYWNlci5zZXRDdXJyZW50Um9vdFNwYW4odGhpcyk7XG4gICAgdGhpcy50cmFjZXIub25TdGFydFNwYW4odGhpcyk7XG4gIH1cblxuICAvKiogRW5kcyB0aGUgc3BhbiBhbmQgYWxsIG9mIGl0cyBjaGlsZHJlbiwgcmVjdXJzaXZlbHkuICovXG4gIGVuZCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5lbmRlZCkge1xuICAgICAgdGhpcy5sb2dnZXIuZGVidWcoXG4gICAgICAgICdjYWxsaW5nICVzLmVuZCgpIG9uIGFscmVhZHkgZW5kZWQgJXMgJW8nLFxuICAgICAgICB0aGlzLmNsYXNzTmFtZSxcbiAgICAgICAgdGhpcy5jbGFzc05hbWUsXG4gICAgICAgIHsgaWQ6IHRoaXMuaWQsIG5hbWU6IHRoaXMubmFtZSwgdHlwZTogdGhpcy5raW5kIH1cbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghdGhpcy5zdGFydGVkKSB7XG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcihcbiAgICAgICAgJ2NhbGxpbmcgJXMuZW5kKCkgb24gdW4tc3RhcnRlZCAlcyAlbycsXG4gICAgICAgIHRoaXMuY2xhc3NOYW1lLFxuICAgICAgICB0aGlzLmNsYXNzTmFtZSxcbiAgICAgICAgeyBpZDogdGhpcy5pZCwgbmFtZTogdGhpcy5uYW1lLCB0eXBlOiB0aGlzLmtpbmQgfVxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5zdGFydGVkTG9jYWwgPSBmYWxzZTtcbiAgICB0aGlzLmVuZGVkTG9jYWwgPSB0cnVlO1xuICAgIHRoaXMuY2xvY2suZW5kKCk7XG5cbiAgICAvLyBUT0RPOiBTaG91bGQgZW5kaW5nIGEgc3BhbiBmb3JjZSBpdHMgY2hpbGRyZW4gdG8gZW5kIGJ5IGRlZmF1bHQ/XG4gICAgLy8gSXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuLXRlbGVtZXRyeS9vcGVudGVsZW1ldHJ5LW5vZGUvaXNzdWVzLzRcbiAgICBmb3IgKGNvbnN0IHNwYW4gb2YgdGhpcy5zcGFuc0xvY2FsKSB7XG4gICAgICBpZiAoIXNwYW4uZW5kZWQgJiYgc3Bhbi5zdGFydGVkKSB7XG4gICAgICAgIHNwYW4udHJ1bmNhdGUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnRyYWNlci5vbkVuZFNwYW4odGhpcyk7XG4gIH1cblxuICAvKiogRm9yY2VzIHRoZSBzcGFuIHRvIGVuZC4gKi9cbiAgdHJ1bmNhdGUoKSB7XG4gICAgdGhpcy5lbmQoKTtcbiAgICB0aGlzLmxvZ2dlci5kZWJ1ZygndHJ1bmNhdGluZyAlcyAgJW8nLCB0aGlzLmNsYXNzTmFtZSwge1xuICAgICAgaWQ6IHRoaXMuaWQsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU3RhcnRzIGEgbmV3IGNoaWxkIHNwYW4uXG4gICAqIEBwYXJhbSBbb3B0aW9uc10gQSBTcGFuT3B0aW9ucyBvYmplY3QgdG8gc3RhcnQgYSBjaGlsZCBzcGFuLlxuICAgKi9cbiAgc3RhcnRDaGlsZFNwYW4ob3B0aW9ucz86IHR5cGVzLlNwYW5PcHRpb25zKTogdHlwZXMuU3BhbiB7XG4gICAgaWYgKHRoaXMuZW5kZWQpIHtcbiAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKFxuICAgICAgICAnY2FsbGluZyAlcy5zdGFydFNwYW4oKSBvbiBlbmRlZCAlcyAlbycsXG4gICAgICAgIHRoaXMuY2xhc3NOYW1lLFxuICAgICAgICB0aGlzLmNsYXNzTmFtZSxcbiAgICAgICAgeyBpZDogdGhpcy5pZCwgbmFtZTogdGhpcy5uYW1lLCBraW5kOiB0aGlzLmtpbmQgfVxuICAgICAgKTtcbiAgICAgIHJldHVybiBuZXcgTm9SZWNvcmRTcGFuKHRoaXMudHJhY2VyKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLnN0YXJ0ZWQpIHtcbiAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKFxuICAgICAgICAnY2FsbGluZyAlcy5zdGFydFNwYW4oKSBvbiB1bi1zdGFydGVkICVzICVvJyxcbiAgICAgICAgdGhpcy5jbGFzc05hbWUsXG4gICAgICAgIHRoaXMuY2xhc3NOYW1lLFxuICAgICAgICB7IGlkOiB0aGlzLmlkLCBuYW1lOiB0aGlzLm5hbWUsIGtpbmQ6IHRoaXMua2luZCB9XG4gICAgICApO1xuICAgICAgcmV0dXJuIG5ldyBOb1JlY29yZFNwYW4odGhpcy50cmFjZXIpO1xuICAgIH1cblxuICAgIGNvbnN0IGNoaWxkID0gbmV3IFNwYW4odGhpcy50cmFjZXIsIHRoaXMpO1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMubmFtZSkgY2hpbGQubmFtZSA9IG9wdGlvbnMubmFtZTtcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmtpbmQpIGNoaWxkLmtpbmQgPSBvcHRpb25zLmtpbmQ7XG5cbiAgICBjaGlsZC5zdGFydCgpO1xuICAgIHRoaXMuc3BhbnNMb2NhbC5wdXNoKGNoaWxkKTtcbiAgICByZXR1cm4gY2hpbGQ7XG4gIH1cbn1cbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,