"use strict";/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_1q7sar1i9u(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/recorder.ts";var hash="ad734dd2ecc84f9eaedb4d17e68d41d662adab2e";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/recorder.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:0},end:{line:18,column:26}},"2":{start:{line:19,column:16},end:{line:19,column:34}},"3":{start:{line:20,column:26},end:{line:20,column:30}},"4":{start:{line:23,column:8},end:{line:23,column:47}},"5":{start:{line:24,column:22},end:{line:26,column:43}},"6":{start:{line:27,column:8},end:{line:36,column:9}},"7":{start:{line:29,column:16},end:{line:29,column:83}},"8":{start:{line:31,column:16},end:{line:31,column:61}},"9":{start:{line:33,column:16},end:{line:33,column:63}},"10":{start:{line:35,column:16},end:{line:35,column:67}},"11":{start:{line:40,column:8},end:{line:41,column:76}},"12":{start:{line:40,column:37},end:{line:41,column:74}},"13":{start:{line:44,column:8},end:{line:44,column:36}},"14":{start:{line:45,column:26},end:{line:45,column:86}},"15":{start:{line:45,column:71},end:{line:45,column:85}},"16":{start:{line:46,column:8},end:{line:48,column:9}},"17":{start:{line:47,column:12},end:{line:47,column:58}},"18":{start:{line:49,column:8},end:{line:52,column:9}},"19":{start:{line:51,column:12},end:{line:51,column:60}},"20":{start:{line:53,column:8},end:{line:55,column:9}},"21":{start:{line:54,column:12},end:{line:54,column:42}},"22":{start:{line:56,column:8},end:{line:56,column:38}},"23":{start:{line:57,column:24},end:{line:57,column:45}},"24":{start:{line:58,column:8},end:{line:60,column:73}},"25":{start:{line:61,column:8},end:{line:63,column:68}},"26":{start:{line:64,column:8},end:{line:64,column:115}},"27":{start:{line:67,column:8},end:{line:75,column:9}},"28":{start:{line:70,column:12},end:{line:74,column:14}},"29":{start:{line:76,column:8},end:{line:76,column:32}},"30":{start:{line:79,column:8},end:{line:79,column:31}},"31":{start:{line:80,column:8},end:{line:80,column:23}},"32":{start:{line:83,column:8},end:{line:83,column:29}},"33":{start:{line:84,column:8},end:{line:84,column:25}},"34":{start:{line:87,column:8},end:{line:87,column:36}},"35":{start:{line:88,column:8},end:{line:88,column:29}},"36":{start:{line:91,column:0},end:{line:91,column:28}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:22,column:4},end:{line:22,column:5}},loc:{start:{line:22,column:69},end:{line:37,column:5}},line:22},"1":{name:"(anonymous_1)",decl:{start:{line:39,column:4},end:{line:39,column:5}},loc:{start:{line:39,column:39},end:{line:42,column:5}},line:39},"2":{name:"(anonymous_2)",decl:{start:{line:40,column:27},end:{line:40,column:28}},loc:{start:{line:40,column:37},end:{line:41,column:74}},line:40},"3":{name:"(anonymous_3)",decl:{start:{line:43,column:4},end:{line:43,column:5}},loc:{start:{line:43,column:67},end:{line:77,column:5}},line:43},"4":{name:"(anonymous_4)",decl:{start:{line:45,column:61},end:{line:45,column:62}},loc:{start:{line:45,column:71},end:{line:45,column:85}},line:45},"5":{name:"(anonymous_5)",decl:{start:{line:78,column:4},end:{line:78,column:5}},loc:{start:{line:78,column:36},end:{line:81,column:5}},line:78},"6":{name:"(anonymous_6)",decl:{start:{line:82,column:4},end:{line:82,column:5}},loc:{start:{line:82,column:40},end:{line:85,column:5}},line:82},"7":{name:"(anonymous_7)",decl:{start:{line:86,column:4},end:{line:86,column:5}},loc:{start:{line:86,column:48},end:{line:89,column:5}},line:86}},branchMap:{"0":{loc:{start:{line:24,column:22},end:{line:26,column:43}},type:"cond-expr",locations:[{start:{line:25,column:14},end:{line:25,column:31}},{start:{line:26,column:14},end:{line:26,column:43}}],line:24},"1":{loc:{start:{line:27,column:8},end:{line:36,column:9}},type:"switch",locations:[{start:{line:28,column:12},end:{line:29,column:83}},{start:{line:30,column:12},end:{line:31,column:61}},{start:{line:32,column:12},end:{line:33,column:63}},{start:{line:34,column:12},end:{line:35,column:67}}],line:27},"2":{loc:{start:{line:40,column:37},end:{line:41,column:74}},type:"binary-expr",locations:[{start:{line:40,column:37},end:{line:40,column:53}},{start:{line:41,column:57},end:{line:41,column:74}}],line:40},"3":{loc:{start:{line:46,column:8},end:{line:48,column:9}},type:"if",locations:[{start:{line:46,column:8},end:{line:48,column:9}},{start:{line:46,column:8},end:{line:48,column:9}}],line:46},"4":{loc:{start:{line:49,column:8},end:{line:52,column:9}},type:"if",locations:[{start:{line:49,column:8},end:{line:52,column:9}},{start:{line:49,column:8},end:{line:52,column:9}}],line:49},"5":{loc:{start:{line:49,column:12},end:{line:50,column:62}},type:"binary-expr",locations:[{start:{line:49,column:12},end:{line:49,column:41}},{start:{line:50,column:12},end:{line:50,column:62}}],line:49},"6":{loc:{start:{line:53,column:8},end:{line:55,column:9}},type:"if",locations:[{start:{line:53,column:8},end:{line:55,column:9}},{start:{line:53,column:8},end:{line:55,column:9}}],line:53},"7":{loc:{start:{line:67,column:8},end:{line:75,column:9}},type:"if",locations:[{start:{line:67,column:8},end:{line:75,column:9}},{start:{line:67,column:8},end:{line:75,column:9}}],line:67},"8":{loc:{start:{line:67,column:12},end:{line:69,column:59}},type:"binary-expr",locations:[{start:{line:67,column:12},end:{line:67,column:23}},{start:{line:68,column:12},end:{line:68,column:38}},{start:{line:69,column:12},end:{line:69,column:59}}],line:67}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},b:{"0":[0,0],"1":[0,0,0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0,0]},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/recorder.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/recorder.ts"],names:[],mappings:"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",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TagKey, TagValue } from '../tags/types';\nimport {\n  AggregationData,\n  AggregationType,\n  CountData,\n  DistributionData,\n  LastValueData,\n  Measurement,\n  MeasureType,\n  SumData,\n} from './types';\n\nconst UNKNOWN_TAG_VALUE: TagValue | null = null;\n\nexport class Recorder {\n  static addMeasurement(\n    aggregationData: AggregationData,\n    measurement: Measurement,\n    attachments?: { [key: string]: string }\n  ): AggregationData {\n    aggregationData.timestamp = Date.now();\n    const value =\n      measurement.measure.type === MeasureType.DOUBLE\n        ? measurement.value\n        : Math.trunc(measurement.value);\n\n    switch (aggregationData.type) {\n      case AggregationType.DISTRIBUTION:\n        return this.addToDistribution(aggregationData, value, attachments);\n\n      case AggregationType.SUM:\n        return this.addToSum(aggregationData, value);\n\n      case AggregationType.COUNT:\n        return this.addToCount(aggregationData, value);\n\n      default:\n        return this.addToLastValue(aggregationData, value);\n    }\n  }\n\n  /** Gets the tag values from tags and columns */\n  static getTagValues(\n    tags: Map<TagKey, TagValue>,\n    columns: TagKey[]\n  ): Array<TagValue | null> {\n    return columns.map(\n      tagKey =>\n        tags.get(tagKey) ||\n        /** replace not found key values by null. */ UNKNOWN_TAG_VALUE\n    );\n  }\n\n  private static addToDistribution(\n    distributionData: DistributionData,\n    value: number,\n    attachments?: { [key: string]: string }\n  ): DistributionData {\n    distributionData.count += 1;\n\n    let bucketIndex = distributionData.buckets.findIndex(\n      bucket => bucket > value\n    );\n\n    if (bucketIndex < 0) {\n      bucketIndex = distributionData.buckets.length;\n    }\n\n    if (\n      distributionData.bucketCounts &&\n      distributionData.bucketCounts.length > bucketIndex\n    ) {\n      distributionData.bucketCounts[bucketIndex] += 1;\n    }\n\n    if (distributionData.count === 1) {\n      distributionData.mean = value;\n    }\n\n    distributionData.sum += value;\n\n    const oldMean = distributionData.mean;\n    distributionData.mean =\n      distributionData.mean +\n      (value - distributionData.mean) / distributionData.count;\n    distributionData.sumOfSquaredDeviation =\n      distributionData.sumOfSquaredDeviation +\n      (value - oldMean) * (value - distributionData.mean);\n    distributionData.stdDeviation = Math.sqrt(\n      distributionData.sumOfSquaredDeviation / distributionData.count\n    );\n\n    // No implicit recording for exemplars - if there are no attachments\n    // (contextual information), don't record exemplars.\n    if (\n      attachments &&\n      distributionData.exemplars &&\n      distributionData.exemplars.length > bucketIndex\n    ) {\n      distributionData.exemplars[bucketIndex] = {\n        value,\n        timestamp: distributionData.timestamp,\n        attachments,\n      };\n    }\n    return distributionData;\n  }\n\n  private static addToSum(sumData: SumData, value: number): SumData {\n    sumData.value += value;\n    return sumData;\n  }\n\n  private static addToCount(countData: CountData, value: number): CountData {\n    countData.value += 1;\n    return countData;\n  }\n\n  private static addToLastValue(\n    lastValueData: LastValueData,\n    value: number\n  ): LastValueData {\n    lastValueData.value = value;\n    return lastValueData;\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"ad734dd2ecc84f9eaedb4d17e68d41d662adab2e"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1q7sar1i9u=function(){return actualCoverage;};}return actualCoverage;}cov_1q7sar1i9u();cov_1q7sar1i9u().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_1q7sar1i9u().s[1]++;exports.Recorder=void 0;const types_1=(cov_1q7sar1i9u().s[2]++,require("./types"));const UNKNOWN_TAG_VALUE=(cov_1q7sar1i9u().s[3]++,null);class Recorder{static addMeasurement(aggregationData,measurement,attachments){cov_1q7sar1i9u().f[0]++;cov_1q7sar1i9u().s[4]++;aggregationData.timestamp=Date.now();const value=(cov_1q7sar1i9u().s[5]++,measurement.measure.type===types_1.MeasureType.DOUBLE?(cov_1q7sar1i9u().b[0][0]++,measurement.value):(cov_1q7sar1i9u().b[0][1]++,Math.trunc(measurement.value)));cov_1q7sar1i9u().s[6]++;switch(aggregationData.type){case types_1.AggregationType.DISTRIBUTION:cov_1q7sar1i9u().b[1][0]++;cov_1q7sar1i9u().s[7]++;return this.addToDistribution(aggregationData,value,attachments);case types_1.AggregationType.SUM:cov_1q7sar1i9u().b[1][1]++;cov_1q7sar1i9u().s[8]++;return this.addToSum(aggregationData,value);case types_1.AggregationType.COUNT:cov_1q7sar1i9u().b[1][2]++;cov_1q7sar1i9u().s[9]++;return this.addToCount(aggregationData,value);default:cov_1q7sar1i9u().b[1][3]++;cov_1q7sar1i9u().s[10]++;return this.addToLastValue(aggregationData,value);}}/** Gets the tag values from tags and columns */static getTagValues(tags,columns){cov_1q7sar1i9u().f[1]++;cov_1q7sar1i9u().s[11]++;return columns.map(tagKey=>{cov_1q7sar1i9u().f[2]++;cov_1q7sar1i9u().s[12]++;return(cov_1q7sar1i9u().b[2][0]++,tags.get(tagKey))||(cov_1q7sar1i9u().b[2][1]++,/** replace not found key values by null. */UNKNOWN_TAG_VALUE);});}static addToDistribution(distributionData,value,attachments){cov_1q7sar1i9u().f[3]++;cov_1q7sar1i9u().s[13]++;distributionData.count+=1;let bucketIndex=(cov_1q7sar1i9u().s[14]++,distributionData.buckets.findIndex(bucket=>{cov_1q7sar1i9u().f[4]++;cov_1q7sar1i9u().s[15]++;return bucket>value;}));cov_1q7sar1i9u().s[16]++;if(bucketIndex<0){cov_1q7sar1i9u().b[3][0]++;cov_1q7sar1i9u().s[17]++;bucketIndex=distributionData.buckets.length;}else{cov_1q7sar1i9u().b[3][1]++;}cov_1q7sar1i9u().s[18]++;if((cov_1q7sar1i9u().b[5][0]++,distributionData.bucketCounts)&&(cov_1q7sar1i9u().b[5][1]++,distributionData.bucketCounts.length>bucketIndex)){cov_1q7sar1i9u().b[4][0]++;cov_1q7sar1i9u().s[19]++;distributionData.bucketCounts[bucketIndex]+=1;}else{cov_1q7sar1i9u().b[4][1]++;}cov_1q7sar1i9u().s[20]++;if(distributionData.count===1){cov_1q7sar1i9u().b[6][0]++;cov_1q7sar1i9u().s[21]++;distributionData.mean=value;}else{cov_1q7sar1i9u().b[6][1]++;}cov_1q7sar1i9u().s[22]++;distributionData.sum+=value;const oldMean=(cov_1q7sar1i9u().s[23]++,distributionData.mean);cov_1q7sar1i9u().s[24]++;distributionData.mean=distributionData.mean+(value-distributionData.mean)/distributionData.count;cov_1q7sar1i9u().s[25]++;distributionData.sumOfSquaredDeviation=distributionData.sumOfSquaredDeviation+(value-oldMean)*(value-distributionData.mean);cov_1q7sar1i9u().s[26]++;distributionData.stdDeviation=Math.sqrt(distributionData.sumOfSquaredDeviation/distributionData.count);// No implicit recording for exemplars - if there are no attachments
// (contextual information), don't record exemplars.
cov_1q7sar1i9u().s[27]++;if((cov_1q7sar1i9u().b[8][0]++,attachments)&&(cov_1q7sar1i9u().b[8][1]++,distributionData.exemplars)&&(cov_1q7sar1i9u().b[8][2]++,distributionData.exemplars.length>bucketIndex)){cov_1q7sar1i9u().b[7][0]++;cov_1q7sar1i9u().s[28]++;distributionData.exemplars[bucketIndex]={value,timestamp:distributionData.timestamp,attachments};}else{cov_1q7sar1i9u().b[7][1]++;}cov_1q7sar1i9u().s[29]++;return distributionData;}static addToSum(sumData,value){cov_1q7sar1i9u().f[5]++;cov_1q7sar1i9u().s[30]++;sumData.value+=value;cov_1q7sar1i9u().s[31]++;return sumData;}static addToCount(countData,value){cov_1q7sar1i9u().f[6]++;cov_1q7sar1i9u().s[32]++;countData.value+=1;cov_1q7sar1i9u().s[33]++;return countData;}static addToLastValue(lastValueData,value){cov_1q7sar1i9u().f[7]++;cov_1q7sar1i9u().s[34]++;lastValueData.value=value;cov_1q7sar1i9u().s[35]++;return lastValueData;}}cov_1q7sar1i9u().s[36]++;exports.Recorder=Recorder;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3VzZXJtYWl0aGEvdHJhZGVtYXN0ZXIvbGlicy9saWItZXh0ZXJuYWwtb3BlbmNlbnN1cy1ub2RlL3NyYy9zdGF0cy9yZWNvcmRlci50cyIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXJtYWl0aGEvdHJhZGVtYXN0ZXIvbGlicy9saWItZXh0ZXJuYWwtb3BlbmNlbnN1cy1ub2RlL3NyYy9zdGF0cy9yZWNvcmRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7O0dBY0c7OztBQUdILG1DQVNpQjtBQUVqQixNQUFNLGlCQUFpQixHQUFvQixJQUFJLENBQUM7QUFFaEQsTUFBYSxRQUFRO0lBQ25CLE1BQU0sQ0FBQyxjQUFjLENBQ25CLGVBQWdDLEVBQ2hDLFdBQXdCLEVBQ3hCLFdBQXVDO1FBRXZDLGVBQWUsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ3ZDLE1BQU0sS0FBSyxHQUNULFdBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLG1CQUFXLENBQUMsTUFBTTtZQUM3QyxDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUs7WUFDbkIsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRXBDLFFBQVEsZUFBZSxDQUFDLElBQUksRUFBRTtZQUM1QixLQUFLLHVCQUFlLENBQUMsWUFBWTtnQkFDL0IsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsZUFBZSxFQUFFLEtBQUssRUFBRSxXQUFXLENBQUMsQ0FBQztZQUVyRSxLQUFLLHVCQUFlLENBQUMsR0FBRztnQkFDdEIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUUvQyxLQUFLLHVCQUFlLENBQUMsS0FBSztnQkFDeEIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUVqRDtnQkFDRSxPQUFPLElB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ICogQ29weXJpZ2h0IDIwMTgsIE9wZW5DZW5zdXMgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgVGFnS2V5LCBUYWdWYWx1ZSB9IGZyb20gJy4uL3RhZ3MvdHlwZXMnO1xuaW1wb3J0IHtcbiAgQWdncmVnYXRpb25EYXRhLFxuICBBZ2dyZWdhdGlvblR5cGUsXG4gIENvdW50RGF0YSxcbiAgRGlzdHJpYnV0aW9uRGF0YSxcbiAgTGFzdFZhbHVlRGF0YSxcbiAgTWVhc3VyZW1lbnQsXG4gIE1lYXN1cmVUeXBlLFxuICBTdW1EYXRhLFxufSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgVU5LTk9XTl9UQUdfVkFMVUU6IFRhZ1ZhbHVlIHwgbnVsbCA9IG51bGw7XG5cbmV4cG9ydCBjbGFzcyBSZWNvcmRlciB7XG4gIHN0YXRpYyBhZGRNZWFzdXJlbWVudChcbiAgICBhZ2dyZWdhdGlvbkRhdGE6IEFnZ3JlZ2F0aW9uRGF0YSxcbiAgICBtZWFzdXJlbWVudDogTWVhc3VyZW1lbnQsXG4gICAgYXR0YWNobWVudHM/OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9XG4gICk6IEFnZ3JlZ2F0aW9uRGF0YSB7XG4gICAgYWdncmVnYXRpb25EYXRhLnRpbWVzdGFtcCA9IERhdGUubm93KCk7XG4gICAgY29uc3QgdmFsdWUgPVxuICAgICAgbWVhc3VyZW1lbnQubWVhc3VyZS50eXBlID09PSBNZWFzdXJlVHlwZS5ET1VCTEVcbiAgICAgICAgPyBtZWFzdXJlbWVudC52YWx1ZVxuICAgICAgICA6IE1hdGgudHJ1bmMobWVhc3VyZW1lbnQudmFsdWUpO1xuXG4gICAgc3dpdGNoIChhZ2dyZWdhdGlvbkRhdGEudHlwZSkge1xuICAgICAgY2FzZSBBZ2dyZWdhdGlvblR5cGUuRElTVFJJQlVUSU9OOlxuICAgICAgICByZXR1cm4gdGhpcy5hZGRUb0Rpc3RyaWJ1dGlvbihhZ2dyZWdhdGlvbkRhdGEsIHZhbHVlLCBhdHRhY2htZW50cyk7XG5cbiAgICAgIGNhc2UgQWdncmVnYXRpb25UeXBlLlNVTTpcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkVG9TdW0oYWdncmVnYXRpb25EYXRhLCB2YWx1ZSk7XG5cbiAgICAgIGNhc2UgQWdncmVnYXRpb25UeXBlLkNPVU5UOlxuICAgICAgICByZXR1cm4gdGhpcy5hZGRUb0NvdW50KGFnZ3JlZ2F0aW9uRGF0YSwgdmFsdWUpO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gdGhpcy5hZGRUb0xhc3RWYWx1ZShhZ2dyZWdhdGlvbkRhdGEsIHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICAvKiogR2V0cyB0aGUgdGFnIHZhbHVlcyBmcm9tIHRhZ3MgYW5kIGNvbHVtbnMgKi9cbiAgc3RhdGljIGdldFRhZ1ZhbHVlcyhcbiAgICB0YWdzOiBNYXA8VGFnS2V5LCBUYWdWYWx1ZT4sXG4gICAgY29sdW1uczogVGFnS2V5W11cbiAgKTogQXJyYXk8VGFnVmFsdWUgfCBudWxsPiB7XG4gICAgcmV0dXJuIGNvbHVtbnMubWFwKFxuICAgICAgdGFnS2V5ID0+XG4gICAgICAgIHRhZ3MuZ2V0KHRhZ0tleSkgfHxcbiAgICAgICAgLyoqIHJlcGxhY2Ugbm90IGZvdW5kIGtleSB2YWx1ZXMgYnkgbnVsbC4gKi8gVU5LTk9XTl9UQUdfVkFMVUVcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgYWRkVG9EaXN0cmlidXRpb24oXG4gICAgZGlzdHJpYnV0aW9uRGF0YTogRGlzdHJpYnV0aW9uRGF0YSxcbiAgICB2YWx1ZTogbnVtYmVyLFxuICAgIGF0dGFjaG1lbnRzPzogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfVxuICApOiBEaXN0cmlidXRpb25EYXRhIHtcbiAgICBkaXN0cmlidXRpb25EYXRhLmNvdW50ICs9IDE7XG5cbiAgICBsZXQgYnVja2V0SW5kZXggPSBkaXN0cmlidXRpb25EYXRhLmJ1Y2tldHMuZmluZEluZGV4KFxuICAgICAgYnVja2V0ID0+IGJ1Y2tldCA+IHZhbHVlXG4gICAgKTtcblxuICAgIGlmIChidWNrZXRJbmRleCA8IDApIHtcbiAgICAgIGJ1Y2tldEluZGV4ID0gZGlzdHJpYnV0aW9uRGF0YS5idWNrZXRzLmxlbmd0aDtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBkaXN0cmlidXRpb25EYXRhLmJ1Y2tldENvdW50cyAmJlxuICAgICAgZGlzdHJpYnV0aW9uRGF0YS5idWNrZXRDb3VudHMubGVuZ3RoID4gYnVja2V0SW5kZXhcbiAgICApIHtcbiAgICAgIGRpc3RyaWJ1dGlvbkRhdGEuYnVja2V0Q291bnRzW2J1Y2tldEluZGV4XSArPSAxO1xuICAgIH1cblxuICAgIGlmIChkaXN0cmlidXRpb25EYXRhLmNvdW50ID09PSAxKSB7XG4gICAgICBkaXN0cmlidXRpb25EYXRhLm1lYW4gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBkaXN0cmlidXRpb25EYXRhLnN1bSArPSB2YWx1ZTtcblxuICAgIGNvbnN0IG9sZE1lYW4gPSBkaXN0cmlidXRpb25EYXRhLm1lYW47XG4gICAgZGlzdHJpYnV0aW9uRGF0YS5tZWFuID1cbiAgICAgIGRpc3RyaWJ1dGlvbkRhdGEubWVhbiArXG4gICAgICAodmFsdWUgLSBkaXN0cmlidXRpb25EYXRhLm1lYW4pIC8gZGlzdHJpYnV0aW9uRGF0YS5jb3VudDtcbiAgICBkaXN0cmlidXRpb25EYXRhLnN1bU9mU3F1YXJlZERldmlhdGlvbiA9XG4gICAgICBkaXN0cmlidXRpb25EYXRhLnN1bU9mU3F1YXJlZERldmlhdGlvbiArXG4gICAgICAodmFsdWUgLSBvbGRNZWFuKSAqICh2YWx1ZSAtIGRpc3RyaWJ1dGlvbkRhdGEubWVhbik7XG4gICAgZGlzdHJpYnV0aW9uRGF0YS5zdGREZXZpYXRpb24gPSBNYXRoLnNxcnQoXG4gICAgICBkaXN0cmlidXRpb25EYXRhLnN1bU9mU3F1YXJlZERldmlhdGlvbiAvIGRpc3RyaWJ1dGlvbkRhdGEuY291bnRcbiAgICApO1xuXG4gICAgLy8gTm8gaW1wbGljaXQgcmVjb3JkaW5nIGZvciBleGVtcGxhcnMgLSBpZiB0aGVyZSBhcmUgbm8gYXR0YWNobWVudHNcbiAgICAvLyAoY29udGV4dHVhbCBpbmZvcm1hdGlvbiksIGRvbid0IHJlY29yZCBleGVtcGxhcnMuXG4gICAgaWYgKFxuICAgICAgYXR0YWNobWVudHMgJiZcbiAgICAgIGRpc3RyaWJ1dGlvbkRhdGEuZXhlbXBsYXJzICYmXG4gICAgICBkaXN0cmlidXRpb25EYXRhLmV4ZW1wbGFycy5sZW5ndGggPiBidWNrZXRJbmRleFxuICAgICkge1xuICAgICAgZGlzdHJpYnV0aW9uRGF0YS5leGVtcGxhcnNbYnVja2V0SW5kZXhdID0ge1xuICAgICAgICB2YWx1ZSxcbiAgICAgICAgdGltZXN0YW1wOiBkaXN0cmlidXRpb25EYXRhLnRpbWVzdGFtcCxcbiAgICAgICAgYXR0YWNobWVudHMsXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gZGlzdHJpYnV0aW9uRGF0YTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGFkZFRvU3VtKHN1bURhdGE6IFN1bURhdGEsIHZhbHVlOiBudW1iZXIpOiBTdW1EYXRhIHtcbiAgICBzdW1EYXRhLnZhbHVlICs9IHZhbHVlO1xuICAgIHJldHVybiBzdW1EYXRhO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgYWRkVG9Db3VudChjb3VudERhdGE6IENvdW50RGF0YSwgdmFsdWU6IG51bWJlcik6IENvdW50RGF0YSB7XG4gICAgY291bnREYXRhLnZhbHVlICs9IDE7XG4gICAgcmV0dXJuIGNvdW50RGF0YTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGFkZFRvTGFzdFZhbHVlKFxuICAgIGxhc3RWYWx1ZURhdGE6IExhc3RWYWx1ZURhdGEsXG4gICAgdmFsdWU6IG51bWJlclxuICApOiBMYXN0VmFsdWVEYXRhIHtcbiAgICBsYXN0VmFsdWVEYXRhLnZhbHVlID0gdmFsdWU7XG4gICAgcmV0dXJuIGxhc3RWYWx1ZURhdGE7XG4gIH1cbn1cbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,