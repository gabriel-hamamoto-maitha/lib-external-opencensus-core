{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/tracer.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/tracer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as cls from '../../internal/cls';\nimport { NoRecordSpan } from './no-record/no-record-span';\nimport { CoreTracerBase } from './tracer-base';\nimport * as types from './types';\n\n/**\n * This class represents a tracer with Continuation Local Storage (CLS).\n *\n * CLS helps keep tracking the root span over function calls automatically.\n * It is capable of storing, propagating and retrieving arbitrary\n * continuation-local data (also called \"context\").\n * CLS comes with some performance overhead, you can read more about it here:\n * https://github.com/othiym23/node-continuation-local-storage/issues/59\n */\nexport class CoreTracer extends CoreTracerBase implements types.Tracer {\n  /** Manage context automatic propagation */\n  private contextManager: cls.Namespace;\n\n  /** Constructs a new TraceImpl instance. */\n  constructor() {\n    super();\n    this.contextManager = cls.getNamespace();\n    this.clearCurrentTrace();\n  }\n\n  /** Gets the current root span. */\n  get currentRootSpan(): types.Span {\n    return this.contextManager.get('rootspan');\n  }\n\n  /** Sets the current root span. */\n  set currentRootSpan(root: types.Span) {\n    this.setCurrentRootSpan(root);\n  }\n\n  /** Sets the current root span. */\n  setCurrentRootSpan(root: types.Span) {\n    if (this.contextManager.active) {\n      this.contextManager.set('rootspan', root);\n    }\n  }\n\n  /**\n   * Starts a root span.\n   * @param options A TraceOptions object to start a root span.\n   * @param fn A callback function to run after starting a root span.\n   */\n  startRootSpan<T>(\n    options: types.TraceOptions,\n    fn: (root: types.Span) => T\n  ): T {\n    const self = this;\n    return self.contextManager.runAndReturn(() => {\n      return super.startRootSpan(options, root => {\n        return fn(root);\n      });\n    });\n  }\n\n  /** Notifies listeners of the span start. */\n  onStartSpan(span: types.Span): void {\n    if (!this.active) return;\n    if (\n      !this.currentRootSpan ||\n      this.currentRootSpan.traceId !== span.traceId\n    ) {\n      this.logger.debug(\n        'currentRootSpan != root on notifyStart. Need more investigation.'\n      );\n    }\n    return super.onStartSpan(span);\n  }\n\n  /** Notifies listeners of the span end. */\n  onEndSpan(span: types.Span): void {\n    if (!this.active) return;\n    if (\n      !this.currentRootSpan ||\n      this.currentRootSpan.traceId !== span.traceId\n    ) {\n      this.logger.debug(\n        'currentRootSpan != root on notifyEnd. Need more investigation.'\n      );\n    }\n    super.onEndSpan(span);\n  }\n\n  /** Clears the current root span. */\n  clearCurrentTrace() {\n    if (this.contextManager.active) {\n      this.contextManager.set('rootspan', null);\n    }\n  }\n\n  /**\n   * Starts a span.\n   * @param [options] A SpanOptions object to start a child span.\n   */\n  startChildSpan(options?: types.SpanOptions): types.Span {\n    if (!this.currentRootSpan) {\n      this.logger.debug(\n        'no current trace found - must start a new root span first'\n      );\n    }\n\n    return super.startChildSpan(\n      Object.assign(\n        { childOf: this.currentRootSpan || new NoRecordSpan(this) },\n        options\n      )\n    );\n  }\n\n  /**\n   * Binds the trace context to the given function.\n   * This is necessary in order to create child spans correctly in functions\n   * that are called asynchronously (for example, in a network response\n   * handler).\n   * @param fn A function to which to bind the trace context.\n   */\n  wrap<T>(fn: types.Func<T>): types.Func<T> {\n    if (!this.active) {\n      return fn;\n    }\n    const namespace = this.contextManager;\n    return namespace.bind<T>(fn);\n  }\n\n  /**\n   * Binds the trace context to the given event emitter.\n   * This is necessary in order to create child spans correctly in event\n   * handlers.\n   * @param emitter An event emitter whose handlers should have\n   *     the trace context binded to them.\n   */\n  wrapEmitter(emitter: NodeJS.EventEmitter): void {\n    if (!this.active) {\n      return;\n    }\n    const namespace = this.contextManager;\n    namespace.bindEmitter(emitter);\n  }\n}\n"]}