"use strict";/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_2j1kv8h05u(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/metric-registry.ts";var hash="b3d7a5046e8ec149ad8624a2acfe2082b98d473e";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/metric-registry.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:0},end:{line:18,column:32}},"2":{start:{line:19,column:20},end:{line:19,column:50}},"3":{start:{line:20,column:22},end:{line:20,column:54}},"4":{start:{line:21,column:16},end:{line:21,column:41}},"5":{start:{line:22,column:21},end:{line:22,column:55}},"6":{start:{line:23,column:29},end:{line:23,column:71}},"7":{start:{line:24,column:31},end:{line:24,column:71}},"8":{start:{line:25,column:16},end:{line:25,column:41}},"9":{start:{line:26,column:24},end:{line:26,column:57}},"10":{start:{line:27,column:16},end:{line:27,column:41}},"11":{start:{line:33,column:8},end:{line:33,column:43}},"12":{start:{line:34,column:8},end:{line:34,column:84}},"13":{start:{line:46,column:28},end:{line:46,column:98}},"14":{start:{line:47,column:21},end:{line:47,column:77}},"15":{start:{line:48,column:26},end:{line:48,column:93}},"16":{start:{line:49,column:31},end:{line:50,column:49}},"17":{start:{line:52,column:8},end:{line:52,column:55}},"18":{start:{line:53,column:30},end:{line:53,column:58}},"19":{start:{line:54,column:27},end:{line:54,column:194}},"20":{start:{line:55,column:8},end:{line:55,column:46}},"21":{start:{line:56,column:8},end:{line:56,column:26}},"22":{start:{line:68,column:28},end:{line:68,column:98}},"23":{start:{line:69,column:21},end:{line:69,column:77}},"24":{start:{line:70,column:26},end:{line:70,column:93}},"25":{start:{line:71,column:31},end:{line:72,column:49}},"26":{start:{line:74,column:8},end:{line:74,column:55}},"27":{start:{line:75,column:30},end:{line:75,column:58}},"28":{start:{line:76,column:28},end:{line:76,column:196}},"29":{start:{line:77,column:8},end:{line:77,column:47}},"30":{start:{line:78,column:8},end:{line:78,column:27}},"31":{start:{line:90,column:28},end:{line:90,column:98}},"32":{start:{line:91,column:21},end:{line:91,column:77}},"33":{start:{line:92,column:26},end:{line:92,column:93}},"34":{start:{line:93,column:31},end:{line:94,column:49}},"35":{start:{line:96,column:8},end:{line:96,column:55}},"36":{start:{line:97,column:30},end:{line:97,column:58}},"37":{start:{line:98,column:34},end:{line:98,column:216}},"38":{start:{line:99,column:8},end:{line:99,column:53}},"39":{start:{line:100,column:8},end:{line:100,column:33}},"40":{start:{line:112,column:28},end:{line:112,column:98}},"41":{start:{line:113,column:21},end:{line:113,column:77}},"42":{start:{line:114,column:26},end:{line:114,column:93}},"43":{start:{line:115,column:31},end:{line:116,column:49}},"44":{start:{line:118,column:8},end:{line:118,column:55}},"45":{start:{line:119,column:30},end:{line:119,column:58}},"46":{start:{line:120,column:35},end:{line:120,column:218}},"47":{start:{line:121,column:8},end:{line:121,column:54}},"48":{start:{line:122,column:8},end:{line:122,column:34}},"49":{start:{line:134,column:28},end:{line:134,column:98}},"50":{start:{line:135,column:21},end:{line:135,column:77}},"51":{start:{line:136,column:26},end:{line:136,column:93}},"52":{start:{line:137,column:31},end:{line:138,column:49}},"53":{start:{line:140,column:8},end:{line:140,column:55}},"54":{start:{line:141,column:30},end:{line:141,column:58}},"55":{start:{line:142,column:32},end:{line:142,column:214}},"56":{start:{line:143,column:8},end:{line:143,column:51}},"57":{start:{line:144,column:8},end:{line:144,column:31}},"58":{start:{line:156,column:28},end:{line:156,column:98}},"59":{start:{line:157,column:21},end:{line:157,column:77}},"60":{start:{line:158,column:26},end:{line:158,column:93}},"61":{start:{line:159,column:31},end:{line:160,column:49}},"62":{start:{line:162,column:8},end:{line:162,column:55}},"63":{start:{line:163,column:30},end:{line:163,column:58}},"64":{start:{line:164,column:33},end:{line:164,column:216}},"65":{start:{line:165,column:8},end:{line:165,column:52}},"66":{start:{line:166,column:8},end:{line:166,column:32}},"67":{start:{line:176,column:28},end:{line:176,column:98}},"68":{start:{line:177,column:21},end:{line:177,column:77}},"69":{start:{line:178,column:26},end:{line:178,column:93}},"70":{start:{line:179,column:31},end:{line:180,column:49}},"71":{start:{line:182,column:8},end:{line:182,column:55}},"72":{start:{line:183,column:30},end:{line:183,column:58}},"73":{start:{line:184,column:26},end:{line:184,column:69}},"74":{start:{line:185,column:39},end:{line:185,column:247}},"75":{start:{line:186,column:8},end:{line:186,column:58}},"76":{start:{line:187,column:8},end:{line:187,column:38}},"77":{start:{line:197,column:28},end:{line:197,column:98}},"78":{start:{line:198,column:21},end:{line:198,column:77}},"79":{start:{line:199,column:26},end:{line:199,column:93}},"80":{start:{line:200,column:31},end:{line:201,column:49}},"81":{start:{line:203,column:8},end:{line:203,column:55}},"82":{start:{line:204,column:30},end:{line:204,column:58}},"83":{start:{line:205,column:26},end:{line:205,column:69}},"84":{start:{line:206,column:40},end:{line:206,column:249}},"85":{start:{line:207,column:8},end:{line:207,column:59}},"86":{start:{line:208,column:8},end:{line:208,column:39}},"87":{start:{line:217,column:8},end:{line:219,column:9}},"88":{start:{line:218,column:12},end:{line:218,column:91}},"89":{start:{line:220,column:8},end:{line:220,column:48}},"90":{start:{line:228,column:8},end:{line:228,column:35}},"91":{start:{line:232,column:8},end:{line:232,column:88}},"92":{start:{line:233,column:8},end:{line:233,column:96}},"93":{start:{line:234,column:8},end:{line:234,column:71}},"94":{start:{line:237,column:0},end:{line:237,column:40}},"95":{start:{line:238,column:0},end:{line:238,column:29}},"96":{start:{line:239,column:0},end:{line:239,column:38}},"97":{start:{line:240,column:0},end:{line:240,column:50}},"98":{start:{line:241,column:0},end:{line:241,column:40}},"99":{start:{line:242,column:0},end:{line:242,column:55}},"100":{start:{line:243,column:0},end:{line:243,column:39}},"101":{start:{line:244,column:0},end:{line:244,column:50}},"102":{start:{line:251,column:8},end:{line:251,column:16}},"103":{start:{line:252,column:8},end:{line:252,column:51}},"104":{start:{line:260,column:8},end:{line:262,column:38}},"105":{start:{line:261,column:26},end:{line:261,column:43}},"106":{start:{line:262,column:29},end:{line:262,column:36}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:32,column:4},end:{line:32,column:5}},loc:{start:{line:32,column:18},end:{line:35,column:5}},line:32},"1":{name:"(anonymous_1)",decl:{start:{line:45,column:4},end:{line:45,column:5}},loc:{start:{line:45,column:33},end:{line:57,column:5}},line:45},"2":{name:"(anonymous_2)",decl:{start:{line:67,column:4},end:{line:67,column:5}},loc:{start:{line:67,column:34},end:{line:79,column:5}},line:67},"3":{name:"(anonymous_3)",decl:{start:{line:89,column:4},end:{line:89,column:5}},loc:{start:{line:89,column:40},end:{line:101,column:5}},line:89},"4":{name:"(anonymous_4)",decl:{start:{line:111,column:4},end:{line:111,column:5}},loc:{start:{line:111,column:41},end:{line:123,column:5}},line:111},"5":{name:"(anonymous_5)",decl:{start:{line:133,column:4},end:{line:133,column:5}},loc:{start:{line:133,column:38},end:{line:145,column:5}},line:133},"6":{name:"(anonymous_6)",decl:{start:{line:155,column:4},end:{line:155,column:5}},loc:{start:{line:155,column:39},end:{line:167,column:5}},line:155},"7":{name:"(anonymous_7)",decl:{start:{line:175,column:4},end:{line:175,column:5}},loc:{start:{line:175,column:45},end:{line:188,column:5}},line:175},"8":{name:"(anonymous_8)",decl:{start:{line:196,column:4},end:{line:196,column:5}},loc:{start:{line:196,column:46},end:{line:209,column:5}},line:196},"9":{name:"(anonymous_9)",decl:{start:{line:216,column:4},end:{line:216,column:5}},loc:{start:{line:216,column:32},end:{line:221,column:5}},line:216},"10":{name:"(anonymous_10)",decl:{start:{line:227,column:4},end:{line:227,column:5}},loc:{start:{line:227,column:24},end:{line:229,column:5}},line:227},"11":{name:"(anonymous_11)",decl:{start:{line:231,column:4},end:{line:231,column:5}},loc:{start:{line:231,column:46},end:{line:235,column:5}},line:231},"12":{name:"(anonymous_12)",decl:{start:{line:250,column:4},end:{line:250,column:5}},loc:{start:{line:250,column:35},end:{line:253,column:5}},line:250},"13":{name:"(anonymous_13)",decl:{start:{line:259,column:4},end:{line:259,column:5}},loc:{start:{line:259,column:17},end:{line:263,column:5}},line:259},"14":{name:"(anonymous_14)",decl:{start:{line:261,column:17},end:{line:261,column:18}},loc:{start:{line:261,column:26},end:{line:261,column:43}},line:261},"15":{name:"(anonymous_15)",decl:{start:{line:262,column:20},end:{line:262,column:21}},loc:{start:{line:262,column:29},end:{line:262,column:36}},line:262}},branchMap:{"0":{loc:{start:{line:46,column:28},end:{line:46,column:98}},type:"binary-expr",locations:[{start:{line:46,column:29},end:{line:46,column:36}},{start:{line:46,column:40},end:{line:46,column:59}},{start:{line:46,column:64},end:{line:46,column:98}}],line:46},"1":{loc:{start:{line:47,column:21},end:{line:47,column:77}},type:"binary-expr",locations:[{start:{line:47,column:22},end:{line:47,column:29}},{start:{line:47,column:33},end:{line:47,column:45}},{start:{line:47,column:50},end:{line:47,column:77}}],line:47},"2":{loc:{start:{line:48,column:26},end:{line:48,column:93}},type:"binary-expr",locations:[{start:{line:48,column:27},end:{line:48,column:34}},{start:{line:48,column:38},end:{line:48,column:55}},{start:{line:48,column:60},end:{line:48,column:93}}],line:48},"3":{loc:{start:{line:49,column:31},end:{line:50,column:49}},type:"binary-expr",locations:[{start:{line:49,column:32},end:{line:49,column:39}},{start:{line:49,column:43},end:{line:49,column:65}},{start:{line:50,column:12},end:{line:50,column:49}}],line:49},"4":{loc:{start:{line:68,column:28},end:{line:68,column:98}},type:"binary-expr",locations:[{start:{line:68,column:29},end:{line:68,column:36}},{start:{line:68,column:40},end:{line:68,column:59}},{start:{line:68,column:64},end:{line:68,column:98}}],line:68},"5":{loc:{start:{line:69,column:21},end:{line:69,column:77}},type:"binary-expr",locations:[{start:{line:69,column:22},end:{line:69,column:29}},{start:{line:69,column:33},end:{line:69,column:45}},{start:{line:69,column:50},end:{line:69,column:77}}],line:69},"6":{loc:{start:{line:70,column:26},end:{line:70,column:93}},type:"binary-expr",locations:[{start:{line:70,column:27},end:{line:70,column:34}},{start:{line:70,column:38},end:{line:70,column:55}},{start:{line:70,column:60},end:{line:70,column:93}}],line:70},"7":{loc:{start:{line:71,column:31},end:{line:72,column:49}},type:"binary-expr",locations:[{start:{line:71,column:32},end:{line:71,column:39}},{start:{line:71,column:43},end:{line:71,column:65}},{start:{line:72,column:12},end:{line:72,column:49}}],line:71},"8":{loc:{start:{line:90,column:28},end:{line:90,column:98}},type:"binary-expr",locations:[{start:{line:90,column:29},end:{line:90,column:36}},{start:{line:90,column:40},end:{line:90,column:59}},{start:{line:90,column:64},end:{line:90,column:98}}],line:90},"9":{loc:{start:{line:91,column:21},end:{line:91,column:77}},type:"binary-expr",locations:[{start:{line:91,column:22},end:{line:91,column:29}},{start:{line:91,column:33},end:{line:91,column:45}},{start:{line:91,column:50},end:{line:91,column:77}}],line:91},"10":{loc:{start:{line:92,column:26},end:{line:92,column:93}},type:"binary-expr",locations:[{start:{line:92,column:27},end:{line:92,column:34}},{start:{line:92,column:38},end:{line:92,column:55}},{start:{line:92,column:60},end:{line:92,column:93}}],line:92},"11":{loc:{start:{line:93,column:31},end:{line:94,column:49}},type:"binary-expr",locations:[{start:{line:93,column:32},end:{line:93,column:39}},{start:{line:93,column:43},end:{line:93,column:65}},{start:{line:94,column:12},end:{line:94,column:49}}],line:93},"12":{loc:{start:{line:112,column:28},end:{line:112,column:98}},type:"binary-expr",locations:[{start:{line:112,column:29},end:{line:112,column:36}},{start:{line:112,column:40},end:{line:112,column:59}},{start:{line:112,column:64},end:{line:112,column:98}}],line:112},"13":{loc:{start:{line:113,column:21},end:{line:113,column:77}},type:"binary-expr",locations:[{start:{line:113,column:22},end:{line:113,column:29}},{start:{line:113,column:33},end:{line:113,column:45}},{start:{line:113,column:50},end:{line:113,column:77}}],line:113},"14":{loc:{start:{line:114,column:26},end:{line:114,column:93}},type:"binary-expr",locations:[{start:{line:114,column:27},end:{line:114,column:34}},{start:{line:114,column:38},end:{line:114,column:55}},{start:{line:114,column:60},end:{line:114,column:93}}],line:114},"15":{loc:{start:{line:115,column:31},end:{line:116,column:49}},type:"binary-expr",locations:[{start:{line:115,column:32},end:{line:115,column:39}},{start:{line:115,column:43},end:{line:115,column:65}},{start:{line:116,column:12},end:{line:116,column:49}}],line:115},"16":{loc:{start:{line:134,column:28},end:{line:134,column:98}},type:"binary-expr",locations:[{start:{line:134,column:29},end:{line:134,column:36}},{start:{line:134,column:40},end:{line:134,column:59}},{start:{line:134,column:64},end:{line:134,column:98}}],line:134},"17":{loc:{start:{line:135,column:21},end:{line:135,column:77}},type:"binary-expr",locations:[{start:{line:135,column:22},end:{line:135,column:29}},{start:{line:135,column:33},end:{line:135,column:45}},{start:{line:135,column:50},end:{line:135,column:77}}],line:135},"18":{loc:{start:{line:136,column:26},end:{line:136,column:93}},type:"binary-expr",locations:[{start:{line:136,column:27},end:{line:136,column:34}},{start:{line:136,column:38},end:{line:136,column:55}},{start:{line:136,column:60},end:{line:136,column:93}}],line:136},"19":{loc:{start:{line:137,column:31},end:{line:138,column:49}},type:"binary-expr",locations:[{start:{line:137,column:32},end:{line:137,column:39}},{start:{line:137,column:43},end:{line:137,column:65}},{start:{line:138,column:12},end:{line:138,column:49}}],line:137},"20":{loc:{start:{line:156,column:28},end:{line:156,column:98}},type:"binary-expr",locations:[{start:{line:156,column:29},end:{line:156,column:36}},{start:{line:156,column:40},end:{line:156,column:59}},{start:{line:156,column:64},end:{line:156,column:98}}],line:156},"21":{loc:{start:{line:157,column:21},end:{line:157,column:77}},type:"binary-expr",locations:[{start:{line:157,column:22},end:{line:157,column:29}},{start:{line:157,column:33},end:{line:157,column:45}},{start:{line:157,column:50},end:{line:157,column:77}}],line:157},"22":{loc:{start:{line:158,column:26},end:{line:158,column:93}},type:"binary-expr",locations:[{start:{line:158,column:27},end:{line:158,column:34}},{start:{line:158,column:38},end:{line:158,column:55}},{start:{line:158,column:60},end:{line:158,column:93}}],line:158},"23":{loc:{start:{line:159,column:31},end:{line:160,column:49}},type:"binary-expr",locations:[{start:{line:159,column:32},end:{line:159,column:39}},{start:{line:159,column:43},end:{line:159,column:65}},{start:{line:160,column:12},end:{line:160,column:49}}],line:159},"24":{loc:{start:{line:176,column:28},end:{line:176,column:98}},type:"binary-expr",locations:[{start:{line:176,column:29},end:{line:176,column:36}},{start:{line:176,column:40},end:{line:176,column:59}},{start:{line:176,column:64},end:{line:176,column:98}}],line:176},"25":{loc:{start:{line:177,column:21},end:{line:177,column:77}},type:"binary-expr",locations:[{start:{line:177,column:22},end:{line:177,column:29}},{start:{line:177,column:33},end:{line:177,column:45}},{start:{line:177,column:50},end:{line:177,column:77}}],line:177},"26":{loc:{start:{line:178,column:26},end:{line:178,column:93}},type:"binary-expr",locations:[{start:{line:178,column:27},end:{line:178,column:34}},{start:{line:178,column:38},end:{line:178,column:55}},{start:{line:178,column:60},end:{line:178,column:93}}],line:178},"27":{loc:{start:{line:179,column:31},end:{line:180,column:49}},type:"binary-expr",locations:[{start:{line:179,column:32},end:{line:179,column:39}},{start:{line:179,column:43},end:{line:179,column:65}},{start:{line:180,column:12},end:{line:180,column:49}}],line:179},"28":{loc:{start:{line:197,column:28},end:{line:197,column:98}},type:"binary-expr",locations:[{start:{line:197,column:29},end:{line:197,column:36}},{start:{line:197,column:40},end:{line:197,column:59}},{start:{line:197,column:64},end:{line:197,column:98}}],line:197},"29":{loc:{start:{line:198,column:21},end:{line:198,column:77}},type:"binary-expr",locations:[{start:{line:198,column:22},end:{line:198,column:29}},{start:{line:198,column:33},end:{line:198,column:45}},{start:{line:198,column:50},end:{line:198,column:77}}],line:198},"30":{loc:{start:{line:199,column:26},end:{line:199,column:93}},type:"binary-expr",locations:[{start:{line:199,column:27},end:{line:199,column:34}},{start:{line:199,column:38},end:{line:199,column:55}},{start:{line:199,column:60},end:{line:199,column:93}}],line:199},"31":{loc:{start:{line:200,column:31},end:{line:201,column:49}},type:"binary-expr",locations:[{start:{line:200,column:32},end:{line:200,column:39}},{start:{line:200,column:43},end:{line:200,column:65}},{start:{line:201,column:12},end:{line:201,column:49}}],line:200},"32":{loc:{start:{line:217,column:8},end:{line:219,column:9}},type:"if",locations:[{start:{line:217,column:8},end:{line:219,column:9}},{start:{line:217,column:8},end:{line:219,column:9}}],line:217}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},b:{"0":[0,0,0],"1":[0,0,0],"2":[0,0,0],"3":[0,0,0],"4":[0,0,0],"5":[0,0,0],"6":[0,0,0],"7":[0,0,0],"8":[0,0,0],"9":[0,0,0],"10":[0,0,0],"11":[0,0,0],"12":[0,0,0],"13":[0,0,0],"14":[0,0,0],"15":[0,0,0],"16":[0,0,0],"17":[0,0,0],"18":[0,0,0],"19":[0,0,0],"20":[0,0,0],"21":[0,0,0],"22":[0,0,0],"23":[0,0,0],"24":[0,0,0],"25":[0,0,0],"26":[0,0,0],"27":[0,0,0],"28":[0,0,0],"29":[0,0,0],"30":[0,0,0],"31":[0,0,0],"32":[0,0]},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/metric-registry.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/metric-registry.ts"],names:[],mappings:"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",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getTimestampWithProcessHRTime } from '../common/time-util';\nimport {\n  validateArrayElementsNotNull,\n  validateDuplicateKeys,\n  validateMapElementNotNull,\n  validateNotNull,\n} from '../common/validations';\nimport { MeasureUnit } from '../stats/types';\nimport { Cumulative } from './cumulative/cumulative';\nimport { DerivedCumulative } from './cumulative/derived-cumulative';\nimport { BaseMetricProducer } from './export/base-metric-producer';\nimport {\n  LabelKey,\n  LabelValue,\n  Metric,\n  MetricDescriptorType,\n  MetricProducer,\n  Timestamp,\n} from './export/types';\nimport { DerivedGauge } from './gauges/derived-gauge';\nimport { Gauge } from './gauges/gauge';\nimport { Meter, MetricOptions } from './types';\n\n/**\n * Creates and manages application's set of metrics.\n */\nexport class MetricRegistry {\n  private registeredMetrics: Map<string, Meter> = new Map();\n  private metricProducer: MetricProducer;\n\n  private static readonly NAME = 'name';\n  private static readonly LABEL_KEY = 'labelKey';\n  private static readonly CONSTANT_LABELS = 'constantLabels';\n  private static readonly DEFAULT_DESCRIPTION = '';\n  private static readonly DEFAULT_UNIT = MeasureUnit.UNIT;\n  private static readonly DEFAULT_LABEL_KEYS = [];\n  private static readonly DEFAULT_CONSTANT_LABEL = new Map();\n\n  constructor() {\n    this.metricProducer = new MetricProducerForRegistry(this.registeredMetrics);\n  }\n\n  /**\n   * Builds a new Int64 gauge to be added to the registry. This is more\n   * convenient form when you want to manually increase and decrease values as\n   * per your service requirements.\n   *\n   * @param name The name of the metric.\n   * @param options The options for the metric.\n   * @returns A Int64 Gauge metric.\n   */\n  addInt64Gauge(name: string, options?: MetricOptions): Gauge {\n    const description =\n      (options && options.description) || MetricRegistry.DEFAULT_DESCRIPTION;\n    const unit = (options && options.unit) || MetricRegistry.DEFAULT_UNIT;\n    const labelKeys =\n      (options && options.labelKeys) || MetricRegistry.DEFAULT_LABEL_KEYS;\n    const constantLabels =\n      (options && options.constantLabels) ||\n      MetricRegistry.DEFAULT_CONSTANT_LABEL;\n    // TODO(mayurkale): Add support for resource\n\n    this.validateLables(labelKeys, constantLabels);\n\n    const labelKeysCopy = Object.assign([], labelKeys);\n    const int64Gauge = new Gauge(\n      validateNotNull(name, MetricRegistry.NAME),\n      description,\n      unit,\n      MetricDescriptorType.GAUGE_INT64,\n      labelKeysCopy,\n      constantLabels\n    );\n    this.registerMetric(name, int64Gauge);\n    return int64Gauge;\n  }\n\n  /**\n   * Builds a new double gauge to be added to the registry. This is more\n   * convenient form when you want to manually increase and decrease values as\n   * per your service requirements.\n   *\n   * @param name The name of the metric.\n   * @param options The options for the metric.\n   * @returns A Double Gauge metric.\n   */\n  addDoubleGauge(name: string, options?: MetricOptions): Gauge {\n    const description =\n      (options && options.description) || MetricRegistry.DEFAULT_DESCRIPTION;\n    const unit = (options && options.unit) || MetricRegistry.DEFAULT_UNIT;\n    const labelKeys =\n      (options && options.labelKeys) || MetricRegistry.DEFAULT_LABEL_KEYS;\n    const constantLabels =\n      (options && options.constantLabels) ||\n      MetricRegistry.DEFAULT_CONSTANT_LABEL;\n    // TODO(mayurkale): Add support for resource\n\n    this.validateLables(labelKeys, constantLabels);\n\n    const labelKeysCopy = Object.assign([], labelKeys);\n    const doubleGauge = new Gauge(\n      validateNotNull(name, MetricRegistry.NAME),\n      description,\n      unit,\n      MetricDescriptorType.GAUGE_DOUBLE,\n      labelKeysCopy,\n      constantLabels\n    );\n    this.registerMetric(name, doubleGauge);\n    return doubleGauge;\n  }\n\n  /**\n   * Builds a new derived Int64 gauge to be added to the registry. This is more\n   * convenient form when you want to manually increase and decrease values as\n   * per your service requirements.\n   *\n   * @param name The name of the metric.\n   * @param options The options for the metric.\n   * @returns A Int64 DerivedGauge metric.\n   */\n  addDerivedInt64Gauge(name: string, options?: MetricOptions): DerivedGauge {\n    const description =\n      (options && options.description) || MetricRegistry.DEFAULT_DESCRIPTION;\n    const unit = (options && options.unit) || MetricRegistry.DEFAULT_UNIT;\n    const labelKeys =\n      (options && options.labelKeys) || MetricRegistry.DEFAULT_LABEL_KEYS;\n    const constantLabels =\n      (options && options.constantLabels) ||\n      MetricRegistry.DEFAULT_CONSTANT_LABEL;\n    // TODO(mayurkale): Add support for resource\n\n    this.validateLables(labelKeys, constantLabels);\n\n    const labelKeysCopy = Object.assign([], labelKeys);\n    const derivedInt64Gauge = new DerivedGauge(\n      validateNotNull(name, MetricRegistry.NAME),\n      description,\n      unit,\n      MetricDescriptorType.GAUGE_INT64,\n      labelKeysCopy,\n      constantLabels\n    );\n    this.registerMetric(name, derivedInt64Gauge);\n    return derivedInt64Gauge;\n  }\n\n  /**\n   * Builds a new derived double gauge to be added to the registry. This is more\n   * convenient form when you want to manually increase and decrease values as\n   * per your service requirements.\n   *\n   * @param name The name of the metric.\n   * @param options The options for the metric.\n   * @returns A Double DerivedGauge metric.\n   */\n  addDerivedDoubleGauge(name: string, options?: MetricOptions): DerivedGauge {\n    const description =\n      (options && options.description) || MetricRegistry.DEFAULT_DESCRIPTION;\n    const unit = (options && options.unit) || MetricRegistry.DEFAULT_UNIT;\n    const labelKeys =\n      (options && options.labelKeys) || MetricRegistry.DEFAULT_LABEL_KEYS;\n    const constantLabels =\n      (options && options.constantLabels) ||\n      MetricRegistry.DEFAULT_CONSTANT_LABEL;\n    // TODO(mayurkale): Add support for resource\n\n    this.validateLables(labelKeys, constantLabels);\n\n    const labelKeysCopy = Object.assign([], labelKeys);\n    const derivedDoubleGauge = new DerivedGauge(\n      validateNotNull(name, MetricRegistry.NAME),\n      description,\n      unit,\n      MetricDescriptorType.GAUGE_DOUBLE,\n      labelKeysCopy,\n      constantLabels\n    );\n    this.registerMetric(name, derivedDoubleGauge);\n    return derivedDoubleGauge;\n  }\n\n  /**\n   * Builds a new Int64 cumulative to be added to the registry. This API is\n   * useful when you want to manually increase and reset values as per service\n   * requirements.\n   *\n   * @param name The name of the metric.\n   * @param options The options for the metric.\n   * @returns A Int64 Cumulative metric.\n   */\n  addInt64Cumulative(name: string, options?: MetricOptions): Cumulative {\n    const description =\n      (options && options.description) || MetricRegistry.DEFAULT_DESCRIPTION;\n    const unit = (options && options.unit) || MetricRegistry.DEFAULT_UNIT;\n    const labelKeys =\n      (options && options.labelKeys) || MetricRegistry.DEFAULT_LABEL_KEYS;\n    const constantLabels =\n      (options && options.constantLabels) ||\n      MetricRegistry.DEFAULT_CONSTANT_LABEL;\n    // TODO(mayurkale): Add support for resource\n\n    this.validateLables(labelKeys, constantLabels);\n\n    const labelKeysCopy = Object.assign([], labelKeys);\n    const int64Cumulative = new Cumulative(\n      validateNotNull(name, MetricRegistry.NAME),\n      description,\n      unit,\n      MetricDescriptorType.CUMULATIVE_INT64,\n      labelKeysCopy,\n      constantLabels\n    );\n    this.registerMetric(name, int64Cumulative);\n    return int64Cumulative;\n  }\n\n  /**\n   * Builds a new double cumulative to be added to the registry. This API is\n   * useful when you want to manually increase and reset values as per service\n   * requirements.\n   *\n   * @param name The name of the metric.\n   * @param options The options for the metric.\n   * @returns A Double Cumulative metric.\n   */\n  addDoubleCumulative(name: string, options?: MetricOptions): Cumulative {\n    const description =\n      (options && options.description) || MetricRegistry.DEFAULT_DESCRIPTION;\n    const unit = (options && options.unit) || MetricRegistry.DEFAULT_UNIT;\n    const labelKeys =\n      (options && options.labelKeys) || MetricRegistry.DEFAULT_LABEL_KEYS;\n    const constantLabels =\n      (options && options.constantLabels) ||\n      MetricRegistry.DEFAULT_CONSTANT_LABEL;\n    // TODO(mayurkale): Add support for resource\n\n    this.validateLables(labelKeys, constantLabels);\n\n    const labelKeysCopy = Object.assign([], labelKeys);\n    const doubleCumulative = new Cumulative(\n      validateNotNull(name, MetricRegistry.NAME),\n      description,\n      unit,\n      MetricDescriptorType.CUMULATIVE_DOUBLE,\n      labelKeysCopy,\n      constantLabels\n    );\n    this.registerMetric(name, doubleCumulative);\n    return doubleCumulative;\n  }\n\n  /**\n   * Builds a new derived Int64 Cumulative to be added to the registry.\n   *\n   * @param name The name of the metric.\n   * @param options The options for the metric.\n   * @returns A Int64 DerivedCumulative metric.\n   */\n  addDerivedInt64Cumulative(\n    name: string,\n    options?: MetricOptions\n  ): DerivedCumulative {\n    const description =\n      (options && options.description) || MetricRegistry.DEFAULT_DESCRIPTION;\n    const unit = (options && options.unit) || MetricRegistry.DEFAULT_UNIT;\n    const labelKeys =\n      (options && options.labelKeys) || MetricRegistry.DEFAULT_LABEL_KEYS;\n    const constantLabels =\n      (options && options.constantLabels) ||\n      MetricRegistry.DEFAULT_CONSTANT_LABEL;\n    // TODO(mayurkale): Add support for resource\n\n    this.validateLables(labelKeys, constantLabels);\n\n    const labelKeysCopy = Object.assign([], labelKeys);\n    const startTime: Timestamp = getTimestampWithProcessHRTime();\n    const derivedInt64Cumulative = new DerivedCumulative(\n      validateNotNull(name, MetricRegistry.NAME),\n      description,\n      unit,\n      MetricDescriptorType.CUMULATIVE_INT64,\n      labelKeysCopy,\n      constantLabels,\n      startTime\n    );\n    this.registerMetric(name, derivedInt64Cumulative);\n    return derivedInt64Cumulative;\n  }\n\n  /**\n   * Builds a new derived Double Cumulative to be added to the registry.\n   *\n   * @param name The name of the metric.\n   * @param options The options for the metric.\n   * @returns A Double DerivedCumulative metric.\n   */\n  addDerivedDoubleCumulative(\n    name: string,\n    options?: MetricOptions\n  ): DerivedCumulative {\n    const description =\n      (options && options.description) || MetricRegistry.DEFAULT_DESCRIPTION;\n    const unit = (options && options.unit) || MetricRegistry.DEFAULT_UNIT;\n    const labelKeys =\n      (options && options.labelKeys) || MetricRegistry.DEFAULT_LABEL_KEYS;\n    const constantLabels =\n      (options && options.constantLabels) ||\n      MetricRegistry.DEFAULT_CONSTANT_LABEL;\n    // TODO(mayurkale): Add support for resource\n\n    this.validateLables(labelKeys, constantLabels);\n\n    const labelKeysCopy = Object.assign([], labelKeys);\n    const startTime: Timestamp = getTimestampWithProcessHRTime();\n    const derivedDoubleCumulative = new DerivedCumulative(\n      validateNotNull(name, MetricRegistry.NAME),\n      description,\n      unit,\n      MetricDescriptorType.CUMULATIVE_DOUBLE,\n      labelKeysCopy,\n      constantLabels,\n      startTime\n    );\n    this.registerMetric(name, derivedDoubleCumulative);\n    return derivedDoubleCumulative;\n  }\n\n  /**\n   * Registers metric to register.\n   *\n   * @param name The name of the metric.\n   * @param meter The metric to register.\n   */\n  private registerMetric(name: string, meter: Meter): void {\n    if (this.registeredMetrics.has(name)) {\n      throw new Error(\n        `A metric with the name ${name} has already been registered.`\n      );\n    }\n    this.registeredMetrics.set(name, meter);\n  }\n\n  /**\n   * Gets a metric producer for registry.\n   *\n   * @returns The metric producer.\n   */\n  getMetricProducer(): MetricProducer {\n    return this.metricProducer;\n  }\n\n  /** Validates labelKeys and constantLabels. */\n  private validateLables(\n    labelKeys: LabelKey[],\n    constantLabels: Map<LabelKey, LabelValue>\n  ) {\n    validateArrayElementsNotNull(labelKeys, MetricRegistry.LABEL_KEY);\n    validateMapElementNotNull(constantLabels, MetricRegistry.CONSTANT_LABELS);\n    validateDuplicateKeys(labelKeys, constantLabels);\n  }\n}\n\n/**\n * A MetricProducerForRegistry is a producer that can be registered for\n * exporting using MetricProducerManager.\n */\nclass MetricProducerForRegistry extends BaseMetricProducer {\n  private registeredMetrics: Map<string, Meter>;\n\n  constructor(registeredMetrics: Map<string, Meter>) {\n    super();\n    this.registeredMetrics = registeredMetrics;\n  }\n\n  /**\n   * Gets a collection of produced Metric`s to be exported.\n   *\n   * @returns The list of metrics.\n   */\n  getMetrics(): Metric[] {\n    return Array.from(this.registeredMetrics.values())\n      .map(meter => meter.getMetric())\n      .filter(meter => !!meter) as Metric[];\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"b3d7a5046e8ec149ad8624a2acfe2082b98d473e"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2j1kv8h05u=function(){return actualCoverage;};}return actualCoverage;}cov_2j1kv8h05u();cov_2j1kv8h05u().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_2j1kv8h05u().s[1]++;exports.MetricRegistry=void 0;const time_util_1=(cov_2j1kv8h05u().s[2]++,require("../common/time-util"));const validations_1=(cov_2j1kv8h05u().s[3]++,require("../common/validations"));const types_1=(cov_2j1kv8h05u().s[4]++,require("../stats/types"));const cumulative_1=(cov_2j1kv8h05u().s[5]++,require("./cumulative/cumulative"));const derived_cumulative_1=(cov_2j1kv8h05u().s[6]++,require("./cumulative/derived-cumulative"));const base_metric_producer_1=(cov_2j1kv8h05u().s[7]++,require("./export/base-metric-producer"));const types_2=(cov_2j1kv8h05u().s[8]++,require("./export/types"));const derived_gauge_1=(cov_2j1kv8h05u().s[9]++,require("./gauges/derived-gauge"));const gauge_1=(cov_2j1kv8h05u().s[10]++,require("./gauges/gauge"));/**
 * Creates and manages application's set of metrics.
 */class MetricRegistry{constructor(){cov_2j1kv8h05u().f[0]++;cov_2j1kv8h05u().s[11]++;this.registeredMetrics=new Map();cov_2j1kv8h05u().s[12]++;this.metricProducer=new MetricProducerForRegistry(this.registeredMetrics);}/**
     * Builds a new Int64 gauge to be added to the registry. This is more
     * convenient form when you want to manually increase and decrease values as
     * per your service requirements.
     *
     * @param name The name of the metric.
     * @param options The options for the metric.
     * @returns A Int64 Gauge metric.
     */addInt64Gauge(name,options){cov_2j1kv8h05u().f[1]++;const description=(cov_2j1kv8h05u().s[13]++,(cov_2j1kv8h05u().b[0][0]++,options)&&(cov_2j1kv8h05u().b[0][1]++,options.description)||(cov_2j1kv8h05u().b[0][2]++,MetricRegistry.DEFAULT_DESCRIPTION));const unit=(cov_2j1kv8h05u().s[14]++,(cov_2j1kv8h05u().b[1][0]++,options)&&(cov_2j1kv8h05u().b[1][1]++,options.unit)||(cov_2j1kv8h05u().b[1][2]++,MetricRegistry.DEFAULT_UNIT));const labelKeys=(cov_2j1kv8h05u().s[15]++,(cov_2j1kv8h05u().b[2][0]++,options)&&(cov_2j1kv8h05u().b[2][1]++,options.labelKeys)||(cov_2j1kv8h05u().b[2][2]++,MetricRegistry.DEFAULT_LABEL_KEYS));const constantLabels=(cov_2j1kv8h05u().s[16]++,(cov_2j1kv8h05u().b[3][0]++,options)&&(cov_2j1kv8h05u().b[3][1]++,options.constantLabels)||(cov_2j1kv8h05u().b[3][2]++,MetricRegistry.DEFAULT_CONSTANT_LABEL));// TODO(mayurkale): Add support for resource
cov_2j1kv8h05u().s[17]++;this.validateLables(labelKeys,constantLabels);const labelKeysCopy=(cov_2j1kv8h05u().s[18]++,Object.assign([],labelKeys));const int64Gauge=(cov_2j1kv8h05u().s[19]++,new gauge_1.Gauge(validations_1.validateNotNull(name,MetricRegistry.NAME),description,unit,types_2.MetricDescriptorType.GAUGE_INT64,labelKeysCopy,constantLabels));cov_2j1kv8h05u().s[20]++;this.registerMetric(name,int64Gauge);cov_2j1kv8h05u().s[21]++;return int64Gauge;}/**
     * Builds a new double gauge to be added to the registry. This is more
     * convenient form when you want to manually increase and decrease values as
     * per your service requirements.
     *
     * @param name The name of the metric.
     * @param options The options for the metric.
     * @returns A Double Gauge metric.
     */addDoubleGauge(name,options){cov_2j1kv8h05u().f[2]++;const description=(cov_2j1kv8h05u().s[22]++,(cov_2j1kv8h05u().b[4][0]++,options)&&(cov_2j1kv8h05u().b[4][1]++,options.description)||(cov_2j1kv8h05u().b[4][2]++,MetricRegistry.DEFAULT_DESCRIPTION));const unit=(cov_2j1kv8h05u().s[23]++,(cov_2j1kv8h05u().b[5][0]++,options)&&(cov_2j1kv8h05u().b[5][1]++,options.unit)||(cov_2j1kv8h05u().b[5][2]++,MetricRegistry.DEFAULT_UNIT));const labelKeys=(cov_2j1kv8h05u().s[24]++,(cov_2j1kv8h05u().b[6][0]++,options)&&(cov_2j1kv8h05u().b[6][1]++,options.labelKeys)||(cov_2j1kv8h05u().b[6][2]++,MetricRegistry.DEFAULT_LABEL_KEYS));const constantLabels=(cov_2j1kv8h05u().s[25]++,(cov_2j1kv8h05u().b[7][0]++,options)&&(cov_2j1kv8h05u().b[7][1]++,options.constantLabels)||(cov_2j1kv8h05u().b[7][2]++,MetricRegistry.DEFAULT_CONSTANT_LABEL));// TODO(mayurkale): Add support for resource
cov_2j1kv8h05u().s[26]++;this.validateLables(labelKeys,constantLabels);const labelKeysCopy=(cov_2j1kv8h05u().s[27]++,Object.assign([],labelKeys));const doubleGauge=(cov_2j1kv8h05u().s[28]++,new gauge_1.Gauge(validations_1.validateNotNull(name,MetricRegistry.NAME),description,unit,types_2.MetricDescriptorType.GAUGE_DOUBLE,labelKeysCopy,constantLabels));cov_2j1kv8h05u().s[29]++;this.registerMetric(name,doubleGauge);cov_2j1kv8h05u().s[30]++;return doubleGauge;}/**
     * Builds a new derived Int64 gauge to be added to the registry. This is more
     * convenient form when you want to manually increase and decrease values as
     * per your service requirements.
     *
     * @param name The name of the metric.
     * @param options The options for the metric.
     * @returns A Int64 DerivedGauge metric.
     */addDerivedInt64Gauge(name,options){cov_2j1kv8h05u().f[3]++;const description=(cov_2j1kv8h05u().s[31]++,(cov_2j1kv8h05u().b[8][0]++,options)&&(cov_2j1kv8h05u().b[8][1]++,options.description)||(cov_2j1kv8h05u().b[8][2]++,MetricRegistry.DEFAULT_DESCRIPTION));const unit=(cov_2j1kv8h05u().s[32]++,(cov_2j1kv8h05u().b[9][0]++,options)&&(cov_2j1kv8h05u().b[9][1]++,options.unit)||(cov_2j1kv8h05u().b[9][2]++,MetricRegistry.DEFAULT_UNIT));const labelKeys=(cov_2j1kv8h05u().s[33]++,(cov_2j1kv8h05u().b[10][0]++,options)&&(cov_2j1kv8h05u().b[10][1]++,options.labelKeys)||(cov_2j1kv8h05u().b[10][2]++,MetricRegistry.DEFAULT_LABEL_KEYS));const constantLabels=(cov_2j1kv8h05u().s[34]++,(cov_2j1kv8h05u().b[11][0]++,options)&&(cov_2j1kv8h05u().b[11][1]++,options.constantLabels)||(cov_2j1kv8h05u().b[11][2]++,MetricRegistry.DEFAULT_CONSTANT_LABEL));// TODO(mayurkale): Add support for resource
cov_2j1kv8h05u().s[35]++;this.validateLables(labelKeys,constantLabels);const labelKeysCopy=(cov_2j1kv8h05u().s[36]++,Object.assign([],labelKeys));const derivedInt64Gauge=(cov_2j1kv8h05u().s[37]++,new derived_gauge_1.DerivedGauge(validations_1.validateNotNull(name,MetricRegistry.NAME),description,unit,types_2.MetricDescriptorType.GAUGE_INT64,labelKeysCopy,constantLabels));cov_2j1kv8h05u().s[38]++;this.registerMetric(name,derivedInt64Gauge);cov_2j1kv8h05u().s[39]++;return derivedInt64Gauge;}/**
     * Builds a new derived double gauge to be added to the registry. This is more
     * convenient form when you want to manually increase and decrease values as
     * per your service requirements.
     *
     * @param name The name of the metric.
     * @param options The options for the metric.
     * @returns A Double DerivedGauge metric.
     */addDerivedDoubleGauge(name,options){cov_2j1kv8h05u().f[4]++;const description=(cov_2j1kv8h05u().s[40]++,(cov_2j1kv8h05u().b[12][0]++,options)&&(cov_2j1kv8h05u().b[12][1]++,options.description)||(cov_2j1kv8h05u().b[12][2]++,MetricRegistry.DEFAULT_DESCRIPTION));const unit=(cov_2j1kv8h05u().s[41]++,(cov_2j1kv8h05u().b[13][0]++,options)&&(cov_2j1kv8h05u().b[13][1]++,options.unit)||(cov_2j1kv8h05u().b[13][2]++,MetricRegistry.DEFAULT_UNIT));const labelKeys=(cov_2j1kv8h05u().s[42]++,(cov_2j1kv8h05u().b[14][0]++,options)&&(cov_2j1kv8h05u().b[14][1]++,options.labelKeys)||(cov_2j1kv8h05u().b[14][2]++,MetricRegistry.DEFAULT_LABEL_KEYS));const constantLabels=(cov_2j1kv8h05u().s[43]++,(cov_2j1kv8h05u().b[15][0]++,options)&&(cov_2j1kv8h05u().b[15][1]++,options.constantLabels)||(cov_2j1kv8h05u().b[15][2]++,MetricRegistry.DEFAULT_CONSTANT_LABEL));// TODO(mayurkale): Add support for resource
cov_2j1kv8h05u().s[44]++;this.validateLables(labelKeys,constantLabels);const labelKeysCopy=(cov_2j1kv8h05u().s[45]++,Object.assign([],labelKeys));const derivedDoubleGauge=(cov_2j1kv8h05u().s[46]++,new derived_gauge_1.DerivedGauge(validations_1.validateNotNull(name,MetricRegistry.NAME),description,unit,types_2.MetricDescriptorType.GAUGE_DOUBLE,labelKeysCopy,constantLabels));cov_2j1kv8h05u().s[47]++;this.registerMetric(name,derivedDoubleGauge);cov_2j1kv8h05u().s[48]++;return derivedDoubleGauge;}/**
     * Builds a new Int64 cumulative to be added to the registry. This API is
     * useful when you want to manually increase and reset values as per service
     * requirements.
     *
     * @param name The name of the metric.
     * @param options The options for the metric.
     * @returns A Int64 Cumulative metric.
     */addInt64Cumulative(name,options){cov_2j1kv8h05u().f[5]++;const description=(cov_2j1kv8h05u().s[49]++,(cov_2j1kv8h05u().b[16][0]++,options)&&(cov_2j1kv8h05u().b[16][1]++,options.description)||(cov_2j1kv8h05u().b[16][2]++,MetricRegistry.DEFAULT_DESCRIPTION));const unit=(cov_2j1kv8h05u().s[50]++,(cov_2j1kv8h05u().b[17][0]++,options)&&(cov_2j1kv8h05u().b[17][1]++,options.unit)||(cov_2j1kv8h05u().b[17][2]++,MetricRegistry.DEFAULT_UNIT));const labelKeys=(cov_2j1kv8h05u().s[51]++,(cov_2j1kv8h05u().b[18][0]++,options)&&(cov_2j1kv8h05u().b[18][1]++,options.labelKeys)||(cov_2j1kv8h05u().b[18][2]++,MetricRegistry.DEFAULT_LABEL_KEYS));const constantLabels=(cov_2j1kv8h05u().s[52]++,(cov_2j1kv8h05u().b[19][0]++,options)&&(cov_2j1kv8h05u().b[19][1]++,options.constantLabels)||(cov_2j1kv8h05u().b[19][2]++,MetricRegistry.DEFAULT_CONSTANT_LABEL));// TODO(mayurkale): Add support for resource
cov_2j1kv8h05u().s[53]++;this.validateLables(labelKeys,constantLabels);const labelKeysCopy=(cov_2j1kv8h05u().s[54]++,Object.assign([],labelKeys));const int64Cumulative=(cov_2j1kv8h05u().s[55]++,new cumulative_1.Cumulative(validations_1.validateNotNull(name,MetricRegistry.NAME),description,unit,types_2.MetricDescriptorType.CUMULATIVE_INT64,labelKeysCopy,constantLabels));cov_2j1kv8h05u().s[56]++;this.registerMetric(name,int64Cumulative);cov_2j1kv8h05u().s[57]++;return int64Cumulative;}/**
     * Builds a new double cumulative to be added to the registry. This API is
     * useful when you want to manually increase and reset values as per service
     * requirements.
     *
     * @param name The name of the metric.
     * @param options The options for the metric.
     * @returns A Double Cumulative metric.
     */addDoubleCumulative(name,options){cov_2j1kv8h05u().f[6]++;const description=(cov_2j1kv8h05u().s[58]++,(cov_2j1kv8h05u().b[20][0]++,options)&&(cov_2j1kv8h05u().b[20][1]++,options.description)||(cov_2j1kv8h05u().b[20][2]++,MetricRegistry.DEFAULT_DESCRIPTION));const unit=(cov_2j1kv8h05u().s[59]++,(cov_2j1kv8h05u().b[21][0]++,options)&&(cov_2j1kv8h05u().b[21][1]++,options.unit)||(cov_2j1kv8h05u().b[21][2]++,MetricRegistry.DEFAULT_UNIT));const labelKeys=(cov_2j1kv8h05u().s[60]++,(cov_2j1kv8h05u().b[22][0]++,options)&&(cov_2j1kv8h05u().b[22][1]++,options.labelKeys)||(cov_2j1kv8h05u().b[22][2]++,MetricRegistry.DEFAULT_LABEL_KEYS));const constantLabels=(cov_2j1kv8h05u().s[61]++,(cov_2j1kv8h05u().b[23][0]++,options)&&(cov_2j1kv8h05u().b[23][1]++,options.constantLabels)||(cov_2j1kv8h05u().b[23][2]++,MetricRegistry.DEFAULT_CONSTANT_LABEL));// TODO(mayurkale): Add support for resource
cov_2j1kv8h05u().s[62]++;this.validateLables(labelKeys,constantLabels);const labelKeysCopy=(cov_2j1kv8h05u().s[63]++,Object.assign([],labelKeys));const doubleCumulative=(cov_2j1kv8h05u().s[64]++,new cumulative_1.Cumulative(validations_1.validateNotNull(name,MetricRegistry.NAME),description,unit,types_2.MetricDescriptorType.CUMULATIVE_DOUBLE,labelKeysCopy,constantLabels));cov_2j1kv8h05u().s[65]++;this.registerMetric(name,doubleCumulative);cov_2j1kv8h05u().s[66]++;return doubleCumulative;}/**
     * Builds a new derived Int64 Cumulative to be added to the registry.
     *
     * @param name The name of the metric.
     * @param options The options for the metric.
     * @returns A Int64 DerivedCumulative metric.
     */addDerivedInt64Cumulative(name,options){cov_2j1kv8h05u().f[7]++;const description=(cov_2j1kv8h05u().s[67]++,(cov_2j1kv8h05u().b[24][0]++,options)&&(cov_2j1kv8h05u().b[24][1]++,options.description)||(cov_2j1kv8h05u().b[24][2]++,MetricRegistry.DEFAULT_DESCRIPTION));const unit=(cov_2j1kv8h05u().s[68]++,(cov_2j1kv8h05u().b[25][0]++,options)&&(cov_2j1kv8h05u().b[25][1]++,options.unit)||(cov_2j1kv8h05u().b[25][2]++,MetricRegistry.DEFAULT_UNIT));const labelKeys=(cov_2j1kv8h05u().s[69]++,(cov_2j1kv8h05u().b[26][0]++,options)&&(cov_2j1kv8h05u().b[26][1]++,options.labelKeys)||(cov_2j1kv8h05u().b[26][2]++,MetricRegistry.DEFAULT_LABEL_KEYS));const constantLabels=(cov_2j1kv8h05u().s[70]++,(cov_2j1kv8h05u().b[27][0]++,options)&&(cov_2j1kv8h05u().b[27][1]++,options.constantLabels)||(cov_2j1kv8h05u().b[27][2]++,MetricRegistry.DEFAULT_CONSTANT_LABEL));// TODO(mayurkale): Add support for resource
cov_2j1kv8h05u().s[71]++;this.validateLables(labelKeys,constantLabels);const labelKeysCopy=(cov_2j1kv8h05u().s[72]++,Object.assign([],labelKeys));const startTime=(cov_2j1kv8h05u().s[73]++,time_util_1.getTimestampWithProcessHRTime());const derivedInt64Cumulative=(cov_2j1kv8h05u().s[74]++,new derived_cumulative_1.DerivedCumulative(validations_1.validateNotNull(name,MetricRegistry.NAME),description,unit,types_2.MetricDescriptorType.CUMULATIVE_INT64,labelKeysCopy,constantLabels,startTime));cov_2j1kv8h05u().s[75]++;this.registerMetric(name,derivedInt64Cumulative);cov_2j1kv8h05u().s[76]++;return derivedInt64Cumulative;}/**
     * Builds a new derived Double Cumulative to be added to the registry.
     *
     * @param name The name of the metric.
     * @param options The options for the metric.
     * @returns A Double DerivedCumulative metric.
     */addDerivedDoubleCumulative(name,options){cov_2j1kv8h05u().f[8]++;const description=(cov_2j1kv8h05u().s[77]++,(cov_2j1kv8h05u().b[28][0]++,options)&&(cov_2j1kv8h05u().b[28][1]++,options.description)||(cov_2j1kv8h05u().b[28][2]++,MetricRegistry.DEFAULT_DESCRIPTION));const unit=(cov_2j1kv8h05u().s[78]++,(cov_2j1kv8h05u().b[29][0]++,options)&&(cov_2j1kv8h05u().b[29][1]++,options.unit)||(cov_2j1kv8h05u().b[29][2]++,MetricRegistry.DEFAULT_UNIT));const labelKeys=(cov_2j1kv8h05u().s[79]++,(cov_2j1kv8h05u().b[30][0]++,options)&&(cov_2j1kv8h05u().b[30][1]++,options.labelKeys)||(cov_2j1kv8h05u().b[30][2]++,MetricRegistry.DEFAULT_LABEL_KEYS));const constantLabels=(cov_2j1kv8h05u().s[80]++,(cov_2j1kv8h05u().b[31][0]++,options)&&(cov_2j1kv8h05u().b[31][1]++,options.constantLabels)||(cov_2j1kv8h05u().b[31][2]++,MetricRegistry.DEFAULT_CONSTANT_LABEL));// TODO(mayurkale): Add support for resource
cov_2j1kv8h05u().s[81]++;this.validateLables(labelKeys,constantLabels);const labelKeysCopy=(cov_2j1kv8h05u().s[82]++,Object.assign([],labelKeys));const startTime=(cov_2j1kv8h05u().s[83]++,time_util_1.getTimestampWithProcessHRTime());const derivedDoubleCumulative=(cov_2j1kv8h05u().s[84]++,new derived_cumulative_1.DerivedCumulative(validations_1.validateNotNull(name,MetricRegistry.NAME),description,unit,types_2.MetricDescriptorType.CUMULATIVE_DOUBLE,labelKeysCopy,constantLabels,startTime));cov_2j1kv8h05u().s[85]++;this.registerMetric(name,derivedDoubleCumulative);cov_2j1kv8h05u().s[86]++;return derivedDoubleCumulative;}/**
     * Registers metric to register.
     *
     * @param name The name of the metric.
     * @param meter The metric to register.
     */registerMetric(name,meter){cov_2j1kv8h05u().f[9]++;cov_2j1kv8h05u().s[87]++;if(this.registeredMetrics.has(name)){cov_2j1kv8h05u().b[32][0]++;cov_2j1kv8h05u().s[88]++;throw new Error(`A metric with the name ${name} has already been registered.`);}else{cov_2j1kv8h05u().b[32][1]++;}cov_2j1kv8h05u().s[89]++;this.registeredMetrics.set(name,meter);}/**
     * Gets a metric producer for registry.
     *
     * @returns The metric producer.
     */getMetricProducer(){cov_2j1kv8h05u().f[10]++;cov_2j1kv8h05u().s[90]++;return this.metricProducer;}/** Validates labelKeys and constantLabels. */validateLables(labelKeys,constantLabels){cov_2j1kv8h05u().f[11]++;cov_2j1kv8h05u().s[91]++;validations_1.validateArrayElementsNotNull(labelKeys,MetricRegistry.LABEL_KEY);cov_2j1kv8h05u().s[92]++;validations_1.validateMapElementNotNull(constantLabels,MetricRegistry.CONSTANT_LABELS);cov_2j1kv8h05u().s[93]++;validations_1.validateDuplicateKeys(labelKeys,constantLabels);}}cov_2j1kv8h05u().s[94]++;exports.MetricRegistry=MetricRegistry;cov_2j1kv8h05u().s[95]++;MetricRegistry.NAME='name';cov_2j1kv8h05u().s[96]++;MetricRegistry.LABEL_KEY='labelKey';cov_2j1kv8h05u().s[97]++;MetricRegistry.CONSTANT_LABELS='constantLabels';cov_2j1kv8h05u().s[98]++;MetricRegistry.DEFAULT_DESCRIPTION='';cov_2j1kv8h05u().s[99]++;MetricRegistry.DEFAULT_UNIT=types_1.MeasureUnit.UNIT;cov_2j1kv8h05u().s[100]++;MetricRegistry.DEFAULT_LABEL_KEYS=[];cov_2j1kv8h05u().s[101]++;MetricRegistry.DEFAULT_CONSTANT_LABEL=new Map();/**
 * A MetricProducerForRegistry is a producer that can be registered for
 * exporting using MetricProducerManager.
 */class MetricProducerForRegistry extends(base_metric_producer_1.BaseMetricProducer){constructor(registeredMetrics){cov_2j1kv8h05u().f[12]++;cov_2j1kv8h05u().s[102]++;super();cov_2j1kv8h05u().s[103]++;this.registeredMetrics=registeredMetrics;}/**
     * Gets a collection of produced Metric`s to be exported.
     *
     * @returns The list of metrics.
     */getMetrics(){cov_2j1kv8h05u().f[13]++;cov_2j1kv8h05u().s[104]++;return Array.from(this.registeredMetrics.values()).map(meter=>{cov_2j1kv8h05u().f[14]++;cov_2j1kv8h05u().s[105]++;return meter.getMetric();}).filter(meter=>{cov_2j1kv8h05u().f[15]++;cov_2j1kv8h05u().s[106]++;return!!meter;});}}//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,