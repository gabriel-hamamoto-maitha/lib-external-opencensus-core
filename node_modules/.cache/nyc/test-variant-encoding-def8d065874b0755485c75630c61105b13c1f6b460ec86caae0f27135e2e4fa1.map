{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-variant-encoding.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-variant-encoding.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,iCAAiC;AACjC,+EAGkD;AAElD,MAAM,SAAS,GAAG;IAChB,CAAC;IACD,CAAC;IACD,EAAE;IACF,GAAG;IACH,IAAI;IACJ,KAAK;IACL,MAAM;IACN,OAAO;IACP,QAAQ;IACR,SAAS;CACV,CAAC;AAEF,SAAS,OAAO,CAAC,KAAa;IAC5B,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC;AAC3C,CAAC;AAED,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAChC,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACnC,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;QAC9B,MAAM,CAAC,eAAe,CAAC,+BAAY,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;QAC7C,MAAM,GAAG,GAAG,GAAG,CAAC;QAChB,MAAM,aAAa,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,WAAW;QAE/C,MAAM,OAAO,GAAG,+BAAY,CAAC,GAAG,CAAC,CAAC;QAClC,MAAM,CAAC,eAAe,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;QAC/C,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAClC,MAAM,CAAC,WAAW,CAAC,+BAAY,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;QAChC,EAAE,CAAC,4BAA4B,QAAQ,YAAY,EAAE,GAAG,EAAE;YACxD,MAAM,OAAO,GAAG,+BAAY,CAAC,QAAQ,CAAC,CAAC;YACvC,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAClC,MAAM,CAAC,WAAW,CAAC,+BAAY,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;KACJ;AACH,CAAC,CAAC,CAAC","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport {\n  DecodeVarint,\n  EncodeVarint,\n} from '../src/tags/propagation/variant-encoding';\n\nconst testCases = [\n  0,\n  1,\n  10,\n  100,\n  1000,\n  10000,\n  100000,\n  1000000,\n  10000000,\n  100000000,\n];\n\nfunction randint(range: number) {\n  return Math.floor(Math.random() * range);\n}\n\ndescribe('variant encoding', () => {\n  it('should encode single byte', () => {\n    const expected = randint(127);\n    assert.deepStrictEqual(EncodeVarint(expected), [expected]);\n  });\n\n  it('should encode/decode multiple bytes', () => {\n    const num = 300;\n    const expectedBytes = [0xac, 0x02]; // [172, 2]\n\n    const variant = EncodeVarint(num);\n    assert.deepStrictEqual(variant, expectedBytes);\n    const buff = Buffer.from(variant);\n    assert.strictEqual(DecodeVarint(buff, 0), num);\n  });\n\n  for (const testCase of testCases) {\n    it(`should encode and decode ${testCase} correctly`, () => {\n      const variant = EncodeVarint(testCase);\n      const buff = Buffer.from(variant);\n      assert.strictEqual(DecodeVarint(buff, 0), testCase);\n    });\n  }\n});\n"]}