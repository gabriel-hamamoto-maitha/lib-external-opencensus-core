{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/cumulative/cumulative.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/cumulative/cumulative.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getTimestampWithProcessHRTime } from '../../common/time-util';\nimport {\n  validateArrayElementsNotNull,\n  validateNotNull,\n} from '../../common/validations';\nimport {\n  LabelKey,\n  LabelValue,\n  Metric,\n  MetricDescriptor,\n  MetricDescriptorType,\n  TimeSeries,\n  Timestamp,\n} from '../export/types';\nimport { Meter } from '../types';\nimport { hashLabelValues, initializeDefaultLabels } from '../utils';\nimport { CumulativePoint } from './types';\n\n/**\n * Cumulative metric is used to record aggregated metrics that represents a\n * single numerical value accumulated over a time interval. The value can only\n * increase or be reset to zero on restart or reset the event.\n */\nexport class Cumulative implements Meter {\n  private readonly metricDescriptor: MetricDescriptor;\n  private labelKeysLength: number;\n  private defaultLabelValues: LabelValue[];\n  private registeredPoints: Map<string, CumulativePoint> = new Map();\n  private readonly constantLabelValues: LabelValue[];\n\n  /**\n   * Constructs a new Cumulative instance.\n   *\n   * @param name The name of the metric.\n   * @param description The description of the metric.\n   * @param unit The unit of the metric.\n   * @param type The type of metric.\n   * @param labelKeys The list of the label keys.\n   * @param constantLabels The map of constant labels for the Metric.\n   */\n  constructor(\n    name: string,\n    description: string,\n    unit: string,\n    type: MetricDescriptorType,\n    readonly labelKeys: LabelKey[],\n    readonly constantLabels: Map<LabelKey, LabelValue>\n  ) {\n    this.labelKeysLength = labelKeys.length;\n    const keysAndConstantKeys = [...labelKeys, ...constantLabels.keys()];\n    this.constantLabelValues = [...constantLabels.values()];\n\n    this.metricDescriptor = {\n      name,\n      description,\n      unit,\n      type,\n      labelKeys: keysAndConstantKeys,\n    };\n    this.defaultLabelValues = initializeDefaultLabels(this.labelKeysLength);\n  }\n\n  /**\n   * Creates a TimeSeries and returns a Point if the specified\n   * labelValues is not already associated with this cumulative, else returns an\n   * existing Point.\n   *\n   * It is recommended to keep a reference to the Point instead of always\n   * calling this method for manual operations.\n   *\n   * @param labelValues The list of the label values.\n   * @returns The value of single cumulative.\n   */\n  getOrCreateTimeSeries(labelValues: LabelValue[]): CumulativePoint {\n    validateArrayElementsNotNull(\n      validateNotNull(labelValues, 'labelValues'),\n      'labelValue'\n    );\n    return this.registerTimeSeries(labelValues);\n  }\n\n  /**\n   * Returns a Point for a cumulative with all labels not set, or default\n   * labels.\n   *\n   * @returns The value of single cumulative.\n   */\n  getDefaultTimeSeries(): CumulativePoint {\n    return this.registerTimeSeries(this.defaultLabelValues);\n  }\n\n  /**\n   * Removes the TimeSeries from the cumulative metric, if it is present. i.e.\n   * references to previous Point objects are invalid (not part of the\n   * metric).\n   *\n   * @param labelValues The list of label values.\n   */\n  removeTimeSeries(labelValues: LabelValue[]): void {\n    validateNotNull(labelValues, 'labelValues');\n    this.registeredPoints.delete(hashLabelValues(labelValues));\n  }\n\n  /**\n   * Removes all TimeSeries from the cumulative metric. i.e. references to all\n   * previous Point objects are invalid (not part of the metric).\n   */\n  clear(): void {\n    this.registeredPoints.clear();\n  }\n\n  /**\n   * Registers a TimeSeries and returns a Point if the specified\n   * labelValues is not already associated with this cumulative, else returns an\n   * existing Point.\n   *\n   * @param labelValues The list of the label values.\n   * @returns The value of single cumulative.\n   */\n  private registerTimeSeries(labelValues: LabelValue[]): CumulativePoint {\n    const hash = hashLabelValues(labelValues);\n    // return if the specified labelValues is already associated with the point.\n    if (this.registeredPoints.has(hash)) {\n      return this.registeredPoints.get(hash)!;\n    }\n    if (this.labelKeysLength !== labelValues.length) {\n      throw new Error(\"Label Keys and Label Values don't have same size\");\n    }\n\n    const point = new CumulativePointEntry([\n      ...labelValues,\n      ...this.constantLabelValues,\n    ]);\n    this.registeredPoints.set(hash, point);\n    return point;\n  }\n\n  /**\n   * Provides a Metric with one or more TimeSeries.\n   *\n   * @returns The Metric, or null if TimeSeries is not present in Metric.\n   */\n  getMetric(): Metric | null {\n    if (this.registeredPoints.size === 0) {\n      return null;\n    }\n    const now: Timestamp = getTimestampWithProcessHRTime();\n    return {\n      descriptor: this.metricDescriptor,\n      timeseries: Array.from(this.registeredPoints, ([_, point]) =>\n        point.getTimeSeries(now)\n      ),\n    };\n  }\n}\n\n/**\n * The value of a single point in the Cumulative.TimeSeries.\n */\nexport class CumulativePointEntry implements CumulativePoint {\n  private readonly labelValues: LabelValue[];\n  private startTimestamp: Timestamp;\n  private value = 0;\n\n  constructor(labelValues: LabelValue[]) {\n    this.labelValues = labelValues;\n    this.startTimestamp = getTimestampWithProcessHRTime();\n  }\n\n  /** Reset cumulative metric. */\n  reset(): void {\n    this.value = 0;\n    this.startTimestamp = getTimestampWithProcessHRTime();\n  }\n\n  /**\n   * Increment the cumulative metric.\n   * @param val The new value.\n   */\n  inc(val?: number): void {\n    if ((val && !Number.isFinite(val)) || (val !== undefined && isNaN(val))) {\n      throw new TypeError(`Value is not a valid number: ${val}`);\n    }\n    if (val && val < 0) {\n      throw new Error('It is not possible to decrease a cumulative metric');\n    }\n    const incValue = val === null || val === undefined ? 1 : val;\n    this.value += incValue;\n  }\n\n  /**\n   * Returns the TimeSeries with one or more Point.\n   *\n   * @param now The time at which the cumulative is recorded.\n   * @returns The TimeSeries.\n   */\n  getTimeSeries(now: Timestamp): TimeSeries {\n    return {\n      labelValues: this.labelValues,\n      points: [{ value: this.value, timestamp: now }],\n      startTimestamp: this.startTimestamp,\n    };\n  }\n}\n"]}