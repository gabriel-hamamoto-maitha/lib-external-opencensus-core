"use strict";/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_259oa5495b(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/config/types.ts";var hash="b76dadb318631546694a2ff58f5adab1df1d5549";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/config/types.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}}},fnMap:{},branchMap:{},s:{"0":0},f:{},b:{},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/config/types.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/config/types.ts"],names:[],mappings:";AAAA;;;;;;;;;;;;;;GAcG",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '../../common/types';\nimport { Exporter } from '../../exporters/types';\nimport { Stats } from '../../stats/types';\nimport { PluginNames } from '../instrumentation/types';\nimport { Attributes } from '../model/types';\nimport { Propagation } from '../propagation/types';\n\n/** Interface configuration for a buffer. */\nexport interface BufferConfig {\n  /** Maximum size of a buffer. */\n  bufferSize?: number;\n  /** Max time for a buffer can wait before being sent */\n  bufferTimeout?: number;\n  /** A logger object  */\n  logger?: Logger;\n}\n\n/** Defines tracer configuration parameters */\nexport interface TracerConfig {\n  /** A set of default attributes each in the format [KEY]:[VALUE] */\n  defaultAttributes?: Attributes;\n  /** Determines the sampling rate. Ranges from 0.0 to 1.0 */\n  samplingRate?: number;\n  /** A logger object  */\n  logger?: Logger;\n  /** A propagation instance */\n  propagation?: Propagation;\n  /** Trace Parameters */\n  traceParams?: TraceParams;\n}\n\n/** Available configuration options. */\nexport interface TracingConfig {\n  /** level of logger - 0:disable, 1: error, 2: warn, 3: info, 4: debug  */\n  logLevel?: number;\n\n  /**\n   * The maximum number of characters reported on a label value.\n   */\n  maximumLabelValueSize?: number;\n\n  /**\n   * A list of trace instrumentations plugins to load.\n   * Each key is the name of the module to trace, and its\n   * value is the name of the package which has the plugin\n   * implementation.\n   * Ex.:\n   * plugins: {\n   *  'http': '@opencensus/opencensus-instrumentation-http',\n   *  'mongodb-core': '@opencensus/opencensus-instrumentation-mongodb-core',\n   *   ...\n   * }\n   * Any user-provided value will be added to the default list.\n   * It will override any default plugin for the same key.\n   */\n  plugins?: PluginNames;\n  /** An exporter object */\n  exporter?: Exporter;\n  /** An instance of a logger  */\n  logger?: Logger;\n  /** An instance of a stats  */\n  stats?: Stats;\n}\n\n/** Global configuration of trace service */\nexport interface TraceParams {\n  /**\n   * numberOfAnnontationEventsPerSpan is number of annotation events per\n   * span\n   */\n  numberOfAnnontationEventsPerSpan?: number;\n  /** numberOfMessageEventsPerSpan is number of message events per span */\n  numberOfMessageEventsPerSpan?: number;\n  /** numberOfAttributesPerSpan is number of attributes per span */\n  numberOfAttributesPerSpan?: number;\n  /** numberOfLinksPerSpan is number of links per span */\n  numberOfLinksPerSpan?: number;\n}\n\nexport type Config = TracingConfig & TracerConfig & BufferConfig;\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"b76dadb318631546694a2ff58f5adab1df1d5549"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_259oa5495b=function(){return actualCoverage;};}return actualCoverage;}cov_259oa5495b();cov_259oa5495b().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3VzZXJtYWl0aGEvdHJhZGVtYXN0ZXIvbGlicy9saWItZXh0ZXJuYWwtb3BlbmNlbnN1cy1ub2RlL3NyYy90cmFjZS9jb25maWcvdHlwZXMudHMiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VybWFpdGhhL3RyYWRlbWFzdGVyL2xpYnMvbGliLWV4dGVybmFsLW9wZW5jZW5zdXMtbm9kZS9zcmMvdHJhY2UvY29uZmlnL3R5cGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7R0FjRyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTgsIE9wZW5DZW5zdXMgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vLi4vY29tbW9uL3R5cGVzJztcbmltcG9ydCB7IEV4cG9ydGVyIH0gZnJvbSAnLi4vLi4vZXhwb3J0ZXJzL3R5cGVzJztcbmltcG9ydCB7IFN0YXRzIH0gZnJvbSAnLi4vLi4vc3RhdHMvdHlwZXMnO1xuaW1wb3J0IHsgUGx1Z2luTmFtZXMgfSBmcm9tICcuLi9pbnN0cnVtZW50YXRpb24vdHlwZXMnO1xuaW1wb3J0IHsgQXR0cmlidXRlcyB9IGZyb20gJy4uL21vZGVsL3R5cGVzJztcbmltcG9ydCB7IFByb3BhZ2F0aW9uIH0gZnJvbSAnLi4vcHJvcGFnYXRpb24vdHlwZXMnO1xuXG4vKiogSW50ZXJmYWNlIGNvbmZpZ3VyYXRpb24gZm9yIGEgYnVmZmVyLiAqL1xuZXhwb3J0IGludGVyZmFjZSBCdWZmZXJDb25maWcge1xuICAvKiogTWF4aW11bSBzaXplIG9mIGEgYnVmZmVyLiAqL1xuICBidWZmZXJTaXplPzogbnVtYmVyO1xuICAvKiogTWF4IHRpbWUgZm9yIGEgYnVmZmVyIGNhbiB3YWl0IGJlZm9yZSBiZWluZyBzZW50ICovXG4gIGJ1ZmZlclRpbWVvdXQ/OiBudW1iZXI7XG4gIC8qKiBBIGxvZ2dlciBvYmplY3QgICovXG4gIGxvZ2dlcj86IExvZ2dlcjtcbn1cblxuLyoqIERlZmluZXMgdHJhY2VyIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVycyAqL1xuZXhwb3J0IGludGVyZmFjZSBUcmFjZXJDb25maWcge1xuICAvKiogQSBzZXQgb2YgZGVmYXVsdCBhdHRyaWJ1dGVzIGVhY2ggaW4gdGhlIGZvcm1hdCBbS0VZXTpbVkFMVUVdICovXG4gIGRlZmF1bHRBdHRyaWJ1dGVzPzogQXR0cmlidXRlcztcbiAgLyoqIERldGVybWluZXMgdGhlIHNhbXBsaW5nIHJhdGUuIFJhbmdlcyBmcm9tIDAuMCB0byAxLjAgKi9cbiAgc2FtcGxpbmdSYXRlPzogbnVtYmVyO1xuICAvKiogQSBsb2dnZXIgb2JqZWN0ICAqL1xuICBsb2dnZXI/OiBMb2dnZXI7XG4gIC8qKiBBIHByb3BhZ2F0aW9uIGluc3RhbmNlICovXG4gIHByb3BhZ2F0aW9uPzogUHJvcGFnYXRpb247XG4gIC8qKiBUcmFjZSBQYXJhbWV0ZXJzICovXG4gIHRyYWNlUGFyYW1zPzogVHJhY2VQYXJhbXM7XG59XG5cbi8qKiBBdmFpbGFibGUgY29uZmlndXJhdGlvbiBvcHRpb25zLiAqL1xuZXhwb3J0IGludGVyZmFjZSBUcmFjaW5nQ29uZmlnIHtcbiAgLyoqIGxldmVsIG9mIGxvZ2dlciAtIDA6ZGlzYWJsZSwgMTogZXJyb3IsIDI6IHdhcm4sIDM6IGluZm8sIDQ6IGRlYnVnICAqL1xuICBsb2dMZXZlbD86IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIG1heGltdW0gbnVtYmVyIG9mIGNoYXJhY3RlcnMgcmVwb3J0ZWQgb24gYSBsYWJlbCB2YWx1ZS5cbiAgICovXG4gIG1heGltdW1MYWJlbFZhbHVlU2l6ZT86IG51bWJlcjtcblxuICAvKipcbiAgICogQSBsaXN0IG9mIHRyYWNlIGluc3RydW1lbnRhdGlvbnMgcGx1Z2lucyB0byBsb2FkLlxuICAgKiBFYWNoIGtleSBpcyB0aGUgbmFtZSBvZiB0aGUgbW9kdWxlIHRvIHRyYWNlLCBhbmQgaXRzXG4gICAqIHZhbHVlIGlzIHRoZSBuYW1lIG9mIHRoZSBwYWNrYWdlIHdoaWNoIGhhcyB0aGUgcGx1Z2luXG4gICAqIGltcGxlbWVudGF0aW9uLlxuICAgKiBFeC46XG4gICAqIHBsdWdpbnM6IHtcbiAgICogICdodHRwJzogJ0BvcGVuY2Vuc3VzL29wZW5jZW5zdXMtaW5zdHJ1bWVudGF0aW9uLWh0dHAnLFxuICAgKiAgJ21vbmdvZGItY29yZSc6ICdAb3BlbmNlbnN1cy9vcGVuY2Vuc3VzLWluc3RydW1lbnRhdGlvbi1tb25nb2RiLWNvcmUnLFxuICAgKiAgIC4uLlxuICAgKiB9XG4gICAqIEFueSB1c2VyLXByb3ZpZGVkIHZhbHVlIHdpbGwgYmUgYWRkZWQgdG8gdGhlIGRlZmF1bHQgbGlzdC5cbiAgICogSXQgd2lsbCBvdmVycmlkZSBhbnkgZGVmYXVsdCBwbHVnaW4gZm9yIHRoZSBzYW1lIGtleS5cbiAgICovXG4gIHBsdWdpbnM/OiBQbHVnaW5OYW1lcztcbiAgLyoqIEFuIGV4cG9ydGVyIG9iamVjdCAqL1xuICBleHBvcnRlcj86IEV4cG9ydGVyO1xuICAvKiogQW4gaW5zdGFuY2Ugb2YgYSBsb2dnZXIgICovXG4gIGxvZ2dlcj86IExvZ2dlcjtcbiAgLyoqIEFuIGluc3RhbmNlIG9mIGEgc3RhdHMgICovXG4gIHN0YXRzPzogU3RhdHM7XG59XG5cbi8qKiBHbG9iYWwgY29uZmlndXJhdGlvbiBvZiB0cmFjZSBzZXJ2aWNlICovXG5leHBvcnQgaW50ZXJmYWNlIFRyYWNlUGFyYW1zIHtcbiAgLyoqXG4gICAqIG51bWJlck9mQW5ub250YXRpb25FdmVudHNQZXJTcGFuIGlzIG51bWJlciBvZiBhbm5vdGF0aW9uIGV2ZW50cyBwZXJcbiAgICogc3BhblxuICAgKi9cbiAgbnVtYmVyT2ZBbm5vbnRhdGlvbkV2ZW50c1BlclNwYW4/OiBudW1iZXI7XG4gIC8qKiBudW1iZXJPZk1lc3NhZ2VFdmVudHNQZXJTcGFuIGlzIG51bWJlciBvZiBtZXNzYWdlIGV2ZW50cyBwZXIgc3BhbiAqL1xuICBudW1iZXJPZk1lc3NhZ2VFdmVudHNQZXJTcGFuPzogbnVtYmVyO1xuICAvKiogbnVtYmVyT2ZBdHRyaWJ1dGVzUGVyU3BhbiBpcyBudW1iZXIgb2YgYXR0cmlidXRlcyBwZXIgc3BhbiAqL1xuICBudW1iZXJPZkF0dHJpYnV0ZXNQZXJTcGFuPzogbnVtYmVyO1xuICAvKiogbnVtYmVyT2ZMaW5rc1BlclNwYW4gaXMgbnVtYmVyIG9mIGxpbmtzIHBlciBzcGFuICovXG4gIG51bWJlck9mTGlua3NQZXJTcGFuPzogbnVtYmVyO1xufVxuXG5leHBvcnQgdHlwZSBDb25maWcgPSBUcmFjaW5nQ29uZmlnICYgVHJhY2VyQ29uZmlnICYgQnVmZmVyQ29uZmlnO1xuIl19
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMjU5b2E1NDk1YiIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJlbmQiLCJmbk1hcCIsImJyYW5jaE1hcCIsInMiLCJmIiwiYiIsImlucHV0U291cmNlTWFwIiwidmVyc2lvbiIsImZpbGUiLCJzb3VyY2VzIiwibmFtZXMiLCJtYXBwaW5ncyIsInNvdXJjZXNDb250ZW50IiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSJdLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VybWFpdGhhL3RyYWRlbWFzdGVyL2xpYnMvbGliLWV4dGVybmFsLW9wZW5jZW5zdXMtbm9kZS9zcmMvdHJhY2UvY29uZmlnL3R5cGVzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTgsIE9wZW5DZW5zdXMgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vLi4vY29tbW9uL3R5cGVzJztcbmltcG9ydCB7IEV4cG9ydGVyIH0gZnJvbSAnLi4vLi4vZXhwb3J0ZXJzL3R5cGVzJztcbmltcG9ydCB7IFN0YXRzIH0gZnJvbSAnLi4vLi4vc3RhdHMvdHlwZXMnO1xuaW1wb3J0IHsgUGx1Z2luTmFtZXMgfSBmcm9tICcuLi9pbnN0cnVtZW50YXRpb24vdHlwZXMnO1xuaW1wb3J0IHsgQXR0cmlidXRlcyB9IGZyb20gJy4uL21vZGVsL3R5cGVzJztcbmltcG9ydCB7IFByb3BhZ2F0aW9uIH0gZnJvbSAnLi4vcHJvcGFnYXRpb24vdHlwZXMnO1xuXG4vKiogSW50ZXJmYWNlIGNvbmZpZ3VyYXRpb24gZm9yIGEgYnVmZmVyLiAqL1xuZXhwb3J0IGludGVyZmFjZSBCdWZmZXJDb25maWcge1xuICAvKiogTWF4aW11bSBzaXplIG9mIGEgYnVmZmVyLiAqL1xuICBidWZmZXJTaXplPzogbnVtYmVyO1xuICAvKiogTWF4IHRpbWUgZm9yIGEgYnVmZmVyIGNhbiB3YWl0IGJlZm9yZSBiZWluZyBzZW50ICovXG4gIGJ1ZmZlclRpbWVvdXQ/OiBudW1iZXI7XG4gIC8qKiBBIGxvZ2dlciBvYmplY3QgICovXG4gIGxvZ2dlcj86IExvZ2dlcjtcbn1cblxuLyoqIERlZmluZXMgdHJhY2VyIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVycyAqL1xuZXhwb3J0IGludGVyZmFjZSBUcmFjZXJDb25maWcge1xuICAvKiogQSBzZXQgb2YgZGVmYXVsdCBhdHRyaWJ1dGVzIGVhY2ggaW4gdGhlIGZvcm1hdCBbS0VZXTpbVkFMVUVdICovXG4gIGRlZmF1bHRBdHRyaWJ1dGVzPzogQXR0cmlidXRlcztcbiAgLyoqIERldGVybWluZXMgdGhlIHNhbXBsaW5nIHJhdGUuIFJhbmdlcyBmcm9tIDAuMCB0byAxLjAgKi9cbiAgc2FtcGxpbmdSYXRlPzogbnVtYmVyO1xuICAvKiogQSBsb2dnZXIgb2JqZWN0ICAqL1xuICBsb2dnZXI/OiBMb2dnZXI7XG4gIC8qKiBBIHByb3BhZ2F0aW9uIGluc3RhbmNlICovXG4gIHByb3BhZ2F0aW9uPzogUHJvcGFnYXRpb247XG4gIC8qKiBUcmFjZSBQYXJhbWV0ZXJzICovXG4gIHRyYWNlUGFyYW1zPzogVHJhY2VQYXJhbXM7XG59XG5cbi8qKiBBdmFpbGFibGUgY29uZmlndXJhdGlvbiBvcHRpb25zLiAqL1xuZXhwb3J0IGludGVyZmFjZSBUcmFjaW5nQ29uZmlnIHtcbiAgLyoqIGxldmVsIG9mIGxvZ2dlciAtIDA6ZGlzYWJsZSwgMTogZXJyb3IsIDI6IHdhcm4sIDM6IGluZm8sIDQ6IGRlYnVnICAqL1xuICBsb2dMZXZlbD86IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIG1heGltdW0gbnVtYmVyIG9mIGNoYXJhY3RlcnMgcmVwb3J0ZWQgb24gYSBsYWJlbCB2YWx1ZS5cbiAgICovXG4gIG1heGltdW1MYWJlbFZhbHVlU2l6ZT86IG51bWJlcjtcblxuICAvKipcbiAgICogQSBsaXN0IG9mIHRyYWNlIGluc3RydW1lbnRhdGlvbnMgcGx1Z2lucyB0byBsb2FkLlxuICAgKiBFYWNoIGtleSBpcyB0aGUgbmFtZSBvZiB0aGUgbW9kdWxlIHRvIHRyYWNlLCBhbmQgaXRzXG4gICAqIHZhbHVlIGlzIHRoZSBuYW1lIG9mIHRoZSBwYWNrYWdlIHdoaWNoIGhhcyB0aGUgcGx1Z2luXG4gICAqIGltcGxlbWVudGF0aW9uLlxuICAgKiBFeC46XG4gICAqIHBsdWdpbnM6IHtcbiAgICogICdodHRwJzogJ0BvcGVuY2Vuc3VzL29wZW5jZW5zdXMtaW5zdHJ1bWVudGF0aW9uLWh0dHAnLFxuICAgKiAgJ21vbmdvZGItY29yZSc6ICdAb3BlbmNlbnN1cy9vcGVuY2Vuc3VzLWluc3RydW1lbnRhdGlvbi1tb25nb2RiLWNvcmUnLFxuICAgKiAgIC4uLlxuICAgKiB9XG4gICAqIEFueSB1c2VyLXByb3ZpZGVkIHZhbHVlIHdpbGwgYmUgYWRkZWQgdG8gdGhlIGRlZmF1bHQgbGlzdC5cbiAgICogSXQgd2lsbCBvdmVycmlkZSBhbnkgZGVmYXVsdCBwbHVnaW4gZm9yIHRoZSBzYW1lIGtleS5cbiAgICovXG4gIHBsdWdpbnM/OiBQbHVnaW5OYW1lcztcbiAgLyoqIEFuIGV4cG9ydGVyIG9iamVjdCAqL1xuICBleHBvcnRlcj86IEV4cG9ydGVyO1xuICAvKiogQW4gaW5zdGFuY2Ugb2YgYSBsb2dnZXIgICovXG4gIGxvZ2dlcj86IExvZ2dlcjtcbiAgLyoqIEFuIGluc3RhbmNlIG9mIGEgc3RhdHMgICovXG4gIHN0YXRzPzogU3RhdHM7XG59XG5cbi8qKiBHbG9iYWwgY29uZmlndXJhdGlvbiBvZiB0cmFjZSBzZXJ2aWNlICovXG5leHBvcnQgaW50ZXJmYWNlIFRyYWNlUGFyYW1zIHtcbiAgLyoqXG4gICAqIG51bWJlck9mQW5ub250YXRpb25FdmVudHNQZXJTcGFuIGlzIG51bWJlciBvZiBhbm5vdGF0aW9uIGV2ZW50cyBwZXJcbiAgICogc3BhblxuICAgKi9cbiAgbnVtYmVyT2ZBbm5vbnRhdGlvbkV2ZW50c1BlclNwYW4/OiBudW1iZXI7XG4gIC8qKiBudW1iZXJPZk1lc3NhZ2VFdmVudHNQZXJTcGFuIGlzIG51bWJlciBvZiBtZXNzYWdlIGV2ZW50cyBwZXIgc3BhbiAqL1xuICBudW1iZXJPZk1lc3NhZ2VFdmVudHNQZXJTcGFuPzogbnVtYmVyO1xuICAvKiogbnVtYmVyT2ZBdHRyaWJ1dGVzUGVyU3BhbiBpcyBudW1iZXIgb2YgYXR0cmlidXRlcyBwZXIgc3BhbiAqL1xuICBudW1iZXJPZkF0dHJpYnV0ZXNQZXJTcGFuPzogbnVtYmVyO1xuICAvKiogbnVtYmVyT2ZMaW5rc1BlclNwYW4gaXMgbnVtYmVyIG9mIGxpbmtzIHBlciBzcGFuICovXG4gIG51bWJlck9mTGlua3NQZXJTcGFuPzogbnVtYmVyO1xufVxuXG5leHBvcnQgdHlwZSBDb25maWcgPSBUcmFjaW5nQ29uZmlnICYgVHJhY2VyQ29uZmlnICYgQnVmZmVyQ29uZmlnO1xuIl0sIm1hcHBpbmdzIjoiYUFBQTs7Ozs7Ozs7Ozs7Ozs7R0FBQSxTQUFBQSxlQUFBLE1BQUFDLElBQUEsaUdBQUFDLElBQUEsZ0RBQUFDLE1BQUEsS0FBQUMsUUFBQSxzQkFBQUMsR0FBQSxvQkFBQUMsWUFBQSxFQUFBTCxJQUFBLDZGQUFBTSxZQUFBLE9BQUFDLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLE9BQUFFLEtBQUEsSUFBQUMsU0FBQSxJQUFBQyxDQUFBLFNBQUFDLENBQUEsSUFBQUMsQ0FBQSxJQUFBQyxjQUFBLEVBQUFDLE9BQUEsR0FBQUMsSUFBQSw2RkFBQUMsT0FBQSwrRkFBQUMsS0FBQSxJQUFBQyxRQUFBLDJCQUFBQyxjQUFBLCtzR0FBQUMsZUFBQSw0Q0FBQXRCLElBQUEsaURBQUF1QixRQUFBLENBQUF0QixNQUFBLENBQUFFLEdBQUEsSUFBQUYsTUFBQSxDQUFBRSxHQUFBLFVBQUFvQixRQUFBLENBQUF4QixJQUFBLEdBQUF3QixRQUFBLENBQUF4QixJQUFBLEVBQUFDLElBQUEsR0FBQUEsSUFBQSxFQUFBdUIsUUFBQSxDQUFBeEIsSUFBQSxFQUFBSyxZQUFBLE1BQUFvQixjQUFBLENBQUFELFFBQUEsQ0FBQXhCLElBQUEsR0FjRztBQUFBRCxjQUFBLFNBQUFBLENBQUEsU0FBQTBCLGNBQUEsV0FBQUEsY0FBQSxFQUFBMUIsY0FBQSxHQUFBQSxjQUFBLEdBQUFjLENBQUEsTSJ9