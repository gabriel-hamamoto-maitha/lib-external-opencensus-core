"use strict";function cov_13tm7n4g2r(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-utils.ts";var hash="ad7295d33b1aea195f3410951e2f8526534e9816";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-utils.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:18,column:15},end:{line:18,column:32}},"2":{start:{line:19,column:16},end:{line:19,column:47}},"3":{start:{line:20,column:0},end:{line:42,column:3}},"4":{start:{line:21,column:25},end:{line:21,column:43}},"5":{start:{line:22,column:35},end:{line:25,column:5}},"6":{start:{line:26,column:27},end:{line:26,column:63}},"7":{start:{line:27,column:27},end:{line:27,column:63}},"8":{start:{line:28,column:4},end:{line:31,column:7}},"9":{start:{line:29,column:21},end:{line:29,column:58}},"10":{start:{line:30,column:8},end:{line:30,column:44}},"11":{start:{line:32,column:4},end:{line:35,column:7}},"12":{start:{line:33,column:21},end:{line:33,column:68}},"13":{start:{line:34,column:8},end:{line:34,column:45}},"14":{start:{line:36,column:4},end:{line:38,column:7}},"15":{start:{line:37,column:8},end:{line:37,column:113}},"16":{start:{line:39,column:4},end:{line:41,column:7}},"17":{start:{line:40,column:8},end:{line:40,column:64}},"18":{start:{line:43,column:0},end:{line:57,column:3}},"19":{start:{line:44,column:24},end:{line:44,column:39}},"20":{start:{line:45,column:4},end:{line:48,column:7}},"21":{start:{line:46,column:28},end:{line:46,column:62}},"22":{start:{line:47,column:8},end:{line:47,column:59}},"23":{start:{line:49,column:4},end:{line:56,column:7}},"24":{start:{line:50,column:28},end:{line:50,column:62}},"25":{start:{line:51,column:8},end:{line:55,column:11}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:20,column:28},end:{line:20,column:29}},loc:{start:{line:20,column:34},end:{line:42,column:1}},line:20},"1":{name:"(anonymous_1)",decl:{start:{line:28,column:46},end:{line:28,column:47}},loc:{start:{line:28,column:52},end:{line:31,column:5}},line:28},"2":{name:"(anonymous_2)",decl:{start:{line:32,column:48},end:{line:32,column:49}},loc:{start:{line:32,column:54},end:{line:35,column:5}},line:32},"3":{name:"(anonymous_3)",decl:{start:{line:36,column:58},end:{line:36,column:59}},loc:{start:{line:36,column:64},end:{line:38,column:5}},line:36},"4":{name:"(anonymous_4)",decl:{start:{line:39,column:53},end:{line:39,column:54}},loc:{start:{line:39,column:59},end:{line:41,column:5}},line:39},"5":{name:"(anonymous_5)",decl:{start:{line:43,column:36},end:{line:43,column:37}},loc:{start:{line:43,column:42},end:{line:57,column:1}},line:43},"6":{name:"(anonymous_6)",decl:{start:{line:45,column:46},end:{line:45,column:47}},loc:{start:{line:45,column:52},end:{line:48,column:5}},line:45},"7":{name:"(anonymous_7)",decl:{start:{line:49,column:48},end:{line:49,column:49}},loc:{start:{line:49,column:54},end:{line:56,column:5}},line:49}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},b:{},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-utils.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-utils.ts"],names:[],mappings:";;AAAA;;;;;;;;;;;;;;GAcG;AACH,iCAAiC;AAEjC,gDAAgF;AAEhF,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,MAAM,YAAY,GAAiB,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;IACtD,MAAM,sBAAsB,GAAiB;QAC3C,EAAE,KAAK,EAAE,KAAK,EAAE;QAChB,EAAE,KAAK,EAAE,IAAI,EAAE;KAChB,CAAC;IACF,MAAM,cAAc,GAAiB,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;IAC1E,MAAM,cAAc,GAAiB,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;IAC1E,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;QAC7C,MAAM,IAAI,GAAG,uBAAe,CAAC,YAAY,CAAC,CAAC;QAC3C,MAAM,CAAC,eAAe,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACtC,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;QAC/C,MAAM,IAAI,GAAG,uBAAe,CAAC,sBAAsB,CAAC,CAAC;QACrD,MAAM,CAAC,eAAe,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;QACzD,MAAM,CAAC,eAAe,CACpB,uBAAe,CAAC,cAAc,CAAC,EAC/B,uBAAe,CAAC,cAAc,CAAC,CAChC,CAAC;IACJ,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;QACpD,MAAM,CAAC,eAAe,CAAC,uBAAe,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AACH,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;IACvC,MAAM,WAAW,GAAe,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;IAChD,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;QAC7C,MAAM,WAAW,GAAG,+BAAuB,CAAC,CAAC,CAAC,CAAC;QAC/C,MAAM,CAAC,eAAe,CAAC,WAAW,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;QAC/C,MAAM,WAAW,GAAG,+BAAuB,CAAC,CAAC,CAAC,CAAC;QAC/C,MAAM,CAAC,eAAe,CAAC,WAAW,EAAE;YAClC,WAAW;YACX,WAAW;YACX,WAAW;SACZ,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as assert from 'assert';\nimport { LabelValue } from '../src/metrics/export/types';\nimport { hashLabelValues, initializeDefaultLabels } from '../src/metrics/utils';\n\ndescribe('hashLabelValues', () => {\n  const LABEL_VALUES: LabelValue[] = [{ value: '200' }];\n  const LABEL_VALUES_WITH_NULL: LabelValue[] = [\n    { value: '200' },\n    { value: null },\n  ];\n  const LABEL_VALUES_1: LabelValue[] = [{ value: '200' }, { value: '400' }];\n  const LABEL_VALUES_2: LabelValue[] = [{ value: '400' }, { value: '200' }];\n  it('should return hash for single Value', () => {\n    const hash = hashLabelValues(LABEL_VALUES);\n    assert.deepStrictEqual(hash, '200');\n  });\n  it('should return hash for Value and null', () => {\n    const hash = hashLabelValues(LABEL_VALUES_WITH_NULL);\n    assert.deepStrictEqual(hash, '200,');\n  });\n  it('should return same hash for interchanged labels', () => {\n    assert.deepStrictEqual(\n      hashLabelValues(LABEL_VALUES_1),\n      hashLabelValues(LABEL_VALUES_2)\n    );\n  });\n  it('should return empty string for empty array', () => {\n    assert.deepStrictEqual(hashLabelValues([]), '');\n  });\n});\ndescribe('initializeDefaultLabels', () => {\n  const UNSET_VALUE: LabelValue = { value: null };\n  it('should return single default labels', () => {\n    const labelValues = initializeDefaultLabels(1);\n    assert.deepStrictEqual(labelValues, [UNSET_VALUE]);\n  });\n  it('should return multiple default labels', () => {\n    const labelValues = initializeDefaultLabels(3);\n    assert.deepStrictEqual(labelValues, [\n      UNSET_VALUE,\n      UNSET_VALUE,\n      UNSET_VALUE,\n    ]);\n  });\n});\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"ad7295d33b1aea195f3410951e2f8526534e9816"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_13tm7n4g2r=function(){return actualCoverage;};}return actualCoverage;}cov_13tm7n4g2r();cov_13tm7n4g2r().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */const assert=(cov_13tm7n4g2r().s[1]++,require("assert"));const utils_1=(cov_13tm7n4g2r().s[2]++,require("../src/metrics/utils"));cov_13tm7n4g2r().s[3]++;describe('hashLabelValues',()=>{cov_13tm7n4g2r().f[0]++;const LABEL_VALUES=(cov_13tm7n4g2r().s[4]++,[{value:'200'}]);const LABEL_VALUES_WITH_NULL=(cov_13tm7n4g2r().s[5]++,[{value:'200'},{value:null}]);const LABEL_VALUES_1=(cov_13tm7n4g2r().s[6]++,[{value:'200'},{value:'400'}]);const LABEL_VALUES_2=(cov_13tm7n4g2r().s[7]++,[{value:'400'},{value:'200'}]);cov_13tm7n4g2r().s[8]++;it('should return hash for single Value',()=>{cov_13tm7n4g2r().f[1]++;const hash=(cov_13tm7n4g2r().s[9]++,utils_1.hashLabelValues(LABEL_VALUES));cov_13tm7n4g2r().s[10]++;assert.deepStrictEqual(hash,'200');});cov_13tm7n4g2r().s[11]++;it('should return hash for Value and null',()=>{cov_13tm7n4g2r().f[2]++;const hash=(cov_13tm7n4g2r().s[12]++,utils_1.hashLabelValues(LABEL_VALUES_WITH_NULL));cov_13tm7n4g2r().s[13]++;assert.deepStrictEqual(hash,'200,');});cov_13tm7n4g2r().s[14]++;it('should return same hash for interchanged labels',()=>{cov_13tm7n4g2r().f[3]++;cov_13tm7n4g2r().s[15]++;assert.deepStrictEqual(utils_1.hashLabelValues(LABEL_VALUES_1),utils_1.hashLabelValues(LABEL_VALUES_2));});cov_13tm7n4g2r().s[16]++;it('should return empty string for empty array',()=>{cov_13tm7n4g2r().f[4]++;cov_13tm7n4g2r().s[17]++;assert.deepStrictEqual(utils_1.hashLabelValues([]),'');});});cov_13tm7n4g2r().s[18]++;describe('initializeDefaultLabels',()=>{cov_13tm7n4g2r().f[5]++;const UNSET_VALUE=(cov_13tm7n4g2r().s[19]++,{value:null});cov_13tm7n4g2r().s[20]++;it('should return single default labels',()=>{cov_13tm7n4g2r().f[6]++;const labelValues=(cov_13tm7n4g2r().s[21]++,utils_1.initializeDefaultLabels(1));cov_13tm7n4g2r().s[22]++;assert.deepStrictEqual(labelValues,[UNSET_VALUE]);});cov_13tm7n4g2r().s[23]++;it('should return multiple default labels',()=>{cov_13tm7n4g2r().f[7]++;const labelValues=(cov_13tm7n4g2r().s[24]++,utils_1.initializeDefaultLabels(3));cov_13tm7n4g2r().s[25]++;assert.deepStrictEqual(labelValues,[UNSET_VALUE,UNSET_VALUE,UNSET_VALUE]);});});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3VzZXJtYWl0aGEvdHJhZGVtYXN0ZXIvbGlicy9saWItZXh0ZXJuYWwtb3BlbmNlbnN1cy1ub2RlL3Rlc3QvdGVzdC11dGlscy50cyIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXJtYWl0aGEvdHJhZGVtYXN0ZXIvbGlicy9saWItZXh0ZXJuYWwtb3BlbmNlbnN1cy1ub2RlL3Rlc3QvdGVzdC11dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7Ozs7Ozs7OztHQWNHO0FBQ0gsaUNBQWlDO0FBRWpDLGdEQUFnRjtBQUVoRixRQUFRLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFO0lBQy9CLE1BQU0sWUFBWSxHQUFpQixDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDdEQsTUFBTSxzQkFBc0IsR0FBaUI7UUFDM0MsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFO1FBQ2hCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtLQUNoQixDQUFDO0lBQ0YsTUFBTSxjQUFjLEdBQWlCLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUMxRSxNQUFNLGNBQWMsR0FBaUIsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzFFLEVBQUUsQ0FBQyxxQ0FBcUMsRUFBRSxHQUFHLEVBQUU7UUFDN0MsTUFBTSxJQUFJLEdBQUcsdUJBQWUsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUMzQyxNQUFNLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN0QyxDQUFDLENBQUMsQ0FBQztJQUNILEVBQUUsQ0FBQyx1Q0FBdUMsRUFBRSxHQUFHLEVBQUU7UUFDL0MsTUFBTSxJQUFJLEdBQUcsdUJBQWUsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBQ3JELE1BQU0sQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3ZDLENBQUMsQ0FBQyxDQUFDO0lBQ0gsRUFBRSxDQUFDLGlEQUFpRCxFQUFFLEdBQUcsRUFBRTtRQUN6RCxNQUFNLENBQUMsZUFBZSxDQUNwQix1QkFBZSxDQUFDLGNBQWMsQ0FBQyxFQUMvQix1QkFBZSxDQUFDLGNBQWMsQ0FBQyxDQUNoQyxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7SUFDSCxFQUFFLENBQUMsNENBQTRDLEVBQUUsR0FBRyxFQUFFO1FBQ3BELE1BQU0sQ0FBQyxlQUFlLENBQUMsdUJBQWUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNsRCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0gsUUFBUSxDQUFDLHlCQUF5QixFQUFFLEdBQUcsRUFBRTtJQUN2QyxNQUFNLFdBQVcsR0FBZSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQztJQUNoRCxFQUFFLENBQUMscUNBQXFDLEVBQUUsR0FBRyxFQUFFO1FBQzdDLE1BQU0sV0FBVyxHQUFHLCtCQUF1QixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9DLE1BQU0sQ0FBQyxlQUFlLENBQUMsV0FBVyxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztJQUNyRCxDQUFDLENBQUMsQ0FBQztJQUNILEVBQUUsQ0FBQyx1Q0FBdUMsRUFBRSxHQUFHLEVBQUU7UUFDL0MsTUFBTSxXQUFXLEdBQUcsK0JBQXVCLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0MsTUFBTSxDQUFDLGVBQWUsQ0FBQyxXQUFXLEVBQUU7WUFDbEMsV0FBVztZQUNYLFdBQVc7WUFDWCxXQUFXO1NBQ1osQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTgsIE9wZW5DZW5zdXMgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCAqIGFzIGFzc2VydCBmcm9tICdhc3NlcnQnO1xuaW1wb3J0IHsgTGFiZWxWYWx1ZSB9IGZyb20gJy4uL3NyYy9tZXRyaWNzL2V4cG9ydC90eXBlcyc7XG5pbXBvcnQgeyBoYXNoTGFiZWxWYWx1ZXMsIGluaXRpYWxpemVEZWZhdWx0TGFiZWxzIH0gZnJvbSAnLi4vc3JjL21ldHJpY3MvdXRpbHMnO1xuXG5kZXNjcmliZSgnaGFzaExhYmVsVmFsdWVzJywgKCkgPT4ge1xuICBjb25zdCBMQUJFTF9WQUxVRVM6IExhYmVsVmFsdWVbXSA9IFt7IHZhbHVlOiAnMjAwJyB9XTtcbiAgY29uc3QgTEFCRUxfVkFMVUVTX1dJVEhfTlVMTDogTGFiZWxWYWx1ZVtdID0gW1xuICAgIHsgdmFsdWU6ICcyMDAnIH0sXG4gICAgeyB2YWx1ZTogbnVsbCB9LFxuICBdO1xuICBjb25zdCBMQUJFTF9WQUxVRVNfMTogTGFiZWxWYWx1ZVtdID0gW3sgdmFsdWU6ICcyMDAnIH0sIHsgdmFsdWU6ICc0MDAnIH1dO1xuICBjb25zdCBMQUJFTF9WQUxVRVNfMjogTGFiZWxWYWx1ZVtdID0gW3sgdmFsdWU6ICc0MDAnIH0sIHsgdmFsdWU6ICcyMDAnIH1dO1xuICBpdCgnc2hvdWxkIHJldHVybiBoYXNoIGZvciBzaW5nbGUgVmFsdWUnLCAoKSA9PiB7XG4gICAgY29uc3QgaGFzaCA9IGhhc2hMYWJlbFZhbHVlcyhMQUJFTF9WQUxVRVMpO1xuICAgIGFzc2VydC5kZWVwU3RyaWN0RXF1YWwoaGFzaCwgJzIwMCcpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCByZXR1cm4gaGFzaCBmb3IgVmFsdWUgYW5kIG51bGwnLCAoKSA9PiB7XG4gICAgY29uc3QgaGFzaCA9IGhhc2hMYWJlbFZhbHVlcyhMQUJFTF9WQUxVRVNfV0lUSF9OVUxMKTtcbiAgICBhc3NlcnQuZGVlcFN0cmljdEVxdWFsKGhhc2gsICcyMDAsJyk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIHJldHVybiBzYW1lIGhhc2ggZm9yIGludGVyY2hhbmdlZCBsYWJlbHMnLCAoKSA9PiB7XG4gICAgYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChcbiAgICAgIGhhc2hMYWJlbFZhbHVlcyhMQUJFTF9WQUxVRVNfMSksXG4gICAgICBoYXNoTGFiZWxWYWx1ZXMoTEFCRUxfVkFMVUVTXzIpXG4gICAgKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgcmV0dXJuIGVtcHR5IHN0cmluZyBmb3IgZW1wdHkgYXJyYXknLCAoKSA9PiB7XG4gICAgYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChoYXNoTGFiZWxWYWx1ZXMoW10pLCAnJyk7XG4gIH0pO1xufSk7XG5kZXNjcmliZSgnaW5pdGlhbGl6ZURlZmF1bHRMYWJlbHMnLCAoKSA9PiB7XG4gIGNvbnN0IFVOU0VUX1ZBTFVFOiBMYWJlbFZhbHVlID0geyB2YWx1ZTogbnVsbCB9O1xuICBpdCgnc2hvdWxkIHJldHVybiBzaW5nbGUgZGVmYXVsdCBsYWJlbHMnLCAoKSA9PiB7XG4gICAgY29uc3QgbGFiZWxWYWx1ZXMgPSBpbml0aWFsaXplRGVmYXVsdExhYmVscygxKTtcbiAgICBhc3NlcnQuZGVlcFN0cmljdEVxdWFsKGxhYmVsVmFsdWVzLCBbVU5TRVRfVkFMVUVdKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgcmV0dXJuIG11bHRpcGxlIGRlZmF1bHQgbGFiZWxzJywgKCkgPT4ge1xuICAgIGNvbnN0IGxhYmVsVmFsdWVzID0gaW5pdGlhbGl6ZURlZmF1bHRMYWJlbHMoMyk7XG4gICAgYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChsYWJlbFZhbHVlcywgW1xuICAgICAgVU5TRVRfVkFMVUUsXG4gICAgICBVTlNFVF9WQUxVRSxcbiAgICAgIFVOU0VUX1ZBTFVFLFxuICAgIF0pO1xuICB9KTtcbn0pO1xuIl19
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhc3NlcnQiLCJjb3ZfMTN0bTduNGcyciIsInMiLCJyZXF1aXJlIiwidXRpbHNfMSIsImRlc2NyaWJlIiwiZiIsIkxBQkVMX1ZBTFVFUyIsInZhbHVlIiwiTEFCRUxfVkFMVUVTX1dJVEhfTlVMTCIsIkxBQkVMX1ZBTFVFU18xIiwiTEFCRUxfVkFMVUVTXzIiLCJpdCIsImhhc2giLCJoYXNoTGFiZWxWYWx1ZXMiLCJkZWVwU3RyaWN0RXF1YWwiLCJVTlNFVF9WQUxVRSIsImxhYmVsVmFsdWVzIiwiaW5pdGlhbGl6ZURlZmF1bHRMYWJlbHMiXSwic291cmNlcyI6WyIvVXNlcnMvdXNlcm1haXRoYS90cmFkZW1hc3Rlci9saWJzL2xpYi1leHRlcm5hbC1vcGVuY2Vuc3VzLW5vZGUvdGVzdC90ZXN0LXV0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTgsIE9wZW5DZW5zdXMgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCAqIGFzIGFzc2VydCBmcm9tICdhc3NlcnQnO1xuaW1wb3J0IHsgTGFiZWxWYWx1ZSB9IGZyb20gJy4uL3NyYy9tZXRyaWNzL2V4cG9ydC90eXBlcyc7XG5pbXBvcnQgeyBoYXNoTGFiZWxWYWx1ZXMsIGluaXRpYWxpemVEZWZhdWx0TGFiZWxzIH0gZnJvbSAnLi4vc3JjL21ldHJpY3MvdXRpbHMnO1xuXG5kZXNjcmliZSgnaGFzaExhYmVsVmFsdWVzJywgKCkgPT4ge1xuICBjb25zdCBMQUJFTF9WQUxVRVM6IExhYmVsVmFsdWVbXSA9IFt7IHZhbHVlOiAnMjAwJyB9XTtcbiAgY29uc3QgTEFCRUxfVkFMVUVTX1dJVEhfTlVMTDogTGFiZWxWYWx1ZVtdID0gW1xuICAgIHsgdmFsdWU6ICcyMDAnIH0sXG4gICAgeyB2YWx1ZTogbnVsbCB9LFxuICBdO1xuICBjb25zdCBMQUJFTF9WQUxVRVNfMTogTGFiZWxWYWx1ZVtdID0gW3sgdmFsdWU6ICcyMDAnIH0sIHsgdmFsdWU6ICc0MDAnIH1dO1xuICBjb25zdCBMQUJFTF9WQUxVRVNfMjogTGFiZWxWYWx1ZVtdID0gW3sgdmFsdWU6ICc0MDAnIH0sIHsgdmFsdWU6ICcyMDAnIH1dO1xuICBpdCgnc2hvdWxkIHJldHVybiBoYXNoIGZvciBzaW5nbGUgVmFsdWUnLCAoKSA9PiB7XG4gICAgY29uc3QgaGFzaCA9IGhhc2hMYWJlbFZhbHVlcyhMQUJFTF9WQUxVRVMpO1xuICAgIGFzc2VydC5kZWVwU3RyaWN0RXF1YWwoaGFzaCwgJzIwMCcpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCByZXR1cm4gaGFzaCBmb3IgVmFsdWUgYW5kIG51bGwnLCAoKSA9PiB7XG4gICAgY29uc3QgaGFzaCA9IGhhc2hMYWJlbFZhbHVlcyhMQUJFTF9WQUxVRVNfV0lUSF9OVUxMKTtcbiAgICBhc3NlcnQuZGVlcFN0cmljdEVxdWFsKGhhc2gsICcyMDAsJyk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIHJldHVybiBzYW1lIGhhc2ggZm9yIGludGVyY2hhbmdlZCBsYWJlbHMnLCAoKSA9PiB7XG4gICAgYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChcbiAgICAgIGhhc2hMYWJlbFZhbHVlcyhMQUJFTF9WQUxVRVNfMSksXG4gICAgICBoYXNoTGFiZWxWYWx1ZXMoTEFCRUxfVkFMVUVTXzIpXG4gICAgKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgcmV0dXJuIGVtcHR5IHN0cmluZyBmb3IgZW1wdHkgYXJyYXknLCAoKSA9PiB7XG4gICAgYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChoYXNoTGFiZWxWYWx1ZXMoW10pLCAnJyk7XG4gIH0pO1xufSk7XG5kZXNjcmliZSgnaW5pdGlhbGl6ZURlZmF1bHRMYWJlbHMnLCAoKSA9PiB7XG4gIGNvbnN0IFVOU0VUX1ZBTFVFOiBMYWJlbFZhbHVlID0geyB2YWx1ZTogbnVsbCB9O1xuICBpdCgnc2hvdWxkIHJldHVybiBzaW5nbGUgZGVmYXVsdCBsYWJlbHMnLCAoKSA9PiB7XG4gICAgY29uc3QgbGFiZWxWYWx1ZXMgPSBpbml0aWFsaXplRGVmYXVsdExhYmVscygxKTtcbiAgICBhc3NlcnQuZGVlcFN0cmljdEVxdWFsKGxhYmVsVmFsdWVzLCBbVU5TRVRfVkFMVUVdKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgcmV0dXJuIG11bHRpcGxlIGRlZmF1bHQgbGFiZWxzJywgKCkgPT4ge1xuICAgIGNvbnN0IGxhYmVsVmFsdWVzID0gaW5pdGlhbGl6ZURlZmF1bHRMYWJlbHMoMyk7XG4gICAgYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChsYWJlbFZhbHVlcywgW1xuICAgICAgVU5TRVRfVkFMVUUsXG4gICAgICBVTlNFVF9WQUxVRSxcbiAgICAgIFVOU0VUX1ZBTFVFLFxuICAgIF0pO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOzRLQUFBOzs7Ozs7Ozs7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