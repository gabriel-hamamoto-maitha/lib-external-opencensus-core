"use strict";/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_yymyu1ft9(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/console-logger.ts";var hash="abce73c51fdabd2c9018d10c2d6c7c54e501a5b6";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/console-logger.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:0},end:{line:18,column:48}},"2":{start:{line:19,column:13},end:{line:19,column:28}},"3":{start:{line:20,column:18},end:{line:20,column:39}},"4":{start:{line:30,column:18},end:{line:30,column:20}},"5":{start:{line:31,column:8},end:{line:45,column:9}},"6":{start:{line:32,column:12},end:{line:37,column:13}},"7":{start:{line:33,column:16},end:{line:33,column:28}},"8":{start:{line:35,column:17},end:{line:37,column:13}},"9":{start:{line:36,column:16},end:{line:36,column:58}},"10":{start:{line:38,column:12},end:{line:38,column:59}},"11":{start:{line:40,column:13},end:{line:45,column:9}},"12":{start:{line:41,column:12},end:{line:41,column:37}},"13":{start:{line:44,column:12},end:{line:44,column:32}},"14":{start:{line:46,column:8},end:{line:47,column:35}},"15":{start:{line:47,column:12},end:{line:47,column:35}},"16":{start:{line:48,column:8},end:{line:51,column:11}},"17":{start:{line:60,column:8},end:{line:60,column:57}},"18":{start:{line:69,column:8},end:{line:69,column:56}},"19":{start:{line:78,column:8},end:{line:78,column:56}},"20":{start:{line:87,column:8},end:{line:87,column:57}},"21":{start:{line:90,column:0},end:{line:90,column:38}},"22":{start:{line:91,column:0},end:{line:91,column:68}},"23":{start:{line:97,column:15},end:{line:99,column:1}},"24":{start:{line:98,column:4},end:{line:98,column:38}},"25":{start:{line:100,column:0},end:{line:100,column:24}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:29,column:4},end:{line:29,column:5}},loc:{start:{line:29,column:25},end:{line:52,column:5}},line:29},"1":{name:"(anonymous_1)",decl:{start:{line:59,column:4},end:{line:59,column:5}},loc:{start:{line:59,column:28},end:{line:61,column:5}},line:59},"2":{name:"(anonymous_2)",decl:{start:{line:68,column:4},end:{line:68,column:5}},loc:{start:{line:68,column:27},end:{line:70,column:5}},line:68},"3":{name:"(anonymous_3)",decl:{start:{line:77,column:4},end:{line:77,column:5}},loc:{start:{line:77,column:27},end:{line:79,column:5}},line:77},"4":{name:"(anonymous_4)",decl:{start:{line:86,column:4},end:{line:86,column:5}},loc:{start:{line:86,column:28},end:{line:88,column:5}},line:86},"5":{name:"(anonymous_5)",decl:{start:{line:97,column:15},end:{line:97,column:16}},loc:{start:{line:97,column:28},end:{line:99,column:1}},line:97}},branchMap:{"0":{loc:{start:{line:31,column:8},end:{line:45,column:9}},type:"if",locations:[{start:{line:31,column:8},end:{line:45,column:9}},{start:{line:31,column:8},end:{line:45,column:9}}],line:31},"1":{loc:{start:{line:32,column:12},end:{line:37,column:13}},type:"if",locations:[{start:{line:32,column:12},end:{line:37,column:13}},{start:{line:32,column:12},end:{line:37,column:13}}],line:32},"2":{loc:{start:{line:35,column:17},end:{line:37,column:13}},type:"if",locations:[{start:{line:35,column:17},end:{line:37,column:13}},{start:{line:35,column:17},end:{line:37,column:13}}],line:35},"3":{loc:{start:{line:40,column:13},end:{line:45,column:9}},type:"if",locations:[{start:{line:40,column:13},end:{line:45,column:9}},{start:{line:40,column:13},end:{line:45,column:9}}],line:40},"4":{loc:{start:{line:44,column:18},end:{line:44,column:31}},type:"binary-expr",locations:[{start:{line:44,column:18},end:{line:44,column:25}},{start:{line:44,column:29},end:{line:44,column:31}}],line:44},"5":{loc:{start:{line:46,column:8},end:{line:47,column:35}},type:"if",locations:[{start:{line:46,column:8},end:{line:47,column:35}},{start:{line:46,column:8},end:{line:47,column:35}}],line:46},"6":{loc:{start:{line:50,column:19},end:{line:50,column:40}},type:"binary-expr",locations:[{start:{line:50,column:19},end:{line:50,column:28}},{start:{line:50,column:32},end:{line:50,column:40}}],line:50}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/console-logger.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/console-logger.ts"],names:[],mappings:";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,6BAA6B;AAG7B,MAAM,SAAS,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AAExC;;GAEG;AACH,MAAa,aAAa;IAKxB;;;OAGG;IACH,YAAY,OAA+C;QACzD,IAAI,GAAG,GAAwB,EAAE,CAAC;QAClC,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YAC/B,IAAI,OAAO,GAAG,CAAC,EAAE;gBACf,OAAO,GAAG,CAAC,CAAC;aACb;iBAAM,IAAI,OAAO,GAAG,aAAa,CAAC,MAAM,CAAC,MAAM,EAAE;gBAChD,OAAO,GAAG,aAAa,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;aAC3C;YACD,GAAG,GAAG,EAAE,KAAK,EAAE,aAAa,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC;SAChD;aAAM,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YACtC,GAAG,GAAG,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC;SAC1B;aAAM;YACL,GAAG,GAAG,OAAO,IAAI,EAAE,CAAC;SACrB;QACD,IAAI,GAAG,CAAC,KAAK;YAAE,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC;QACtC,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;YACtB,MAAM,EAAE,aAAa,CAAC,MAAM;YAC5B,KAAK,EAAE,GAAG,CAAC,KAAK,IAAI,QAAQ;SAC7B,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,kCAAkC;IAClC,KAAK,CAAC,OAAY,EAAE,GAAG,IAAW;QAChC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;IACnD,CAAC;IAED;;;;OAIG;IACH,kCAAkC;IAClC,IAAI,CAAC,OAAY,EAAE,GAAG,IAAW;QAC/B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;IAClD,CAAC;IAED;;;;OAIG;IACH,kCAAkC;IAClC,IAAI,CAAC,OAAY,EAAE,GAAG,IAAW;QAC/B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;IAClD,CAAC;IAED;;;;OAIG;IACH,kCAAkC;IAClC,KAAK,CAAC,OAAY,EAAE,GAAG,IAAW;QAChC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;IACnD,CAAC;;AApEH,sCAqEC;AAnEQ,oBAAM,GAAG,CAAC,QAAQ,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;AAqE/D;;;;GAIG;AACH,MAAM,MAAM,GAAG,CACb,OAA+C,EACjC,EAAE;IAChB,OAAO,IAAI,aAAa,CAAC,OAAO,CAAC,CAAC;AACpC,CAAC,CAAC;AAEO,wBAAM",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as util from 'util';\nimport * as types from './types';\n\nconst logDriver = require('log-driver');\n\n/**\n * This class implements a console logger.\n */\nexport class ConsoleLogger implements types.Logger {\n  private logger: typeof logDriver;\n  static LEVELS = ['silent', 'error', 'warn', 'info', 'debug'];\n  level?: string;\n\n  /**\n   * Constructs a new ConsoleLogger instance\n   * @param options A logger configuration object.\n   */\n  constructor(options?: types.LoggerOptions | string | number) {\n    let opt: types.LoggerOptions = {};\n    if (typeof options === 'number') {\n      if (options < 0) {\n        options = 0;\n      } else if (options > ConsoleLogger.LEVELS.length) {\n        options = ConsoleLogger.LEVELS.length - 1;\n      }\n      opt = { level: ConsoleLogger.LEVELS[options] };\n    } else if (typeof options === 'string') {\n      opt = { level: options };\n    } else {\n      opt = options || {};\n    }\n    if (opt.level) this.level = opt.level;\n    this.logger = logDriver({\n      levels: ConsoleLogger.LEVELS,\n      level: opt.level || 'silent',\n    });\n  }\n\n  /**\n   * Logger error function.\n   * @param message message error to log in console\n   * @param args arguments to log in console\n   */\n  // tslint:disable-next-line:no-any\n  error(message: any, ...args: any[]): void {\n    this.logger.error(util.format(message, ...args));\n  }\n\n  /**\n   * Logger warning function.\n   * @param message message warning to log in console\n   * @param args arguments to log in console\n   */\n  // tslint:disable-next-line:no-any\n  warn(message: any, ...args: any[]): void {\n    this.logger.warn(util.format(message, ...args));\n  }\n\n  /**\n   * Logger info function.\n   * @param message message info to log in console\n   * @param args arguments to log in console\n   */\n  // tslint:disable-next-line:no-any\n  info(message: any, ...args: any[]): void {\n    this.logger.info(util.format(message, ...args));\n  }\n\n  /**\n   * Logger debug function.\n   * @param message message debug to log in console\n   * @param args arguments to log in console\n   */\n  // tslint:disable-next-line:no-any\n  debug(message: any, ...args: any[]): void {\n    this.logger.debug(util.format(message, ...args));\n  }\n}\n\n/**\n * Function logger exported to others classes. Inspired by:\n * https://github.com/cainus/logdriver/blob/bba1761737ca72f04d6b445629848538d038484a/index.js#L50\n * @param options A logger options or strig to logger in console\n */\nconst logger = (\n  options?: types.LoggerOptions | string | number\n): types.Logger => {\n  return new ConsoleLogger(options);\n};\n\nexport { logger };\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"abce73c51fdabd2c9018d10c2d6c7c54e501a5b6"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_yymyu1ft9=function(){return actualCoverage;};}return actualCoverage;}cov_yymyu1ft9();cov_yymyu1ft9().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_yymyu1ft9().s[1]++;exports.logger=exports.ConsoleLogger=void 0;const util=(cov_yymyu1ft9().s[2]++,require("util"));const logDriver=(cov_yymyu1ft9().s[3]++,require('log-driver'));/**
 * This class implements a console logger.
 */class ConsoleLogger{/**
     * Constructs a new ConsoleLogger instance
     * @param options A logger configuration object.
     */constructor(options){cov_yymyu1ft9().f[0]++;let opt=(cov_yymyu1ft9().s[4]++,{});cov_yymyu1ft9().s[5]++;if(typeof options==='number'){cov_yymyu1ft9().b[0][0]++;cov_yymyu1ft9().s[6]++;if(options<0){cov_yymyu1ft9().b[1][0]++;cov_yymyu1ft9().s[7]++;options=0;}else{cov_yymyu1ft9().b[1][1]++;cov_yymyu1ft9().s[8]++;if(options>ConsoleLogger.LEVELS.length){cov_yymyu1ft9().b[2][0]++;cov_yymyu1ft9().s[9]++;options=ConsoleLogger.LEVELS.length-1;}else{cov_yymyu1ft9().b[2][1]++;}}cov_yymyu1ft9().s[10]++;opt={level:ConsoleLogger.LEVELS[options]};}else{cov_yymyu1ft9().b[0][1]++;cov_yymyu1ft9().s[11]++;if(typeof options==='string'){cov_yymyu1ft9().b[3][0]++;cov_yymyu1ft9().s[12]++;opt={level:options};}else{cov_yymyu1ft9().b[3][1]++;cov_yymyu1ft9().s[13]++;opt=(cov_yymyu1ft9().b[4][0]++,options)||(cov_yymyu1ft9().b[4][1]++,{});}}cov_yymyu1ft9().s[14]++;if(opt.level){cov_yymyu1ft9().b[5][0]++;cov_yymyu1ft9().s[15]++;this.level=opt.level;}else{cov_yymyu1ft9().b[5][1]++;}cov_yymyu1ft9().s[16]++;this.logger=logDriver({levels:ConsoleLogger.LEVELS,level:(cov_yymyu1ft9().b[6][0]++,opt.level)||(cov_yymyu1ft9().b[6][1]++,'silent')});}/**
     * Logger error function.
     * @param message message error to log in console
     * @param args arguments to log in console
     */ // tslint:disable-next-line:no-any
error(message,...args){cov_yymyu1ft9().f[1]++;cov_yymyu1ft9().s[17]++;this.logger.error(util.format(message,...args));}/**
     * Logger warning function.
     * @param message message warning to log in console
     * @param args arguments to log in console
     */ // tslint:disable-next-line:no-any
warn(message,...args){cov_yymyu1ft9().f[2]++;cov_yymyu1ft9().s[18]++;this.logger.warn(util.format(message,...args));}/**
     * Logger info function.
     * @param message message info to log in console
     * @param args arguments to log in console
     */ // tslint:disable-next-line:no-any
info(message,...args){cov_yymyu1ft9().f[3]++;cov_yymyu1ft9().s[19]++;this.logger.info(util.format(message,...args));}/**
     * Logger debug function.
     * @param message message debug to log in console
     * @param args arguments to log in console
     */ // tslint:disable-next-line:no-any
debug(message,...args){cov_yymyu1ft9().f[4]++;cov_yymyu1ft9().s[20]++;this.logger.debug(util.format(message,...args));}}cov_yymyu1ft9().s[21]++;exports.ConsoleLogger=ConsoleLogger;cov_yymyu1ft9().s[22]++;ConsoleLogger.LEVELS=['silent','error','warn','info','debug'];/**
 * Function logger exported to others classes. Inspired by:
 * https://github.com/cainus/logdriver/blob/bba1761737ca72f04d6b445629848538d038484a/index.js#L50
 * @param options A logger options or strig to logger in console
 */cov_yymyu1ft9().s[23]++;const logger=options=>{cov_yymyu1ft9().f[5]++;cov_yymyu1ft9().s[24]++;return new ConsoleLogger(options);};cov_yymyu1ft9().s[25]++;exports.logger=logger;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3VzZXJtYWl0aGEvdHJhZGVtYXN0ZXIvbGlicy9saWItZXh0ZXJuYWwtb3BlbmNlbnN1cy1ub2RlL3NyYy9jb21tb24vY29uc29sZS1sb2dnZXIudHMiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VybWFpdGhhL3RyYWRlbWFzdGVyL2xpYnMvbGliLWV4dGVybmFsLW9wZW5jZW5zdXMtbm9kZS9zcmMvY29tbW9uL2NvbnNvbGUtbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7R0FjRzs7O0FBRUgsNkJBQTZCO0FBRzdCLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUV4Qzs7R0FFRztBQUNILE1BQWEsYUFBYTtJQUt4Qjs7O09BR0c7SUFDSCxZQUFZLE9BQStDO1FBQ3pELElBQUksR0FBRyxHQUF3QixFQUFFLENBQUM7UUFDbEMsSUFBSSxPQUFPLE9BQU8sS0FBSyxRQUFRLEVBQUU7WUFDL0IsSUFBSSxPQUFPLEdBQUcsQ0FBQyxFQUFFO2dCQUNmLE9BQU8sR0FBRyxDQUFDLENBQUM7YUFDYjtpQkFBTSxJQUFJLE9BQU8sR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtnQkFDaEQsT0FBTyxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQzthQUMzQztZQUNELEdBQUcsR0FBRyxFQUFFLEtBQUssRUFBRSxhQUFhLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7U0FDaEQ7YUFBTSxJQUFJLE9BQU8sT0FBTyxLQUFLLFFBQVEsRUFBRTtZQUN0QyxHQUFHLEdBQUcsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUM7U0FDMUI7YUFBTTtZQUNMLEdBQUcsR0FBRyxPQUFPLElBQUksRUFBRSxDQUFDO1NBQ3JCO1FBQ0QsSUFBSSxHQUFHLENBQUMsS0FBSztZQUFFLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQztRQUN0QyxJQUFJLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQztZQUN0QixNQUFNLEVBQUUsYUFBYSxDQUFDLE1BQU07WUFDNUIsS0FBSyxFQUFFLEdBQUcsQ0FBQyxLQUFLLElBQUksUUFBUTtTQUM3QixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILGtDQUFrQztJQUNsQyxLQUFLLENBQUMsT0FBWSxFQUFFLEdBQUcsSUFBVztRQUNoQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxrQ0FBa0M7SUFDbEMsSUFBSSxDQUFDLE9BQVksRUFBRSxHQUFHLElBQVc7UUFDL0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsa0NBQWtDO0lBQ2xDLElBQUksQ0FBQyxPQUFZLEVBQUUsR0FBRyxJQUFXO1FBQy9CLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILGtDQUFrQztJQUNsQyxLQUFLLENBQUMsT0FBWSxFQUFFLEdBQUcsSUFBVztRQUNoQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDbkQsQ0FBQzs7QUFwRUgsc0NBcUVDO0FBbkVRLG9CQUFNLEdBQUcsQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFxRS9EOzs7O0dBSUc7QUFDSCxNQUFNLE1BQU0sR0FBRyxDQUNiLE9BQStDLEVBQ2pDLEVBQUU7SUFDaEIsT0FBTyxJQUFJLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNwQyxDQUFDLENBQUM7QUFFTyx3QkFBTSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTgsIE9wZW5DZW5zdXMgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0ICogYXMgdXRpbCBmcm9tICd1dGlsJztcbmltcG9ydCAqIGFzIHR5cGVzIGZyb20gJy4vdHlwZXMnO1xuXG5jb25zdCBsb2dEcml2ZXIgPSByZXF1aXJlKCdsb2ctZHJpdmVyJyk7XG5cbi8qKlxuICogVGhpcyBjbGFzcyBpbXBsZW1lbnRzIGEgY29uc29sZSBsb2dnZXIuXG4gKi9cbmV4cG9ydCBjbGFzcyBDb25zb2xlTG9nZ2VyIGltcGxlbWVudHMgdHlwZXMuTG9nZ2VyIHtcbiAgcHJpdmF0ZSBsb2dnZXI6IHR5cGVvZiBsb2dEcml2ZXI7XG4gIHN0YXRpYyBMRVZFTFMgPSBbJ3NpbGVudCcsICdlcnJvcicsICd3YXJuJywgJ2luZm8nLCAnZGVidWcnXTtcbiAgbGV2ZWw/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgYSBuZXcgQ29uc29sZUxvZ2dlciBpbnN0YW5jZVxuICAgKiBAcGFyYW0gb3B0aW9ucyBBIGxvZ2dlciBjb25maWd1cmF0aW9uIG9iamVjdC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM/OiB0eXBlcy5Mb2dnZXJPcHRpb25zIHwgc3RyaW5nIHwgbnVtYmVyKSB7XG4gICAgbGV0IG9wdDogdHlwZXMuTG9nZ2VyT3B0aW9ucyA9IHt9O1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ251bWJlcicpIHtcbiAgICAgIGlmIChvcHRpb25zIDwgMCkge1xuICAgICAgICBvcHRpb25zID0gMDtcbiAgICAgIH0gZWxzZSBpZiAob3B0aW9ucyA+IENvbnNvbGVMb2dnZXIuTEVWRUxTLmxlbmd0aCkge1xuICAgICAgICBvcHRpb25zID0gQ29uc29sZUxvZ2dlci5MRVZFTFMubGVuZ3RoIC0gMTtcbiAgICAgIH1cbiAgICAgIG9wdCA9IHsgbGV2ZWw6IENvbnNvbGVMb2dnZXIuTEVWRUxTW29wdGlvbnNdIH07XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG9wdCA9IHsgbGV2ZWw6IG9wdGlvbnMgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0ID0gb3B0aW9ucyB8fCB7fTtcbiAgICB9XG4gICAgaWYgKG9wdC5sZXZlbCkgdGhpcy5sZXZlbCA9IG9wdC5sZXZlbDtcbiAgICB0aGlzLmxvZ2dlciA9IGxvZ0RyaXZlcih7XG4gICAgICBsZXZlbHM6IENvbnNvbGVMb2dnZXIuTEVWRUxTLFxuICAgICAgbGV2ZWw6IG9wdC5sZXZlbCB8fCAnc2lsZW50JyxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2dnZXIgZXJyb3IgZnVuY3Rpb24uXG4gICAqIEBwYXJhbSBtZXNzYWdlIG1lc3NhZ2UgZXJyb3IgdG8gbG9nIGluIGNvbnNvbGVcbiAgICogQHBhcmFtIGFyZ3MgYXJndW1lbnRzIHRvIGxvZyBpbiBjb25zb2xlXG4gICAqL1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG4gIGVycm9yKG1lc3NhZ2U6IGFueSwgLi4uYXJnczogYW55W10pOiB2b2lkIHtcbiAgICB0aGlzLmxvZ2dlci5lcnJvcih1dGlsLmZvcm1hdChtZXNzYWdlLCAuLi5hcmdzKSk7XG4gIH1cblxuICAvKipcbiAgICogTG9nZ2VyIHdhcm5pbmcgZnVuY3Rpb24uXG4gICAqIEBwYXJhbSBtZXNzYWdlIG1lc3NhZ2Ugd2FybmluZyB0byBsb2cgaW4gY29uc29sZVxuICAgKiBAcGFyYW0gYXJncyBhcmd1bWVudHMgdG8gbG9nIGluIGNvbnNvbGVcbiAgICovXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgd2FybihtZXNzYWdlOiBhbnksIC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XG4gICAgdGhpcy5sb2dnZXIud2Fybih1dGlsLmZvcm1hdChtZXNzYWdlLCAuLi5hcmdzKSk7XG4gIH1cblxuICAvKipcbiAgICogTG9nZ2VyIGluZm8gZnVuY3Rpb24uXG4gICAqIEBwYXJhbSBtZXNzYWdlIG1lc3NhZ2UgaW5mbyB0byBsb2cgaW4gY29uc29sZVxuICAgKiBAcGFyYW0gYXJncyBhcmd1bWVudHMgdG8gbG9nIGluIGNvbnNvbGVcbiAgICovXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgaW5mbyhtZXNzYWdlOiBhbnksIC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XG4gICAgdGhpcy5sb2dnZXIuaW5mbyh1dGlsLmZvcm1hdChtZXNzYWdlLCAuLi5hcmdzKSk7XG4gIH1cblxuICAvKipcbiAgICogTG9nZ2VyIGRlYnVnIGZ1bmN0aW9uLlxuICAgKiBAcGFyYW0gbWVzc2FnZSBtZXNzYWdlIGRlYnVnIHRvIGxvZyBpbiBjb25zb2xlXG4gICAqIEBwYXJhbSBhcmdzIGFyZ3VtZW50cyB0byBsb2cgaW4gY29uc29sZVxuICAgKi9cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICBkZWJ1ZyhtZXNzYWdlOiBhbnksIC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XG4gICAgdGhpcy5sb2dnZXIuZGVidWcodXRpbC5mb3JtYXQobWVzc2FnZSwgLi4uYXJncykpO1xuICB9XG59XG5cbi8qKlxuICogRnVuY3Rpb24gbG9nZ2VyIGV4cG9ydGVkIHRvIG90aGVycyBjbGFzc2VzLiBJbnNwaXJlZCBieTpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jYWludXMvbG9nZHJpdmVyL2Jsb2IvYmJhMTc2MTczN2NhNzJmMDRkNmI0NDU2Mjk4NDg1MzhkMDM4NDg0YS9pbmRleC5qcyNMNTBcbiAqIEBwYXJhbSBvcHRpb25zIEEgbG9nZ2VyIG9wdGlvbnMgb3Igc3RyaWcgdG8gbG9nZ2VyIGluIGNvbnNvbGVcbiAqL1xuY29uc3QgbG9nZ2VyID0gKFxuICBvcHRpb25zPzogdHlwZXMuTG9nZ2VyT3B0aW9ucyB8IHN0cmluZyB8IG51bWJlclxuKTogdHlwZXMuTG9nZ2VyID0+IHtcbiAgcmV0dXJuIG5ldyBDb25zb2xlTG9nZ2VyKG9wdGlvbnMpO1xufTtcblxuZXhwb3J0IHsgbG9nZ2VyIH07XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf-8;base64,