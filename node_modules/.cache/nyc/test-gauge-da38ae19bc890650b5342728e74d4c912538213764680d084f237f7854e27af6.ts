"use strict";/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_yk9hrcxcb(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-gauge.ts";var hash="8cae024d7e55dc44e37cf084a14197e781e6678a";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-gauge.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:15},end:{line:18,column:32}},"2":{start:{line:19,column:20},end:{line:19,column:54}},"3":{start:{line:20,column:16},end:{line:20,column:54}},"4":{start:{line:21,column:16},end:{line:21,column:54}},"5":{start:{line:22,column:20},end:{line:22,column:33}},"6":{start:{line:23,column:27},end:{line:23,column:47}},"7":{start:{line:24,column:13},end:{line:24,column:16}},"8":{start:{line:25,column:20},end:{line:25,column:60}},"9":{start:{line:26,column:21},end:{line:26,column:62}},"10":{start:{line:27,column:19},end:{line:27,column:57}},"11":{start:{line:28,column:25},end:{line:28,column:43}},"12":{start:{line:29,column:25},end:{line:29,column:43}},"13":{start:{line:30,column:27},end:{line:30,column:63}},"14":{start:{line:31,column:26},end:{line:33,column:1}},"15":{start:{line:34,column:30},end:{line:34,column:39}},"16":{start:{line:35,column:24},end:{line:35,column:33}},"17":{start:{line:36,column:0},end:{line:36,column:82}},"18":{start:{line:37,column:0},end:{line:347,column:3}},"19":{start:{line:39,column:25},end:{line:39,column:39}},"20":{start:{line:40,column:22},end:{line:40,column:30}},"21":{start:{line:41,column:23},end:{line:41,column:58}},"22":{start:{line:42,column:37},end:{line:48,column:5}},"23":{start:{line:49,column:4},end:{line:56,column:7}},"24":{start:{line:50,column:8},end:{line:50,column:124}},"25":{start:{line:52,column:8},end:{line:52,column:42}},"26":{start:{line:52,column:31},end:{line:52,column:41}},"27":{start:{line:53,column:8},end:{line:53,column:39}},"28":{start:{line:53,column:25},end:{line:53,column:38}},"29":{start:{line:55,column:8},end:{line:55,column:51}},"30":{start:{line:57,column:4},end:{line:62,column:7}},"31":{start:{line:58,column:8},end:{line:58,column:38}},"32":{start:{line:59,column:8},end:{line:59,column:29}},"33":{start:{line:61,column:8},end:{line:61,column:57}},"34":{start:{line:63,column:4},end:{line:166,column:7}},"35":{start:{line:64,column:8},end:{line:68,column:11}},"36":{start:{line:65,column:12},end:{line:67,column:76}},"37":{start:{line:66,column:16},end:{line:66,column:67}},"38":{start:{line:69,column:8},end:{line:123,column:11}},"39":{start:{line:70,column:26},end:{line:70,column:74}},"40":{start:{line:71,column:12},end:{line:71,column:26}},"41":{start:{line:72,column:25},end:{line:72,column:45}},"42":{start:{line:73,column:12},end:{line:73,column:48}},"43":{start:{line:74,column:12},end:{line:74,column:80}},"44":{start:{line:75,column:12},end:{line:75,column:60}},"45":{start:{line:76,column:12},end:{line:89,column:15}},"46":{start:{line:91,column:12},end:{line:91,column:25}},"47":{start:{line:92,column:27},end:{line:92,column:75}},"48":{start:{line:93,column:12},end:{line:93,column:27}},"49":{start:{line:94,column:12},end:{line:94,column:42}},"50":{start:{line:95,column:12},end:{line:95,column:80}},"51":{start:{line:96,column:12},end:{line:96,column:60}},"52":{start:{line:97,column:12},end:{line:122,column:15}},"53":{start:{line:124,column:8},end:{line:165,column:11}},"54":{start:{line:125,column:26},end:{line:125,column:74}},"55":{start:{line:126,column:12},end:{line:126,column:26}},"56":{start:{line:127,column:25},end:{line:127,column:45}},"57":{start:{line:128,column:12},end:{line:128,column:48}},"58":{start:{line:129,column:12},end:{line:129,column:80}},"59":{start:{line:130,column:12},end:{line:130,column:60}},"60":{start:{line:131,column:12},end:{line:144,column:15}},"61":{start:{line:146,column:27},end:{line:146,column:75}},"62":{start:{line:147,column:12},end:{line:147,column:27}},"63":{start:{line:148,column:12},end:{line:148,column:42}},"64":{start:{line:149,column:12},end:{line:149,column:80}},"65":{start:{line:150,column:12},end:{line:150,column:60}},"66":{start:{line:151,column:12},end:{line:164,column:15}},"67":{start:{line:167,column:4},end:{line:319,column:7}},"68":{start:{line:168,column:8},end:{line:189,column:11}},"69":{start:{line:169,column:26},end:{line:169,column:57}},"70":{start:{line:170,column:12},end:{line:170,column:26}},"71":{start:{line:171,column:27},end:{line:171,column:47}},"72":{start:{line:172,column:12},end:{line:172,column:48}},"73":{start:{line:173,column:12},end:{line:173,column:80}},"74":{start:{line:174,column:12},end:{line:174,column:60}},"75":{start:{line:175,column:12},end:{line:188,column:15}},"76":{start:{line:190,column:8},end:{line:207,column:11}},"77":{start:{line:191,column:12},end:{line:194,column:38}},"78":{start:{line:195,column:26},end:{line:198,column:14}},"79":{start:{line:199,column:12},end:{line:199,column:27}},"80":{start:{line:200,column:27},end:{line:203,column:14}},"81":{start:{line:204,column:12},end:{line:204,column:28}},"82":{start:{line:205,column:27},end:{line:205,column:47}},"83":{start:{line:206,column:12},end:{line:206,column:60}},"84":{start:{line:208,column:8},end:{line:243,column:11}},"85":{start:{line:209,column:12},end:{line:212,column:32}},"86":{start:{line:213,column:26},end:{line:216,column:14}},"87":{start:{line:217,column:12},end:{line:217,column:27}},"88":{start:{line:218,column:27},end:{line:218,column:47}},"89":{start:{line:219,column:12},end:{line:219,column:60}},"90":{start:{line:220,column:12},end:{line:224,column:15}},"91":{start:{line:225,column:12},end:{line:242,column:15}},"92":{start:{line:244,column:8},end:{line:275,column:11}},"93":{start:{line:245,column:12},end:{line:249,column:38}},"94":{start:{line:250,column:26},end:{line:250,column:57}},"95":{start:{line:251,column:12},end:{line:251,column:27}},"96":{start:{line:252,column:27},end:{line:252,column:47}},"97":{start:{line:253,column:12},end:{line:253,column:48}},"98":{start:{line:254,column:12},end:{line:254,column:74}},"99":{start:{line:255,column:12},end:{line:255,column:62}},"100":{start:{line:256,column:12},end:{line:256,column:60}},"101":{start:{line:257,column:12},end:{line:274,column:15}},"102":{start:{line:276,column:8},end:{line:318,column:11}},"103":{start:{line:277,column:26},end:{line:277,column:57}},"104":{start:{line:278,column:12},end:{line:278,column:27}},"105":{start:{line:279,column:25},end:{line:279,column:45}},"106":{start:{line:280,column:12},end:{line:280,column:48}},"107":{start:{line:281,column:12},end:{line:281,column:80}},"108":{start:{line:282,column:12},end:{line:282,column:60}},"109":{start:{line:283,column:12},end:{line:296,column:15}},"110":{start:{line:298,column:27},end:{line:298,column:58}},"111":{start:{line:299,column:12},end:{line:299,column:28}},"112":{start:{line:300,column:12},end:{line:300,column:42}},"113":{start:{line:301,column:12},end:{line:301,column:48}},"114":{start:{line:302,column:12},end:{line:302,column:80}},"115":{start:{line:303,column:12},end:{line:303,column:60}},"116":{start:{line:304,column:12},end:{line:317,column:15}},"117":{start:{line:320,column:4},end:{line:331,column:7}},"118":{start:{line:321,column:8},end:{line:330,column:11}},"119":{start:{line:322,column:26},end:{line:322,column:74}},"120":{start:{line:323,column:12},end:{line:323,column:26}},"121":{start:{line:324,column:25},end:{line:324,column:45}},"122":{start:{line:325,column:12},end:{line:325,column:48}},"123":{start:{line:326,column:12},end:{line:326,column:80}},"124":{start:{line:327,column:12},end:{line:327,column:56}},"125":{start:{line:328,column:12},end:{line:328,column:42}},"126":{start:{line:329,column:12},end:{line:329,column:49}},"127":{start:{line:332,column:4},end:{line:346,column:7}},"128":{start:{line:333,column:8},end:{line:345,column:11}},"129":{start:{line:334,column:26},end:{line:334,column:74}},"130":{start:{line:335,column:12},end:{line:335,column:26}},"131":{start:{line:336,column:27},end:{line:336,column:75}},"132":{start:{line:337,column:12},end:{line:337,column:27}},"133":{start:{line:338,column:25},end:{line:338,column:45}},"134":{start:{line:339,column:12},end:{line:339,column:48}},"135":{start:{line:340,column:12},end:{line:340,column:80}},"136":{start:{line:341,column:12},end:{line:341,column:60}},"137":{start:{line:342,column:12},end:{line:342,column:29}},"138":{start:{line:343,column:12},end:{line:343,column:42}},"139":{start:{line:344,column:12},end:{line:344,column:49}},"140":{start:{line:348,column:0},end:{line:603,column:3}},"141":{start:{line:350,column:25},end:{line:350,column:39}},"142":{start:{line:351,column:22},end:{line:351,column:30}},"143":{start:{line:352,column:23},end:{line:352,column:58}},"144":{start:{line:353,column:37},end:{line:359,column:5}},"145":{start:{line:360,column:4},end:{line:367,column:7}},"146":{start:{line:361,column:8},end:{line:361,column:125}},"147":{start:{line:363,column:8},end:{line:363,column:42}},"148":{start:{line:363,column:31},end:{line:363,column:41}},"149":{start:{line:364,column:8},end:{line:364,column:39}},"150":{start:{line:364,column:25},end:{line:364,column:38}},"151":{start:{line:366,column:8},end:{line:366,column:51}},"152":{start:{line:368,column:4},end:{line:373,column:7}},"153":{start:{line:369,column:8},end:{line:369,column:38}},"154":{start:{line:370,column:8},end:{line:370,column:29}},"155":{start:{line:372,column:8},end:{line:372,column:57}},"156":{start:{line:374,column:4},end:{line:476,column:7}},"157":{start:{line:375,column:8},end:{line:379,column:11}},"158":{start:{line:376,column:12},end:{line:378,column:76}},"159":{start:{line:377,column:16},end:{line:377,column:67}},"160":{start:{line:380,column:8},end:{line:433,column:11}},"161":{start:{line:381,column:26},end:{line:381,column:74}},"162":{start:{line:382,column:12},end:{line:382,column:29}},"163":{start:{line:383,column:25},end:{line:383,column:45}},"164":{start:{line:384,column:12},end:{line:384,column:48}},"165":{start:{line:385,column:12},end:{line:385,column:80}},"166":{start:{line:386,column:12},end:{line:386,column:60}},"167":{start:{line:387,column:12},end:{line:400,column:15}},"168":{start:{line:402,column:12},end:{line:402,column:28}},"169":{start:{line:403,column:27},end:{line:403,column:75}},"170":{start:{line:404,column:12},end:{line:404,column:29}},"171":{start:{line:405,column:12},end:{line:405,column:42}},"172":{start:{line:406,column:12},end:{line:406,column:60}},"173":{start:{line:407,column:12},end:{line:432,column:15}},"174":{start:{line:434,column:8},end:{line:475,column:11}},"175":{start:{line:435,column:26},end:{line:435,column:74}},"176":{start:{line:436,column:12},end:{line:436,column:28}},"177":{start:{line:437,column:25},end:{line:437,column:45}},"178":{start:{line:438,column:12},end:{line:438,column:48}},"179":{start:{line:439,column:12},end:{line:439,column:80}},"180":{start:{line:440,column:12},end:{line:440,column:60}},"181":{start:{line:441,column:12},end:{line:454,column:15}},"182":{start:{line:456,column:27},end:{line:456,column:75}},"183":{start:{line:457,column:12},end:{line:457,column:30}},"184":{start:{line:458,column:12},end:{line:458,column:42}},"185":{start:{line:459,column:12},end:{line:459,column:80}},"186":{start:{line:460,column:12},end:{line:460,column:60}},"187":{start:{line:461,column:12},end:{line:474,column:15}},"188":{start:{line:477,column:4},end:{line:575,column:7}},"189":{start:{line:478,column:8},end:{line:499,column:11}},"190":{start:{line:479,column:26},end:{line:479,column:57}},"191":{start:{line:480,column:12},end:{line:480,column:28}},"192":{start:{line:481,column:27},end:{line:481,column:47}},"193":{start:{line:482,column:12},end:{line:482,column:48}},"194":{start:{line:483,column:12},end:{line:483,column:80}},"195":{start:{line:484,column:12},end:{line:484,column:60}},"196":{start:{line:485,column:12},end:{line:498,column:15}},"197":{start:{line:500,column:8},end:{line:542,column:11}},"198":{start:{line:501,column:26},end:{line:501,column:57}},"199":{start:{line:502,column:12},end:{line:502,column:29}},"200":{start:{line:503,column:25},end:{line:503,column:45}},"201":{start:{line:504,column:12},end:{line:504,column:48}},"202":{start:{line:505,column:12},end:{line:505,column:80}},"203":{start:{line:506,column:12},end:{line:506,column:60}},"204":{start:{line:507,column:12},end:{line:520,column:15}},"205":{start:{line:522,column:27},end:{line:522,column:58}},"206":{start:{line:523,column:12},end:{line:523,column:30}},"207":{start:{line:524,column:12},end:{line:524,column:42}},"208":{start:{line:525,column:12},end:{line:525,column:48}},"209":{start:{line:526,column:12},end:{line:526,column:80}},"210":{start:{line:527,column:12},end:{line:527,column:60}},"211":{start:{line:528,column:12},end:{line:541,column:15}},"212":{start:{line:543,column:8},end:{line:574,column:11}},"213":{start:{line:544,column:12},end:{line:548,column:38}},"214":{start:{line:549,column:26},end:{line:549,column:57}},"215":{start:{line:550,column:12},end:{line:550,column:28}},"216":{start:{line:551,column:27},end:{line:551,column:47}},"217":{start:{line:552,column:12},end:{line:552,column:48}},"218":{start:{line:553,column:12},end:{line:553,column:74}},"219":{start:{line:554,column:12},end:{line:554,column:62}},"220":{start:{line:555,column:12},end:{line:555,column:60}},"221":{start:{line:556,column:12},end:{line:573,column:15}},"222":{start:{line:576,column:4},end:{line:587,column:7}},"223":{start:{line:577,column:8},end:{line:586,column:11}},"224":{start:{line:578,column:26},end:{line:578,column:74}},"225":{start:{line:579,column:12},end:{line:579,column:29}},"226":{start:{line:580,column:25},end:{line:580,column:45}},"227":{start:{line:581,column:12},end:{line:581,column:48}},"228":{start:{line:582,column:12},end:{line:582,column:80}},"229":{start:{line:583,column:12},end:{line:583,column:56}},"230":{start:{line:584,column:12},end:{line:584,column:42}},"231":{start:{line:585,column:12},end:{line:585,column:49}},"232":{start:{line:588,column:4},end:{line:602,column:7}},"233":{start:{line:589,column:8},end:{line:601,column:11}},"234":{start:{line:590,column:26},end:{line:590,column:74}},"235":{start:{line:591,column:12},end:{line:591,column:29}},"236":{start:{line:592,column:27},end:{line:592,column:75}},"237":{start:{line:593,column:12},end:{line:593,column:29}},"238":{start:{line:594,column:25},end:{line:594,column:45}},"239":{start:{line:595,column:12},end:{line:595,column:48}},"240":{start:{line:596,column:12},end:{line:596,column:80}},"241":{start:{line:597,column:12},end:{line:597,column:60}},"242":{start:{line:598,column:12},end:{line:598,column:29}},"243":{start:{line:599,column:12},end:{line:599,column:42}},"244":{start:{line:600,column:12},end:{line:600,column:49}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:37,column:24},end:{line:37,column:25}},loc:{start:{line:37,column:30},end:{line:347,column:1}},line:37},"1":{name:"(anonymous_1)",decl:{start:{line:49,column:15},end:{line:49,column:16}},loc:{start:{line:49,column:21},end:{line:56,column:5}},line:49},"2":{name:"(anonymous_2)",decl:{start:{line:52,column:25},end:{line:52,column:26}},loc:{start:{line:52,column:31},end:{line:52,column:41}},line:52},"3":{name:"(anonymous_3)",decl:{start:{line:53,column:19},end:{line:53,column:20}},loc:{start:{line:53,column:25},end:{line:53,column:38}},line:53},"4":{name:"(anonymous_4)",decl:{start:{line:57,column:14},end:{line:57,column:15}},loc:{start:{line:57,column:20},end:{line:62,column:5}},line:57},"5":{name:"(anonymous_5)",decl:{start:{line:63,column:40},end:{line:63,column:41}},loc:{start:{line:63,column:46},end:{line:166,column:5}},line:63},"6":{name:"(anonymous_6)",decl:{start:{line:64,column:81},end:{line:64,column:82}},loc:{start:{line:64,column:87},end:{line:68,column:9}},line:64},"7":{name:"(anonymous_7)",decl:{start:{line:65,column:26},end:{line:65,column:27}},loc:{start:{line:65,column:32},end:{line:67,column:13}},line:65},"8":{name:"(anonymous_8)",decl:{start:{line:69,column:37},end:{line:69,column:38}},loc:{start:{line:69,column:43},end:{line:123,column:9}},line:69},"9":{name:"(anonymous_9)",decl:{start:{line:124,column:54},end:{line:124,column:55}},loc:{start:{line:124,column:60},end:{line:165,column:9}},line:124},"10":{name:"(anonymous_10)",decl:{start:{line:167,column:39},end:{line:167,column:40}},loc:{start:{line:167,column:45},end:{line:319,column:5}},line:167},"11":{name:"(anonymous_11)",decl:{start:{line:168,column:51},end:{line:168,column:52}},loc:{start:{line:168,column:57},end:{line:189,column:9}},line:168},"12":{name:"(anonymous_12)",decl:{start:{line:190,column:68},end:{line:190,column:69}},loc:{start:{line:190,column:74},end:{line:207,column:9}},line:190},"13":{name:"(anonymous_13)",decl:{start:{line:208,column:41},end:{line:208,column:42}},loc:{start:{line:208,column:47},end:{line:243,column:9}},line:208},"14":{name:"(anonymous_14)",decl:{start:{line:244,column:58},end:{line:244,column:59}},loc:{start:{line:244,column:64},end:{line:275,column:9}},line:244},"15":{name:"(anonymous_15)",decl:{start:{line:276,column:63},end:{line:276,column:64}},loc:{start:{line:276,column:69},end:{line:318,column:9}},line:276},"16":{name:"(anonymous_16)",decl:{start:{line:320,column:35},end:{line:320,column:36}},loc:{start:{line:320,column:41},end:{line:331,column:5}},line:320},"17":{name:"(anonymous_17)",decl:{start:{line:321,column:39},end:{line:321,column:40}},loc:{start:{line:321,column:45},end:{line:330,column:9}},line:321},"18":{name:"(anonymous_18)",decl:{start:{line:332,column:24},end:{line:332,column:25}},loc:{start:{line:332,column:30},end:{line:346,column:5}},line:332},"19":{name:"(anonymous_19)",decl:{start:{line:333,column:42},end:{line:333,column:43}},loc:{start:{line:333,column:48},end:{line:345,column:9}},line:333},"20":{name:"(anonymous_20)",decl:{start:{line:348,column:25},end:{line:348,column:26}},loc:{start:{line:348,column:31},end:{line:603,column:1}},line:348},"21":{name:"(anonymous_21)",decl:{start:{line:360,column:15},end:{line:360,column:16}},loc:{start:{line:360,column:21},end:{line:367,column:5}},line:360},"22":{name:"(anonymous_22)",decl:{start:{line:363,column:25},end:{line:363,column:26}},loc:{start:{line:363,column:31},end:{line:363,column:41}},line:363},"23":{name:"(anonymous_23)",decl:{start:{line:364,column:19},end:{line:364,column:20}},loc:{start:{line:364,column:25},end:{line:364,column:38}},line:364},"24":{name:"(anonymous_24)",decl:{start:{line:368,column:14},end:{line:368,column:15}},loc:{start:{line:368,column:20},end:{line:373,column:5}},line:368},"25":{name:"(anonymous_25)",decl:{start:{line:374,column:40},end:{line:374,column:41}},loc:{start:{line:374,column:46},end:{line:476,column:5}},line:374},"26":{name:"(anonymous_26)",decl:{start:{line:375,column:81},end:{line:375,column:82}},loc:{start:{line:375,column:87},end:{line:379,column:9}},line:375},"27":{name:"(anonymous_27)",decl:{start:{line:376,column:26},end:{line:376,column:27}},loc:{start:{line:376,column:32},end:{line:378,column:13}},line:376},"28":{name:"(anonymous_28)",decl:{start:{line:380,column:37},end:{line:380,column:38}},loc:{start:{line:380,column:43},end:{line:433,column:9}},line:380},"29":{name:"(anonymous_29)",decl:{start:{line:434,column:54},end:{line:434,column:55}},loc:{start:{line:434,column:60},end:{line:475,column:9}},line:434},"30":{name:"(anonymous_30)",decl:{start:{line:477,column:39},end:{line:477,column:40}},loc:{start:{line:477,column:45},end:{line:575,column:5}},line:477},"31":{name:"(anonymous_31)",decl:{start:{line:478,column:51},end:{line:478,column:52}},loc:{start:{line:478,column:57},end:{line:499,column:9}},line:478},"32":{name:"(anonymous_32)",decl:{start:{line:500,column:63},end:{line:500,column:64}},loc:{start:{line:500,column:69},end:{line:542,column:9}},line:500},"33":{name:"(anonymous_33)",decl:{start:{line:543,column:58},end:{line:543,column:59}},loc:{start:{line:543,column:64},end:{line:574,column:9}},line:543},"34":{name:"(anonymous_34)",decl:{start:{line:576,column:35},end:{line:576,column:36}},loc:{start:{line:576,column:41},end:{line:587,column:5}},line:576},"35":{name:"(anonymous_35)",decl:{start:{line:577,column:39},end:{line:577,column:40}},loc:{start:{line:577,column:45},end:{line:586,column:9}},line:577},"36":{name:"(anonymous_36)",decl:{start:{line:588,column:24},end:{line:588,column:25}},loc:{start:{line:588,column:30},end:{line:602,column:5}},line:588},"37":{name:"(anonymous_37)",decl:{start:{line:589,column:42},end:{line:589,column:43}},loc:{start:{line:589,column:48},end:{line:601,column:9}},line:589}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0},b:{},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-gauge.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-gauge.ts"],names:[],mappings:"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",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\n\nimport { TEST_ONLY } from '../src/common/time-util';\nimport {\n  LabelKey,\n  LabelValue,\n  MetricDescriptorType,\n  Timestamp,\n} from '../src/metrics/export/types';\nimport { Gauge } from '../src/metrics/gauges/gauge';\n\nconst METRIC_NAME = 'metric-name';\nconst METRIC_DESCRIPTION = 'metric-description';\nconst UNIT = '1';\nconst GAUGE_INT64 = MetricDescriptorType.GAUGE_INT64;\nconst GAUGE_DOUBLE = MetricDescriptorType.GAUGE_DOUBLE;\nconst LABEL_KEYS: LabelKey[] = [{ key: 'code', description: 'desc' }];\nconst LABEL_VALUES_200: LabelValue[] = [{ value: '200' }];\nconst LABEL_VALUES_400: LabelValue[] = [{ value: '400' }];\nconst LABEL_VALUES_EXRTA: LabelValue[] = [{ value: '200' }, { value: '400' }];\nconst UNSET_LABEL_VALUE: LabelValue = {\n  value: null,\n};\nconst EMPTY_CONSTANT_LABELS = new Map();\nconst CONSTANT_LABELS = new Map();\nCONSTANT_LABELS.set(\n  { key: 'host', description: 'host' },\n  { value: 'localhost' }\n);\n\ndescribe('GAUGE_INT64', () => {\n  let instance: Gauge;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n  const expectedMetricDescriptor = {\n    name: METRIC_NAME,\n    description: METRIC_DESCRIPTION,\n    unit: UNIT,\n    type: GAUGE_INT64,\n    labelKeys: LABEL_KEYS,\n  };\n\n  beforeEach(() => {\n    instance = new Gauge(\n      METRIC_NAME,\n      METRIC_DESCRIPTION,\n      UNIT,\n      GAUGE_INT64,\n      LABEL_KEYS,\n      EMPTY_CONSTANT_LABELS\n    );\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  describe('getOrCreateTimeSeries()', () => {\n    it('should throw an error when the keys and values dont have same size', () => {\n      assert.throws(() => {\n        instance.getOrCreateTimeSeries(LABEL_VALUES_EXRTA);\n      }, /^Error: Label Keys and Label Values don't have same size$/);\n    });\n    it('should return a Metric', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      point.add(10);\n\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [\n            {\n              value: 10,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n\n      // add value and create new timeseries.\n      point.add(5);\n      const point1 = instance.getOrCreateTimeSeries(LABEL_VALUES_400);\n      point1.set(-8);\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 2);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [\n            {\n              value: 15,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n        {\n          labelValues: LABEL_VALUES_400,\n          points: [\n            {\n              value: -8,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n    });\n    it('should not create same timeseries again', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      point.add(10);\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [\n            {\n              value: 10,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n      // create timeseries with same labels.\n      const point1 = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      point1.add(30);\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [\n            {\n              value: 40,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n    });\n  });\n  describe('getDefaultTimeSeries()', () => {\n    it('should create new default timeseries', () => {\n      const point = instance.getDefaultTimeSeries();\n      point.add(10);\n      const metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: [UNSET_LABEL_VALUE],\n          points: [\n            {\n              value: 10,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n    });\n    it('should return same timeseries for interchanged labels', () => {\n      instance = new Gauge(\n        METRIC_NAME,\n        METRIC_DESCRIPTION,\n        UNIT,\n        GAUGE_INT64,\n        [\n          { key: 'k1', description: 'desc' },\n          { key: 'k2', description: 'desc' },\n        ],\n        EMPTY_CONSTANT_LABELS\n      );\n      const point = instance.getOrCreateTimeSeries([\n        { value: '200' },\n        { value: '400' },\n      ]);\n      point.add(200);\n      const point1 = instance.getOrCreateTimeSeries([\n        { value: '400' },\n        { value: '200' },\n      ]);\n      point1.add(400);\n      const metric = instance.getMetric();\n      assert.strictEqual(metric!.timeseries.length, 1);\n    });\n\n    it('should add constant labels', () => {\n      instance = new Gauge(\n        METRIC_NAME,\n        METRIC_DESCRIPTION,\n        UNIT,\n        GAUGE_INT64,\n        [\n          { key: 'k1', description: 'desc' },\n          { key: 'k2', description: 'desc' },\n        ],\n        CONSTANT_LABELS\n      );\n      const point = instance.getOrCreateTimeSeries([\n        { value: '200' },\n        { value: '400' },\n      ]);\n      point.add(200);\n      const metric = instance.getMetric();\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.descriptor.labelKeys, [\n        { key: 'k1', description: 'desc' },\n        { key: 'k2', description: 'desc' },\n        { key: 'host', description: 'host' },\n      ]);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: [\n            { value: '200' },\n            { value: '400' },\n            { value: 'localhost' },\n          ],\n          points: [\n            {\n              value: 200,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n    });\n\n    it('should create same labelValues as labelKeys', () => {\n      instance = new Gauge(\n        METRIC_NAME,\n        METRIC_DESCRIPTION,\n        UNIT,\n        GAUGE_INT64,\n        [\n          { key: 'k1', description: 'desc' },\n          { key: 'k2', description: 'desc' },\n          { key: 'k3', description: 'desc' },\n        ],\n        EMPTY_CONSTANT_LABELS\n      );\n      const point = instance.getDefaultTimeSeries();\n      point.add(200);\n      const metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor.labelKeys.length, 3);\n      assert.deepStrictEqual(metric!.descriptor.type, 1);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: [\n            UNSET_LABEL_VALUE,\n            UNSET_LABEL_VALUE,\n            UNSET_LABEL_VALUE,\n          ],\n          points: [\n            {\n              value: 200,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n    });\n    it('should use previously created default timeseries', () => {\n      const point = instance.getDefaultTimeSeries();\n      point.add(300);\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: [UNSET_LABEL_VALUE],\n          points: [\n            {\n              value: 300,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n      // get default timeseries again.\n      const point1 = instance.getDefaultTimeSeries();\n      point1.add(400);\n      metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: [UNSET_LABEL_VALUE],\n          points: [\n            {\n              value: 700,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n    });\n  });\n  describe('removeTimeSeries()', () => {\n    it('should remove TimeSeries', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      point.add(10);\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      instance.removeTimeSeries(LABEL_VALUES_200);\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric, null);\n    });\n  });\n  describe('clear()', () => {\n    it('should clear all TimeSeries', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      point.add(10);\n      const point1 = instance.getOrCreateTimeSeries(LABEL_VALUES_400);\n      point1.add(10);\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 2);\n      instance.clear();\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric, null);\n    });\n  });\n});\n\ndescribe('GAUGE_DOUBLE', () => {\n  let instance: Gauge;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n  const expectedMetricDescriptor = {\n    name: METRIC_NAME,\n    description: METRIC_DESCRIPTION,\n    unit: UNIT,\n    type: GAUGE_DOUBLE,\n    labelKeys: LABEL_KEYS,\n  };\n\n  beforeEach(() => {\n    instance = new Gauge(\n      METRIC_NAME,\n      METRIC_DESCRIPTION,\n      UNIT,\n      GAUGE_DOUBLE,\n      LABEL_KEYS,\n      EMPTY_CONSTANT_LABELS\n    );\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  describe('getOrCreateTimeSeries()', () => {\n    it('should throw an error when the keys and values dont have same size', () => {\n      assert.throws(() => {\n        instance.getOrCreateTimeSeries(LABEL_VALUES_EXRTA);\n      }, /^Error: Label Keys and Label Values don't have same size$/);\n    });\n    it('should return a Metric', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      point.add(10.34);\n\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [\n            {\n              value: 10.34,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n      // add value and create new timeseries.\n      point.add(5.12);\n      const point1 = instance.getOrCreateTimeSeries(LABEL_VALUES_400);\n      point1.set(-8.3);\n      metric = instance.getMetric();\n      assert.strictEqual(metric!.timeseries.length, 2);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [\n            {\n              value: 15.46,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n        {\n          labelValues: LABEL_VALUES_400,\n          points: [\n            {\n              value: -8.3,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n    });\n    it('should not create same timeseries again', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      point.add(12.1);\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [\n            {\n              value: 12.1,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n      // create timeseries with same labels.\n      const point1 = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      point1.add(30.18);\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [\n            {\n              value: 42.28,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n    });\n  });\n  describe('getDefaultTimeSeries()', () => {\n    it('should create new default timeseries', () => {\n      const point = instance.getDefaultTimeSeries();\n      point.add(10.1);\n      const metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: [UNSET_LABEL_VALUE],\n          points: [\n            {\n              value: 10.1,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n    });\n    it('should use previously created default timeseries', () => {\n      const point = instance.getDefaultTimeSeries();\n      point.add(300.1);\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: [UNSET_LABEL_VALUE],\n          points: [\n            {\n              value: 300.1,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n      // get default timeseries again.\n      const point1 = instance.getDefaultTimeSeries();\n      point1.add(400.1);\n      metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: [UNSET_LABEL_VALUE],\n          points: [\n            {\n              value: 700.2,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n    });\n    it('should create same labelValues as labelKeys', () => {\n      instance = new Gauge(\n        METRIC_NAME,\n        METRIC_DESCRIPTION,\n        UNIT,\n        GAUGE_DOUBLE,\n        [\n          { key: 'k1', description: 'desc' },\n          { key: 'k2', description: 'desc' },\n          { key: 'k3', description: 'desc' },\n        ],\n        EMPTY_CONSTANT_LABELS\n      );\n      const point = instance.getDefaultTimeSeries();\n      point.add(10.1);\n      const metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor.labelKeys.length, 3);\n      assert.deepStrictEqual(metric!.descriptor.type, 2);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: [\n            UNSET_LABEL_VALUE,\n            UNSET_LABEL_VALUE,\n            UNSET_LABEL_VALUE,\n          ],\n          points: [\n            {\n              value: 10.1,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n    });\n  });\n  describe('removeTimeSeries()', () => {\n    it('should remove TimeSeries', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      point.add(10.23);\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      instance.removeTimeSeries(LABEL_VALUES_200);\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric, null);\n    });\n  });\n  describe('clear()', () => {\n    it('should clear all TimeSeries', () => {\n      const point = instance.getOrCreateTimeSeries(LABEL_VALUES_200);\n      point.add(10.34);\n      const point1 = instance.getOrCreateTimeSeries(LABEL_VALUES_400);\n      point1.add(15.2);\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 2);\n      instance.clear();\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric, null);\n    });\n  });\n});\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"8cae024d7e55dc44e37cf084a14197e781e6678a"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_yk9hrcxcb=function(){return actualCoverage;};}return actualCoverage;}cov_yk9hrcxcb();cov_yk9hrcxcb().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const assert=(cov_yk9hrcxcb().s[1]++,require("assert"));const time_util_1=(cov_yk9hrcxcb().s[2]++,require("../src/common/time-util"));const types_1=(cov_yk9hrcxcb().s[3]++,require("../src/metrics/export/types"));const gauge_1=(cov_yk9hrcxcb().s[4]++,require("../src/metrics/gauges/gauge"));const METRIC_NAME=(cov_yk9hrcxcb().s[5]++,'metric-name');const METRIC_DESCRIPTION=(cov_yk9hrcxcb().s[6]++,'metric-description');const UNIT=(cov_yk9hrcxcb().s[7]++,'1');const GAUGE_INT64=(cov_yk9hrcxcb().s[8]++,types_1.MetricDescriptorType.GAUGE_INT64);const GAUGE_DOUBLE=(cov_yk9hrcxcb().s[9]++,types_1.MetricDescriptorType.GAUGE_DOUBLE);const LABEL_KEYS=(cov_yk9hrcxcb().s[10]++,[{key:'code',description:'desc'}]);const LABEL_VALUES_200=(cov_yk9hrcxcb().s[11]++,[{value:'200'}]);const LABEL_VALUES_400=(cov_yk9hrcxcb().s[12]++,[{value:'400'}]);const LABEL_VALUES_EXRTA=(cov_yk9hrcxcb().s[13]++,[{value:'200'},{value:'400'}]);const UNSET_LABEL_VALUE=(cov_yk9hrcxcb().s[14]++,{value:null});const EMPTY_CONSTANT_LABELS=(cov_yk9hrcxcb().s[15]++,new Map());const CONSTANT_LABELS=(cov_yk9hrcxcb().s[16]++,new Map());cov_yk9hrcxcb().s[17]++;CONSTANT_LABELS.set({key:'host',description:'host'},{value:'localhost'});cov_yk9hrcxcb().s[18]++;describe('GAUGE_INT64',()=>{cov_yk9hrcxcb().f[0]++;let instance;const realHrtimeFn=(cov_yk9hrcxcb().s[19]++,process.hrtime);const realNowFn=(cov_yk9hrcxcb().s[20]++,Date.now);const mockedTime=(cov_yk9hrcxcb().s[21]++,{seconds:1450000100,nanos:1e7});const expectedMetricDescriptor=(cov_yk9hrcxcb().s[22]++,{name:METRIC_NAME,description:METRIC_DESCRIPTION,unit:UNIT,type:GAUGE_INT64,labelKeys:LABEL_KEYS});cov_yk9hrcxcb().s[23]++;beforeEach(()=>{cov_yk9hrcxcb().f[1]++;cov_yk9hrcxcb().s[24]++;instance=new gauge_1.Gauge(METRIC_NAME,METRIC_DESCRIPTION,UNIT,GAUGE_INT64,LABEL_KEYS,EMPTY_CONSTANT_LABELS);// @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message
cov_yk9hrcxcb().s[25]++;process.hrtime=()=>{cov_yk9hrcxcb().f[2]++;cov_yk9hrcxcb().s[26]++;return[100,1e7];};cov_yk9hrcxcb().s[27]++;Date.now=()=>{cov_yk9hrcxcb().f[3]++;cov_yk9hrcxcb().s[28]++;return 1450000000000;};// Force the clock to recalibrate the time offset with the mocked time
cov_yk9hrcxcb().s[29]++;time_util_1.TEST_ONLY.setHrtimeReference();});cov_yk9hrcxcb().s[30]++;afterEach(()=>{cov_yk9hrcxcb().f[4]++;cov_yk9hrcxcb().s[31]++;process.hrtime=realHrtimeFn;cov_yk9hrcxcb().s[32]++;Date.now=realNowFn;// Reset the hrtime reference so that it uses a real clock again.
cov_yk9hrcxcb().s[33]++;time_util_1.TEST_ONLY.resetHrtimeFunctionCache();});cov_yk9hrcxcb().s[34]++;describe('getOrCreateTimeSeries()',()=>{cov_yk9hrcxcb().f[5]++;cov_yk9hrcxcb().s[35]++;it('should throw an error when the keys and values dont have same size',()=>{cov_yk9hrcxcb().f[6]++;cov_yk9hrcxcb().s[36]++;assert.throws(()=>{cov_yk9hrcxcb().f[7]++;cov_yk9hrcxcb().s[37]++;instance.getOrCreateTimeSeries(LABEL_VALUES_EXRTA);},/^Error: Label Keys and Label Values don't have same size$/);});cov_yk9hrcxcb().s[38]++;it('should return a Metric',()=>{cov_yk9hrcxcb().f[8]++;const point=(cov_yk9hrcxcb().s[39]++,instance.getOrCreateTimeSeries(LABEL_VALUES_200));cov_yk9hrcxcb().s[40]++;point.add(10);let metric=(cov_yk9hrcxcb().s[41]++,instance.getMetric());cov_yk9hrcxcb().s[42]++;assert.notStrictEqual(metric,null);cov_yk9hrcxcb().s[43]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_yk9hrcxcb().s[44]++;assert.strictEqual(metric.timeseries.length,1);cov_yk9hrcxcb().s[45]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:LABEL_VALUES_200,points:[{value:10,timestamp:{nanos:mockedTime.nanos,seconds:mockedTime.seconds}}]}]);// add value and create new timeseries.
cov_yk9hrcxcb().s[46]++;point.add(5);const point1=(cov_yk9hrcxcb().s[47]++,instance.getOrCreateTimeSeries(LABEL_VALUES_400));cov_yk9hrcxcb().s[48]++;point1.set(-8);cov_yk9hrcxcb().s[49]++;metric=instance.getMetric();cov_yk9hrcxcb().s[50]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_yk9hrcxcb().s[51]++;assert.strictEqual(metric.timeseries.length,2);cov_yk9hrcxcb().s[52]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:LABEL_VALUES_200,points:[{value:15,timestamp:{nanos:mockedTime.nanos,seconds:mockedTime.seconds}}]},{labelValues:LABEL_VALUES_400,points:[{value:-8,timestamp:{nanos:mockedTime.nanos,seconds:mockedTime.seconds}}]}]);});cov_yk9hrcxcb().s[53]++;it('should not create same timeseries again',()=>{cov_yk9hrcxcb().f[9]++;const point=(cov_yk9hrcxcb().s[54]++,instance.getOrCreateTimeSeries(LABEL_VALUES_200));cov_yk9hrcxcb().s[55]++;point.add(10);let metric=(cov_yk9hrcxcb().s[56]++,instance.getMetric());cov_yk9hrcxcb().s[57]++;assert.notStrictEqual(metric,null);cov_yk9hrcxcb().s[58]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_yk9hrcxcb().s[59]++;assert.strictEqual(metric.timeseries.length,1);cov_yk9hrcxcb().s[60]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:LABEL_VALUES_200,points:[{value:10,timestamp:{nanos:mockedTime.nanos,seconds:mockedTime.seconds}}]}]);// create timeseries with same labels.
const point1=(cov_yk9hrcxcb().s[61]++,instance.getOrCreateTimeSeries(LABEL_VALUES_200));cov_yk9hrcxcb().s[62]++;point1.add(30);cov_yk9hrcxcb().s[63]++;metric=instance.getMetric();cov_yk9hrcxcb().s[64]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_yk9hrcxcb().s[65]++;assert.strictEqual(metric.timeseries.length,1);cov_yk9hrcxcb().s[66]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:LABEL_VALUES_200,points:[{value:40,timestamp:{nanos:mockedTime.nanos,seconds:mockedTime.seconds}}]}]);});});cov_yk9hrcxcb().s[67]++;describe('getDefaultTimeSeries()',()=>{cov_yk9hrcxcb().f[10]++;cov_yk9hrcxcb().s[68]++;it('should create new default timeseries',()=>{cov_yk9hrcxcb().f[11]++;const point=(cov_yk9hrcxcb().s[69]++,instance.getDefaultTimeSeries());cov_yk9hrcxcb().s[70]++;point.add(10);const metric=(cov_yk9hrcxcb().s[71]++,instance.getMetric());cov_yk9hrcxcb().s[72]++;assert.notStrictEqual(metric,null);cov_yk9hrcxcb().s[73]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_yk9hrcxcb().s[74]++;assert.strictEqual(metric.timeseries.length,1);cov_yk9hrcxcb().s[75]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:[UNSET_LABEL_VALUE],points:[{value:10,timestamp:{nanos:mockedTime.nanos,seconds:mockedTime.seconds}}]}]);});cov_yk9hrcxcb().s[76]++;it('should return same timeseries for interchanged labels',()=>{cov_yk9hrcxcb().f[12]++;cov_yk9hrcxcb().s[77]++;instance=new gauge_1.Gauge(METRIC_NAME,METRIC_DESCRIPTION,UNIT,GAUGE_INT64,[{key:'k1',description:'desc'},{key:'k2',description:'desc'}],EMPTY_CONSTANT_LABELS);const point=(cov_yk9hrcxcb().s[78]++,instance.getOrCreateTimeSeries([{value:'200'},{value:'400'}]));cov_yk9hrcxcb().s[79]++;point.add(200);const point1=(cov_yk9hrcxcb().s[80]++,instance.getOrCreateTimeSeries([{value:'400'},{value:'200'}]));cov_yk9hrcxcb().s[81]++;point1.add(400);const metric=(cov_yk9hrcxcb().s[82]++,instance.getMetric());cov_yk9hrcxcb().s[83]++;assert.strictEqual(metric.timeseries.length,1);});cov_yk9hrcxcb().s[84]++;it('should add constant labels',()=>{cov_yk9hrcxcb().f[13]++;cov_yk9hrcxcb().s[85]++;instance=new gauge_1.Gauge(METRIC_NAME,METRIC_DESCRIPTION,UNIT,GAUGE_INT64,[{key:'k1',description:'desc'},{key:'k2',description:'desc'}],CONSTANT_LABELS);const point=(cov_yk9hrcxcb().s[86]++,instance.getOrCreateTimeSeries([{value:'200'},{value:'400'}]));cov_yk9hrcxcb().s[87]++;point.add(200);const metric=(cov_yk9hrcxcb().s[88]++,instance.getMetric());cov_yk9hrcxcb().s[89]++;assert.strictEqual(metric.timeseries.length,1);cov_yk9hrcxcb().s[90]++;assert.deepStrictEqual(metric.descriptor.labelKeys,[{key:'k1',description:'desc'},{key:'k2',description:'desc'},{key:'host',description:'host'}]);cov_yk9hrcxcb().s[91]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:[{value:'200'},{value:'400'},{value:'localhost'}],points:[{value:200,timestamp:{nanos:mockedTime.nanos,seconds:mockedTime.seconds}}]}]);});cov_yk9hrcxcb().s[92]++;it('should create same labelValues as labelKeys',()=>{cov_yk9hrcxcb().f[14]++;cov_yk9hrcxcb().s[93]++;instance=new gauge_1.Gauge(METRIC_NAME,METRIC_DESCRIPTION,UNIT,GAUGE_INT64,[{key:'k1',description:'desc'},{key:'k2',description:'desc'},{key:'k3',description:'desc'}],EMPTY_CONSTANT_LABELS);const point=(cov_yk9hrcxcb().s[94]++,instance.getDefaultTimeSeries());cov_yk9hrcxcb().s[95]++;point.add(200);const metric=(cov_yk9hrcxcb().s[96]++,instance.getMetric());cov_yk9hrcxcb().s[97]++;assert.notStrictEqual(metric,null);cov_yk9hrcxcb().s[98]++;assert.deepStrictEqual(metric.descriptor.labelKeys.length,3);cov_yk9hrcxcb().s[99]++;assert.deepStrictEqual(metric.descriptor.type,1);cov_yk9hrcxcb().s[100]++;assert.strictEqual(metric.timeseries.length,1);cov_yk9hrcxcb().s[101]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:[UNSET_LABEL_VALUE,UNSET_LABEL_VALUE,UNSET_LABEL_VALUE],points:[{value:200,timestamp:{nanos:mockedTime.nanos,seconds:mockedTime.seconds}}]}]);});cov_yk9hrcxcb().s[102]++;it('should use previously created default timeseries',()=>{cov_yk9hrcxcb().f[15]++;const point=(cov_yk9hrcxcb().s[103]++,instance.getDefaultTimeSeries());cov_yk9hrcxcb().s[104]++;point.add(300);let metric=(cov_yk9hrcxcb().s[105]++,instance.getMetric());cov_yk9hrcxcb().s[106]++;assert.notStrictEqual(metric,null);cov_yk9hrcxcb().s[107]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_yk9hrcxcb().s[108]++;assert.strictEqual(metric.timeseries.length,1);cov_yk9hrcxcb().s[109]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:[UNSET_LABEL_VALUE],points:[{value:300,timestamp:{nanos:mockedTime.nanos,seconds:mockedTime.seconds}}]}]);// get default timeseries again.
const point1=(cov_yk9hrcxcb().s[110]++,instance.getDefaultTimeSeries());cov_yk9hrcxcb().s[111]++;point1.add(400);cov_yk9hrcxcb().s[112]++;metric=instance.getMetric();cov_yk9hrcxcb().s[113]++;assert.notStrictEqual(metric,null);cov_yk9hrcxcb().s[114]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_yk9hrcxcb().s[115]++;assert.strictEqual(metric.timeseries.length,1);cov_yk9hrcxcb().s[116]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:[UNSET_LABEL_VALUE],points:[{value:700,timestamp:{nanos:mockedTime.nanos,seconds:mockedTime.seconds}}]}]);});});cov_yk9hrcxcb().s[117]++;describe('removeTimeSeries()',()=>{cov_yk9hrcxcb().f[16]++;cov_yk9hrcxcb().s[118]++;it('should remove TimeSeries',()=>{cov_yk9hrcxcb().f[17]++;const point=(cov_yk9hrcxcb().s[119]++,instance.getOrCreateTimeSeries(LABEL_VALUES_200));cov_yk9hrcxcb().s[120]++;point.add(10);let metric=(cov_yk9hrcxcb().s[121]++,instance.getMetric());cov_yk9hrcxcb().s[122]++;assert.notStrictEqual(metric,null);cov_yk9hrcxcb().s[123]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_yk9hrcxcb().s[124]++;instance.removeTimeSeries(LABEL_VALUES_200);cov_yk9hrcxcb().s[125]++;metric=instance.getMetric();cov_yk9hrcxcb().s[126]++;assert.deepStrictEqual(metric,null);});});cov_yk9hrcxcb().s[127]++;describe('clear()',()=>{cov_yk9hrcxcb().f[18]++;cov_yk9hrcxcb().s[128]++;it('should clear all TimeSeries',()=>{cov_yk9hrcxcb().f[19]++;const point=(cov_yk9hrcxcb().s[129]++,instance.getOrCreateTimeSeries(LABEL_VALUES_200));cov_yk9hrcxcb().s[130]++;point.add(10);const point1=(cov_yk9hrcxcb().s[131]++,instance.getOrCreateTimeSeries(LABEL_VALUES_400));cov_yk9hrcxcb().s[132]++;point1.add(10);let metric=(cov_yk9hrcxcb().s[133]++,instance.getMetric());cov_yk9hrcxcb().s[134]++;assert.notStrictEqual(metric,null);cov_yk9hrcxcb().s[135]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_yk9hrcxcb().s[136]++;assert.strictEqual(metric.timeseries.length,2);cov_yk9hrcxcb().s[137]++;instance.clear();cov_yk9hrcxcb().s[138]++;metric=instance.getMetric();cov_yk9hrcxcb().s[139]++;assert.deepStrictEqual(metric,null);});});});cov_yk9hrcxcb().s[140]++;describe('GAUGE_DOUBLE',()=>{cov_yk9hrcxcb().f[20]++;let instance;const realHrtimeFn=(cov_yk9hrcxcb().s[141]++,process.hrtime);const realNowFn=(cov_yk9hrcxcb().s[142]++,Date.now);const mockedTime=(cov_yk9hrcxcb().s[143]++,{seconds:1450000100,nanos:1e7});const expectedMetricDescriptor=(cov_yk9hrcxcb().s[144]++,{name:METRIC_NAME,description:METRIC_DESCRIPTION,unit:UNIT,type:GAUGE_DOUBLE,labelKeys:LABEL_KEYS});cov_yk9hrcxcb().s[145]++;beforeEach(()=>{cov_yk9hrcxcb().f[21]++;cov_yk9hrcxcb().s[146]++;instance=new gauge_1.Gauge(METRIC_NAME,METRIC_DESCRIPTION,UNIT,GAUGE_DOUBLE,LABEL_KEYS,EMPTY_CONSTANT_LABELS);// @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message
cov_yk9hrcxcb().s[147]++;process.hrtime=()=>{cov_yk9hrcxcb().f[22]++;cov_yk9hrcxcb().s[148]++;return[100,1e7];};cov_yk9hrcxcb().s[149]++;Date.now=()=>{cov_yk9hrcxcb().f[23]++;cov_yk9hrcxcb().s[150]++;return 1450000000000;};// Force the clock to recalibrate the time offset with the mocked time
cov_yk9hrcxcb().s[151]++;time_util_1.TEST_ONLY.setHrtimeReference();});cov_yk9hrcxcb().s[152]++;afterEach(()=>{cov_yk9hrcxcb().f[24]++;cov_yk9hrcxcb().s[153]++;process.hrtime=realHrtimeFn;cov_yk9hrcxcb().s[154]++;Date.now=realNowFn;// Reset the hrtime reference so that it uses a real clock again.
cov_yk9hrcxcb().s[155]++;time_util_1.TEST_ONLY.resetHrtimeFunctionCache();});cov_yk9hrcxcb().s[156]++;describe('getOrCreateTimeSeries()',()=>{cov_yk9hrcxcb().f[25]++;cov_yk9hrcxcb().s[157]++;it('should throw an error when the keys and values dont have same size',()=>{cov_yk9hrcxcb().f[26]++;cov_yk9hrcxcb().s[158]++;assert.throws(()=>{cov_yk9hrcxcb().f[27]++;cov_yk9hrcxcb().s[159]++;instance.getOrCreateTimeSeries(LABEL_VALUES_EXRTA);},/^Error: Label Keys and Label Values don't have same size$/);});cov_yk9hrcxcb().s[160]++;it('should return a Metric',()=>{cov_yk9hrcxcb().f[28]++;const point=(cov_yk9hrcxcb().s[161]++,instance.getOrCreateTimeSeries(LABEL_VALUES_200));cov_yk9hrcxcb().s[162]++;point.add(10.34);let metric=(cov_yk9hrcxcb().s[163]++,instance.getMetric());cov_yk9hrcxcb().s[164]++;assert.notStrictEqual(metric,null);cov_yk9hrcxcb().s[165]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_yk9hrcxcb().s[166]++;assert.strictEqual(metric.timeseries.length,1);cov_yk9hrcxcb().s[167]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:LABEL_VALUES_200,points:[{value:10.34,timestamp:{nanos:mockedTime.nanos,seconds:mockedTime.seconds}}]}]);// add value and create new timeseries.
cov_yk9hrcxcb().s[168]++;point.add(5.12);const point1=(cov_yk9hrcxcb().s[169]++,instance.getOrCreateTimeSeries(LABEL_VALUES_400));cov_yk9hrcxcb().s[170]++;point1.set(-8.3);cov_yk9hrcxcb().s[171]++;metric=instance.getMetric();cov_yk9hrcxcb().s[172]++;assert.strictEqual(metric.timeseries.length,2);cov_yk9hrcxcb().s[173]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:LABEL_VALUES_200,points:[{value:15.46,timestamp:{nanos:mockedTime.nanos,seconds:mockedTime.seconds}}]},{labelValues:LABEL_VALUES_400,points:[{value:-8.3,timestamp:{nanos:mockedTime.nanos,seconds:mockedTime.seconds}}]}]);});cov_yk9hrcxcb().s[174]++;it('should not create same timeseries again',()=>{cov_yk9hrcxcb().f[29]++;const point=(cov_yk9hrcxcb().s[175]++,instance.getOrCreateTimeSeries(LABEL_VALUES_200));cov_yk9hrcxcb().s[176]++;point.add(12.1);let metric=(cov_yk9hrcxcb().s[177]++,instance.getMetric());cov_yk9hrcxcb().s[178]++;assert.notStrictEqual(metric,null);cov_yk9hrcxcb().s[179]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_yk9hrcxcb().s[180]++;assert.strictEqual(metric.timeseries.length,1);cov_yk9hrcxcb().s[181]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:LABEL_VALUES_200,points:[{value:12.1,timestamp:{nanos:mockedTime.nanos,seconds:mockedTime.seconds}}]}]);// create timeseries with same labels.
const point1=(cov_yk9hrcxcb().s[182]++,instance.getOrCreateTimeSeries(LABEL_VALUES_200));cov_yk9hrcxcb().s[183]++;point1.add(30.18);cov_yk9hrcxcb().s[184]++;metric=instance.getMetric();cov_yk9hrcxcb().s[185]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_yk9hrcxcb().s[186]++;assert.strictEqual(metric.timeseries.length,1);cov_yk9hrcxcb().s[187]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:LABEL_VALUES_200,points:[{value:42.28,timestamp:{nanos:mockedTime.nanos,seconds:mockedTime.seconds}}]}]);});});cov_yk9hrcxcb().s[188]++;describe('getDefaultTimeSeries()',()=>{cov_yk9hrcxcb().f[30]++;cov_yk9hrcxcb().s[189]++;it('should create new default timeseries',()=>{cov_yk9hrcxcb().f[31]++;const point=(cov_yk9hrcxcb().s[190]++,instance.getDefaultTimeSeries());cov_yk9hrcxcb().s[191]++;point.add(10.1);const metric=(cov_yk9hrcxcb().s[192]++,instance.getMetric());cov_yk9hrcxcb().s[193]++;assert.notStrictEqual(metric,null);cov_yk9hrcxcb().s[194]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_yk9hrcxcb().s[195]++;assert.strictEqual(metric.timeseries.length,1);cov_yk9hrcxcb().s[196]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:[UNSET_LABEL_VALUE],points:[{value:10.1,timestamp:{nanos:mockedTime.nanos,seconds:mockedTime.seconds}}]}]);});cov_yk9hrcxcb().s[197]++;it('should use previously created default timeseries',()=>{cov_yk9hrcxcb().f[32]++;const point=(cov_yk9hrcxcb().s[198]++,instance.getDefaultTimeSeries());cov_yk9hrcxcb().s[199]++;point.add(300.1);let metric=(cov_yk9hrcxcb().s[200]++,instance.getMetric());cov_yk9hrcxcb().s[201]++;assert.notStrictEqual(metric,null);cov_yk9hrcxcb().s[202]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_yk9hrcxcb().s[203]++;assert.strictEqual(metric.timeseries.length,1);cov_yk9hrcxcb().s[204]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:[UNSET_LABEL_VALUE],points:[{value:300.1,timestamp:{nanos:mockedTime.nanos,seconds:mockedTime.seconds}}]}]);// get default timeseries again.
const point1=(cov_yk9hrcxcb().s[205]++,instance.getDefaultTimeSeries());cov_yk9hrcxcb().s[206]++;point1.add(400.1);cov_yk9hrcxcb().s[207]++;metric=instance.getMetric();cov_yk9hrcxcb().s[208]++;assert.notStrictEqual(metric,null);cov_yk9hrcxcb().s[209]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_yk9hrcxcb().s[210]++;assert.strictEqual(metric.timeseries.length,1);cov_yk9hrcxcb().s[211]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:[UNSET_LABEL_VALUE],points:[{value:700.2,timestamp:{nanos:mockedTime.nanos,seconds:mockedTime.seconds}}]}]);});cov_yk9hrcxcb().s[212]++;it('should create same labelValues as labelKeys',()=>{cov_yk9hrcxcb().f[33]++;cov_yk9hrcxcb().s[213]++;instance=new gauge_1.Gauge(METRIC_NAME,METRIC_DESCRIPTION,UNIT,GAUGE_DOUBLE,[{key:'k1',description:'desc'},{key:'k2',description:'desc'},{key:'k3',description:'desc'}],EMPTY_CONSTANT_LABELS);const point=(cov_yk9hrcxcb().s[214]++,instance.getDefaultTimeSeries());cov_yk9hrcxcb().s[215]++;point.add(10.1);const metric=(cov_yk9hrcxcb().s[216]++,instance.getMetric());cov_yk9hrcxcb().s[217]++;assert.notStrictEqual(metric,null);cov_yk9hrcxcb().s[218]++;assert.deepStrictEqual(metric.descriptor.labelKeys.length,3);cov_yk9hrcxcb().s[219]++;assert.deepStrictEqual(metric.descriptor.type,2);cov_yk9hrcxcb().s[220]++;assert.strictEqual(metric.timeseries.length,1);cov_yk9hrcxcb().s[221]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:[UNSET_LABEL_VALUE,UNSET_LABEL_VALUE,UNSET_LABEL_VALUE],points:[{value:10.1,timestamp:{nanos:mockedTime.nanos,seconds:mockedTime.seconds}}]}]);});});cov_yk9hrcxcb().s[222]++;describe('removeTimeSeries()',()=>{cov_yk9hrcxcb().f[34]++;cov_yk9hrcxcb().s[223]++;it('should remove TimeSeries',()=>{cov_yk9hrcxcb().f[35]++;const point=(cov_yk9hrcxcb().s[224]++,instance.getOrCreateTimeSeries(LABEL_VALUES_200));cov_yk9hrcxcb().s[225]++;point.add(10.23);let metric=(cov_yk9hrcxcb().s[226]++,instance.getMetric());cov_yk9hrcxcb().s[227]++;assert.notStrictEqual(metric,null);cov_yk9hrcxcb().s[228]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_yk9hrcxcb().s[229]++;instance.removeTimeSeries(LABEL_VALUES_200);cov_yk9hrcxcb().s[230]++;metric=instance.getMetric();cov_yk9hrcxcb().s[231]++;assert.deepStrictEqual(metric,null);});});cov_yk9hrcxcb().s[232]++;describe('clear()',()=>{cov_yk9hrcxcb().f[36]++;cov_yk9hrcxcb().s[233]++;it('should clear all TimeSeries',()=>{cov_yk9hrcxcb().f[37]++;const point=(cov_yk9hrcxcb().s[234]++,instance.getOrCreateTimeSeries(LABEL_VALUES_200));cov_yk9hrcxcb().s[235]++;point.add(10.34);const point1=(cov_yk9hrcxcb().s[236]++,instance.getOrCreateTimeSeries(LABEL_VALUES_400));cov_yk9hrcxcb().s[237]++;point1.add(15.2);let metric=(cov_yk9hrcxcb().s[238]++,instance.getMetric());cov_yk9hrcxcb().s[239]++;assert.notStrictEqual(metric,null);cov_yk9hrcxcb().s[240]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_yk9hrcxcb().s[241]++;assert.strictEqual(metric.timeseries.length,2);cov_yk9hrcxcb().s[242]++;instance.clear();cov_yk9hrcxcb().s[243]++;metric=instance.getMetric();cov_yk9hrcxcb().s[244]++;assert.deepStrictEqual(metric,null);});});});//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,