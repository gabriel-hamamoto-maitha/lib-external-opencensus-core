"use strict";/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_mbc735say(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-tracer-base.ts";var hash="dda31e67ac48665cc546c893ac96f11746b22712";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-tracer-base.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:15},end:{line:18,column:32}},"2":{start:{line:19,column:13},end:{line:19,column:28}},"3":{start:{line:20,column:15},end:{line:20,column:46}},"4":{start:{line:21,column:30},end:{line:21,column:89}},"5":{start:{line:22,column:25},end:{line:22,column:79}},"6":{start:{line:23,column:15},end:{line:23,column:49}},"7":{start:{line:24,column:22},end:{line:24,column:63}},"8":{start:{line:25,column:14},end:{line:25,column:49}},"9":{start:{line:29,column:8},end:{line:29,column:27}},"10":{start:{line:34,column:8},end:{line:34,column:25}},"11":{start:{line:37,column:22},end:{line:39,column:1}},"12":{start:{line:40,column:0},end:{line:395,column:3}},"13":{start:{line:41,column:20},end:{line:41,column:36}},"14":{start:{line:43,column:4},end:{line:48,column:7}},"15":{start:{line:44,column:8},end:{line:47,column:11}},"16":{start:{line:45,column:27},end:{line:45,column:61}},"17":{start:{line:46,column:12},end:{line:46,column:70}},"18":{start:{line:50,column:4},end:{line:63,column:7}},"19":{start:{line:52,column:8},end:{line:56,column:11}},"20":{start:{line:53,column:27},end:{line:53,column:61}},"21":{start:{line:54,column:12},end:{line:54,column:53}},"22":{start:{line:55,column:12},end:{line:55,column:56}},"23":{start:{line:57,column:8},end:{line:59,column:11}},"24":{start:{line:58,column:12},end:{line:58,column:77}},"25":{start:{line:60,column:8},end:{line:62,column:11}},"26":{start:{line:61,column:12},end:{line:61,column:59}},"27":{start:{line:65,column:4},end:{line:82,column:7}},"28":{start:{line:67,column:8},end:{line:71,column:11}},"29":{start:{line:68,column:12},end:{line:68,column:56}},"30":{start:{line:69,column:12},end:{line:69,column:45}},"31":{start:{line:70,column:12},end:{line:70,column:56}},"32":{start:{line:72,column:8},end:{line:76,column:11}},"33":{start:{line:73,column:29},end:{line:73,column:53}},"34":{start:{line:74,column:12},end:{line:74,column:64}},"35":{start:{line:75,column:12},end:{line:75,column:52}},"36":{start:{line:77,column:8},end:{line:81,column:11}},"37":{start:{line:78,column:12},end:{line:80,column:13}},"38":{start:{line:79,column:16},end:{line:79,column:62}},"39":{start:{line:84,column:4},end:{line:98,column:7}},"40":{start:{line:86,column:8},end:{line:90,column:11}},"41":{start:{line:87,column:12},end:{line:87,column:56}},"42":{start:{line:88,column:12},end:{line:88,column:45}},"43":{start:{line:89,column:12},end:{line:89,column:56}},"44":{start:{line:91,column:8},end:{line:97,column:11}},"45":{start:{line:92,column:29},end:{line:92,column:53}},"46":{start:{line:93,column:12},end:{line:93,column:64}},"47":{start:{line:94,column:12},end:{line:94,column:52}},"48":{start:{line:95,column:12},end:{line:95,column:58}},"49":{start:{line:96,column:12},end:{line:96,column:64}},"50":{start:{line:100,column:4},end:{line:109,column:7}},"51":{start:{line:101,column:8},end:{line:108,column:11}},"52":{start:{line:102,column:27},end:{line:102,column:61}},"53":{start:{line:103,column:12},end:{line:103,column:53}},"54":{start:{line:104,column:12},end:{line:104,column:40}},"55":{start:{line:105,column:12},end:{line:105,column:52}},"56":{start:{line:106,column:12},end:{line:106,column:26}},"57":{start:{line:107,column:12},end:{line:107,column:53}},"58":{start:{line:111,column:4},end:{line:126,column:7}},"59":{start:{line:113,column:8},end:{line:119,column:11}},"60":{start:{line:114,column:27},end:{line:114,column:61}},"61":{start:{line:115,column:12},end:{line:115,column:40}},"62":{start:{line:116,column:12},end:{line:118,column:15}},"63":{start:{line:117,column:16},end:{line:117,column:41}},"64":{start:{line:120,column:8},end:{line:122,column:11}},"65":{start:{line:121,column:12},end:{line:121,column:60}},"66":{start:{line:123,column:8},end:{line:125,column:11}},"67":{start:{line:124,column:12},end:{line:124,column:45}},"68":{start:{line:127,column:4},end:{line:142,column:7}},"69":{start:{line:128,column:23},end:{line:128,column:57}},"70":{start:{line:129,column:23},end:{line:129,column:42}},"71":{start:{line:130,column:8},end:{line:135,column:11}},"72":{start:{line:131,column:12},end:{line:131,column:33}},"73":{start:{line:132,column:12},end:{line:134,column:15}},"74":{start:{line:133,column:16},end:{line:133,column:86}},"75":{start:{line:136,column:8},end:{line:141,column:11}},"76":{start:{line:137,column:12},end:{line:137,column:33}},"77":{start:{line:138,column:12},end:{line:140,column:15}},"78":{start:{line:139,column:16},end:{line:139,column:36}},"79":{start:{line:143,column:4},end:{line:158,column:7}},"80":{start:{line:144,column:23},end:{line:144,column:57}},"81":{start:{line:145,column:23},end:{line:145,column:42}},"82":{start:{line:146,column:8},end:{line:151,column:11}},"83":{start:{line:147,column:12},end:{line:147,column:33}},"84":{start:{line:148,column:12},end:{line:150,column:15}},"85":{start:{line:149,column:16},end:{line:149,column:36}},"86":{start:{line:152,column:8},end:{line:157,column:11}},"87":{start:{line:153,column:12},end:{line:153,column:33}},"88":{start:{line:154,column:12},end:{line:156,column:15}},"89":{start:{line:155,column:16},end:{line:155,column:86}},"90":{start:{line:159,column:4},end:{line:167,column:7}},"91":{start:{line:160,column:8},end:{line:166,column:11}},"92":{start:{line:161,column:27},end:{line:161,column:61}},"93":{start:{line:162,column:12},end:{line:162,column:53}},"94":{start:{line:163,column:12},end:{line:165,column:15}},"95":{start:{line:164,column:16},end:{line:164,column:86}},"96":{start:{line:168,column:4},end:{line:238,column:7}},"97":{start:{line:169,column:29},end:{line:172,column:9}},"98":{start:{line:173,column:8},end:{line:181,column:11}},"99":{start:{line:174,column:27},end:{line:174,column:61}},"100":{start:{line:175,column:12},end:{line:175,column:40}},"101":{start:{line:176,column:12},end:{line:180,column:15}},"102":{start:{line:177,column:16},end:{line:177,column:36}},"103":{start:{line:178,column:16},end:{line:178,column:69}},"104":{start:{line:179,column:16},end:{line:179,column:69}},"105":{start:{line:182,column:38},end:{line:189,column:9}},"106":{start:{line:190,column:8},end:{line:201,column:11}},"107":{start:{line:191,column:27},end:{line:191,column:61}},"108":{start:{line:192,column:12},end:{line:192,column:40}},"109":{start:{line:193,column:12},end:{line:193,column:61}},"110":{start:{line:194,column:12},end:{line:200,column:15}},"111":{start:{line:195,column:16},end:{line:195,column:36}},"112":{start:{line:196,column:16},end:{line:196,column:69}},"113":{start:{line:197,column:16},end:{line:197,column:69}},"114":{start:{line:198,column:16},end:{line:198,column:84}},"115":{start:{line:199,column:16},end:{line:199,column:88}},"116":{start:{line:202,column:8},end:{line:214,column:11}},"117":{start:{line:203,column:27},end:{line:203,column:61}},"118":{start:{line:204,column:12},end:{line:204,column:40}},"119":{start:{line:205,column:12},end:{line:205,column:51}},"120":{start:{line:206,column:12},end:{line:213,column:15}},"121":{start:{line:207,column:16},end:{line:207,column:36}},"122":{start:{line:208,column:16},end:{line:208,column:86}},"123":{start:{line:209,column:16},end:{line:209,column:69}},"124":{start:{line:210,column:16},end:{line:210,column:69}},"125":{start:{line:211,column:16},end:{line:211,column:84}},"126":{start:{line:212,column:16},end:{line:212,column:88}},"127":{start:{line:215,column:8},end:{line:222,column:11}},"128":{start:{line:216,column:27},end:{line:216,column:61}},"129":{start:{line:217,column:12},end:{line:217,column:40}},"130":{start:{line:218,column:12},end:{line:218,column:101}},"131":{start:{line:219,column:12},end:{line:219,column:94}},"132":{start:{line:220,column:12},end:{line:220,column:89}},"133":{start:{line:221,column:12},end:{line:221,column:97}},"134":{start:{line:223,column:8},end:{line:237,column:11}},"135":{start:{line:224,column:63},end:{line:229,column:13}},"136":{start:{line:230,column:12},end:{line:230,column:83}},"137":{start:{line:231,column:27},end:{line:231,column:61}},"138":{start:{line:232,column:12},end:{line:232,column:40}},"139":{start:{line:233,column:12},end:{line:233,column:94}},"140":{start:{line:234,column:12},end:{line:234,column:87}},"141":{start:{line:235,column:12},end:{line:235,column:82}},"142":{start:{line:236,column:12},end:{line:236,column:91}},"143":{start:{line:240,column:4},end:{line:342,column:7}},"144":{start:{line:243,column:8},end:{line:253,column:11}},"145":{start:{line:244,column:12},end:{line:244,column:56}},"146":{start:{line:245,column:12},end:{line:245,column:40}},"147":{start:{line:246,column:12},end:{line:252,column:15}},"148":{start:{line:247,column:16},end:{line:251,column:19}},"149":{start:{line:254,column:8},end:{line:256,column:11}},"150":{start:{line:255,column:12},end:{line:255,column:51}},"151":{start:{line:257,column:8},end:{line:261,column:11}},"152":{start:{line:258,column:12},end:{line:258,column:36}},"153":{start:{line:259,column:12},end:{line:259,column:54}},"154":{start:{line:260,column:12},end:{line:260,column:65}},"155":{start:{line:262,column:8},end:{line:273,column:11}},"156":{start:{line:263,column:12},end:{line:272,column:15}},"157":{start:{line:264,column:39},end:{line:268,column:18}},"158":{start:{line:269,column:16},end:{line:269,column:50}},"159":{start:{line:270,column:16},end:{line:270,column:67}},"160":{start:{line:271,column:16},end:{line:271,column:79}},"161":{start:{line:274,column:8},end:{line:284,column:11}},"162":{start:{line:275,column:12},end:{line:283,column:15}},"163":{start:{line:276,column:39},end:{line:279,column:18}},"164":{start:{line:280,column:16},end:{line:280,column:50}},"165":{start:{line:281,column:16},end:{line:281,column:68}},"166":{start:{line:282,column:16},end:{line:282,column:84}},"167":{start:{line:285,column:8},end:{line:291,column:11}},"168":{start:{line:286,column:12},end:{line:290,column:15}},"169":{start:{line:287,column:39},end:{line:287,column:62}},"170":{start:{line:288,column:16},end:{line:288,column:69}},"171":{start:{line:289,column:16},end:{line:289,column:84}},"172":{start:{line:292,column:8},end:{line:327,column:11}},"173":{start:{line:293,column:12},end:{line:326,column:15}},"174":{start:{line:294,column:16},end:{line:294,column:65}},"175":{start:{line:295,column:31},end:{line:299,column:18}},"176":{start:{line:300,column:16},end:{line:300,column:65}},"177":{start:{line:301,column:16},end:{line:301,column:63}},"178":{start:{line:302,column:31},end:{line:306,column:18}},"179":{start:{line:307,column:16},end:{line:307,column:65}},"180":{start:{line:308,column:36},end:{line:312,column:18}},"181":{start:{line:313,column:16},end:{line:313,column:65}},"182":{start:{line:314,column:16},end:{line:314,column:63}},"183":{start:{line:315,column:16},end:{line:315,column:63}},"184":{start:{line:316,column:16},end:{line:316,column:68}},"185":{start:{line:317,column:16},end:{line:317,column:61}},"186":{start:{line:318,column:16},end:{line:318,column:62}},"187":{start:{line:319,column:16},end:{line:319,column:62}},"188":{start:{line:320,column:16},end:{line:320,column:72}},"189":{start:{line:321,column:16},end:{line:321,column:59}},"190":{start:{line:322,column:16},end:{line:322,column:65}},"191":{start:{line:323,column:16},end:{line:323,column:59}},"192":{start:{line:324,column:16},end:{line:324,column:64}},"193":{start:{line:325,column:16},end:{line:325,column:72}},"194":{start:{line:328,column:8},end:{line:341,column:11}},"195":{start:{line:329,column:12},end:{line:329,column:74}},"196":{start:{line:330,column:12},end:{line:330,column:40}},"197":{start:{line:331,column:12},end:{line:340,column:15}},"198":{start:{line:332,column:29},end:{line:335,column:18}},"199":{start:{line:336,column:16},end:{line:338,column:17}},"200":{start:{line:336,column:29},end:{line:336,column:30}},"201":{start:{line:337,column:20},end:{line:337,column:54}},"202":{start:{line:339,column:16},end:{line:339,column:76}},"203":{start:{line:344,column:4},end:{line:354,column:7}},"204":{start:{line:345,column:8},end:{line:353,column:11}},"205":{start:{line:346,column:27},end:{line:346,column:61}},"206":{start:{line:347,column:12},end:{line:347,column:40}},"207":{start:{line:348,column:25},end:{line:351,column:14}},"208":{start:{line:352,column:12},end:{line:352,column:69}},"209":{start:{line:356,column:4},end:{line:381,column:7}},"210":{start:{line:361,column:8},end:{line:376,column:11}},"211":{start:{line:362,column:12},end:{line:362,column:56}},"212":{start:{line:363,column:12},end:{line:366,column:21}},"213":{start:{line:367,column:12},end:{line:367,column:39}},"214":{start:{line:368,column:12},end:{line:375,column:15}},"215":{start:{line:369,column:16},end:{line:369,column:41}},"216":{start:{line:370,column:16},end:{line:374,column:19}},"217":{start:{line:377,column:8},end:{line:380,column:11}},"218":{start:{line:378,column:12},end:{line:378,column:93}},"219":{start:{line:379,column:12},end:{line:379,column:84}},"220":{start:{line:383,column:4},end:{line:394,column:7}},"221":{start:{line:384,column:8},end:{line:393,column:11}},"222":{start:{line:385,column:27},end:{line:385,column:61}},"223":{start:{line:386,column:34},end:{line:386,column:54}},"224":{start:{line:387,column:12},end:{line:387,column:60}},"225":{start:{line:388,column:12},end:{line:388,column:40}},"226":{start:{line:389,column:12},end:{line:392,column:15}},"227":{start:{line:390,column:16},end:{line:390,column:31}},"228":{start:{line:391,column:16},end:{line:391,column:90}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:27,column:4},end:{line:27,column:5}},loc:{start:{line:27,column:18},end:{line:30,column:5}},line:27},"1":{name:"(anonymous_1)",decl:{start:{line:31,column:4},end:{line:31,column:5}},loc:{start:{line:31,column:22},end:{line:31,column:25}},line:31},"2":{name:"(anonymous_2)",decl:{start:{line:33,column:4},end:{line:33,column:5}},loc:{start:{line:33,column:20},end:{line:35,column:5}},line:33},"3":{name:"(anonymous_3)",decl:{start:{line:40,column:24},end:{line:40,column:25}},loc:{start:{line:40,column:30},end:{line:395,column:1}},line:40},"4":{name:"(anonymous_4)",decl:{start:{line:43,column:29},end:{line:43,column:30}},loc:{start:{line:43,column:35},end:{line:48,column:5}},line:43},"5":{name:"(anonymous_5)",decl:{start:{line:44,column:46},end:{line:44,column:47}},loc:{start:{line:44,column:52},end:{line:47,column:9}},line:44},"6":{name:"(anonymous_6)",decl:{start:{line:50,column:24},end:{line:50,column:25}},loc:{start:{line:50,column:30},end:{line:63,column:5}},line:50},"7":{name:"(anonymous_7)",decl:{start:{line:52,column:15},end:{line:52,column:16}},loc:{start:{line:52,column:21},end:{line:56,column:9}},line:52},"8":{name:"(anonymous_8)",decl:{start:{line:57,column:46},end:{line:57,column:47}},loc:{start:{line:57,column:52},end:{line:59,column:9}},line:57},"9":{name:"(anonymous_9)",decl:{start:{line:60,column:36},end:{line:60,column:37}},loc:{start:{line:60,column:42},end:{line:62,column:9}},line:60},"10":{name:"(anonymous_10)",decl:{start:{line:65,column:67},end:{line:65,column:68}},loc:{start:{line:65,column:73},end:{line:82,column:5}},line:65},"11":{name:"(anonymous_11)",decl:{start:{line:67,column:15},end:{line:67,column:16}},loc:{start:{line:67,column:21},end:{line:71,column:9}},line:67},"12":{name:"(anonymous_12)",decl:{start:{line:72,column:77},end:{line:72,column:78}},loc:{start:{line:72,column:83},end:{line:76,column:9}},line:72},"13":{name:"(anonymous_13)",decl:{start:{line:77,column:59},end:{line:77,column:60}},loc:{start:{line:77,column:65},end:{line:81,column:9}},line:77},"14":{name:"(anonymous_14)",decl:{start:{line:84,column:46},end:{line:84,column:47}},loc:{start:{line:84,column:52},end:{line:98,column:5}},line:84},"15":{name:"(anonymous_15)",decl:{start:{line:86,column:15},end:{line:86,column:16}},loc:{start:{line:86,column:21},end:{line:90,column:9}},line:86},"16":{name:"(anonymous_16)",decl:{start:{line:91,column:77},end:{line:91,column:78}},loc:{start:{line:91,column:83},end:{line:97,column:9}},line:91},"17":{name:"(anonymous_17)",decl:{start:{line:100,column:23},end:{line:100,column:24}},loc:{start:{line:100,column:29},end:{line:109,column:5}},line:100},"18":{name:"(anonymous_18)",decl:{start:{line:101,column:45},end:{line:101,column:46}},loc:{start:{line:101,column:51},end:{line:108,column:9}},line:101},"19":{name:"(anonymous_19)",decl:{start:{line:111,column:45},end:{line:111,column:46}},loc:{start:{line:111,column:51},end:{line:126,column:5}},line:111},"20":{name:"(anonymous_20)",decl:{start:{line:113,column:15},end:{line:113,column:16}},loc:{start:{line:113,column:21},end:{line:119,column:9}},line:113},"21":{name:"(anonymous_21)",decl:{start:{line:116,column:42},end:{line:116,column:43}},loc:{start:{line:116,column:54},end:{line:118,column:13}},line:116},"22":{name:"(anonymous_22)",decl:{start:{line:120,column:52},end:{line:120,column:53}},loc:{start:{line:120,column:58},end:{line:122,column:9}},line:120},"23":{name:"(anonymous_23)",decl:{start:{line:123,column:40},end:{line:123,column:41}},loc:{start:{line:123,column:46},end:{line:125,column:9}},line:123},"24":{name:"(anonymous_24)",decl:{start:{line:127,column:51},end:{line:127,column:52}},loc:{start:{line:127,column:57},end:{line:142,column:5}},line:127},"25":{name:"(anonymous_25)",decl:{start:{line:130,column:61},end:{line:130,column:62}},loc:{start:{line:130,column:67},end:{line:135,column:9}},line:130},"26":{name:"(anonymous_26)",decl:{start:{line:132,column:42},end:{line:132,column:43}},loc:{start:{line:132,column:54},end:{line:134,column:13}},line:132},"27":{name:"(anonymous_27)",decl:{start:{line:136,column:97},end:{line:136,column:98}},loc:{start:{line:136,column:103},end:{line:141,column:9}},line:136},"28":{name:"(anonymous_28)",decl:{start:{line:138,column:68},end:{line:138,column:69}},loc:{start:{line:138,column:80},end:{line:140,column:13}},line:138},"29":{name:"(anonymous_29)",decl:{start:{line:143,column:52},end:{line:143,column:53}},loc:{start:{line:143,column:58},end:{line:158,column:5}},line:143},"30":{name:"(anonymous_30)",decl:{start:{line:146,column:53},end:{line:146,column:54}},loc:{start:{line:146,column:59},end:{line:151,column:9}},line:146},"31":{name:"(anonymous_31)",decl:{start:{line:148,column:42},end:{line:148,column:43}},loc:{start:{line:148,column:54},end:{line:150,column:13}},line:148},"32":{name:"(anonymous_32)",decl:{start:{line:152,column:104},end:{line:152,column:105}},loc:{start:{line:152,column:110},end:{line:157,column:9}},line:152},"33":{name:"(anonymous_33)",decl:{start:{line:154,column:68},end:{line:154,column:69}},loc:{start:{line:154,column:80},end:{line:156,column:13}},line:154},"34":{name:"(anonymous_34)",decl:{start:{line:159,column:47},end:{line:159,column:48}},loc:{start:{line:159,column:53},end:{line:167,column:5}},line:159},"35":{name:"(anonymous_35)",decl:{start:{line:160,column:81},end:{line:160,column:82}},loc:{start:{line:160,column:87},end:{line:166,column:9}},line:160},"36":{name:"(anonymous_36)",decl:{start:{line:163,column:42},end:{line:163,column:43}},loc:{start:{line:163,column:54},end:{line:165,column:13}},line:163},"37":{name:"(anonymous_37)",decl:{start:{line:168,column:57},end:{line:168,column:58}},loc:{start:{line:168,column:63},end:{line:238,column:5}},line:168},"38":{name:"(anonymous_38)",decl:{start:{line:173,column:66},end:{line:173,column:67}},loc:{start:{line:173,column:72},end:{line:181,column:9}},line:173},"39":{name:"(anonymous_39)",decl:{start:{line:176,column:47},end:{line:176,column:48}},loc:{start:{line:176,column:59},end:{line:180,column:13}},line:176},"40":{name:"(anonymous_40)",decl:{start:{line:190,column:62},end:{line:190,column:63}},loc:{start:{line:190,column:68},end:{line:201,column:9}},line:190},"41":{name:"(anonymous_41)",decl:{start:{line:194,column:47},end:{line:194,column:48}},loc:{start:{line:194,column:59},end:{line:200,column:13}},line:194},"42":{name:"(anonymous_42)",decl:{start:{line:202,column:101},end:{line:202,column:102}},loc:{start:{line:202,column:107},end:{line:214,column:9}},line:202},"43":{name:"(anonymous_43)",decl:{start:{line:206,column:47},end:{line:206,column:48}},loc:{start:{line:206,column:59},end:{line:213,column:13}},line:206},"44":{name:"(anonymous_44)",decl:{start:{line:215,column:115},end:{line:215,column:116}},loc:{start:{line:215,column:121},end:{line:222,column:9}},line:215},"45":{name:"(anonymous_45)",decl:{start:{line:223,column:142},end:{line:223,column:143}},loc:{start:{line:223,column:148},end:{line:237,column:9}},line:223},"46":{name:"(anonymous_46)",decl:{start:{line:240,column:33},end:{line:240,column:34}},loc:{start:{line:240,column:39},end:{line:342,column:5}},line:240},"47":{name:"(anonymous_47)",decl:{start:{line:243,column:15},end:{line:243,column:16}},loc:{start:{line:243,column:21},end:{line:253,column:9}},line:243},"48":{name:"(anonymous_48)",decl:{start:{line:246,column:42},end:{line:246,column:43}},loc:{start:{line:246,column:54},end:{line:252,column:13}},line:246},"49":{name:"(anonymous_49)",decl:{start:{line:254,column:44},end:{line:254,column:45}},loc:{start:{line:254,column:50},end:{line:256,column:9}},line:254},"50":{name:"(anonymous_50)",decl:{start:{line:257,column:34},end:{line:257,column:35}},loc:{start:{line:257,column:40},end:{line:261,column:9}},line:257},"51":{name:"(anonymous_51)",decl:{start:{line:262,column:50},end:{line:262,column:51}},loc:{start:{line:262,column:56},end:{line:273,column:9}},line:262},"52":{name:"(anonymous_52)",decl:{start:{line:263,column:42},end:{line:263,column:43}},loc:{start:{line:263,column:54},end:{line:272,column:13}},line:263},"53":{name:"(anonymous_53)",decl:{start:{line:274,column:55},end:{line:274,column:56}},loc:{start:{line:274,column:61},end:{line:284,column:9}},line:274},"54":{name:"(anonymous_54)",decl:{start:{line:275,column:42},end:{line:275,column:43}},loc:{start:{line:275,column:54},end:{line:283,column:13}},line:275},"55":{name:"(anonymous_55)",decl:{start:{line:285,column:59},end:{line:285,column:60}},loc:{start:{line:285,column:65},end:{line:291,column:9}},line:285},"56":{name:"(anonymous_56)",decl:{start:{line:286,column:42},end:{line:286,column:43}},loc:{start:{line:286,column:54},end:{line:290,column:13}},line:286},"57":{name:"(anonymous_57)",decl:{start:{line:292,column:45},end:{line:292,column:46}},loc:{start:{line:292,column:51},end:{line:327,column:9}},line:292},"58":{name:"(anonymous_58)",decl:{start:{line:293,column:42},end:{line:293,column:43}},loc:{start:{line:293,column:54},end:{line:326,column:13}},line:293},"59":{name:"(anonymous_59)",decl:{start:{line:328,column:74},end:{line:328,column:75}},loc:{start:{line:328,column:80},end:{line:341,column:9}},line:328},"60":{name:"(anonymous_60)",decl:{start:{line:331,column:42},end:{line:331,column:43}},loc:{start:{line:331,column:54},end:{line:340,column:13}},line:331},"61":{name:"(anonymous_61)",decl:{start:{line:344,column:56},end:{line:344,column:57}},loc:{start:{line:344,column:62},end:{line:354,column:5}},line:344},"62":{name:"(anonymous_62)",decl:{start:{line:345,column:72},end:{line:345,column:73}},loc:{start:{line:345,column:78},end:{line:353,column:9}},line:345},"63":{name:"(anonymous_63)",decl:{start:{line:356,column:69},end:{line:356,column:70}},loc:{start:{line:356,column:75},end:{line:381,column:5}},line:356},"64":{name:"(anonymous_64)",decl:{start:{line:361,column:15},end:{line:361,column:16}},loc:{start:{line:361,column:21},end:{line:376,column:9}},line:361},"65":{name:"(anonymous_65)",decl:{start:{line:368,column:42},end:{line:368,column:43}},loc:{start:{line:368,column:54},end:{line:375,column:13}},line:368},"66":{name:"(anonymous_66)",decl:{start:{line:377,column:45},end:{line:377,column:46}},loc:{start:{line:377,column:51},end:{line:380,column:9}},line:377},"67":{name:"(anonymous_67)",decl:{start:{line:383,column:28},end:{line:383,column:29}},loc:{start:{line:383,column:34},end:{line:394,column:5}},line:383},"68":{name:"(anonymous_68)",decl:{start:{line:384,column:63},end:{line:384,column:64}},loc:{start:{line:384,column:69},end:{line:393,column:9}},line:384},"69":{name:"(anonymous_69)",decl:{start:{line:389,column:42},end:{line:389,column:43}},loc:{start:{line:389,column:54},end:{line:392,column:13}},line:389}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0},b:{},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-tracer-base.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-tracer-base.ts"],names:[],mappings:";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,iCAAiC;AACjC,6BAA6B;AAE7B,+CAAoD;AAGpD,0FAAoF;AACpF,gFAA2E;AAC3E,kDAA+C;AAC/C,gEAAgE;AAChE,kDAAkD;AAGlD,MAAM,cAAc;IAApB;QACE,2BAA2B;QAC3B,cAAS,GAAG,CAAC,CAAC;IAMhB,CAAC;IALC,WAAW,CAAC,IAAU,IAAS,CAAC;IAChC,mCAAmC;IACnC,SAAS,CAAC,IAAU;QAClB,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;CACF;AAED,MAAM,aAAa,GAAiB;IAClC,YAAY,EAAE,GAAG;CAClB,CAAC;AAEF,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IAC3B,MAAM,OAAO,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;IAEjC,sCAAsC;IACtC,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;YACzC,MAAM,MAAM,GAAG,IAAI,4BAAc,EAAE,CAAC;YACpC,MAAM,CAAC,EAAE,CAAC,MAAM,YAAY,4BAAc,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,8CAA8C;IAC9C,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACvB,IAAI,aAA+B,CAAC;QACpC,MAAM,CAAC,GAAG,EAAE;YACV,MAAM,MAAM,GAAG,IAAI,4BAAc,EAAE,CAAC;YACpC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YACzC,aAAa,GAAG,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;YACzC,MAAM,CAAC,EAAE,CAAC,aAAa,YAAY,4BAAc,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uBAAuB,EAAE,GAAG,EAAE;YAC/B,MAAM,CAAC,WAAW,CAAC,aAAa,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,mDAAmD;IACnD,QAAQ,CAAC,oDAAoD,EAAE,GAAG,EAAE;QAClE,IAAI,MAAwB,EAAE,SAAyB,CAAC;QACxD,MAAM,CAAC,GAAG,EAAE;YACV,MAAM,GAAG,IAAI,4BAAc,EAAE,CAAC;YAC9B,SAAS,GAAG,IAAI,cAAc,EAAE,CAAC;YACjC,MAAM,CAAC,yBAAyB,CAAC,SAAS,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;YACxE,MAAM,QAAQ,GAAG,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;YAC1C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACpD,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;YACtD,KAAK,MAAM,QAAQ,IAAI,MAAM,CAAC,cAAc,EAAE;gBAC5C,MAAM,CAAC,EAAE,CAAC,QAAQ,YAAY,cAAc,CAAC,CAAC;aAC/C;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,iDAAiD;IACjD,QAAQ,CAAC,+BAA+B,EAAE,GAAG,EAAE;QAC7C,IAAI,MAAwB,EAAE,SAAyB,CAAC;QACxD,MAAM,CAAC,GAAG,EAAE;YACV,MAAM,GAAG,IAAI,4BAAc,EAAE,CAAC;YAC9B,SAAS,GAAG,IAAI,cAAc,EAAE,CAAC;YACjC,MAAM,CAAC,yBAAyB,CAAC,SAAS,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;YACxE,MAAM,QAAQ,GAAG,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;YAC1C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACpD,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;YACxC,MAAM,CAAC,2BAA2B,CAAC,SAAS,CAAC,CAAC;YAC9C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,qCAAqC;IACrC,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;YACxC,MAAM,MAAM,GAAG,IAAI,4BAAc,EAAE,CAAC;YACpC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YACzC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YAC5B,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YACxC,MAAM,CAAC,IAAI,EAAE,CAAC;YACd,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,mEAAmE;IACnE,QAAQ,CAAC,8BAA8B,EAAE,GAAG,EAAE;QAC5C,IAAI,aAAyB,CAAC;QAC9B,MAAM,CAAC,GAAG,EAAE;YACV,MAAM,MAAM,GAAG,IAAI,4BAAc,EAAE,CAAC;YACpC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YAC5B,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE;gBACvC,aAAa,GAAG,QAAQ,CAAC;YAC3B,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;YAC/C,MAAM,CAAC,EAAE,CAAC,aAAa,YAAY,WAAI,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;YACnC,MAAM,CAAC,EAAE,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oCAAoC,EAAE,GAAG,EAAE;QAClD,MAAM,MAAM,GAAG,IAAI,4BAAc,EAAE,CAAC;QACpC,MAAM,MAAM,GAAiB,EAAE,YAAY,EAAE,CAAC,EAAE,CAAC;QAEjD,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;YACxD,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YACrB,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE;gBACvC,MAAM,CAAC,EAAE,CAAC,QAAQ,YAAY,sCAAgB,CAAC,CAAC;YAClD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oFAAoF,EAAE,GAAG,EAAE;YAC5F,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YACrB,MAAM,CAAC,aAAa,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,YAAY,EAAE,CAAC,EAAE,EAAE,QAAQ,CAAC,EAAE;gBACjE,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;YACtB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qCAAqC,EAAE,GAAG,EAAE;QACnD,MAAM,MAAM,GAAG,IAAI,4BAAc,EAAE,CAAC;QACpC,MAAM,MAAM,GAAiB,EAAE,YAAY,EAAE,CAAC,EAAE,CAAC;QAEjD,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;YAChD,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YACrB,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE;gBACvC,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;YACtB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2FAA2F,EAAE,GAAG,EAAE;YACnG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YACrB,MAAM,CAAC,aAAa,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,YAAY,EAAE,CAAC,EAAE,EAAE,QAAQ,CAAC,EAAE;gBACjE,MAAM,CAAC,EAAE,CAAC,QAAQ,YAAY,sCAAgB,CAAC,CAAC;YAClD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gCAAgC,EAAE,GAAG,EAAE;QAC9C,EAAE,CAAC,oEAAoE,EAAE,GAAG,EAAE;YAC5E,MAAM,MAAM,GAAG,IAAI,4BAAc,EAAE,CAAC;YACpC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YACzC,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE;gBACvC,MAAM,CAAC,EAAE,CAAC,QAAQ,YAAY,sCAAgB,CAAC,CAAC;YAClD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,0CAA0C,EAAE,GAAG,EAAE;QACxD,MAAM,YAAY,GAAuB;YACvC,IAAI,EAAE,UAAU;YAChB,IAAI,EAAE,KAAK,CAAC,QAAQ,CAAC,WAAW;SACjC,CAAC;QAEF,EAAE,CAAC,qDAAqD,EAAE,GAAG,EAAE;YAC7D,MAAM,MAAM,GAAG,IAAI,4BAAc,EAAE,CAAC;YACpC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YAC5B,MAAM,CAAC,aAAa,CAAC,YAAY,EAAE,QAAQ,CAAC,EAAE;gBAC5C,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;gBACpB,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC;gBACrD,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC;YACvD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,MAAM,qBAAqB,GAAsB;YAC/C,OAAO,EAAE,IAAI;iBACV,EAAE,EAAE;iBACJ,KAAK,CAAC,GAAG,CAAC;iBACV,IAAI,CAAC,EAAE,CAAC;YACX,MAAM,EAAE,mBAAY,EAAE;YACtB,OAAO,EAAE,GAAG;SACb,CAAC;QAEF,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;YACzD,MAAM,MAAM,GAAG,IAAI,4BAAc,EAAE,CAAC;YACpC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YAC5B,YAAY,CAAC,WAAW,GAAG,qBAAqB,CAAC;YACjD,MAAM,CAAC,aAAa,CAAC,YAAY,EAAE,QAAQ,CAAC,EAAE;gBAC5C,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;gBACpB,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC;gBACrD,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC;gBACrD,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,EAAE,qBAAqB,CAAC,OAAO,CAAC,CAAC;gBACpE,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,YAAY,EAAE,qBAAqB,CAAC,MAAM,CAAC,CAAC;YAC1E,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wFAAwF,EAAE,GAAG,EAAE;YAChG,MAAM,MAAM,GAAG,IAAI,4BAAc,EAAE,CAAC;YACpC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YAC5B,YAAY,CAAC,WAAY,CAAC,OAAO,GAAG,GAAG,CAAC;YACxC,MAAM,CAAC,aAAa,CAAC,YAAY,EAAE,QAAQ,CAAC,EAAE;gBAC5C,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;gBACpB,MAAM,CAAC,EAAE,CAAC,QAAQ,YAAY,sCAAgB,CAAC,CAAC;gBAChD,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC;gBACrD,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC;gBACrD,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,EAAE,qBAAqB,CAAC,OAAO,CAAC,CAAC;gBACpE,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,YAAY,EAAE,qBAAqB,CAAC,MAAM,CAAC,CAAC;YAC1E,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sGAAsG,EAAE,GAAG,EAAE;YAC9G,MAAM,MAAM,GAAG,IAAI,4BAAc,EAAE,CAAC;YACpC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YAC5B,MAAM,CAAC,WAAW,CAChB,MAAM,CAAC,iBAAiB,CAAC,gCAAgC,EACzD,SAAS,CACV,CAAC;YACF,MAAM,CAAC,WAAW,CAChB,MAAM,CAAC,iBAAiB,CAAC,yBAAyB,EAClD,SAAS,CACV,CAAC;YACF,MAAM,CAAC,WAAW,CAChB,MAAM,CAAC,iBAAiB,CAAC,oBAAoB,EAC7C,SAAS,CACV,CAAC;YACF,MAAM,CAAC,WAAW,CAChB,MAAM,CAAC,iBAAiB,CAAC,4BAA4B,EACrD,SAAS,CACV,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iIAAiI,EAAE,GAAG,EAAE;YACzI,MAAM,0CAA0C,GAAgB;gBAC9D,gCAAgC,EAAE,EAAE;gBACpC,4BAA4B,EAAE,GAAG;gBACjC,yBAAyB,EAAE,EAAE;gBAC7B,oBAAoB,EAAE,EAAE;aACzB,CAAC;YACF,aAAa,CAAC,WAAW,GAAG,0CAA0C,CAAC;YACvE,MAAM,MAAM,GAAG,IAAI,4BAAc,EAAE,CAAC;YACpC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YAC5B,MAAM,CAAC,WAAW,CAChB,MAAM,CAAC,iBAAiB,CAAC,gCAAgC,EACzD,EAAE,CACH,CAAC;YACF,MAAM,CAAC,WAAW,CAChB,MAAM,CAAC,iBAAiB,CAAC,yBAAyB,EAClD,EAAE,CACH,CAAC;YACF,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,oBAAoB,EAAE,EAAE,CAAC,CAAC;YACtE,MAAM,CAAC,WAAW,CAChB,MAAM,CAAC,iBAAiB,CAAC,4BAA4B,EACrD,GAAG,CACJ,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,8DAA8D;IAC9D,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAChC,IAAI,IAAgB,CAAC;QACrB,IAAI,MAAwB,CAAC;QAC7B,MAAM,CAAC,GAAG,EAAE;YACV,MAAM,GAAG,IAAI,4BAAc,EAAE,CAAC;YAC9B,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YAC5B,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE;gBACvC,IAAI,GAAG,MAAM,CAAC,cAAc,CAAC;oBAC3B,IAAI,EAAE,UAAU;oBAChB,IAAI,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM;oBAC3B,OAAO,EAAE,QAAQ;iBAClB,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,+BAA+B,EAAE,GAAG,EAAE;YACvC,MAAM,CAAC,EAAE,CAAC,IAAI,YAAY,WAAI,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,qBAAqB,EAAE,GAAG,EAAE;YAC7B,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACxB,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;YAC1C,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;YAC7C,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE;gBACvC,MAAM,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;oBAC3C,IAAI,EAAE,SAAS;oBACf,IAAI,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM;oBAC3B,OAAO,EAAE,QAAQ;iBAClB,CAAC,CAAC;gBACH,MAAM,CAAC,EAAE,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;gBAClC,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;gBACnD,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YACjE,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;YAClD,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE;gBACvC,MAAM,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;oBAC3C,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE,QAAQ;iBAClB,CAAC,CAAC;gBACH,MAAM,CAAC,EAAE,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;gBAClC,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;gBACpD,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,EAAE,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YACtE,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;YACtD,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE;gBACvC,MAAM,cAAc,GAAG,MAAM,CAAC,cAAc,EAAE,CAAC;gBAC/C,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;gBACrD,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,EAAE,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YACtE,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;YACxC,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE;gBACvC,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;gBACjD,MAAM,MAAM,GAAG,MAAM,CAAC,cAAc,CAAC;oBACnC,IAAI,EAAE,QAAQ;oBACd,IAAI,EAAE,KAAK,CAAC,QAAQ,CAAC,WAAW;oBAChC,OAAO,EAAE,QAAQ;iBAClB,CAAC,CAAC;gBACH,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;gBACjD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;gBAC/C,MAAM,MAAM,GAAG,MAAM,CAAC,cAAc,CAAC;oBACnC,IAAI,EAAE,QAAQ;oBACd,IAAI,EAAE,KAAK,CAAC,QAAQ,CAAC,WAAW;oBAChC,OAAO,EAAE,QAAQ;iBAClB,CAAC,CAAC;gBACH,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;gBACjD,MAAM,WAAW,GAAG,MAAM,CAAC,cAAc,CAAC;oBACxC,IAAI,EAAE,aAAa;oBACnB,IAAI,EAAE,KAAK,CAAC,QAAQ,CAAC,WAAW;oBAChC,OAAO,EAAE,MAAM;iBAChB,CAAC,CAAC;gBACH,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;gBACjD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;gBAC/C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;gBAC/C,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;gBAEpD,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;gBAC7C,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC9C,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC9C,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,YAAY,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC;gBAExD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;gBAC3C,MAAM,CAAC,WAAW,CAAC,WAAW,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAEjD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;gBAC3C,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;gBAEhD,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,cAAc,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC1D,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6DAA6D,EAAE,GAAG,EAAE;YACrE,aAAa,CAAC,WAAW,GAAG,EAAE,yBAAyB,EAAE,EAAE,EAAE,CAAC;YAC9D,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YAC5B,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE;gBACvC,MAAM,IAAI,GAAG,MAAM,CAAC,cAAc,CAAC;oBACjC,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE,QAAQ;iBAClB,CAAC,CAAC;gBACH,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;oBAC3B,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;iBACnC;gBACD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;YAC9D,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,wCAAwC;IACxC,QAAQ,CAAC,yCAAyC,EAAE,GAAG,EAAE;QACvD,EAAE,CAAC,2DAA2D,EAAE,GAAG,EAAE;YACnE,MAAM,MAAM,GAAG,IAAI,4BAAc,EAAE,CAAC;YACpC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YAC5B,MAAM,IAAI,GAAG,MAAM,CAAC,cAAc,CAAC;gBACjC,IAAI,EAAE,UAAU;gBAChB,IAAI,EAAE,KAAK,CAAC,QAAQ,CAAC,WAAW;aACjC,CAAC,CAAC;YACH,MAAM,CAAC,EAAE,CAAC,IAAI,YAAY,6BAAY,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,mEAAmE;IACnE,QAAQ,CAAC,sDAAsD,EAAE,GAAG,EAAE;QACpE,IAAI,YAA0B,CAAC;QAC/B,IAAI,MAAwB,CAAC;QAC7B,IAAI,IAAgB,CAAC;QACrB,IAAI,aAAyB,CAAC;QAC9B,MAAM,CAAC,GAAG,EAAE;YACV,MAAM,GAAG,IAAI,4BAAc,EAAE,CAAC;YAC9B,YAAY,mCACP,aAAa,KAChB,iBAAiB,EAAE;oBACjB,YAAY,EAAE,cAAc;oBAC5B,QAAQ,EAAE,UAAU;iBACrB,GACF,CAAC;YACF,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;YAC3B,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE;gBACvC,aAAa,GAAG,QAAQ,CAAC;gBACzB,IAAI,GAAG,MAAM,CAAC,cAAc,CAAC;oBAC3B,IAAI,EAAE,UAAU;oBAChB,IAAI,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM;oBAC3B,OAAO,EAAE,QAAQ;iBAClB,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;YACxC,MAAM,CAAC,eAAe,CACpB,aAAa,CAAC,UAAU,EACxB,YAAY,CAAC,iBAAiB,CAC/B,CAAC;YACF,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,UAAU,EAAE,YAAY,CAAC,iBAAiB,CAAC,CAAC;QAC1E,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,uDAAuD;IACvD,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;QAC3B,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;YAC1D,MAAM,MAAM,GAAG,IAAI,4BAAc,EAAE,CAAC;YACpC,MAAM,aAAa,GAAG,IAAI,cAAc,EAAE,CAAC;YAC3C,MAAM,CAAC,yBAAyB,CAAC,aAAa,CAAC,CAAC;YAChD,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YAE5B,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE;gBACvC,QAAQ,CAAC,GAAG,EAAE,CAAC;gBACf,MAAM,CAAC,WAAW,CAChB,aAAa,CAAC,SAAS,EACvB,MAAM,CAAC,cAAc,CAAC,MAAM,CAC7B,CAAC;YACJ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport * as uuid from 'uuid';\n\nimport { randomSpanId } from '../src/internal/util';\nimport { TracerConfig } from '../src/trace/config/types';\nimport { TraceParams } from '../src/trace/config/types';\nimport { NoRecordRootSpan } from '../src/trace/model/no-record/no-record-root-span';\nimport { NoRecordSpan } from '../src/trace/model/no-record/no-record-span';\nimport { Span } from '../src/trace/model/span';\nimport { CoreTracerBase } from '../src/trace/model/tracer-base';\nimport * as types from '../src/trace/model/types';\nimport { SpanEventListener } from '../src/trace/model/types';\n\nclass OnEndSpanClass implements SpanEventListener {\n  /** Counter for test use */\n  testCount = 0;\n  onStartSpan(span: Span): void {}\n  /** Happens when a span is ended */\n  onEndSpan(span: Span): void {\n    this.testCount++;\n  }\n}\n\nconst defaultConfig: TracerConfig = {\n  samplingRate: 1.0, // always sampler\n};\n\ndescribe('Tracer Base', () => {\n  const options = { name: 'test' };\n\n  /** Should create a Tracer instance */\n  describe('new Tracer()', () => {\n    it('should create a Tracer instance', () => {\n      const tracer = new CoreTracerBase();\n      assert.ok(tracer instanceof CoreTracerBase);\n    });\n  });\n\n  /** Should return a started tracer instance */\n  describe('start()', () => {\n    let tracerStarted: types.TracerBase;\n    before(() => {\n      const tracer = new CoreTracerBase();\n      assert.strictEqual(tracer.active, false);\n      tracerStarted = tracer.start(defaultConfig);\n    });\n    it('should return a tracer instance', () => {\n      assert.ok(tracerStarted instanceof CoreTracerBase);\n    });\n\n    it('the trace was started', () => {\n      assert.strictEqual(tracerStarted.active, true);\n    });\n  });\n\n  /** Should return an OnEndSpanEventListener list */\n  describe('registerSpanEventListener() / get eventListeners()', () => {\n    let tracer: types.TracerBase, onEndSpan: OnEndSpanClass;\n    before(() => {\n      tracer = new CoreTracerBase();\n      onEndSpan = new OnEndSpanClass();\n      tracer.registerSpanEventListener(onEndSpan);\n    });\n\n    it('should register a new OnEndSpanEventListener on listeners list', () => {\n      const listener = tracer.eventListeners[0];\n      assert.strictEqual(tracer.eventListeners.length, 1);\n      assert.strictEqual(listener, onEndSpan);\n    });\n\n    it('should return an OnEndSpanEventListener list', () => {\n      for (const listener of tracer.eventListeners) {\n        assert.ok(listener instanceof OnEndSpanClass);\n      }\n    });\n  });\n\n  /** Should unregister a OnEndSpanEventlistener */\n  describe('unregisterSpanEventListener()', () => {\n    let tracer: types.TracerBase, onEndSpan: OnEndSpanClass;\n    before(() => {\n      tracer = new CoreTracerBase();\n      onEndSpan = new OnEndSpanClass();\n      tracer.registerSpanEventListener(onEndSpan);\n    });\n\n    it('should register a new OnEndSpanEventListener on listeners list', () => {\n      const listener = tracer.eventListeners[0];\n      assert.strictEqual(tracer.eventListeners.length, 1);\n      assert.strictEqual(listener, onEndSpan);\n      tracer.unregisterSpanEventListener(onEndSpan);\n      assert.strictEqual(tracer.eventListeners.length, 0);\n    });\n  });\n\n  /** Should stop the trace instance */\n  describe('stop()', () => {\n    it('should stop the trace instance', () => {\n      const tracer = new CoreTracerBase();\n      assert.strictEqual(tracer.active, false);\n      tracer.start(defaultConfig);\n      assert.strictEqual(tracer.active, true);\n      tracer.stop();\n      assert.strictEqual(tracer.active, false);\n    });\n  });\n\n  /** Should create and start a new RootSpan instance with options */\n  describe('startRootSpan() with options', () => {\n    let rootSpanLocal: types.Span;\n    before(() => {\n      const tracer = new CoreTracerBase();\n      tracer.start(defaultConfig);\n      tracer.startRootSpan(options, rootSpan => {\n        rootSpanLocal = rootSpan;\n      });\n    });\n    it('should create a new RootSpan instance', () => {\n      assert.ok(rootSpanLocal instanceof Span);\n    });\n    it('should start the rootSpan', () => {\n      assert.ok(rootSpanLocal.started);\n    });\n  });\n\n  describe('startRootSpan() with sampler never', () => {\n    const tracer = new CoreTracerBase();\n    const config: TracerConfig = { samplingRate: 0 };\n\n    it('should start the new NoRecordRootSpan instance', () => {\n      tracer.start(config);\n      tracer.startRootSpan(options, rootSpan => {\n        assert.ok(rootSpan instanceof NoRecordRootSpan);\n      });\n    });\n\n    it('should start the new RootSpan instance when always sampling provided at span level', () => {\n      tracer.start(config);\n      tracer.startRootSpan({ name: 'test', samplingRate: 1 }, rootSpan => {\n        assert.ok(rootSpan);\n      });\n    });\n  });\n\n  describe('startRootSpan() with sampler always', () => {\n    const tracer = new CoreTracerBase();\n    const config: TracerConfig = { samplingRate: 1 };\n\n    it('should start the new RootSpan instance', () => {\n      tracer.start(config);\n      tracer.startRootSpan(options, rootSpan => {\n        assert.ok(rootSpan);\n      });\n    });\n\n    it('should start the new NoRecordRootSpan instance when never sampling provided at span level', () => {\n      tracer.start(config);\n      tracer.startRootSpan({ name: 'test', samplingRate: 0 }, rootSpan => {\n        assert.ok(rootSpan instanceof NoRecordRootSpan);\n      });\n    });\n  });\n\n  describe('startRootSpan() before start()', () => {\n    it('should start the new NoRecordRootSpan instance, tracer not started', () => {\n      const tracer = new CoreTracerBase();\n      assert.strictEqual(tracer.active, false);\n      tracer.startRootSpan(options, rootSpan => {\n        assert.ok(rootSpan instanceof NoRecordRootSpan);\n      });\n    });\n  });\n\n  describe('startRootSpan() with context propagation', () => {\n    const traceOptions: types.TraceOptions = {\n      name: 'rootName',\n      kind: types.SpanKind.UNSPECIFIED,\n    };\n\n    it('should create new RootSpan instance, no propagation', () => {\n      const tracer = new CoreTracerBase();\n      tracer.start(defaultConfig);\n      tracer.startRootSpan(traceOptions, rootSpan => {\n        assert.ok(rootSpan);\n        assert.strictEqual(rootSpan.name, traceOptions.name);\n        assert.strictEqual(rootSpan.kind, traceOptions.kind);\n      });\n    });\n\n    const spanContextPropagated: types.SpanContext = {\n      traceId: uuid\n        .v4()\n        .split('-')\n        .join(''),\n      spanId: randomSpanId(),\n      options: 0x1,\n    };\n\n    it('should create the new RootSpan with propagation', () => {\n      const tracer = new CoreTracerBase();\n      tracer.start(defaultConfig);\n      traceOptions.spanContext = spanContextPropagated;\n      tracer.startRootSpan(traceOptions, rootSpan => {\n        assert.ok(rootSpan);\n        assert.strictEqual(rootSpan.name, traceOptions.name);\n        assert.strictEqual(rootSpan.kind, traceOptions.kind);\n        assert.strictEqual(rootSpan.traceId, spanContextPropagated.traceId);\n        assert.strictEqual(rootSpan.parentSpanId, spanContextPropagated.spanId);\n      });\n    });\n\n    it('should create the new NoRecordRootSpan with propagation options bit set to not-sample)', () => {\n      const tracer = new CoreTracerBase();\n      tracer.start(defaultConfig);\n      traceOptions.spanContext!.options = 0x0;\n      tracer.startRootSpan(traceOptions, rootSpan => {\n        assert.ok(rootSpan);\n        assert.ok(rootSpan instanceof NoRecordRootSpan);\n        assert.strictEqual(rootSpan.name, traceOptions.name);\n        assert.strictEqual(rootSpan.kind, traceOptions.kind);\n        assert.strictEqual(rootSpan.traceId, spanContextPropagated.traceId);\n        assert.strictEqual(rootSpan.parentSpanId, spanContextPropagated.spanId);\n      });\n    });\n\n    it('should create a tracer with default TraceParams when no parameters are specified upon initialisation', () => {\n      const tracer = new CoreTracerBase();\n      tracer.start(defaultConfig);\n      assert.strictEqual(\n        tracer.activeTraceParams.numberOfAnnontationEventsPerSpan,\n        undefined\n      );\n      assert.strictEqual(\n        tracer.activeTraceParams.numberOfAttributesPerSpan,\n        undefined\n      );\n      assert.strictEqual(\n        tracer.activeTraceParams.numberOfLinksPerSpan,\n        undefined\n      );\n      assert.strictEqual(\n        tracer.activeTraceParams.numberOfMessageEventsPerSpan,\n        undefined\n      );\n    });\n\n    it('should create a tracer with default TraceParams when parameters with values higher than limit are specified upon initialisation', () => {\n      const traceParametersWithHigherThanMaximumValues: TraceParams = {\n        numberOfAnnontationEventsPerSpan: 50,\n        numberOfMessageEventsPerSpan: 200,\n        numberOfAttributesPerSpan: 37,\n        numberOfLinksPerSpan: 45,\n      };\n      defaultConfig.traceParams = traceParametersWithHigherThanMaximumValues;\n      const tracer = new CoreTracerBase();\n      tracer.start(defaultConfig);\n      assert.strictEqual(\n        tracer.activeTraceParams.numberOfAnnontationEventsPerSpan,\n        50\n      );\n      assert.strictEqual(\n        tracer.activeTraceParams.numberOfAttributesPerSpan,\n        37\n      );\n      assert.strictEqual(tracer.activeTraceParams.numberOfLinksPerSpan, 45);\n      assert.strictEqual(\n        tracer.activeTraceParams.numberOfMessageEventsPerSpan,\n        200\n      );\n    });\n  });\n\n  /** Should create and start a Span instance into a rootSpan */\n  describe('startChildSpan()', () => {\n    let span: types.Span;\n    let tracer: types.TracerBase;\n    before(() => {\n      tracer = new CoreTracerBase();\n      tracer.start(defaultConfig);\n      tracer.startRootSpan(options, rootSpan => {\n        span = tracer.startChildSpan({\n          name: 'spanName',\n          kind: types.SpanKind.CLIENT,\n          childOf: rootSpan,\n        });\n      });\n    });\n    it('should create a Span instance', () => {\n      assert.ok(span instanceof Span);\n    });\n    it('should start a span', () => {\n      assert.ok(span.started);\n      assert.strictEqual(span.name, 'spanName');\n      assert.strictEqual(span.kind, types.SpanKind.CLIENT);\n    });\n\n    it('should start a span with SpanObject', () => {\n      tracer.startRootSpan(options, rootSpan => {\n        const spanWithObject = tracer.startChildSpan({\n          name: 'my-span',\n          kind: types.SpanKind.SERVER,\n          childOf: rootSpan,\n        });\n        assert.ok(spanWithObject.started);\n        assert.strictEqual(spanWithObject.name, 'my-span');\n        assert.strictEqual(spanWithObject.kind, types.SpanKind.SERVER);\n      });\n    });\n\n    it('should start a span with SpanObject-name', () => {\n      tracer.startRootSpan(options, rootSpan => {\n        const spanWithObject = tracer.startChildSpan({\n          name: 'my-span1',\n          childOf: rootSpan,\n        });\n        assert.ok(spanWithObject.started);\n        assert.strictEqual(spanWithObject.name, 'my-span1');\n        assert.strictEqual(spanWithObject.kind, types.SpanKind.UNSPECIFIED);\n      });\n    });\n\n    it('should start a no-record span without params', () => {\n      tracer.startRootSpan(options, rootSpan => {\n        const spanWithObject = tracer.startChildSpan();\n        assert.strictEqual(spanWithObject.name, 'no-record');\n        assert.strictEqual(spanWithObject.kind, types.SpanKind.UNSPECIFIED);\n      });\n    });\n\n    it('should support nested children', () => {\n      tracer.startRootSpan(options, rootSpan => {\n        assert.strictEqual(rootSpan.numberOfChildren, 0);\n        const child1 = tracer.startChildSpan({\n          name: 'child1',\n          kind: types.SpanKind.UNSPECIFIED,\n          childOf: rootSpan,\n        });\n        assert.strictEqual(rootSpan.numberOfChildren, 1);\n        assert.strictEqual(child1.numberOfChildren, 0);\n        const child2 = tracer.startChildSpan({\n          name: 'child2',\n          kind: types.SpanKind.UNSPECIFIED,\n          childOf: rootSpan,\n        });\n        assert.strictEqual(rootSpan.numberOfChildren, 2);\n        const grandchild1 = tracer.startChildSpan({\n          name: 'grandchild1',\n          kind: types.SpanKind.UNSPECIFIED,\n          childOf: child1,\n        });\n        assert.strictEqual(rootSpan.numberOfChildren, 2);\n        assert.strictEqual(child1.numberOfChildren, 1);\n        assert.strictEqual(child2.numberOfChildren, 0);\n        assert.strictEqual(grandchild1.numberOfChildren, 0);\n\n        assert.strictEqual(rootSpan.spans.length, 2);\n        assert.strictEqual(child1, rootSpan.spans[0]);\n        assert.strictEqual(child2, rootSpan.spans[1]);\n        assert.strictEqual(grandchild1.parentSpanId, child1.id);\n\n        assert.strictEqual(child1.spans.length, 1);\n        assert.strictEqual(grandchild1, child1.spans[0]);\n\n        assert.strictEqual(child2.spans.length, 0);\n        assert.strictEqual(grandchild1.spans.length, 0);\n\n        assert.strictEqual(rootSpan.allDescendants().length, 3);\n      });\n    });\n\n    it('should add attributes more than default limit when override', () => {\n      defaultConfig.traceParams = { numberOfAttributesPerSpan: 48 };\n      tracer.start(defaultConfig);\n      tracer.startRootSpan(options, rootSpan => {\n        const span = tracer.startChildSpan({\n          name: 'spanName',\n          childOf: rootSpan,\n        });\n        for (let i = 0; i < 40; i++) {\n          span.addAttribute(`attr ${i}`, i);\n        }\n        assert.strictEqual(Object.keys(span.attributes).length, 40);\n      });\n    });\n  });\n\n  /** Should not create a Span instance */\n  describe('startChildSpan() before startRootSpan()', () => {\n    it('should create a NoRecordSpan instance, without a rootspan', () => {\n      const tracer = new CoreTracerBase();\n      tracer.start(defaultConfig);\n      const span = tracer.startChildSpan({\n        name: 'spanName',\n        kind: types.SpanKind.UNSPECIFIED,\n      });\n      assert.ok(span instanceof NoRecordSpan);\n    });\n  });\n\n  /** Should add tracer attributes to every span created by tracer */\n  describe('startRootSpan() and startChildSpan() with attributes', () => {\n    let tracerConfig: TracerConfig;\n    let tracer: types.TracerBase;\n    let span: types.Span;\n    let rootSpanLocal: types.Span;\n    before(() => {\n      tracer = new CoreTracerBase();\n      tracerConfig = {\n        ...defaultConfig,\n        defaultAttributes: {\n          cluster_name: 'test-cluster',\n          asg_name: 'test-asg',\n        },\n      };\n      tracer.start(tracerConfig);\n      tracer.startRootSpan(options, rootSpan => {\n        rootSpanLocal = rootSpan;\n        span = tracer.startChildSpan({\n          name: 'spanName',\n          kind: types.SpanKind.CLIENT,\n          childOf: rootSpan,\n        });\n      });\n    });\n    it('should add attributes to spans', () => {\n      assert.deepStrictEqual(\n        rootSpanLocal.attributes,\n        tracerConfig.defaultAttributes\n      );\n      assert.deepStrictEqual(span.attributes, tracerConfig.defaultAttributes);\n    });\n  });\n\n  /** Should run eventListeners when the rootSpan ends */\n  describe('onEndSpan()', () => {\n    it('should run eventListeners when the rootSpan ends', () => {\n      const tracer = new CoreTracerBase();\n      const eventListener = new OnEndSpanClass();\n      tracer.registerSpanEventListener(eventListener);\n      tracer.start(defaultConfig);\n\n      tracer.startRootSpan(options, rootSpan => {\n        rootSpan.end();\n        assert.strictEqual(\n          eventListener.testCount,\n          tracer.eventListeners.length\n        );\n      });\n    });\n  });\n});\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"dda31e67ac48665cc546c893ac96f11746b22712"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_mbc735say=function(){return actualCoverage;};}return actualCoverage;}cov_mbc735say();cov_mbc735say().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const assert=(cov_mbc735say().s[1]++,require("assert"));const uuid=(cov_mbc735say().s[2]++,require("uuid"));const util_1=(cov_mbc735say().s[3]++,require("../src/internal/util"));const no_record_root_span_1=(cov_mbc735say().s[4]++,require("../src/trace/model/no-record/no-record-root-span"));const no_record_span_1=(cov_mbc735say().s[5]++,require("../src/trace/model/no-record/no-record-span"));const span_1=(cov_mbc735say().s[6]++,require("../src/trace/model/span"));const tracer_base_1=(cov_mbc735say().s[7]++,require("../src/trace/model/tracer-base"));const types=(cov_mbc735say().s[8]++,require("../src/trace/model/types"));class OnEndSpanClass{constructor(){cov_mbc735say().f[0]++;cov_mbc735say().s[9]++;/** Counter for test use */this.testCount=0;}onStartSpan(span){cov_mbc735say().f[1]++;}/** Happens when a span is ended */onEndSpan(span){cov_mbc735say().f[2]++;cov_mbc735say().s[10]++;this.testCount++;}}const defaultConfig=(cov_mbc735say().s[11]++,{samplingRate:1.0});cov_mbc735say().s[12]++;describe('Tracer Base',()=>{cov_mbc735say().f[3]++;const options=(cov_mbc735say().s[13]++,{name:'test'});/** Should create a Tracer instance */cov_mbc735say().s[14]++;describe('new Tracer()',()=>{cov_mbc735say().f[4]++;cov_mbc735say().s[15]++;it('should create a Tracer instance',()=>{cov_mbc735say().f[5]++;const tracer=(cov_mbc735say().s[16]++,new tracer_base_1.CoreTracerBase());cov_mbc735say().s[17]++;assert.ok(tracer instanceof tracer_base_1.CoreTracerBase);});});/** Should return a started tracer instance */cov_mbc735say().s[18]++;describe('start()',()=>{cov_mbc735say().f[6]++;let tracerStarted;cov_mbc735say().s[19]++;before(()=>{cov_mbc735say().f[7]++;const tracer=(cov_mbc735say().s[20]++,new tracer_base_1.CoreTracerBase());cov_mbc735say().s[21]++;assert.strictEqual(tracer.active,false);cov_mbc735say().s[22]++;tracerStarted=tracer.start(defaultConfig);});cov_mbc735say().s[23]++;it('should return a tracer instance',()=>{cov_mbc735say().f[8]++;cov_mbc735say().s[24]++;assert.ok(tracerStarted instanceof tracer_base_1.CoreTracerBase);});cov_mbc735say().s[25]++;it('the trace was started',()=>{cov_mbc735say().f[9]++;cov_mbc735say().s[26]++;assert.strictEqual(tracerStarted.active,true);});});/** Should return an OnEndSpanEventListener list */cov_mbc735say().s[27]++;describe('registerSpanEventListener() / get eventListeners()',()=>{cov_mbc735say().f[10]++;let tracer,onEndSpan;cov_mbc735say().s[28]++;before(()=>{cov_mbc735say().f[11]++;cov_mbc735say().s[29]++;tracer=new tracer_base_1.CoreTracerBase();cov_mbc735say().s[30]++;onEndSpan=new OnEndSpanClass();cov_mbc735say().s[31]++;tracer.registerSpanEventListener(onEndSpan);});cov_mbc735say().s[32]++;it('should register a new OnEndSpanEventListener on listeners list',()=>{cov_mbc735say().f[12]++;const listener=(cov_mbc735say().s[33]++,tracer.eventListeners[0]);cov_mbc735say().s[34]++;assert.strictEqual(tracer.eventListeners.length,1);cov_mbc735say().s[35]++;assert.strictEqual(listener,onEndSpan);});cov_mbc735say().s[36]++;it('should return an OnEndSpanEventListener list',()=>{cov_mbc735say().f[13]++;cov_mbc735say().s[37]++;for(const listener of tracer.eventListeners){cov_mbc735say().s[38]++;assert.ok(listener instanceof OnEndSpanClass);}});});/** Should unregister a OnEndSpanEventlistener */cov_mbc735say().s[39]++;describe('unregisterSpanEventListener()',()=>{cov_mbc735say().f[14]++;let tracer,onEndSpan;cov_mbc735say().s[40]++;before(()=>{cov_mbc735say().f[15]++;cov_mbc735say().s[41]++;tracer=new tracer_base_1.CoreTracerBase();cov_mbc735say().s[42]++;onEndSpan=new OnEndSpanClass();cov_mbc735say().s[43]++;tracer.registerSpanEventListener(onEndSpan);});cov_mbc735say().s[44]++;it('should register a new OnEndSpanEventListener on listeners list',()=>{cov_mbc735say().f[16]++;const listener=(cov_mbc735say().s[45]++,tracer.eventListeners[0]);cov_mbc735say().s[46]++;assert.strictEqual(tracer.eventListeners.length,1);cov_mbc735say().s[47]++;assert.strictEqual(listener,onEndSpan);cov_mbc735say().s[48]++;tracer.unregisterSpanEventListener(onEndSpan);cov_mbc735say().s[49]++;assert.strictEqual(tracer.eventListeners.length,0);});});/** Should stop the trace instance */cov_mbc735say().s[50]++;describe('stop()',()=>{cov_mbc735say().f[17]++;cov_mbc735say().s[51]++;it('should stop the trace instance',()=>{cov_mbc735say().f[18]++;const tracer=(cov_mbc735say().s[52]++,new tracer_base_1.CoreTracerBase());cov_mbc735say().s[53]++;assert.strictEqual(tracer.active,false);cov_mbc735say().s[54]++;tracer.start(defaultConfig);cov_mbc735say().s[55]++;assert.strictEqual(tracer.active,true);cov_mbc735say().s[56]++;tracer.stop();cov_mbc735say().s[57]++;assert.strictEqual(tracer.active,false);});});/** Should create and start a new RootSpan instance with options */cov_mbc735say().s[58]++;describe('startRootSpan() with options',()=>{cov_mbc735say().f[19]++;let rootSpanLocal;cov_mbc735say().s[59]++;before(()=>{cov_mbc735say().f[20]++;const tracer=(cov_mbc735say().s[60]++,new tracer_base_1.CoreTracerBase());cov_mbc735say().s[61]++;tracer.start(defaultConfig);cov_mbc735say().s[62]++;tracer.startRootSpan(options,rootSpan=>{cov_mbc735say().f[21]++;cov_mbc735say().s[63]++;rootSpanLocal=rootSpan;});});cov_mbc735say().s[64]++;it('should create a new RootSpan instance',()=>{cov_mbc735say().f[22]++;cov_mbc735say().s[65]++;assert.ok(rootSpanLocal instanceof span_1.Span);});cov_mbc735say().s[66]++;it('should start the rootSpan',()=>{cov_mbc735say().f[23]++;cov_mbc735say().s[67]++;assert.ok(rootSpanLocal.started);});});cov_mbc735say().s[68]++;describe('startRootSpan() with sampler never',()=>{cov_mbc735say().f[24]++;const tracer=(cov_mbc735say().s[69]++,new tracer_base_1.CoreTracerBase());const config=(cov_mbc735say().s[70]++,{samplingRate:0});cov_mbc735say().s[71]++;it('should start the new NoRecordRootSpan instance',()=>{cov_mbc735say().f[25]++;cov_mbc735say().s[72]++;tracer.start(config);cov_mbc735say().s[73]++;tracer.startRootSpan(options,rootSpan=>{cov_mbc735say().f[26]++;cov_mbc735say().s[74]++;assert.ok(rootSpan instanceof no_record_root_span_1.NoRecordRootSpan);});});cov_mbc735say().s[75]++;it('should start the new RootSpan instance when always sampling provided at span level',()=>{cov_mbc735say().f[27]++;cov_mbc735say().s[76]++;tracer.start(config);cov_mbc735say().s[77]++;tracer.startRootSpan({name:'test',samplingRate:1},rootSpan=>{cov_mbc735say().f[28]++;cov_mbc735say().s[78]++;assert.ok(rootSpan);});});});cov_mbc735say().s[79]++;describe('startRootSpan() with sampler always',()=>{cov_mbc735say().f[29]++;const tracer=(cov_mbc735say().s[80]++,new tracer_base_1.CoreTracerBase());const config=(cov_mbc735say().s[81]++,{samplingRate:1});cov_mbc735say().s[82]++;it('should start the new RootSpan instance',()=>{cov_mbc735say().f[30]++;cov_mbc735say().s[83]++;tracer.start(config);cov_mbc735say().s[84]++;tracer.startRootSpan(options,rootSpan=>{cov_mbc735say().f[31]++;cov_mbc735say().s[85]++;assert.ok(rootSpan);});});cov_mbc735say().s[86]++;it('should start the new NoRecordRootSpan instance when never sampling provided at span level',()=>{cov_mbc735say().f[32]++;cov_mbc735say().s[87]++;tracer.start(config);cov_mbc735say().s[88]++;tracer.startRootSpan({name:'test',samplingRate:0},rootSpan=>{cov_mbc735say().f[33]++;cov_mbc735say().s[89]++;assert.ok(rootSpan instanceof no_record_root_span_1.NoRecordRootSpan);});});});cov_mbc735say().s[90]++;describe('startRootSpan() before start()',()=>{cov_mbc735say().f[34]++;cov_mbc735say().s[91]++;it('should start the new NoRecordRootSpan instance, tracer not started',()=>{cov_mbc735say().f[35]++;const tracer=(cov_mbc735say().s[92]++,new tracer_base_1.CoreTracerBase());cov_mbc735say().s[93]++;assert.strictEqual(tracer.active,false);cov_mbc735say().s[94]++;tracer.startRootSpan(options,rootSpan=>{cov_mbc735say().f[36]++;cov_mbc735say().s[95]++;assert.ok(rootSpan instanceof no_record_root_span_1.NoRecordRootSpan);});});});cov_mbc735say().s[96]++;describe('startRootSpan() with context propagation',()=>{cov_mbc735say().f[37]++;const traceOptions=(cov_mbc735say().s[97]++,{name:'rootName',kind:types.SpanKind.UNSPECIFIED});cov_mbc735say().s[98]++;it('should create new RootSpan instance, no propagation',()=>{cov_mbc735say().f[38]++;const tracer=(cov_mbc735say().s[99]++,new tracer_base_1.CoreTracerBase());cov_mbc735say().s[100]++;tracer.start(defaultConfig);cov_mbc735say().s[101]++;tracer.startRootSpan(traceOptions,rootSpan=>{cov_mbc735say().f[39]++;cov_mbc735say().s[102]++;assert.ok(rootSpan);cov_mbc735say().s[103]++;assert.strictEqual(rootSpan.name,traceOptions.name);cov_mbc735say().s[104]++;assert.strictEqual(rootSpan.kind,traceOptions.kind);});});const spanContextPropagated=(cov_mbc735say().s[105]++,{traceId:uuid.v4().split('-').join(''),spanId:util_1.randomSpanId(),options:0x1});cov_mbc735say().s[106]++;it('should create the new RootSpan with propagation',()=>{cov_mbc735say().f[40]++;const tracer=(cov_mbc735say().s[107]++,new tracer_base_1.CoreTracerBase());cov_mbc735say().s[108]++;tracer.start(defaultConfig);cov_mbc735say().s[109]++;traceOptions.spanContext=spanContextPropagated;cov_mbc735say().s[110]++;tracer.startRootSpan(traceOptions,rootSpan=>{cov_mbc735say().f[41]++;cov_mbc735say().s[111]++;assert.ok(rootSpan);cov_mbc735say().s[112]++;assert.strictEqual(rootSpan.name,traceOptions.name);cov_mbc735say().s[113]++;assert.strictEqual(rootSpan.kind,traceOptions.kind);cov_mbc735say().s[114]++;assert.strictEqual(rootSpan.traceId,spanContextPropagated.traceId);cov_mbc735say().s[115]++;assert.strictEqual(rootSpan.parentSpanId,spanContextPropagated.spanId);});});cov_mbc735say().s[116]++;it('should create the new NoRecordRootSpan with propagation options bit set to not-sample)',()=>{cov_mbc735say().f[42]++;const tracer=(cov_mbc735say().s[117]++,new tracer_base_1.CoreTracerBase());cov_mbc735say().s[118]++;tracer.start(defaultConfig);cov_mbc735say().s[119]++;traceOptions.spanContext.options=0x0;cov_mbc735say().s[120]++;tracer.startRootSpan(traceOptions,rootSpan=>{cov_mbc735say().f[43]++;cov_mbc735say().s[121]++;assert.ok(rootSpan);cov_mbc735say().s[122]++;assert.ok(rootSpan instanceof no_record_root_span_1.NoRecordRootSpan);cov_mbc735say().s[123]++;assert.strictEqual(rootSpan.name,traceOptions.name);cov_mbc735say().s[124]++;assert.strictEqual(rootSpan.kind,traceOptions.kind);cov_mbc735say().s[125]++;assert.strictEqual(rootSpan.traceId,spanContextPropagated.traceId);cov_mbc735say().s[126]++;assert.strictEqual(rootSpan.parentSpanId,spanContextPropagated.spanId);});});cov_mbc735say().s[127]++;it('should create a tracer with default TraceParams when no parameters are specified upon initialisation',()=>{cov_mbc735say().f[44]++;const tracer=(cov_mbc735say().s[128]++,new tracer_base_1.CoreTracerBase());cov_mbc735say().s[129]++;tracer.start(defaultConfig);cov_mbc735say().s[130]++;assert.strictEqual(tracer.activeTraceParams.numberOfAnnontationEventsPerSpan,undefined);cov_mbc735say().s[131]++;assert.strictEqual(tracer.activeTraceParams.numberOfAttributesPerSpan,undefined);cov_mbc735say().s[132]++;assert.strictEqual(tracer.activeTraceParams.numberOfLinksPerSpan,undefined);cov_mbc735say().s[133]++;assert.strictEqual(tracer.activeTraceParams.numberOfMessageEventsPerSpan,undefined);});cov_mbc735say().s[134]++;it('should create a tracer with default TraceParams when parameters with values higher than limit are specified upon initialisation',()=>{cov_mbc735say().f[45]++;const traceParametersWithHigherThanMaximumValues=(cov_mbc735say().s[135]++,{numberOfAnnontationEventsPerSpan:50,numberOfMessageEventsPerSpan:200,numberOfAttributesPerSpan:37,numberOfLinksPerSpan:45});cov_mbc735say().s[136]++;defaultConfig.traceParams=traceParametersWithHigherThanMaximumValues;const tracer=(cov_mbc735say().s[137]++,new tracer_base_1.CoreTracerBase());cov_mbc735say().s[138]++;tracer.start(defaultConfig);cov_mbc735say().s[139]++;assert.strictEqual(tracer.activeTraceParams.numberOfAnnontationEventsPerSpan,50);cov_mbc735say().s[140]++;assert.strictEqual(tracer.activeTraceParams.numberOfAttributesPerSpan,37);cov_mbc735say().s[141]++;assert.strictEqual(tracer.activeTraceParams.numberOfLinksPerSpan,45);cov_mbc735say().s[142]++;assert.strictEqual(tracer.activeTraceParams.numberOfMessageEventsPerSpan,200);});});/** Should create and start a Span instance into a rootSpan */cov_mbc735say().s[143]++;describe('startChildSpan()',()=>{cov_mbc735say().f[46]++;let span;let tracer;cov_mbc735say().s[144]++;before(()=>{cov_mbc735say().f[47]++;cov_mbc735say().s[145]++;tracer=new tracer_base_1.CoreTracerBase();cov_mbc735say().s[146]++;tracer.start(defaultConfig);cov_mbc735say().s[147]++;tracer.startRootSpan(options,rootSpan=>{cov_mbc735say().f[48]++;cov_mbc735say().s[148]++;span=tracer.startChildSpan({name:'spanName',kind:types.SpanKind.CLIENT,childOf:rootSpan});});});cov_mbc735say().s[149]++;it('should create a Span instance',()=>{cov_mbc735say().f[49]++;cov_mbc735say().s[150]++;assert.ok(span instanceof span_1.Span);});cov_mbc735say().s[151]++;it('should start a span',()=>{cov_mbc735say().f[50]++;cov_mbc735say().s[152]++;assert.ok(span.started);cov_mbc735say().s[153]++;assert.strictEqual(span.name,'spanName');cov_mbc735say().s[154]++;assert.strictEqual(span.kind,types.SpanKind.CLIENT);});cov_mbc735say().s[155]++;it('should start a span with SpanObject',()=>{cov_mbc735say().f[51]++;cov_mbc735say().s[156]++;tracer.startRootSpan(options,rootSpan=>{cov_mbc735say().f[52]++;const spanWithObject=(cov_mbc735say().s[157]++,tracer.startChildSpan({name:'my-span',kind:types.SpanKind.SERVER,childOf:rootSpan}));cov_mbc735say().s[158]++;assert.ok(spanWithObject.started);cov_mbc735say().s[159]++;assert.strictEqual(spanWithObject.name,'my-span');cov_mbc735say().s[160]++;assert.strictEqual(spanWithObject.kind,types.SpanKind.SERVER);});});cov_mbc735say().s[161]++;it('should start a span with SpanObject-name',()=>{cov_mbc735say().f[53]++;cov_mbc735say().s[162]++;tracer.startRootSpan(options,rootSpan=>{cov_mbc735say().f[54]++;const spanWithObject=(cov_mbc735say().s[163]++,tracer.startChildSpan({name:'my-span1',childOf:rootSpan}));cov_mbc735say().s[164]++;assert.ok(spanWithObject.started);cov_mbc735say().s[165]++;assert.strictEqual(spanWithObject.name,'my-span1');cov_mbc735say().s[166]++;assert.strictEqual(spanWithObject.kind,types.SpanKind.UNSPECIFIED);});});cov_mbc735say().s[167]++;it('should start a no-record span without params',()=>{cov_mbc735say().f[55]++;cov_mbc735say().s[168]++;tracer.startRootSpan(options,rootSpan=>{cov_mbc735say().f[56]++;const spanWithObject=(cov_mbc735say().s[169]++,tracer.startChildSpan());cov_mbc735say().s[170]++;assert.strictEqual(spanWithObject.name,'no-record');cov_mbc735say().s[171]++;assert.strictEqual(spanWithObject.kind,types.SpanKind.UNSPECIFIED);});});cov_mbc735say().s[172]++;it('should support nested children',()=>{cov_mbc735say().f[57]++;cov_mbc735say().s[173]++;tracer.startRootSpan(options,rootSpan=>{cov_mbc735say().f[58]++;cov_mbc735say().s[174]++;assert.strictEqual(rootSpan.numberOfChildren,0);const child1=(cov_mbc735say().s[175]++,tracer.startChildSpan({name:'child1',kind:types.SpanKind.UNSPECIFIED,childOf:rootSpan}));cov_mbc735say().s[176]++;assert.strictEqual(rootSpan.numberOfChildren,1);cov_mbc735say().s[177]++;assert.strictEqual(child1.numberOfChildren,0);const child2=(cov_mbc735say().s[178]++,tracer.startChildSpan({name:'child2',kind:types.SpanKind.UNSPECIFIED,childOf:rootSpan}));cov_mbc735say().s[179]++;assert.strictEqual(rootSpan.numberOfChildren,2);const grandchild1=(cov_mbc735say().s[180]++,tracer.startChildSpan({name:'grandchild1',kind:types.SpanKind.UNSPECIFIED,childOf:child1}));cov_mbc735say().s[181]++;assert.strictEqual(rootSpan.numberOfChildren,2);cov_mbc735say().s[182]++;assert.strictEqual(child1.numberOfChildren,1);cov_mbc735say().s[183]++;assert.strictEqual(child2.numberOfChildren,0);cov_mbc735say().s[184]++;assert.strictEqual(grandchild1.numberOfChildren,0);cov_mbc735say().s[185]++;assert.strictEqual(rootSpan.spans.length,2);cov_mbc735say().s[186]++;assert.strictEqual(child1,rootSpan.spans[0]);cov_mbc735say().s[187]++;assert.strictEqual(child2,rootSpan.spans[1]);cov_mbc735say().s[188]++;assert.strictEqual(grandchild1.parentSpanId,child1.id);cov_mbc735say().s[189]++;assert.strictEqual(child1.spans.length,1);cov_mbc735say().s[190]++;assert.strictEqual(grandchild1,child1.spans[0]);cov_mbc735say().s[191]++;assert.strictEqual(child2.spans.length,0);cov_mbc735say().s[192]++;assert.strictEqual(grandchild1.spans.length,0);cov_mbc735say().s[193]++;assert.strictEqual(rootSpan.allDescendants().length,3);});});cov_mbc735say().s[194]++;it('should add attributes more than default limit when override',()=>{cov_mbc735say().f[59]++;cov_mbc735say().s[195]++;defaultConfig.traceParams={numberOfAttributesPerSpan:48};cov_mbc735say().s[196]++;tracer.start(defaultConfig);cov_mbc735say().s[197]++;tracer.startRootSpan(options,rootSpan=>{cov_mbc735say().f[60]++;const span=(cov_mbc735say().s[198]++,tracer.startChildSpan({name:'spanName',childOf:rootSpan}));cov_mbc735say().s[199]++;for(let i=(cov_mbc735say().s[200]++,0);i<40;i++){cov_mbc735say().s[201]++;span.addAttribute(`attr ${i}`,i);}cov_mbc735say().s[202]++;assert.strictEqual(Object.keys(span.attributes).length,40);});});});/** Should not create a Span instance */cov_mbc735say().s[203]++;describe('startChildSpan() before startRootSpan()',()=>{cov_mbc735say().f[61]++;cov_mbc735say().s[204]++;it('should create a NoRecordSpan instance, without a rootspan',()=>{cov_mbc735say().f[62]++;const tracer=(cov_mbc735say().s[205]++,new tracer_base_1.CoreTracerBase());cov_mbc735say().s[206]++;tracer.start(defaultConfig);const span=(cov_mbc735say().s[207]++,tracer.startChildSpan({name:'spanName',kind:types.SpanKind.UNSPECIFIED}));cov_mbc735say().s[208]++;assert.ok(span instanceof no_record_span_1.NoRecordSpan);});});/** Should add tracer attributes to every span created by tracer */cov_mbc735say().s[209]++;describe('startRootSpan() and startChildSpan() with attributes',()=>{cov_mbc735say().f[63]++;let tracerConfig;let tracer;let span;let rootSpanLocal;cov_mbc735say().s[210]++;before(()=>{cov_mbc735say().f[64]++;cov_mbc735say().s[211]++;tracer=new tracer_base_1.CoreTracerBase();cov_mbc735say().s[212]++;tracerConfig=Object.assign(Object.assign({},defaultConfig),{defaultAttributes:{cluster_name:'test-cluster',asg_name:'test-asg'}});cov_mbc735say().s[213]++;tracer.start(tracerConfig);cov_mbc735say().s[214]++;tracer.startRootSpan(options,rootSpan=>{cov_mbc735say().f[65]++;cov_mbc735say().s[215]++;rootSpanLocal=rootSpan;cov_mbc735say().s[216]++;span=tracer.startChildSpan({name:'spanName',kind:types.SpanKind.CLIENT,childOf:rootSpan});});});cov_mbc735say().s[217]++;it('should add attributes to spans',()=>{cov_mbc735say().f[66]++;cov_mbc735say().s[218]++;assert.deepStrictEqual(rootSpanLocal.attributes,tracerConfig.defaultAttributes);cov_mbc735say().s[219]++;assert.deepStrictEqual(span.attributes,tracerConfig.defaultAttributes);});});/** Should run eventListeners when the rootSpan ends */cov_mbc735say().s[220]++;describe('onEndSpan()',()=>{cov_mbc735say().f[67]++;cov_mbc735say().s[221]++;it('should run eventListeners when the rootSpan ends',()=>{cov_mbc735say().f[68]++;const tracer=(cov_mbc735say().s[222]++,new tracer_base_1.CoreTracerBase());const eventListener=(cov_mbc735say().s[223]++,new OnEndSpanClass());cov_mbc735say().s[224]++;tracer.registerSpanEventListener(eventListener);cov_mbc735say().s[225]++;tracer.start(defaultConfig);cov_mbc735say().s[226]++;tracer.startRootSpan(options,rootSpan=>{cov_mbc735say().f[69]++;cov_mbc735say().s[227]++;rootSpan.end();cov_mbc735say().s[228]++;assert.strictEqual(eventListener.testCount,tracer.eventListeners.length);});});});});//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,