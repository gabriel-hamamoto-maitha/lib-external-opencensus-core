{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/propagation/text-format.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/propagation/text-format.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH;;;;;;;GAOG;AAEH,wCAAoC;AACpC,oCAA0E;AAE7D,QAAA,kBAAkB,GAAG,GAAG,CAAC;AACtC,MAAM,yBAAyB,GAAG,IAAI,CAAC;AACvC,MAAM,4BAA4B,GAAG,IAAI,CAAC;AAC1C,MAAM,uBAAuB,GAAG,GAAG,CAAC;AACpC,MAAM,aAAa,GAAG,GAAG,CAAC;AAC1B,MAAM,wBAAwB,GAAG;IAC/B,MAAM,EAAE,cAAM,CAAC,qBAAqB;CACrC,CAAC;AAEF;;;;GAIG;AACH,SAAgB,mBAAmB,CAAC,MAAc;IAChD,IAAI,GAAG,GAAG,EAAE,CAAC;IACb,IAAI,UAAU,GAAG,CAAC,CAAC;IACnB,IAAI,SAAS,GAAG,CAAC,CAAC;IAClB,MAAM,IAAI,GAAG,MAAM,CAAC,gBAAgB,CAAC;IACrC,IAAI,CAAC,OAAO,CAAC,CAAC,gBAAsC,EAAE,MAAc,EAAE,EAAE;QACtE,IAAI,gBAAgB,CAAC,WAAW,CAAC,MAAM,KAAK,cAAM,CAAC,cAAc,EAAE;YACjE,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC;gBAAE,GAAG,IAAI,aAAa,CAAC;YACzC,UAAU,IAAI,WAAW,CAAC,MAAM,EAAE,gBAAgB,CAAC,QAAQ,CAAC,CAAC;YAC7D,GAAG;gBACD,MAAM,CAAC,IAAI,GAAG,uBAAuB,GAAG,gBAAgB,CAAC,QAAQ,CAAC,KAAK,CAAC;YAC1E,SAAS,EAAE,CAAC;SACb;IACH,CAAC,CAAC,CAAC;IAEH,IAAI,SAAS,GAAG,0BAAkB,EAAE;QAClC,MAAM,IAAI,KAAK,CACb,8CAA8C,0BAAkB,EAAE,CACnE,CAAC;KACH;IAED,IAAI,UAAU,GAAG,4BAA4B,EAAE;QAC7C,MAAM,IAAI,KAAK,CACb,sDAAsD,4BAA4B,EAAE,CACrF,CAAC;KACH;IAED,OAAO,GAAG,CAAC;AACb,CAAC;AA5BD,kDA4BC;AAED;;;GAGG;AACH,SAAgB,qBAAqB,CAAC,GAAW;IAC/C,MAAM,IAAI,GAAG,IAAI,gBAAM,EAAE,CAAC;IAC1B,IAAI,CAAC,GAAG;QAAE,OAAO,IAAI,CAAC;IACtB,MAAM,UAAU,GAAG,GAAG,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IAC5C,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QACvB,MAAM,YAAY,GAAG,GAAG,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC;QACxD,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,iBAAiB,GAAG,EAAE,CAAC,CAAC;QAEvE,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,YAAY,CAAC;QACnC,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,wBAAwB,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC;IACH,OAAO,IAAI,CAAC;AACd,CAAC;AAZD,sDAYC;AAED,SAAS,WAAW,CAAC,MAAc,EAAE,QAAkB;IACrD,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC;IAC9D,IAAI,UAAU,GAAG,yBAAyB,EAAE;QAC1C,MAAM,IAAI,KAAK,CACb,wCAAwC,yBAAyB,EAAE,CACpE,CAAC;KACH;IACD,OAAO,UAAU,CAAC;AACpB,CAAC","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This module contains the functions for serializing and deserializing\n * TagMap (TagContext) with W3C Correlation Context as the HTTP text format.\n * It allows tags to propagate across requests.\n *\n * OpenCensus uses W3C Correlation Context as the HTTP text format.\n * https://github.com/w3c/correlation-context/blob/master/correlation_context/HTTP_HEADER_FORMAT.md\n */\n\nimport { TagMap } from '../tag-map';\nimport { TagKey, TagTtl, TagValue, TagValueWithMetadata } from '../types';\n\nexport const MAX_NUMBER_OF_TAGS = 180;\nconst TAG_SERIALIZED_SIZE_LIMIT = 4096;\nconst TAGMAP_SERIALIZED_SIZE_LIMIT = 8192;\nconst TAG_KEY_VALUE_DELIMITER = '=';\nconst TAG_DELIMITER = ',';\nconst UNLIMITED_PROPAGATION_MD = {\n  tagTtl: TagTtl.UNLIMITED_PROPAGATION,\n};\n\n/**\n * Serializes a given TagMap to the on-the-wire format based on the W3C HTTP\n * text format standard.\n * @param tagMap The TagMap to serialize.\n */\nexport function serializeTextFormat(tagMap: TagMap): string {\n  let ret = '';\n  let totalChars = 0;\n  let totalTags = 0;\n  const tags = tagMap.tagsWithMetadata;\n  tags.forEach((tagsWithMetadata: TagValueWithMetadata, tagKey: TagKey) => {\n    if (tagsWithMetadata.tagMetadata.tagTtl !== TagTtl.NO_PROPAGATION) {\n      if (ret.length > 0) ret += TAG_DELIMITER;\n      totalChars += validateTag(tagKey, tagsWithMetadata.tagValue);\n      ret +=\n        tagKey.name + TAG_KEY_VALUE_DELIMITER + tagsWithMetadata.tagValue.value;\n      totalTags++;\n    }\n  });\n\n  if (totalTags > MAX_NUMBER_OF_TAGS) {\n    throw new Error(\n      `Number of tags in the TagMap exceeds limit ${MAX_NUMBER_OF_TAGS}`\n    );\n  }\n\n  if (totalChars > TAGMAP_SERIALIZED_SIZE_LIMIT) {\n    throw new Error(\n      `Size of TagMap exceeds the maximum serialized size ${TAGMAP_SERIALIZED_SIZE_LIMIT}`\n    );\n  }\n\n  return ret;\n}\n\n/**\n * Deserializes input to TagMap based on the W3C HTTP text format standard.\n * @param str The TagMap to deserialize.\n */\nexport function deserializeTextFormat(str: string): TagMap {\n  const tags = new TagMap();\n  if (!str) return tags;\n  const listOfTags = str.split(TAG_DELIMITER);\n  listOfTags.forEach(tag => {\n    const keyValuePair = tag.split(TAG_KEY_VALUE_DELIMITER);\n    if (keyValuePair.length !== 2) throw new Error(`Malformed tag ${tag}`);\n\n    const [name, value] = keyValuePair;\n    tags.set({ name }, { value }, UNLIMITED_PROPAGATION_MD);\n  });\n  return tags;\n}\n\nfunction validateTag(tagKey: TagKey, tagValue: TagValue) {\n  const charsOfTag = tagKey.name.length + tagValue.value.length;\n  if (charsOfTag > TAG_SERIALIZED_SIZE_LIMIT) {\n    throw new Error(\n      `Serialized size of tag exceeds limit ${TAG_SERIALIZED_SIZE_LIMIT}`\n    );\n  }\n  return charsOfTag;\n}\n"]}