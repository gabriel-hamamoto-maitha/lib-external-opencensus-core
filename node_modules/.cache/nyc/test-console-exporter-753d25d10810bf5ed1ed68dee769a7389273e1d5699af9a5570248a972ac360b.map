{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-console-exporter.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-console-exporter.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport { SpanKind } from '../src';\nimport {\n  ConsoleExporter,\n  NoopExporter,\n} from '../src/exporters/console-exporter';\nimport { RootSpan } from '../src/trace/model/root-span';\nimport { CoreTracer } from '../src/trace/model/tracer';\n\nconst tracer = new CoreTracer().start({ samplingRate: 1.0 });\nconst defaultBufferConfig = {\n  bufferSize: 1,\n  bufferTimeout: 20000, // time in milliseconds\n};\nconst name = 'MySpanName';\nconst kind = SpanKind.SERVER;\nconst traceId = 'd4cda95b652f4a1592b449d5929fda1b';\nconst parentSpanId = '';\n\ndescribe('NoopExporter', () => {\n  /** Should do nothing when calling onEndSpan() */\n  describe('onEndSpan()', () => {\n    it('should do nothing', () => {\n      const exporter = new NoopExporter();\n      const rootSpan = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      exporter.onEndSpan(rootSpan);\n      assert.ok(true);\n    });\n  });\n\n  /** Should do anything when calling publish() */\n  describe('publish()', () => {\n    it('should do nothing', () => {\n      const exporter = new NoopExporter();\n      const rootSpan = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      const queue: RootSpan[] = [rootSpan];\n\n      return exporter.publish(queue);\n    });\n  });\n});\n\ndescribe('ConsoleLogExporter', () => {\n  /** Should end a span */\n  describe('onEndSpan()', () => {\n    it('should end a span', () => {\n      const intercept = require('intercept-stdout');\n      let capturedText = '';\n      intercept((txt: string) => {\n        capturedText += txt;\n      });\n\n      const exporter = new ConsoleExporter(defaultBufferConfig);\n\n      const rootSpan1 = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      exporter.onEndSpan(rootSpan1);\n      assert.strictEqual(capturedText, '');\n\n      const rootSpan2 = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      exporter.onEndSpan(rootSpan2);\n      [rootSpan1, rootSpan2].map(rootSpan => {\n        assert.ok(capturedText.indexOf(rootSpan.traceId) >= 0);\n        assert.ok(capturedText.indexOf(rootSpan.id) >= 0);\n        assert.ok(capturedText.indexOf(rootSpan.name) >= 0);\n      });\n    });\n  });\n\n  /** Should publish the rootspan in queue */\n  describe('publish()', () => {\n    it('should publish the rootspans in queue', () => {\n      const intercept = require('intercept-stdout');\n      let capturedText = '';\n      intercept((txt: string) => {\n        capturedText += txt;\n      });\n\n      const exporter = new ConsoleExporter(defaultBufferConfig);\n      const rootSpan = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      rootSpan.start();\n      rootSpan.startChildSpan({ name: 'name', kind: SpanKind.UNSPECIFIED });\n      const queue: RootSpan[] = [rootSpan];\n\n      return exporter.publish(queue).then(() => {\n        assert.ok(capturedText.indexOf(rootSpan.traceId) >= 0);\n        assert.ok(capturedText.indexOf(rootSpan.id) >= 0);\n        assert.ok(capturedText.indexOf(rootSpan.name) >= 0);\n        assert.ok(capturedText.indexOf(rootSpan.spans[0].name) >= 0);\n        assert.ok(capturedText.indexOf(rootSpan.spans[0].id) >= 0);\n      });\n    });\n  });\n});\n"]}