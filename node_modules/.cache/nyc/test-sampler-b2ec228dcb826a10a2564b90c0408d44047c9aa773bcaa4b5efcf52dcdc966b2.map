{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-sampler.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-sampler.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport { SpanKind } from '../src';\nimport { TraceParams } from '../src/trace/config/types';\nimport { RootSpan } from '../src/trace/model/root-span';\nimport { CoreTracer } from '../src/trace/model/tracer';\nimport {\n  SamplerBuilder,\n  TraceParamsBuilder,\n} from '../src/trace/sampler/sampler';\n\nconst tracer = new CoreTracer();\n\nconst traceParameters: TraceParams = {\n  numberOfAnnontationEventsPerSpan: 12,\n  numberOfAttributesPerSpan: 10,\n  numberOfLinksPerSpan: 7,\n  numberOfMessageEventsPerSpan: 5,\n};\n\ndescribe('Sampler', () => {\n  const name = 'MySpanName';\n  const kind = SpanKind.SERVER;\n  const traceId = 'd4cda95b652f4a1592b449d5929fda1b';\n  const parentSpanId = '';\n\n  /**\n   * Should return true\n   */\n  describe('shouldSample() always', () => {\n    it('should return a always sampler for 1', () => {\n      const root = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      const sampler = SamplerBuilder.getSampler(1);\n      const samplerShouldSample = sampler.shouldSample(root.traceId);\n      assert.strictEqual(sampler.description, 'always');\n      assert.ok(samplerShouldSample);\n    });\n    it('should return a always sampler for >1', () => {\n      const root = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      const sampler = SamplerBuilder.getSampler(100);\n      const samplerShouldSample = sampler.shouldSample(root.traceId);\n      assert.strictEqual(sampler.description, 'always');\n      assert.ok(samplerShouldSample);\n    });\n  });\n  /**\n   * Should return false\n   */\n  describe('shouldSample() never', () => {\n    it('should return a never sampler for 0', () => {\n      const root = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      const sampler = SamplerBuilder.getSampler(0);\n      const samplerShouldSample = sampler.shouldSample(root.traceId);\n      assert.strictEqual(sampler.description, 'never');\n      assert.ok(!samplerShouldSample);\n    });\n    it('should return a never sampler for negative value', () => {\n      const root = new RootSpan(tracer, name, kind, traceId, parentSpanId);\n      const sampler = SamplerBuilder.getSampler(-1);\n      const samplerShouldSample = sampler.shouldSample(root.traceId);\n      assert.strictEqual(sampler.description, 'never');\n      assert.ok(!samplerShouldSample);\n    });\n  });\n\n  describe('shouldSample() probability', () => {\n    it('should return a probability sampler', () => {\n      const sampler = SamplerBuilder.getSampler(0.7);\n      assert.ok(sampler.description.indexOf('probability') >= 0);\n    });\n    it('should accept and reject traces based on last 26 bytes of traceId', () => {\n      const sampler = SamplerBuilder.getSampler(0.5);\n\n      const shouldSample = [\n        '11111111111111111110000000000000',\n        '1111111111111111111000ffffffffff',\n        '11111111111111111117ffffffffffff',\n      ];\n      shouldSample.forEach(traceId => {\n        const samplerShouldSample = sampler.shouldSample(traceId);\n        assert.ok(\n          samplerShouldSample,\n          `should have sampled but didn't: ${traceId}`\n        );\n      });\n\n      const shouldNotSample = [\n        '11111111111111111118000000000000',\n        '11111111111111111118000fffffffff',\n        '1111111111111111111fffffffffffff',\n      ];\n      shouldNotSample.forEach(traceId => {\n        const samplerShouldSample = sampler.shouldSample(traceId);\n        assert.ok(\n          !samplerShouldSample,\n          `should not have sampled but did: ${traceId}`\n        );\n      });\n    });\n  });\n  describe('getNumberOfAnnotationEventsPerSpan', () => {\n    it('should return  12', () => {\n      assert.strictEqual(\n        TraceParamsBuilder.getNumberOfAnnotationEventsPerSpan(traceParameters),\n        12\n      );\n    });\n  });\n  describe('getNumberOfMessageEventsPerSpan', () => {\n    it('should return 5', () => {\n      assert.strictEqual(\n        TraceParamsBuilder.getNumberOfMessageEventsPerSpan(traceParameters),\n        5\n      );\n    });\n  });\n  describe('getNumberOfAttributesPerSpan', () => {\n    it('should return 10', () => {\n      assert.strictEqual(\n        TraceParamsBuilder.getNumberOfAttributesPerSpan(traceParameters),\n        10\n      );\n    });\n  });\n  describe('getNumberOfLinksPerSpan', () => {\n    it('should return 7', () => {\n      assert.strictEqual(\n        TraceParamsBuilder.getNumberOfLinksPerSpan(traceParameters),\n        7\n      );\n    });\n  });\n});\n"]}