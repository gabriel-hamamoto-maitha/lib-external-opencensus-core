{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/recorder.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/recorder.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TagKey, TagValue } from '../tags/types';\nimport {\n  AggregationData,\n  AggregationType,\n  CountData,\n  DistributionData,\n  LastValueData,\n  Measurement,\n  MeasureType,\n  SumData,\n} from './types';\n\nconst UNKNOWN_TAG_VALUE: TagValue | null = null;\n\nexport class Recorder {\n  static addMeasurement(\n    aggregationData: AggregationData,\n    measurement: Measurement,\n    attachments?: { [key: string]: string }\n  ): AggregationData {\n    aggregationData.timestamp = Date.now();\n    const value =\n      measurement.measure.type === MeasureType.DOUBLE\n        ? measurement.value\n        : Math.trunc(measurement.value);\n\n    switch (aggregationData.type) {\n      case AggregationType.DISTRIBUTION:\n        return this.addToDistribution(aggregationData, value, attachments);\n\n      case AggregationType.SUM:\n        return this.addToSum(aggregationData, value);\n\n      case AggregationType.COUNT:\n        return this.addToCount(aggregationData, value);\n\n      default:\n        return this.addToLastValue(aggregationData, value);\n    }\n  }\n\n  /** Gets the tag values from tags and columns */\n  static getTagValues(\n    tags: Map<TagKey, TagValue>,\n    columns: TagKey[]\n  ): Array<TagValue | null> {\n    return columns.map(\n      tagKey =>\n        tags.get(tagKey) ||\n        /** replace not found key values by null. */ UNKNOWN_TAG_VALUE\n    );\n  }\n\n  private static addToDistribution(\n    distributionData: DistributionData,\n    value: number,\n    attachments?: { [key: string]: string }\n  ): DistributionData {\n    distributionData.count += 1;\n\n    let bucketIndex = distributionData.buckets.findIndex(\n      bucket => bucket > value\n    );\n\n    if (bucketIndex < 0) {\n      bucketIndex = distributionData.buckets.length;\n    }\n\n    if (\n      distributionData.bucketCounts &&\n      distributionData.bucketCounts.length > bucketIndex\n    ) {\n      distributionData.bucketCounts[bucketIndex] += 1;\n    }\n\n    if (distributionData.count === 1) {\n      distributionData.mean = value;\n    }\n\n    distributionData.sum += value;\n\n    const oldMean = distributionData.mean;\n    distributionData.mean =\n      distributionData.mean +\n      (value - distributionData.mean) / distributionData.count;\n    distributionData.sumOfSquaredDeviation =\n      distributionData.sumOfSquaredDeviation +\n      (value - oldMean) * (value - distributionData.mean);\n    distributionData.stdDeviation = Math.sqrt(\n      distributionData.sumOfSquaredDeviation / distributionData.count\n    );\n\n    // No implicit recording for exemplars - if there are no attachments\n    // (contextual information), don't record exemplars.\n    if (\n      attachments &&\n      distributionData.exemplars &&\n      distributionData.exemplars.length > bucketIndex\n    ) {\n      distributionData.exemplars[bucketIndex] = {\n        value,\n        timestamp: distributionData.timestamp,\n        attachments,\n      };\n    }\n    return distributionData;\n  }\n\n  private static addToSum(sumData: SumData, value: number): SumData {\n    sumData.value += value;\n    return sumData;\n  }\n\n  private static addToCount(countData: CountData, value: number): CountData {\n    countData.value += 1;\n    return countData;\n  }\n\n  private static addToLastValue(\n    lastValueData: LastValueData,\n    value: number\n  ): LastValueData {\n    lastValueData.value = value;\n    return lastValueData;\n  }\n}\n"]}