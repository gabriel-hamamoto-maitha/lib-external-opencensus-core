{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-stats.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-stats.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport {\n  BaseView,\n  globalStats,\n  StatsEventListener,\n  TagKey,\n  TagMap,\n  TagValue,\n} from '../src';\nimport {\n  AggregationType,\n  LastValueData,\n  Measure,\n  Measurement,\n  MeasureType,\n  MeasureUnit,\n  View,\n} from '../src/stats/types';\nimport * as tagger from '../src/tags/tagger';\n\nclass TestExporter implements StatsEventListener {\n  registeredViews: View[] = [];\n  recordedMeasurements: Measurement[] = [];\n\n  onRegisterView(view: View) {\n    this.registeredViews.push(view);\n  }\n\n  onRecord(\n    views: View[],\n    measurement: Measurement,\n    tagMap: Map<TagKey, TagValue>\n  ) {\n    this.recordedMeasurements.push(measurement);\n  }\n\n  start(): void {\n    // TODO(mayurkale): dependency with PR#253.\n  }\n\n  stop(): void {}\n\n  clean() {\n    this.registeredViews = [];\n    this.recordedMeasurements = [];\n  }\n}\n\ndescribe('Stats', () => {\n  afterEach(() => {\n    globalStats.clear();\n  });\n\n  const viewName = 'testViewName';\n  const tagKeys = [{ name: 'testKey1' }, { name: 'testKey2' }];\n  const tagValues = [{ value: 'testValue1' }, { value: 'testValue2' }];\n  const tagMap = new TagMap();\n  tagMap.set(tagKeys[0], tagValues[0]);\n  tagMap.set(tagKeys[1], tagValues[1]);\n\n  const measureName = 'testMeasureDouble';\n  const measureUnit = MeasureUnit.UNIT;\n  const description = 'test description';\n\n  describe('createMeasureDouble()', () => {\n    it('should create a measure of type double', () => {\n      const measureDouble = globalStats.createMeasureDouble(\n        measureName,\n        measureUnit,\n        description\n      );\n      assert.strictEqual(measureDouble.type, MeasureType.DOUBLE);\n      assert.strictEqual(measureDouble.name, measureName);\n      assert.strictEqual(measureDouble.unit, measureUnit);\n      assert.strictEqual(measureDouble.description, description);\n    });\n  });\n\n  describe('createMeasureInt64()', () => {\n    it('should create a measure of type int64', () => {\n      const measureDouble = globalStats.createMeasureInt64(\n        measureName,\n        measureUnit,\n        description\n      );\n      assert.strictEqual(measureDouble.type, MeasureType.INT64);\n      assert.strictEqual(measureDouble.name, measureName);\n      assert.strictEqual(measureDouble.unit, measureUnit);\n      assert.strictEqual(measureDouble.description, description);\n    });\n  });\n\n  describe('createView()', () => {\n    const aggregationTypes = [\n      AggregationType.COUNT,\n      AggregationType.SUM,\n      AggregationType.LAST_VALUE,\n      AggregationType.DISTRIBUTION,\n    ];\n    let measure: Measure;\n\n    before(() => {\n      measure = globalStats.createMeasureInt64(measureName, measureUnit);\n    });\n\n    after(() => {\n      globalStats.clear();\n    });\n\n    for (const aggregationType of aggregationTypes) {\n      it(`should create a view with ${aggregationType} aggregation`, () => {\n        const bucketBoundaries = AggregationType.DISTRIBUTION ? [1, 2, 3] : [];\n        const view = globalStats.createView(\n          viewName,\n          measure,\n          aggregationType,\n          tagKeys,\n          description,\n          bucketBoundaries\n        );\n        globalStats.registerView(view);\n\n        assert.strictEqual(view.name, viewName);\n        assert.strictEqual(view.measure, measure);\n        assert.strictEqual(view.description, description);\n        assert.deepStrictEqual(view.measure, measure);\n        assert.strictEqual(view.aggregation, aggregationType);\n        assert.ok(view.registered);\n      });\n    }\n\n    it('should not create a view with distribution aggregation when no bucket boundaries were given', () => {\n      // @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.\n      assert.throws(globalStats.createView, 'No bucketBoundaries specified');\n    });\n  });\n\n  describe('registerView()', () => {\n    let measure: Measure;\n    const testExporter = new TestExporter();\n\n    before(() => {\n      testExporter.clean();\n      measure = globalStats.createMeasureInt64(measureName, measureUnit);\n    });\n\n    it('should register a view', () => {\n      globalStats.registerExporter(testExporter);\n      const view = new BaseView(\n        viewName,\n        measure,\n        AggregationType.LAST_VALUE,\n        tagKeys,\n        description\n      );\n\n      assert.ok(!view.registered);\n      assert.strictEqual(testExporter.registeredViews.length, 0);\n\n      globalStats.registerView(view);\n\n      assert.ok(view.registered);\n      assert.strictEqual(testExporter.registeredViews.length, 1);\n      assert.deepStrictEqual(testExporter.registeredViews[0], view);\n    });\n  });\n\n  describe('unregisterExporter()', () => {\n    const testExporter = new TestExporter();\n\n    it('should unregister the exporter', () => {\n      globalStats.registerExporter(testExporter);\n      const measure = globalStats.createMeasureInt64(measureName, measureUnit);\n      const view = new BaseView(\n        viewName,\n        measure,\n        AggregationType.LAST_VALUE,\n        tagKeys,\n        description\n      );\n      globalStats.unregisterExporter(testExporter);\n      globalStats.registerView(view);\n\n      assert.strictEqual(testExporter.registeredViews.length, 0);\n    });\n  });\n\n  describe('record()', () => {\n    let measure: Measure;\n    const testExporter = new TestExporter();\n    let aggregationData: LastValueData;\n    before(() => {\n      measure = globalStats.createMeasureInt64(measureName, measureUnit);\n    });\n\n    beforeEach(() => {\n      testExporter.clean();\n      globalStats.registerExporter(testExporter);\n      const view = globalStats.createView(\n        viewName,\n        measure,\n        AggregationType.LAST_VALUE,\n        tagKeys,\n        description\n      );\n      globalStats.registerView(view);\n    });\n\n    afterEach(() => {\n      globalStats.clear();\n    });\n\n    it('should record a single measurement', () => {\n      const measurement = { measure, value: 1 };\n      assert.strictEqual(testExporter.recordedMeasurements.length, 0);\n      globalStats.record([measurement], tagMap);\n      assert.strictEqual(testExporter.recordedMeasurements.length, 1);\n      assert.deepStrictEqual(testExporter.recordedMeasurements[0], measurement);\n      aggregationData = testExporter.registeredViews[0].getSnapshot(\n        tagValues\n      ) as LastValueData;\n      assert.strictEqual(aggregationData.value, measurement.value);\n    });\n\n    it('should not record a single negative measurement', () => {\n      globalStats.registerExporter(testExporter);\n      const measurement = { measure, value: -1 };\n      globalStats.record([measurement], tagMap);\n      assert.strictEqual(testExporter.recordedMeasurements.length, 0);\n    });\n\n    it('should record when tagMap is not passed', () => {\n      globalStats.registerExporter(testExporter);\n      const measurement = { measure, value: 10 };\n      globalStats.record([measurement]);\n      assert.strictEqual(testExporter.recordedMeasurements.length, 2);\n    });\n\n    it('should record multiple measurements', () => {\n      const measurement1 = { measure, value: 1 };\n      const measurement2 = { measure, value: 1 };\n      assert.strictEqual(testExporter.recordedMeasurements.length, 0);\n      globalStats.record([measurement1, measurement2], tagMap);\n      assert.strictEqual(testExporter.recordedMeasurements.length, 2);\n      assert.deepStrictEqual(\n        testExporter.recordedMeasurements[0],\n        measurement1\n      );\n      assert.deepStrictEqual(\n        testExporter.recordedMeasurements[1],\n        measurement2\n      );\n      aggregationData = testExporter.registeredViews[0].getSnapshot(\n        tagValues\n      ) as LastValueData;\n      assert.strictEqual(aggregationData.value, measurement2.value);\n    });\n\n    it('should skip whole multiple measurment if one of value is negative', () => {\n      const measurments = [\n        { measure, value: 1 },\n        { measure, value: -1 },\n        { measure, value: 1 },\n      ];\n      globalStats.record(measurments, tagMap);\n      assert.strictEqual(testExporter.recordedMeasurements.length, 0);\n    });\n\n    it('should record against implicit context when set', () => {\n      const tags = new TagMap();\n      tags.set(tagKeys[0], { value: 'value1' });\n      tags.set(tagKeys[1], { value: 'value2' });\n      const measurement = { measure, value: 1 };\n      globalStats.withTagContext(tags, () => {\n        globalStats.record([measurement]);\n      });\n\n      assert.strictEqual(testExporter.recordedMeasurements.length, 1);\n      assert.deepStrictEqual(testExporter.recordedMeasurements[0], measurement);\n      aggregationData = testExporter.registeredViews[0].getSnapshot([\n        { value: 'value1' },\n        { value: 'value2' },\n      ]) as LastValueData;\n      assert.strictEqual(aggregationData.value, measurement.value);\n      assert.deepStrictEqual(aggregationData.tagValues, [\n        { value: 'value1' },\n        { value: 'value2' },\n      ]);\n    });\n\n    it('should record against implicit context when not set or empty', () => {\n      const UNKNOWN_TAG_VALUE: TagValue | null = null;\n      globalStats.registerExporter(testExporter);\n      const measurement = { measure, value: 2211 };\n      globalStats.withTagContext(tagger.EMPTY_TAG_MAP, () => {\n        globalStats.record([measurement]);\n      });\n\n      aggregationData = testExporter.registeredViews[0].getSnapshot([\n        UNKNOWN_TAG_VALUE,\n        UNKNOWN_TAG_VALUE,\n      ]) as LastValueData;\n      assert.strictEqual(aggregationData.value, measurement.value);\n      assert.deepStrictEqual(aggregationData.tagValues, [\n        UNKNOWN_TAG_VALUE,\n        UNKNOWN_TAG_VALUE,\n      ]);\n    });\n  });\n});\n"]}