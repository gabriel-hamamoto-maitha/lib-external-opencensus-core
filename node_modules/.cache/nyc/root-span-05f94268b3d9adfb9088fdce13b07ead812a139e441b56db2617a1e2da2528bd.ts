"use strict";/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_12jxetudac(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/root-span.ts";var hash="c1eff8810568a1b400967f32b10afde23b596a7f";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/root-span.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:0},end:{line:18,column:26}},"2":{start:{line:19,column:15},end:{line:19,column:53}},"3":{start:{line:20,column:15},end:{line:20,column:32}},"4":{start:{line:34,column:8},end:{line:34,column:22}},"5":{start:{line:35,column:8},end:{line:35,column:29}},"6":{start:{line:36,column:8},end:{line:36,column:36}},"7":{start:{line:37,column:8},end:{line:37,column:25}},"8":{start:{line:38,column:8},end:{line:38,column:25}},"9":{start:{line:39,column:8},end:{line:39,column:46}},"10":{start:{line:40,column:8},end:{line:42,column:9}},"11":{start:{line:41,column:12},end:{line:41,column:46}},"12":{start:{line:43,column:8},end:{line:43,column:55}},"13":{start:{line:44,column:8},end:{line:44,column:58}},"14":{start:{line:48,column:8},end:{line:48,column:20}},"15":{start:{line:52,column:8},end:{line:52,column:33}},"16":{start:{line:56,column:8},end:{line:56,column:36}},"17":{start:{line:59,column:8},end:{line:59,column:38}},"18":{start:{line:62,column:0},end:{line:62,column:28}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:33,column:4},end:{line:33,column:5}},loc:{start:{line:33,column:71},end:{line:45,column:5}},line:33},"1":{name:"(anonymous_1)",decl:{start:{line:47,column:4},end:{line:47,column:5}},loc:{start:{line:47,column:17},end:{line:49,column:5}},line:47},"2":{name:"(anonymous_2)",decl:{start:{line:51,column:4},end:{line:51,column:5}},loc:{start:{line:51,column:18},end:{line:53,column:5}},line:51},"3":{name:"(anonymous_3)",decl:{start:{line:55,column:4},end:{line:55,column:5}},loc:{start:{line:55,column:21},end:{line:57,column:5}},line:55},"4":{name:"(anonymous_4)",decl:{start:{line:58,column:4},end:{line:58,column:5}},loc:{start:{line:58,column:23},end:{line:60,column:5}},line:58}},branchMap:{"0":{loc:{start:{line:40,column:8},end:{line:42,column:9}},type:"if",locations:[{start:{line:40,column:8},end:{line:42,column:9}},{start:{line:40,column:8},end:{line:42,column:9}}],line:40},"1":{loc:{start:{line:43,column:22},end:{line:43,column:54}},type:"binary-expr",locations:[{start:{line:43,column:22},end:{line:43,column:35}},{start:{line:43,column:39},end:{line:43,column:54}}],line:43}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{"0":[0,0],"1":[0,0]},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/root-span.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/root-span.ts"],names:[],mappings:";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,sDAAsD;AACtD,iCAA8B;AAG9B,0BAA0B;AAC1B,MAAa,QAAS,SAAQ,WAAI;IAahC;;;;;;;;;OASG;IACH,YACE,MAAwB,EACxB,IAAY,EACZ,IAAoB,EACpB,OAAe,EACf,YAAoB,EACpB,UAA6B;QAE7B,KAAK,CAAC,MAAM,CAAC,CAAC;QACd,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC;QAC5B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,iBAAiB,GAAG,YAAY,CAAC;QACtC,IAAI,UAAU,EAAE;YACd,IAAI,CAAC,eAAe,GAAG,UAAU,CAAC;SACnC;QACD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;QAC/C,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;IACpD,CAAC;IAED,6CAA6C;IAC7C,UAAU;QACR,OAAO,IAAI,CAAC;IACd,CAAC;IAED,4CAA4C;IAC5C,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED,8CAA8C;IAC9C,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;IAED,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAChC,CAAC;CACF;AA9DD,4BA8DC",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as logger from '../../common/console-logger';\nimport { Span } from './span';\nimport * as types from './types';\n\n/** Defines a root span */\nexport class RootSpan extends Span {\n  /** Its trace ID. */\n  private traceIdLocal: string;\n  /** Its trace state. */\n  private traceStateLocal?: types.TraceState;\n  /**\n   * This span's parent Id.  This is a string and not a Span because the\n   * parent was likely started on another machine.\n   */\n  private parentSpanIdLocal: string;\n  /** A tracer object */\n  readonly tracer: types.TracerBase;\n\n  /**\n   * Constructs a new RootSpanImpl instance.\n   * @param tracer A tracer object.\n   * @param name The displayed name for the new span.\n   * @param kind The kind of new span.\n   * @param traceId The trace Id.\n   * @param parentSpanId The id of the parent span, or empty if the new span is\n   *     a root span.\n   * @param traceState An optional traceState.\n   */\n  constructor(\n    tracer: types.TracerBase,\n    name: string,\n    kind: types.SpanKind,\n    traceId: string,\n    parentSpanId: string,\n    traceState?: types.TraceState\n  ) {\n    super(tracer);\n    this.tracer = tracer;\n    this.traceIdLocal = traceId;\n    this.name = name;\n    this.kind = kind;\n    this.parentSpanIdLocal = parentSpanId;\n    if (traceState) {\n      this.traceStateLocal = traceState;\n    }\n    this.logger = tracer.logger || logger.logger();\n    this.activeTraceParams = tracer.activeTraceParams;\n  }\n\n  /** Returns whether a span is root or not. */\n  isRootSpan(): boolean {\n    return true;\n  }\n\n  /** Gets trace id from rootspan instance. */\n  get traceId(): string {\n    return this.traceIdLocal;\n  }\n\n  /** Gets trace state from rootspan instance */\n  get traceState(): types.TraceState | undefined {\n    return this.traceStateLocal;\n  }\n\n  get parentSpanId(): string {\n    return this.parentSpanIdLocal;\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"c1eff8810568a1b400967f32b10afde23b596a7f"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_12jxetudac=function(){return actualCoverage;};}return actualCoverage;}cov_12jxetudac();cov_12jxetudac().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_12jxetudac().s[1]++;exports.RootSpan=void 0;const logger=(cov_12jxetudac().s[2]++,require("../../common/console-logger"));const span_1=(cov_12jxetudac().s[3]++,require("./span"));/** Defines a root span */class RootSpan extends(span_1.Span){/**
     * Constructs a new RootSpanImpl instance.
     * @param tracer A tracer object.
     * @param name The displayed name for the new span.
     * @param kind The kind of new span.
     * @param traceId The trace Id.
     * @param parentSpanId The id of the parent span, or empty if the new span is
     *     a root span.
     * @param traceState An optional traceState.
     */constructor(tracer,name,kind,traceId,parentSpanId,traceState){cov_12jxetudac().f[0]++;cov_12jxetudac().s[4]++;super(tracer);cov_12jxetudac().s[5]++;this.tracer=tracer;cov_12jxetudac().s[6]++;this.traceIdLocal=traceId;cov_12jxetudac().s[7]++;this.name=name;cov_12jxetudac().s[8]++;this.kind=kind;cov_12jxetudac().s[9]++;this.parentSpanIdLocal=parentSpanId;cov_12jxetudac().s[10]++;if(traceState){cov_12jxetudac().b[0][0]++;cov_12jxetudac().s[11]++;this.traceStateLocal=traceState;}else{cov_12jxetudac().b[0][1]++;}cov_12jxetudac().s[12]++;this.logger=(cov_12jxetudac().b[1][0]++,tracer.logger)||(cov_12jxetudac().b[1][1]++,logger.logger());cov_12jxetudac().s[13]++;this.activeTraceParams=tracer.activeTraceParams;}/** Returns whether a span is root or not. */isRootSpan(){cov_12jxetudac().f[1]++;cov_12jxetudac().s[14]++;return true;}/** Gets trace id from rootspan instance. */get traceId(){cov_12jxetudac().f[2]++;cov_12jxetudac().s[15]++;return this.traceIdLocal;}/** Gets trace state from rootspan instance */get traceState(){cov_12jxetudac().f[3]++;cov_12jxetudac().s[16]++;return this.traceStateLocal;}get parentSpanId(){cov_12jxetudac().f[4]++;cov_12jxetudac().s[17]++;return this.parentSpanIdLocal;}}cov_12jxetudac().s[18]++;exports.RootSpan=RootSpan;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3VzZXJtYWl0aGEvdHJhZGVtYXN0ZXIvbGlicy9saWItZXh0ZXJuYWwtb3BlbmNlbnN1cy1ub2RlL3NyYy90cmFjZS9tb2RlbC9yb290LXNwYW4udHMiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VybWFpdGhhL3RyYWRlbWFzdGVyL2xpYnMvbGliLWV4dGVybmFsLW9wZW5jZW5zdXMtbm9kZS9zcmMvdHJhY2UvbW9kZWwvcm9vdC1zcGFuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7R0FjRzs7O0FBRUgsc0RBQXNEO0FBQ3RELGlDQUE4QjtBQUc5QiwwQkFBMEI7QUFDMUIsTUFBYSxRQUFTLFNBQVEsV0FBSTtJQWFoQzs7Ozs7Ozs7O09BU0c7SUFDSCxZQUNFLE1BQXdCLEVBQ3hCLElBQVksRUFDWixJQUFvQixFQUNwQixPQUFlLEVBQ2YsWUFBb0IsRUFDcEIsVUFBNkI7UUFFN0IsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2QsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLFlBQVksR0FBRyxPQUFPLENBQUM7UUFDNUIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLFlBQVksQ0FBQztRQUN0QyxJQUFJLFVBQVUsRUFBRTtZQUNkLElBQUksQ0FBQyxlQUFlLEdBQUcsVUFBVSxDQUFDO1NBQ25DO1FBQ0QsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUMvQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsTUFBTSxDQUFDLGlCQUFpQixDQUFDO0lBQ3BELENBQUM7SUFFRCw2Q0FBNkM7SUFDN0MsVUFBVTtRQUNSLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELDRDQUE0QztJQUM1QyxJQUFJLE9BQU87UUFDVCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDM0IsQ0FBQztJQUVELDhDQUE4QztJQUM5QyxJQUFJLFVBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUM7SUFDOUIsQ0FBQztJQUVELElBQUksWUFBWTtRQUNkLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDO0lBQ2hDLENBQUM7Q0FDRjtBQTlERCw0QkE4REMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDE4LCBPcGVuQ2Vuc3VzIEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCAqIGFzIGxvZ2dlciBmcm9tICcuLi8uLi9jb21tb24vY29uc29sZS1sb2dnZXInO1xuaW1wb3J0IHsgU3BhbiB9IGZyb20gJy4vc3Bhbic7XG5pbXBvcnQgKiBhcyB0eXBlcyBmcm9tICcuL3R5cGVzJztcblxuLyoqIERlZmluZXMgYSByb290IHNwYW4gKi9cbmV4cG9ydCBjbGFzcyBSb290U3BhbiBleHRlbmRzIFNwYW4ge1xuICAvKiogSXRzIHRyYWNlIElELiAqL1xuICBwcml2YXRlIHRyYWNlSWRMb2NhbDogc3RyaW5nO1xuICAvKiogSXRzIHRyYWNlIHN0YXRlLiAqL1xuICBwcml2YXRlIHRyYWNlU3RhdGVMb2NhbD86IHR5cGVzLlRyYWNlU3RhdGU7XG4gIC8qKlxuICAgKiBUaGlzIHNwYW4ncyBwYXJlbnQgSWQuICBUaGlzIGlzIGEgc3RyaW5nIGFuZCBub3QgYSBTcGFuIGJlY2F1c2UgdGhlXG4gICAqIHBhcmVudCB3YXMgbGlrZWx5IHN0YXJ0ZWQgb24gYW5vdGhlciBtYWNoaW5lLlxuICAgKi9cbiAgcHJpdmF0ZSBwYXJlbnRTcGFuSWRMb2NhbDogc3RyaW5nO1xuICAvKiogQSB0cmFjZXIgb2JqZWN0ICovXG4gIHJlYWRvbmx5IHRyYWNlcjogdHlwZXMuVHJhY2VyQmFzZTtcblxuICAvKipcbiAgICogQ29uc3RydWN0cyBhIG5ldyBSb290U3BhbkltcGwgaW5zdGFuY2UuXG4gICAqIEBwYXJhbSB0cmFjZXIgQSB0cmFjZXIgb2JqZWN0LlxuICAgKiBAcGFyYW0gbmFtZSBUaGUgZGlzcGxheWVkIG5hbWUgZm9yIHRoZSBuZXcgc3Bhbi5cbiAgICogQHBhcmFtIGtpbmQgVGhlIGtpbmQgb2YgbmV3IHNwYW4uXG4gICAqIEBwYXJhbSB0cmFjZUlkIFRoZSB0cmFjZSBJZC5cbiAgICogQHBhcmFtIHBhcmVudFNwYW5JZCBUaGUgaWQgb2YgdGhlIHBhcmVudCBzcGFuLCBvciBlbXB0eSBpZiB0aGUgbmV3IHNwYW4gaXNcbiAgICogICAgIGEgcm9vdCBzcGFuLlxuICAgKiBAcGFyYW0gdHJhY2VTdGF0ZSBBbiBvcHRpb25hbCB0cmFjZVN0YXRlLlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgdHJhY2VyOiB0eXBlcy5UcmFjZXJCYXNlLFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBraW5kOiB0eXBlcy5TcGFuS2luZCxcbiAgICB0cmFjZUlkOiBzdHJpbmcsXG4gICAgcGFyZW50U3BhbklkOiBzdHJpbmcsXG4gICAgdHJhY2VTdGF0ZT86IHR5cGVzLlRyYWNlU3RhdGVcbiAgKSB7XG4gICAgc3VwZXIodHJhY2VyKTtcbiAgICB0aGlzLnRyYWNlciA9IHRyYWNlcjtcbiAgICB0aGlzLnRyYWNlSWRMb2NhbCA9IHRyYWNlSWQ7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmtpbmQgPSBraW5kO1xuICAgIHRoaXMucGFyZW50U3BhbklkTG9jYWwgPSBwYXJlbnRTcGFuSWQ7XG4gICAgaWYgKHRyYWNlU3RhdGUpIHtcbiAgICAgIHRoaXMudHJhY2VTdGF0ZUxvY2FsID0gdHJhY2VTdGF0ZTtcbiAgICB9XG4gICAgdGhpcy5sb2dnZXIgPSB0cmFjZXIubG9nZ2VyIHx8IGxvZ2dlci5sb2dnZXIoKTtcbiAgICB0aGlzLmFjdGl2ZVRyYWNlUGFyYW1zID0gdHJhY2VyLmFjdGl2ZVRyYWNlUGFyYW1zO1xuICB9XG5cbiAgLyoqIFJldHVybnMgd2hldGhlciBhIHNwYW4gaXMgcm9vdCBvciBub3QuICovXG4gIGlzUm9vdFNwYW4oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKiogR2V0cyB0cmFjZSBpZCBmcm9tIHJvb3RzcGFuIGluc3RhbmNlLiAqL1xuICBnZXQgdHJhY2VJZCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnRyYWNlSWRMb2NhbDtcbiAgfVxuXG4gIC8qKiBHZXRzIHRyYWNlIHN0YXRlIGZyb20gcm9vdHNwYW4gaW5zdGFuY2UgKi9cbiAgZ2V0IHRyYWNlU3RhdGUoKTogdHlwZXMuVHJhY2VTdGF0ZSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMudHJhY2VTdGF0ZUxvY2FsO1xuICB9XG5cbiAgZ2V0IHBhcmVudFNwYW5JZCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnBhcmVudFNwYW5JZExvY2FsO1xuICB9XG59XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf-8;base64,