{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/utils.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/utils.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAWH,MAAM,eAAe,GAAG,GAAG,CAAC;AAC5B,MAAM,iBAAiB,GAAe;IACpC,KAAK,EAAE,IAAI;CACZ,CAAC;AAEF;;;;;GAKG;AACH,SAAgB,eAAe,CAAC,WAAyB;IACvD,OAAO,WAAW;SACf,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC;SACnB,IAAI,EAAE;SACN,IAAI,CAAC,eAAe,CAAC,CAAC;AAC3B,CAAC;AALD,0CAKC;AAED;;;;;GAKG;AACH,SAAgB,uBAAuB,CAAC,KAAa;IACnD,OAAO,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;AAClD,CAAC;AAFD,0DAEC;AAED,yEAAyE;AACzE,4DAA4D;AAC5D,wEAAwE;AACxE,2EAA2E;AAC3E,oCAAoC;AAEpC,oEAAoE;AACpE,SAAgB,0BAA0B;AACxC,kCAAkC;AAClC,GAAQ;IAER,OAAO,GAAG,IAAI,OAAO,GAAG,CAAC,MAAM,KAAK,QAAQ,CAAC;AAC/C,CAAC;AALD,gEAKC;AAED,iEAAiE;AACjE,SAAgB,uBAAuB;AACrC,kCAAkC;AAClC,GAAQ;IAER,OAAO,GAAG,IAAI,OAAO,GAAG,CAAC,MAAM,KAAK,UAAU,CAAC;AACjD,CAAC;AALD,0DAKC;AAED,kEAAkE;AAClE,SAAgB,wBAAwB;AACtC,kCAAkC;AAClC,GAAQ;IAER,OAAO,GAAG,IAAI,OAAO,GAAG,CAAC,IAAI,KAAK,QAAQ,CAAC;AAC7C,CAAC;AALD,4DAKC;AAED,+DAA+D;AAC/D,kCAAkC;AAClC,SAAgB,qBAAqB,CAAC,GAAQ;IAC5C,OAAO,GAAG,IAAI,OAAO,GAAG,CAAC,IAAI,KAAK,UAAU,CAAC;AAC/C,CAAC;AAFD,sDAEC;AAED,4DAA4D;AAC5D,kCAAkC;AAClC,SAAgB,kBAAkB,CAAC,GAAQ;IACzC,OAAO,GAAG,IAAI,OAAO,GAAG,CAAC,QAAQ,KAAK,UAAU,CAAC;AACnD,CAAC;AAFD,gDAEC","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LabelValue } from './export/types';\nimport {\n  LengthAttributeInterface,\n  LengthMethodInterface,\n  SizeAttributeInterface,\n  SizeMethodInterface,\n  ToValueInterface,\n} from './types';\n\nconst COMMA_SEPARATOR = ',';\nconst UNSET_LABEL_VALUE: LabelValue = {\n  value: null,\n};\n\n/**\n * Returns a string(comma separated) from the list of label values.\n *\n * @param labelValues The list of the label values.\n * @returns The hashed label values string.\n */\nexport function hashLabelValues(labelValues: LabelValue[]): string {\n  return labelValues\n    .map(lv => lv.value)\n    .sort()\n    .join(COMMA_SEPARATOR);\n}\n\n/**\n * Returns default label values.\n *\n * @param count The number of label values.\n * @returns The list of the label values.\n */\nexport function initializeDefaultLabels(count: number): LabelValue[] {\n  return new Array(count).fill(UNSET_LABEL_VALUE);\n}\n\n// TODO(mayurkale): Consider to use unknown type instead of any for below\n// functions, unknown type is available since TypeScript 3.0\n// Fact: unknown acts like a type-safe version of any by requiring us to\n// perform some type of checking before we can use the value of the unknown\n// element or any of its properties.\n\n// Checks if the specified collection is a LengthAttributeInterface.\nexport function isLengthAttributeInterface(\n  // tslint:disable-next-line:no-any\n  obj: any\n): obj is LengthAttributeInterface {\n  return obj && typeof obj.length === 'number';\n}\n\n// Checks if the specified collection is a LengthMethodInterface.\nexport function isLengthMethodInterface(\n  // tslint:disable-next-line:no-any\n  obj: any\n): obj is LengthMethodInterface {\n  return obj && typeof obj.length === 'function';\n}\n\n// Checks if the specified collection is a SizeAttributeInterface.\nexport function isSizeAttributeInterface(\n  // tslint:disable-next-line:no-any\n  obj: any\n): obj is SizeAttributeInterface {\n  return obj && typeof obj.size === 'number';\n}\n\n// Checks if the specified collection is a SizeMethodInterface.\n// tslint:disable-next-line:no-any\nexport function isSizeMethodInterface(obj: any): obj is SizeMethodInterface {\n  return obj && typeof obj.size === 'function';\n}\n\n// Checks if the specified callbackFn is a ToValueInterface.\n// tslint:disable-next-line:no-any\nexport function isToValueInterface(obj: any): obj is ToValueInterface {\n  return obj && typeof obj.getValue === 'function';\n}\n"]}