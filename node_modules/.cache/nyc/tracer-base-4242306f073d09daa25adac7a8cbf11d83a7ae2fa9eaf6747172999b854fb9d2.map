{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/tracer-base.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/tracer-base.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as uuid from 'uuid';\nimport * as logger from '../../common/console-logger';\nimport * as loggerTypes from '../../common/types';\nimport * as configTypes from '../config/types';\nimport { TraceParams } from '../config/types';\nimport { noopPropagation } from '../propagation/noop-propagation';\nimport { Propagation } from '../propagation/types';\nimport {\n  DEFAULT_SAMPLING_RATE,\n  SamplerBuilder,\n  TraceParamsBuilder,\n} from '../sampler/sampler';\nimport * as samplerTypes from '../sampler/types';\nimport { NoRecordRootSpan } from './no-record/no-record-root-span';\nimport { NoRecordSpan } from './no-record/no-record-span';\nimport { RootSpan } from './root-span';\nimport * as types from './types';\n\n/**\n * This class represents a tracer.\n */\nexport class CoreTracerBase implements types.TracerBase {\n  /** Indicates if the tracer is active */\n  private activeLocal: boolean;\n  /** A configuration for starting the tracer */\n  private config!: configTypes.TracerConfig;\n  /** A list of end span event listeners */\n  private eventListenersLocal: types.SpanEventListener[] = [];\n  /** Bit to represent whether trace is sampled or not. */\n  private readonly IS_SAMPLED = 0x1;\n  /** A sampler used to make sample decisions */\n  sampler!: samplerTypes.Sampler;\n  /** An object to log information */\n  logger: loggerTypes.Logger = logger.logger();\n  /** A configuration object for trace parameters */\n  activeTraceParams: TraceParams;\n\n  /** Constructs a new TraceImpl instance. */\n  constructor() {\n    this.activeLocal = false;\n    this.activeTraceParams = {};\n  }\n\n  /** A propagation instance */\n  get propagation(): Propagation {\n    if (this.config && this.config.propagation) {\n      return this.config.propagation;\n    }\n    return noopPropagation;\n  }\n\n  /** Sets the current root span. */\n  setCurrentRootSpan(root: types.Span) {\n    // no-op, this is only required in case of tracer with cls.\n  }\n\n  /**\n   * Starts a tracer.\n   * @param config A tracer configuration object to start a tracer.\n   */\n  start(config: configTypes.TracerConfig): this {\n    this.activeLocal = true;\n    this.config = config;\n    this.logger = this.config.logger || logger.logger();\n    this.sampler = SamplerBuilder.getSampler(\n      config.samplingRate || DEFAULT_SAMPLING_RATE\n    );\n    if (config.traceParams) {\n      this.activeTraceParams.numberOfAnnontationEventsPerSpan = TraceParamsBuilder.getNumberOfAnnotationEventsPerSpan(\n        config.traceParams\n      );\n      this.activeTraceParams.numberOfAttributesPerSpan = TraceParamsBuilder.getNumberOfAttributesPerSpan(\n        config.traceParams\n      );\n      this.activeTraceParams.numberOfMessageEventsPerSpan = TraceParamsBuilder.getNumberOfMessageEventsPerSpan(\n        config.traceParams\n      );\n      this.activeTraceParams.numberOfLinksPerSpan = TraceParamsBuilder.getNumberOfLinksPerSpan(\n        config.traceParams\n      );\n    }\n    return this;\n  }\n\n  /** Stops the tracer. */\n  stop(): this {\n    this.activeLocal = false;\n    return this;\n  }\n\n  /** Gets the list of event listeners. */\n  get eventListeners(): types.SpanEventListener[] {\n    return this.eventListenersLocal;\n  }\n\n  /** Indicates if the tracer is active or not. */\n  get active(): boolean {\n    return this.activeLocal;\n  }\n\n  /**\n   * Starts a root span.\n   * @param options A TraceOptions object to start a root span.\n   * @param fn A callback function to run after starting a root span.\n   */\n  startRootSpan<T>(\n    options: types.TraceOptions,\n    fn: (root: types.Span) => T\n  ): T {\n    const spanContext: types.SpanContext = options.spanContext || {\n      spanId: '',\n      traceId: uuid\n        .v4()\n        .split('-')\n        .join(''),\n    };\n    const parentSpanId = spanContext.spanId;\n    const traceId = spanContext.traceId;\n    const name = options.name || 'span';\n    const kind = options.kind || types.SpanKind.UNSPECIFIED;\n    const traceState = spanContext.traceState;\n\n    // Tracer is active\n    if (this.active) {\n      const sampleDecision = this.makeSamplingDecision(options, traceId);\n      // Sampling is on\n      if (sampleDecision) {\n        const rootSpan = new RootSpan(\n          this,\n          name,\n          kind,\n          traceId,\n          parentSpanId,\n          traceState\n        );\n        // Add default attributes\n        const defaultAttributes = this.config && this.config.defaultAttributes;\n        if (defaultAttributes) {\n          Object.keys(defaultAttributes).forEach(key => {\n            rootSpan.addAttribute(key, defaultAttributes[key]);\n          });\n        }\n        rootSpan.start();\n        return fn(rootSpan);\n      }\n      // Sampling is off\n      this.logger.debug('Sampling is off, starting new no record root span');\n    } else {\n      // Tracer is inactive\n      this.logger.debug('Tracer is inactive, starting new no record root span');\n    }\n\n    const noRecordRootSpan = new NoRecordRootSpan(\n      this,\n      name,\n      kind,\n      traceId,\n      parentSpanId,\n      traceState\n    );\n    return fn(noRecordRootSpan);\n  }\n\n  /** Notifies listeners of the span start. */\n  onStartSpan(span: types.Span): void {\n    if (!this.active) return;\n    this.notifyStartSpan(span);\n  }\n\n  /** Notifies listeners of the span end. */\n  onEndSpan(span: types.Span): void {\n    if (!this.active) return;\n    this.notifyEndSpan(span);\n  }\n\n  /**\n   * Registers an end span event listener.\n   * @param listener The listener to register.\n   */\n  registerSpanEventListener(listener: types.SpanEventListener) {\n    this.eventListenersLocal.push(listener);\n  }\n\n  /**\n   * Unregisters an end span event listener.\n   * @param listener The listener to unregister.\n   */\n  unregisterSpanEventListener(listener: types.SpanEventListener) {\n    const index = this.eventListenersLocal.indexOf(listener, 0);\n    if (index > -1) {\n      this.eventListeners.splice(index, 1);\n    }\n  }\n\n  private notifyStartSpan(span: types.Span) {\n    this.logger.debug('starting to notify listeners the start of spans');\n    for (const listener of this.eventListenersLocal) {\n      listener.onStartSpan(span);\n    }\n  }\n\n  private notifyEndSpan(span: types.Span) {\n    this.logger.debug('starting to notify listeners the end of spans');\n    for (const listener of this.eventListenersLocal) {\n      listener.onEndSpan(span);\n    }\n  }\n\n  /**\n   * Starts a span.\n   * @param [options] A SpanOptions object to start a child span.\n   */\n  startChildSpan(options?: types.SpanOptions): types.Span {\n    if (!options || !options.childOf) {\n      this.logger.debug(\n        'no current trace found - must start a new root span first'\n      );\n      return new NoRecordSpan(this);\n    }\n    const span = options.childOf.startChildSpan(options);\n\n    // Add default attributes\n    const defaultAttributes = this.config && this.config.defaultAttributes;\n    if (defaultAttributes) {\n      Object.keys(defaultAttributes).forEach(key => {\n        span.addAttribute(key, defaultAttributes[key]);\n      });\n    }\n    return span;\n  }\n\n  /** Determine whether to sample request or not. */\n  private makeSamplingDecision(\n    options: types.TraceOptions,\n    traceId: string\n  ): boolean {\n    // If users set a specific sampler in the TraceOptions, use it.\n    if (\n      options &&\n      options.samplingRate !== undefined &&\n      options.samplingRate !== null\n    ) {\n      return SamplerBuilder.getSampler(options.samplingRate).shouldSample(\n        traceId\n      );\n    }\n    let propagatedSample = null;\n    // if there is a context propagation, keep the decision\n    if (\n      options &&\n      options.spanContext &&\n      options.spanContext.options !== undefined\n    ) {\n      propagatedSample = (options.spanContext.options & this.IS_SAMPLED) !== 0;\n      return !!propagatedSample;\n    }\n    // default global sampler\n    return this.sampler.shouldSample(traceId);\n  }\n}\n"]}