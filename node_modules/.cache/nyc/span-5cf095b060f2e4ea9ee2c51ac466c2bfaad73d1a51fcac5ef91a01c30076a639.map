{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/span.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/span.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { noopLogger } from '../../common/noop-logger';\nimport { Logger } from '../../common/types';\nimport { Clock } from '../../internal/clock';\nimport { randomSpanId } from '../../internal/util';\nimport * as configTypes from '../config/types';\n\nimport { NoRecordSpan } from './no-record/no-record-span';\nimport * as types from './types';\n\nconst STATUS_OK = {\n  code: types.CanonicalCode.OK,\n};\n\n/** Defines a base model for spans. */\nexport class Span implements types.Span {\n  protected className: string;\n  /** The clock used to mesure the beginning and ending of a span */\n  private clock!: Clock;\n  /** Indicates if this span was started */\n  private startedLocal = false;\n  /** Indicates if this span was ended */\n  private endedLocal = false;\n  /** A list of child spans which are immediate, local children of this span */\n  private spansLocal: types.Span[];\n  /** The Span ID of this span */\n  readonly id: string;\n  /** A tracer object */\n  readonly tracer: types.TracerBase;\n  /** An object to log information to */\n  logger: Logger = noopLogger;\n  /** A set of attributes, each in the format [KEY]:[VALUE] */\n  attributes: types.Attributes = {};\n  /** A text annotation with a set of attributes. */\n  annotations: types.Annotation[] = [];\n  /** An event describing a message sent/received between Spans */\n  messageEvents: types.MessageEvent[] = [];\n  /** Pointers from the current span to another span */\n  links: types.Link[] = [];\n  /** If the parent span is in another process. */\n  remoteParent = false;\n  /** This span's root span.  If it's a root span, it will point to this */\n  root: Span;\n  /** This span's parent. If it's a root span, must be empty */\n  parentSpan?: Span;\n  /** The resource name of the span */\n  name = 'span';\n  /** Kind of span. */\n  kind: types.SpanKind = types.SpanKind.UNSPECIFIED;\n  /** A final status for this span */\n  status: types.Status = STATUS_OK;\n  /** Trace Parameters */\n  activeTraceParams: configTypes.TraceParams = {};\n\n  /** The number of dropped attributes. */\n  droppedAttributesCount = 0;\n  /** The number of dropped links. */\n  droppedLinksCount = 0;\n  /** The number of dropped annotations. */\n  droppedAnnotationsCount = 0;\n  /** The number of dropped message events. */\n  droppedMessageEventsCount = 0;\n\n  /** Constructs a new Span instance. */\n  constructor(tracer: types.TracerBase, parent?: Span) {\n    this.tracer = tracer;\n    this.className = this.constructor.name;\n    this.id = randomSpanId();\n    this.spansLocal = [];\n    if (parent) {\n      this.root = parent.root;\n      this.parentSpan = parent;\n      this.activeTraceParams = this.root.activeTraceParams;\n    } else {\n      this.root = this;\n    }\n    this.logger = (this.root && this.root.logger) || this.logger;\n  }\n\n  /** Returns whether a span is root or not. */\n  isRootSpan(): boolean {\n    return false;\n  }\n\n  /** Gets the trace ID. */\n  get traceId(): string {\n    return this.root.traceId;\n  }\n\n  /** Gets the trace state */\n  get traceState(): types.TraceState | undefined {\n    return this.root.traceState;\n  }\n\n  /**\n   * Gets the ID of the parent span.\n   * RootSpan doesn't have a parentSpan but it override this method.\n   */\n  get parentSpanId(): string {\n    if (!this.parentSpan) {\n      return 'no-parent';\n    }\n    return this.parentSpan.id;\n  }\n\n  /** Indicates if span was started. */\n  get started(): boolean {\n    return this.startedLocal;\n  }\n\n  /** Indicates if span was ended. */\n  get ended(): boolean {\n    return this.endedLocal;\n  }\n\n  /**\n   * Gives a timestamp that indicates the span's start time in RFC3339 UTC\n   * \"Zulu\" format.\n   */\n  get startTime(): Date {\n    if (!this.clock) {\n      this.logger.debug('calling startTime() on null clock');\n      return new Date();\n    }\n\n    return this.clock.startTime;\n  }\n\n  /** Recursively gets the descendant spans. */\n  allDescendants(): types.Span[] {\n    return this.spansLocal.reduce((acc: types.Span[], cur) => {\n      acc.push(cur);\n      const desc = cur.allDescendants();\n      acc = acc.concat(desc);\n      return acc;\n    }, []);\n  }\n\n  /** The list of immediate child spans. */\n  get spans(): types.Span[] {\n    return this.spansLocal;\n  }\n\n  /** The number of direct children. */\n  get numberOfChildren(): number {\n    return this.spansLocal.length;\n  }\n\n  /**\n   * Gives a timestamp that indicates the span's end time in RFC3339 UTC\n   * \"Zulu\" format.\n   */\n  get endTime(): Date {\n    if (!this.clock) {\n      this.logger.debug('calling endTime() on null clock');\n      return new Date();\n    }\n\n    return this.clock.endTime;\n  }\n\n  /**\n   * Gets the duration of the clock.\n   */\n  get duration(): number {\n    if (!this.clock) {\n      this.logger.debug('calling duration() on null clock');\n      return 0;\n    }\n\n    return this.clock.duration;\n  }\n\n  /** Gives the TraceContext of the span. */\n  get spanContext(): types.SpanContext {\n    return {\n      traceId: this.traceId,\n      spanId: this.id,\n      options: 0x1, // always traced\n      traceState: this.traceState,\n    };\n  }\n\n  /**\n   * Adds an atribute to the span.\n   * @param key Describes the value added.\n   * @param value The result of an operation. If the value is a typeof object\n   *     it has to be JSON.stringify-able, cannot contain circular dependencies.\n   */\n  addAttribute(key: string, value: string | number | boolean | object) {\n    if (this.attributes[key]) {\n      delete this.attributes[key];\n    }\n\n    if (\n      Object.keys(this.attributes).length >=\n      this.activeTraceParams.numberOfAttributesPerSpan!\n    ) {\n      this.droppedAttributesCount++;\n      const attributeKeyToDelete = Object.keys(this.attributes).shift();\n      if (attributeKeyToDelete) {\n        delete this.attributes[attributeKeyToDelete];\n      }\n    }\n    const serializedValue =\n      typeof value === 'object' ? JSON.stringify(value) : value;\n    this.attributes[key] = serializedValue;\n  }\n\n  /**\n   * Adds an annotation to the span.\n   * @param description Describes the event.\n   * @param attributes A set of attributes on the annotation.\n   * @param timestamp A time, in milliseconds. Defaults to Date.now()\n   */\n  addAnnotation(\n    description: string,\n    attributes: types.Attributes = {},\n    timestamp = Date.now()\n  ) {\n    if (\n      this.annotations.length >=\n      this.activeTraceParams.numberOfAnnontationEventsPerSpan!\n    ) {\n      this.annotations.shift();\n      this.droppedAnnotationsCount++;\n    }\n    this.annotations.push({ description, attributes, timestamp });\n  }\n\n  /**\n   * Adds a link to the span.\n   * @param traceId The trace ID for a trace within a project.\n   * @param spanId The span ID for a span within a trace.\n   * @param type The relationship of the current span relative to the linked.\n   * @param attributes A set of attributes on the link.\n   */\n  addLink(\n    traceId: string,\n    spanId: string,\n    type: types.LinkType,\n    attributes: types.Attributes = {}\n  ) {\n    if (this.links.length >= this.activeTraceParams.numberOfLinksPerSpan!) {\n      this.links.shift();\n      this.droppedLinksCount++;\n    }\n\n    this.links.push({ traceId, spanId, type, attributes });\n  }\n\n  /**\n   * Adds a message event to the span.\n   * @param type The type of message event.\n   * @param id An identifier for the message event.\n   * @param timestamp A time in milliseconds. Defaults to Date.now()\n   * @param uncompressedSize The number of uncompressed bytes sent or received\n   * @param compressedSize The number of compressed bytes sent or received. If\n   *     zero or undefined, assumed to be the same size as uncompressed.\n   */\n  addMessageEvent(\n    type: types.MessageEventType,\n    id: number,\n    timestamp = Date.now(),\n    uncompressedSize?: number,\n    compressedSize?: number\n  ) {\n    if (\n      this.messageEvents.length >=\n      this.activeTraceParams.numberOfMessageEventsPerSpan!\n    ) {\n      this.messageEvents.shift();\n      this.droppedMessageEventsCount++;\n    }\n\n    this.messageEvents.push({\n      type,\n      id,\n      timestamp,\n      uncompressedSize,\n      compressedSize,\n    });\n  }\n\n  /**\n   * Sets a status to the span.\n   * @param code The canonical status code.\n   * @param message optional A developer-facing error message.\n   */\n  setStatus(code: types.CanonicalCode, message?: string) {\n    this.status = { code, message };\n  }\n\n  /** Starts the span. */\n  start() {\n    if (this.started) {\n      this.logger.debug(\n        'calling %s.start() on already started %s %o',\n        this.className,\n        this.className,\n        { id: this.id, name: this.name, type: this.kind }\n      );\n      return;\n    }\n    // start child span's clock from root's current time to preserve integrity.\n    if (this.parentSpan) {\n      this.clock = new Clock(this.parentSpan.clock.currentDate);\n    } else {\n      this.clock = new Clock();\n    }\n    this.startedLocal = true;\n    this.logger.debug('starting %s  %o', this.className, {\n      traceId: this.traceId,\n      id: this.id,\n      name: this.name,\n      parentSpanId: this.parentSpanId,\n      traceState: this.traceState,\n    });\n\n    if (this.isRootSpan()) this.tracer.setCurrentRootSpan(this);\n    this.tracer.onStartSpan(this);\n  }\n\n  /** Ends the span and all of its children, recursively. */\n  end(): void {\n    if (this.ended) {\n      this.logger.debug(\n        'calling %s.end() on already ended %s %o',\n        this.className,\n        this.className,\n        { id: this.id, name: this.name, type: this.kind }\n      );\n      return;\n    }\n    if (!this.started) {\n      this.logger.error(\n        'calling %s.end() on un-started %s %o',\n        this.className,\n        this.className,\n        { id: this.id, name: this.name, type: this.kind }\n      );\n      return;\n    }\n    this.startedLocal = false;\n    this.endedLocal = true;\n    this.clock.end();\n\n    // TODO: Should ending a span force its children to end by default?\n    // Issue: https://github.com/open-telemetry/opentelemetry-node/issues/4\n    for (const span of this.spansLocal) {\n      if (!span.ended && span.started) {\n        span.truncate();\n      }\n    }\n\n    this.tracer.onEndSpan(this);\n  }\n\n  /** Forces the span to end. */\n  truncate() {\n    this.end();\n    this.logger.debug('truncating %s  %o', this.className, {\n      id: this.id,\n      name: this.name,\n    });\n  }\n\n  /**\n   * Starts a new child span.\n   * @param [options] A SpanOptions object to start a child span.\n   */\n  startChildSpan(options?: types.SpanOptions): types.Span {\n    if (this.ended) {\n      this.logger.debug(\n        'calling %s.startSpan() on ended %s %o',\n        this.className,\n        this.className,\n        { id: this.id, name: this.name, kind: this.kind }\n      );\n      return new NoRecordSpan(this.tracer);\n    }\n    if (!this.started) {\n      this.logger.debug(\n        'calling %s.startSpan() on un-started %s %o',\n        this.className,\n        this.className,\n        { id: this.id, name: this.name, kind: this.kind }\n      );\n      return new NoRecordSpan(this.tracer);\n    }\n\n    const child = new Span(this.tracer, this);\n    if (options && options.name) child.name = options.name;\n    if (options && options.kind) child.kind = options.kind;\n\n    child.start();\n    this.spansLocal.push(child);\n    return child;\n  }\n}\n"]}