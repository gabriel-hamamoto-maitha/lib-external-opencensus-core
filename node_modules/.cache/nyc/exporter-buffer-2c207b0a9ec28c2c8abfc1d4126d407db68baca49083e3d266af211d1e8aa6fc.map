{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/exporters/exporter-buffer.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/exporters/exporter-buffer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as logger from '../common/console-logger';\nimport * as loggerTypes from '../common/types';\nimport * as configTypes from '../trace/config/types';\nimport * as modelTypes from '../trace/model/types';\nimport * as types from './types';\n\nconst DEFAULT_BUFFER_SIZE = 100;\nconst DEFAULT_BUFFER_TIMEOUT = 20000;\n\n/** Controls the sending of traces to exporters. */\nexport class ExporterBuffer {\n  /** The service to send the collected spans. */\n  private exporter: types.Exporter;\n  /** Maximum size of a buffer. */\n  private bufferSize: number;\n  /** Max time for a buffer can wait before being sent */\n  private bufferTimeout: number;\n  /** Manage when the buffer timeout needs to be reseted */\n  private resetTimeout = false;\n  /** Indicates when the buffer timeout is running */\n  private bufferTimeoutInProgress = false;\n  /** An object to log information to */\n  private logger: loggerTypes.Logger;\n  /** Trace queue of a buffer */\n  private queue: modelTypes.Span[] = [];\n\n  /**\n   * Constructs a new Buffer instance.\n   * @param exporter The service to send the collected spans.\n   * @param config A buffer configuration object to create a buffer.\n   */\n  constructor(exporter: types.Exporter, config: configTypes.BufferConfig) {\n    this.exporter = exporter;\n    this.logger = config.logger || logger.logger();\n    this.bufferSize = isNaN(Number(config.bufferSize))\n      ? DEFAULT_BUFFER_SIZE\n      : Number(config.bufferSize);\n    this.bufferTimeout = isNaN(Number(config.bufferTimeout))\n      ? DEFAULT_BUFFER_TIMEOUT\n      : Number(config.bufferTimeout);\n    return this;\n  }\n\n  /**\n   * Set the buffer size value.\n   * @param bufferSize The new buffer size.\n   */\n  setBufferSize(bufferSize: number) {\n    this.bufferSize = bufferSize;\n    return this;\n  }\n\n  getBufferSize(): number {\n    return this.bufferSize;\n  }\n\n  getQueue(): modelTypes.Span[] {\n    return this.queue;\n  }\n\n  /**\n   * Add a span in the buffer.\n   * @param span Span to be added in the buffer.\n   */\n  addToBuffer(span: modelTypes.Span) {\n    this.queue.push(span);\n    this.logger.debug('ExporterBuffer: added new span');\n\n    if (this.queue.length > this.bufferSize) {\n      this.flush();\n    }\n\n    if (this.bufferTimeoutInProgress) {\n      this.resetBufferTimeout();\n    } else {\n      this.setBufferTimeout();\n    }\n\n    return this;\n  }\n\n  /** Reset the buffer timeout */\n  private resetBufferTimeout() {\n    this.logger.debug('ExporterBuffer: reset timeout');\n    this.resetTimeout = true;\n  }\n\n  /** Start the buffer timeout, when finished calls flush method */\n  private setBufferTimeout() {\n    this.logger.debug('ExporterBuffer: set timeout');\n    this.bufferTimeoutInProgress = true;\n\n    const timer = setTimeout(() => {\n      if (this.queue.length === 0) {\n        return;\n      }\n\n      if (this.resetTimeout) {\n        this.resetTimeout = false;\n        this.setBufferTimeout();\n      } else {\n        this.bufferTimeoutInProgress = false;\n        this.flush();\n      }\n    }, this.bufferTimeout);\n    // Don't let this timer be the only thing keeping the process alive\n    timer.unref();\n  }\n\n  /** Send the trace queue to all exporters */\n  private flush() {\n    this.exporter.publish(this.queue);\n    this.queue = [];\n    return this;\n  }\n}\n"]}