{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-tagger.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-tagger.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport { TagMap } from '../src';\nimport * as cls from '../src/internal/cls';\nimport * as tagger from '../src/tags/tagger';\n\nconst contextManager = cls.getNamespace();\n\ndescribe('tagger()', () => {\n  const tags1 = new TagMap();\n  tags1.set({ name: 'key1' }, { value: 'value1' });\n  tags1.set({ name: 'key2' }, { value: 'value2' });\n\n  const tags2 = new TagMap();\n  tags2.set({ name: 'key3' }, { value: 'value3' });\n  tags2.set({ name: 'key4' }, { value: 'value4' });\n\n  const tags3 = new TagMap();\n  tags3.set({ name: 'key2' }, { value: 'value3' });\n  tags3.set({ name: 'key4' }, { value: 'value4' });\n\n  const tags4 = new TagMap();\n  tags4.set({ name: 'key1' }, { value: 'value4' });\n  tags4.set({ name: 'key4' }, { value: 'value5' });\n  tags4.set({ name: 'key6' }, { value: 'value6' });\n\n  const expectedMergedTags = new TagMap();\n  expectedMergedTags.set({ name: 'key1' }, { value: 'value1' });\n  expectedMergedTags.set({ name: 'key2' }, { value: 'value2' });\n  expectedMergedTags.set({ name: 'key3' }, { value: 'value3' });\n  expectedMergedTags.set({ name: 'key4' }, { value: 'value4' });\n\n  const expectedTagsFrom1n3 = new TagMap();\n  expectedTagsFrom1n3.set({ name: 'key1' }, { value: 'value1' });\n  expectedTagsFrom1n3.set({ name: 'key2' }, { value: 'value3' });\n  expectedTagsFrom1n3.set({ name: 'key4' }, { value: 'value4' });\n\n  const expectedTagsFrom1n3n4 = new TagMap();\n  expectedTagsFrom1n3n4.set({ name: 'key1' }, { value: 'value4' });\n  expectedTagsFrom1n3n4.set({ name: 'key2' }, { value: 'value3' });\n  expectedTagsFrom1n3n4.set({ name: 'key4' }, { value: 'value5' });\n  expectedTagsFrom1n3n4.set({ name: 'key6' }, { value: 'value6' });\n\n  it('should return empty current tag context', () => {\n    tagger.withTagContext(contextManager, tagger.EMPTY_TAG_MAP, () => {\n      assert.deepStrictEqual(\n        tagger.getCurrentTagContext(contextManager),\n        tagger.EMPTY_TAG_MAP\n      );\n    });\n  });\n\n  it('should set current tag context', () => {\n    tagger.withTagContext(contextManager, tags1, () => {\n      assert.deepStrictEqual(\n        tagger.getCurrentTagContext(contextManager),\n        tags1\n      );\n    });\n    assert.deepStrictEqual(\n      tagger.getCurrentTagContext(contextManager),\n      tagger.EMPTY_TAG_MAP\n    );\n  });\n\n  it('should set nested current tag context', () => {\n    tagger.withTagContext(contextManager, tags1, () => {\n      assert.deepStrictEqual(\n        tagger.getCurrentTagContext(contextManager),\n        tags1\n      );\n\n      tagger.withTagContext(contextManager, tags2, () => {\n        assert.deepStrictEqual(\n          tagger.getCurrentTagContext(contextManager),\n          expectedMergedTags\n        );\n      });\n      assert.deepStrictEqual(\n        tagger.getCurrentTagContext(contextManager),\n        tags1\n      );\n    });\n    assert.deepStrictEqual(\n      tagger.getCurrentTagContext(contextManager),\n      tagger.EMPTY_TAG_MAP\n    );\n  });\n\n  it('should resolve tag conflicts', () => {\n    tagger.withTagContext(contextManager, tags1, () => {\n      assert.deepStrictEqual(\n        tagger.getCurrentTagContext(contextManager),\n        tags1\n      );\n\n      tagger.withTagContext(contextManager, tags3, () => {\n        assert.deepStrictEqual(\n          tagger.getCurrentTagContext(contextManager),\n          expectedTagsFrom1n3\n        );\n\n        tagger.withTagContext(contextManager, tags4, () => {\n          assert.deepStrictEqual(\n            tagger.getCurrentTagContext(contextManager),\n            expectedTagsFrom1n3n4\n          );\n        });\n      });\n      assert.deepStrictEqual(\n        tagger.getCurrentTagContext(contextManager),\n        tags1\n      );\n    });\n    assert.deepStrictEqual(\n      tagger.getCurrentTagContext(contextManager),\n      tagger.EMPTY_TAG_MAP\n    );\n  });\n\n  it('should clear current tag context', () => {\n    tagger.withTagContext(contextManager, tags1, () => {\n      assert.deepStrictEqual(\n        tagger.getCurrentTagContext(contextManager),\n        tags1\n      );\n      tagger.clear(contextManager);\n      assert.deepStrictEqual(\n        tagger.getCurrentTagContext(contextManager),\n        tagger.EMPTY_TAG_MAP\n      );\n    });\n    assert.deepStrictEqual(\n      tagger.getCurrentTagContext(contextManager),\n      tagger.EMPTY_TAG_MAP\n    );\n  });\n});\n"]}