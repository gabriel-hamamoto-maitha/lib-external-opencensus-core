{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/propagation/variant-encoding.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/propagation/variant-encoding.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,4EAA4E;AAC5E,mEAAmE;AACnE,MAAM,GAAG,GAAG,IAAI,CAAC;AAEjB,oDAAoD;AACpD,MAAM,IAAI,GAAG,IAAI,CAAC;AAElB;;;GAGG;AACH,SAAgB,YAAY,CAAC,KAAa;IACxC,MAAM,GAAG,GAAa,EAAE,CAAC;IACzB,GAAG;QACD,MAAM,IAAI,GAAG,KAAK,GAAG,IAAI,CAAC;QAC1B,KAAK,MAAM,CAAC,CAAC;QACb,MAAM,CAAC,GAAG,IAAI,GAAG,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACzC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;KACb,QAAQ,KAAK,KAAK,CAAC,EAAE;IACtB,OAAO,GAAG,CAAC;AACb,CAAC;AATD,oCASC;AAED;;;;GAIG;AACH,SAAgB,YAAY,CAAC,MAAc,EAAE,MAAc;IACzD,IAAI,GAAG,GAAG,CAAC,CAAC;IACZ,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,IAAI,WAAW,CAAC;IAChB,IAAI,OAAO,GAAG,MAAM,CAAC;IACrB,GAAG;QACD,IAAI,KAAK,IAAI,EAAE,EAAE;YACf,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;SACpC;QACD,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAC;QACzC,GAAG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,KAAK,CAAC;QACrC,KAAK,IAAI,CAAC,CAAC;KACZ,QAAQ,CAAC,WAAW,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE;IACpC,OAAO,GAAG,CAAC;AACb,CAAC;AAdD,oCAcC","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// The MSB (most significant bit) indicates whether we've reached the end of\n// the number. Set means there is more than one byte in the varint.\nconst MSB = 0x80;\n\n// The REST indicates the lower 7 bits of each byte.\nconst REST = 0x7f;\n\n/**\n * Encodes a number in a variable-length encoding, 7 bits per byte.\n * @param value The input number.\n */\nexport function EncodeVarint(value: number) {\n  const ret: number[] = [];\n  do {\n    const bits = value & REST;\n    value >>>= 7;\n    const b = bits + (value !== 0 ? MSB : 0);\n    ret.push(b);\n  } while (value !== 0);\n  return ret;\n}\n\n/**\n * Decodes a varint from buffer.\n * @param buffer The source buffer.\n * @param offset The offset within buffer.\n */\nexport function DecodeVarint(buffer: Buffer, offset: number) {\n  let ret = 0;\n  let shift = 0;\n  let currentByte;\n  let counter = offset;\n  do {\n    if (shift >= 32) {\n      throw new Error('varint too long');\n    }\n    currentByte = buffer.readInt8(counter++);\n    ret |= (currentByte & REST) << shift;\n    shift += 7;\n  } while ((currentByte & MSB) !== 0);\n  return ret;\n}\n"]}