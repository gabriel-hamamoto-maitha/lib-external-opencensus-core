"use strict";/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_23vo0f3ny8(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-view.ts";var hash="574edda37d0bad9da14dde52cad37c56839fe42d";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-view.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:15},end:{line:18,column:32}},"2":{start:{line:19,column:14},end:{line:19,column:31}},"3":{start:{line:20,column:20},end:{line:20,column:54}},"4":{start:{line:21,column:16},end:{line:21,column:54}},"5":{start:{line:22,column:16},end:{line:22,column:45}},"6":{start:{line:24,column:16},end:{line:24,column:17}},"7":{start:{line:26,column:4},end:{line:26,column:64}},"8":{start:{line:29,column:22},end:{line:29,column:60}},"9":{start:{line:29,column:50},end:{line:29,column:59}},"10":{start:{line:30,column:4},end:{line:30,column:62}},"11":{start:{line:31,column:4},end:{line:31,column:56}},"12":{start:{line:32,column:25},end:{line:32,column:50}},"13":{start:{line:33,column:4},end:{line:33,column:75}},"14":{start:{line:34,column:41},end:{line:36,column:42}},"15":{start:{line:35,column:22},end:{line:35,column:55}},"16":{start:{line:36,column:31},end:{line:36,column:41}},"17":{start:{line:37,column:4},end:{line:37,column:108}},"18":{start:{line:38,column:33},end:{line:38,column:88}},"19":{start:{line:39,column:4},end:{line:39,column:91}},"20":{start:{line:42,column:4},end:{line:42,column:58}},"21":{start:{line:43,column:28},end:{line:43,column:55}},"22":{start:{line:44,column:4},end:{line:58,column:5}},"23":{start:{line:46,column:24},end:{line:46,column:70}},"24":{start:{line:46,column:60},end:{line:46,column:69}},"25":{start:{line:47,column:12},end:{line:47,column:59}},"26":{start:{line:48,column:12},end:{line:48,column:18}},"27":{start:{line:50,column:12},end:{line:50,column:77}},"28":{start:{line:51,column:12},end:{line:51,column:18}},"29":{start:{line:53,column:12},end:{line:53,column:68}},"30":{start:{line:54,column:12},end:{line:54,column:18}},"31":{start:{line:56,column:12},end:{line:56,column:97}},"32":{start:{line:57,column:12},end:{line:57,column:18}},"33":{start:{line:60,column:0},end:{line:528,column:3}},"34":{start:{line:61,column:20},end:{line:65,column:5}},"35":{start:{line:66,column:33},end:{line:87,column:5}},"36":{start:{line:88,column:4},end:{line:94,column:7}},"37":{start:{line:89,column:8},end:{line:93,column:11}},"38":{start:{line:90,column:28},end:{line:90,column:72}},"39":{start:{line:91,column:25},end:{line:91,column:135}},"40":{start:{line:92,column:12},end:{line:92,column:63}},"41":{start:{line:95,column:4},end:{line:107,column:7}},"42":{start:{line:96,column:8},end:{line:106,column:11}},"43":{start:{line:97,column:28},end:{line:101,column:13}},"44":{start:{line:102,column:12},end:{line:105,column:50}},"45":{start:{line:103,column:29},end:{line:103,column:139}},"46":{start:{line:104,column:16},end:{line:104,column:67}},"47":{start:{line:108,column:4},end:{line:154,column:7}},"48":{start:{line:109,column:34},end:{line:109,column:59}},"49":{start:{line:110,column:33},end:{line:110,column:42}},"50":{start:{line:111,column:24},end:{line:111,column:44}},"51":{start:{line:112,column:24},end:{line:112,column:44}},"52":{start:{line:113,column:24},end:{line:113,column:42}},"53":{start:{line:114,column:24},end:{line:114,column:44}},"54":{start:{line:115,column:26},end:{line:115,column:49}},"55":{start:{line:116,column:26},end:{line:116,column:49}},"56":{start:{line:117,column:26},end:{line:117,column:49}},"57":{start:{line:118,column:21},end:{line:118,column:39}},"58":{start:{line:119,column:8},end:{line:119,column:37}},"59":{start:{line:120,column:8},end:{line:120,column:37}},"60":{start:{line:121,column:8},end:{line:132,column:9}},"61":{start:{line:122,column:12},end:{line:131,column:15}},"62":{start:{line:123,column:29},end:{line:123,column:158}},"63":{start:{line:124,column:39},end:{line:124,column:41}},"64":{start:{line:125,column:16},end:{line:130,column:17}},"65":{start:{line:126,column:20},end:{line:126,column:47}},"66":{start:{line:127,column:40},end:{line:127,column:58}},"67":{start:{line:128,column:20},end:{line:128,column:62}},"68":{start:{line:129,column:20},end:{line:129,column:114}},"69":{start:{line:133,column:8},end:{line:145,column:11}},"70":{start:{line:134,column:45},end:{line:134,column:76}},"71":{start:{line:135,column:25},end:{line:135,column:163}},"72":{start:{line:136,column:35},end:{line:136,column:37}},"73":{start:{line:137,column:12},end:{line:141,column:13}},"74":{start:{line:138,column:16},end:{line:138,column:43}},"75":{start:{line:139,column:36},end:{line:139,column:54}},"76":{start:{line:140,column:16},end:{line:140,column:58}},"77":{start:{line:142,column:25},end:{line:142,column:65}},"78":{start:{line:143,column:12},end:{line:143,column:60}},"79":{start:{line:144,column:12},end:{line:144,column:68}},"80":{start:{line:146,column:21},end:{line:146,column:131}},"81":{start:{line:147,column:8},end:{line:153,column:11}},"82":{start:{line:148,column:27},end:{line:148,column:45}},"83":{start:{line:149,column:12},end:{line:149,column:43}},"84":{start:{line:150,column:32},end:{line:150,column:54}},"85":{start:{line:151,column:12},end:{line:151,column:56}},"86":{start:{line:152,column:12},end:{line:152,column:54}},"87":{start:{line:155,column:4},end:{line:499,column:7}},"88":{start:{line:156,column:29},end:{line:156,column:43}},"89":{start:{line:157,column:26},end:{line:157,column:34}},"90":{start:{line:158,column:27},end:{line:158,column:62}},"91":{start:{line:159,column:30},end:{line:159,column:43}},"92":{start:{line:160,column:35},end:{line:160,column:72}},"93":{start:{line:161,column:34},end:{line:161,column:59}},"94":{start:{line:162,column:24},end:{line:162,column:33}},"95":{start:{line:163,column:24},end:{line:163,column:44}},"96":{start:{line:164,column:24},end:{line:164,column:44}},"97":{start:{line:165,column:24},end:{line:165,column:42}},"98":{start:{line:166,column:26},end:{line:166,column:49}},"99":{start:{line:167,column:26},end:{line:167,column:49}},"100":{start:{line:168,column:26},end:{line:168,column:49}},"101":{start:{line:169,column:26},end:{line:169,column:49}},"102":{start:{line:170,column:21},end:{line:170,column:39}},"103":{start:{line:171,column:8},end:{line:171,column:37}},"104":{start:{line:172,column:8},end:{line:172,column:37}},"105":{start:{line:173,column:23},end:{line:173,column:41}},"106":{start:{line:174,column:8},end:{line:174,column:39}},"107":{start:{line:175,column:8},end:{line:175,column:39}},"108":{start:{line:176,column:8},end:{line:239,column:9}},"109":{start:{line:177,column:25},end:{line:177,column:145}},"110":{start:{line:178,column:12},end:{line:181,column:13}},"111":{start:{line:179,column:36},end:{line:179,column:54}},"112":{start:{line:180,column:16},end:{line:180,column:58}},"113":{start:{line:182,column:12},end:{line:188,column:15}},"114":{start:{line:184,column:16},end:{line:184,column:50}},"115":{start:{line:184,column:39},end:{line:184,column:49}},"116":{start:{line:185,column:16},end:{line:185,column:47}},"117":{start:{line:185,column:33},end:{line:185,column:46}},"118":{start:{line:187,column:16},end:{line:187,column:59}},"119":{start:{line:189,column:12},end:{line:194,column:15}},"120":{start:{line:190,column:16},end:{line:190,column:46}},"121":{start:{line:191,column:16},end:{line:191,column:37}},"122":{start:{line:193,column:16},end:{line:193,column:65}},"123":{start:{line:195,column:47},end:{line:195,column:76}},"124":{start:{line:196,column:12},end:{line:238,column:15}},"125":{start:{line:197,column:16},end:{line:209,column:19}},"126":{start:{line:198,column:20},end:{line:198,column:42}},"127":{start:{line:199,column:20},end:{line:208,column:23}},"128":{start:{line:210,column:58},end:{line:210,column:68}},"129":{start:{line:211,column:16},end:{line:230,column:17}},"130":{start:{line:213,column:20},end:{line:215,column:23}},"131":{start:{line:214,column:24},end:{line:214,column:70}},"132":{start:{line:217,column:21},end:{line:230,column:17}},"133":{start:{line:219,column:20},end:{line:221,column:23}},"134":{start:{line:220,column:24},end:{line:220,column:70}},"135":{start:{line:224,column:20},end:{line:229,column:23}},"136":{start:{line:225,column:24},end:{line:225,column:50}},"137":{start:{line:226,column:24},end:{line:226,column:82}},"138":{start:{line:227,column:24},end:{line:227,column:84}},"139":{start:{line:228,column:24},end:{line:228,column:83}},"140":{start:{line:231,column:16},end:{line:237,column:19}},"141":{start:{line:232,column:20},end:{line:232,column:43}},"142":{start:{line:233,column:20},end:{line:236,column:23}},"143":{start:{line:240,column:8},end:{line:269,column:11}},"144":{start:{line:241,column:25},end:{line:241,column:146}},"145":{start:{line:242,column:24},end:{line:242,column:25}},"146":{start:{line:243,column:12},end:{line:247,column:13}},"147":{start:{line:244,column:16},end:{line:244,column:31}},"148":{start:{line:245,column:36},end:{line:245,column:54}},"149":{start:{line:246,column:16},end:{line:246,column:58}},"150":{start:{line:248,column:12},end:{line:268,column:15}},"151":{start:{line:249,column:39},end:{line:249,column:68}},"152":{start:{line:250,column:53},end:{line:250,column:63}},"153":{start:{line:251,column:16},end:{line:251,column:34}},"154":{start:{line:252,column:32},end:{line:252,column:38}},"155":{start:{line:253,column:45},end:{line:253,column:50}},"156":{start:{line:254,column:16},end:{line:254,column:37}},"157":{start:{line:255,column:16},end:{line:255,column:69}},"158":{start:{line:256,column:16},end:{line:256,column:71}},"159":{start:{line:257,column:16},end:{line:257,column:74}},"160":{start:{line:258,column:16},end:{line:258,column:70}},"161":{start:{line:259,column:16},end:{line:259,column:62}},"162":{start:{line:260,column:16},end:{line:266,column:19}},"163":{start:{line:267,column:16},end:{line:267,column:75}},"164":{start:{line:270,column:8},end:{line:377,column:11}},"165":{start:{line:271,column:30},end:{line:271,column:38}},"166":{start:{line:272,column:12},end:{line:274,column:15}},"167":{start:{line:273,column:16},end:{line:273,column:47}},"168":{start:{line:273,column:33},end:{line:273,column:46}},"169":{start:{line:275,column:12},end:{line:277,column:15}},"170":{start:{line:276,column:16},end:{line:276,column:37}},"171":{start:{line:278,column:12},end:{line:327,column:15}},"172":{start:{line:279,column:29},end:{line:279,column:150}},"173":{start:{line:280,column:28},end:{line:280,column:29}},"174":{start:{line:281,column:36},end:{line:281,column:68}},"175":{start:{line:282,column:16},end:{line:286,column:17}},"176":{start:{line:283,column:20},end:{line:283,column:35}},"177":{start:{line:284,column:40},end:{line:284,column:58}},"178":{start:{line:285,column:20},end:{line:285,column:75}},"179":{start:{line:287,column:39},end:{line:287,column:68}},"180":{start:{line:288,column:53},end:{line:288,column:63}},"181":{start:{line:289,column:16},end:{line:289,column:34}},"182":{start:{line:290,column:32},end:{line:290,column:38}},"183":{start:{line:291,column:45},end:{line:291,column:50}},"184":{start:{line:292,column:16},end:{line:292,column:37}},"185":{start:{line:293,column:16},end:{line:325,column:19}},"186":{start:{line:326,column:16},end:{line:326,column:75}},"187":{start:{line:328,column:12},end:{line:376,column:15}},"188":{start:{line:329,column:29},end:{line:329,column:150}},"189":{start:{line:330,column:28},end:{line:330,column:29}},"190":{start:{line:331,column:16},end:{line:335,column:17}},"191":{start:{line:332,column:20},end:{line:332,column:35}},"192":{start:{line:333,column:40},end:{line:333,column:58}},"193":{start:{line:334,column:20},end:{line:334,column:66}},"194":{start:{line:336,column:39},end:{line:336,column:68}},"195":{start:{line:337,column:53},end:{line:337,column:63}},"196":{start:{line:338,column:16},end:{line:338,column:34}},"197":{start:{line:339,column:32},end:{line:339,column:38}},"198":{start:{line:340,column:45},end:{line:340,column:50}},"199":{start:{line:341,column:16},end:{line:341,column:37}},"200":{start:{line:342,column:16},end:{line:374,column:19}},"201":{start:{line:375,column:16},end:{line:375,column:75}},"202":{start:{line:378,column:8},end:{line:433,column:11}},"203":{start:{line:379,column:25},end:{line:379,column:146}},"204":{start:{line:380,column:24},end:{line:380,column:25}},"205":{start:{line:381,column:12},end:{line:387,column:13}},"206":{start:{line:382,column:16},end:{line:382,column:31}},"207":{start:{line:383,column:36},end:{line:383,column:54}},"208":{start:{line:384,column:37},end:{line:384,column:55}},"209":{start:{line:385,column:16},end:{line:385,column:58}},"210":{start:{line:386,column:16},end:{line:386,column:61}},"211":{start:{line:388,column:12},end:{line:432,column:15}},"212":{start:{line:389,column:39},end:{line:389,column:68}},"213":{start:{line:390,column:16},end:{line:390,column:57}},"214":{start:{line:391,column:122},end:{line:391,column:132}},"215":{start:{line:392,column:16},end:{line:392,column:35}},"216":{start:{line:393,column:30},end:{line:393,column:37}},"217":{start:{line:394,column:43},end:{line:394,column:48}},"218":{start:{line:395,column:16},end:{line:395,column:37}},"219":{start:{line:396,column:16},end:{line:396,column:69}},"220":{start:{line:397,column:16},end:{line:397,column:71}},"221":{start:{line:398,column:16},end:{line:398,column:74}},"222":{start:{line:399,column:16},end:{line:399,column:70}},"223":{start:{line:400,column:16},end:{line:400,column:62}},"224":{start:{line:401,column:16},end:{line:407,column:19}},"225":{start:{line:408,column:16},end:{line:411,column:19}},"226":{start:{line:412,column:16},end:{line:412,column:35}},"227":{start:{line:413,column:16},end:{line:413,column:34}},"228":{start:{line:414,column:16},end:{line:414,column:47}},"229":{start:{line:415,column:16},end:{line:415,column:37}},"230":{start:{line:416,column:16},end:{line:416,column:69}},"231":{start:{line:417,column:16},end:{line:417,column:71}},"232":{start:{line:418,column:16},end:{line:418,column:74}},"233":{start:{line:419,column:16},end:{line:419,column:70}},"234":{start:{line:420,column:16},end:{line:420,column:62}},"235":{start:{line:421,column:16},end:{line:427,column:19}},"236":{start:{line:428,column:16},end:{line:431,column:19}},"237":{start:{line:434,column:8},end:{line:455,column:11}},"238":{start:{line:435,column:25},end:{line:435,column:139}},"239":{start:{line:436,column:12},end:{line:439,column:13}},"240":{start:{line:437,column:36},end:{line:437,column:54}},"241":{start:{line:438,column:16},end:{line:438,column:58}},"242":{start:{line:440,column:12},end:{line:454,column:15}},"243":{start:{line:441,column:39},end:{line:441,column:68}},"244":{start:{line:442,column:53},end:{line:442,column:63}},"245":{start:{line:443,column:16},end:{line:443,column:34}},"246":{start:{line:444,column:32},end:{line:444,column:38}},"247":{start:{line:445,column:45},end:{line:445,column:50}},"248":{start:{line:446,column:16},end:{line:446,column:37}},"249":{start:{line:447,column:16},end:{line:447,column:69}},"250":{start:{line:448,column:16},end:{line:448,column:71}},"251":{start:{line:449,column:16},end:{line:449,column:74}},"252":{start:{line:450,column:16},end:{line:450,column:70}},"253":{start:{line:451,column:16},end:{line:451,column:59}},"254":{start:{line:452,column:16},end:{line:452,column:45}},"255":{start:{line:453,column:16},end:{line:453,column:75}},"256":{start:{line:456,column:8},end:{line:479,column:11}},"257":{start:{line:457,column:25},end:{line:457,column:137}},"258":{start:{line:458,column:24},end:{line:458,column:25}},"259":{start:{line:459,column:12},end:{line:463,column:13}},"260":{start:{line:460,column:16},end:{line:460,column:31}},"261":{start:{line:461,column:36},end:{line:461,column:54}},"262":{start:{line:462,column:16},end:{line:462,column:58}},"263":{start:{line:464,column:12},end:{line:478,column:15}},"264":{start:{line:465,column:39},end:{line:465,column:68}},"265":{start:{line:466,column:53},end:{line:466,column:63}},"266":{start:{line:467,column:16},end:{line:467,column:34}},"267":{start:{line:468,column:32},end:{line:468,column:38}},"268":{start:{line:469,column:45},end:{line:469,column:50}},"269":{start:{line:470,column:16},end:{line:470,column:37}},"270":{start:{line:471,column:16},end:{line:471,column:69}},"271":{start:{line:472,column:16},end:{line:472,column:71}},"272":{start:{line:473,column:16},end:{line:473,column:74}},"273":{start:{line:474,column:16},end:{line:474,column:70}},"274":{start:{line:475,column:16},end:{line:475,column:59}},"275":{start:{line:476,column:16},end:{line:476,column:49}},"276":{start:{line:477,column:16},end:{line:477,column:75}},"277":{start:{line:480,column:8},end:{line:498,column:11}},"278":{start:{line:481,column:25},end:{line:481,column:144}},"279":{start:{line:482,column:12},end:{line:485,column:13}},"280":{start:{line:483,column:36},end:{line:483,column:54}},"281":{start:{line:484,column:16},end:{line:484,column:58}},"282":{start:{line:486,column:12},end:{line:497,column:15}},"283":{start:{line:487,column:39},end:{line:487,column:68}},"284":{start:{line:488,column:53},end:{line:488,column:63}},"285":{start:{line:489,column:16},end:{line:489,column:34}},"286":{start:{line:490,column:32},end:{line:490,column:38}},"287":{start:{line:491,column:45},end:{line:491,column:50}},"288":{start:{line:492,column:16},end:{line:492,column:74}},"289":{start:{line:493,column:16},end:{line:493,column:70}},"290":{start:{line:494,column:16},end:{line:494,column:59}},"291":{start:{line:495,column:16},end:{line:495,column:91}},"292":{start:{line:496,column:16},end:{line:496,column:62}},"293":{start:{line:500,column:4},end:{line:527,column:7}},"294":{start:{line:502,column:24},end:{line:502,column:44}},"295":{start:{line:503,column:24},end:{line:503,column:44}},"296":{start:{line:504,column:24},end:{line:504,column:42}},"297":{start:{line:505,column:26},end:{line:505,column:49}},"298":{start:{line:506,column:26},end:{line:506,column:49}},"299":{start:{line:507,column:21},end:{line:507,column:39}},"300":{start:{line:508,column:8},end:{line:508,column:37}},"301":{start:{line:509,column:8},end:{line:509,column:37}},"302":{start:{line:510,column:8},end:{line:514,column:11}},"303":{start:{line:511,column:12},end:{line:511,column:130}},"304":{start:{line:512,column:32},end:{line:512,column:54}},"305":{start:{line:513,column:12},end:{line:513,column:54}},"306":{start:{line:515,column:8},end:{line:520,column:11}},"307":{start:{line:516,column:12},end:{line:519,column:16}},"308":{start:{line:521,column:8},end:{line:523,column:11}},"309":{start:{line:522,column:12},end:{line:522,column:54}},"310":{start:{line:524,column:8},end:{line:526,column:11}},"311":{start:{line:525,column:12},end:{line:525,column:64}}},fnMap:{"0":{name:"isAlmostEqual",decl:{start:{line:25,column:9},end:{line:25,column:22}},loc:{start:{line:25,column:50},end:{line:27,column:1}},line:25},"1":{name:"assertDistributionData",decl:{start:{line:28,column:9},end:{line:28,column:31}},loc:{start:{line:28,column:58},end:{line:40,column:1}},line:28},"2":{name:"(anonymous_2)",decl:{start:{line:29,column:36},end:{line:29,column:37}},loc:{start:{line:29,column:50},end:{line:29,column:59}},line:29},"3":{name:"(anonymous_3)",decl:{start:{line:35,column:13},end:{line:35,column:14}},loc:{start:{line:35,column:22},end:{line:35,column:55}},line:35},"4":{name:"(anonymous_4)",decl:{start:{line:36,column:16},end:{line:36,column:17}},loc:{start:{line:36,column:31},end:{line:36,column:41}},line:36},"5":{name:"assertView",decl:{start:{line:41,column:9},end:{line:41,column:19}},loc:{start:{line:41,column:70},end:{line:59,column:1}},line:41},"6":{name:"(anonymous_6)",decl:{start:{line:46,column:46},end:{line:46,column:47}},loc:{start:{line:46,column:60},end:{line:46,column:69}},line:46},"7":{name:"(anonymous_7)",decl:{start:{line:60,column:21},end:{line:60,column:22}},loc:{start:{line:60,column:27},end:{line:528,column:1}},line:60},"8":{name:"(anonymous_8)",decl:{start:{line:88,column:29},end:{line:88,column:30}},loc:{start:{line:88,column:35},end:{line:94,column:5}},line:88},"9":{name:"(anonymous_9)",decl:{start:{line:89,column:47},end:{line:89,column:48}},loc:{start:{line:89,column:53},end:{line:93,column:9}},line:89},"10":{name:"(anonymous_10)",decl:{start:{line:95,column:29},end:{line:95,column:30}},loc:{start:{line:95,column:35},end:{line:107,column:5}},line:95},"11":{name:"(anonymous_11)",decl:{start:{line:96,column:57},end:{line:96,column:58}},loc:{start:{line:96,column:63},end:{line:106,column:9}},line:96},"12":{name:"(anonymous_12)",decl:{start:{line:102,column:26},end:{line:102,column:27}},loc:{start:{line:102,column:32},end:{line:105,column:13}},line:102},"13":{name:"(anonymous_13)",decl:{start:{line:108,column:36},end:{line:108,column:37}},loc:{start:{line:108,column:42},end:{line:154,column:5}},line:108},"14":{name:"(anonymous_14)",decl:{start:{line:122,column:117},end:{line:122,column:118}},loc:{start:{line:122,column:123},end:{line:131,column:13}},line:122},"15":{name:"(anonymous_15)",decl:{start:{line:133,column:51},end:{line:133,column:52}},loc:{start:{line:133,column:57},end:{line:145,column:9}},line:133},"16":{name:"(anonymous_16)",decl:{start:{line:147,column:74},end:{line:147,column:75}},loc:{start:{line:147,column:80},end:{line:153,column:9}},line:147},"17":{name:"(anonymous_17)",decl:{start:{line:155,column:28},end:{line:155,column:29}},loc:{start:{line:155,column:34},end:{line:499,column:5}},line:155},"18":{name:"(anonymous_18)",decl:{start:{line:182,column:23},end:{line:182,column:24}},loc:{start:{line:182,column:29},end:{line:188,column:13}},line:182},"19":{name:"(anonymous_19)",decl:{start:{line:184,column:33},end:{line:184,column:34}},loc:{start:{line:184,column:39},end:{line:184,column:49}},line:184},"20":{name:"(anonymous_20)",decl:{start:{line:185,column:27},end:{line:185,column:28}},loc:{start:{line:185,column:33},end:{line:185,column:46}},line:185},"21":{name:"(anonymous_21)",decl:{start:{line:189,column:22},end:{line:189,column:23}},loc:{start:{line:189,column:28},end:{line:194,column:13}},line:189},"22":{name:"(anonymous_22)",decl:{start:{line:196,column:81},end:{line:196,column:82}},loc:{start:{line:196,column:87},end:{line:238,column:13}},line:196},"23":{name:"(anonymous_23)",decl:{start:{line:197,column:45},end:{line:197,column:46}},loc:{start:{line:197,column:51},end:{line:209,column:17}},line:197},"24":{name:"(anonymous_24)",decl:{start:{line:213,column:78},end:{line:213,column:79}},loc:{start:{line:213,column:84},end:{line:215,column:21}},line:213},"25":{name:"(anonymous_25)",decl:{start:{line:219,column:79},end:{line:219,column:80}},loc:{start:{line:219,column:85},end:{line:221,column:21}},line:219},"26":{name:"(anonymous_26)",decl:{start:{line:224,column:64},end:{line:224,column:65}},loc:{start:{line:224,column:70},end:{line:229,column:21}},line:224},"27":{name:"(anonymous_27)",decl:{start:{line:231,column:46},end:{line:231,column:47}},loc:{start:{line:231,column:52},end:{line:237,column:17}},line:231},"28":{name:"(anonymous_28)",decl:{start:{line:240,column:50},end:{line:240,column:51}},loc:{start:{line:240,column:56},end:{line:269,column:9}},line:240},"29":{name:"(anonymous_29)",decl:{start:{line:248,column:36},end:{line:248,column:37}},loc:{start:{line:248,column:42},end:{line:268,column:13}},line:248},"30":{name:"(anonymous_30)",decl:{start:{line:270,column:65},end:{line:270,column:66}},loc:{start:{line:270,column:71},end:{line:377,column:9}},line:270},"31":{name:"(anonymous_31)",decl:{start:{line:272,column:19},end:{line:272,column:20}},loc:{start:{line:272,column:25},end:{line:274,column:13}},line:272},"32":{name:"(anonymous_32)",decl:{start:{line:273,column:27},end:{line:273,column:28}},loc:{start:{line:273,column:33},end:{line:273,column:46}},line:273},"33":{name:"(anonymous_33)",decl:{start:{line:275,column:18},end:{line:275,column:19}},loc:{start:{line:275,column:24},end:{line:277,column:13}},line:275},"34":{name:"(anonymous_34)",decl:{start:{line:278,column:53},end:{line:278,column:54}},loc:{start:{line:278,column:59},end:{line:327,column:13}},line:278},"35":{name:"(anonymous_35)",decl:{start:{line:328,column:59},end:{line:328,column:60}},loc:{start:{line:328,column:65},end:{line:376,column:13}},line:328},"36":{name:"(anonymous_36)",decl:{start:{line:378,column:128},end:{line:378,column:129}},loc:{start:{line:378,column:134},end:{line:433,column:9}},line:378},"37":{name:"(anonymous_37)",decl:{start:{line:388,column:37},end:{line:388,column:38}},loc:{start:{line:388,column:43},end:{line:432,column:13}},line:388},"38":{name:"(anonymous_38)",decl:{start:{line:434,column:43},end:{line:434,column:44}},loc:{start:{line:434,column:49},end:{line:455,column:9}},line:434},"39":{name:"(anonymous_39)",decl:{start:{line:440,column:36},end:{line:440,column:37}},loc:{start:{line:440,column:42},end:{line:454,column:13}},line:440},"40":{name:"(anonymous_40)",decl:{start:{line:456,column:41},end:{line:456,column:42}},loc:{start:{line:456,column:47},end:{line:479,column:9}},line:456},"41":{name:"(anonymous_41)",decl:{start:{line:464,column:36},end:{line:464,column:37}},loc:{start:{line:464,column:42},end:{line:478,column:13}},line:464},"42":{name:"(anonymous_42)",decl:{start:{line:480,column:48},end:{line:480,column:49}},loc:{start:{line:480,column:54},end:{line:498,column:9}},line:480},"43":{name:"(anonymous_43)",decl:{start:{line:486,column:36},end:{line:486,column:37}},loc:{start:{line:486,column:42},end:{line:497,column:13}},line:486},"44":{name:"(anonymous_44)",decl:{start:{line:500,column:31},end:{line:500,column:32}},loc:{start:{line:500,column:37},end:{line:527,column:5}},line:500},"45":{name:"(anonymous_45)",decl:{start:{line:510,column:15},end:{line:510,column:16}},loc:{start:{line:510,column:21},end:{line:514,column:9}},line:510},"46":{name:"(anonymous_46)",decl:{start:{line:515,column:79},end:{line:515,column:80}},loc:{start:{line:515,column:85},end:{line:520,column:9}},line:515},"47":{name:"(anonymous_47)",decl:{start:{line:521,column:77},end:{line:521,column:78}},loc:{start:{line:521,column:83},end:{line:523,column:9}},line:521},"48":{name:"(anonymous_48)",decl:{start:{line:524,column:64},end:{line:524,column:65}},loc:{start:{line:524,column:70},end:{line:526,column:9}},line:524}},branchMap:{"0":{loc:{start:{line:44,column:4},end:{line:58,column:5}},type:"switch",locations:[{start:{line:45,column:8},end:{line:48,column:18}},{start:{line:49,column:8},end:{line:51,column:18}},{start:{line:52,column:8},end:{line:54,column:18}},{start:{line:55,column:8},end:{line:57,column:18}}],line:44},"1":{loc:{start:{line:211,column:16},end:{line:230,column:17}},type:"if",locations:[{start:{line:211,column:16},end:{line:230,column:17}},{start:{line:211,column:16},end:{line:230,column:17}}],line:211},"2":{loc:{start:{line:217,column:21},end:{line:230,column:17}},type:"if",locations:[{start:{line:217,column:21},end:{line:230,column:17}},{start:{line:217,column:21},end:{line:230,column:17}}],line:217}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0},b:{"0":[0,0,0,0],"1":[0,0],"2":[0,0]},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-view.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-view.ts"],names:[],mappings:"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",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\n\nimport { BaseView, TagMap, TagValue } from '../src';\nimport { TEST_ONLY } from '../src/common/time-util';\nimport {\n  DistributionValue,\n  MetricDescriptorType,\n  Timestamp,\n} from '../src/metrics/export/types';\nimport {\n  AggregationType,\n  DistributionData,\n  Measure,\n  MeasureType,\n  MeasureUnit,\n  View,\n} from '../src/stats/types';\n\n/** The order of how close values must be to be considerated almost equal */\nconst EPSILON = 6;\n\ninterface AggregationTestCase {\n  aggregationType: AggregationType;\n  description: string;\n  metricDescriptorType: MetricDescriptorType;\n}\n\nfunction isAlmostEqual(\n  actual: number,\n  expected: number,\n  epsilon: number\n): boolean {\n  return Math.abs(actual - expected) < Math.pow(10, -epsilon);\n}\n\nfunction assertDistributionData(\n  distributionData: DistributionData,\n  values: number[]\n) {\n  const valuesSum = values.reduce((acc, cur) => acc + cur);\n\n  assert.strictEqual(distributionData.count, values.length);\n  assert.strictEqual(distributionData.sum, valuesSum);\n\n  const expectedMean = valuesSum / values.length;\n  assert.ok(isAlmostEqual(distributionData.mean, expectedMean, EPSILON));\n\n  const expectedSumSquaredDeviations = values\n    .map(value => Math.pow(value - expectedMean, 2))\n    .reduce((acc, curr) => acc + curr);\n  assert.ok(\n    isAlmostEqual(\n      distributionData.sumOfSquaredDeviation,\n      expectedSumSquaredDeviations,\n      EPSILON\n    )\n  );\n\n  const expectedStdDeviation = Math.sqrt(\n    expectedSumSquaredDeviations / values.length\n  );\n  assert.ok(\n    isAlmostEqual(distributionData.stdDeviation, expectedStdDeviation, EPSILON)\n  );\n}\n\nfunction assertView(\n  view: View,\n  recordedValues: number[],\n  aggregationType: AggregationType,\n  tagValues: TagValue[]\n) {\n  assert.strictEqual(view.aggregation, aggregationType);\n  const aggregationData = view.getSnapshot(tagValues);\n  switch (aggregationData.type) {\n    case AggregationType.SUM:\n      const acc = recordedValues.reduce((acc, cur) => acc + cur);\n      assert.strictEqual(aggregationData.value, acc);\n      break;\n    case AggregationType.COUNT:\n      assert.strictEqual(aggregationData.value, recordedValues.length);\n      break;\n    case AggregationType.DISTRIBUTION:\n      assertDistributionData(aggregationData, recordedValues);\n      break;\n    default:\n      assert.strictEqual(\n        aggregationData.value,\n        recordedValues[recordedValues.length - 1]\n      );\n      break;\n  }\n}\n\ndescribe('BaseView', () => {\n  const measure: Measure = {\n    name: 'Test Measure',\n    type: MeasureType.DOUBLE,\n    unit: MeasureUnit.UNIT,\n  };\n\n  const aggregationTestCases: AggregationTestCase[] = [\n    {\n      aggregationType: AggregationType.SUM,\n      description: 'Sum',\n      metricDescriptorType: MetricDescriptorType.CUMULATIVE_DOUBLE,\n    },\n    {\n      aggregationType: AggregationType.COUNT,\n      description: 'Count',\n      metricDescriptorType: MetricDescriptorType.CUMULATIVE_INT64,\n    },\n    {\n      aggregationType: AggregationType.LAST_VALUE,\n      description: 'Last Value',\n      metricDescriptorType: MetricDescriptorType.GAUGE_DOUBLE,\n    },\n    {\n      aggregationType: AggregationType.DISTRIBUTION,\n      description: 'Distribution',\n      metricDescriptorType: MetricDescriptorType.CUMULATIVE_DISTRIBUTION,\n    },\n  ];\n\n  describe('getColumns()', () => {\n    it('should access the given tag keys', () => {\n      const tagKeys = [{ name: 'testKey1' }, { name: 'testKey2' }];\n      const view = new BaseView(\n        'test/view/name',\n        measure,\n        AggregationType.LAST_VALUE,\n        tagKeys,\n        'description test'\n      );\n\n      assert.deepStrictEqual(view.getColumns(), tagKeys);\n    });\n  });\n\n  describe('createView()', () => {\n    it('should throw error when keys are duplicate', () => {\n      const tagKeys = [\n        { name: 'testKey1' },\n        { name: 'testKey1' },\n        { name: 'testKey2' },\n      ];\n      assert.throws(() => {\n        const view = new BaseView(\n          'test/view/name',\n          measure,\n          AggregationType.LAST_VALUE,\n          tagKeys,\n          'description test'\n        );\n        assert.deepStrictEqual(view.getColumns(), tagKeys);\n      }, /^Error: Columns have duplicate$/);\n    });\n  });\n\n  describe('recordMeasurement()', () => {\n    const measurementValues = [1.1, 2.3, 3.2, 4.3, 5.2];\n    const bucketBoundaries = [2, 4, 6];\n    const tagKey1 = { name: 'testKey1' };\n    const tagKey2 = { name: 'testKey2' };\n    const tagKeys = [tagKey1, tagKey2];\n    const tagKey3 = { name: 'testKey3' };\n    const tagValue1 = { value: 'testValue1' };\n    const tagValue2 = { value: 'testValue2' };\n    const tagValue3 = { value: 'testValue3' };\n\n    const tags = new TagMap();\n    tags.set(tagKey1, tagValue1);\n    tags.set(tagKey2, tagValue2);\n\n    for (const aggregationTestCase of aggregationTestCases) {\n      it(`should record measurements on a View with ${aggregationTestCase.description} Aggregation Data type`, () => {\n        const view = new BaseView(\n          'test/view/name',\n          measure,\n          aggregationTestCase.aggregationType,\n          tagKeys,\n          'description test',\n          bucketBoundaries\n        );\n        const recordedValues = [];\n        for (const value of measurementValues) {\n          recordedValues.push(value);\n          const measurement = { measure, value };\n          view.recordMeasurement(measurement, tags);\n          assertView(\n            view,\n            recordedValues,\n            aggregationTestCase.aggregationType,\n            [tagValue1, tagValue2]\n          );\n        }\n      });\n    }\n\n    it('should ignore negative bucket bounds', () => {\n      const negativeBucketBoundaries = [-Infinity, -4, -2, 0, 2, 4, 6];\n      const view = new BaseView(\n        'test/view/name',\n        measure,\n        AggregationType.DISTRIBUTION,\n        tagKeys,\n        'description test',\n        negativeBucketBoundaries\n      );\n      const recordedValues = [];\n      for (const value of measurementValues) {\n        recordedValues.push(value);\n        const measurement = { measure, value };\n        view.recordMeasurement(measurement, tags);\n      }\n      const data = view.getSnapshot([tagValue1, tagValue2]) as DistributionData;\n      assert.deepStrictEqual(data.buckets, [2, 4, 6]);\n      assert.deepStrictEqual(data.bucketCounts, [1, 2, 2, 0]);\n    });\n\n    const view = new BaseView(\n      'test/view/name',\n      measure,\n      AggregationType.LAST_VALUE,\n      tagKeys,\n      'description test'\n    );\n\n    it('should not record a measurement when it have wrong tag keys', () => {\n      const tagMap = new TagMap();\n      tagMap.set(tagKey3, tagValue3);\n      const measurement = { measure, value: 10 };\n      view.recordMeasurement(measurement, tagMap);\n      assert.ok(!view.getSnapshot([tagValue3]));\n    });\n  });\n\n  describe('getMetric()', () => {\n    const realHrtimeFn = process.hrtime;\n    const realNowFn = Date.now;\n    const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n    const mockStartTime = 1546540757282;\n    const mockStartTimestamp: Timestamp = { seconds: 1546540757, nanos: 282e6 };\n    const measurementValues = [1.1, 2.3, 3.2, 4.3, 5.2];\n    const buckets = [2, 4, 6];\n    const tagKey1 = { name: 'testKey1' };\n    const tagKey2 = { name: 'testKey2' };\n    const tagKeys = [tagKey1, tagKey2];\n    const tagValue1 = { value: 'testValue1' };\n    const tagValue2 = { value: 'testValue2' };\n    const tagValue3 = { value: 'testValue3' };\n    const tagValue4 = { value: 'testValue4' };\n\n    const tags = new TagMap();\n    tags.set(tagKey1, tagValue1);\n    tags.set(tagKey2, tagValue2);\n\n    const tagMap = new TagMap();\n    tagMap.set(tagKey1, tagValue3);\n    tagMap.set(tagKey2, tagValue4);\n\n    for (const aggregationTestCase of aggregationTestCases) {\n      const view: View = new BaseView(\n        'test/view/name',\n        measure,\n        aggregationTestCase.aggregationType,\n        tagKeys,\n        'description test',\n        buckets\n      );\n      for (const value of measurementValues) {\n        const measurement = { measure, value };\n        view.recordMeasurement(measurement, tags);\n      }\n\n      beforeEach(() => {\n        // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n        process.hrtime = () => [100, 1e7];\n        Date.now = () => 1450000000000;\n        // Force the clock to recalibrate the time offset with the mocked time\n        TEST_ONLY.setHrtimeReference();\n      });\n\n      afterEach(() => {\n        process.hrtime = realHrtimeFn;\n        Date.now = realNowFn;\n        // Reset the hrtime reference so that it uses a real clock again.\n        TEST_ONLY.resetHrtimeFunctionCache();\n      });\n\n      const { descriptor, timeseries } = view.getMetric(mockStartTime);\n\n      describe(`Aggregation type: ${aggregationTestCase.aggregationType}`, () => {\n        it('should have descriptor', () => {\n          assert.ok(descriptor);\n          assert.deepStrictEqual(descriptor, {\n            description: 'description test',\n            labelKeys: [\n              { key: 'testKey1', description: '' },\n              { key: 'testKey2', description: '' },\n            ],\n            name: 'test/view/name',\n            type: aggregationTestCase.metricDescriptorType,\n            unit: '1',\n          });\n        });\n\n        const [{ startTimestamp, labelValues }] = timeseries;\n\n        if (\n          aggregationTestCase.metricDescriptorType ===\n          MetricDescriptorType.GAUGE_INT64\n        ) {\n          it('GAUGE_INT64 shouldnt have timeseries startTimestamp', () => {\n            assert.strictEqual(startTimestamp, undefined);\n          });\n        } else if (\n          aggregationTestCase.metricDescriptorType ===\n          MetricDescriptorType.GAUGE_DOUBLE\n        ) {\n          it('GAUGE_DOUBLE shouldnt have timeseries startTimestamp', () => {\n            assert.strictEqual(startTimestamp, undefined);\n          });\n        } else {\n          it('should have timeseries startTimestamp', () => {\n            assert.ok(startTimestamp);\n            assert.strictEqual(typeof startTimestamp!.nanos, 'number');\n            assert.strictEqual(typeof startTimestamp!.seconds, 'number');\n            assert.deepStrictEqual(startTimestamp, mockStartTimestamp);\n          });\n        }\n\n        it('should have labelValues', () => {\n          assert.ok(labelValues);\n          assert.deepStrictEqual(labelValues, [\n            { value: 'testValue1' },\n            { value: 'testValue2' },\n          ]);\n        });\n      });\n    }\n\n    describe('DISTRIBUTION aggregation type', () => {\n      const view: View = new BaseView(\n        'test/view/name',\n        measure,\n        AggregationType.DISTRIBUTION,\n        tagKeys,\n        'description test',\n        buckets\n      );\n      let total = 0;\n      for (const value of measurementValues) {\n        total += value;\n        const measurement = { measure, value };\n        view.recordMeasurement(measurement, tags);\n      }\n\n      it('should have point', () => {\n        const { timeseries } = view.getMetric(mockStartTime);\n        const [{ points, startTimestamp }] = timeseries;\n        assert.ok(points);\n        const [point] = points;\n        const { timestamp, value } = point;\n        assert.ok(timestamp);\n        assert.strictEqual(typeof timestamp.nanos, 'number');\n        assert.strictEqual(typeof timestamp.seconds, 'number');\n        assert.strictEqual(timestamp.seconds, mockedTime.seconds);\n        assert.strictEqual(timestamp.nanos, mockedTime.nanos);\n        assert.notStrictEqual(typeof value, 'number');\n        assert.deepStrictEqual(value as DistributionValue, {\n          bucketOptions: { explicit: { bounds: buckets } },\n          buckets: [{ count: 1 }, { count: 2 }, { count: 2 }, { count: 0 }],\n          count: 5,\n          sum: total,\n          sumOfSquaredDeviation: 10.427999999999997,\n        });\n\n        assert.deepStrictEqual(startTimestamp, mockStartTimestamp);\n      });\n    });\n\n    describe('DISTRIBUTION aggregation type with exemplars', () => {\n      const realNowFn = Date.now;\n      before(() => {\n        Date.now = () => 1450000000000;\n      });\n      after(() => {\n        Date.now = realNowFn;\n      });\n\n      it('should have point with attachments', () => {\n        const view: View = new BaseView(\n          'test/view/name',\n          measure,\n          AggregationType.DISTRIBUTION,\n          tagKeys,\n          'description test',\n          buckets\n        );\n        let total = 0;\n        const attachments = { k1: 'v1', k2: 'v2', k3: 'v3' };\n        for (const value of measurementValues) {\n          total += value;\n          const measurement = { measure, value };\n          view.recordMeasurement(measurement, tags, attachments);\n        }\n\n        const { timeseries } = view.getMetric(mockStartTime);\n        const [{ points, startTimestamp }] = timeseries;\n        assert.ok(points);\n        const [point] = points;\n        const { timestamp, value } = point;\n        assert.ok(timestamp);\n        assert.deepStrictEqual(value as DistributionValue, {\n          bucketOptions: { explicit: { bounds: buckets } },\n          buckets: [\n            {\n              count: 1,\n              exemplar: {\n                value: 1.1,\n                timestamp: { seconds: 1450000000, nanos: 0 },\n                attachments,\n              },\n            },\n            {\n              count: 2,\n              exemplar: {\n                value: 3.2,\n                timestamp: { seconds: 1450000000, nanos: 0 },\n                attachments,\n              },\n            },\n            {\n              count: 2,\n              exemplar: {\n                value: 5.2,\n                timestamp: { seconds: 1450000000, nanos: 0 },\n                attachments,\n              },\n            },\n            { count: 0 },\n          ],\n          count: 5,\n          sum: total,\n          sumOfSquaredDeviation: 10.427999999999997,\n        });\n        assert.deepStrictEqual(startTimestamp, mockStartTimestamp);\n      });\n\n      it('should have point with empty attachments', () => {\n        const view: View = new BaseView(\n          'test/view/name',\n          measure,\n          AggregationType.DISTRIBUTION,\n          tagKeys,\n          'description test',\n          buckets\n        );\n        let total = 0;\n        for (const value of measurementValues) {\n          total += value;\n          const measurement = { measure, value };\n          view.recordMeasurement(measurement, tags, {});\n        }\n\n        const { timeseries } = view.getMetric(mockStartTime);\n        const [{ points, startTimestamp }] = timeseries;\n        assert.ok(points);\n        const [point] = points;\n        const { timestamp, value } = point;\n        assert.ok(timestamp);\n        assert.deepStrictEqual(value as DistributionValue, {\n          bucketOptions: { explicit: { bounds: buckets } },\n          buckets: [\n            {\n              count: 1,\n              exemplar: {\n                value: 1.1,\n                timestamp: { seconds: 1450000000, nanos: 0 },\n                attachments: {},\n              },\n            },\n            {\n              count: 2,\n              exemplar: {\n                value: 3.2,\n                timestamp: { seconds: 1450000000, nanos: 0 },\n                attachments: {},\n              },\n            },\n            {\n              count: 2,\n              exemplar: {\n                value: 5.2,\n                timestamp: { seconds: 1450000000, nanos: 0 },\n                attachments: {},\n              },\n            },\n            { count: 0 },\n          ],\n          count: 5,\n          sum: total,\n          sumOfSquaredDeviation: 10.427999999999997,\n        });\n        assert.deepStrictEqual(startTimestamp, mockStartTimestamp);\n      });\n    });\n\n    describe('DISTRIBUTION aggregation type: record with measurements in succession from a single view and single measure', () => {\n      const view: View = new BaseView(\n        'test/view/name',\n        measure,\n        AggregationType.DISTRIBUTION,\n        tagKeys,\n        'description test',\n        buckets\n      );\n      let total = 0;\n      for (const value of measurementValues) {\n        total += value;\n        const measurement = { measure, value };\n        const measurement1 = { measure, value };\n        view.recordMeasurement(measurement, tags);\n        view.recordMeasurement(measurement1, tagMap);\n      }\n\n      it('should have points', () => {\n        const { timeseries } = view.getMetric(mockStartTime);\n        assert.strictEqual(timeseries.length, 2);\n        const [\n          { labelValues: labelValues1, points: points1 },\n          { labelValues: labelValues2, points: points2 },\n        ] = timeseries;\n        assert.ok(points1);\n\n        let [point] = points1;\n        let { timestamp, value } = point;\n        assert.ok(timestamp);\n        assert.strictEqual(typeof timestamp.nanos, 'number');\n        assert.strictEqual(typeof timestamp.seconds, 'number');\n        assert.strictEqual(timestamp.seconds, mockedTime.seconds);\n        assert.strictEqual(timestamp.nanos, mockedTime.nanos);\n        assert.notStrictEqual(typeof value, 'number');\n        assert.deepStrictEqual(value as DistributionValue, {\n          bucketOptions: { explicit: { bounds: buckets } },\n          buckets: [{ count: 1 }, { count: 2 }, { count: 2 }, { count: 0 }],\n          count: 5,\n          sum: total,\n          sumOfSquaredDeviation: 10.427999999999997,\n        });\n        assert.deepStrictEqual(labelValues1, [\n          { value: 'testValue1' },\n          { value: 'testValue2' },\n        ]);\n        assert.ok(points2);\n        [point] = points2;\n        ({ timestamp, value } = point);\n        assert.ok(timestamp);\n        assert.strictEqual(typeof timestamp.nanos, 'number');\n        assert.strictEqual(typeof timestamp.seconds, 'number');\n        assert.strictEqual(timestamp.seconds, mockedTime.seconds);\n        assert.strictEqual(timestamp.nanos, mockedTime.nanos);\n        assert.notStrictEqual(typeof value, 'number');\n        assert.deepStrictEqual(value as DistributionValue, {\n          bucketOptions: { explicit: { bounds: buckets } },\n          buckets: [{ count: 1 }, { count: 2 }, { count: 2 }, { count: 0 }],\n          count: 5,\n          sum: total,\n          sumOfSquaredDeviation: 10.427999999999997,\n        });\n        assert.deepStrictEqual(labelValues2, [\n          { value: 'testValue3' },\n          { value: 'testValue4' },\n        ]);\n      });\n    });\n\n    describe('COUNT aggregation type', () => {\n      const view: View = new BaseView(\n        'test/view/name',\n        measure,\n        AggregationType.COUNT,\n        tagKeys,\n        'description test',\n        buckets\n      );\n      for (const value of measurementValues) {\n        const measurement = { measure, value };\n        view.recordMeasurement(measurement, tags);\n      }\n\n      it('should have point', () => {\n        const { timeseries } = view.getMetric(mockStartTime);\n        const [{ points, startTimestamp }] = timeseries;\n        assert.ok(points);\n        const [point] = points;\n        const { timestamp, value } = point;\n        assert.ok(timestamp);\n        assert.strictEqual(typeof timestamp.nanos, 'number');\n        assert.strictEqual(typeof timestamp.seconds, 'number');\n        assert.strictEqual(timestamp.seconds, mockedTime.seconds);\n        assert.strictEqual(timestamp.nanos, mockedTime.nanos);\n        assert.strictEqual(typeof value, 'number');\n        assert.strictEqual(value, 5);\n        assert.deepStrictEqual(startTimestamp, mockStartTimestamp);\n      });\n    });\n\n    describe('SUM aggregation type', () => {\n      const view: View = new BaseView(\n        'test/view/name',\n        measure,\n        AggregationType.SUM,\n        tagKeys,\n        'description test',\n        buckets\n      );\n      let total = 0;\n      for (const value of measurementValues) {\n        total += value;\n        const measurement = { measure, value };\n        view.recordMeasurement(measurement, tags);\n      }\n\n      it('should have point', () => {\n        const { timeseries } = view.getMetric(mockStartTime);\n        const [{ points, startTimestamp }] = timeseries;\n        assert.ok(points);\n        const [point] = points;\n        const { timestamp, value } = point;\n        assert.ok(timestamp);\n        assert.strictEqual(typeof timestamp.nanos, 'number');\n        assert.strictEqual(typeof timestamp.seconds, 'number');\n        assert.strictEqual(timestamp.seconds, mockedTime.seconds);\n        assert.strictEqual(timestamp.nanos, mockedTime.nanos);\n        assert.strictEqual(typeof value, 'number');\n        assert.strictEqual(value, total);\n        assert.deepStrictEqual(startTimestamp, mockStartTimestamp);\n      });\n    });\n\n    describe('LAST_VALUE aggregation type', () => {\n      const view: View = new BaseView(\n        'test/view/name',\n        measure,\n        AggregationType.LAST_VALUE,\n        tagKeys,\n        'description test',\n        buckets\n      );\n      for (const value of measurementValues) {\n        const measurement = { measure, value };\n        view.recordMeasurement(measurement, tags);\n      }\n\n      it('should have point', () => {\n        const { timeseries } = view.getMetric(mockStartTime);\n        const [{ points, startTimestamp }] = timeseries;\n        assert.ok(points);\n        const [point] = points;\n        const { timestamp, value } = point;\n        assert.strictEqual(timestamp.seconds, mockedTime.seconds);\n        assert.strictEqual(timestamp.nanos, mockedTime.nanos);\n        assert.strictEqual(typeof value, 'number');\n        assert.strictEqual(\n          value,\n          measurementValues[measurementValues.length - 1]\n        );\n        assert.strictEqual(startTimestamp, undefined);\n      });\n    });\n  });\n\n  describe('getSnapshots()', () => {\n    let view: View;\n    const tagKey1 = { name: 'testKey1' };\n    const tagKey2 = { name: 'testKey2' };\n    const tagKeys = [tagKey1, tagKey2];\n    const tagValue1 = { value: 'testValue1' };\n    const tagValue2 = { value: 'testValue2' };\n\n    const tags = new TagMap();\n    tags.set(tagKey1, tagValue1);\n    tags.set(tagKey2, tagValue2);\n\n    before(() => {\n      view = new BaseView(\n        'test/view/name',\n        measure,\n        AggregationType.LAST_VALUE,\n        tagKeys,\n        'description test'\n      );\n\n      const measurement = { measure, value: 10 };\n      view.recordMeasurement(measurement, tags);\n    });\n\n    it('should not get aggregation data when wrong tags values are given', () => {\n      assert.ok(\n        !view.getSnapshot([\n          { value: 'wrongTagValue' },\n          { value: 'wrongTagValue' },\n        ])\n      );\n    });\n\n    it('should not get aggregation data when not enough tags are given', () => {\n      assert.ok(!view.getSnapshot([tagValue1]));\n    });\n\n    it('should get aggregation data when tags are correct', () => {\n      assert.ok(view.getSnapshot([tagValue1, tagValue2]));\n    });\n  });\n});\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"574edda37d0bad9da14dde52cad37c56839fe42d"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_23vo0f3ny8=function(){return actualCoverage;};}return actualCoverage;}cov_23vo0f3ny8();cov_23vo0f3ny8().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const assert=(cov_23vo0f3ny8().s[1]++,require("assert"));const src_1=(cov_23vo0f3ny8().s[2]++,require("../src"));const time_util_1=(cov_23vo0f3ny8().s[3]++,require("../src/common/time-util"));const types_1=(cov_23vo0f3ny8().s[4]++,require("../src/metrics/export/types"));const types_2=(cov_23vo0f3ny8().s[5]++,require("../src/stats/types"));/** The order of how close values must be to be considerated almost equal */const EPSILON=(cov_23vo0f3ny8().s[6]++,6);function isAlmostEqual(actual,expected,epsilon){cov_23vo0f3ny8().f[0]++;cov_23vo0f3ny8().s[7]++;return Math.abs(actual-expected)<Math.pow(10,-epsilon);}function assertDistributionData(distributionData,values){cov_23vo0f3ny8().f[1]++;const valuesSum=(cov_23vo0f3ny8().s[8]++,values.reduce((acc,cur)=>{cov_23vo0f3ny8().f[2]++;cov_23vo0f3ny8().s[9]++;return acc+cur;}));cov_23vo0f3ny8().s[10]++;assert.strictEqual(distributionData.count,values.length);cov_23vo0f3ny8().s[11]++;assert.strictEqual(distributionData.sum,valuesSum);const expectedMean=(cov_23vo0f3ny8().s[12]++,valuesSum/values.length);cov_23vo0f3ny8().s[13]++;assert.ok(isAlmostEqual(distributionData.mean,expectedMean,EPSILON));const expectedSumSquaredDeviations=(cov_23vo0f3ny8().s[14]++,values.map(value=>{cov_23vo0f3ny8().f[3]++;cov_23vo0f3ny8().s[15]++;return Math.pow(value-expectedMean,2);}).reduce((acc,curr)=>{cov_23vo0f3ny8().f[4]++;cov_23vo0f3ny8().s[16]++;return acc+curr;}));cov_23vo0f3ny8().s[17]++;assert.ok(isAlmostEqual(distributionData.sumOfSquaredDeviation,expectedSumSquaredDeviations,EPSILON));const expectedStdDeviation=(cov_23vo0f3ny8().s[18]++,Math.sqrt(expectedSumSquaredDeviations/values.length));cov_23vo0f3ny8().s[19]++;assert.ok(isAlmostEqual(distributionData.stdDeviation,expectedStdDeviation,EPSILON));}function assertView(view,recordedValues,aggregationType,tagValues){cov_23vo0f3ny8().f[5]++;cov_23vo0f3ny8().s[20]++;assert.strictEqual(view.aggregation,aggregationType);const aggregationData=(cov_23vo0f3ny8().s[21]++,view.getSnapshot(tagValues));cov_23vo0f3ny8().s[22]++;switch(aggregationData.type){case types_2.AggregationType.SUM:cov_23vo0f3ny8().b[0][0]++;const acc=(cov_23vo0f3ny8().s[23]++,recordedValues.reduce((acc,cur)=>{cov_23vo0f3ny8().f[6]++;cov_23vo0f3ny8().s[24]++;return acc+cur;}));cov_23vo0f3ny8().s[25]++;assert.strictEqual(aggregationData.value,acc);cov_23vo0f3ny8().s[26]++;break;case types_2.AggregationType.COUNT:cov_23vo0f3ny8().b[0][1]++;cov_23vo0f3ny8().s[27]++;assert.strictEqual(aggregationData.value,recordedValues.length);cov_23vo0f3ny8().s[28]++;break;case types_2.AggregationType.DISTRIBUTION:cov_23vo0f3ny8().b[0][2]++;cov_23vo0f3ny8().s[29]++;assertDistributionData(aggregationData,recordedValues);cov_23vo0f3ny8().s[30]++;break;default:cov_23vo0f3ny8().b[0][3]++;cov_23vo0f3ny8().s[31]++;assert.strictEqual(aggregationData.value,recordedValues[recordedValues.length-1]);cov_23vo0f3ny8().s[32]++;break;}}cov_23vo0f3ny8().s[33]++;describe('BaseView',()=>{cov_23vo0f3ny8().f[7]++;const measure=(cov_23vo0f3ny8().s[34]++,{name:'Test Measure',type:types_2.MeasureType.DOUBLE,unit:types_2.MeasureUnit.UNIT});const aggregationTestCases=(cov_23vo0f3ny8().s[35]++,[{aggregationType:types_2.AggregationType.SUM,description:'Sum',metricDescriptorType:types_1.MetricDescriptorType.CUMULATIVE_DOUBLE},{aggregationType:types_2.AggregationType.COUNT,description:'Count',metricDescriptorType:types_1.MetricDescriptorType.CUMULATIVE_INT64},{aggregationType:types_2.AggregationType.LAST_VALUE,description:'Last Value',metricDescriptorType:types_1.MetricDescriptorType.GAUGE_DOUBLE},{aggregationType:types_2.AggregationType.DISTRIBUTION,description:'Distribution',metricDescriptorType:types_1.MetricDescriptorType.CUMULATIVE_DISTRIBUTION}]);cov_23vo0f3ny8().s[36]++;describe('getColumns()',()=>{cov_23vo0f3ny8().f[8]++;cov_23vo0f3ny8().s[37]++;it('should access the given tag keys',()=>{cov_23vo0f3ny8().f[9]++;const tagKeys=(cov_23vo0f3ny8().s[38]++,[{name:'testKey1'},{name:'testKey2'}]);const view=(cov_23vo0f3ny8().s[39]++,new src_1.BaseView('test/view/name',measure,types_2.AggregationType.LAST_VALUE,tagKeys,'description test'));cov_23vo0f3ny8().s[40]++;assert.deepStrictEqual(view.getColumns(),tagKeys);});});cov_23vo0f3ny8().s[41]++;describe('createView()',()=>{cov_23vo0f3ny8().f[10]++;cov_23vo0f3ny8().s[42]++;it('should throw error when keys are duplicate',()=>{cov_23vo0f3ny8().f[11]++;const tagKeys=(cov_23vo0f3ny8().s[43]++,[{name:'testKey1'},{name:'testKey1'},{name:'testKey2'}]);cov_23vo0f3ny8().s[44]++;assert.throws(()=>{cov_23vo0f3ny8().f[12]++;const view=(cov_23vo0f3ny8().s[45]++,new src_1.BaseView('test/view/name',measure,types_2.AggregationType.LAST_VALUE,tagKeys,'description test'));cov_23vo0f3ny8().s[46]++;assert.deepStrictEqual(view.getColumns(),tagKeys);},/^Error: Columns have duplicate$/);});});cov_23vo0f3ny8().s[47]++;describe('recordMeasurement()',()=>{cov_23vo0f3ny8().f[13]++;const measurementValues=(cov_23vo0f3ny8().s[48]++,[1.1,2.3,3.2,4.3,5.2]);const bucketBoundaries=(cov_23vo0f3ny8().s[49]++,[2,4,6]);const tagKey1=(cov_23vo0f3ny8().s[50]++,{name:'testKey1'});const tagKey2=(cov_23vo0f3ny8().s[51]++,{name:'testKey2'});const tagKeys=(cov_23vo0f3ny8().s[52]++,[tagKey1,tagKey2]);const tagKey3=(cov_23vo0f3ny8().s[53]++,{name:'testKey3'});const tagValue1=(cov_23vo0f3ny8().s[54]++,{value:'testValue1'});const tagValue2=(cov_23vo0f3ny8().s[55]++,{value:'testValue2'});const tagValue3=(cov_23vo0f3ny8().s[56]++,{value:'testValue3'});const tags=(cov_23vo0f3ny8().s[57]++,new src_1.TagMap());cov_23vo0f3ny8().s[58]++;tags.set(tagKey1,tagValue1);cov_23vo0f3ny8().s[59]++;tags.set(tagKey2,tagValue2);cov_23vo0f3ny8().s[60]++;for(const aggregationTestCase of aggregationTestCases){cov_23vo0f3ny8().s[61]++;it(`should record measurements on a View with ${aggregationTestCase.description} Aggregation Data type`,()=>{cov_23vo0f3ny8().f[14]++;const view=(cov_23vo0f3ny8().s[62]++,new src_1.BaseView('test/view/name',measure,aggregationTestCase.aggregationType,tagKeys,'description test',bucketBoundaries));const recordedValues=(cov_23vo0f3ny8().s[63]++,[]);cov_23vo0f3ny8().s[64]++;for(const value of measurementValues){cov_23vo0f3ny8().s[65]++;recordedValues.push(value);const measurement=(cov_23vo0f3ny8().s[66]++,{measure,value});cov_23vo0f3ny8().s[67]++;view.recordMeasurement(measurement,tags);cov_23vo0f3ny8().s[68]++;assertView(view,recordedValues,aggregationTestCase.aggregationType,[tagValue1,tagValue2]);}});}cov_23vo0f3ny8().s[69]++;it('should ignore negative bucket bounds',()=>{cov_23vo0f3ny8().f[15]++;const negativeBucketBoundaries=(cov_23vo0f3ny8().s[70]++,[-Infinity,-4,-2,0,2,4,6]);const view=(cov_23vo0f3ny8().s[71]++,new src_1.BaseView('test/view/name',measure,types_2.AggregationType.DISTRIBUTION,tagKeys,'description test',negativeBucketBoundaries));const recordedValues=(cov_23vo0f3ny8().s[72]++,[]);cov_23vo0f3ny8().s[73]++;for(const value of measurementValues){cov_23vo0f3ny8().s[74]++;recordedValues.push(value);const measurement=(cov_23vo0f3ny8().s[75]++,{measure,value});cov_23vo0f3ny8().s[76]++;view.recordMeasurement(measurement,tags);}const data=(cov_23vo0f3ny8().s[77]++,view.getSnapshot([tagValue1,tagValue2]));cov_23vo0f3ny8().s[78]++;assert.deepStrictEqual(data.buckets,[2,4,6]);cov_23vo0f3ny8().s[79]++;assert.deepStrictEqual(data.bucketCounts,[1,2,2,0]);});const view=(cov_23vo0f3ny8().s[80]++,new src_1.BaseView('test/view/name',measure,types_2.AggregationType.LAST_VALUE,tagKeys,'description test'));cov_23vo0f3ny8().s[81]++;it('should not record a measurement when it have wrong tag keys',()=>{cov_23vo0f3ny8().f[16]++;const tagMap=(cov_23vo0f3ny8().s[82]++,new src_1.TagMap());cov_23vo0f3ny8().s[83]++;tagMap.set(tagKey3,tagValue3);const measurement=(cov_23vo0f3ny8().s[84]++,{measure,value:10});cov_23vo0f3ny8().s[85]++;view.recordMeasurement(measurement,tagMap);cov_23vo0f3ny8().s[86]++;assert.ok(!view.getSnapshot([tagValue3]));});});cov_23vo0f3ny8().s[87]++;describe('getMetric()',()=>{cov_23vo0f3ny8().f[17]++;const realHrtimeFn=(cov_23vo0f3ny8().s[88]++,process.hrtime);const realNowFn=(cov_23vo0f3ny8().s[89]++,Date.now);const mockedTime=(cov_23vo0f3ny8().s[90]++,{seconds:1450000100,nanos:1e7});const mockStartTime=(cov_23vo0f3ny8().s[91]++,1546540757282);const mockStartTimestamp=(cov_23vo0f3ny8().s[92]++,{seconds:1546540757,nanos:282e6});const measurementValues=(cov_23vo0f3ny8().s[93]++,[1.1,2.3,3.2,4.3,5.2]);const buckets=(cov_23vo0f3ny8().s[94]++,[2,4,6]);const tagKey1=(cov_23vo0f3ny8().s[95]++,{name:'testKey1'});const tagKey2=(cov_23vo0f3ny8().s[96]++,{name:'testKey2'});const tagKeys=(cov_23vo0f3ny8().s[97]++,[tagKey1,tagKey2]);const tagValue1=(cov_23vo0f3ny8().s[98]++,{value:'testValue1'});const tagValue2=(cov_23vo0f3ny8().s[99]++,{value:'testValue2'});const tagValue3=(cov_23vo0f3ny8().s[100]++,{value:'testValue3'});const tagValue4=(cov_23vo0f3ny8().s[101]++,{value:'testValue4'});const tags=(cov_23vo0f3ny8().s[102]++,new src_1.TagMap());cov_23vo0f3ny8().s[103]++;tags.set(tagKey1,tagValue1);cov_23vo0f3ny8().s[104]++;tags.set(tagKey2,tagValue2);const tagMap=(cov_23vo0f3ny8().s[105]++,new src_1.TagMap());cov_23vo0f3ny8().s[106]++;tagMap.set(tagKey1,tagValue3);cov_23vo0f3ny8().s[107]++;tagMap.set(tagKey2,tagValue4);cov_23vo0f3ny8().s[108]++;for(const aggregationTestCase of aggregationTestCases){const view=(cov_23vo0f3ny8().s[109]++,new src_1.BaseView('test/view/name',measure,aggregationTestCase.aggregationType,tagKeys,'description test',buckets));cov_23vo0f3ny8().s[110]++;for(const value of measurementValues){const measurement=(cov_23vo0f3ny8().s[111]++,{measure,value});cov_23vo0f3ny8().s[112]++;view.recordMeasurement(measurement,tags);}cov_23vo0f3ny8().s[113]++;beforeEach(()=>{cov_23vo0f3ny8().f[18]++;cov_23vo0f3ny8().s[114]++;// @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message
process.hrtime=()=>{cov_23vo0f3ny8().f[19]++;cov_23vo0f3ny8().s[115]++;return[100,1e7];};cov_23vo0f3ny8().s[116]++;Date.now=()=>{cov_23vo0f3ny8().f[20]++;cov_23vo0f3ny8().s[117]++;return 1450000000000;};// Force the clock to recalibrate the time offset with the mocked time
cov_23vo0f3ny8().s[118]++;time_util_1.TEST_ONLY.setHrtimeReference();});cov_23vo0f3ny8().s[119]++;afterEach(()=>{cov_23vo0f3ny8().f[21]++;cov_23vo0f3ny8().s[120]++;process.hrtime=realHrtimeFn;cov_23vo0f3ny8().s[121]++;Date.now=realNowFn;// Reset the hrtime reference so that it uses a real clock again.
cov_23vo0f3ny8().s[122]++;time_util_1.TEST_ONLY.resetHrtimeFunctionCache();});const{descriptor,timeseries}=(cov_23vo0f3ny8().s[123]++,view.getMetric(mockStartTime));cov_23vo0f3ny8().s[124]++;describe(`Aggregation type: ${aggregationTestCase.aggregationType}`,()=>{cov_23vo0f3ny8().f[22]++;cov_23vo0f3ny8().s[125]++;it('should have descriptor',()=>{cov_23vo0f3ny8().f[23]++;cov_23vo0f3ny8().s[126]++;assert.ok(descriptor);cov_23vo0f3ny8().s[127]++;assert.deepStrictEqual(descriptor,{description:'description test',labelKeys:[{key:'testKey1',description:''},{key:'testKey2',description:''}],name:'test/view/name',type:aggregationTestCase.metricDescriptorType,unit:'1'});});const[{startTimestamp,labelValues}]=(cov_23vo0f3ny8().s[128]++,timeseries);cov_23vo0f3ny8().s[129]++;if(aggregationTestCase.metricDescriptorType===types_1.MetricDescriptorType.GAUGE_INT64){cov_23vo0f3ny8().b[1][0]++;cov_23vo0f3ny8().s[130]++;it('GAUGE_INT64 shouldnt have timeseries startTimestamp',()=>{cov_23vo0f3ny8().f[24]++;cov_23vo0f3ny8().s[131]++;assert.strictEqual(startTimestamp,undefined);});}else{cov_23vo0f3ny8().b[1][1]++;cov_23vo0f3ny8().s[132]++;if(aggregationTestCase.metricDescriptorType===types_1.MetricDescriptorType.GAUGE_DOUBLE){cov_23vo0f3ny8().b[2][0]++;cov_23vo0f3ny8().s[133]++;it('GAUGE_DOUBLE shouldnt have timeseries startTimestamp',()=>{cov_23vo0f3ny8().f[25]++;cov_23vo0f3ny8().s[134]++;assert.strictEqual(startTimestamp,undefined);});}else{cov_23vo0f3ny8().b[2][1]++;cov_23vo0f3ny8().s[135]++;it('should have timeseries startTimestamp',()=>{cov_23vo0f3ny8().f[26]++;cov_23vo0f3ny8().s[136]++;assert.ok(startTimestamp);cov_23vo0f3ny8().s[137]++;assert.strictEqual(typeof startTimestamp.nanos,'number');cov_23vo0f3ny8().s[138]++;assert.strictEqual(typeof startTimestamp.seconds,'number');cov_23vo0f3ny8().s[139]++;assert.deepStrictEqual(startTimestamp,mockStartTimestamp);});}}cov_23vo0f3ny8().s[140]++;it('should have labelValues',()=>{cov_23vo0f3ny8().f[27]++;cov_23vo0f3ny8().s[141]++;assert.ok(labelValues);cov_23vo0f3ny8().s[142]++;assert.deepStrictEqual(labelValues,[{value:'testValue1'},{value:'testValue2'}]);});});}cov_23vo0f3ny8().s[143]++;describe('DISTRIBUTION aggregation type',()=>{cov_23vo0f3ny8().f[28]++;const view=(cov_23vo0f3ny8().s[144]++,new src_1.BaseView('test/view/name',measure,types_2.AggregationType.DISTRIBUTION,tagKeys,'description test',buckets));let total=(cov_23vo0f3ny8().s[145]++,0);cov_23vo0f3ny8().s[146]++;for(const value of measurementValues){cov_23vo0f3ny8().s[147]++;total+=value;const measurement=(cov_23vo0f3ny8().s[148]++,{measure,value});cov_23vo0f3ny8().s[149]++;view.recordMeasurement(measurement,tags);}cov_23vo0f3ny8().s[150]++;it('should have point',()=>{cov_23vo0f3ny8().f[29]++;const{timeseries}=(cov_23vo0f3ny8().s[151]++,view.getMetric(mockStartTime));const[{points,startTimestamp}]=(cov_23vo0f3ny8().s[152]++,timeseries);cov_23vo0f3ny8().s[153]++;assert.ok(points);const[point]=(cov_23vo0f3ny8().s[154]++,points);const{timestamp,value}=(cov_23vo0f3ny8().s[155]++,point);cov_23vo0f3ny8().s[156]++;assert.ok(timestamp);cov_23vo0f3ny8().s[157]++;assert.strictEqual(typeof timestamp.nanos,'number');cov_23vo0f3ny8().s[158]++;assert.strictEqual(typeof timestamp.seconds,'number');cov_23vo0f3ny8().s[159]++;assert.strictEqual(timestamp.seconds,mockedTime.seconds);cov_23vo0f3ny8().s[160]++;assert.strictEqual(timestamp.nanos,mockedTime.nanos);cov_23vo0f3ny8().s[161]++;assert.notStrictEqual(typeof value,'number');cov_23vo0f3ny8().s[162]++;assert.deepStrictEqual(value,{bucketOptions:{explicit:{bounds:buckets}},buckets:[{count:1},{count:2},{count:2},{count:0}],count:5,sum:total,sumOfSquaredDeviation:10.427999999999997});cov_23vo0f3ny8().s[163]++;assert.deepStrictEqual(startTimestamp,mockStartTimestamp);});});cov_23vo0f3ny8().s[164]++;describe('DISTRIBUTION aggregation type with exemplars',()=>{cov_23vo0f3ny8().f[30]++;const realNowFn=(cov_23vo0f3ny8().s[165]++,Date.now);cov_23vo0f3ny8().s[166]++;before(()=>{cov_23vo0f3ny8().f[31]++;cov_23vo0f3ny8().s[167]++;Date.now=()=>{cov_23vo0f3ny8().f[32]++;cov_23vo0f3ny8().s[168]++;return 1450000000000;};});cov_23vo0f3ny8().s[169]++;after(()=>{cov_23vo0f3ny8().f[33]++;cov_23vo0f3ny8().s[170]++;Date.now=realNowFn;});cov_23vo0f3ny8().s[171]++;it('should have point with attachments',()=>{cov_23vo0f3ny8().f[34]++;const view=(cov_23vo0f3ny8().s[172]++,new src_1.BaseView('test/view/name',measure,types_2.AggregationType.DISTRIBUTION,tagKeys,'description test',buckets));let total=(cov_23vo0f3ny8().s[173]++,0);const attachments=(cov_23vo0f3ny8().s[174]++,{k1:'v1',k2:'v2',k3:'v3'});cov_23vo0f3ny8().s[175]++;for(const value of measurementValues){cov_23vo0f3ny8().s[176]++;total+=value;const measurement=(cov_23vo0f3ny8().s[177]++,{measure,value});cov_23vo0f3ny8().s[178]++;view.recordMeasurement(measurement,tags,attachments);}const{timeseries}=(cov_23vo0f3ny8().s[179]++,view.getMetric(mockStartTime));const[{points,startTimestamp}]=(cov_23vo0f3ny8().s[180]++,timeseries);cov_23vo0f3ny8().s[181]++;assert.ok(points);const[point]=(cov_23vo0f3ny8().s[182]++,points);const{timestamp,value}=(cov_23vo0f3ny8().s[183]++,point);cov_23vo0f3ny8().s[184]++;assert.ok(timestamp);cov_23vo0f3ny8().s[185]++;assert.deepStrictEqual(value,{bucketOptions:{explicit:{bounds:buckets}},buckets:[{count:1,exemplar:{value:1.1,timestamp:{seconds:1450000000,nanos:0},attachments}},{count:2,exemplar:{value:3.2,timestamp:{seconds:1450000000,nanos:0},attachments}},{count:2,exemplar:{value:5.2,timestamp:{seconds:1450000000,nanos:0},attachments}},{count:0}],count:5,sum:total,sumOfSquaredDeviation:10.427999999999997});cov_23vo0f3ny8().s[186]++;assert.deepStrictEqual(startTimestamp,mockStartTimestamp);});cov_23vo0f3ny8().s[187]++;it('should have point with empty attachments',()=>{cov_23vo0f3ny8().f[35]++;const view=(cov_23vo0f3ny8().s[188]++,new src_1.BaseView('test/view/name',measure,types_2.AggregationType.DISTRIBUTION,tagKeys,'description test',buckets));let total=(cov_23vo0f3ny8().s[189]++,0);cov_23vo0f3ny8().s[190]++;for(const value of measurementValues){cov_23vo0f3ny8().s[191]++;total+=value;const measurement=(cov_23vo0f3ny8().s[192]++,{measure,value});cov_23vo0f3ny8().s[193]++;view.recordMeasurement(measurement,tags,{});}const{timeseries}=(cov_23vo0f3ny8().s[194]++,view.getMetric(mockStartTime));const[{points,startTimestamp}]=(cov_23vo0f3ny8().s[195]++,timeseries);cov_23vo0f3ny8().s[196]++;assert.ok(points);const[point]=(cov_23vo0f3ny8().s[197]++,points);const{timestamp,value}=(cov_23vo0f3ny8().s[198]++,point);cov_23vo0f3ny8().s[199]++;assert.ok(timestamp);cov_23vo0f3ny8().s[200]++;assert.deepStrictEqual(value,{bucketOptions:{explicit:{bounds:buckets}},buckets:[{count:1,exemplar:{value:1.1,timestamp:{seconds:1450000000,nanos:0},attachments:{}}},{count:2,exemplar:{value:3.2,timestamp:{seconds:1450000000,nanos:0},attachments:{}}},{count:2,exemplar:{value:5.2,timestamp:{seconds:1450000000,nanos:0},attachments:{}}},{count:0}],count:5,sum:total,sumOfSquaredDeviation:10.427999999999997});cov_23vo0f3ny8().s[201]++;assert.deepStrictEqual(startTimestamp,mockStartTimestamp);});});cov_23vo0f3ny8().s[202]++;describe('DISTRIBUTION aggregation type: record with measurements in succession from a single view and single measure',()=>{cov_23vo0f3ny8().f[36]++;const view=(cov_23vo0f3ny8().s[203]++,new src_1.BaseView('test/view/name',measure,types_2.AggregationType.DISTRIBUTION,tagKeys,'description test',buckets));let total=(cov_23vo0f3ny8().s[204]++,0);cov_23vo0f3ny8().s[205]++;for(const value of measurementValues){cov_23vo0f3ny8().s[206]++;total+=value;const measurement=(cov_23vo0f3ny8().s[207]++,{measure,value});const measurement1=(cov_23vo0f3ny8().s[208]++,{measure,value});cov_23vo0f3ny8().s[209]++;view.recordMeasurement(measurement,tags);cov_23vo0f3ny8().s[210]++;view.recordMeasurement(measurement1,tagMap);}cov_23vo0f3ny8().s[211]++;it('should have points',()=>{cov_23vo0f3ny8().f[37]++;const{timeseries}=(cov_23vo0f3ny8().s[212]++,view.getMetric(mockStartTime));cov_23vo0f3ny8().s[213]++;assert.strictEqual(timeseries.length,2);const[{labelValues:labelValues1,points:points1},{labelValues:labelValues2,points:points2}]=(cov_23vo0f3ny8().s[214]++,timeseries);cov_23vo0f3ny8().s[215]++;assert.ok(points1);let[point]=(cov_23vo0f3ny8().s[216]++,points1);let{timestamp,value}=(cov_23vo0f3ny8().s[217]++,point);cov_23vo0f3ny8().s[218]++;assert.ok(timestamp);cov_23vo0f3ny8().s[219]++;assert.strictEqual(typeof timestamp.nanos,'number');cov_23vo0f3ny8().s[220]++;assert.strictEqual(typeof timestamp.seconds,'number');cov_23vo0f3ny8().s[221]++;assert.strictEqual(timestamp.seconds,mockedTime.seconds);cov_23vo0f3ny8().s[222]++;assert.strictEqual(timestamp.nanos,mockedTime.nanos);cov_23vo0f3ny8().s[223]++;assert.notStrictEqual(typeof value,'number');cov_23vo0f3ny8().s[224]++;assert.deepStrictEqual(value,{bucketOptions:{explicit:{bounds:buckets}},buckets:[{count:1},{count:2},{count:2},{count:0}],count:5,sum:total,sumOfSquaredDeviation:10.427999999999997});cov_23vo0f3ny8().s[225]++;assert.deepStrictEqual(labelValues1,[{value:'testValue1'},{value:'testValue2'}]);cov_23vo0f3ny8().s[226]++;assert.ok(points2);cov_23vo0f3ny8().s[227]++;[point]=points2;cov_23vo0f3ny8().s[228]++;({timestamp,value}=point);cov_23vo0f3ny8().s[229]++;assert.ok(timestamp);cov_23vo0f3ny8().s[230]++;assert.strictEqual(typeof timestamp.nanos,'number');cov_23vo0f3ny8().s[231]++;assert.strictEqual(typeof timestamp.seconds,'number');cov_23vo0f3ny8().s[232]++;assert.strictEqual(timestamp.seconds,mockedTime.seconds);cov_23vo0f3ny8().s[233]++;assert.strictEqual(timestamp.nanos,mockedTime.nanos);cov_23vo0f3ny8().s[234]++;assert.notStrictEqual(typeof value,'number');cov_23vo0f3ny8().s[235]++;assert.deepStrictEqual(value,{bucketOptions:{explicit:{bounds:buckets}},buckets:[{count:1},{count:2},{count:2},{count:0}],count:5,sum:total,sumOfSquaredDeviation:10.427999999999997});cov_23vo0f3ny8().s[236]++;assert.deepStrictEqual(labelValues2,[{value:'testValue3'},{value:'testValue4'}]);});});cov_23vo0f3ny8().s[237]++;describe('COUNT aggregation type',()=>{cov_23vo0f3ny8().f[38]++;const view=(cov_23vo0f3ny8().s[238]++,new src_1.BaseView('test/view/name',measure,types_2.AggregationType.COUNT,tagKeys,'description test',buckets));cov_23vo0f3ny8().s[239]++;for(const value of measurementValues){const measurement=(cov_23vo0f3ny8().s[240]++,{measure,value});cov_23vo0f3ny8().s[241]++;view.recordMeasurement(measurement,tags);}cov_23vo0f3ny8().s[242]++;it('should have point',()=>{cov_23vo0f3ny8().f[39]++;const{timeseries}=(cov_23vo0f3ny8().s[243]++,view.getMetric(mockStartTime));const[{points,startTimestamp}]=(cov_23vo0f3ny8().s[244]++,timeseries);cov_23vo0f3ny8().s[245]++;assert.ok(points);const[point]=(cov_23vo0f3ny8().s[246]++,points);const{timestamp,value}=(cov_23vo0f3ny8().s[247]++,point);cov_23vo0f3ny8().s[248]++;assert.ok(timestamp);cov_23vo0f3ny8().s[249]++;assert.strictEqual(typeof timestamp.nanos,'number');cov_23vo0f3ny8().s[250]++;assert.strictEqual(typeof timestamp.seconds,'number');cov_23vo0f3ny8().s[251]++;assert.strictEqual(timestamp.seconds,mockedTime.seconds);cov_23vo0f3ny8().s[252]++;assert.strictEqual(timestamp.nanos,mockedTime.nanos);cov_23vo0f3ny8().s[253]++;assert.strictEqual(typeof value,'number');cov_23vo0f3ny8().s[254]++;assert.strictEqual(value,5);cov_23vo0f3ny8().s[255]++;assert.deepStrictEqual(startTimestamp,mockStartTimestamp);});});cov_23vo0f3ny8().s[256]++;describe('SUM aggregation type',()=>{cov_23vo0f3ny8().f[40]++;const view=(cov_23vo0f3ny8().s[257]++,new src_1.BaseView('test/view/name',measure,types_2.AggregationType.SUM,tagKeys,'description test',buckets));let total=(cov_23vo0f3ny8().s[258]++,0);cov_23vo0f3ny8().s[259]++;for(const value of measurementValues){cov_23vo0f3ny8().s[260]++;total+=value;const measurement=(cov_23vo0f3ny8().s[261]++,{measure,value});cov_23vo0f3ny8().s[262]++;view.recordMeasurement(measurement,tags);}cov_23vo0f3ny8().s[263]++;it('should have point',()=>{cov_23vo0f3ny8().f[41]++;const{timeseries}=(cov_23vo0f3ny8().s[264]++,view.getMetric(mockStartTime));const[{points,startTimestamp}]=(cov_23vo0f3ny8().s[265]++,timeseries);cov_23vo0f3ny8().s[266]++;assert.ok(points);const[point]=(cov_23vo0f3ny8().s[267]++,points);const{timestamp,value}=(cov_23vo0f3ny8().s[268]++,point);cov_23vo0f3ny8().s[269]++;assert.ok(timestamp);cov_23vo0f3ny8().s[270]++;assert.strictEqual(typeof timestamp.nanos,'number');cov_23vo0f3ny8().s[271]++;assert.strictEqual(typeof timestamp.seconds,'number');cov_23vo0f3ny8().s[272]++;assert.strictEqual(timestamp.seconds,mockedTime.seconds);cov_23vo0f3ny8().s[273]++;assert.strictEqual(timestamp.nanos,mockedTime.nanos);cov_23vo0f3ny8().s[274]++;assert.strictEqual(typeof value,'number');cov_23vo0f3ny8().s[275]++;assert.strictEqual(value,total);cov_23vo0f3ny8().s[276]++;assert.deepStrictEqual(startTimestamp,mockStartTimestamp);});});cov_23vo0f3ny8().s[277]++;describe('LAST_VALUE aggregation type',()=>{cov_23vo0f3ny8().f[42]++;const view=(cov_23vo0f3ny8().s[278]++,new src_1.BaseView('test/view/name',measure,types_2.AggregationType.LAST_VALUE,tagKeys,'description test',buckets));cov_23vo0f3ny8().s[279]++;for(const value of measurementValues){const measurement=(cov_23vo0f3ny8().s[280]++,{measure,value});cov_23vo0f3ny8().s[281]++;view.recordMeasurement(measurement,tags);}cov_23vo0f3ny8().s[282]++;it('should have point',()=>{cov_23vo0f3ny8().f[43]++;const{timeseries}=(cov_23vo0f3ny8().s[283]++,view.getMetric(mockStartTime));const[{points,startTimestamp}]=(cov_23vo0f3ny8().s[284]++,timeseries);cov_23vo0f3ny8().s[285]++;assert.ok(points);const[point]=(cov_23vo0f3ny8().s[286]++,points);const{timestamp,value}=(cov_23vo0f3ny8().s[287]++,point);cov_23vo0f3ny8().s[288]++;assert.strictEqual(timestamp.seconds,mockedTime.seconds);cov_23vo0f3ny8().s[289]++;assert.strictEqual(timestamp.nanos,mockedTime.nanos);cov_23vo0f3ny8().s[290]++;assert.strictEqual(typeof value,'number');cov_23vo0f3ny8().s[291]++;assert.strictEqual(value,measurementValues[measurementValues.length-1]);cov_23vo0f3ny8().s[292]++;assert.strictEqual(startTimestamp,undefined);});});});cov_23vo0f3ny8().s[293]++;describe('getSnapshots()',()=>{cov_23vo0f3ny8().f[44]++;let view;const tagKey1=(cov_23vo0f3ny8().s[294]++,{name:'testKey1'});const tagKey2=(cov_23vo0f3ny8().s[295]++,{name:'testKey2'});const tagKeys=(cov_23vo0f3ny8().s[296]++,[tagKey1,tagKey2]);const tagValue1=(cov_23vo0f3ny8().s[297]++,{value:'testValue1'});const tagValue2=(cov_23vo0f3ny8().s[298]++,{value:'testValue2'});const tags=(cov_23vo0f3ny8().s[299]++,new src_1.TagMap());cov_23vo0f3ny8().s[300]++;tags.set(tagKey1,tagValue1);cov_23vo0f3ny8().s[301]++;tags.set(tagKey2,tagValue2);cov_23vo0f3ny8().s[302]++;before(()=>{cov_23vo0f3ny8().f[45]++;cov_23vo0f3ny8().s[303]++;view=new src_1.BaseView('test/view/name',measure,types_2.AggregationType.LAST_VALUE,tagKeys,'description test');const measurement=(cov_23vo0f3ny8().s[304]++,{measure,value:10});cov_23vo0f3ny8().s[305]++;view.recordMeasurement(measurement,tags);});cov_23vo0f3ny8().s[306]++;it('should not get aggregation data when wrong tags values are given',()=>{cov_23vo0f3ny8().f[46]++;cov_23vo0f3ny8().s[307]++;assert.ok(!view.getSnapshot([{value:'wrongTagValue'},{value:'wrongTagValue'}]));});cov_23vo0f3ny8().s[308]++;it('should not get aggregation data when not enough tags are given',()=>{cov_23vo0f3ny8().f[47]++;cov_23vo0f3ny8().s[309]++;assert.ok(!view.getSnapshot([tagValue1]));});cov_23vo0f3ny8().s[310]++;it('should get aggregation data when tags are correct',()=>{cov_23vo0f3ny8().f[48]++;cov_23vo0f3ny8().s[311]++;assert.ok(view.getSnapshot([tagValue1,tagValue2]));});});});//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,