{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/gauges/derived-gauge.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/gauges/derived-gauge.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getTimestampWithProcessHRTime } from '../../common/time-util';\nimport {\n  validateArrayElementsNotNull,\n  validateNotNull,\n} from '../../common/validations';\nimport {\n  LabelKey,\n  LabelValue,\n  Metric,\n  MetricDescriptor,\n  MetricDescriptorType,\n  TimeSeries,\n  Timestamp,\n} from '../export/types';\nimport * as types from '../types';\nimport { AccessorInterface } from '../types';\nimport * as util from '../utils';\n\ntype ValueExtractor = () => number;\n\ninterface GaugeEntry {\n  readonly labelValues: LabelValue[];\n  readonly extractor: ValueExtractor;\n}\n\n/**\n * DerivedGauge metric\n */\nexport class DerivedGauge implements types.Meter {\n  private metricDescriptor: MetricDescriptor;\n  private labelKeysLength: number;\n  private registeredPoints: Map<string, GaugeEntry> = new Map();\n  private extractor?: ValueExtractor;\n  private readonly constantLabelValues: LabelValue[];\n\n  private static readonly LABEL_VALUE = 'labelValue';\n  private static readonly LABEL_VALUES = 'labelValues';\n  private static readonly OBJECT = 'obj';\n  private static readonly ERROR_MESSAGE_INVALID_SIZE =\n    \"Label Keys and Label Values don't have same size\";\n  private static readonly ERROR_MESSAGE_DUPLICATE_TIME_SERIES =\n    'A different time series with the same labels already exists.';\n  private static readonly ERROR_MESSAGE_UNKNOWN_INTERFACE =\n    'Unknown interface/object type';\n\n  /**\n   * Constructs a new DerivedGauge instance.\n   *\n   * @param name The name of the metric.\n   * @param description The description of the metric.\n   * @param unit The unit of the metric.\n   * @param type The type of metric.\n   * @param labelKeys The list of the label keys.\n   * @param constantLabels The map of constant labels for the Metric.\n   */\n  constructor(\n    name: string,\n    description: string,\n    unit: string,\n    type: MetricDescriptorType,\n    labelKeys: LabelKey[],\n    readonly constantLabels: Map<LabelKey, LabelValue>\n  ) {\n    this.labelKeysLength = labelKeys.length;\n    const keysAndConstantKeys = [...labelKeys, ...constantLabels.keys()];\n    this.constantLabelValues = [...constantLabels.values()];\n\n    this.metricDescriptor = {\n      name,\n      description,\n      unit,\n      type,\n      labelKeys: keysAndConstantKeys,\n    };\n  }\n\n  /**\n   * Creates a TimeSeries. The value of a single point in the TimeSeries is\n   * observed from a obj or a function. The ValueExtractor is invoked whenever\n   * metrics are collected, meaning the reported value is up-to-date.\n   *\n   * @param labelValues The list of the label values.\n   * @param objOrFn obj The obj to get the size or length or value from. If\n   *     multiple options are available, the value (ToValueInterface) takes\n   *     precedence first, followed by length and size. e.g value -> length ->\n   *     size.\n   *     fn is the function that will be called to get the current value\n   *     of the gauge.\n   */\n  createTimeSeries(\n    labelValues: LabelValue[],\n    objOrFn: AccessorInterface\n  ): void {\n    validateArrayElementsNotNull(\n      validateNotNull(labelValues, DerivedGauge.LABEL_VALUES),\n      DerivedGauge.LABEL_VALUE\n    );\n    validateNotNull(objOrFn, DerivedGauge.OBJECT);\n\n    const hash = util.hashLabelValues(labelValues);\n    if (this.registeredPoints.has(hash)) {\n      throw new Error(DerivedGauge.ERROR_MESSAGE_DUPLICATE_TIME_SERIES);\n    }\n    if (this.labelKeysLength !== labelValues.length) {\n      throw new Error(DerivedGauge.ERROR_MESSAGE_INVALID_SIZE);\n    }\n\n    if (objOrFn instanceof Function) {\n      this.extractor = objOrFn;\n    } else if (util.isToValueInterface(objOrFn)) {\n      this.extractor = () => objOrFn.getValue();\n    } else if (util.isLengthAttributeInterface(objOrFn)) {\n      this.extractor = () => objOrFn.length;\n    } else if (util.isLengthMethodInterface(objOrFn)) {\n      this.extractor = () => objOrFn.length();\n    } else if (util.isSizeAttributeInterface(objOrFn)) {\n      this.extractor = () => objOrFn.size;\n    } else if (util.isSizeMethodInterface(objOrFn)) {\n      this.extractor = () => objOrFn.size();\n    } else {\n      throw new Error(DerivedGauge.ERROR_MESSAGE_UNKNOWN_INTERFACE);\n    }\n\n    this.registeredPoints.set(hash, { labelValues, extractor: this.extractor });\n  }\n\n  /**\n   * Removes the TimeSeries from the gauge metric, if it is present. i.e.\n   * references to previous Point objects are invalid (not part of the\n   * metric).\n   *\n   * @param labelValues The list of label values.\n   */\n  removeTimeSeries(labelValues: LabelValue[]): void {\n    validateNotNull(labelValues, DerivedGauge.LABEL_VALUES);\n    this.registeredPoints.delete(util.hashLabelValues(labelValues));\n  }\n\n  /**\n   * Removes all TimeSeries from the gauge metric. i.e. references to all\n   * previous Point objects are invalid (not part of the metric).\n   */\n  clear(): void {\n    this.registeredPoints.clear();\n  }\n\n  /**\n   * Provides a Metric with one or more TimeSeries.\n   *\n   * @returns The Metric, or null if TimeSeries is not present in Metric.\n   */\n  getMetric(): Metric | null {\n    if (this.registeredPoints.size === 0) {\n      return null;\n    }\n    const timestamp: Timestamp = getTimestampWithProcessHRTime();\n    return {\n      descriptor: this.metricDescriptor,\n      timeseries: Array.from(\n        this.registeredPoints,\n        ([_, gaugeEntry]): TimeSeries => ({\n          labelValues: [...gaugeEntry.labelValues, ...this.constantLabelValues],\n          points: [{ value: gaugeEntry.extractor(), timestamp }],\n        })\n      ),\n    };\n  }\n}\n"]}