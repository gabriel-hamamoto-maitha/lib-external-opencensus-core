"use strict";/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_t6l56mgpz(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/instrumentation/base-plugin.ts";var hash="336db10be7e0d09ca3533cc6137e62a34f4d23b6";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/instrumentation/base-plugin.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:0},end:{line:18,column:28}},"2":{start:{line:19,column:13},end:{line:19,column:28}},"3":{start:{line:20,column:15},end:{line:20,column:32}},"4":{start:{line:21,column:22},end:{line:21,column:57}},"5":{start:{line:30,column:8},end:{line:30,column:47}},"6":{start:{line:31,column:8},end:{line:31,column:37}},"7":{start:{line:45,column:8},end:{line:45,column:43}},"8":{start:{line:46,column:8},end:{line:46,column:29}},"9":{start:{line:47,column:8},end:{line:47,column:31}},"10":{start:{line:48,column:8},end:{line:49,column:35}},"11":{start:{line:49,column:12},end:{line:49,column:35}},"12":{start:{line:50,column:8},end:{line:50,column:36}},"13":{start:{line:51,column:8},end:{line:51,column:31}},"14":{start:{line:52,column:8},end:{line:52,column:27}},"15":{start:{line:53,column:8},end:{line:53,column:61}},"16":{start:{line:70,column:8},end:{line:70,column:87}},"17":{start:{line:71,column:8},end:{line:71,column:33}},"18":{start:{line:75,column:8},end:{line:75,column:28}},"19":{start:{line:81,column:21},end:{line:81,column:23}},"20":{start:{line:82,column:8},end:{line:95,column:9}},"21":{start:{line:83,column:12},end:{line:83,column:77}},"22":{start:{line:84,column:12},end:{line:91,column:15}},"23":{start:{line:85,column:16},end:{line:90,column:17}},"24":{start:{line:86,column:20},end:{line:88,column:21}},"25":{start:{line:87,column:24},end:{line:87,column:184}},"26":{start:{line:89,column:20},end:{line:89,column:109}},"27":{start:{line:92,column:12},end:{line:94,column:13}},"28":{start:{line:93,column:16},end:{line:93,column:111}},"29":{start:{line:96,column:8},end:{line:96,column:22}},"30":{start:{line:102,column:29},end:{line:102,column:31}},"31":{start:{line:103,column:8},end:{line:113,column:9}},"32":{start:{line:104,column:12},end:{line:112,column:15}},"33":{start:{line:105,column:16},end:{line:111,column:17}},"34":{start:{line:106,column:20},end:{line:106,column:87}},"35":{start:{line:107,column:20},end:{line:107,column:105}},"36":{start:{line:110,column:20},end:{line:110,column:175}},"37":{start:{line:114,column:8},end:{line:114,column:28}},"38":{start:{line:117,column:0},end:{line:117,column:32}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:28,column:4},end:{line:28,column:5}},loc:{start:{line:28,column:28},end:{line:32,column:5}},line:28},"1":{name:"(anonymous_1)",decl:{start:{line:42,column:4},end:{line:42,column:5}},loc:{start:{line:44,column:61},end:{line:54,column:5}},line:44},"2":{name:"(anonymous_2)",decl:{start:{line:69,column:4},end:{line:69,column:5}},loc:{start:{line:69,column:68},end:{line:72,column:5}},line:69},"3":{name:"(anonymous_3)",decl:{start:{line:74,column:4},end:{line:74,column:5}},loc:{start:{line:74,column:14},end:{line:76,column:5}},line:74},"4":{name:"(anonymous_4)",decl:{start:{line:80,column:4},end:{line:80,column:5}},loc:{start:{line:80,column:24},end:{line:97,column:5}},line:80},"5":{name:"(anonymous_5)",decl:{start:{line:84,column:55},end:{line:84,column:56}},loc:{start:{line:84,column:71},end:{line:91,column:13}},line:84},"6":{name:"(anonymous_6)",decl:{start:{line:101,column:4},end:{line:101,column:5}},loc:{start:{line:101,column:55},end:{line:115,column:5}},line:101},"7":{name:"(anonymous_7)",decl:{start:{line:104,column:50},end:{line:104,column:51}},loc:{start:{line:104,column:64},end:{line:112,column:13}},line:104}},branchMap:{"0":{loc:{start:{line:48,column:8},end:{line:49,column:35}},type:"if",locations:[{start:{line:48,column:8},end:{line:49,column:35}},{start:{line:48,column:8},end:{line:49,column:35}}],line:48},"1":{loc:{start:{line:82,column:8},end:{line:95,column:9}},type:"if",locations:[{start:{line:82,column:8},end:{line:95,column:9}},{start:{line:82,column:8},end:{line:95,column:9}}],line:82},"2":{loc:{start:{line:85,column:16},end:{line:90,column:17}},type:"if",locations:[{start:{line:85,column:16},end:{line:90,column:17}},{start:{line:85,column:16},end:{line:90,column:17}}],line:85},"3":{loc:{start:{line:86,column:20},end:{line:88,column:21}},type:"if",locations:[{start:{line:86,column:20},end:{line:88,column:21}},{start:{line:86,column:20},end:{line:88,column:21}}],line:86},"4":{loc:{start:{line:92,column:12},end:{line:94,column:13}},type:"if",locations:[{start:{line:92,column:12},end:{line:94,column:13}},{start:{line:92,column:12},end:{line:94,column:13}}],line:92},"5":{loc:{start:{line:103,column:8},end:{line:113,column:9}},type:"if",locations:[{start:{line:103,column:8},end:{line:113,column:9}},{start:{line:103,column:8},end:{line:113,column:9}}],line:103}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/instrumentation/base-plugin.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/instrumentation/base-plugin.ts"],names:[],mappings:"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",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as path from 'path';\nimport * as semver from 'semver';\nimport { noopLogger } from '../../common/noop-logger';\nimport { Logger } from '../../common/types';\nimport { Stats } from '../../stats/types';\nimport * as modelTypes from '../model/types';\nimport * as types from './types';\n\n/**\n * Maps a name (key) representing a internal file module and its exports\n */\nexport interface ModuleExportsMapping {\n  // tslint:disable-next-line:no-any\n  [key: string]: any;\n}\n\n/** This class represent the base to patch plugin. */\nexport abstract class BasePlugin implements types.Plugin {\n  /** Exports from the nodejs module to be instrumented */\n  // tslint:disable-next-line:no-any\n  protected moduleExports: any;\n  /** The module name */\n  protected moduleName: string;\n  /** A tracer object. */\n  protected tracer!: modelTypes.Tracer;\n  /** The module version. */\n  protected version!: string;\n  /** a logger */\n  protected logger: Logger = noopLogger;\n  /** list of internal files that need patch and are not exported by default */\n  protected readonly internalFileList!: types.PluginInternalFiles;\n  /**  internal files loaded */\n  protected internalFilesExports!: ModuleExportsMapping;\n  /** module directory - used to load internal files */\n  protected basedir!: string;\n  /** plugin options */\n  protected options!: types.PluginConfig;\n  /** A stats object. */\n  protected stats?: Stats;\n\n  /**\n   * Constructs a new BasePlugin instance.\n   * @param moduleName The module name.\n   */\n  constructor(moduleName: string) {\n    this.moduleName = moduleName;\n  }\n\n  /**\n   * Sets modified plugin to the context.\n   * @param moduleExports nodejs module exports to set as context\n   * @param tracer tracer relating to context\n   * @param version module version description\n   * @param options plugin options\n   * @param basedir module absolute path\n   * @param stats a stats instance\n   */\n  private setPluginContext(\n    // tslint:disable-next-line:no-any\n    moduleExports: any,\n    tracer: modelTypes.Tracer,\n    version: string,\n    options: types.PluginConfig,\n    basedir?: string,\n    stats?: Stats\n  ) {\n    this.moduleExports = moduleExports;\n    this.tracer = tracer;\n    this.version = version;\n    if (basedir) this.basedir = basedir;\n    this.logger = tracer.logger;\n    this.options = options;\n    this.stats = stats;\n    this.internalFilesExports = this.loadInternalFiles();\n  }\n\n  /**\n   * Method that enables the instrumentation patch.\n   *\n   * This method implements the GoF Template Method Pattern\n   * 'enable' is the invariant part of the pattern and\n   * 'applyPatch' the variant.\n   *\n   * @param moduleExports nodejs module exports from the module to patch\n   * @param tracer a tracer instance\n   * @param version version of the current instaled module to patch\n   * @param options plugin options\n   * @param basedir an optional module absolute path\n   * @param stats an optional stats instance\n   */\n  enable<T>(\n    moduleExports: T,\n    tracer: modelTypes.Tracer,\n    version: string,\n    options: types.PluginConfig,\n    basedir?: string,\n    stats?: Stats\n  ) {\n    this.setPluginContext(\n      moduleExports,\n      tracer,\n      version,\n      options,\n      basedir,\n      stats\n    );\n    return this.applyPatch();\n  }\n\n  /** Method to disable the instrumentation  */\n  disable() {\n    this.applyUnpatch();\n  }\n\n  /**\n   * This method implements the GoF Template Method Pattern,\n   * 'applyPatch' is the variant part, each instrumentation should\n   * implement its own version, 'enable' method is the invariant.\n   * It will be called when enable is called.\n   *\n   */\n  // tslint:disable-next-line:no-any\n  protected abstract applyPatch(): any;\n  protected abstract applyUnpatch(): void;\n\n  /**\n   * Load internal files according to version range\n   */\n  private loadInternalFiles(): ModuleExportsMapping {\n    let result: ModuleExportsMapping = {};\n    if (this.internalFileList) {\n      this.logger.debug('loadInternalFiles %o', this.internalFileList);\n      Object.keys(this.internalFileList).forEach(versionRange => {\n        if (semver.satisfies(this.version, versionRange)) {\n          if (result) {\n            this.logger.warn(\n              'Plugin for %s@%s, has overlap version range (%s) for internal files: %o',\n              this.moduleName,\n              this.version,\n              versionRange,\n              this.internalFileList\n            );\n          }\n          result = this.loadInternalModuleFiles(\n            this.internalFileList[versionRange],\n            this.basedir\n          );\n        }\n      });\n      if (Object.keys(result).length === 0) {\n        this.logger.debug(\n          'No internal file could be loaded for %s@%s',\n          this.moduleName,\n          this.version\n        );\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Load internal files from a module and  set internalFilesExports\n   */\n  private loadInternalModuleFiles(\n    extraModulesList: types.PluginInternalFilesVersion,\n    basedir: string\n  ): ModuleExportsMapping {\n    const extraModules: ModuleExportsMapping = {};\n    if (extraModulesList) {\n      Object.keys(extraModulesList).forEach(moduleName => {\n        try {\n          this.logger.debug('loading File %s', extraModulesList[moduleName]);\n          extraModules[moduleName] = require(path.join(\n            basedir,\n            extraModulesList[moduleName]\n          ));\n        } catch (e) {\n          this.logger.error(\n            'Could not load internal file %s of module %s. Error: %s',\n            path.join(basedir, extraModulesList[moduleName]),\n            this.moduleName,\n            e.message\n          );\n        }\n      });\n    }\n    return extraModules;\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"336db10be7e0d09ca3533cc6137e62a34f4d23b6"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_t6l56mgpz=function(){return actualCoverage;};}return actualCoverage;}cov_t6l56mgpz();cov_t6l56mgpz().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_t6l56mgpz().s[1]++;exports.BasePlugin=void 0;const path=(cov_t6l56mgpz().s[2]++,require("path"));const semver=(cov_t6l56mgpz().s[3]++,require("semver"));const noop_logger_1=(cov_t6l56mgpz().s[4]++,require("../../common/noop-logger"));/** This class represent the base to patch plugin. */class BasePlugin{/**
     * Constructs a new BasePlugin instance.
     * @param moduleName The module name.
     */constructor(moduleName){cov_t6l56mgpz().f[0]++;cov_t6l56mgpz().s[5]++;/** a logger */this.logger=noop_logger_1.noopLogger;cov_t6l56mgpz().s[6]++;this.moduleName=moduleName;}/**
     * Sets modified plugin to the context.
     * @param moduleExports nodejs module exports to set as context
     * @param tracer tracer relating to context
     * @param version module version description
     * @param options plugin options
     * @param basedir module absolute path
     * @param stats a stats instance
     */setPluginContext(// tslint:disable-next-line:no-any
moduleExports,tracer,version,options,basedir,stats){cov_t6l56mgpz().f[1]++;cov_t6l56mgpz().s[7]++;this.moduleExports=moduleExports;cov_t6l56mgpz().s[8]++;this.tracer=tracer;cov_t6l56mgpz().s[9]++;this.version=version;cov_t6l56mgpz().s[10]++;if(basedir){cov_t6l56mgpz().b[0][0]++;cov_t6l56mgpz().s[11]++;this.basedir=basedir;}else{cov_t6l56mgpz().b[0][1]++;}cov_t6l56mgpz().s[12]++;this.logger=tracer.logger;cov_t6l56mgpz().s[13]++;this.options=options;cov_t6l56mgpz().s[14]++;this.stats=stats;cov_t6l56mgpz().s[15]++;this.internalFilesExports=this.loadInternalFiles();}/**
     * Method that enables the instrumentation patch.
     *
     * This method implements the GoF Template Method Pattern
     * 'enable' is the invariant part of the pattern and
     * 'applyPatch' the variant.
     *
     * @param moduleExports nodejs module exports from the module to patch
     * @param tracer a tracer instance
     * @param version version of the current instaled module to patch
     * @param options plugin options
     * @param basedir an optional module absolute path
     * @param stats an optional stats instance
     */enable(moduleExports,tracer,version,options,basedir,stats){cov_t6l56mgpz().f[2]++;cov_t6l56mgpz().s[16]++;this.setPluginContext(moduleExports,tracer,version,options,basedir,stats);cov_t6l56mgpz().s[17]++;return this.applyPatch();}/** Method to disable the instrumentation  */disable(){cov_t6l56mgpz().f[3]++;cov_t6l56mgpz().s[18]++;this.applyUnpatch();}/**
     * Load internal files according to version range
     */loadInternalFiles(){cov_t6l56mgpz().f[4]++;let result=(cov_t6l56mgpz().s[19]++,{});cov_t6l56mgpz().s[20]++;if(this.internalFileList){cov_t6l56mgpz().b[1][0]++;cov_t6l56mgpz().s[21]++;this.logger.debug('loadInternalFiles %o',this.internalFileList);cov_t6l56mgpz().s[22]++;Object.keys(this.internalFileList).forEach(versionRange=>{cov_t6l56mgpz().f[5]++;cov_t6l56mgpz().s[23]++;if(semver.satisfies(this.version,versionRange)){cov_t6l56mgpz().b[2][0]++;cov_t6l56mgpz().s[24]++;if(result){cov_t6l56mgpz().b[3][0]++;cov_t6l56mgpz().s[25]++;this.logger.warn('Plugin for %s@%s, has overlap version range (%s) for internal files: %o',this.moduleName,this.version,versionRange,this.internalFileList);}else{cov_t6l56mgpz().b[3][1]++;}cov_t6l56mgpz().s[26]++;result=this.loadInternalModuleFiles(this.internalFileList[versionRange],this.basedir);}else{cov_t6l56mgpz().b[2][1]++;}});cov_t6l56mgpz().s[27]++;if(Object.keys(result).length===0){cov_t6l56mgpz().b[4][0]++;cov_t6l56mgpz().s[28]++;this.logger.debug('No internal file could be loaded for %s@%s',this.moduleName,this.version);}else{cov_t6l56mgpz().b[4][1]++;}}else{cov_t6l56mgpz().b[1][1]++;}cov_t6l56mgpz().s[29]++;return result;}/**
     * Load internal files from a module and  set internalFilesExports
     */loadInternalModuleFiles(extraModulesList,basedir){cov_t6l56mgpz().f[6]++;const extraModules=(cov_t6l56mgpz().s[30]++,{});cov_t6l56mgpz().s[31]++;if(extraModulesList){cov_t6l56mgpz().b[5][0]++;cov_t6l56mgpz().s[32]++;Object.keys(extraModulesList).forEach(moduleName=>{cov_t6l56mgpz().f[7]++;cov_t6l56mgpz().s[33]++;try{cov_t6l56mgpz().s[34]++;this.logger.debug('loading File %s',extraModulesList[moduleName]);cov_t6l56mgpz().s[35]++;extraModules[moduleName]=require(path.join(basedir,extraModulesList[moduleName]));}catch(e){cov_t6l56mgpz().s[36]++;this.logger.error('Could not load internal file %s of module %s. Error: %s',path.join(basedir,extraModulesList[moduleName]),this.moduleName,e.message);}});}else{cov_t6l56mgpz().b[5][1]++;}cov_t6l56mgpz().s[37]++;return extraModules;}}cov_t6l56mgpz().s[38]++;exports.BasePlugin=BasePlugin;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,