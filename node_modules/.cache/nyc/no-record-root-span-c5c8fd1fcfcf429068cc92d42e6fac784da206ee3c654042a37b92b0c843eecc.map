{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/no-record/no-record-root-span.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/model/no-record/no-record-root-span.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,yDAAyD;AAEzD,qDAAgD;AAEhD,2EAA2E;AAC3E,MAAa,gBAAiB,SAAQ,6BAAY;IAahD;;;;;;;;;OASG;IACH,YACE,MAAwB,EACxB,IAAY,EACZ,IAAoB,EACpB,OAAe,EACf,YAAoB,EACpB,UAA6B;QAE7B,KAAK,CAAC,MAAM,CAAC,CAAC;QACd,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC;QAC5B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,iBAAiB,GAAG,YAAY,CAAC;QACtC,IAAI,UAAU,EAAE;YACd,IAAI,CAAC,eAAe,GAAG,UAAU,CAAC;SACnC;QACD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;IACtD,CAAC;IAED,6CAA6C;IAC7C,UAAU;QACR,OAAO,IAAI,CAAC;IACd,CAAC;IAED,2CAA2C;IAC3C,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED,sCAAsC;IACtC,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAChC,CAAC;IAED,2CAA2C;IAC3C,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;IAED,2CAA2C;IAC3C,IAAI,gBAAgB;QAClB,OAAO,CAAC,CAAC;IACX,CAAC;IAED,2CAA2C;IAC3C,KAAK;QACH,KAAK,CAAC,KAAK,EAAE,CAAC;IAChB,CAAC;IAED,2CAA2C;IAC3C,GAAG;QACD,KAAK,CAAC,GAAG,EAAE,CAAC;IACd,CAAC;CACF;AA7ED,4CA6EC","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as logger from '../../../common/console-logger';\nimport * as types from '../types';\nimport { NoRecordSpan } from './no-record-span';\n\n/** Implementation for the Span class that does not record trace events. */\nexport class NoRecordRootSpan extends NoRecordSpan {\n  /** Its trace ID. */\n  private traceIdLocal: string;\n  /** Its trace state. */\n  private traceStateLocal?: types.TraceState;\n  /**\n   * This span's parent Id.  This is a string and not a Span because the\n   * parent was likely started on another machine.\n   */\n  private parentSpanIdLocal: string;\n  /** A tracer object */\n  readonly tracer: types.TracerBase;\n\n  /**\n   * Constructs a new NoRecordRootSpanImpl instance.\n   * @param tracer A tracer object.\n   * @param name The displayed name for the new span.\n   * @param kind The kind of new span.\n   * @param traceId The trace Id.\n   * @param parentSpanId The id of the parent span, or empty if the new span is\n   *     a root span.\n   * @param traceState Optional traceState.\n   */\n  constructor(\n    tracer: types.TracerBase,\n    name: string,\n    kind: types.SpanKind,\n    traceId: string,\n    parentSpanId: string,\n    traceState?: types.TraceState\n  ) {\n    super(tracer);\n    this.tracer = tracer;\n    this.traceIdLocal = traceId;\n    this.name = name;\n    this.kind = kind;\n    this.parentSpanIdLocal = parentSpanId;\n    if (traceState) {\n      this.traceStateLocal = traceState;\n    }\n    this.logger = this.tracer.logger || logger.logger();\n  }\n\n  /** Returns whether a span is root or not. */\n  isRootSpan(): boolean {\n    return true;\n  }\n\n  /** No-op implementation of this method. */\n  get traceId(): string {\n    return this.traceIdLocal;\n  }\n\n  /** Gets the ID of the parent span. */\n  get parentSpanId(): string {\n    return this.parentSpanIdLocal;\n  }\n\n  /** No-op implementation of this method. */\n  get traceState(): types.TraceState | undefined {\n    return this.traceStateLocal;\n  }\n\n  /** No-op implementation of this method. */\n  get numberOfChildren(): number {\n    return 0;\n  }\n\n  /** No-op implementation of this method. */\n  start() {\n    super.start();\n  }\n\n  /** No-op implementation of this method. */\n  end() {\n    super.end();\n  }\n}\n"]}