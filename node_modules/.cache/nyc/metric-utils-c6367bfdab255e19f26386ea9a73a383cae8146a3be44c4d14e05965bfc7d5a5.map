{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/metric-utils.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/metric-utils.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,mDAIiC;AAEjC,mCAAsE;AAEtE,+DAA+D;AAC/D,MAAa,WAAW;IACtB;;;;;OAKG;IACK,MAAM,CAAC,OAAO,CACpB,OAAgB,EAChB,WAA4B;QAE5B,IAAI,WAAW,KAAK,uBAAe,CAAC,GAAG,EAAE;YACvC,QAAQ,OAAO,CAAC,IAAI,EAAE;gBACpB,KAAK,mBAAW,CAAC,KAAK;oBACpB,OAAO,4BAAoB,CAAC,gBAAgB,CAAC;gBAC/C,KAAK,mBAAW,CAAC,MAAM;oBACrB,OAAO,4BAAoB,CAAC,iBAAiB,CAAC;gBAChD;oBACE,MAAM,IAAI,KAAK,CAAC,wBAAwB,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;aAC3D;SACF;aAAM,IAAI,WAAW,KAAK,uBAAe,CAAC,KAAK,EAAE;YAChD,OAAO,4BAAoB,CAAC,gBAAgB,CAAC;SAC9C;aAAM,IAAI,WAAW,KAAK,uBAAe,CAAC,YAAY,EAAE;YACvD,OAAO,4BAAoB,CAAC,uBAAuB,CAAC;SACrD;aAAM,IAAI,WAAW,KAAK,uBAAe,CAAC,UAAU,EAAE;YACrD,QAAQ,OAAO,CAAC,IAAI,EAAE;gBACpB,KAAK,mBAAW,CAAC,KAAK;oBACpB,OAAO,4BAAoB,CAAC,WAAW,CAAC;gBAC1C,KAAK,mBAAW,CAAC,MAAM;oBACrB,OAAO,4BAAoB,CAAC,YAAY,CAAC;gBAC3C;oBACE,MAAM,IAAI,KAAK,CAAC,wBAAwB,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;aAC3D;SACF;QACD,MAAM,IAAI,KAAK,CAAC,4BAA4B,WAAW,EAAE,CAAC,CAAC;IAC7D,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,sBAAsB,CAAC,IAAU;QACtC,OAAO;YACL,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI;YACvB,IAAI,EAAE,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC;YACzD,SAAS,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,GAAG;YAC9B,mCAAmC;YACnC,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,MAAM,CAAC,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC,CAClD;SACF,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,sBAAsB,CAC3B,SAAiC;QAEjC,OAAO,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAChC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI;SACxC,CAAC,CAAC,CAAC;IACN,CAAC;CACF;AAnED,kCAmEC","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  LabelValue,\n  MetricDescriptor,\n  MetricDescriptorType,\n} from '../metrics/export/types';\nimport { TagValue } from '../tags/types';\nimport { AggregationType, Measure, MeasureType, View } from './types';\n\n/** Utils to convert Stats data models to Metric data models */\nexport class MetricUtils {\n  /**\n   * Gets the corresponding metric type for the given stats type.\n   * @param measure The measure for which to find a metric type\n   * @param aggregation The aggregation for which to find a metric type\n   * @returns The Type of metric descriptor\n   */\n  private static getType(\n    measure: Measure,\n    aggregation: AggregationType\n  ): MetricDescriptorType {\n    if (aggregation === AggregationType.SUM) {\n      switch (measure.type) {\n        case MeasureType.INT64:\n          return MetricDescriptorType.CUMULATIVE_INT64;\n        case MeasureType.DOUBLE:\n          return MetricDescriptorType.CUMULATIVE_DOUBLE;\n        default:\n          throw new Error(`Unknown measure type ${measure.type}`);\n      }\n    } else if (aggregation === AggregationType.COUNT) {\n      return MetricDescriptorType.CUMULATIVE_INT64;\n    } else if (aggregation === AggregationType.DISTRIBUTION) {\n      return MetricDescriptorType.CUMULATIVE_DISTRIBUTION;\n    } else if (aggregation === AggregationType.LAST_VALUE) {\n      switch (measure.type) {\n        case MeasureType.INT64:\n          return MetricDescriptorType.GAUGE_INT64;\n        case MeasureType.DOUBLE:\n          return MetricDescriptorType.GAUGE_DOUBLE;\n        default:\n          throw new Error(`Unknown measure type ${measure.type}`);\n      }\n    }\n    throw new Error(`Unknown aggregation type ${aggregation}`);\n  }\n\n  /**\n   * Gets a MetricDescriptor for given view.\n   * @param view The view for which to build a metric descriptor\n   * @returns The MetricDescriptor.\n   */\n  static viewToMetricDescriptor(view: View): MetricDescriptor {\n    return {\n      name: view.name,\n      description: view.description,\n      unit: view.measure.unit,\n      type: MetricUtils.getType(view.measure, view.aggregation),\n      labelKeys: view.getColumns().map(\n        // TODO(mayurkale): add description\n        tagKey => ({ key: tagKey.name, description: '' })\n      ),\n    };\n  }\n\n  /**\n   * Converts tag values to label values.\n   * @param tagValues the list of tag values\n   * @returns The List of label values\n   */\n  static tagValuesToLabelValues(\n    tagValues: Array<TagValue | null>\n  ): LabelValue[] {\n    return tagValues.map(tagValue => ({\n      value: tagValue ? tagValue.value : null,\n    }));\n  }\n}\n"]}