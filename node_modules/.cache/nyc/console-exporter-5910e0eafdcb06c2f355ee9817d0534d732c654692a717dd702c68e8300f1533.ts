"use strict";/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_1v9gh840nq(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/exporters/console-exporter.ts";var hash="b0bfc896c2109dacee73e810a3a54c727146adf6";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/exporters/console-exporter.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:0},end:{line:18,column:87}},"2":{start:{line:19,column:26},end:{line:19,column:54}},"3":{start:{line:20,column:15},end:{line:20,column:50}},"4":{start:{line:26,column:8},end:{line:26,column:33}},"5":{start:{line:29,column:0},end:{line:29,column:36}},"6":{start:{line:38,column:8},end:{line:38,column:73}},"7":{start:{line:39,column:8},end:{line:39,column:55}},"8":{start:{line:49,column:8},end:{line:50,column:19}},"9":{start:{line:50,column:12},end:{line:50,column:19}},"10":{start:{line:51,column:8},end:{line:51,column:38}},"11":{start:{line:58,column:8},end:{line:64,column:11}},"12":{start:{line:59,column:29},end:{line:59,column:108}},"13":{start:{line:60,column:30},end:{line:60,column:116}},"14":{start:{line:60,column:54},end:{line:60,column:115}},"15":{start:{line:61,column:27},end:{line:61,column:29}},"16":{start:{line:62,column:12},end:{line:62,column:84}},"17":{start:{line:63,column:12},end:{line:63,column:37}},"18":{start:{line:65,column:8},end:{line:65,column:33}},"19":{start:{line:68,column:0},end:{line:68,column:42}},"20":{start:{line:76,column:8},end:{line:76,column:95}},"21":{start:{line:85,column:8},end:{line:85,column:73}},"22":{start:{line:97,column:0},end:{line:97,column:52}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:23,column:4},end:{line:23,column:5}},loc:{start:{line:23,column:22},end:{line:23,column:25}},line:23},"1":{name:"(anonymous_1)",decl:{start:{line:24,column:4},end:{line:24,column:5}},loc:{start:{line:24,column:20},end:{line:24,column:23}},line:24},"2":{name:"(anonymous_2)",decl:{start:{line:25,column:4},end:{line:25,column:5}},loc:{start:{line:25,column:19},end:{line:27,column:5}},line:25},"3":{name:"(anonymous_3)",decl:{start:{line:37,column:4},end:{line:37,column:5}},loc:{start:{line:37,column:24},end:{line:40,column:5}},line:37},"4":{name:"(anonymous_4)",decl:{start:{line:41,column:4},end:{line:41,column:5}},loc:{start:{line:41,column:22},end:{line:41,column:25}},line:41},"5":{name:"(anonymous_5)",decl:{start:{line:46,column:4},end:{line:46,column:5}},loc:{start:{line:46,column:20},end:{line:52,column:5}},line:46},"6":{name:"(anonymous_6)",decl:{start:{line:57,column:4},end:{line:57,column:5}},loc:{start:{line:57,column:19},end:{line:66,column:5}},line:57},"7":{name:"(anonymous_7)",decl:{start:{line:58,column:18},end:{line:58,column:19}},loc:{start:{line:58,column:26},end:{line:64,column:9}},line:58},"8":{name:"(anonymous_8)",decl:{start:{line:60,column:45},end:{line:60,column:46}},loc:{start:{line:60,column:54},end:{line:60,column:115}},line:60},"9":{name:"(anonymous_9)",decl:{start:{line:75,column:4},end:{line:75,column:5}},loc:{start:{line:75,column:25},end:{line:77,column:5}},line:75},"10":{name:"(anonymous_10)",decl:{start:{line:84,column:4},end:{line:84,column:5}},loc:{start:{line:84,column:39},end:{line:86,column:5}},line:84},"11":{name:"(anonymous_11)",decl:{start:{line:91,column:4},end:{line:91,column:5}},loc:{start:{line:91,column:12},end:{line:93,column:5}},line:91},"12":{name:"(anonymous_12)",decl:{start:{line:95,column:4},end:{line:95,column:5}},loc:{start:{line:95,column:11},end:{line:95,column:14}},line:95}},branchMap:{"0":{loc:{start:{line:39,column:22},end:{line:39,column:54}},type:"binary-expr",locations:[{start:{line:39,column:22},end:{line:39,column:35}},{start:{line:39,column:39},end:{line:39,column:54}}],line:39},"1":{loc:{start:{line:49,column:8},end:{line:50,column:19}},type:"if",locations:[{start:{line:49,column:8},end:{line:50,column:19}},{start:{line:49,column:8},end:{line:50,column:19}}],line:49}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},b:{"0":[0,0],"1":[0,0]},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/exporters/console-exporter.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/exporters/console-exporter.ts"],names:[],mappings:";AAAA;;;;;;;;;;;;;;GAcG;;;AAMH,uDAAmD;AACnD,mDAAmD;AAGnD,4BAA4B;AAC5B,MAAa,YAAY;IAEvB,WAAW,CAAC,IAAqB,IAAG,CAAC;IACrC,SAAS,CAAC,IAAqB,IAAG,CAAC;IACnC,OAAO,CAAC,KAAwB;QAC9B,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;CACF;AAPD,oCAOC;AAED,iDAAiD;AACjD,MAAa,eAAe;IAK1B;;;;OAIG;IACH,YAAY,MAAsB;QAChC,IAAI,CAAC,MAAM,GAAG,IAAI,gCAAc,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAC/C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;IACjD,CAAC;IAED,WAAW,CAAC,IAAqB,IAAG,CAAC;IAErC;;;OAGG;IACH,SAAS,CAAC,IAAqB;QAC7B,yEAAyE;QACzE,uDAAuD;QACvD,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YAAE,OAAO;QAC/B,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IAED;;;OAGG;IACH,OAAO,CAAC,KAAwB;QAC9B,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACf,MAAM,QAAQ,GAAG,uBAAuB,IAAI,CAAC,OAAO,aAAa,IAAI,CAAC,EAAE,WAAW,IAAI,CAAC,IAAI,IAAI,CAAC;YACjG,MAAM,SAAS,GAAa,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CACjD,CAAC,gBAAgB,KAAK,CAAC,EAAE,WAAW,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAC9D,CAAC;YAEF,MAAM,MAAM,GAAa,EAAE,CAAC;YAC5B,MAAM,CAAC,IAAI,CAAC,QAAQ,GAAG,mBAAmB,GAAG,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACxE,OAAO,CAAC,GAAG,CAAC,GAAG,MAAM,EAAE,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;QACH,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;CACF;AA7CD,0CA6CC;AAED,sEAAsE;AACtE,MAAa,oBAAoB;IAC/B;;;OAGG;IACH,cAAc,CAAC,IAAU;QACvB,OAAO,CAAC,GAAG,CACT,oBAAoB,IAAI,CAAC,IAAI,yBAAyB,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAC1E,CAAC;IACJ,CAAC;IACD;;;;;OAKG;IACH,QAAQ,CACN,KAAa,EACb,WAAwB,EACxB,IAA2B;QAE3B,OAAO,CAAC,GAAG,CAAC,yBAAyB,WAAW,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;IACnE,CAAC;IAED;;;OAGG;IACH,KAAK;QACH,2CAA2C;IAC7C,CAAC;IAED,0BAA0B;IAC1B,IAAI,KAAU,CAAC;CAChB;AAlCD,oDAkCC",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as loggerTypes from '../common/types';\nimport { Measurement, View } from '../stats/types';\nimport { TagKey, TagValue } from '../tags/types';\nimport * as modelTypes from '../trace/model/types';\nimport { ExporterBuffer } from './exporter-buffer';\nimport * as logger from '../common/console-logger';\nimport { Exporter, ExporterConfig, StatsEventListener } from './types';\n\n/** Do not send span data */\nexport class NoopExporter implements Exporter {\n  logger?: loggerTypes.Logger;\n  onStartSpan(span: modelTypes.Span) {}\n  onEndSpan(span: modelTypes.Span) {}\n  publish(spans: modelTypes.Span[]) {\n    return Promise.resolve();\n  }\n}\n\n/** Format and sends span data to the console. */\nexport class ConsoleExporter implements Exporter {\n  /** Buffer object to store the spans. */\n  logger: loggerTypes.Logger;\n  private buffer: ExporterBuffer;\n\n  /**\n   * Constructs a new ConsoleExporter instance.\n   * @param config Exporter configuration object to create a console log\n   *     exporter.\n   */\n  constructor(config: ExporterConfig) {\n    this.buffer = new ExporterBuffer(this, config);\n    this.logger = config.logger || logger.logger();\n  }\n\n  onStartSpan(span: modelTypes.Span) {}\n\n  /**\n   * Event called when a span is ended.\n   * @param span Ended span.\n   */\n  onEndSpan(span: modelTypes.Span) {\n    // Add spans of a trace together when root is ended, skip non root spans.\n    // publish function will extract child spans from root.\n    if (!span.isRootSpan()) return;\n    this.buffer.addToBuffer(span);\n  }\n\n  /**\n   * Sends the spans information to the console.\n   * @param spans A list of spans to publish.\n   */\n  publish(spans: modelTypes.Span[]) {\n    spans.map(span => {\n      const ROOT_STR = `RootSpan: {traceId: ${span.traceId}, spanId: ${span.id}, name: ${span.name} }`;\n      const SPANS_STR: string[] = span.spans.map(child =>\n        [`\\t\\t{spanId: ${child.id}, name: ${child.name}}`].join('\\n')\n      );\n\n      const result: string[] = [];\n      result.push(ROOT_STR + '\\n\\tChildSpans:\\n' + `${SPANS_STR.join('\\n')}`);\n      console.log(`${result}`);\n    });\n    return Promise.resolve();\n  }\n}\n\n/** Exporter that receives stats data and shows in the log console. */\nexport class ConsoleStatsExporter implements StatsEventListener {\n  /**\n   * Event called when a view is registered\n   * @param view registered view\n   */\n  onRegisterView(view: View) {\n    console.log(\n      `View registered: ${view.name}, Measure registered: ${view.measure.name}`\n    );\n  }\n  /**\n   * Event called when a measurement is recorded\n   * @param view recorded view from measurement\n   * @param measurement recorded measurement\n   * @param tags The tags to which the value is applied\n   */\n  onRecord(\n    views: View[],\n    measurement: Measurement,\n    tags: Map<TagKey, TagValue>\n  ) {\n    console.log(`Measurement recorded: ${measurement.measure.name}`);\n  }\n\n  /**\n   * Starts the Console exporter that polls Metric from Metrics library and\n   * shows in the log console..\n   */\n  start(): void {\n    // TODO(mayurkale): dependency with PR#253.\n  }\n\n  /** Stops the exporter. */\n  stop(): void {}\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"b0bfc896c2109dacee73e810a3a54c727146adf6"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1v9gh840nq=function(){return actualCoverage;};}return actualCoverage;}cov_1v9gh840nq();cov_1v9gh840nq().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_1v9gh840nq().s[1]++;exports.ConsoleStatsExporter=exports.ConsoleExporter=exports.NoopExporter=void 0;const exporter_buffer_1=(cov_1v9gh840nq().s[2]++,require("./exporter-buffer"));const logger=(cov_1v9gh840nq().s[3]++,require("../common/console-logger"));/** Do not send span data */class NoopExporter{onStartSpan(span){cov_1v9gh840nq().f[0]++;}onEndSpan(span){cov_1v9gh840nq().f[1]++;}publish(spans){cov_1v9gh840nq().f[2]++;cov_1v9gh840nq().s[4]++;return Promise.resolve();}}cov_1v9gh840nq().s[5]++;exports.NoopExporter=NoopExporter;/** Format and sends span data to the console. */class ConsoleExporter{/**
     * Constructs a new ConsoleExporter instance.
     * @param config Exporter configuration object to create a console log
     *     exporter.
     */constructor(config){cov_1v9gh840nq().f[3]++;cov_1v9gh840nq().s[6]++;this.buffer=new exporter_buffer_1.ExporterBuffer(this,config);cov_1v9gh840nq().s[7]++;this.logger=(cov_1v9gh840nq().b[0][0]++,config.logger)||(cov_1v9gh840nq().b[0][1]++,logger.logger());}onStartSpan(span){cov_1v9gh840nq().f[4]++;}/**
     * Event called when a span is ended.
     * @param span Ended span.
     */onEndSpan(span){cov_1v9gh840nq().f[5]++;cov_1v9gh840nq().s[8]++;// Add spans of a trace together when root is ended, skip non root spans.
// publish function will extract child spans from root.
if(!span.isRootSpan()){cov_1v9gh840nq().b[1][0]++;cov_1v9gh840nq().s[9]++;return;}else{cov_1v9gh840nq().b[1][1]++;}cov_1v9gh840nq().s[10]++;this.buffer.addToBuffer(span);}/**
     * Sends the spans information to the console.
     * @param spans A list of spans to publish.
     */publish(spans){cov_1v9gh840nq().f[6]++;cov_1v9gh840nq().s[11]++;spans.map(span=>{cov_1v9gh840nq().f[7]++;const ROOT_STR=(cov_1v9gh840nq().s[12]++,`RootSpan: {traceId: ${span.traceId}, spanId: ${span.id}, name: ${span.name} }`);const SPANS_STR=(cov_1v9gh840nq().s[13]++,span.spans.map(child=>{cov_1v9gh840nq().f[8]++;cov_1v9gh840nq().s[14]++;return[`\t\t{spanId: ${child.id}, name: ${child.name}}`].join('\n');}));const result=(cov_1v9gh840nq().s[15]++,[]);cov_1v9gh840nq().s[16]++;result.push(ROOT_STR+'\n\tChildSpans:\n'+`${SPANS_STR.join('\n')}`);cov_1v9gh840nq().s[17]++;console.log(`${result}`);});cov_1v9gh840nq().s[18]++;return Promise.resolve();}}cov_1v9gh840nq().s[19]++;exports.ConsoleExporter=ConsoleExporter;/** Exporter that receives stats data and shows in the log console. */class ConsoleStatsExporter{/**
     * Event called when a view is registered
     * @param view registered view
     */onRegisterView(view){cov_1v9gh840nq().f[9]++;cov_1v9gh840nq().s[20]++;console.log(`View registered: ${view.name}, Measure registered: ${view.measure.name}`);}/**
     * Event called when a measurement is recorded
     * @param view recorded view from measurement
     * @param measurement recorded measurement
     * @param tags The tags to which the value is applied
     */onRecord(views,measurement,tags){cov_1v9gh840nq().f[10]++;cov_1v9gh840nq().s[21]++;console.log(`Measurement recorded: ${measurement.measure.name}`);}/**
     * Starts the Console exporter that polls Metric from Metrics library and
     * shows in the log console..
     */start(){cov_1v9gh840nq().f[11]++;}// TODO(mayurkale): dependency with PR#253.
/** Stops the exporter. */stop(){cov_1v9gh840nq().f[12]++;}}cov_1v9gh840nq().s[22]++;exports.ConsoleStatsExporter=ConsoleStatsExporter;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3VzZXJtYWl0aGEvdHJhZGVtYXN0ZXIvbGlicy9saWItZXh0ZXJuYWwtb3BlbmNlbnN1cy1ub2RlL3NyYy9leHBvcnRlcnMvY29uc29sZS1leHBvcnRlci50cyIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXJtYWl0aGEvdHJhZGVtYXN0ZXIvbGlicy9saWItZXh0ZXJuYWwtb3BlbmNlbnN1cy1ub2RlL3NyYy9leHBvcnRlcnMvY29uc29sZS1leHBvcnRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7O0dBY0c7OztBQU1ILHVEQUFtRDtBQUNuRCxtREFBbUQ7QUFHbkQsNEJBQTRCO0FBQzVCLE1BQWEsWUFBWTtJQUV2QixXQUFXLENBQUMsSUFBcUIsSUFBRyxDQUFDO0lBQ3JDLFNBQVMsQ0FBQyxJQUFxQixJQUFHLENBQUM7SUFDbkMsT0FBTyxDQUFDLEtBQXdCO1FBQzlCLE9BQU8sT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzNCLENBQUM7Q0FDRjtBQVBELG9DQU9DO0FBRUQsaURBQWlEO0FBQ2pELE1BQWEsZUFBZTtJQUsxQjs7OztPQUlHO0lBQ0gsWUFBWSxNQUFzQjtRQUNoQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksZ0NBQWMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDL0MsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNqRCxDQUFDO0lBRUQsV0FBVyxDQUFDLElBQXFCLElBQUcsQ0FBQztJQUVyQzs7O09BR0c7SUFDSCxTQUFTLENBQUMsSUFBcUI7UUFDN0IseUVBQXlFO1FBQ3pFLHVEQUF1RDtRQUN2RCxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUFFLE9BQU87UUFDL0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVEOzs7T0FHRztJQUNILE9BQU8sQ0FBQyxLQUF3QjtRQUM5QixLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2YsTUFBTSxRQUFRLEdBQUcsdUJBQXVCLElBQUksQ0FBQyxPQUFPLGFBQWEsSUFBSSxDQUFDLEVBQUUsV0FBVyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUM7WUFDakcsTUFBTSxTQUFTLEdBQWEsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FDakQsQ0FBQyxnQkFBZ0IsS0FBSyxDQUFDLEVBQUUsV0FBVyxLQUFLLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQzlELENBQUM7WUFFRixNQUFNLE1BQU0sR0FBYSxFQUFFLENBQUM7WUFDNUIsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsbUJBQW1CLEdBQUcsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN4RSxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUMzQixDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzNCLENBQUM7Q0FDRjtBQTdDRCwwQ0E2Q0M7QUFFRCxzRUFBc0U7QUFDdEUsTUFBYSxvQkFBb0I7SUFDL0I7OztPQUdHO0lBQ0gsY0FBYyxDQUFDLElBQVU7UUFDdkIsT0FBTyxDQUFDLEdBQUcsQ0FDVCxvQkFBb0IsSUFBSSxDQUFDLElBQUkseUJBQXlCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQzFFLENBQUM7SUFDSixDQUFDO0lBQ0Q7Ozs7O09BS0c7SUFDSCxRQUFRLENBQ04sS0FBYSxFQUNiLFdBQXdCLEVBQ3hCLElBQTJCO1FBRTNCLE9BQU8sQ0FBQyxHQUFHLENBQUMseUJBQXlCLFdBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsS0FBSztRQUNILDJDQUEyQztJQUM3QyxDQUFDO0lBRUQsMEJBQTBCO0lBQzFCLElBQUksS0FBVSxDQUFDO0NBQ2hCO0FBbENELG9EQWtDQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTgsIE9wZW5DZW5zdXMgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0ICogYXMgbG9nZ2VyVHlwZXMgZnJvbSAnLi4vY29tbW9uL3R5cGVzJztcbmltcG9ydCB7IE1lYXN1cmVtZW50LCBWaWV3IH0gZnJvbSAnLi4vc3RhdHMvdHlwZXMnO1xuaW1wb3J0IHsgVGFnS2V5LCBUYWdWYWx1ZSB9IGZyb20gJy4uL3RhZ3MvdHlwZXMnO1xuaW1wb3J0ICogYXMgbW9kZWxUeXBlcyBmcm9tICcuLi90cmFjZS9tb2RlbC90eXBlcyc7XG5pbXBvcnQgeyBFeHBvcnRlckJ1ZmZlciB9IGZyb20gJy4vZXhwb3J0ZXItYnVmZmVyJztcbmltcG9ydCAqIGFzIGxvZ2dlciBmcm9tICcuLi9jb21tb24vY29uc29sZS1sb2dnZXInO1xuaW1wb3J0IHsgRXhwb3J0ZXIsIEV4cG9ydGVyQ29uZmlnLCBTdGF0c0V2ZW50TGlzdGVuZXIgfSBmcm9tICcuL3R5cGVzJztcblxuLyoqIERvIG5vdCBzZW5kIHNwYW4gZGF0YSAqL1xuZXhwb3J0IGNsYXNzIE5vb3BFeHBvcnRlciBpbXBsZW1lbnRzIEV4cG9ydGVyIHtcbiAgbG9nZ2VyPzogbG9nZ2VyVHlwZXMuTG9nZ2VyO1xuICBvblN0YXJ0U3BhbihzcGFuOiBtb2RlbFR5cGVzLlNwYW4pIHt9XG4gIG9uRW5kU3BhbihzcGFuOiBtb2RlbFR5cGVzLlNwYW4pIHt9XG4gIHB1Ymxpc2goc3BhbnM6IG1vZGVsVHlwZXMuU3BhbltdKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG59XG5cbi8qKiBGb3JtYXQgYW5kIHNlbmRzIHNwYW4gZGF0YSB0byB0aGUgY29uc29sZS4gKi9cbmV4cG9ydCBjbGFzcyBDb25zb2xlRXhwb3J0ZXIgaW1wbGVtZW50cyBFeHBvcnRlciB7XG4gIC8qKiBCdWZmZXIgb2JqZWN0IHRvIHN0b3JlIHRoZSBzcGFucy4gKi9cbiAgbG9nZ2VyOiBsb2dnZXJUeXBlcy5Mb2dnZXI7XG4gIHByaXZhdGUgYnVmZmVyOiBFeHBvcnRlckJ1ZmZlcjtcblxuICAvKipcbiAgICogQ29uc3RydWN0cyBhIG5ldyBDb25zb2xlRXhwb3J0ZXIgaW5zdGFuY2UuXG4gICAqIEBwYXJhbSBjb25maWcgRXhwb3J0ZXIgY29uZmlndXJhdGlvbiBvYmplY3QgdG8gY3JlYXRlIGEgY29uc29sZSBsb2dcbiAgICogICAgIGV4cG9ydGVyLlxuICAgKi9cbiAgY29uc3RydWN0b3IoY29uZmlnOiBFeHBvcnRlckNvbmZpZykge1xuICAgIHRoaXMuYnVmZmVyID0gbmV3IEV4cG9ydGVyQnVmZmVyKHRoaXMsIGNvbmZpZyk7XG4gICAgdGhpcy5sb2dnZXIgPSBjb25maWcubG9nZ2VyIHx8IGxvZ2dlci5sb2dnZXIoKTtcbiAgfVxuXG4gIG9uU3RhcnRTcGFuKHNwYW46IG1vZGVsVHlwZXMuU3Bhbikge31cblxuICAvKipcbiAgICogRXZlbnQgY2FsbGVkIHdoZW4gYSBzcGFuIGlzIGVuZGVkLlxuICAgKiBAcGFyYW0gc3BhbiBFbmRlZCBzcGFuLlxuICAgKi9cbiAgb25FbmRTcGFuKHNwYW46IG1vZGVsVHlwZXMuU3Bhbikge1xuICAgIC8vIEFkZCBzcGFucyBvZiBhIHRyYWNlIHRvZ2V0aGVyIHdoZW4gcm9vdCBpcyBlbmRlZCwgc2tpcCBub24gcm9vdCBzcGFucy5cbiAgICAvLyBwdWJsaXNoIGZ1bmN0aW9uIHdpbGwgZXh0cmFjdCBjaGlsZCBzcGFucyBmcm9tIHJvb3QuXG4gICAgaWYgKCFzcGFuLmlzUm9vdFNwYW4oKSkgcmV0dXJuO1xuICAgIHRoaXMuYnVmZmVyLmFkZFRvQnVmZmVyKHNwYW4pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmRzIHRoZSBzcGFucyBpbmZvcm1hdGlvbiB0byB0aGUgY29uc29sZS5cbiAgICogQHBhcmFtIHNwYW5zIEEgbGlzdCBvZiBzcGFucyB0byBwdWJsaXNoLlxuICAgKi9cbiAgcHVibGlzaChzcGFuczogbW9kZWxUeXBlcy5TcGFuW10pIHtcbiAgICBzcGFucy5tYXAoc3BhbiA9PiB7XG4gICAgICBjb25zdCBST09UX1NUUiA9IGBSb290U3Bhbjoge3RyYWNlSWQ6ICR7c3Bhbi50cmFjZUlkfSwgc3BhbklkOiAke3NwYW4uaWR9LCBuYW1lOiAke3NwYW4ubmFtZX0gfWA7XG4gICAgICBjb25zdCBTUEFOU19TVFI6IHN0cmluZ1tdID0gc3Bhbi5zcGFucy5tYXAoY2hpbGQgPT5cbiAgICAgICAgW2BcXHRcXHR7c3BhbklkOiAke2NoaWxkLmlkfSwgbmFtZTogJHtjaGlsZC5uYW1lfX1gXS5qb2luKCdcXG4nKVxuICAgICAgKTtcblxuICAgICAgY29uc3QgcmVzdWx0OiBzdHJpbmdbXSA9IFtdO1xuICAgICAgcmVzdWx0LnB1c2goUk9PVF9TVFIgKyAnXFxuXFx0Q2hpbGRTcGFuczpcXG4nICsgYCR7U1BBTlNfU1RSLmpvaW4oJ1xcbicpfWApO1xuICAgICAgY29uc29sZS5sb2coYCR7cmVzdWx0fWApO1xuICAgIH0pO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxufVxuXG4vKiogRXhwb3J0ZXIgdGhhdCByZWNlaXZlcyBzdGF0cyBkYXRhIGFuZCBzaG93cyBpbiB0aGUgbG9nIGNvbnNvbGUuICovXG5leHBvcnQgY2xhc3MgQ29uc29sZVN0YXRzRXhwb3J0ZXIgaW1wbGVtZW50cyBTdGF0c0V2ZW50TGlzdGVuZXIge1xuICAvKipcbiAgICogRXZlbnQgY2FsbGVkIHdoZW4gYSB2aWV3IGlzIHJlZ2lzdGVyZWRcbiAgICogQHBhcmFtIHZpZXcgcmVnaXN0ZXJlZCB2aWV3XG4gICAqL1xuICBvblJlZ2lzdGVyVmlldyh2aWV3OiBWaWV3KSB7XG4gICAgY29uc29sZS5sb2coXG4gICAgICBgVmlldyByZWdpc3RlcmVkOiAke3ZpZXcubmFtZX0sIE1lYXN1cmUgcmVnaXN0ZXJlZDogJHt2aWV3Lm1lYXN1cmUubmFtZX1gXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogRXZlbnQgY2FsbGVkIHdoZW4gYSBtZWFzdXJlbWVudCBpcyByZWNvcmRlZFxuICAgKiBAcGFyYW0gdmlldyByZWNvcmRlZCB2aWV3IGZyb20gbWVhc3VyZW1lbnRcbiAgICogQHBhcmFtIG1lYXN1cmVtZW50IHJlY29yZGVkIG1lYXN1cmVtZW50XG4gICAqIEBwYXJhbSB0YWdzIFRoZSB0YWdzIHRvIHdoaWNoIHRoZSB2YWx1ZSBpcyBhcHBsaWVkXG4gICAqL1xuICBvblJlY29yZChcbiAgICB2aWV3czogVmlld1tdLFxuICAgIG1lYXN1cmVtZW50OiBNZWFzdXJlbWVudCxcbiAgICB0YWdzOiBNYXA8VGFnS2V5LCBUYWdWYWx1ZT5cbiAgKSB7XG4gICAgY29uc29sZS5sb2coYE1lYXN1cmVtZW50IHJlY29yZGVkOiAke21lYXN1cmVtZW50Lm1lYXN1cmUubmFtZX1gKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydHMgdGhlIENvbnNvbGUgZXhwb3J0ZXIgdGhhdCBwb2xscyBNZXRyaWMgZnJvbSBNZXRyaWNzIGxpYnJhcnkgYW5kXG4gICAqIHNob3dzIGluIHRoZSBsb2cgY29uc29sZS4uXG4gICAqL1xuICBzdGFydCgpOiB2b2lkIHtcbiAgICAvLyBUT0RPKG1heXVya2FsZSk6IGRlcGVuZGVuY3kgd2l0aCBQUiMyNTMuXG4gIH1cblxuICAvKiogU3RvcHMgdGhlIGV4cG9ydGVyLiAqL1xuICBzdG9wKCk6IHZvaWQge31cbn1cbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,