{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/instrumentation/base-plugin.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/instrumentation/base-plugin.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as path from 'path';\nimport * as semver from 'semver';\nimport { noopLogger } from '../../common/noop-logger';\nimport { Logger } from '../../common/types';\nimport { Stats } from '../../stats/types';\nimport * as modelTypes from '../model/types';\nimport * as types from './types';\n\n/**\n * Maps a name (key) representing a internal file module and its exports\n */\nexport interface ModuleExportsMapping {\n  // tslint:disable-next-line:no-any\n  [key: string]: any;\n}\n\n/** This class represent the base to patch plugin. */\nexport abstract class BasePlugin implements types.Plugin {\n  /** Exports from the nodejs module to be instrumented */\n  // tslint:disable-next-line:no-any\n  protected moduleExports: any;\n  /** The module name */\n  protected moduleName: string;\n  /** A tracer object. */\n  protected tracer!: modelTypes.Tracer;\n  /** The module version. */\n  protected version!: string;\n  /** a logger */\n  protected logger: Logger = noopLogger;\n  /** list of internal files that need patch and are not exported by default */\n  protected readonly internalFileList!: types.PluginInternalFiles;\n  /**  internal files loaded */\n  protected internalFilesExports!: ModuleExportsMapping;\n  /** module directory - used to load internal files */\n  protected basedir!: string;\n  /** plugin options */\n  protected options!: types.PluginConfig;\n  /** A stats object. */\n  protected stats?: Stats;\n\n  /**\n   * Constructs a new BasePlugin instance.\n   * @param moduleName The module name.\n   */\n  constructor(moduleName: string) {\n    this.moduleName = moduleName;\n  }\n\n  /**\n   * Sets modified plugin to the context.\n   * @param moduleExports nodejs module exports to set as context\n   * @param tracer tracer relating to context\n   * @param version module version description\n   * @param options plugin options\n   * @param basedir module absolute path\n   * @param stats a stats instance\n   */\n  private setPluginContext(\n    // tslint:disable-next-line:no-any\n    moduleExports: any,\n    tracer: modelTypes.Tracer,\n    version: string,\n    options: types.PluginConfig,\n    basedir?: string,\n    stats?: Stats\n  ) {\n    this.moduleExports = moduleExports;\n    this.tracer = tracer;\n    this.version = version;\n    if (basedir) this.basedir = basedir;\n    this.logger = tracer.logger;\n    this.options = options;\n    this.stats = stats;\n    this.internalFilesExports = this.loadInternalFiles();\n  }\n\n  /**\n   * Method that enables the instrumentation patch.\n   *\n   * This method implements the GoF Template Method Pattern\n   * 'enable' is the invariant part of the pattern and\n   * 'applyPatch' the variant.\n   *\n   * @param moduleExports nodejs module exports from the module to patch\n   * @param tracer a tracer instance\n   * @param version version of the current instaled module to patch\n   * @param options plugin options\n   * @param basedir an optional module absolute path\n   * @param stats an optional stats instance\n   */\n  enable<T>(\n    moduleExports: T,\n    tracer: modelTypes.Tracer,\n    version: string,\n    options: types.PluginConfig,\n    basedir?: string,\n    stats?: Stats\n  ) {\n    this.setPluginContext(\n      moduleExports,\n      tracer,\n      version,\n      options,\n      basedir,\n      stats\n    );\n    return this.applyPatch();\n  }\n\n  /** Method to disable the instrumentation  */\n  disable() {\n    this.applyUnpatch();\n  }\n\n  /**\n   * This method implements the GoF Template Method Pattern,\n   * 'applyPatch' is the variant part, each instrumentation should\n   * implement its own version, 'enable' method is the invariant.\n   * It will be called when enable is called.\n   *\n   */\n  // tslint:disable-next-line:no-any\n  protected abstract applyPatch(): any;\n  protected abstract applyUnpatch(): void;\n\n  /**\n   * Load internal files according to version range\n   */\n  private loadInternalFiles(): ModuleExportsMapping {\n    let result: ModuleExportsMapping = {};\n    if (this.internalFileList) {\n      this.logger.debug('loadInternalFiles %o', this.internalFileList);\n      Object.keys(this.internalFileList).forEach(versionRange => {\n        if (semver.satisfies(this.version, versionRange)) {\n          if (result) {\n            this.logger.warn(\n              'Plugin for %s@%s, has overlap version range (%s) for internal files: %o',\n              this.moduleName,\n              this.version,\n              versionRange,\n              this.internalFileList\n            );\n          }\n          result = this.loadInternalModuleFiles(\n            this.internalFileList[versionRange],\n            this.basedir\n          );\n        }\n      });\n      if (Object.keys(result).length === 0) {\n        this.logger.debug(\n          'No internal file could be loaded for %s@%s',\n          this.moduleName,\n          this.version\n        );\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Load internal files from a module and  set internalFilesExports\n   */\n  private loadInternalModuleFiles(\n    extraModulesList: types.PluginInternalFilesVersion,\n    basedir: string\n  ): ModuleExportsMapping {\n    const extraModules: ModuleExportsMapping = {};\n    if (extraModulesList) {\n      Object.keys(extraModulesList).forEach(moduleName => {\n        try {\n          this.logger.debug('loading File %s', extraModulesList[moduleName]);\n          extraModules[moduleName] = require(path.join(\n            basedir,\n            extraModulesList[moduleName]\n          ));\n        } catch (e) {\n          this.logger.error(\n            'Could not load internal file %s of module %s. Error: %s',\n            path.join(basedir, extraModulesList[moduleName]),\n            this.moduleName,\n            e.message\n          );\n        }\n      });\n    }\n    return extraModules;\n  }\n}\n"]}