{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/cumulative/derived-cumulative.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/cumulative/derived-cumulative.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getTimestampWithProcessHRTime } from '../../common/time-util';\nimport {\n  validateArrayElementsNotNull,\n  validateNotNull,\n} from '../../common/validations';\nimport {\n  LabelKey,\n  LabelValue,\n  Metric,\n  MetricDescriptor,\n  MetricDescriptorType,\n  TimeSeries,\n  Timestamp,\n} from '../export/types';\nimport { Meter } from '../types';\nimport { AccessorInterface } from '../types';\nimport * as util from '../utils';\n\ntype ValueExtractor = () => number;\n\n/**\n * An interface that describes the entry for every TimeSeries (Point) added to\n * the Cumulative metric.\n */\ninterface CumulativeEntry {\n  /** The list of the label values. */\n  readonly labelValues: LabelValue[];\n  /** The function to get the actual value of point. */\n  readonly extractor: ValueExtractor;\n  /** The previous value of the point. */\n  prevValue: number;\n}\n\n/**\n * DerivedCumulative metric is used to record aggregated metrics that\n * represents a single numerical value accumulated over a time interval.\n */\nexport class DerivedCumulative implements Meter {\n  private metricDescriptor: MetricDescriptor;\n  private labelKeysLength: number;\n  private registeredPoints: Map<string, CumulativeEntry> = new Map();\n  private extractor?: ValueExtractor;\n  private readonly constantLabelValues: LabelValue[];\n  private startTime: Timestamp;\n\n  /**\n   * Constructs a new DerivedCumulative instance.\n   *\n   * @param name The name of the metric.\n   * @param description The description of the metric.\n   * @param unit The unit of the metric.\n   * @param type The type of metric.\n   * @param labelKeys The list of the label keys.\n   * @param constantLabels The map of constant labels for the Metric.\n   * @param startTime The time when the cumulative metric start measuring the\n   *     value.\n   */\n  constructor(\n    name: string,\n    description: string,\n    unit: string,\n    type: MetricDescriptorType,\n    labelKeys: LabelKey[],\n    readonly constantLabels: Map<LabelKey, LabelValue>,\n    startTime: Timestamp\n  ) {\n    this.labelKeysLength = labelKeys.length;\n    const keysAndConstantKeys = [...labelKeys, ...constantLabels.keys()];\n    this.constantLabelValues = [...constantLabels.values()];\n\n    this.metricDescriptor = {\n      name,\n      description,\n      unit,\n      type,\n      labelKeys: keysAndConstantKeys,\n    };\n    this.startTime = startTime;\n  }\n\n  /**\n   * Creates a TimeSeries. The value of a single point in the TimeSeries is\n   * observed from an object or function. The ValueExtractor is invoked whenever\n   * metrics are collected, meaning the reported value is up-to-date.\n   *\n   * @param labelValues The list of the label values.\n   * @param objOrFn obj The obj to get the size or length or value from. If\n   *     multiple options are available, the value (ToValueInterface) takes\n   *     precedence first, followed by length and size. e.g value -> length ->\n   *     size.\n   *     fn is the function that will be called to get the current value\n   *     of the cumulative.\n   */\n  createTimeSeries(\n    labelValues: LabelValue[],\n    objOrFn: AccessorInterface\n  ): void {\n    validateArrayElementsNotNull(\n      validateNotNull(labelValues, 'labelValues'),\n      'labelValue'\n    );\n    validateNotNull(objOrFn, 'obj');\n\n    const hash = util.hashLabelValues(labelValues);\n    if (this.registeredPoints.has(hash)) {\n      throw new Error(\n        'A different time series with the same labels already exists.'\n      );\n    }\n    if (this.labelKeysLength !== labelValues.length) {\n      throw new Error(\"Label Keys and Label Values don't have same size\");\n    }\n\n    if (objOrFn instanceof Function) {\n      this.extractor = objOrFn;\n    } else if (util.isToValueInterface(objOrFn)) {\n      this.extractor = () => objOrFn.getValue();\n    } else if (util.isLengthAttributeInterface(objOrFn)) {\n      this.extractor = () => objOrFn.length;\n    } else if (util.isLengthMethodInterface(objOrFn)) {\n      this.extractor = () => objOrFn.length();\n    } else if (util.isSizeAttributeInterface(objOrFn)) {\n      this.extractor = () => objOrFn.size;\n    } else if (util.isSizeMethodInterface(objOrFn)) {\n      this.extractor = () => objOrFn.size();\n    } else {\n      throw new Error('Unknown interface/object type');\n    }\n\n    this.registeredPoints.set(hash, {\n      labelValues,\n      extractor: this.extractor,\n      prevValue: 0,\n    });\n  }\n\n  /**\n   * Removes the TimeSeries from the cumulative metric, if it is present. i.e.\n   * references to previous Point objects are invalid (not part of the\n   * metric).\n   *\n   * @param labelValues The list of label values.\n   */\n  removeTimeSeries(labelValues: LabelValue[]): void {\n    validateNotNull(labelValues, 'labelValues');\n    this.registeredPoints.delete(util.hashLabelValues(labelValues));\n  }\n\n  /**\n   * Removes all TimeSeries from the cumulative metric. i.e. references to all\n   * previous Point objects are invalid (not part of the metric).\n   */\n  clear(): void {\n    this.registeredPoints.clear();\n  }\n\n  /**\n   * Provides a Metric with one or more TimeSeries.\n   *\n   * @returns The Metric, or null if TimeSeries is not present in Metric.\n   */\n  getMetric(): Metric | null {\n    if (this.registeredPoints.size === 0) {\n      return null;\n    }\n    const timestamp: Timestamp = getTimestampWithProcessHRTime();\n    return {\n      descriptor: this.metricDescriptor,\n      timeseries: Array.from(\n        this.registeredPoints,\n        ([_, cumulativeEntry]): TimeSeries => {\n          const newValue = cumulativeEntry.extractor();\n          const value =\n            newValue > cumulativeEntry.prevValue\n              ? newValue\n              : cumulativeEntry.prevValue;\n          cumulativeEntry.prevValue = value;\n\n          return {\n            labelValues: [\n              ...cumulativeEntry.labelValues,\n              ...this.constantLabelValues,\n            ],\n            points: [{ value, timestamp }],\n            startTimestamp: this.startTime,\n          };\n        }\n      ),\n    };\n  }\n}\n"]}