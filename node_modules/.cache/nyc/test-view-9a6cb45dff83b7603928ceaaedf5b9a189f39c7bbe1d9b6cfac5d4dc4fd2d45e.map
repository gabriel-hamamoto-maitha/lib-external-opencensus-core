{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-view.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-view.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\n\nimport { BaseView, TagMap, TagValue } from '../src';\nimport { TEST_ONLY } from '../src/common/time-util';\nimport {\n  DistributionValue,\n  MetricDescriptorType,\n  Timestamp,\n} from '../src/metrics/export/types';\nimport {\n  AggregationType,\n  DistributionData,\n  Measure,\n  MeasureType,\n  MeasureUnit,\n  View,\n} from '../src/stats/types';\n\n/** The order of how close values must be to be considerated almost equal */\nconst EPSILON = 6;\n\ninterface AggregationTestCase {\n  aggregationType: AggregationType;\n  description: string;\n  metricDescriptorType: MetricDescriptorType;\n}\n\nfunction isAlmostEqual(\n  actual: number,\n  expected: number,\n  epsilon: number\n): boolean {\n  return Math.abs(actual - expected) < Math.pow(10, -epsilon);\n}\n\nfunction assertDistributionData(\n  distributionData: DistributionData,\n  values: number[]\n) {\n  const valuesSum = values.reduce((acc, cur) => acc + cur);\n\n  assert.strictEqual(distributionData.count, values.length);\n  assert.strictEqual(distributionData.sum, valuesSum);\n\n  const expectedMean = valuesSum / values.length;\n  assert.ok(isAlmostEqual(distributionData.mean, expectedMean, EPSILON));\n\n  const expectedSumSquaredDeviations = values\n    .map(value => Math.pow(value - expectedMean, 2))\n    .reduce((acc, curr) => acc + curr);\n  assert.ok(\n    isAlmostEqual(\n      distributionData.sumOfSquaredDeviation,\n      expectedSumSquaredDeviations,\n      EPSILON\n    )\n  );\n\n  const expectedStdDeviation = Math.sqrt(\n    expectedSumSquaredDeviations / values.length\n  );\n  assert.ok(\n    isAlmostEqual(distributionData.stdDeviation, expectedStdDeviation, EPSILON)\n  );\n}\n\nfunction assertView(\n  view: View,\n  recordedValues: number[],\n  aggregationType: AggregationType,\n  tagValues: TagValue[]\n) {\n  assert.strictEqual(view.aggregation, aggregationType);\n  const aggregationData = view.getSnapshot(tagValues);\n  switch (aggregationData.type) {\n    case AggregationType.SUM:\n      const acc = recordedValues.reduce((acc, cur) => acc + cur);\n      assert.strictEqual(aggregationData.value, acc);\n      break;\n    case AggregationType.COUNT:\n      assert.strictEqual(aggregationData.value, recordedValues.length);\n      break;\n    case AggregationType.DISTRIBUTION:\n      assertDistributionData(aggregationData, recordedValues);\n      break;\n    default:\n      assert.strictEqual(\n        aggregationData.value,\n        recordedValues[recordedValues.length - 1]\n      );\n      break;\n  }\n}\n\ndescribe('BaseView', () => {\n  const measure: Measure = {\n    name: 'Test Measure',\n    type: MeasureType.DOUBLE,\n    unit: MeasureUnit.UNIT,\n  };\n\n  const aggregationTestCases: AggregationTestCase[] = [\n    {\n      aggregationType: AggregationType.SUM,\n      description: 'Sum',\n      metricDescriptorType: MetricDescriptorType.CUMULATIVE_DOUBLE,\n    },\n    {\n      aggregationType: AggregationType.COUNT,\n      description: 'Count',\n      metricDescriptorType: MetricDescriptorType.CUMULATIVE_INT64,\n    },\n    {\n      aggregationType: AggregationType.LAST_VALUE,\n      description: 'Last Value',\n      metricDescriptorType: MetricDescriptorType.GAUGE_DOUBLE,\n    },\n    {\n      aggregationType: AggregationType.DISTRIBUTION,\n      description: 'Distribution',\n      metricDescriptorType: MetricDescriptorType.CUMULATIVE_DISTRIBUTION,\n    },\n  ];\n\n  describe('getColumns()', () => {\n    it('should access the given tag keys', () => {\n      const tagKeys = [{ name: 'testKey1' }, { name: 'testKey2' }];\n      const view = new BaseView(\n        'test/view/name',\n        measure,\n        AggregationType.LAST_VALUE,\n        tagKeys,\n        'description test'\n      );\n\n      assert.deepStrictEqual(view.getColumns(), tagKeys);\n    });\n  });\n\n  describe('createView()', () => {\n    it('should throw error when keys are duplicate', () => {\n      const tagKeys = [\n        { name: 'testKey1' },\n        { name: 'testKey1' },\n        { name: 'testKey2' },\n      ];\n      assert.throws(() => {\n        const view = new BaseView(\n          'test/view/name',\n          measure,\n          AggregationType.LAST_VALUE,\n          tagKeys,\n          'description test'\n        );\n        assert.deepStrictEqual(view.getColumns(), tagKeys);\n      }, /^Error: Columns have duplicate$/);\n    });\n  });\n\n  describe('recordMeasurement()', () => {\n    const measurementValues = [1.1, 2.3, 3.2, 4.3, 5.2];\n    const bucketBoundaries = [2, 4, 6];\n    const tagKey1 = { name: 'testKey1' };\n    const tagKey2 = { name: 'testKey2' };\n    const tagKeys = [tagKey1, tagKey2];\n    const tagKey3 = { name: 'testKey3' };\n    const tagValue1 = { value: 'testValue1' };\n    const tagValue2 = { value: 'testValue2' };\n    const tagValue3 = { value: 'testValue3' };\n\n    const tags = new TagMap();\n    tags.set(tagKey1, tagValue1);\n    tags.set(tagKey2, tagValue2);\n\n    for (const aggregationTestCase of aggregationTestCases) {\n      it(`should record measurements on a View with ${aggregationTestCase.description} Aggregation Data type`, () => {\n        const view = new BaseView(\n          'test/view/name',\n          measure,\n          aggregationTestCase.aggregationType,\n          tagKeys,\n          'description test',\n          bucketBoundaries\n        );\n        const recordedValues = [];\n        for (const value of measurementValues) {\n          recordedValues.push(value);\n          const measurement = { measure, value };\n          view.recordMeasurement(measurement, tags);\n          assertView(\n            view,\n            recordedValues,\n            aggregationTestCase.aggregationType,\n            [tagValue1, tagValue2]\n          );\n        }\n      });\n    }\n\n    it('should ignore negative bucket bounds', () => {\n      const negativeBucketBoundaries = [-Infinity, -4, -2, 0, 2, 4, 6];\n      const view = new BaseView(\n        'test/view/name',\n        measure,\n        AggregationType.DISTRIBUTION,\n        tagKeys,\n        'description test',\n        negativeBucketBoundaries\n      );\n      const recordedValues = [];\n      for (const value of measurementValues) {\n        recordedValues.push(value);\n        const measurement = { measure, value };\n        view.recordMeasurement(measurement, tags);\n      }\n      const data = view.getSnapshot([tagValue1, tagValue2]) as DistributionData;\n      assert.deepStrictEqual(data.buckets, [2, 4, 6]);\n      assert.deepStrictEqual(data.bucketCounts, [1, 2, 2, 0]);\n    });\n\n    const view = new BaseView(\n      'test/view/name',\n      measure,\n      AggregationType.LAST_VALUE,\n      tagKeys,\n      'description test'\n    );\n\n    it('should not record a measurement when it have wrong tag keys', () => {\n      const tagMap = new TagMap();\n      tagMap.set(tagKey3, tagValue3);\n      const measurement = { measure, value: 10 };\n      view.recordMeasurement(measurement, tagMap);\n      assert.ok(!view.getSnapshot([tagValue3]));\n    });\n  });\n\n  describe('getMetric()', () => {\n    const realHrtimeFn = process.hrtime;\n    const realNowFn = Date.now;\n    const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n    const mockStartTime = 1546540757282;\n    const mockStartTimestamp: Timestamp = { seconds: 1546540757, nanos: 282e6 };\n    const measurementValues = [1.1, 2.3, 3.2, 4.3, 5.2];\n    const buckets = [2, 4, 6];\n    const tagKey1 = { name: 'testKey1' };\n    const tagKey2 = { name: 'testKey2' };\n    const tagKeys = [tagKey1, tagKey2];\n    const tagValue1 = { value: 'testValue1' };\n    const tagValue2 = { value: 'testValue2' };\n    const tagValue3 = { value: 'testValue3' };\n    const tagValue4 = { value: 'testValue4' };\n\n    const tags = new TagMap();\n    tags.set(tagKey1, tagValue1);\n    tags.set(tagKey2, tagValue2);\n\n    const tagMap = new TagMap();\n    tagMap.set(tagKey1, tagValue3);\n    tagMap.set(tagKey2, tagValue4);\n\n    for (const aggregationTestCase of aggregationTestCases) {\n      const view: View = new BaseView(\n        'test/view/name',\n        measure,\n        aggregationTestCase.aggregationType,\n        tagKeys,\n        'description test',\n        buckets\n      );\n      for (const value of measurementValues) {\n        const measurement = { measure, value };\n        view.recordMeasurement(measurement, tags);\n      }\n\n      beforeEach(() => {\n        // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n        process.hrtime = () => [100, 1e7];\n        Date.now = () => 1450000000000;\n        // Force the clock to recalibrate the time offset with the mocked time\n        TEST_ONLY.setHrtimeReference();\n      });\n\n      afterEach(() => {\n        process.hrtime = realHrtimeFn;\n        Date.now = realNowFn;\n        // Reset the hrtime reference so that it uses a real clock again.\n        TEST_ONLY.resetHrtimeFunctionCache();\n      });\n\n      const { descriptor, timeseries } = view.getMetric(mockStartTime);\n\n      describe(`Aggregation type: ${aggregationTestCase.aggregationType}`, () => {\n        it('should have descriptor', () => {\n          assert.ok(descriptor);\n          assert.deepStrictEqual(descriptor, {\n            description: 'description test',\n            labelKeys: [\n              { key: 'testKey1', description: '' },\n              { key: 'testKey2', description: '' },\n            ],\n            name: 'test/view/name',\n            type: aggregationTestCase.metricDescriptorType,\n            unit: '1',\n          });\n        });\n\n        const [{ startTimestamp, labelValues }] = timeseries;\n\n        if (\n          aggregationTestCase.metricDescriptorType ===\n          MetricDescriptorType.GAUGE_INT64\n        ) {\n          it('GAUGE_INT64 shouldnt have timeseries startTimestamp', () => {\n            assert.strictEqual(startTimestamp, undefined);\n          });\n        } else if (\n          aggregationTestCase.metricDescriptorType ===\n          MetricDescriptorType.GAUGE_DOUBLE\n        ) {\n          it('GAUGE_DOUBLE shouldnt have timeseries startTimestamp', () => {\n            assert.strictEqual(startTimestamp, undefined);\n          });\n        } else {\n          it('should have timeseries startTimestamp', () => {\n            assert.ok(startTimestamp);\n            assert.strictEqual(typeof startTimestamp!.nanos, 'number');\n            assert.strictEqual(typeof startTimestamp!.seconds, 'number');\n            assert.deepStrictEqual(startTimestamp, mockStartTimestamp);\n          });\n        }\n\n        it('should have labelValues', () => {\n          assert.ok(labelValues);\n          assert.deepStrictEqual(labelValues, [\n            { value: 'testValue1' },\n            { value: 'testValue2' },\n          ]);\n        });\n      });\n    }\n\n    describe('DISTRIBUTION aggregation type', () => {\n      const view: View = new BaseView(\n        'test/view/name',\n        measure,\n        AggregationType.DISTRIBUTION,\n        tagKeys,\n        'description test',\n        buckets\n      );\n      let total = 0;\n      for (const value of measurementValues) {\n        total += value;\n        const measurement = { measure, value };\n        view.recordMeasurement(measurement, tags);\n      }\n\n      it('should have point', () => {\n        const { timeseries } = view.getMetric(mockStartTime);\n        const [{ points, startTimestamp }] = timeseries;\n        assert.ok(points);\n        const [point] = points;\n        const { timestamp, value } = point;\n        assert.ok(timestamp);\n        assert.strictEqual(typeof timestamp.nanos, 'number');\n        assert.strictEqual(typeof timestamp.seconds, 'number');\n        assert.strictEqual(timestamp.seconds, mockedTime.seconds);\n        assert.strictEqual(timestamp.nanos, mockedTime.nanos);\n        assert.notStrictEqual(typeof value, 'number');\n        assert.deepStrictEqual(value as DistributionValue, {\n          bucketOptions: { explicit: { bounds: buckets } },\n          buckets: [{ count: 1 }, { count: 2 }, { count: 2 }, { count: 0 }],\n          count: 5,\n          sum: total,\n          sumOfSquaredDeviation: 10.427999999999997,\n        });\n\n        assert.deepStrictEqual(startTimestamp, mockStartTimestamp);\n      });\n    });\n\n    describe('DISTRIBUTION aggregation type with exemplars', () => {\n      const realNowFn = Date.now;\n      before(() => {\n        Date.now = () => 1450000000000;\n      });\n      after(() => {\n        Date.now = realNowFn;\n      });\n\n      it('should have point with attachments', () => {\n        const view: View = new BaseView(\n          'test/view/name',\n          measure,\n          AggregationType.DISTRIBUTION,\n          tagKeys,\n          'description test',\n          buckets\n        );\n        let total = 0;\n        const attachments = { k1: 'v1', k2: 'v2', k3: 'v3' };\n        for (const value of measurementValues) {\n          total += value;\n          const measurement = { measure, value };\n          view.recordMeasurement(measurement, tags, attachments);\n        }\n\n        const { timeseries } = view.getMetric(mockStartTime);\n        const [{ points, startTimestamp }] = timeseries;\n        assert.ok(points);\n        const [point] = points;\n        const { timestamp, value } = point;\n        assert.ok(timestamp);\n        assert.deepStrictEqual(value as DistributionValue, {\n          bucketOptions: { explicit: { bounds: buckets } },\n          buckets: [\n            {\n              count: 1,\n              exemplar: {\n                value: 1.1,\n                timestamp: { seconds: 1450000000, nanos: 0 },\n                attachments,\n              },\n            },\n            {\n              count: 2,\n              exemplar: {\n                value: 3.2,\n                timestamp: { seconds: 1450000000, nanos: 0 },\n                attachments,\n              },\n            },\n            {\n              count: 2,\n              exemplar: {\n                value: 5.2,\n                timestamp: { seconds: 1450000000, nanos: 0 },\n                attachments,\n              },\n            },\n            { count: 0 },\n          ],\n          count: 5,\n          sum: total,\n          sumOfSquaredDeviation: 10.427999999999997,\n        });\n        assert.deepStrictEqual(startTimestamp, mockStartTimestamp);\n      });\n\n      it('should have point with empty attachments', () => {\n        const view: View = new BaseView(\n          'test/view/name',\n          measure,\n          AggregationType.DISTRIBUTION,\n          tagKeys,\n          'description test',\n          buckets\n        );\n        let total = 0;\n        for (const value of measurementValues) {\n          total += value;\n          const measurement = { measure, value };\n          view.recordMeasurement(measurement, tags, {});\n        }\n\n        const { timeseries } = view.getMetric(mockStartTime);\n        const [{ points, startTimestamp }] = timeseries;\n        assert.ok(points);\n        const [point] = points;\n        const { timestamp, value } = point;\n        assert.ok(timestamp);\n        assert.deepStrictEqual(value as DistributionValue, {\n          bucketOptions: { explicit: { bounds: buckets } },\n          buckets: [\n            {\n              count: 1,\n              exemplar: {\n                value: 1.1,\n                timestamp: { seconds: 1450000000, nanos: 0 },\n                attachments: {},\n              },\n            },\n            {\n              count: 2,\n              exemplar: {\n                value: 3.2,\n                timestamp: { seconds: 1450000000, nanos: 0 },\n                attachments: {},\n              },\n            },\n            {\n              count: 2,\n              exemplar: {\n                value: 5.2,\n                timestamp: { seconds: 1450000000, nanos: 0 },\n                attachments: {},\n              },\n            },\n            { count: 0 },\n          ],\n          count: 5,\n          sum: total,\n          sumOfSquaredDeviation: 10.427999999999997,\n        });\n        assert.deepStrictEqual(startTimestamp, mockStartTimestamp);\n      });\n    });\n\n    describe('DISTRIBUTION aggregation type: record with measurements in succession from a single view and single measure', () => {\n      const view: View = new BaseView(\n        'test/view/name',\n        measure,\n        AggregationType.DISTRIBUTION,\n        tagKeys,\n        'description test',\n        buckets\n      );\n      let total = 0;\n      for (const value of measurementValues) {\n        total += value;\n        const measurement = { measure, value };\n        const measurement1 = { measure, value };\n        view.recordMeasurement(measurement, tags);\n        view.recordMeasurement(measurement1, tagMap);\n      }\n\n      it('should have points', () => {\n        const { timeseries } = view.getMetric(mockStartTime);\n        assert.strictEqual(timeseries.length, 2);\n        const [\n          { labelValues: labelValues1, points: points1 },\n          { labelValues: labelValues2, points: points2 },\n        ] = timeseries;\n        assert.ok(points1);\n\n        let [point] = points1;\n        let { timestamp, value } = point;\n        assert.ok(timestamp);\n        assert.strictEqual(typeof timestamp.nanos, 'number');\n        assert.strictEqual(typeof timestamp.seconds, 'number');\n        assert.strictEqual(timestamp.seconds, mockedTime.seconds);\n        assert.strictEqual(timestamp.nanos, mockedTime.nanos);\n        assert.notStrictEqual(typeof value, 'number');\n        assert.deepStrictEqual(value as DistributionValue, {\n          bucketOptions: { explicit: { bounds: buckets } },\n          buckets: [{ count: 1 }, { count: 2 }, { count: 2 }, { count: 0 }],\n          count: 5,\n          sum: total,\n          sumOfSquaredDeviation: 10.427999999999997,\n        });\n        assert.deepStrictEqual(labelValues1, [\n          { value: 'testValue1' },\n          { value: 'testValue2' },\n        ]);\n        assert.ok(points2);\n        [point] = points2;\n        ({ timestamp, value } = point);\n        assert.ok(timestamp);\n        assert.strictEqual(typeof timestamp.nanos, 'number');\n        assert.strictEqual(typeof timestamp.seconds, 'number');\n        assert.strictEqual(timestamp.seconds, mockedTime.seconds);\n        assert.strictEqual(timestamp.nanos, mockedTime.nanos);\n        assert.notStrictEqual(typeof value, 'number');\n        assert.deepStrictEqual(value as DistributionValue, {\n          bucketOptions: { explicit: { bounds: buckets } },\n          buckets: [{ count: 1 }, { count: 2 }, { count: 2 }, { count: 0 }],\n          count: 5,\n          sum: total,\n          sumOfSquaredDeviation: 10.427999999999997,\n        });\n        assert.deepStrictEqual(labelValues2, [\n          { value: 'testValue3' },\n          { value: 'testValue4' },\n        ]);\n      });\n    });\n\n    describe('COUNT aggregation type', () => {\n      const view: View = new BaseView(\n        'test/view/name',\n        measure,\n        AggregationType.COUNT,\n        tagKeys,\n        'description test',\n        buckets\n      );\n      for (const value of measurementValues) {\n        const measurement = { measure, value };\n        view.recordMeasurement(measurement, tags);\n      }\n\n      it('should have point', () => {\n        const { timeseries } = view.getMetric(mockStartTime);\n        const [{ points, startTimestamp }] = timeseries;\n        assert.ok(points);\n        const [point] = points;\n        const { timestamp, value } = point;\n        assert.ok(timestamp);\n        assert.strictEqual(typeof timestamp.nanos, 'number');\n        assert.strictEqual(typeof timestamp.seconds, 'number');\n        assert.strictEqual(timestamp.seconds, mockedTime.seconds);\n        assert.strictEqual(timestamp.nanos, mockedTime.nanos);\n        assert.strictEqual(typeof value, 'number');\n        assert.strictEqual(value, 5);\n        assert.deepStrictEqual(startTimestamp, mockStartTimestamp);\n      });\n    });\n\n    describe('SUM aggregation type', () => {\n      const view: View = new BaseView(\n        'test/view/name',\n        measure,\n        AggregationType.SUM,\n        tagKeys,\n        'description test',\n        buckets\n      );\n      let total = 0;\n      for (const value of measurementValues) {\n        total += value;\n        const measurement = { measure, value };\n        view.recordMeasurement(measurement, tags);\n      }\n\n      it('should have point', () => {\n        const { timeseries } = view.getMetric(mockStartTime);\n        const [{ points, startTimestamp }] = timeseries;\n        assert.ok(points);\n        const [point] = points;\n        const { timestamp, value } = point;\n        assert.ok(timestamp);\n        assert.strictEqual(typeof timestamp.nanos, 'number');\n        assert.strictEqual(typeof timestamp.seconds, 'number');\n        assert.strictEqual(timestamp.seconds, mockedTime.seconds);\n        assert.strictEqual(timestamp.nanos, mockedTime.nanos);\n        assert.strictEqual(typeof value, 'number');\n        assert.strictEqual(value, total);\n        assert.deepStrictEqual(startTimestamp, mockStartTimestamp);\n      });\n    });\n\n    describe('LAST_VALUE aggregation type', () => {\n      const view: View = new BaseView(\n        'test/view/name',\n        measure,\n        AggregationType.LAST_VALUE,\n        tagKeys,\n        'description test',\n        buckets\n      );\n      for (const value of measurementValues) {\n        const measurement = { measure, value };\n        view.recordMeasurement(measurement, tags);\n      }\n\n      it('should have point', () => {\n        const { timeseries } = view.getMetric(mockStartTime);\n        const [{ points, startTimestamp }] = timeseries;\n        assert.ok(points);\n        const [point] = points;\n        const { timestamp, value } = point;\n        assert.strictEqual(timestamp.seconds, mockedTime.seconds);\n        assert.strictEqual(timestamp.nanos, mockedTime.nanos);\n        assert.strictEqual(typeof value, 'number');\n        assert.strictEqual(\n          value,\n          measurementValues[measurementValues.length - 1]\n        );\n        assert.strictEqual(startTimestamp, undefined);\n      });\n    });\n  });\n\n  describe('getSnapshots()', () => {\n    let view: View;\n    const tagKey1 = { name: 'testKey1' };\n    const tagKey2 = { name: 'testKey2' };\n    const tagKeys = [tagKey1, tagKey2];\n    const tagValue1 = { value: 'testValue1' };\n    const tagValue2 = { value: 'testValue2' };\n\n    const tags = new TagMap();\n    tags.set(tagKey1, tagValue1);\n    tags.set(tagKey2, tagValue2);\n\n    before(() => {\n      view = new BaseView(\n        'test/view/name',\n        measure,\n        AggregationType.LAST_VALUE,\n        tagKeys,\n        'description test'\n      );\n\n      const measurement = { measure, value: 10 };\n      view.recordMeasurement(measurement, tags);\n    });\n\n    it('should not get aggregation data when wrong tags values are given', () => {\n      assert.ok(\n        !view.getSnapshot([\n          { value: 'wrongTagValue' },\n          { value: 'wrongTagValue' },\n        ])\n      );\n    });\n\n    it('should not get aggregation data when not enough tags are given', () => {\n      assert.ok(!view.getSnapshot([tagValue1]));\n    });\n\n    it('should get aggregation data when tags are correct', () => {\n      assert.ok(view.getSnapshot([tagValue1, tagValue2]));\n    });\n  });\n});\n"]}