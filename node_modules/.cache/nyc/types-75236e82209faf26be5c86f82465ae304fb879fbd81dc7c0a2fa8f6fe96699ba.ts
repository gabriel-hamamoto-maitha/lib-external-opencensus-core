"use strict";/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_revvob3dg(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/instrumentation/types.ts";var hash="c1709a72a1a5cc93dcbcfd14562ad56a02933d3c";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/instrumentation/types.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}}},fnMap:{},branchMap:{},s:{"0":0},f:{},b:{},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/instrumentation/types.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/trace/instrumentation/types.ts"],names:[],mappings:";AAAA;;;;;;;;;;;;;;GAcG",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Stats } from '../../stats/types';\nimport { Span, TracerBase } from '../model/types';\n\n/** Interface Plugin to apply patch. */\nexport interface Plugin {\n  /**\n   * Method that enables the instrumentation patch.\n   *\n   * @param moduleExports nodejs module exports from the module to patch\n   * @param tracer a tracer instance\n   * @param version version of the current instaled module to patch\n   * @param options plugin options\n   * @param basedir an optional module absolute path\n   * @param stats an optional stats instance\n   */\n  enable<T>(\n    moduleExports: T,\n    tracer: TracerBase,\n    version: string,\n    options: PluginConfig,\n    basedir?: string,\n    stats?: Stats\n  ): T;\n  /** Method to disable the instrumentation  */\n  disable(): void;\n}\n\n/**\n * Function that can be provided to plugin in order to add custom\n * attributes to spans\n */\nexport interface CustomAttributeFunction {\n  // tslint:disable-next-line:no-any\n  (span: Span, ...rest: any[]): void;\n}\n\nexport interface PluginConfig {\n  // tslint:disable-next-line:no-any\n  [key: string]: any;\n  applyCustomAttributesOnSpan?: CustomAttributeFunction;\n}\n\nexport interface NamedPluginConfig {\n  module: string;\n  config: PluginConfig;\n}\n\n/**\n * Type PluginNames: each key should be the name of the module to trace,\n * and its value should be the name of the package  which has the\n * plugin implementation.\n */\nexport interface PluginNames {\n  [pluginName: string]: string | NamedPluginConfig;\n}\n\nexport interface PluginInternalFilesVersion {\n  [pluginName: string]: string;\n}\n\n/**\n * Each key should be the name of the module to trace, and its value\n * a mapping of a property name to a internal plugin file name.\n */\nexport interface PluginInternalFiles {\n  [versions: string]: PluginInternalFilesVersion;\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"c1709a72a1a5cc93dcbcfd14562ad56a02933d3c"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_revvob3dg=function(){return actualCoverage;};}return actualCoverage;}cov_revvob3dg();cov_revvob3dg().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3VzZXJtYWl0aGEvdHJhZGVtYXN0ZXIvbGlicy9saWItZXh0ZXJuYWwtb3BlbmNlbnN1cy1ub2RlL3NyYy90cmFjZS9pbnN0cnVtZW50YXRpb24vdHlwZXMudHMiLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VybWFpdGhhL3RyYWRlbWFzdGVyL2xpYnMvbGliLWV4dGVybmFsLW9wZW5jZW5zdXMtbm9kZS9zcmMvdHJhY2UvaW5zdHJ1bWVudGF0aW9uL3R5cGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7R0FjRyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTgsIE9wZW5DZW5zdXMgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgU3RhdHMgfSBmcm9tICcuLi8uLi9zdGF0cy90eXBlcyc7XG5pbXBvcnQgeyBTcGFuLCBUcmFjZXJCYXNlIH0gZnJvbSAnLi4vbW9kZWwvdHlwZXMnO1xuXG4vKiogSW50ZXJmYWNlIFBsdWdpbiB0byBhcHBseSBwYXRjaC4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGx1Z2luIHtcbiAgLyoqXG4gICAqIE1ldGhvZCB0aGF0IGVuYWJsZXMgdGhlIGluc3RydW1lbnRhdGlvbiBwYXRjaC5cbiAgICpcbiAgICogQHBhcmFtIG1vZHVsZUV4cG9ydHMgbm9kZWpzIG1vZHVsZSBleHBvcnRzIGZyb20gdGhlIG1vZHVsZSB0byBwYXRjaFxuICAgKiBAcGFyYW0gdHJhY2VyIGEgdHJhY2VyIGluc3RhbmNlXG4gICAqIEBwYXJhbSB2ZXJzaW9uIHZlcnNpb24gb2YgdGhlIGN1cnJlbnQgaW5zdGFsZWQgbW9kdWxlIHRvIHBhdGNoXG4gICAqIEBwYXJhbSBvcHRpb25zIHBsdWdpbiBvcHRpb25zXG4gICAqIEBwYXJhbSBiYXNlZGlyIGFuIG9wdGlvbmFsIG1vZHVsZSBhYnNvbHV0ZSBwYXRoXG4gICAqIEBwYXJhbSBzdGF0cyBhbiBvcHRpb25hbCBzdGF0cyBpbnN0YW5jZVxuICAgKi9cbiAgZW5hYmxlPFQ+KFxuICAgIG1vZHVsZUV4cG9ydHM6IFQsXG4gICAgdHJhY2VyOiBUcmFjZXJCYXNlLFxuICAgIHZlcnNpb246IHN0cmluZyxcbiAgICBvcHRpb25zOiBQbHVnaW5Db25maWcsXG4gICAgYmFzZWRpcj86IHN0cmluZyxcbiAgICBzdGF0cz86IFN0YXRzXG4gICk6IFQ7XG4gIC8qKiBNZXRob2QgdG8gZGlzYWJsZSB0aGUgaW5zdHJ1bWVudGF0aW9uICAqL1xuICBkaXNhYmxlKCk6IHZvaWQ7XG59XG5cbi8qKlxuICogRnVuY3Rpb24gdGhhdCBjYW4gYmUgcHJvdmlkZWQgdG8gcGx1Z2luIGluIG9yZGVyIHRvIGFkZCBjdXN0b21cbiAqIGF0dHJpYnV0ZXMgdG8gc3BhbnNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDdXN0b21BdHRyaWJ1dGVGdW5jdGlvbiB7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgKHNwYW46IFNwYW4sIC4uLnJlc3Q6IGFueVtdKTogdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQbHVnaW5Db25maWcge1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG4gIFtrZXk6IHN0cmluZ106IGFueTtcbiAgYXBwbHlDdXN0b21BdHRyaWJ1dGVzT25TcGFuPzogQ3VzdG9tQXR0cmlidXRlRnVuY3Rpb247XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTmFtZWRQbHVnaW5Db25maWcge1xuICBtb2R1bGU6IHN0cmluZztcbiAgY29uZmlnOiBQbHVnaW5Db25maWc7XG59XG5cbi8qKlxuICogVHlwZSBQbHVnaW5OYW1lczogZWFjaCBrZXkgc2hvdWxkIGJlIHRoZSBuYW1lIG9mIHRoZSBtb2R1bGUgdG8gdHJhY2UsXG4gKiBhbmQgaXRzIHZhbHVlIHNob3VsZCBiZSB0aGUgbmFtZSBvZiB0aGUgcGFja2FnZSAgd2hpY2ggaGFzIHRoZVxuICogcGx1Z2luIGltcGxlbWVudGF0aW9uLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBsdWdpbk5hbWVzIHtcbiAgW3BsdWdpbk5hbWU6IHN0cmluZ106IHN0cmluZyB8IE5hbWVkUGx1Z2luQ29uZmlnO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBsdWdpbkludGVybmFsRmlsZXNWZXJzaW9uIHtcbiAgW3BsdWdpbk5hbWU6IHN0cmluZ106IHN0cmluZztcbn1cblxuLyoqXG4gKiBFYWNoIGtleSBzaG91bGQgYmUgdGhlIG5hbWUgb2YgdGhlIG1vZHVsZSB0byB0cmFjZSwgYW5kIGl0cyB2YWx1ZVxuICogYSBtYXBwaW5nIG9mIGEgcHJvcGVydHkgbmFtZSB0byBhIGludGVybmFsIHBsdWdpbiBmaWxlIG5hbWUuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGx1Z2luSW50ZXJuYWxGaWxlcyB7XG4gIFt2ZXJzaW9uczogc3RyaW5nXTogUGx1Z2luSW50ZXJuYWxGaWxlc1ZlcnNpb247XG59XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfcmV2dm9iM2RnIiwicGF0aCIsImhhc2giLCJnbG9iYWwiLCJGdW5jdGlvbiIsImdjdiIsImNvdmVyYWdlRGF0YSIsInN0YXRlbWVudE1hcCIsInN0YXJ0IiwibGluZSIsImNvbHVtbiIsImVuZCIsImZuTWFwIiwiYnJhbmNoTWFwIiwicyIsImYiLCJiIiwiaW5wdXRTb3VyY2VNYXAiLCJ2ZXJzaW9uIiwiZmlsZSIsInNvdXJjZXMiLCJuYW1lcyIsIm1hcHBpbmdzIiwic291cmNlc0NvbnRlbnQiLCJfY292ZXJhZ2VTY2hlbWEiLCJjb3ZlcmFnZSIsImFjdHVhbENvdmVyYWdlIl0sInNvdXJjZXMiOlsiL1VzZXJzL3VzZXJtYWl0aGEvdHJhZGVtYXN0ZXIvbGlicy9saWItZXh0ZXJuYWwtb3BlbmNlbnN1cy1ub2RlL3NyYy90cmFjZS9pbnN0cnVtZW50YXRpb24vdHlwZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCwgT3BlbkNlbnN1cyBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBTdGF0cyB9IGZyb20gJy4uLy4uL3N0YXRzL3R5cGVzJztcbmltcG9ydCB7IFNwYW4sIFRyYWNlckJhc2UgfSBmcm9tICcuLi9tb2RlbC90eXBlcyc7XG5cbi8qKiBJbnRlcmZhY2UgUGx1Z2luIHRvIGFwcGx5IHBhdGNoLiAqL1xuZXhwb3J0IGludGVyZmFjZSBQbHVnaW4ge1xuICAvKipcbiAgICogTWV0aG9kIHRoYXQgZW5hYmxlcyB0aGUgaW5zdHJ1bWVudGF0aW9uIHBhdGNoLlxuICAgKlxuICAgKiBAcGFyYW0gbW9kdWxlRXhwb3J0cyBub2RlanMgbW9kdWxlIGV4cG9ydHMgZnJvbSB0aGUgbW9kdWxlIHRvIHBhdGNoXG4gICAqIEBwYXJhbSB0cmFjZXIgYSB0cmFjZXIgaW5zdGFuY2VcbiAgICogQHBhcmFtIHZlcnNpb24gdmVyc2lvbiBvZiB0aGUgY3VycmVudCBpbnN0YWxlZCBtb2R1bGUgdG8gcGF0Y2hcbiAgICogQHBhcmFtIG9wdGlvbnMgcGx1Z2luIG9wdGlvbnNcbiAgICogQHBhcmFtIGJhc2VkaXIgYW4gb3B0aW9uYWwgbW9kdWxlIGFic29sdXRlIHBhdGhcbiAgICogQHBhcmFtIHN0YXRzIGFuIG9wdGlvbmFsIHN0YXRzIGluc3RhbmNlXG4gICAqL1xuICBlbmFibGU8VD4oXG4gICAgbW9kdWxlRXhwb3J0czogVCxcbiAgICB0cmFjZXI6IFRyYWNlckJhc2UsXG4gICAgdmVyc2lvbjogc3RyaW5nLFxuICAgIG9wdGlvbnM6IFBsdWdpbkNvbmZpZyxcbiAgICBiYXNlZGlyPzogc3RyaW5nLFxuICAgIHN0YXRzPzogU3RhdHNcbiAgKTogVDtcbiAgLyoqIE1ldGhvZCB0byBkaXNhYmxlIHRoZSBpbnN0cnVtZW50YXRpb24gICovXG4gIGRpc2FibGUoKTogdm9pZDtcbn1cblxuLyoqXG4gKiBGdW5jdGlvbiB0aGF0IGNhbiBiZSBwcm92aWRlZCB0byBwbHVnaW4gaW4gb3JkZXIgdG8gYWRkIGN1c3RvbVxuICogYXR0cmlidXRlcyB0byBzcGFuc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEN1c3RvbUF0dHJpYnV0ZUZ1bmN0aW9uIHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICAoc3BhbjogU3BhbiwgLi4ucmVzdDogYW55W10pOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBsdWdpbkNvbmZpZyB7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgW2tleTogc3RyaW5nXTogYW55O1xuICBhcHBseUN1c3RvbUF0dHJpYnV0ZXNPblNwYW4/OiBDdXN0b21BdHRyaWJ1dGVGdW5jdGlvbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBOYW1lZFBsdWdpbkNvbmZpZyB7XG4gIG1vZHVsZTogc3RyaW5nO1xuICBjb25maWc6IFBsdWdpbkNvbmZpZztcbn1cblxuLyoqXG4gKiBUeXBlIFBsdWdpbk5hbWVzOiBlYWNoIGtleSBzaG91bGQgYmUgdGhlIG5hbWUgb2YgdGhlIG1vZHVsZSB0byB0cmFjZSxcbiAqIGFuZCBpdHMgdmFsdWUgc2hvdWxkIGJlIHRoZSBuYW1lIG9mIHRoZSBwYWNrYWdlICB3aGljaCBoYXMgdGhlXG4gKiBwbHVnaW4gaW1wbGVtZW50YXRpb24uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGx1Z2luTmFtZXMge1xuICBbcGx1Z2luTmFtZTogc3RyaW5nXTogc3RyaW5nIHwgTmFtZWRQbHVnaW5Db25maWc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGx1Z2luSW50ZXJuYWxGaWxlc1ZlcnNpb24ge1xuICBbcGx1Z2luTmFtZTogc3RyaW5nXTogc3RyaW5nO1xufVxuXG4vKipcbiAqIEVhY2gga2V5IHNob3VsZCBiZSB0aGUgbmFtZSBvZiB0aGUgbW9kdWxlIHRvIHRyYWNlLCBhbmQgaXRzIHZhbHVlXG4gKiBhIG1hcHBpbmcgb2YgYSBwcm9wZXJ0eSBuYW1lIHRvIGEgaW50ZXJuYWwgcGx1Z2luIGZpbGUgbmFtZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQbHVnaW5JbnRlcm5hbEZpbGVzIHtcbiAgW3ZlcnNpb25zOiBzdHJpbmddOiBQbHVnaW5JbnRlcm5hbEZpbGVzVmVyc2lvbjtcbn1cbiJdLCJtYXBwaW5ncyI6ImFBQUE7Ozs7Ozs7Ozs7Ozs7O0dBQUEsU0FBQUEsY0FBQSxNQUFBQyxJQUFBLDBHQUFBQyxJQUFBLGdEQUFBQyxNQUFBLEtBQUFDLFFBQUEsc0JBQUFDLEdBQUEsb0JBQUFDLFlBQUEsRUFBQUwsSUFBQSxzR0FBQU0sWUFBQSxPQUFBQyxLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxPQUFBRSxLQUFBLElBQUFDLFNBQUEsSUFBQUMsQ0FBQSxTQUFBQyxDQUFBLElBQUFDLENBQUEsSUFBQUMsY0FBQSxFQUFBQyxPQUFBLEdBQUFDLElBQUEsc0dBQUFDLE9BQUEsd0dBQUFDLEtBQUEsSUFBQUMsUUFBQSwyQkFBQUMsY0FBQSx5N0VBQUFDLGVBQUEsNENBQUF0QixJQUFBLGlEQUFBdUIsUUFBQSxDQUFBdEIsTUFBQSxDQUFBRSxHQUFBLElBQUFGLE1BQUEsQ0FBQUUsR0FBQSxVQUFBb0IsUUFBQSxDQUFBeEIsSUFBQSxHQUFBd0IsUUFBQSxDQUFBeEIsSUFBQSxFQUFBQyxJQUFBLEdBQUFBLElBQUEsRUFBQXVCLFFBQUEsQ0FBQXhCLElBQUEsRUFBQUssWUFBQSxNQUFBb0IsY0FBQSxDQUFBRCxRQUFBLENBQUF4QixJQUFBLEdBY0c7QUFBQUQsYUFBQSxTQUFBQSxDQUFBLFNBQUEwQixjQUFBLFdBQUFBLGNBQUEsRUFBQTFCLGFBQUEsR0FBQUEsYUFBQSxHQUFBYyxDQUFBLE0ifQ==