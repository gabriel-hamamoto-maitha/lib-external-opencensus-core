"use strict";/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_zv6tpcihx(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-derived-gauge.ts";var hash="6fe202b5ad2f2f748db0c8edf85210027ae12ae4";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-derived-gauge.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:15},end:{line:18,column:32}},"2":{start:{line:19,column:20},end:{line:19,column:54}},"3":{start:{line:20,column:16},end:{line:20,column:54}},"4":{start:{line:21,column:24},end:{line:21,column:70}},"5":{start:{line:22,column:20},end:{line:22,column:33}},"6":{start:{line:23,column:27},end:{line:23,column:47}},"7":{start:{line:24,column:13},end:{line:24,column:16}},"8":{start:{line:25,column:20},end:{line:25,column:60}},"9":{start:{line:26,column:21},end:{line:26,column:62}},"10":{start:{line:27,column:19},end:{line:27,column:57}},"11":{start:{line:28,column:25},end:{line:28,column:43}},"12":{start:{line:29,column:25},end:{line:29,column:43}},"13":{start:{line:30,column:27},end:{line:30,column:63}},"14":{start:{line:31,column:30},end:{line:31,column:39}},"15":{start:{line:32,column:24},end:{line:32,column:33}},"16":{start:{line:33,column:0},end:{line:33,column:82}},"17":{start:{line:34,column:0},end:{line:335,column:3}},"18":{start:{line:36,column:25},end:{line:36,column:39}},"19":{start:{line:37,column:22},end:{line:37,column:30}},"20":{start:{line:38,column:23},end:{line:38,column:58}},"21":{start:{line:39,column:37},end:{line:45,column:5}},"22":{start:{line:46,column:4},end:{line:53,column:7}},"23":{start:{line:47,column:8},end:{line:47,column:139}},"24":{start:{line:49,column:8},end:{line:49,column:42}},"25":{start:{line:49,column:31},end:{line:49,column:41}},"26":{start:{line:50,column:8},end:{line:50,column:39}},"27":{start:{line:50,column:25},end:{line:50,column:38}},"28":{start:{line:52,column:8},end:{line:52,column:51}},"29":{start:{line:54,column:4},end:{line:59,column:7}},"30":{start:{line:55,column:8},end:{line:55,column:38}},"31":{start:{line:56,column:8},end:{line:56,column:29}},"32":{start:{line:58,column:8},end:{line:58,column:57}},"33":{start:{line:60,column:4},end:{line:300,column:7}},"34":{start:{line:61,column:8},end:{line:65,column:11}},"35":{start:{line:62,column:12},end:{line:64,column:76}},"36":{start:{line:63,column:16},end:{line:63,column:73}},"37":{start:{line:66,column:8},end:{line:126,column:11}},"38":{start:{line:67,column:24},end:{line:67,column:33}},"39":{start:{line:68,column:12},end:{line:68,column:36}},"40":{start:{line:69,column:12},end:{line:69,column:61}},"41":{start:{line:70,column:12},end:{line:70,column:38}},"42":{start:{line:71,column:25},end:{line:71,column:45}},"43":{start:{line:72,column:12},end:{line:72,column:48}},"44":{start:{line:73,column:12},end:{line:73,column:80}},"45":{start:{line:74,column:12},end:{line:74,column:60}},"46":{start:{line:75,column:12},end:{line:88,column:15}},"47":{start:{line:90,column:12},end:{line:90,column:38}},"48":{start:{line:91,column:12},end:{line:91,column:38}},"49":{start:{line:93,column:24},end:{line:93,column:49}},"50":{start:{line:94,column:12},end:{line:96,column:15}},"51":{start:{line:95,column:28},end:{line:95,column:38}},"52":{start:{line:97,column:12},end:{line:97,column:42}},"53":{start:{line:98,column:12},end:{line:98,column:80}},"54":{start:{line:99,column:12},end:{line:99,column:60}},"55":{start:{line:100,column:12},end:{line:125,column:15}},"56":{start:{line:127,column:8},end:{line:153,column:11}},"57":{start:{line:130,column:20},end:{line:130,column:30}},"58":{start:{line:133,column:24},end:{line:133,column:42}},"59":{start:{line:134,column:12},end:{line:134,column:61}},"60":{start:{line:135,column:27},end:{line:135,column:47}},"61":{start:{line:136,column:12},end:{line:136,column:48}},"62":{start:{line:137,column:12},end:{line:137,column:80}},"63":{start:{line:138,column:12},end:{line:138,column:60}},"64":{start:{line:139,column:12},end:{line:152,column:15}},"65":{start:{line:154,column:8},end:{line:201,column:11}},"66":{start:{line:157,column:20},end:{line:157,column:35}},"67":{start:{line:160,column:20},end:{line:160,column:38}},"68":{start:{line:163,column:20},end:{line:163,column:33}},"69":{start:{line:166,column:26},end:{line:166,column:44}},"70":{start:{line:167,column:12},end:{line:167,column:27}},"71":{start:{line:168,column:12},end:{line:170,column:15}},"72":{start:{line:169,column:16},end:{line:169,column:41}},"73":{start:{line:171,column:25},end:{line:171,column:45}},"74":{start:{line:172,column:12},end:{line:172,column:48}},"75":{start:{line:173,column:12},end:{line:173,column:80}},"76":{start:{line:174,column:12},end:{line:174,column:60}},"77":{start:{line:175,column:12},end:{line:188,column:15}},"78":{start:{line:190,column:12},end:{line:190,column:27}},"79":{start:{line:191,column:12},end:{line:191,column:27}},"80":{start:{line:192,column:12},end:{line:192,column:27}},"81":{start:{line:193,column:12},end:{line:193,column:42}},"82":{start:{line:194,column:12},end:{line:194,column:60}},"83":{start:{line:195,column:12},end:{line:200,column:15}},"84":{start:{line:202,column:8},end:{line:235,column:11}},"85":{start:{line:205,column:20},end:{line:205,column:31}},"86":{start:{line:208,column:24},end:{line:208,column:42}},"87":{start:{line:209,column:35},end:{line:209,column:155}},"88":{start:{line:210,column:12},end:{line:210,column:67}},"89":{start:{line:211,column:27},end:{line:211,column:53}},"90":{start:{line:212,column:12},end:{line:212,column:48}},"91":{start:{line:213,column:12},end:{line:219,column:15}},"92":{start:{line:220,column:12},end:{line:220,column:60}},"93":{start:{line:221,column:12},end:{line:234,column:15}},"94":{start:{line:236,column:8},end:{line:272,column:11}},"95":{start:{line:239,column:20},end:{line:239,column:31}},"96":{start:{line:242,column:24},end:{line:242,column:42}},"97":{start:{line:243,column:35},end:{line:243,column:149}},"98":{start:{line:244,column:12},end:{line:244,column:67}},"99":{start:{line:245,column:27},end:{line:245,column:53}},"100":{start:{line:246,column:12},end:{line:246,column:48}},"101":{start:{line:247,column:12},end:{line:253,column:15}},"102":{start:{line:254,column:12},end:{line:254,column:60}},"103":{start:{line:255,column:12},end:{line:271,column:15}},"104":{start:{line:273,column:8},end:{line:299,column:11}},"105":{start:{line:274,column:24},end:{line:274,column:33}},"106":{start:{line:275,column:12},end:{line:275,column:61}},"107":{start:{line:276,column:12},end:{line:276,column:36}},"108":{start:{line:277,column:27},end:{line:277,column:47}},"109":{start:{line:278,column:12},end:{line:278,column:48}},"110":{start:{line:279,column:12},end:{line:279,column:80}},"111":{start:{line:280,column:12},end:{line:280,column:60}},"112":{start:{line:281,column:12},end:{line:294,column:15}},"113":{start:{line:296,column:12},end:{line:298,column:88}},"114":{start:{line:297,column:16},end:{line:297,column:65}},"115":{start:{line:301,column:4},end:{line:313,column:7}},"116":{start:{line:302,column:8},end:{line:312,column:11}},"117":{start:{line:303,column:24},end:{line:303,column:26}},"118":{start:{line:304,column:12},end:{line:304,column:61}},"119":{start:{line:305,column:12},end:{line:305,column:29}},"120":{start:{line:306,column:25},end:{line:306,column:45}},"121":{start:{line:307,column:12},end:{line:307,column:48}},"122":{start:{line:308,column:12},end:{line:308,column:80}},"123":{start:{line:309,column:12},end:{line:309,column:56}},"124":{start:{line:310,column:12},end:{line:310,column:42}},"125":{start:{line:311,column:12},end:{line:311,column:49}},"126":{start:{line:314,column:4},end:{line:334,column:7}},"127":{start:{line:315,column:8},end:{line:333,column:11}},"128":{start:{line:316,column:24},end:{line:316,column:33}},"129":{start:{line:317,column:12},end:{line:319,column:15}},"130":{start:{line:318,column:28},end:{line:318,column:36}},"131":{start:{line:320,column:12},end:{line:320,column:36}},"132":{start:{line:321,column:24},end:{line:321,column:26}},"133":{start:{line:322,column:12},end:{line:324,column:15}},"134":{start:{line:323,column:28},end:{line:323,column:38}},"135":{start:{line:325,column:12},end:{line:325,column:29}},"136":{start:{line:326,column:25},end:{line:326,column:45}},"137":{start:{line:327,column:12},end:{line:327,column:48}},"138":{start:{line:328,column:12},end:{line:328,column:80}},"139":{start:{line:329,column:12},end:{line:329,column:60}},"140":{start:{line:330,column:12},end:{line:330,column:29}},"141":{start:{line:331,column:12},end:{line:331,column:42}},"142":{start:{line:332,column:12},end:{line:332,column:49}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:34,column:25},end:{line:34,column:26}},loc:{start:{line:34,column:31},end:{line:335,column:1}},line:34},"1":{name:"(anonymous_1)",decl:{start:{line:46,column:15},end:{line:46,column:16}},loc:{start:{line:46,column:21},end:{line:53,column:5}},line:46},"2":{name:"(anonymous_2)",decl:{start:{line:49,column:25},end:{line:49,column:26}},loc:{start:{line:49,column:31},end:{line:49,column:41}},line:49},"3":{name:"(anonymous_3)",decl:{start:{line:50,column:19},end:{line:50,column:20}},loc:{start:{line:50,column:25},end:{line:50,column:38}},line:50},"4":{name:"(anonymous_4)",decl:{start:{line:54,column:14},end:{line:54,column:15}},loc:{start:{line:54,column:20},end:{line:59,column:5}},line:54},"5":{name:"(anonymous_5)",decl:{start:{line:60,column:35},end:{line:60,column:36}},loc:{start:{line:60,column:41},end:{line:300,column:5}},line:60},"6":{name:"(anonymous_6)",decl:{start:{line:61,column:81},end:{line:61,column:82}},loc:{start:{line:61,column:87},end:{line:65,column:9}},line:61},"7":{name:"(anonymous_7)",decl:{start:{line:62,column:26},end:{line:62,column:27}},loc:{start:{line:62,column:32},end:{line:64,column:13}},line:62},"8":{name:"(anonymous_8)",decl:{start:{line:66,column:37},end:{line:66,column:38}},loc:{start:{line:66,column:43},end:{line:126,column:9}},line:66},"9":{name:"(anonymous_9)",decl:{start:{line:95,column:22},end:{line:95,column:23}},loc:{start:{line:95,column:28},end:{line:95,column:38}},line:95},"10":{name:"(anonymous_10)",decl:{start:{line:127,column:61},end:{line:127,column:62}},loc:{start:{line:127,column:67},end:{line:153,column:9}},line:127},"11":{name:"(anonymous_11)",decl:{start:{line:129,column:16},end:{line:129,column:17}},loc:{start:{line:129,column:27},end:{line:131,column:17}},line:129},"12":{name:"(anonymous_12)",decl:{start:{line:154,column:59},end:{line:154,column:60}},loc:{start:{line:154,column:65},end:{line:201,column:9}},line:154},"13":{name:"(anonymous_13)",decl:{start:{line:156,column:16},end:{line:156,column:17}},loc:{start:{line:156,column:30},end:{line:158,column:17}},line:156},"14":{name:"(anonymous_14)",decl:{start:{line:159,column:16},end:{line:159,column:17}},loc:{start:{line:159,column:34},end:{line:161,column:17}},line:159},"15":{name:"(anonymous_15)",decl:{start:{line:162,column:16},end:{line:162,column:17}},loc:{start:{line:162,column:25},end:{line:164,column:17}},line:162},"16":{name:"(anonymous_16)",decl:{start:{line:168,column:56},end:{line:168,column:57}},loc:{start:{line:168,column:62},end:{line:170,column:13}},line:168},"17":{name:"(anonymous_17)",decl:{start:{line:202,column:62},end:{line:202,column:63}},loc:{start:{line:202,column:68},end:{line:235,column:9}},line:202},"18":{name:"(anonymous_18)",decl:{start:{line:204,column:16},end:{line:204,column:17}},loc:{start:{line:204,column:27},end:{line:206,column:17}},line:204},"19":{name:"(anonymous_19)",decl:{start:{line:236,column:62},end:{line:236,column:63}},loc:{start:{line:236,column:68},end:{line:272,column:9}},line:236},"20":{name:"(anonymous_20)",decl:{start:{line:238,column:16},end:{line:238,column:17}},loc:{start:{line:238,column:27},end:{line:240,column:17}},line:238},"21":{name:"(anonymous_21)",decl:{start:{line:273,column:54},end:{line:273,column:55}},loc:{start:{line:273,column:60},end:{line:299,column:9}},line:273},"22":{name:"(anonymous_22)",decl:{start:{line:296,column:26},end:{line:296,column:27}},loc:{start:{line:296,column:32},end:{line:298,column:13}},line:296},"23":{name:"(anonymous_23)",decl:{start:{line:301,column:35},end:{line:301,column:36}},loc:{start:{line:301,column:41},end:{line:313,column:5}},line:301},"24":{name:"(anonymous_24)",decl:{start:{line:302,column:39},end:{line:302,column:40}},loc:{start:{line:302,column:45},end:{line:312,column:9}},line:302},"25":{name:"(anonymous_25)",decl:{start:{line:314,column:24},end:{line:314,column:25}},loc:{start:{line:314,column:30},end:{line:334,column:5}},line:314},"26":{name:"(anonymous_26)",decl:{start:{line:315,column:42},end:{line:315,column:43}},loc:{start:{line:315,column:48},end:{line:333,column:9}},line:315},"27":{name:"(anonymous_27)",decl:{start:{line:318,column:22},end:{line:318,column:23}},loc:{start:{line:318,column:28},end:{line:318,column:36}},line:318},"28":{name:"(anonymous_28)",decl:{start:{line:323,column:22},end:{line:323,column:23}},loc:{start:{line:323,column:28},end:{line:323,column:38}},line:323}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0},b:{},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-derived-gauge.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-derived-gauge.ts"],names:[],mappings:"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",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport { TEST_ONLY } from '../src/common/time-util';\nimport {\n  LabelKey,\n  LabelValue,\n  MetricDescriptorType,\n  Timestamp,\n} from '../src/metrics/export/types';\nimport { DerivedGauge } from '../src/metrics/gauges/derived-gauge';\n\nconst METRIC_NAME = 'metric-name';\nconst METRIC_DESCRIPTION = 'metric-description';\nconst UNIT = '1';\nconst GAUGE_INT64 = MetricDescriptorType.GAUGE_INT64;\nconst GAUGE_DOUBLE = MetricDescriptorType.GAUGE_DOUBLE;\nconst LABEL_KEYS: LabelKey[] = [{ key: 'code', description: 'desc' }];\nconst LABEL_VALUES_200: LabelValue[] = [{ value: '200' }];\nconst LABEL_VALUES_400: LabelValue[] = [{ value: '400' }];\nconst LABEL_VALUES_EXRTA: LabelValue[] = [{ value: '200' }, { value: '400' }];\nconst EMPTY_CONSTANT_LABELS = new Map();\nconst CONSTANT_LABELS = new Map();\nCONSTANT_LABELS.set(\n  { key: 'host', description: 'host' },\n  { value: 'localhost' }\n);\n\ndescribe('DerivedGauge', () => {\n  let instance: DerivedGauge;\n  const realHrtimeFn = process.hrtime;\n  const realNowFn = Date.now;\n  const mockedTime: Timestamp = { seconds: 1450000100, nanos: 1e7 };\n  const expectedMetricDescriptor = {\n    name: METRIC_NAME,\n    description: METRIC_DESCRIPTION,\n    unit: UNIT,\n    type: GAUGE_INT64,\n    labelKeys: LABEL_KEYS,\n  };\n\n  beforeEach(() => {\n    instance = new DerivedGauge(\n      METRIC_NAME,\n      METRIC_DESCRIPTION,\n      UNIT,\n      GAUGE_INT64,\n      LABEL_KEYS,\n      EMPTY_CONSTANT_LABELS\n    );\n\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message\n    process.hrtime = () => [100, 1e7];\n    Date.now = () => 1450000000000;\n    // Force the clock to recalibrate the time offset with the mocked time\n    TEST_ONLY.setHrtimeReference();\n  });\n\n  afterEach(() => {\n    process.hrtime = realHrtimeFn;\n    Date.now = realNowFn;\n    // Reset the hrtime reference so that it uses a real clock again.\n    TEST_ONLY.resetHrtimeFunctionCache();\n  });\n\n  describe('createTimeSeries()', () => {\n    it('should throw an error when the keys and values dont have same size', () => {\n      assert.throws(() => {\n        instance.createTimeSeries(LABEL_VALUES_EXRTA, new Map());\n      }, /^Error: Label Keys and Label Values don't have same size$/);\n    });\n    it('should return a Metric', () => {\n      const map = new Map();\n      map.set('key', 'value');\n      instance.createTimeSeries(LABEL_VALUES_200, map);\n      map.set('key1', 'value1');\n\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [\n            {\n              value: 2,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n      // add data in collection\n      map.set('key2', 'value2');\n      map.set('key3', 'value3');\n\n      // add new timeseries with length-method\n      const arr = new Array(5).fill('test');\n      instance.createTimeSeries(LABEL_VALUES_400, {\n        size: () => arr.length,\n      });\n\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 2);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [\n            {\n              value: 4,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n        {\n          labelValues: LABEL_VALUES_400,\n          points: [\n            {\n              value: 5,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n    });\n    it('should return a Metric (INT64) - custom object', () => {\n      class QueueManager {\n        getValue(): number {\n          return 45;\n        }\n      }\n      const obj = new QueueManager();\n      instance.createTimeSeries(LABEL_VALUES_200, obj);\n      const metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [\n            {\n              value: 45,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n    });\n\n    it('should return a Metric value from a function', () => {\n      class QueueManager {\n        private depth = 0;\n        get pendingJobs() {\n          return this.depth;\n        }\n        addJob() {\n          this.depth++;\n        }\n      }\n      const queue = new QueueManager();\n      queue.addJob();\n      instance.createTimeSeries(LABEL_VALUES_200, () => {\n        return queue.pendingJobs;\n      });\n\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [\n            {\n              value: 1,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n      // Simulate a adding multiple jobs in queue\n      queue.addJob();\n      queue.addJob();\n      queue.addJob();\n      metric = instance.getMetric();\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries[0].points, [\n        {\n          value: 4,\n          timestamp: { nanos: mockedTime.nanos, seconds: mockedTime.seconds },\n        },\n      ]);\n    });\n\n    it('should return a Metric (Double) - custom object', () => {\n      class QueueManager {\n        getValue(): number {\n          return 0.7;\n        }\n      }\n      const obj = new QueueManager();\n      const doubleInstance = new DerivedGauge(\n        METRIC_NAME,\n        METRIC_DESCRIPTION,\n        UNIT,\n        GAUGE_DOUBLE,\n        LABEL_KEYS,\n        EMPTY_CONSTANT_LABELS\n      );\n      doubleInstance.createTimeSeries(LABEL_VALUES_200, obj);\n      const metric = doubleInstance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, {\n        name: METRIC_NAME,\n        description: METRIC_DESCRIPTION,\n        unit: UNIT,\n        type: GAUGE_DOUBLE,\n        labelKeys: LABEL_KEYS,\n      });\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [\n            {\n              value: 0.7,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n    });\n\n    it('should return a Metric (Double) - custom object', () => {\n      class QueueManager {\n        getValue(): number {\n          return 0.7;\n        }\n      }\n      const obj = new QueueManager();\n      const doubleInstance = new DerivedGauge(\n        METRIC_NAME,\n        METRIC_DESCRIPTION,\n        UNIT,\n        GAUGE_DOUBLE,\n        LABEL_KEYS,\n        CONSTANT_LABELS\n      );\n      doubleInstance.createTimeSeries(LABEL_VALUES_200, obj);\n      const metric = doubleInstance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, {\n        name: METRIC_NAME,\n        description: METRIC_DESCRIPTION,\n        unit: UNIT,\n        type: GAUGE_DOUBLE,\n        labelKeys: [...LABEL_KEYS, ...Array.from(CONSTANT_LABELS.keys())],\n      });\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: [\n            ...LABEL_VALUES_200,\n            ...Array.from(CONSTANT_LABELS.values()),\n          ],\n          points: [\n            {\n              value: 0.7,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n    });\n\n    it('should not create same timeseries again', () => {\n      const map = new Map();\n      instance.createTimeSeries(LABEL_VALUES_200, map);\n      map.set('key', 'value');\n      const metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 1);\n      assert.deepStrictEqual(metric!.timeseries, [\n        {\n          labelValues: LABEL_VALUES_200,\n          points: [\n            {\n              value: 1,\n              timestamp: {\n                nanos: mockedTime.nanos,\n                seconds: mockedTime.seconds,\n              },\n            },\n          ],\n        },\n      ]);\n\n      // create timeseries with same labels.\n      assert.throws(() => {\n        instance.createTimeSeries(LABEL_VALUES_200, map);\n      }, /^Error: A different time series with the same labels already exists.$/);\n    });\n  });\n  describe('removeTimeSeries()', () => {\n    it('should remove TimeSeries', () => {\n      const arr: string[] = [];\n      instance.createTimeSeries(LABEL_VALUES_200, arr);\n      arr.push('test');\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      instance.removeTimeSeries(LABEL_VALUES_200);\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric, null);\n    });\n  });\n  describe('clear()', () => {\n    it('should clear all TimeSeries', () => {\n      const map = new Map();\n      instance.createTimeSeries(LABEL_VALUES_200, {\n        size: () => map.size,\n      });\n      map.set('key', 'value');\n\n      const arr: string[] = [];\n      instance.createTimeSeries(LABEL_VALUES_400, {\n        size: () => arr.length,\n      });\n      arr.push('test');\n      let metric = instance.getMetric();\n      assert.notStrictEqual(metric, null);\n      assert.deepStrictEqual(metric!.descriptor, expectedMetricDescriptor);\n      assert.strictEqual(metric!.timeseries.length, 2);\n      instance.clear();\n      metric = instance.getMetric();\n      assert.deepStrictEqual(metric, null);\n    });\n  });\n});\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"6fe202b5ad2f2f748db0c8edf85210027ae12ae4"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_zv6tpcihx=function(){return actualCoverage;};}return actualCoverage;}cov_zv6tpcihx();cov_zv6tpcihx().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const assert=(cov_zv6tpcihx().s[1]++,require("assert"));const time_util_1=(cov_zv6tpcihx().s[2]++,require("../src/common/time-util"));const types_1=(cov_zv6tpcihx().s[3]++,require("../src/metrics/export/types"));const derived_gauge_1=(cov_zv6tpcihx().s[4]++,require("../src/metrics/gauges/derived-gauge"));const METRIC_NAME=(cov_zv6tpcihx().s[5]++,'metric-name');const METRIC_DESCRIPTION=(cov_zv6tpcihx().s[6]++,'metric-description');const UNIT=(cov_zv6tpcihx().s[7]++,'1');const GAUGE_INT64=(cov_zv6tpcihx().s[8]++,types_1.MetricDescriptorType.GAUGE_INT64);const GAUGE_DOUBLE=(cov_zv6tpcihx().s[9]++,types_1.MetricDescriptorType.GAUGE_DOUBLE);const LABEL_KEYS=(cov_zv6tpcihx().s[10]++,[{key:'code',description:'desc'}]);const LABEL_VALUES_200=(cov_zv6tpcihx().s[11]++,[{value:'200'}]);const LABEL_VALUES_400=(cov_zv6tpcihx().s[12]++,[{value:'400'}]);const LABEL_VALUES_EXRTA=(cov_zv6tpcihx().s[13]++,[{value:'200'},{value:'400'}]);const EMPTY_CONSTANT_LABELS=(cov_zv6tpcihx().s[14]++,new Map());const CONSTANT_LABELS=(cov_zv6tpcihx().s[15]++,new Map());cov_zv6tpcihx().s[16]++;CONSTANT_LABELS.set({key:'host',description:'host'},{value:'localhost'});cov_zv6tpcihx().s[17]++;describe('DerivedGauge',()=>{cov_zv6tpcihx().f[0]++;let instance;const realHrtimeFn=(cov_zv6tpcihx().s[18]++,process.hrtime);const realNowFn=(cov_zv6tpcihx().s[19]++,Date.now);const mockedTime=(cov_zv6tpcihx().s[20]++,{seconds:1450000100,nanos:1e7});const expectedMetricDescriptor=(cov_zv6tpcihx().s[21]++,{name:METRIC_NAME,description:METRIC_DESCRIPTION,unit:UNIT,type:GAUGE_INT64,labelKeys:LABEL_KEYS});cov_zv6tpcihx().s[22]++;beforeEach(()=>{cov_zv6tpcihx().f[1]++;cov_zv6tpcihx().s[23]++;instance=new derived_gauge_1.DerivedGauge(METRIC_NAME,METRIC_DESCRIPTION,UNIT,GAUGE_INT64,LABEL_KEYS,EMPTY_CONSTANT_LABELS);// @ts-expect-error ts-migrate(2741) FIXME: Property 'bigint' is missing in type '() => [numbe... Remove this comment to see the full error message
cov_zv6tpcihx().s[24]++;process.hrtime=()=>{cov_zv6tpcihx().f[2]++;cov_zv6tpcihx().s[25]++;return[100,1e7];};cov_zv6tpcihx().s[26]++;Date.now=()=>{cov_zv6tpcihx().f[3]++;cov_zv6tpcihx().s[27]++;return 1450000000000;};// Force the clock to recalibrate the time offset with the mocked time
cov_zv6tpcihx().s[28]++;time_util_1.TEST_ONLY.setHrtimeReference();});cov_zv6tpcihx().s[29]++;afterEach(()=>{cov_zv6tpcihx().f[4]++;cov_zv6tpcihx().s[30]++;process.hrtime=realHrtimeFn;cov_zv6tpcihx().s[31]++;Date.now=realNowFn;// Reset the hrtime reference so that it uses a real clock again.
cov_zv6tpcihx().s[32]++;time_util_1.TEST_ONLY.resetHrtimeFunctionCache();});cov_zv6tpcihx().s[33]++;describe('createTimeSeries()',()=>{cov_zv6tpcihx().f[5]++;cov_zv6tpcihx().s[34]++;it('should throw an error when the keys and values dont have same size',()=>{cov_zv6tpcihx().f[6]++;cov_zv6tpcihx().s[35]++;assert.throws(()=>{cov_zv6tpcihx().f[7]++;cov_zv6tpcihx().s[36]++;instance.createTimeSeries(LABEL_VALUES_EXRTA,new Map());},/^Error: Label Keys and Label Values don't have same size$/);});cov_zv6tpcihx().s[37]++;it('should return a Metric',()=>{cov_zv6tpcihx().f[8]++;const map=(cov_zv6tpcihx().s[38]++,new Map());cov_zv6tpcihx().s[39]++;map.set('key','value');cov_zv6tpcihx().s[40]++;instance.createTimeSeries(LABEL_VALUES_200,map);cov_zv6tpcihx().s[41]++;map.set('key1','value1');let metric=(cov_zv6tpcihx().s[42]++,instance.getMetric());cov_zv6tpcihx().s[43]++;assert.notStrictEqual(metric,null);cov_zv6tpcihx().s[44]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_zv6tpcihx().s[45]++;assert.strictEqual(metric.timeseries.length,1);cov_zv6tpcihx().s[46]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:LABEL_VALUES_200,points:[{value:2,timestamp:{nanos:mockedTime.nanos,seconds:mockedTime.seconds}}]}]);// add data in collection
cov_zv6tpcihx().s[47]++;map.set('key2','value2');cov_zv6tpcihx().s[48]++;map.set('key3','value3');// add new timeseries with length-method
const arr=(cov_zv6tpcihx().s[49]++,new Array(5).fill('test'));cov_zv6tpcihx().s[50]++;instance.createTimeSeries(LABEL_VALUES_400,{size:()=>{cov_zv6tpcihx().f[9]++;cov_zv6tpcihx().s[51]++;return arr.length;}});cov_zv6tpcihx().s[52]++;metric=instance.getMetric();cov_zv6tpcihx().s[53]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_zv6tpcihx().s[54]++;assert.strictEqual(metric.timeseries.length,2);cov_zv6tpcihx().s[55]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:LABEL_VALUES_200,points:[{value:4,timestamp:{nanos:mockedTime.nanos,seconds:mockedTime.seconds}}]},{labelValues:LABEL_VALUES_400,points:[{value:5,timestamp:{nanos:mockedTime.nanos,seconds:mockedTime.seconds}}]}]);});cov_zv6tpcihx().s[56]++;it('should return a Metric (INT64) - custom object',()=>{cov_zv6tpcihx().f[10]++;class QueueManager{getValue(){cov_zv6tpcihx().f[11]++;cov_zv6tpcihx().s[57]++;return 45;}}const obj=(cov_zv6tpcihx().s[58]++,new QueueManager());cov_zv6tpcihx().s[59]++;instance.createTimeSeries(LABEL_VALUES_200,obj);const metric=(cov_zv6tpcihx().s[60]++,instance.getMetric());cov_zv6tpcihx().s[61]++;assert.notStrictEqual(metric,null);cov_zv6tpcihx().s[62]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_zv6tpcihx().s[63]++;assert.strictEqual(metric.timeseries.length,1);cov_zv6tpcihx().s[64]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:LABEL_VALUES_200,points:[{value:45,timestamp:{nanos:mockedTime.nanos,seconds:mockedTime.seconds}}]}]);});cov_zv6tpcihx().s[65]++;it('should return a Metric value from a function',()=>{cov_zv6tpcihx().f[12]++;class QueueManager{constructor(){cov_zv6tpcihx().f[13]++;cov_zv6tpcihx().s[66]++;this.depth=0;}get pendingJobs(){cov_zv6tpcihx().f[14]++;cov_zv6tpcihx().s[67]++;return this.depth;}addJob(){cov_zv6tpcihx().f[15]++;cov_zv6tpcihx().s[68]++;this.depth++;}}const queue=(cov_zv6tpcihx().s[69]++,new QueueManager());cov_zv6tpcihx().s[70]++;queue.addJob();cov_zv6tpcihx().s[71]++;instance.createTimeSeries(LABEL_VALUES_200,()=>{cov_zv6tpcihx().f[16]++;cov_zv6tpcihx().s[72]++;return queue.pendingJobs;});let metric=(cov_zv6tpcihx().s[73]++,instance.getMetric());cov_zv6tpcihx().s[74]++;assert.notStrictEqual(metric,null);cov_zv6tpcihx().s[75]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_zv6tpcihx().s[76]++;assert.strictEqual(metric.timeseries.length,1);cov_zv6tpcihx().s[77]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:LABEL_VALUES_200,points:[{value:1,timestamp:{nanos:mockedTime.nanos,seconds:mockedTime.seconds}}]}]);// Simulate a adding multiple jobs in queue
cov_zv6tpcihx().s[78]++;queue.addJob();cov_zv6tpcihx().s[79]++;queue.addJob();cov_zv6tpcihx().s[80]++;queue.addJob();cov_zv6tpcihx().s[81]++;metric=instance.getMetric();cov_zv6tpcihx().s[82]++;assert.strictEqual(metric.timeseries.length,1);cov_zv6tpcihx().s[83]++;assert.deepStrictEqual(metric.timeseries[0].points,[{value:4,timestamp:{nanos:mockedTime.nanos,seconds:mockedTime.seconds}}]);});cov_zv6tpcihx().s[84]++;it('should return a Metric (Double) - custom object',()=>{cov_zv6tpcihx().f[17]++;class QueueManager{getValue(){cov_zv6tpcihx().f[18]++;cov_zv6tpcihx().s[85]++;return 0.7;}}const obj=(cov_zv6tpcihx().s[86]++,new QueueManager());const doubleInstance=(cov_zv6tpcihx().s[87]++,new derived_gauge_1.DerivedGauge(METRIC_NAME,METRIC_DESCRIPTION,UNIT,GAUGE_DOUBLE,LABEL_KEYS,EMPTY_CONSTANT_LABELS));cov_zv6tpcihx().s[88]++;doubleInstance.createTimeSeries(LABEL_VALUES_200,obj);const metric=(cov_zv6tpcihx().s[89]++,doubleInstance.getMetric());cov_zv6tpcihx().s[90]++;assert.notStrictEqual(metric,null);cov_zv6tpcihx().s[91]++;assert.deepStrictEqual(metric.descriptor,{name:METRIC_NAME,description:METRIC_DESCRIPTION,unit:UNIT,type:GAUGE_DOUBLE,labelKeys:LABEL_KEYS});cov_zv6tpcihx().s[92]++;assert.strictEqual(metric.timeseries.length,1);cov_zv6tpcihx().s[93]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:LABEL_VALUES_200,points:[{value:0.7,timestamp:{nanos:mockedTime.nanos,seconds:mockedTime.seconds}}]}]);});cov_zv6tpcihx().s[94]++;it('should return a Metric (Double) - custom object',()=>{cov_zv6tpcihx().f[19]++;class QueueManager{getValue(){cov_zv6tpcihx().f[20]++;cov_zv6tpcihx().s[95]++;return 0.7;}}const obj=(cov_zv6tpcihx().s[96]++,new QueueManager());const doubleInstance=(cov_zv6tpcihx().s[97]++,new derived_gauge_1.DerivedGauge(METRIC_NAME,METRIC_DESCRIPTION,UNIT,GAUGE_DOUBLE,LABEL_KEYS,CONSTANT_LABELS));cov_zv6tpcihx().s[98]++;doubleInstance.createTimeSeries(LABEL_VALUES_200,obj);const metric=(cov_zv6tpcihx().s[99]++,doubleInstance.getMetric());cov_zv6tpcihx().s[100]++;assert.notStrictEqual(metric,null);cov_zv6tpcihx().s[101]++;assert.deepStrictEqual(metric.descriptor,{name:METRIC_NAME,description:METRIC_DESCRIPTION,unit:UNIT,type:GAUGE_DOUBLE,labelKeys:[...LABEL_KEYS,...Array.from(CONSTANT_LABELS.keys())]});cov_zv6tpcihx().s[102]++;assert.strictEqual(metric.timeseries.length,1);cov_zv6tpcihx().s[103]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:[...LABEL_VALUES_200,...Array.from(CONSTANT_LABELS.values())],points:[{value:0.7,timestamp:{nanos:mockedTime.nanos,seconds:mockedTime.seconds}}]}]);});cov_zv6tpcihx().s[104]++;it('should not create same timeseries again',()=>{cov_zv6tpcihx().f[21]++;const map=(cov_zv6tpcihx().s[105]++,new Map());cov_zv6tpcihx().s[106]++;instance.createTimeSeries(LABEL_VALUES_200,map);cov_zv6tpcihx().s[107]++;map.set('key','value');const metric=(cov_zv6tpcihx().s[108]++,instance.getMetric());cov_zv6tpcihx().s[109]++;assert.notStrictEqual(metric,null);cov_zv6tpcihx().s[110]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_zv6tpcihx().s[111]++;assert.strictEqual(metric.timeseries.length,1);cov_zv6tpcihx().s[112]++;assert.deepStrictEqual(metric.timeseries,[{labelValues:LABEL_VALUES_200,points:[{value:1,timestamp:{nanos:mockedTime.nanos,seconds:mockedTime.seconds}}]}]);// create timeseries with same labels.
cov_zv6tpcihx().s[113]++;assert.throws(()=>{cov_zv6tpcihx().f[22]++;cov_zv6tpcihx().s[114]++;instance.createTimeSeries(LABEL_VALUES_200,map);},/^Error: A different time series with the same labels already exists.$/);});});cov_zv6tpcihx().s[115]++;describe('removeTimeSeries()',()=>{cov_zv6tpcihx().f[23]++;cov_zv6tpcihx().s[116]++;it('should remove TimeSeries',()=>{cov_zv6tpcihx().f[24]++;const arr=(cov_zv6tpcihx().s[117]++,[]);cov_zv6tpcihx().s[118]++;instance.createTimeSeries(LABEL_VALUES_200,arr);cov_zv6tpcihx().s[119]++;arr.push('test');let metric=(cov_zv6tpcihx().s[120]++,instance.getMetric());cov_zv6tpcihx().s[121]++;assert.notStrictEqual(metric,null);cov_zv6tpcihx().s[122]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_zv6tpcihx().s[123]++;instance.removeTimeSeries(LABEL_VALUES_200);cov_zv6tpcihx().s[124]++;metric=instance.getMetric();cov_zv6tpcihx().s[125]++;assert.deepStrictEqual(metric,null);});});cov_zv6tpcihx().s[126]++;describe('clear()',()=>{cov_zv6tpcihx().f[25]++;cov_zv6tpcihx().s[127]++;it('should clear all TimeSeries',()=>{cov_zv6tpcihx().f[26]++;const map=(cov_zv6tpcihx().s[128]++,new Map());cov_zv6tpcihx().s[129]++;instance.createTimeSeries(LABEL_VALUES_200,{size:()=>{cov_zv6tpcihx().f[27]++;cov_zv6tpcihx().s[130]++;return map.size;}});cov_zv6tpcihx().s[131]++;map.set('key','value');const arr=(cov_zv6tpcihx().s[132]++,[]);cov_zv6tpcihx().s[133]++;instance.createTimeSeries(LABEL_VALUES_400,{size:()=>{cov_zv6tpcihx().f[28]++;cov_zv6tpcihx().s[134]++;return arr.length;}});cov_zv6tpcihx().s[135]++;arr.push('test');let metric=(cov_zv6tpcihx().s[136]++,instance.getMetric());cov_zv6tpcihx().s[137]++;assert.notStrictEqual(metric,null);cov_zv6tpcihx().s[138]++;assert.deepStrictEqual(metric.descriptor,expectedMetricDescriptor);cov_zv6tpcihx().s[139]++;assert.strictEqual(metric.timeseries.length,2);cov_zv6tpcihx().s[140]++;instance.clear();cov_zv6tpcihx().s[141]++;metric=instance.getMetric();cov_zv6tpcihx().s[142]++;assert.deepStrictEqual(metric,null);});});});//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,