{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/export/metric-producer-manager.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/export/metric-producer-manager.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,0DAA2D;AAG3D;;;GAGG;AACH,MAAM,yBAAyB;IAA/B;QAIU,oBAAe,GAAwB,IAAI,GAAG,EAAkB,CAAC;IA+C3E,CAAC;IA7CC,yBAAyB;IACzB,MAAM,KAAK,QAAQ;QACjB,OAAO,IAAI,CAAC,iBAAiB,IAAI,CAAC,IAAI,CAAC,iBAAiB,GAAG,IAAI,IAAI,EAAE,CAAC,CAAC;IACzE,CAAC;IAED;;;;OAIG;IACH,GAAG,CAAC,cAA8B;QAChC,6BAAe,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC;QAClD,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE;YAC7C,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;SAC1C;IACH,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,cAA8B;QACnC,6BAAe,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC;QAClD,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;IAC9C,CAAC;IAED;;OAEG;IACH,SAAS;QACP,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;IAC/B,CAAC;IAED;;;;;;;OAOG;IACH,oBAAoB;QAClB,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;CACF;AAEY,QAAA,6BAA6B,GAAG,yBAAyB,CAAC,QAAQ,CAAC","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { validateNotNull } from '../../common/validations';\nimport { MetricProducer, MetricProducerManager } from './types';\n\n/**\n * Keeps a set of MetricProducer that is used by exporters to determine the\n * metrics that need to be exported.\n */\nclass BaseMetricProducerManager implements MetricProducerManager {\n  /** Singleton instance */\n  private static singletonInstance: MetricProducerManager;\n\n  private metricProducers: Set<MetricProducer> = new Set<MetricProducer>();\n\n  /** Gets the instance. */\n  static get instance(): MetricProducerManager {\n    return this.singletonInstance || (this.singletonInstance = new this());\n  }\n\n  /**\n   * Adds the MetricProducer to the manager if it is not already present.\n   *\n   * @param metricProducer The MetricProducer to be added to the manager.\n   */\n  add(metricProducer: MetricProducer): void {\n    validateNotNull(metricProducer, 'metricProducer');\n    if (!this.metricProducers.has(metricProducer)) {\n      this.metricProducers.add(metricProducer);\n    }\n  }\n\n  /**\n   * Removes the MetricProducer to the manager if it is present.\n   *\n   * @param metricProducer The MetricProducer to be removed from the manager.\n   */\n  remove(metricProducer: MetricProducer): void {\n    validateNotNull(metricProducer, 'metricProducer');\n    this.metricProducers.delete(metricProducer);\n  }\n\n  /**\n   * Clears all MetricProducers.\n   */\n  removeAll(): void {\n    this.metricProducers.clear();\n  }\n\n  /**\n   * Returns all registered MetricProducers that should be exported.\n   *\n   * This method should be used by any metrics exporter that automatically\n   * exports data for MetricProducer registered with the MetricProducerManager.\n   *\n   * @return {Set<MetricProducer>} The Set of MetricProducers.\n   */\n  getAllMetricProducer(): Set<MetricProducer> {\n    return this.metricProducers;\n  }\n}\n\nexport const metricProducerManagerInstance = BaseMetricProducerManager.instance;\n"]}