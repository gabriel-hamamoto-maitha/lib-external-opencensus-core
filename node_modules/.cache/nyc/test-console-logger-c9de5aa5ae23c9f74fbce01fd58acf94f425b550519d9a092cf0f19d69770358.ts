"use strict";/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_1bme90hycn(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-console-logger.ts";var hash="7625c7424e460dffe2c48c41fb75942cd290e651";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-console-logger.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:15},end:{line:18,column:32}},"2":{start:{line:19,column:15},end:{line:19,column:54}},"3":{start:{line:20,column:25},end:{line:20,column:64}},"4":{start:{line:21,column:15},end:{line:21,column:59}},"5":{start:{line:22,column:17},end:{line:22,column:19}},"6":{start:{line:25,column:0},end:{line:106,column:3}},"7":{start:{line:26,column:22},end:{line:26,column:49}},"8":{start:{line:27,column:28},end:{line:30,column:6}},"9":{start:{line:28,column:8},end:{line:28,column:25}},"10":{start:{line:29,column:8},end:{line:29,column:19}},"11":{start:{line:32,column:4},end:{line:41,column:7}},"12":{start:{line:33,column:8},end:{line:36,column:11}},"13":{start:{line:34,column:12},end:{line:34,column:28}},"14":{start:{line:35,column:12},end:{line:35,column:92}},"15":{start:{line:37,column:8},end:{line:40,column:11}},"16":{start:{line:38,column:34},end:{line:38,column:50}},"17":{start:{line:39,column:12},end:{line:39,column:63}},"18":{start:{line:43,column:4},end:{line:73,column:7}},"19":{start:{line:44,column:30},end:{line:44,column:54}},"20":{start:{line:45,column:8},end:{line:51,column:11}},"21":{start:{line:46,column:12},end:{line:46,column:28}},"22":{start:{line:47,column:12},end:{line:47,column:53}},"23":{start:{line:48,column:12},end:{line:48,column:30}},"24":{start:{line:49,column:35},end:{line:49,column:62}},"25":{start:{line:50,column:12},end:{line:50,column:43}},"26":{start:{line:52,column:8},end:{line:58,column:11}},"27":{start:{line:53,column:12},end:{line:53,column:28}},"28":{start:{line:54,column:12},end:{line:54,column:51}},"29":{start:{line:55,column:12},end:{line:55,column:30}},"30":{start:{line:56,column:35},end:{line:56,column:61}},"31":{start:{line:57,column:12},end:{line:57,column:51}},"32":{start:{line:59,column:8},end:{line:65,column:11}},"33":{start:{line:60,column:12},end:{line:60,column:28}},"34":{start:{line:61,column:12},end:{line:61,column:51}},"35":{start:{line:62,column:12},end:{line:62,column:30}},"36":{start:{line:63,column:35},end:{line:63,column:61}},"37":{start:{line:64,column:12},end:{line:64,column:51}},"38":{start:{line:66,column:8},end:{line:72,column:11}},"39":{start:{line:67,column:12},end:{line:67,column:28}},"40":{start:{line:68,column:12},end:{line:68,column:53}},"41":{start:{line:69,column:12},end:{line:69,column:30}},"42":{start:{line:70,column:35},end:{line:70,column:62}},"43":{start:{line:71,column:12},end:{line:71,column:51}},"44":{start:{line:75,column:4},end:{line:105,column:7}},"45":{start:{line:76,column:30},end:{line:76,column:46}},"46":{start:{line:77,column:8},end:{line:83,column:11}},"47":{start:{line:78,column:12},end:{line:78,column:28}},"48":{start:{line:79,column:12},end:{line:79,column:53}},"49":{start:{line:80,column:12},end:{line:80,column:30}},"50":{start:{line:81,column:35},end:{line:81,column:62}},"51":{start:{line:82,column:12},end:{line:82,column:51}},"52":{start:{line:84,column:8},end:{line:90,column:11}},"53":{start:{line:85,column:12},end:{line:85,column:28}},"54":{start:{line:86,column:12},end:{line:86,column:51}},"55":{start:{line:87,column:12},end:{line:87,column:30}},"56":{start:{line:88,column:35},end:{line:88,column:61}},"57":{start:{line:89,column:12},end:{line:89,column:51}},"58":{start:{line:91,column:8},end:{line:97,column:11}},"59":{start:{line:92,column:12},end:{line:92,column:28}},"60":{start:{line:93,column:12},end:{line:93,column:51}},"61":{start:{line:94,column:12},end:{line:94,column:30}},"62":{start:{line:95,column:35},end:{line:95,column:61}},"63":{start:{line:96,column:12},end:{line:96,column:51}},"64":{start:{line:98,column:8},end:{line:104,column:11}},"65":{start:{line:99,column:12},end:{line:99,column:28}},"66":{start:{line:100,column:12},end:{line:100,column:53}},"67":{start:{line:101,column:12},end:{line:101,column:30}},"68":{start:{line:102,column:35},end:{line:102,column:62}},"69":{start:{line:103,column:12},end:{line:103,column:51}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:25,column:26},end:{line:25,column:27}},loc:{start:{line:25,column:32},end:{line:106,column:1}},line:25},"1":{name:"(anonymous_1)",decl:{start:{line:27,column:38},end:{line:27,column:39}},loc:{start:{line:27,column:47},end:{line:30,column:5}},line:27},"2":{name:"(anonymous_2)",decl:{start:{line:32,column:36},end:{line:32,column:37}},loc:{start:{line:32,column:42},end:{line:41,column:5}},line:32},"3":{name:"(anonymous_3)",decl:{start:{line:33,column:45},end:{line:33,column:46}},loc:{start:{line:33,column:51},end:{line:36,column:9}},line:33},"4":{name:"(anonymous_4)",decl:{start:{line:37,column:36},end:{line:37,column:37}},loc:{start:{line:37,column:42},end:{line:40,column:9}},line:37},"5":{name:"(anonymous_5)",decl:{start:{line:43,column:29},end:{line:43,column:30}},loc:{start:{line:43,column:35},end:{line:73,column:5}},line:43},"6":{name:"(anonymous_6)",decl:{start:{line:45,column:31},end:{line:45,column:32}},loc:{start:{line:45,column:37},end:{line:51,column:9}},line:45},"7":{name:"(anonymous_7)",decl:{start:{line:52,column:34},end:{line:52,column:35}},loc:{start:{line:52,column:40},end:{line:58,column:9}},line:52},"8":{name:"(anonymous_8)",decl:{start:{line:59,column:34},end:{line:59,column:35}},loc:{start:{line:59,column:40},end:{line:65,column:9}},line:59},"9":{name:"(anonymous_9)",decl:{start:{line:66,column:35},end:{line:66,column:36}},loc:{start:{line:66,column:41},end:{line:72,column:9}},line:66},"10":{name:"(anonymous_10)",decl:{start:{line:75,column:30},end:{line:75,column:31}},loc:{start:{line:75,column:36},end:{line:105,column:5}},line:75},"11":{name:"(anonymous_11)",decl:{start:{line:77,column:35},end:{line:77,column:36}},loc:{start:{line:77,column:41},end:{line:83,column:9}},line:77},"12":{name:"(anonymous_12)",decl:{start:{line:84,column:34},end:{line:84,column:35}},loc:{start:{line:84,column:40},end:{line:90,column:9}},line:84},"13":{name:"(anonymous_13)",decl:{start:{line:91,column:34},end:{line:91,column:35}},loc:{start:{line:91,column:40},end:{line:97,column:9}},line:91},"14":{name:"(anonymous_14)",decl:{start:{line:98,column:35},end:{line:98,column:36}},loc:{start:{line:98,column:41},end:{line:104,column:9}},line:98}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},b:{},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-console-logger.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-console-logger.ts"],names:[],mappings:"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",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport * as logger from '../src/common/console-logger';\nimport { ConsoleLogger } from '../src/common/console-logger';\n\nconst LEVELS = ['silent', 'error', 'warn', 'info', 'debug'];\nlet consoleTxt = '';\n\n// TODO: Review test cases: Maybe testing the info log level is sufficient\n// because it already shows that lower levels will log, and higher levels won't.\n\ndescribe('ConsoleLogger', () => {\n  const intercept = require('intercept-stdout');\n  const unhookIntercept = intercept((txt: string) => {\n    consoleTxt = txt;\n    return txt;\n  });\n\n  /** Should create a new ConsoleLogger */\n  describe('new ConsoleLogger()', () => {\n    it('should log with default levels', () => {\n      logger.logger();\n      assert.strictEqual(LEVELS.length, ConsoleLogger.LEVELS.length);\n    });\n\n    it('should log with error', () => {\n      const consoleLogger = logger.logger(1);\n      assert.strictEqual(LEVELS[1], consoleLogger.level);\n    });\n  });\n\n  /** Should logger only error log */\n  describe('error logger', () => {\n    const consoleLogger = logger.logger(LEVELS[1]);\n\n    it('should log error', () => {\n      consoleTxt = '';\n      consoleLogger.error('error test logger');\n      unhookIntercept();\n      const validateString = consoleTxt.indexOf('error');\n\n      assert.ok(validateString >= 0);\n    });\n\n    it('should not log warn', () => {\n      consoleTxt = '';\n      consoleLogger.warn('warn test logger');\n      unhookIntercept();\n\n      const validateString = consoleTxt.indexOf('warn');\n\n      assert.strictEqual(validateString, -1);\n    });\n\n    it('should not log info', () => {\n      consoleTxt = '';\n      consoleLogger.info('info test logger');\n      unhookIntercept();\n\n      const validateString = consoleTxt.indexOf('info');\n\n      assert.strictEqual(validateString, -1);\n    });\n\n    it('should not log debug', () => {\n      consoleTxt = '';\n      consoleLogger.debug('debug test logger');\n      unhookIntercept();\n      const validateString = consoleTxt.indexOf('debug');\n\n      assert.strictEqual(validateString, -1);\n    });\n  });\n\n  /** Should disable logger  */\n  describe('silent logger', () => {\n    const consoleLogger = logger.logger(0);\n\n    it('should not log error', () => {\n      consoleTxt = '';\n      consoleLogger.error('error test logger');\n      unhookIntercept();\n      const validateString = consoleTxt.indexOf('error');\n\n      assert.strictEqual(validateString, -1);\n    });\n\n    it('should not log warn', () => {\n      consoleTxt = '';\n      consoleLogger.warn('warn test logger');\n      unhookIntercept();\n\n      const validateString = consoleTxt.indexOf('warn');\n\n      assert.strictEqual(validateString, -1);\n    });\n\n    it('should not log info', () => {\n      consoleTxt = '';\n      consoleLogger.info('info test logger');\n      unhookIntercept();\n\n      const validateString = consoleTxt.indexOf('info');\n\n      assert.strictEqual(validateString, -1);\n    });\n\n    it('should not log debug', () => {\n      consoleTxt = '';\n      consoleLogger.debug('debug test logger');\n      unhookIntercept();\n      const validateString = consoleTxt.indexOf('debug');\n\n      assert.strictEqual(validateString, -1);\n    });\n  });\n});\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"7625c7424e460dffe2c48c41fb75942cd290e651"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1bme90hycn=function(){return actualCoverage;};}return actualCoverage;}cov_1bme90hycn();cov_1bme90hycn().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const assert=(cov_1bme90hycn().s[1]++,require("assert"));const logger=(cov_1bme90hycn().s[2]++,require("../src/common/console-logger"));const console_logger_1=(cov_1bme90hycn().s[3]++,require("../src/common/console-logger"));const LEVELS=(cov_1bme90hycn().s[4]++,['silent','error','warn','info','debug']);let consoleTxt=(cov_1bme90hycn().s[5]++,'');// TODO: Review test cases: Maybe testing the info log level is sufficient
// because it already shows that lower levels will log, and higher levels won't.
cov_1bme90hycn().s[6]++;describe('ConsoleLogger',()=>{cov_1bme90hycn().f[0]++;const intercept=(cov_1bme90hycn().s[7]++,require('intercept-stdout'));const unhookIntercept=(cov_1bme90hycn().s[8]++,intercept(txt=>{cov_1bme90hycn().f[1]++;cov_1bme90hycn().s[9]++;consoleTxt=txt;cov_1bme90hycn().s[10]++;return txt;}));/** Should create a new ConsoleLogger */cov_1bme90hycn().s[11]++;describe('new ConsoleLogger()',()=>{cov_1bme90hycn().f[2]++;cov_1bme90hycn().s[12]++;it('should log with default levels',()=>{cov_1bme90hycn().f[3]++;cov_1bme90hycn().s[13]++;logger.logger();cov_1bme90hycn().s[14]++;assert.strictEqual(LEVELS.length,console_logger_1.ConsoleLogger.LEVELS.length);});cov_1bme90hycn().s[15]++;it('should log with error',()=>{cov_1bme90hycn().f[4]++;const consoleLogger=(cov_1bme90hycn().s[16]++,logger.logger(1));cov_1bme90hycn().s[17]++;assert.strictEqual(LEVELS[1],consoleLogger.level);});});/** Should logger only error log */cov_1bme90hycn().s[18]++;describe('error logger',()=>{cov_1bme90hycn().f[5]++;const consoleLogger=(cov_1bme90hycn().s[19]++,logger.logger(LEVELS[1]));cov_1bme90hycn().s[20]++;it('should log error',()=>{cov_1bme90hycn().f[6]++;cov_1bme90hycn().s[21]++;consoleTxt='';cov_1bme90hycn().s[22]++;consoleLogger.error('error test logger');cov_1bme90hycn().s[23]++;unhookIntercept();const validateString=(cov_1bme90hycn().s[24]++,consoleTxt.indexOf('error'));cov_1bme90hycn().s[25]++;assert.ok(validateString>=0);});cov_1bme90hycn().s[26]++;it('should not log warn',()=>{cov_1bme90hycn().f[7]++;cov_1bme90hycn().s[27]++;consoleTxt='';cov_1bme90hycn().s[28]++;consoleLogger.warn('warn test logger');cov_1bme90hycn().s[29]++;unhookIntercept();const validateString=(cov_1bme90hycn().s[30]++,consoleTxt.indexOf('warn'));cov_1bme90hycn().s[31]++;assert.strictEqual(validateString,-1);});cov_1bme90hycn().s[32]++;it('should not log info',()=>{cov_1bme90hycn().f[8]++;cov_1bme90hycn().s[33]++;consoleTxt='';cov_1bme90hycn().s[34]++;consoleLogger.info('info test logger');cov_1bme90hycn().s[35]++;unhookIntercept();const validateString=(cov_1bme90hycn().s[36]++,consoleTxt.indexOf('info'));cov_1bme90hycn().s[37]++;assert.strictEqual(validateString,-1);});cov_1bme90hycn().s[38]++;it('should not log debug',()=>{cov_1bme90hycn().f[9]++;cov_1bme90hycn().s[39]++;consoleTxt='';cov_1bme90hycn().s[40]++;consoleLogger.debug('debug test logger');cov_1bme90hycn().s[41]++;unhookIntercept();const validateString=(cov_1bme90hycn().s[42]++,consoleTxt.indexOf('debug'));cov_1bme90hycn().s[43]++;assert.strictEqual(validateString,-1);});});/** Should disable logger  */cov_1bme90hycn().s[44]++;describe('silent logger',()=>{cov_1bme90hycn().f[10]++;const consoleLogger=(cov_1bme90hycn().s[45]++,logger.logger(0));cov_1bme90hycn().s[46]++;it('should not log error',()=>{cov_1bme90hycn().f[11]++;cov_1bme90hycn().s[47]++;consoleTxt='';cov_1bme90hycn().s[48]++;consoleLogger.error('error test logger');cov_1bme90hycn().s[49]++;unhookIntercept();const validateString=(cov_1bme90hycn().s[50]++,consoleTxt.indexOf('error'));cov_1bme90hycn().s[51]++;assert.strictEqual(validateString,-1);});cov_1bme90hycn().s[52]++;it('should not log warn',()=>{cov_1bme90hycn().f[12]++;cov_1bme90hycn().s[53]++;consoleTxt='';cov_1bme90hycn().s[54]++;consoleLogger.warn('warn test logger');cov_1bme90hycn().s[55]++;unhookIntercept();const validateString=(cov_1bme90hycn().s[56]++,consoleTxt.indexOf('warn'));cov_1bme90hycn().s[57]++;assert.strictEqual(validateString,-1);});cov_1bme90hycn().s[58]++;it('should not log info',()=>{cov_1bme90hycn().f[13]++;cov_1bme90hycn().s[59]++;consoleTxt='';cov_1bme90hycn().s[60]++;consoleLogger.info('info test logger');cov_1bme90hycn().s[61]++;unhookIntercept();const validateString=(cov_1bme90hycn().s[62]++,consoleTxt.indexOf('info'));cov_1bme90hycn().s[63]++;assert.strictEqual(validateString,-1);});cov_1bme90hycn().s[64]++;it('should not log debug',()=>{cov_1bme90hycn().f[14]++;cov_1bme90hycn().s[65]++;consoleTxt='';cov_1bme90hycn().s[66]++;consoleLogger.debug('debug test logger');cov_1bme90hycn().s[67]++;unhookIntercept();const validateString=(cov_1bme90hycn().s[68]++,consoleTxt.indexOf('debug'));cov_1bme90hycn().s[69]++;assert.strictEqual(validateString,-1);});});});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3VzZXJtYWl0aGEvdHJhZGVtYXN0ZXIvbGlicy9saWItZXh0ZXJuYWwtb3BlbmNlbnN1cy1ub2RlL3Rlc3QvdGVzdC1jb25zb2xlLWxvZ2dlci50cyIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXJtYWl0aGEvdHJhZGVtYXN0ZXIvbGlicy9saWItZXh0ZXJuYWwtb3BlbmNlbnN1cy1ub2RlL3Rlc3QvdGVzdC1jb25zb2xlLWxvZ2dlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7O0dBY0c7O0FBRUgsaUNBQWlDO0FBQ2pDLHVEQUF1RDtBQUN2RCxpRUFBNkQ7QUFFN0QsTUFBTSxNQUFNLEdBQUcsQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDNUQsSUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDO0FBRXBCLDBFQUEwRTtBQUMxRSxnRkFBZ0Y7QUFFaEYsUUFBUSxDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUU7SUFDN0IsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDOUMsTUFBTSxlQUFlLEdBQUcsU0FBUyxDQUFDLENBQUMsR0FBVyxFQUFFLEVBQUU7UUFDaEQsVUFBVSxHQUFHLEdBQUcsQ0FBQztRQUNqQixPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUMsQ0FBQyxDQUFDO0lBRUgsd0NBQXdDO0lBQ3hDLFFBQVEsQ0FBQyxxQkFBcUIsRUFBRSxHQUFHLEVBQUU7UUFDbkMsRUFBRSxDQUFDLGdDQUFnQyxFQUFFLEdBQUcsRUFBRTtZQUN4QyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDaEIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLDhCQUFhLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2pFLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHVCQUF1QixFQUFFLEdBQUcsRUFBRTtZQUMvQixNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZDLE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNyRCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsbUNBQW1DO0lBQ25DLFFBQVEsQ0FBQyxjQUFjLEVBQUUsR0FBRyxFQUFFO1FBQzVCLE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFL0MsRUFBRSxDQUFDLGtCQUFrQixFQUFFLEdBQUcsRUFBRTtZQUMxQixVQUFVLEdBQUcsRUFBRSxDQUFDO1lBQ2hCLGFBQWEsQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQztZQUN6QyxlQUFlLEVBQUUsQ0FBQztZQUNsQixNQUFNLGNBQWMsR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRW5ELE1BQU0sQ0FBQyxFQUFFLENBQUMsY0FBYyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHFCQUFxQixFQUFFLEdBQUcsRUFBRTtZQUM3QixVQUFVLEdBQUcsRUFBRSxDQUFDO1lBQ2hCLGFBQWEsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztZQUN2QyxlQUFlLEVBQUUsQ0FBQztZQUVsQixNQUFNLGNBQWMsR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBRWxELE1BQU0sQ0FBQyxXQUFXLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekMsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMscUJBQXFCLEVBQUUsR0FBRyxFQUFFO1lBQzdCLFVBQVUsR0FBRyxFQUFFLENBQUM7WUFDaEIsYUFBYSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBQ3ZDLGVBQWUsRUFBRSxDQUFDO1lBRWxCLE1BQU0sY0FBYyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7WUFFbEQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxzQkFBc0IsRUFBRSxHQUFHLEVBQUU7WUFDOUIsVUFBVSxHQUFHLEVBQUUsQ0FBQztZQUNoQixhQUFhLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUM7WUFDekMsZUFBZSxFQUFFLENBQUM7WUFDbEIsTUFBTSxjQUFjLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUVuRCxNQUFNLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCw2QkFBNkI7SUFDN0IsUUFBUSxDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUU7UUFDN0IsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUV2QyxFQUFFLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFO1lBQzlCLFVBQVUsR0FBRyxFQUFFLENBQUM7WUFDaEIsYUFBYSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1lBQ3pDLGVBQWUsRUFBRSxDQUFDO1lBQ2xCLE1BQU0sY0FBYyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFbkQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxHQUFHLEVBQUU7WUFDN0IsVUFBVSxHQUFHLEVBQUUsQ0FBQztZQUNoQixhQUFhLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7WUFDdkMsZUFBZSxFQUFFLENBQUM7WUFFbEIsTUFBTSxjQUFjLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUVsRCxNQUFNLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHFCQUFxQixFQUFFLEdBQUcsRUFBRTtZQUM3QixVQUFVLEdBQUcsRUFBRSxDQUFDO1lBQ2hCLGFBQWEsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztZQUN2QyxlQUFlLEVBQUUsQ0FBQztZQUVsQixNQUFNLGNBQWMsR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBRWxELE1BQU0sQ0FBQyxXQUFXLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekMsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFO1lBQzlCLFVBQVUsR0FBRyxFQUFFLENBQUM7WUFDaEIsYUFBYSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1lBQ3pDLGVBQWUsRUFBRSxDQUFDO1lBQ2xCLE1BQU0sY0FBYyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFbkQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDE4LCBPcGVuQ2Vuc3VzIEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgJ0xpY2Vuc2UnKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gJ0FTIElTJyBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0ICogYXMgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7XG5pbXBvcnQgKiBhcyBsb2dnZXIgZnJvbSAnLi4vc3JjL2NvbW1vbi9jb25zb2xlLWxvZ2dlcic7XG5pbXBvcnQgeyBDb25zb2xlTG9nZ2VyIH0gZnJvbSAnLi4vc3JjL2NvbW1vbi9jb25zb2xlLWxvZ2dlcic7XG5cbmNvbnN0IExFVkVMUyA9IFsnc2lsZW50JywgJ2Vycm9yJywgJ3dhcm4nLCAnaW5mbycsICdkZWJ1ZyddO1xubGV0IGNvbnNvbGVUeHQgPSAnJztcblxuLy8gVE9ETzogUmV2aWV3IHRlc3QgY2FzZXM6IE1heWJlIHRlc3RpbmcgdGhlIGluZm8gbG9nIGxldmVsIGlzIHN1ZmZpY2llbnRcbi8vIGJlY2F1c2UgaXQgYWxyZWFkeSBzaG93cyB0aGF0IGxvd2VyIGxldmVscyB3aWxsIGxvZywgYW5kIGhpZ2hlciBsZXZlbHMgd29uJ3QuXG5cbmRlc2NyaWJlKCdDb25zb2xlTG9nZ2VyJywgKCkgPT4ge1xuICBjb25zdCBpbnRlcmNlcHQgPSByZXF1aXJlKCdpbnRlcmNlcHQtc3Rkb3V0Jyk7XG4gIGNvbnN0IHVuaG9va0ludGVyY2VwdCA9IGludGVyY2VwdCgodHh0OiBzdHJpbmcpID0+IHtcbiAgICBjb25zb2xlVHh0ID0gdHh0O1xuICAgIHJldHVybiB0eHQ7XG4gIH0pO1xuXG4gIC8qKiBTaG91bGQgY3JlYXRlIGEgbmV3IENvbnNvbGVMb2dnZXIgKi9cbiAgZGVzY3JpYmUoJ25ldyBDb25zb2xlTG9nZ2VyKCknLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBsb2cgd2l0aCBkZWZhdWx0IGxldmVscycsICgpID0+IHtcbiAgICAgIGxvZ2dlci5sb2dnZXIoKTtcbiAgICAgIGFzc2VydC5zdHJpY3RFcXVhbChMRVZFTFMubGVuZ3RoLCBDb25zb2xlTG9nZ2VyLkxFVkVMUy5sZW5ndGgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBsb2cgd2l0aCBlcnJvcicsICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbnNvbGVMb2dnZXIgPSBsb2dnZXIubG9nZ2VyKDEpO1xuICAgICAgYXNzZXJ0LnN0cmljdEVxdWFsKExFVkVMU1sxXSwgY29uc29sZUxvZ2dlci5sZXZlbCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8qKiBTaG91bGQgbG9nZ2VyIG9ubHkgZXJyb3IgbG9nICovXG4gIGRlc2NyaWJlKCdlcnJvciBsb2dnZXInLCAoKSA9PiB7XG4gICAgY29uc3QgY29uc29sZUxvZ2dlciA9IGxvZ2dlci5sb2dnZXIoTEVWRUxTWzFdKTtcblxuICAgIGl0KCdzaG91bGQgbG9nIGVycm9yJywgKCkgPT4ge1xuICAgICAgY29uc29sZVR4dCA9ICcnO1xuICAgICAgY29uc29sZUxvZ2dlci5lcnJvcignZXJyb3IgdGVzdCBsb2dnZXInKTtcbiAgICAgIHVuaG9va0ludGVyY2VwdCgpO1xuICAgICAgY29uc3QgdmFsaWRhdGVTdHJpbmcgPSBjb25zb2xlVHh0LmluZGV4T2YoJ2Vycm9yJyk7XG5cbiAgICAgIGFzc2VydC5vayh2YWxpZGF0ZVN0cmluZyA+PSAwKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgbm90IGxvZyB3YXJuJywgKCkgPT4ge1xuICAgICAgY29uc29sZVR4dCA9ICcnO1xuICAgICAgY29uc29sZUxvZ2dlci53YXJuKCd3YXJuIHRlc3QgbG9nZ2VyJyk7XG4gICAgICB1bmhvb2tJbnRlcmNlcHQoKTtcblxuICAgICAgY29uc3QgdmFsaWRhdGVTdHJpbmcgPSBjb25zb2xlVHh0LmluZGV4T2YoJ3dhcm4nKTtcblxuICAgICAgYXNzZXJ0LnN0cmljdEVxdWFsKHZhbGlkYXRlU3RyaW5nLCAtMSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIG5vdCBsb2cgaW5mbycsICgpID0+IHtcbiAgICAgIGNvbnNvbGVUeHQgPSAnJztcbiAgICAgIGNvbnNvbGVMb2dnZXIuaW5mbygnaW5mbyB0ZXN0IGxvZ2dlcicpO1xuICAgICAgdW5ob29rSW50ZXJjZXB0KCk7XG5cbiAgICAgIGNvbnN0IHZhbGlkYXRlU3RyaW5nID0gY29uc29sZVR4dC5pbmRleE9mKCdpbmZvJyk7XG5cbiAgICAgIGFzc2VydC5zdHJpY3RFcXVhbCh2YWxpZGF0ZVN0cmluZywgLTEpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBub3QgbG9nIGRlYnVnJywgKCkgPT4ge1xuICAgICAgY29uc29sZVR4dCA9ICcnO1xuICAgICAgY29uc29sZUxvZ2dlci5kZWJ1ZygnZGVidWcgdGVzdCBsb2dnZXInKTtcbiAgICAgIHVuaG9va0ludGVyY2VwdCgpO1xuICAgICAgY29uc3QgdmFsaWRhdGVTdHJpbmcgPSBjb25zb2xlVHh0LmluZGV4T2YoJ2RlYnVnJyk7XG5cbiAgICAgIGFzc2VydC5zdHJpY3RFcXVhbCh2YWxpZGF0ZVN0cmluZywgLTEpO1xuICAgIH0pO1xuICB9KTtcblxuICAvKiogU2hvdWxkIGRpc2FibGUgbG9nZ2VyICAqL1xuICBkZXNjcmliZSgnc2lsZW50IGxvZ2dlcicsICgpID0+IHtcbiAgICBjb25zdCBjb25zb2xlTG9nZ2VyID0gbG9nZ2VyLmxvZ2dlcigwKTtcblxuICAgIGl0KCdzaG91bGQgbm90IGxvZyBlcnJvcicsICgpID0+IHtcbiAgICAgIGNvbnNvbGVUeHQgPSAnJztcbiAgICAgIGNvbnNvbGVMb2dnZXIuZXJyb3IoJ2Vycm9yIHRlc3QgbG9nZ2VyJyk7XG4gICAgICB1bmhvb2tJbnRlcmNlcHQoKTtcbiAgICAgIGNvbnN0IHZhbGlkYXRlU3RyaW5nID0gY29uc29sZVR4dC5pbmRleE9mKCdlcnJvcicpO1xuXG4gICAgICBhc3NlcnQuc3RyaWN0RXF1YWwodmFsaWRhdGVTdHJpbmcsIC0xKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgbm90IGxvZyB3YXJuJywgKCkgPT4ge1xuICAgICAgY29uc29sZVR4dCA9ICcnO1xuICAgICAgY29uc29sZUxvZ2dlci53YXJuKCd3YXJuIHRlc3QgbG9nZ2VyJyk7XG4gICAgICB1bmhvb2tJbnRlcmNlcHQoKTtcblxuICAgICAgY29uc3QgdmFsaWRhdGVTdHJpbmcgPSBjb25zb2xlVHh0LmluZGV4T2YoJ3dhcm4nKTtcblxuICAgICAgYXNzZXJ0LnN0cmljdEVxdWFsKHZhbGlkYXRlU3RyaW5nLCAtMSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIG5vdCBsb2cgaW5mbycsICgpID0+IHtcbiAgICAgIGNvbnNvbGVUeHQgPSAnJztcbiAgICAgIGNvbnNvbGVMb2dnZXIuaW5mbygnaW5mbyB0ZXN0IGxvZ2dlcicpO1xuICAgICAgdW5ob29rSW50ZXJjZXB0KCk7XG5cbiAgICAgIGNvbnN0IHZhbGlkYXRlU3RyaW5nID0gY29uc29sZVR4dC5pbmRleE9mKCdpbmZvJyk7XG5cbiAgICAgIGFzc2VydC5zdHJpY3RFcXVhbCh2YWxpZGF0ZVN0cmluZywgLTEpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBub3QgbG9nIGRlYnVnJywgKCkgPT4ge1xuICAgICAgY29uc29sZVR4dCA9ICcnO1xuICAgICAgY29uc29sZUxvZ2dlci5kZWJ1ZygnZGVidWcgdGVzdCBsb2dnZXInKTtcbiAgICAgIHVuaG9va0ludGVyY2VwdCgpO1xuICAgICAgY29uc3QgdmFsaWRhdGVTdHJpbmcgPSBjb25zb2xlVHh0LmluZGV4T2YoJ2RlYnVnJyk7XG5cbiAgICAgIGFzc2VydC5zdHJpY3RFcXVhbCh2YWxpZGF0ZVN0cmluZywgLTEpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19
//# sourceMappingURL=data:application/json;charset=utf-8;base64,