"use strict";/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_2an99oa18z(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-recorder.ts";var hash="3a436cb50c5fe295aaf7076eae18486a9ed15741";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-recorder.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:15},end:{line:18,column:32}},"2":{start:{line:19,column:14},end:{line:19,column:31}},"3":{start:{line:20,column:16},end:{line:20,column:45}},"4":{start:{line:22,column:16},end:{line:22,column:17}},"5":{start:{line:24,column:4},end:{line:24,column:64}},"6":{start:{line:27,column:22},end:{line:27,column:60}},"7":{start:{line:27,column:50},end:{line:27,column:59}},"8":{start:{line:28,column:4},end:{line:28,column:62}},"9":{start:{line:29,column:4},end:{line:29,column:56}},"10":{start:{line:30,column:25},end:{line:30,column:50}},"11":{start:{line:31,column:4},end:{line:31,column:75}},"12":{start:{line:32,column:41},end:{line:34,column:42}},"13":{start:{line:33,column:22},end:{line:33,column:55}},"14":{start:{line:34,column:31},end:{line:34,column:41}},"15":{start:{line:35,column:4},end:{line:35,column:108}},"16":{start:{line:36,column:33},end:{line:36,column:88}},"17":{start:{line:37,column:4},end:{line:37,column:91}},"18":{start:{line:39,column:0},end:{line:224,column:3}},"19":{start:{line:40,column:21},end:{line:47,column:5}},"20":{start:{line:48,column:22},end:{line:48,column:46}},"21":{start:{line:49,column:22},end:{line:57,column:5}},"22":{start:{line:58,column:4},end:{line:223,column:5}},"23":{start:{line:59,column:8},end:{line:77,column:11}},"24":{start:{line:60,column:12},end:{line:76,column:13}},"25":{start:{line:61,column:16},end:{line:75,column:19}},"26":{start:{line:62,column:38},end:{line:67,column:21}},"27":{start:{line:68,column:32},end:{line:68,column:33}},"28":{start:{line:69,column:20},end:{line:74,column:21}},"29":{start:{line:70,column:24},end:{line:70,column:32}},"30":{start:{line:71,column:44},end:{line:71,column:62}},"31":{start:{line:72,column:55},end:{line:72,column:108}},"32":{start:{line:73,column:24},end:{line:73,column:80}},"33":{start:{line:78,column:8},end:{line:95,column:11}},"34":{start:{line:79,column:12},end:{line:94,column:13}},"35":{start:{line:80,column:16},end:{line:93,column:19}},"36":{start:{line:81,column:42},end:{line:86,column:21}},"37":{start:{line:87,column:20},end:{line:92,column:21}},"38":{start:{line:88,column:44},end:{line:88,column:62}},"39":{start:{line:89,column:42},end:{line:89,column:113}},"40":{start:{line:90,column:55},end:{line:90,column:112}},"41":{start:{line:91,column:24},end:{line:91,column:84}},"42":{start:{line:96,column:8},end:{line:115,column:11}},"43":{start:{line:97,column:12},end:{line:114,column:13}},"44":{start:{line:98,column:16},end:{line:113,column:19}},"45":{start:{line:99,column:36},end:{line:104,column:21}},"46":{start:{line:105,column:30},end:{line:105,column:31}},"47":{start:{line:106,column:20},end:{line:112,column:21}},"48":{start:{line:107,column:24},end:{line:108,column:100}},"49":{start:{line:109,column:44},end:{line:109,column:62}},"50":{start:{line:110,column:55},end:{line:110,column:106}},"51":{start:{line:111,column:24},end:{line:111,column:78}},"52":{start:{line:116,column:8},end:{line:141,column:11}},"53":{start:{line:117,column:12},end:{line:140,column:13}},"54":{start:{line:118,column:16},end:{line:139,column:19}},"55":{start:{line:119,column:45},end:{line:131,column:21}},"56":{start:{line:132,column:39},end:{line:132,column:41}},"57":{start:{line:133,column:20},end:{line:138,column:21}},"58":{start:{line:134,column:24},end:{line:134,column:113}},"59":{start:{line:135,column:44},end:{line:135,column:62}},"60":{start:{line:136,column:55},end:{line:136,column:115}},"61":{start:{line:137,column:24},end:{line:137,column:83}},"62":{start:{line:142,column:8},end:{line:175,column:11}},"63":{start:{line:143,column:32},end:{line:143,column:64}},"64":{start:{line:144,column:12},end:{line:174,column:15}},"65":{start:{line:145,column:41},end:{line:158,column:17}},"66":{start:{line:159,column:30},end:{line:159,column:31}},"67":{start:{line:160,column:36},end:{line:160,column:54}},"68":{start:{line:161,column:40},end:{line:161,column:113}},"69":{start:{line:162,column:16},end:{line:162,column:59}},"70":{start:{line:163,column:16},end:{line:163,column:60}},"71":{start:{line:164,column:16},end:{line:164,column:75}},"72":{start:{line:165,column:16},end:{line:165,column:83}},"73":{start:{line:166,column:16},end:{line:166,column:80}},"74":{start:{line:167,column:16},end:{line:167,column:80}},"75":{start:{line:168,column:16},end:{line:172,column:19}},"76":{start:{line:173,column:16},end:{line:173,column:80}},"77":{start:{line:176,column:8},end:{line:222,column:11}},"78":{start:{line:177,column:27},end:{line:177,column:45}},"79":{start:{line:178,column:27},end:{line:178,column:45}},"80":{start:{line:179,column:31},end:{line:179,column:53}},"81":{start:{line:180,column:29},end:{line:180,column:53}},"82":{start:{line:181,column:29},end:{line:181,column:53}},"83":{start:{line:182,column:33},end:{line:182,column:61}},"84":{start:{line:183,column:38},end:{line:183,column:77}},"85":{start:{line:184,column:45},end:{line:184,column:91}},"86":{start:{line:186,column:12},end:{line:188,column:15}},"87":{start:{line:187,column:16},end:{line:187,column:44}},"88":{start:{line:189,column:12},end:{line:196,column:15}},"89":{start:{line:190,column:32},end:{line:190,column:48}},"90":{start:{line:191,column:16},end:{line:191,column:45}},"91":{start:{line:192,column:16},end:{line:192,column:45}},"92":{start:{line:193,column:34},end:{line:193,column:83}},"93":{start:{line:194,column:16},end:{line:194,column:56}},"94":{start:{line:195,column:16},end:{line:195,column:72}},"95":{start:{line:197,column:12},end:{line:204,column:15}},"96":{start:{line:198,column:32},end:{line:198,column:48}},"97":{start:{line:199,column:16},end:{line:199,column:64}},"98":{start:{line:200,column:16},end:{line:200,column:71}},"99":{start:{line:201,column:34},end:{line:201,column:83}},"100":{start:{line:202,column:16},end:{line:202,column:56}},"101":{start:{line:203,column:16},end:{line:203,column:72}},"102":{start:{line:205,column:12},end:{line:212,column:15}},"103":{start:{line:206,column:32},end:{line:206,column:60}},"104":{start:{line:207,column:16},end:{line:207,column:45}},"105":{start:{line:208,column:16},end:{line:208,column:45}},"106":{start:{line:209,column:34},end:{line:209,column:83}},"107":{start:{line:210,column:16},end:{line:210,column:56}},"108":{start:{line:211,column:16},end:{line:211,column:78}},"109":{start:{line:213,column:12},end:{line:221,column:15}},"110":{start:{line:214,column:32},end:{line:214,column:48}},"111":{start:{line:215,column:16},end:{line:215,column:45}},"112":{start:{line:216,column:16},end:{line:216,column:45}},"113":{start:{line:217,column:16},end:{line:217,column:53}},"114":{start:{line:218,column:34},end:{line:218,column:83}},"115":{start:{line:219,column:16},end:{line:219,column:56}},"116":{start:{line:220,column:16},end:{line:220,column:72}}},fnMap:{"0":{name:"isAlmostEqual",decl:{start:{line:23,column:9},end:{line:23,column:22}},loc:{start:{line:23,column:50},end:{line:25,column:1}},line:23},"1":{name:"assertDistributionData",decl:{start:{line:26,column:9},end:{line:26,column:31}},loc:{start:{line:26,column:58},end:{line:38,column:1}},line:26},"2":{name:"(anonymous_2)",decl:{start:{line:27,column:36},end:{line:27,column:37}},loc:{start:{line:27,column:50},end:{line:27,column:59}},line:27},"3":{name:"(anonymous_3)",decl:{start:{line:33,column:13},end:{line:33,column:14}},loc:{start:{line:33,column:22},end:{line:33,column:55}},line:33},"4":{name:"(anonymous_4)",decl:{start:{line:34,column:16},end:{line:34,column:17}},loc:{start:{line:34,column:31},end:{line:34,column:41}},line:34},"5":{name:"(anonymous_5)",decl:{start:{line:39,column:21},end:{line:39,column:22}},loc:{start:{line:39,column:27},end:{line:224,column:1}},line:39},"6":{name:"(anonymous_6)",decl:{start:{line:59,column:73},end:{line:59,column:74}},loc:{start:{line:59,column:79},end:{line:77,column:9}},line:59},"7":{name:"(anonymous_7)",decl:{start:{line:61,column:83},end:{line:61,column:84}},loc:{start:{line:61,column:89},end:{line:75,column:17}},line:61},"8":{name:"(anonymous_8)",decl:{start:{line:78,column:78},end:{line:78,column:79}},loc:{start:{line:78,column:84},end:{line:95,column:9}},line:78},"9":{name:"(anonymous_9)",decl:{start:{line:80,column:83},end:{line:80,column:84}},loc:{start:{line:80,column:89},end:{line:93,column:17}},line:80},"10":{name:"(anonymous_10)",decl:{start:{line:96,column:71},end:{line:96,column:72}},loc:{start:{line:96,column:77},end:{line:115,column:9}},line:96},"11":{name:"(anonymous_11)",decl:{start:{line:98,column:83},end:{line:98,column:84}},loc:{start:{line:98,column:89},end:{line:113,column:17}},line:98},"12":{name:"(anonymous_12)",decl:{start:{line:116,column:80},end:{line:116,column:81}},loc:{start:{line:116,column:86},end:{line:141,column:9}},line:116},"13":{name:"(anonymous_13)",decl:{start:{line:118,column:83},end:{line:118,column:84}},loc:{start:{line:118,column:89},end:{line:139,column:17}},line:118},"14":{name:"(anonymous_14)",decl:{start:{line:142,column:71},end:{line:142,column:72}},loc:{start:{line:142,column:77},end:{line:175,column:9}},line:142},"15":{name:"(anonymous_15)",decl:{start:{line:144,column:71},end:{line:144,column:72}},loc:{start:{line:144,column:77},end:{line:174,column:13}},line:144},"16":{name:"(anonymous_16)",decl:{start:{line:176,column:35},end:{line:176,column:36}},loc:{start:{line:176,column:41},end:{line:222,column:9}},line:176},"17":{name:"(anonymous_17)",decl:{start:{line:186,column:23},end:{line:186,column:24}},loc:{start:{line:186,column:29},end:{line:188,column:13}},line:186},"18":{name:"(anonymous_18)",decl:{start:{line:189,column:65},end:{line:189,column:66}},loc:{start:{line:189,column:71},end:{line:196,column:13}},line:189},"19":{name:"(anonymous_19)",decl:{start:{line:197,column:85},end:{line:197,column:86}},loc:{start:{line:197,column:91},end:{line:204,column:13}},line:197},"20":{name:"(anonymous_20)",decl:{start:{line:205,column:81},end:{line:205,column:82}},loc:{start:{line:205,column:87},end:{line:212,column:13}},line:205},"21":{name:"(anonymous_21)",decl:{start:{line:213,column:81},end:{line:213,column:82}},loc:{start:{line:213,column:87},end:{line:221,column:13}},line:213}},branchMap:{"0":{loc:{start:{line:89,column:42},end:{line:89,column:113}},type:"cond-expr",locations:[{start:{line:89,column:88},end:{line:89,column:93}},{start:{line:89,column:96},end:{line:89,column:113}}],line:89},"1":{loc:{start:{line:108,column:28},end:{line:108,column:99}},type:"cond-expr",locations:[{start:{line:108,column:74},end:{line:108,column:79}},{start:{line:108,column:82},end:{line:108,column:99}}],line:108},"2":{loc:{start:{line:134,column:40},end:{line:134,column:111}},type:"cond-expr",locations:[{start:{line:134,column:86},end:{line:134,column:91}},{start:{line:134,column:94},end:{line:134,column:111}}],line:134}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},b:{"0":[0,0],"1":[0,0],"2":[0,0]},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-recorder.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-recorder.ts"],names:[],mappings:"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",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\nimport { Recorder, TagMap, TagTtl } from '../src';\nimport {\n  AggregationType,\n  CountData,\n  DistributionData,\n  LastValueData,\n  Measure,\n  Measurement,\n  MeasureType,\n  MeasureUnit,\n  SumData,\n} from '../src/stats/types';\n\n/** The order of how close values must be to be considerated almost equal */\nconst EPSILON = 6;\n\ninterface RecorderTestCase {\n  values: number[];\n  description: string;\n}\n\nfunction isAlmostEqual(\n  actual: number,\n  expected: number,\n  epsilon: number\n): boolean {\n  return Math.abs(actual - expected) < Math.pow(10, -epsilon);\n}\n\nfunction assertDistributionData(\n  distributionData: DistributionData,\n  values: number[]\n) {\n  const valuesSum = values.reduce((acc, cur) => acc + cur);\n\n  assert.strictEqual(distributionData.count, values.length);\n  assert.strictEqual(distributionData.sum, valuesSum);\n\n  const expectedMean = valuesSum / values.length;\n  assert.ok(isAlmostEqual(distributionData.mean, expectedMean, EPSILON));\n\n  const expectedSumSquaredDeviations = values\n    .map(value => Math.pow(value - expectedMean, 2))\n    .reduce((acc, curr) => acc + curr);\n  assert.ok(\n    isAlmostEqual(\n      distributionData.sumOfSquaredDeviation,\n      expectedSumSquaredDeviations,\n      EPSILON\n    )\n  );\n\n  const expectedStdDeviation = Math.sqrt(\n    expectedSumSquaredDeviations / values.length\n  );\n  assert.ok(\n    isAlmostEqual(distributionData.stdDeviation, expectedStdDeviation, EPSILON)\n  );\n}\n\ndescribe('Recorder', () => {\n  const measures: Measure[] = [\n    {\n      name: 'Test Measure 1',\n      type: MeasureType.DOUBLE,\n      unit: MeasureUnit.UNIT,\n    },\n    { name: 'Test Measure 2', type: MeasureType.INT64, unit: MeasureUnit.UNIT },\n  ];\n  const tagValues = [{ value: 'testValue' }];\n  const testCases: RecorderTestCase[] = [\n    { values: [1.1, 2.5, 3.2, 4.7, 5.2], description: 'with positive values' },\n    {\n      values: [-1.5, -2.3, -3.7, -4.3, -5.9],\n      description: 'with negative values',\n    },\n    { values: [0, 0, 0, 0], description: 'with zeros' },\n    { values: [1.1, -2.3, 3.2, -4.3, 5.2], description: 'with mixed values' },\n  ];\n\n  for (const measure of measures) {\n    describe(`for count aggregation data of ${measure.type} values`, () => {\n      for (const testCase of testCases) {\n        it(`should record measurements ${testCase.description} correctly`, () => {\n          const countData: CountData = {\n            type: AggregationType.COUNT,\n            tagValues,\n            timestamp: Date.now(),\n            value: 0,\n          };\n          let count = 0;\n          for (const value of testCase.values) {\n            count++;\n            const measurement: Measurement = { measure, value };\n            const updatedAggregationData = Recorder.addMeasurement(\n              countData,\n              measurement\n            ) as CountData;\n\n            assert.strictEqual(updatedAggregationData.value, count);\n          }\n        });\n      }\n    });\n\n    describe(`for last value aggregation data of ${measure.type} values`, () => {\n      for (const testCase of testCases) {\n        it(`should record measurements ${testCase.description} correctly`, () => {\n          const lastValueData: LastValueData = {\n            type: AggregationType.LAST_VALUE,\n            tagValues,\n            timestamp: Date.now(),\n            value: 0,\n          };\n          for (const value of testCase.values) {\n            const measurement: Measurement = { measure, value };\n            const lastValue =\n              measure.type === MeasureType.DOUBLE ? value : Math.trunc(value);\n\n            const updatedAggregationData = Recorder.addMeasurement(\n              lastValueData,\n              measurement\n            ) as LastValueData;\n            assert.strictEqual(updatedAggregationData.value, lastValue);\n          }\n        });\n      }\n    });\n\n    describe(`for sum aggregation data of ${measure.type} values`, () => {\n      for (const testCase of testCases) {\n        it(`should record measurements ${testCase.description} correctly`, () => {\n          const sumData: SumData = {\n            type: AggregationType.SUM,\n            tagValues,\n            timestamp: Date.now(),\n            value: 0,\n          };\n          let acc = 0;\n          for (const value of testCase.values) {\n            acc +=\n              measure.type === MeasureType.DOUBLE ? value : Math.trunc(value);\n            const measurement: Measurement = { measure, value };\n            const updatedAggregationData = Recorder.addMeasurement(\n              sumData,\n              measurement\n            ) as SumData;\n\n            assert.strictEqual(updatedAggregationData.value, acc);\n          }\n        });\n      }\n    });\n\n    describe(`for distribution aggregation data of ${measure.type} values`, () => {\n      for (const testCase of testCases) {\n        it(`should record measurements ${testCase.description} correctly`, () => {\n          const distributionData: DistributionData = {\n            type: AggregationType.DISTRIBUTION,\n            tagValues,\n            timestamp: Date.now(),\n            startTime: Date.now(),\n            count: 0,\n            sum: 0,\n            mean: 0,\n            stdDeviation: 0,\n            sumOfSquaredDeviation: 0,\n            buckets: [2, 4, 6],\n            bucketCounts: [0, 0, 0, 0],\n          };\n          const sentValues = [];\n          for (const value of testCase.values) {\n            sentValues.push(\n              measure.type === MeasureType.DOUBLE ? value : Math.trunc(value)\n            );\n            const measurement: Measurement = { measure, value };\n            const updatedAggregationData = Recorder.addMeasurement(\n              distributionData,\n              measurement\n            ) as DistributionData;\n            assertDistributionData(updatedAggregationData, sentValues);\n          }\n        });\n      }\n    });\n\n    describe('for distribution aggregation data with attachments', () => {\n      const attachments = { k1: 'v1', k2: 'v2', k3: 'v3' };\n      it('should record measurements and attachments correctly', () => {\n        const distributionData: DistributionData = {\n          type: AggregationType.DISTRIBUTION,\n          tagValues,\n          timestamp: Date.now(),\n          startTime: Date.now(),\n          count: 0,\n          sum: 0,\n          mean: 0,\n          stdDeviation: 0,\n          sumOfSquaredDeviation: 0,\n          buckets: [2, 4, 6],\n          bucketCounts: [0, 0, 0, 0],\n          exemplars: new Array(4),\n        };\n        const value = 5;\n        const measurement: Measurement = { measure, value };\n        const aggregationData = Recorder.addMeasurement(\n          distributionData,\n          measurement,\n          attachments\n        ) as DistributionData;\n\n        assert.strictEqual(aggregationData.sum, 5);\n        assert.strictEqual(aggregationData.mean, 5);\n        assert.deepStrictEqual(aggregationData.buckets, [2, 4, 6]);\n        assert.deepStrictEqual(aggregationData.bucketCounts, [0, 0, 1, 0]);\n        assert.deepStrictEqual(aggregationData.exemplars![0], undefined);\n        assert.deepStrictEqual(aggregationData.exemplars![1], undefined);\n        assert.deepStrictEqual(aggregationData!.exemplars![2], {\n          value: 5,\n          timestamp: aggregationData.timestamp,\n          attachments,\n        });\n        assert.deepStrictEqual(aggregationData.exemplars![3], undefined);\n      });\n    });\n\n    describe('getTagValues()', () => {\n      const CALLER = { name: 'caller' };\n      const METHOD = { name: 'method' };\n      const ORIGINATOR = { name: 'originator' };\n      const CALLER_V = { value: 'some caller' };\n      const METHOD_V = { value: 'some method' };\n      const ORIGINATOR_V = { value: 'some originator' };\n      const NO_PROPAGATION_MD = { tagTtl: TagTtl.NO_PROPAGATION };\n      const UNLIMITED_PROPAGATION_MD = { tagTtl: TagTtl.UNLIMITED_PROPAGATION };\n      let tagMap: TagMap;\n\n      beforeEach(() => {\n        tagMap = new TagMap();\n      });\n\n      it('should return tag values from tags and columns', () => {\n        const columns = [CALLER, METHOD];\n        tagMap.set(CALLER, CALLER_V);\n        tagMap.set(METHOD, METHOD_V);\n        const tagValues = Recorder.getTagValues(tagMap.tags, columns);\n        assert.strictEqual(tagValues.length, 2);\n        assert.deepStrictEqual(tagValues, [CALLER_V, METHOD_V]);\n      });\n\n      it('should return tag values from tags and columns when using metadata', () => {\n        const columns = [CALLER, METHOD];\n        tagMap.set(CALLER, CALLER_V, NO_PROPAGATION_MD);\n        tagMap.set(METHOD, METHOD_V, UNLIMITED_PROPAGATION_MD);\n        const tagValues = Recorder.getTagValues(tagMap.tags, columns);\n        assert.strictEqual(tagValues.length, 2);\n        assert.deepStrictEqual(tagValues, [CALLER_V, METHOD_V]);\n      });\n\n      it('should return tag values from tags and columns with extra keys', () => {\n        const columns = [CALLER, METHOD, ORIGINATOR];\n        tagMap.set(CALLER, CALLER_V);\n        tagMap.set(METHOD, METHOD_V);\n        const tagValues = Recorder.getTagValues(tagMap.tags, columns);\n        assert.strictEqual(tagValues.length, 3);\n        assert.deepStrictEqual(tagValues, [CALLER_V, METHOD_V, null]);\n      });\n\n      it('should return tag values from tags and columns with extra tags', () => {\n        const columns = [CALLER, METHOD];\n        tagMap.set(CALLER, CALLER_V);\n        tagMap.set(METHOD, METHOD_V);\n        tagMap.set(ORIGINATOR, ORIGINATOR_V);\n        const tagValues = Recorder.getTagValues(tagMap.tags, columns);\n        assert.strictEqual(tagValues.length, 2);\n        assert.deepStrictEqual(tagValues, [CALLER_V, METHOD_V]);\n      });\n    });\n  }\n});\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"3a436cb50c5fe295aaf7076eae18486a9ed15741"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2an99oa18z=function(){return actualCoverage;};}return actualCoverage;}cov_2an99oa18z();cov_2an99oa18z().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const assert=(cov_2an99oa18z().s[1]++,require("assert"));const src_1=(cov_2an99oa18z().s[2]++,require("../src"));const types_1=(cov_2an99oa18z().s[3]++,require("../src/stats/types"));/** The order of how close values must be to be considerated almost equal */const EPSILON=(cov_2an99oa18z().s[4]++,6);function isAlmostEqual(actual,expected,epsilon){cov_2an99oa18z().f[0]++;cov_2an99oa18z().s[5]++;return Math.abs(actual-expected)<Math.pow(10,-epsilon);}function assertDistributionData(distributionData,values){cov_2an99oa18z().f[1]++;const valuesSum=(cov_2an99oa18z().s[6]++,values.reduce((acc,cur)=>{cov_2an99oa18z().f[2]++;cov_2an99oa18z().s[7]++;return acc+cur;}));cov_2an99oa18z().s[8]++;assert.strictEqual(distributionData.count,values.length);cov_2an99oa18z().s[9]++;assert.strictEqual(distributionData.sum,valuesSum);const expectedMean=(cov_2an99oa18z().s[10]++,valuesSum/values.length);cov_2an99oa18z().s[11]++;assert.ok(isAlmostEqual(distributionData.mean,expectedMean,EPSILON));const expectedSumSquaredDeviations=(cov_2an99oa18z().s[12]++,values.map(value=>{cov_2an99oa18z().f[3]++;cov_2an99oa18z().s[13]++;return Math.pow(value-expectedMean,2);}).reduce((acc,curr)=>{cov_2an99oa18z().f[4]++;cov_2an99oa18z().s[14]++;return acc+curr;}));cov_2an99oa18z().s[15]++;assert.ok(isAlmostEqual(distributionData.sumOfSquaredDeviation,expectedSumSquaredDeviations,EPSILON));const expectedStdDeviation=(cov_2an99oa18z().s[16]++,Math.sqrt(expectedSumSquaredDeviations/values.length));cov_2an99oa18z().s[17]++;assert.ok(isAlmostEqual(distributionData.stdDeviation,expectedStdDeviation,EPSILON));}cov_2an99oa18z().s[18]++;describe('Recorder',()=>{cov_2an99oa18z().f[5]++;const measures=(cov_2an99oa18z().s[19]++,[{name:'Test Measure 1',type:types_1.MeasureType.DOUBLE,unit:types_1.MeasureUnit.UNIT},{name:'Test Measure 2',type:types_1.MeasureType.INT64,unit:types_1.MeasureUnit.UNIT}]);const tagValues=(cov_2an99oa18z().s[20]++,[{value:'testValue'}]);const testCases=(cov_2an99oa18z().s[21]++,[{values:[1.1,2.5,3.2,4.7,5.2],description:'with positive values'},{values:[-1.5,-2.3,-3.7,-4.3,-5.9],description:'with negative values'},{values:[0,0,0,0],description:'with zeros'},{values:[1.1,-2.3,3.2,-4.3,5.2],description:'with mixed values'}]);cov_2an99oa18z().s[22]++;for(const measure of measures){cov_2an99oa18z().s[23]++;describe(`for count aggregation data of ${measure.type} values`,()=>{cov_2an99oa18z().f[6]++;cov_2an99oa18z().s[24]++;for(const testCase of testCases){cov_2an99oa18z().s[25]++;it(`should record measurements ${testCase.description} correctly`,()=>{cov_2an99oa18z().f[7]++;const countData=(cov_2an99oa18z().s[26]++,{type:types_1.AggregationType.COUNT,tagValues,timestamp:Date.now(),value:0});let count=(cov_2an99oa18z().s[27]++,0);cov_2an99oa18z().s[28]++;for(const value of testCase.values){cov_2an99oa18z().s[29]++;count++;const measurement=(cov_2an99oa18z().s[30]++,{measure,value});const updatedAggregationData=(cov_2an99oa18z().s[31]++,src_1.Recorder.addMeasurement(countData,measurement));cov_2an99oa18z().s[32]++;assert.strictEqual(updatedAggregationData.value,count);}});}});cov_2an99oa18z().s[33]++;describe(`for last value aggregation data of ${measure.type} values`,()=>{cov_2an99oa18z().f[8]++;cov_2an99oa18z().s[34]++;for(const testCase of testCases){cov_2an99oa18z().s[35]++;it(`should record measurements ${testCase.description} correctly`,()=>{cov_2an99oa18z().f[9]++;const lastValueData=(cov_2an99oa18z().s[36]++,{type:types_1.AggregationType.LAST_VALUE,tagValues,timestamp:Date.now(),value:0});cov_2an99oa18z().s[37]++;for(const value of testCase.values){const measurement=(cov_2an99oa18z().s[38]++,{measure,value});const lastValue=(cov_2an99oa18z().s[39]++,measure.type===types_1.MeasureType.DOUBLE?(cov_2an99oa18z().b[0][0]++,value):(cov_2an99oa18z().b[0][1]++,Math.trunc(value)));const updatedAggregationData=(cov_2an99oa18z().s[40]++,src_1.Recorder.addMeasurement(lastValueData,measurement));cov_2an99oa18z().s[41]++;assert.strictEqual(updatedAggregationData.value,lastValue);}});}});cov_2an99oa18z().s[42]++;describe(`for sum aggregation data of ${measure.type} values`,()=>{cov_2an99oa18z().f[10]++;cov_2an99oa18z().s[43]++;for(const testCase of testCases){cov_2an99oa18z().s[44]++;it(`should record measurements ${testCase.description} correctly`,()=>{cov_2an99oa18z().f[11]++;const sumData=(cov_2an99oa18z().s[45]++,{type:types_1.AggregationType.SUM,tagValues,timestamp:Date.now(),value:0});let acc=(cov_2an99oa18z().s[46]++,0);cov_2an99oa18z().s[47]++;for(const value of testCase.values){cov_2an99oa18z().s[48]++;acc+=measure.type===types_1.MeasureType.DOUBLE?(cov_2an99oa18z().b[1][0]++,value):(cov_2an99oa18z().b[1][1]++,Math.trunc(value));const measurement=(cov_2an99oa18z().s[49]++,{measure,value});const updatedAggregationData=(cov_2an99oa18z().s[50]++,src_1.Recorder.addMeasurement(sumData,measurement));cov_2an99oa18z().s[51]++;assert.strictEqual(updatedAggregationData.value,acc);}});}});cov_2an99oa18z().s[52]++;describe(`for distribution aggregation data of ${measure.type} values`,()=>{cov_2an99oa18z().f[12]++;cov_2an99oa18z().s[53]++;for(const testCase of testCases){cov_2an99oa18z().s[54]++;it(`should record measurements ${testCase.description} correctly`,()=>{cov_2an99oa18z().f[13]++;const distributionData=(cov_2an99oa18z().s[55]++,{type:types_1.AggregationType.DISTRIBUTION,tagValues,timestamp:Date.now(),startTime:Date.now(),count:0,sum:0,mean:0,stdDeviation:0,sumOfSquaredDeviation:0,buckets:[2,4,6],bucketCounts:[0,0,0,0]});const sentValues=(cov_2an99oa18z().s[56]++,[]);cov_2an99oa18z().s[57]++;for(const value of testCase.values){cov_2an99oa18z().s[58]++;sentValues.push(measure.type===types_1.MeasureType.DOUBLE?(cov_2an99oa18z().b[2][0]++,value):(cov_2an99oa18z().b[2][1]++,Math.trunc(value)));const measurement=(cov_2an99oa18z().s[59]++,{measure,value});const updatedAggregationData=(cov_2an99oa18z().s[60]++,src_1.Recorder.addMeasurement(distributionData,measurement));cov_2an99oa18z().s[61]++;assertDistributionData(updatedAggregationData,sentValues);}});}});cov_2an99oa18z().s[62]++;describe('for distribution aggregation data with attachments',()=>{cov_2an99oa18z().f[14]++;const attachments=(cov_2an99oa18z().s[63]++,{k1:'v1',k2:'v2',k3:'v3'});cov_2an99oa18z().s[64]++;it('should record measurements and attachments correctly',()=>{cov_2an99oa18z().f[15]++;const distributionData=(cov_2an99oa18z().s[65]++,{type:types_1.AggregationType.DISTRIBUTION,tagValues,timestamp:Date.now(),startTime:Date.now(),count:0,sum:0,mean:0,stdDeviation:0,sumOfSquaredDeviation:0,buckets:[2,4,6],bucketCounts:[0,0,0,0],exemplars:new Array(4)});const value=(cov_2an99oa18z().s[66]++,5);const measurement=(cov_2an99oa18z().s[67]++,{measure,value});const aggregationData=(cov_2an99oa18z().s[68]++,src_1.Recorder.addMeasurement(distributionData,measurement,attachments));cov_2an99oa18z().s[69]++;assert.strictEqual(aggregationData.sum,5);cov_2an99oa18z().s[70]++;assert.strictEqual(aggregationData.mean,5);cov_2an99oa18z().s[71]++;assert.deepStrictEqual(aggregationData.buckets,[2,4,6]);cov_2an99oa18z().s[72]++;assert.deepStrictEqual(aggregationData.bucketCounts,[0,0,1,0]);cov_2an99oa18z().s[73]++;assert.deepStrictEqual(aggregationData.exemplars[0],undefined);cov_2an99oa18z().s[74]++;assert.deepStrictEqual(aggregationData.exemplars[1],undefined);cov_2an99oa18z().s[75]++;assert.deepStrictEqual(aggregationData.exemplars[2],{value:5,timestamp:aggregationData.timestamp,attachments});cov_2an99oa18z().s[76]++;assert.deepStrictEqual(aggregationData.exemplars[3],undefined);});});cov_2an99oa18z().s[77]++;describe('getTagValues()',()=>{cov_2an99oa18z().f[16]++;const CALLER=(cov_2an99oa18z().s[78]++,{name:'caller'});const METHOD=(cov_2an99oa18z().s[79]++,{name:'method'});const ORIGINATOR=(cov_2an99oa18z().s[80]++,{name:'originator'});const CALLER_V=(cov_2an99oa18z().s[81]++,{value:'some caller'});const METHOD_V=(cov_2an99oa18z().s[82]++,{value:'some method'});const ORIGINATOR_V=(cov_2an99oa18z().s[83]++,{value:'some originator'});const NO_PROPAGATION_MD=(cov_2an99oa18z().s[84]++,{tagTtl:src_1.TagTtl.NO_PROPAGATION});const UNLIMITED_PROPAGATION_MD=(cov_2an99oa18z().s[85]++,{tagTtl:src_1.TagTtl.UNLIMITED_PROPAGATION});let tagMap;cov_2an99oa18z().s[86]++;beforeEach(()=>{cov_2an99oa18z().f[17]++;cov_2an99oa18z().s[87]++;tagMap=new src_1.TagMap();});cov_2an99oa18z().s[88]++;it('should return tag values from tags and columns',()=>{cov_2an99oa18z().f[18]++;const columns=(cov_2an99oa18z().s[89]++,[CALLER,METHOD]);cov_2an99oa18z().s[90]++;tagMap.set(CALLER,CALLER_V);cov_2an99oa18z().s[91]++;tagMap.set(METHOD,METHOD_V);const tagValues=(cov_2an99oa18z().s[92]++,src_1.Recorder.getTagValues(tagMap.tags,columns));cov_2an99oa18z().s[93]++;assert.strictEqual(tagValues.length,2);cov_2an99oa18z().s[94]++;assert.deepStrictEqual(tagValues,[CALLER_V,METHOD_V]);});cov_2an99oa18z().s[95]++;it('should return tag values from tags and columns when using metadata',()=>{cov_2an99oa18z().f[19]++;const columns=(cov_2an99oa18z().s[96]++,[CALLER,METHOD]);cov_2an99oa18z().s[97]++;tagMap.set(CALLER,CALLER_V,NO_PROPAGATION_MD);cov_2an99oa18z().s[98]++;tagMap.set(METHOD,METHOD_V,UNLIMITED_PROPAGATION_MD);const tagValues=(cov_2an99oa18z().s[99]++,src_1.Recorder.getTagValues(tagMap.tags,columns));cov_2an99oa18z().s[100]++;assert.strictEqual(tagValues.length,2);cov_2an99oa18z().s[101]++;assert.deepStrictEqual(tagValues,[CALLER_V,METHOD_V]);});cov_2an99oa18z().s[102]++;it('should return tag values from tags and columns with extra keys',()=>{cov_2an99oa18z().f[20]++;const columns=(cov_2an99oa18z().s[103]++,[CALLER,METHOD,ORIGINATOR]);cov_2an99oa18z().s[104]++;tagMap.set(CALLER,CALLER_V);cov_2an99oa18z().s[105]++;tagMap.set(METHOD,METHOD_V);const tagValues=(cov_2an99oa18z().s[106]++,src_1.Recorder.getTagValues(tagMap.tags,columns));cov_2an99oa18z().s[107]++;assert.strictEqual(tagValues.length,3);cov_2an99oa18z().s[108]++;assert.deepStrictEqual(tagValues,[CALLER_V,METHOD_V,null]);});cov_2an99oa18z().s[109]++;it('should return tag values from tags and columns with extra tags',()=>{cov_2an99oa18z().f[21]++;const columns=(cov_2an99oa18z().s[110]++,[CALLER,METHOD]);cov_2an99oa18z().s[111]++;tagMap.set(CALLER,CALLER_V);cov_2an99oa18z().s[112]++;tagMap.set(METHOD,METHOD_V);cov_2an99oa18z().s[113]++;tagMap.set(ORIGINATOR,ORIGINATOR_V);const tagValues=(cov_2an99oa18z().s[114]++,src_1.Recorder.getTagValues(tagMap.tags,columns));cov_2an99oa18z().s[115]++;assert.strictEqual(tagValues.length,2);cov_2an99oa18z().s[116]++;assert.deepStrictEqual(tagValues,[CALLER_V,METHOD_V]);});});}});//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,