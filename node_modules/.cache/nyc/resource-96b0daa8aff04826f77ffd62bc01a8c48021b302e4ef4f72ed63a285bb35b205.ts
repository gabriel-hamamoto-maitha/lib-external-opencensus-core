"use strict";/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_1t0rislut7(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/resource/resource.ts";var hash="7444ae025e9438d2672dadc5a52d5cdedd8fd45b";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/resource/resource.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:0},end:{line:18,column:30}},"2":{start:{line:19,column:23},end:{line:19,column:58}},"3":{start:{line:35,column:8},end:{line:35,column:83}},"4":{start:{line:46,column:8},end:{line:47,column:50}},"5":{start:{line:47,column:12},end:{line:47,column:50}},"6":{start:{line:48,column:30},end:{line:48,column:42}},"7":{start:{line:49,column:8},end:{line:51,column:9}},"8":{start:{line:49,column:21},end:{line:49,column:22}},"9":{start:{line:50,column:12},end:{line:50,column:72}},"10":{start:{line:52,column:8},end:{line:52,column:31}},"11":{start:{line:64,column:8},end:{line:65,column:24}},"12":{start:{line:65,column:12},end:{line:65,column:24}},"13":{start:{line:66,column:8},end:{line:68,column:9}},"14":{start:{line:67,column:12},end:{line:67,column:80}},"15":{start:{line:69,column:8},end:{line:69,column:33}},"16":{start:{line:84,column:8},end:{line:85,column:22}},"17":{start:{line:85,column:12},end:{line:85,column:22}},"18":{start:{line:86,column:23},end:{line:86,column:25}},"19":{start:{line:87,column:26},end:{line:87,column:70}},"20":{start:{line:88,column:8},end:{line:107,column:9}},"21":{start:{line:89,column:33},end:{line:89,column:82}},"22":{start:{line:90,column:12},end:{line:92,column:13}},"23":{start:{line:91,column:16},end:{line:91,column:25}},"24":{start:{line:93,column:31},end:{line:93,column:43}},"25":{start:{line:95,column:12},end:{line:95,column:29}},"26":{start:{line:96,column:12},end:{line:99,column:26}},"27":{start:{line:100,column:12},end:{line:102,column:13}},"28":{start:{line:101,column:16},end:{line:101,column:89}},"29":{start:{line:103,column:12},end:{line:105,column:13}},"30":{start:{line:104,column:16},end:{line:104,column:91}},"31":{start:{line:106,column:12},end:{line:106,column:32}},"32":{start:{line:108,column:8},end:{line:108,column:22}},"33":{start:{line:119,column:8},end:{line:121,column:9}},"34":{start:{line:120,column:12},end:{line:120,column:33}},"35":{start:{line:122,column:8},end:{line:124,column:9}},"36":{start:{line:123,column:12},end:{line:123,column:28}},"37":{start:{line:125,column:8},end:{line:128,column:10}},"38":{start:{line:138,column:8},end:{line:139,column:64}},"39":{start:{line:149,column:8},end:{line:149,column:61}},"40":{start:{line:153,column:8},end:{line:153,column:93}},"41":{start:{line:154,column:8},end:{line:154,column:102}},"42":{start:{line:157,column:0},end:{line:157,column:36}},"43":{start:{line:159,column:0},end:{line:159,column:30}},"44":{start:{line:161,column:0},end:{line:161,column:35}},"45":{start:{line:163,column:0},end:{line:163,column:44}},"46":{start:{line:164,column:0},end:{line:164,column:85}},"47":{start:{line:165,column:0},end:{line:165,column:94}},"48":{start:{line:166,column:0},end:{line:168,column:19}},"49":{start:{line:169,column:0},end:{line:171,column:19}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:34,column:4},end:{line:34,column:5}},loc:{start:{line:34,column:44},end:{line:36,column:5}},line:34},"1":{name:"(anonymous_1)",decl:{start:{line:45,column:4},end:{line:45,column:5}},loc:{start:{line:45,column:37},end:{line:53,column:5}},line:45},"2":{name:"(anonymous_2)",decl:{start:{line:63,column:4},end:{line:63,column:5}},loc:{start:{line:63,column:41},end:{line:70,column:5}},line:63},"3":{name:"(anonymous_3)",decl:{start:{line:83,column:4},end:{line:83,column:5}},loc:{start:{line:83,column:45},end:{line:109,column:5}},line:83},"4":{name:"(anonymous_4)",decl:{start:{line:118,column:4},end:{line:118,column:5}},loc:{start:{line:118,column:42},end:{line:129,column:5}},line:118},"5":{name:"(anonymous_5)",decl:{start:{line:137,column:4},end:{line:137,column:5}},loc:{start:{line:137,column:25},end:{line:140,column:5}},line:137},"6":{name:"(anonymous_6)",decl:{start:{line:148,column:4},end:{line:148,column:5}},loc:{start:{line:148,column:36},end:{line:150,column:5}},line:148},"7":{name:"(anonymous_7)",decl:{start:{line:152,column:4},end:{line:152,column:5}},loc:{start:{line:152,column:19},end:{line:155,column:5}},line:152}},branchMap:{"0":{loc:{start:{line:46,column:8},end:{line:47,column:50}},type:"if",locations:[{start:{line:46,column:8},end:{line:47,column:50}},{start:{line:46,column:8},end:{line:47,column:50}}],line:46},"1":{loc:{start:{line:64,column:8},end:{line:65,column:24}},type:"if",locations:[{start:{line:64,column:8},end:{line:65,column:24}},{start:{line:64,column:8},end:{line:65,column:24}}],line:64},"2":{loc:{start:{line:66,column:8},end:{line:68,column:9}},type:"if",locations:[{start:{line:66,column:8},end:{line:68,column:9}},{start:{line:66,column:8},end:{line:68,column:9}}],line:66},"3":{loc:{start:{line:84,column:8},end:{line:85,column:22}},type:"if",locations:[{start:{line:84,column:8},end:{line:85,column:22}},{start:{line:84,column:8},end:{line:85,column:22}}],line:84},"4":{loc:{start:{line:90,column:12},end:{line:92,column:13}},type:"if",locations:[{start:{line:90,column:12},end:{line:92,column:13}},{start:{line:90,column:12},end:{line:92,column:13}}],line:90},"5":{loc:{start:{line:100,column:12},end:{line:102,column:13}},type:"if",locations:[{start:{line:100,column:12},end:{line:102,column:13}},{start:{line:100,column:12},end:{line:102,column:13}}],line:100},"6":{loc:{start:{line:103,column:12},end:{line:105,column:13}},type:"if",locations:[{start:{line:103,column:12},end:{line:105,column:13}},{start:{line:103,column:12},end:{line:105,column:13}}],line:103},"7":{loc:{start:{line:119,column:8},end:{line:121,column:9}},type:"if",locations:[{start:{line:119,column:8},end:{line:121,column:9}},{start:{line:119,column:8},end:{line:121,column:9}}],line:119},"8":{loc:{start:{line:122,column:8},end:{line:124,column:9}},type:"if",locations:[{start:{line:122,column:8},end:{line:124,column:9}},{start:{line:122,column:8},end:{line:124,column:9}}],line:122},"9":{loc:{start:{line:126,column:18},end:{line:126,column:53}},type:"binary-expr",locations:[{start:{line:126,column:18},end:{line:126,column:31}},{start:{line:126,column:35},end:{line:126,column:53}}],line:126},"10":{loc:{start:{line:138,column:16},end:{line:139,column:62}},type:"binary-expr",locations:[{start:{line:138,column:16},end:{line:138,column:54}},{start:{line:139,column:12},end:{line:139,column:62}}],line:138},"11":{loc:{start:{line:149,column:15},end:{line:149,column:60}},type:"binary-expr",locations:[{start:{line:149,column:15},end:{line:149,column:30}},{start:{line:149,column:34},end:{line:149,column:60}}],line:149}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0]},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/resource/resource.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/resource/resource.ts"],names:[],mappings:"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",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StringUtils } from '../internal/string-utils';\nimport { Labels, Resource } from './types';\n\n/**\n * Resource represents a resource, which capture identifying information about\n * the entities for which signals (stats or traces) are reported. It further\n * provides a framework for detection of resource information from the\n * environment and progressive population as signals propagate from the core\n * instrumentation library to a backend's exporter.\n */\nexport class CoreResource {\n  // Type, label keys, and label values should not exceed 256 characters.\n  private static readonly MAX_LENGTH = 255;\n\n  // OC_RESOURCE_LABELS is a comma-separated list of labels.\n  private static readonly COMMA_SEPARATOR = ',';\n\n  // OC_RESOURCE_LABELS contains key value pair separated by '='.\n  private static readonly LABEL_KEY_VALUE_SPLITTER = '=';\n\n  private static ENV_TYPE = CoreResource.parseResourceType(\n    process.env.OC_RESOURCE_TYPE\n  );\n  private static ENV_LABEL_MAP = CoreResource.parseResourceLabels(\n    process.env.OC_RESOURCE_LABELS\n  );\n  private static readonly ERROR_MESSAGE_INVALID_CHARS =\n    'should be a ASCII string with a length greater than 0 and not exceed ' +\n    CoreResource.MAX_LENGTH +\n    ' characters.';\n  private static readonly ERROR_MESSAGE_INVALID_VALUE =\n    'should be a ASCII string with a length not exceed ' +\n    CoreResource.MAX_LENGTH +\n    ' characters.';\n\n  /**\n   * Returns a Resource. This resource information is loaded from the\n   * OC_RESOURCE_TYPE and OC_RESOURCE_LABELS environment variables.\n   *\n   * @returns The resource.\n   */\n  static createFromEnvironmentVariables(): Resource {\n    return { type: CoreResource.ENV_TYPE, labels: CoreResource.ENV_LABEL_MAP };\n  }\n\n  /**\n   * Returns a Resource that runs all input resources sequentially and merges\n   * their results. In case a type of label key is already set, the first set\n   * value takes precedence.\n   *\n   * @param resources The list of the resources.\n   * @returns The resource.\n   */\n  static mergeResources(resources: Resource[]): Resource {\n    if (resources.length === 0) return { type: 'global', labels: {} };\n    let currentResource = resources[0];\n    for (let i = 1; i < resources.length; i++) {\n      currentResource = this.merge(currentResource, resources[i]);\n    }\n    return currentResource;\n  }\n\n  /**\n   * Creates a resource type from the OC_RESOURCE_TYPE environment variable.\n   *\n   * OC_RESOURCE_TYPE: A string that describes the type of the resource\n   * prefixed by a domain namespace, e.g. \u201Ckubernetes.io/container\u201D.\n   *\n   * @param rawEnvType The resource type.\n   * @returns The sanitized resource type.\n   */\n  private static parseResourceType(rawEnvType?: string): string | null {\n    if (!rawEnvType) return null;\n    if (!CoreResource.isValidAndNotEmpty(rawEnvType)) {\n      throw new Error(`Type ${CoreResource.ERROR_MESSAGE_INVALID_CHARS}`);\n    }\n    return rawEnvType.trim();\n  }\n\n  /**\n   * Creates a label map from the OC_RESOURCE_LABELS environment variable.\n   *\n   * OC_RESOURCE_LABELS: A comma-separated list of labels describing the\n   * source in more detail, e.g. \u201Ckey1=val1,key2=val2\u201D. Domain names and paths\n   * are accepted as label keys. Values may be quoted or unquoted in general. If\n   * a value contains whitespaces, =, or \" characters, it must always be quoted.\n   *\n   * @param rawEnvLabels The resource labels as a comma-seperated list\n   * of key/value pairs.\n   * @returns The sanitized resource labels.\n   */\n  private static parseResourceLabels(rawEnvLabels?: string): Labels {\n    if (!rawEnvLabels) return {};\n\n    const labels: Labels = {};\n    const rawLabels: string[] = rawEnvLabels.split(this.COMMA_SEPARATOR, -1);\n    for (const rawLabel of rawLabels) {\n      const keyValuePair: string[] = rawLabel.split(\n        this.LABEL_KEY_VALUE_SPLITTER,\n        -1\n      );\n      if (keyValuePair.length !== 2) {\n        continue;\n      }\n      let [key, value] = keyValuePair;\n      // Leading and trailing whitespaces are trimmed.\n      key = key.trim();\n      value = value\n        .trim()\n        .split('^\"|\"$')\n        .join('');\n      if (!CoreResource.isValidAndNotEmpty(key)) {\n        throw new Error(\n          `Label key ${CoreResource.ERROR_MESSAGE_INVALID_CHARS}`\n        );\n      }\n      if (!CoreResource.isValid(value)) {\n        throw new Error(\n          `Label value ${CoreResource.ERROR_MESSAGE_INVALID_VALUE}`\n        );\n      }\n      labels[key] = value;\n    }\n    return labels;\n  }\n\n  /**\n   * Returns a new, merged Resource by merging two resources. In case of\n   * a collision, first resource takes precedence.\n   *\n   * @param resource The resource object.\n   * @param otherResource The resource object.\n   * @returns A new, merged Resource.\n   */\n  private static merge(resource: Resource, otherResource: Resource): Resource {\n    if (!resource) {\n      return otherResource;\n    }\n    if (!otherResource) {\n      return resource;\n    }\n    return {\n      type: resource.type || otherResource.type,\n      labels: Object.assign({}, otherResource.labels, resource.labels),\n    };\n  }\n\n  /**\n   * Determines whether the given String is a valid printable ASCII string with\n   * a length not exceed MAX_LENGTH characters.\n   *\n   * @param str The String to be validated.\n   * @returns Whether the String is valid.\n   */\n  private static isValid(name: string): boolean {\n    return (\n      name.length <= CoreResource.MAX_LENGTH &&\n      StringUtils.isPrintableString(name)\n    );\n  }\n\n  /**\n   * Determines whether the given String is a valid printable ASCII string with\n   * a length greater than 0 and not exceed MAX_LENGTH characters.\n   *\n   * @param str The String to be validated.\n   * @returns Whether the String is valid and not empty.\n   */\n  private static isValidAndNotEmpty(name: string): boolean {\n    return name.length > 0 && CoreResource.isValid(name);\n  }\n\n  /** TEST_ONLY */\n  static setup() {\n    CoreResource.ENV_TYPE = CoreResource.parseResourceType(\n      process.env.OC_RESOURCE_TYPE\n    );\n    CoreResource.ENV_LABEL_MAP = CoreResource.parseResourceLabels(\n      process.env.OC_RESOURCE_LABELS\n    );\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"7444ae025e9438d2672dadc5a52d5cdedd8fd45b"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1t0rislut7=function(){return actualCoverage;};}return actualCoverage;}cov_1t0rislut7();cov_1t0rislut7().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_1t0rislut7().s[1]++;exports.CoreResource=void 0;const string_utils_1=(cov_1t0rislut7().s[2]++,require("../internal/string-utils"));/**
 * Resource represents a resource, which capture identifying information about
 * the entities for which signals (stats or traces) are reported. It further
 * provides a framework for detection of resource information from the
 * environment and progressive population as signals propagate from the core
 * instrumentation library to a backend's exporter.
 */class CoreResource{/**
     * Returns a Resource. This resource information is loaded from the
     * OC_RESOURCE_TYPE and OC_RESOURCE_LABELS environment variables.
     *
     * @returns The resource.
     */static createFromEnvironmentVariables(){cov_1t0rislut7().f[0]++;cov_1t0rislut7().s[3]++;return{type:CoreResource.ENV_TYPE,labels:CoreResource.ENV_LABEL_MAP};}/**
     * Returns a Resource that runs all input resources sequentially and merges
     * their results. In case a type of label key is already set, the first set
     * value takes precedence.
     *
     * @param resources The list of the resources.
     * @returns The resource.
     */static mergeResources(resources){cov_1t0rislut7().f[1]++;cov_1t0rislut7().s[4]++;if(resources.length===0){cov_1t0rislut7().b[0][0]++;cov_1t0rislut7().s[5]++;return{type:'global',labels:{}};}else{cov_1t0rislut7().b[0][1]++;}let currentResource=(cov_1t0rislut7().s[6]++,resources[0]);cov_1t0rislut7().s[7]++;for(let i=(cov_1t0rislut7().s[8]++,1);i<resources.length;i++){cov_1t0rislut7().s[9]++;currentResource=this.merge(currentResource,resources[i]);}cov_1t0rislut7().s[10]++;return currentResource;}/**
     * Creates a resource type from the OC_RESOURCE_TYPE environment variable.
     *
     * OC_RESOURCE_TYPE: A string that describes the type of the resource
     * prefixed by a domain namespace, e.g. “kubernetes.io/container”.
     *
     * @param rawEnvType The resource type.
     * @returns The sanitized resource type.
     */static parseResourceType(rawEnvType){cov_1t0rislut7().f[2]++;cov_1t0rislut7().s[11]++;if(!rawEnvType){cov_1t0rislut7().b[1][0]++;cov_1t0rislut7().s[12]++;return null;}else{cov_1t0rislut7().b[1][1]++;}cov_1t0rislut7().s[13]++;if(!CoreResource.isValidAndNotEmpty(rawEnvType)){cov_1t0rislut7().b[2][0]++;cov_1t0rislut7().s[14]++;throw new Error(`Type ${CoreResource.ERROR_MESSAGE_INVALID_CHARS}`);}else{cov_1t0rislut7().b[2][1]++;}cov_1t0rislut7().s[15]++;return rawEnvType.trim();}/**
     * Creates a label map from the OC_RESOURCE_LABELS environment variable.
     *
     * OC_RESOURCE_LABELS: A comma-separated list of labels describing the
     * source in more detail, e.g. “key1=val1,key2=val2”. Domain names and paths
     * are accepted as label keys. Values may be quoted or unquoted in general. If
     * a value contains whitespaces, =, or " characters, it must always be quoted.
     *
     * @param rawEnvLabels The resource labels as a comma-seperated list
     * of key/value pairs.
     * @returns The sanitized resource labels.
     */static parseResourceLabels(rawEnvLabels){cov_1t0rislut7().f[3]++;cov_1t0rislut7().s[16]++;if(!rawEnvLabels){cov_1t0rislut7().b[3][0]++;cov_1t0rislut7().s[17]++;return{};}else{cov_1t0rislut7().b[3][1]++;}const labels=(cov_1t0rislut7().s[18]++,{});const rawLabels=(cov_1t0rislut7().s[19]++,rawEnvLabels.split(this.COMMA_SEPARATOR,-1));cov_1t0rislut7().s[20]++;for(const rawLabel of rawLabels){const keyValuePair=(cov_1t0rislut7().s[21]++,rawLabel.split(this.LABEL_KEY_VALUE_SPLITTER,-1));cov_1t0rislut7().s[22]++;if(keyValuePair.length!==2){cov_1t0rislut7().b[4][0]++;cov_1t0rislut7().s[23]++;continue;}else{cov_1t0rislut7().b[4][1]++;}let[key,value]=(cov_1t0rislut7().s[24]++,keyValuePair);// Leading and trailing whitespaces are trimmed.
cov_1t0rislut7().s[25]++;key=key.trim();cov_1t0rislut7().s[26]++;value=value.trim().split('^"|"$').join('');cov_1t0rislut7().s[27]++;if(!CoreResource.isValidAndNotEmpty(key)){cov_1t0rislut7().b[5][0]++;cov_1t0rislut7().s[28]++;throw new Error(`Label key ${CoreResource.ERROR_MESSAGE_INVALID_CHARS}`);}else{cov_1t0rislut7().b[5][1]++;}cov_1t0rislut7().s[29]++;if(!CoreResource.isValid(value)){cov_1t0rislut7().b[6][0]++;cov_1t0rislut7().s[30]++;throw new Error(`Label value ${CoreResource.ERROR_MESSAGE_INVALID_VALUE}`);}else{cov_1t0rislut7().b[6][1]++;}cov_1t0rislut7().s[31]++;labels[key]=value;}cov_1t0rislut7().s[32]++;return labels;}/**
     * Returns a new, merged Resource by merging two resources. In case of
     * a collision, first resource takes precedence.
     *
     * @param resource The resource object.
     * @param otherResource The resource object.
     * @returns A new, merged Resource.
     */static merge(resource,otherResource){cov_1t0rislut7().f[4]++;cov_1t0rislut7().s[33]++;if(!resource){cov_1t0rislut7().b[7][0]++;cov_1t0rislut7().s[34]++;return otherResource;}else{cov_1t0rislut7().b[7][1]++;}cov_1t0rislut7().s[35]++;if(!otherResource){cov_1t0rislut7().b[8][0]++;cov_1t0rislut7().s[36]++;return resource;}else{cov_1t0rislut7().b[8][1]++;}cov_1t0rislut7().s[37]++;return{type:(cov_1t0rislut7().b[9][0]++,resource.type)||(cov_1t0rislut7().b[9][1]++,otherResource.type),labels:Object.assign({},otherResource.labels,resource.labels)};}/**
     * Determines whether the given String is a valid printable ASCII string with
     * a length not exceed MAX_LENGTH characters.
     *
     * @param str The String to be validated.
     * @returns Whether the String is valid.
     */static isValid(name){cov_1t0rislut7().f[5]++;cov_1t0rislut7().s[38]++;return(cov_1t0rislut7().b[10][0]++,name.length<=CoreResource.MAX_LENGTH)&&(cov_1t0rislut7().b[10][1]++,string_utils_1.StringUtils.isPrintableString(name));}/**
     * Determines whether the given String is a valid printable ASCII string with
     * a length greater than 0 and not exceed MAX_LENGTH characters.
     *
     * @param str The String to be validated.
     * @returns Whether the String is valid and not empty.
     */static isValidAndNotEmpty(name){cov_1t0rislut7().f[6]++;cov_1t0rislut7().s[39]++;return(cov_1t0rislut7().b[11][0]++,name.length>0)&&(cov_1t0rislut7().b[11][1]++,CoreResource.isValid(name));}/** TEST_ONLY */static setup(){cov_1t0rislut7().f[7]++;cov_1t0rislut7().s[40]++;CoreResource.ENV_TYPE=CoreResource.parseResourceType(process.env.OC_RESOURCE_TYPE);cov_1t0rislut7().s[41]++;CoreResource.ENV_LABEL_MAP=CoreResource.parseResourceLabels(process.env.OC_RESOURCE_LABELS);}}cov_1t0rislut7().s[42]++;exports.CoreResource=CoreResource;// Type, label keys, and label values should not exceed 256 characters.
cov_1t0rislut7().s[43]++;CoreResource.MAX_LENGTH=255;// OC_RESOURCE_LABELS is a comma-separated list of labels.
cov_1t0rislut7().s[44]++;CoreResource.COMMA_SEPARATOR=',';// OC_RESOURCE_LABELS contains key value pair separated by '='.
cov_1t0rislut7().s[45]++;CoreResource.LABEL_KEY_VALUE_SPLITTER='=';cov_1t0rislut7().s[46]++;CoreResource.ENV_TYPE=CoreResource.parseResourceType(process.env.OC_RESOURCE_TYPE);cov_1t0rislut7().s[47]++;CoreResource.ENV_LABEL_MAP=CoreResource.parseResourceLabels(process.env.OC_RESOURCE_LABELS);cov_1t0rislut7().s[48]++;CoreResource.ERROR_MESSAGE_INVALID_CHARS='should be a ASCII string with a length greater than 0 and not exceed '+CoreResource.MAX_LENGTH+' characters.';cov_1t0rislut7().s[49]++;CoreResource.ERROR_MESSAGE_INVALID_VALUE='should be a ASCII string with a length not exceed '+CoreResource.MAX_LENGTH+' characters.';//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMXQwcmlzbHV0NyIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJlbmQiLCJmbk1hcCIsIm5hbWUiLCJkZWNsIiwibG9jIiwiYnJhbmNoTWFwIiwidHlwZSIsImxvY2F0aW9ucyIsInMiLCJmIiwiYiIsImlucHV0U291cmNlTWFwIiwidmVyc2lvbiIsImZpbGUiLCJzb3VyY2VzIiwibmFtZXMiLCJtYXBwaW5ncyIsInNvdXJjZXNDb250ZW50IiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSIsInN0cmluZ191dGlsc18xIiwicmVxdWlyZSIsIkNvcmVSZXNvdXJjZSIsImNyZWF0ZUZyb21FbnZpcm9ubWVudFZhcmlhYmxlcyIsIkVOVl9UWVBFIiwibGFiZWxzIiwiRU5WX0xBQkVMX01BUCIsIm1lcmdlUmVzb3VyY2VzIiwicmVzb3VyY2VzIiwibGVuZ3RoIiwiY3VycmVudFJlc291cmNlIiwiaSIsIm1lcmdlIiwicGFyc2VSZXNvdXJjZVR5cGUiLCJyYXdFbnZUeXBlIiwiaXNWYWxpZEFuZE5vdEVtcHR5IiwiRXJyb3IiLCJFUlJPUl9NRVNTQUdFX0lOVkFMSURfQ0hBUlMiLCJ0cmltIiwicGFyc2VSZXNvdXJjZUxhYmVscyIsInJhd0VudkxhYmVscyIsInJhd0xhYmVscyIsInNwbGl0IiwiQ09NTUFfU0VQQVJBVE9SIiwicmF3TGFiZWwiLCJrZXlWYWx1ZVBhaXIiLCJMQUJFTF9LRVlfVkFMVUVfU1BMSVRURVIiLCJrZXkiLCJ2YWx1ZSIsImpvaW4iLCJpc1ZhbGlkIiwiRVJST1JfTUVTU0FHRV9JTlZBTElEX1ZBTFVFIiwicmVzb3VyY2UiLCJvdGhlclJlc291cmNlIiwiT2JqZWN0IiwiYXNzaWduIiwiTUFYX0xFTkdUSCIsIlN0cmluZ1V0aWxzIiwiaXNQcmludGFibGVTdHJpbmciLCJzZXR1cCIsInByb2Nlc3MiLCJlbnYiLCJPQ19SRVNPVVJDRV9UWVBFIiwiT0NfUkVTT1VSQ0VfTEFCRUxTIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi9Vc2Vycy91c2VybWFpdGhhL3RyYWRlbWFzdGVyL2xpYnMvbGliLWV4dGVybmFsLW9wZW5jZW5zdXMtbm9kZS9zcmMvcmVzb3VyY2UvcmVzb3VyY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCwgT3BlbkNlbnN1cyBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBTdHJpbmdVdGlscyB9IGZyb20gJy4uL2ludGVybmFsL3N0cmluZy11dGlscyc7XG5pbXBvcnQgeyBMYWJlbHMsIFJlc291cmNlIH0gZnJvbSAnLi90eXBlcyc7XG5cbi8qKlxuICogUmVzb3VyY2UgcmVwcmVzZW50cyBhIHJlc291cmNlLCB3aGljaCBjYXB0dXJlIGlkZW50aWZ5aW5nIGluZm9ybWF0aW9uIGFib3V0XG4gKiB0aGUgZW50aXRpZXMgZm9yIHdoaWNoIHNpZ25hbHMgKHN0YXRzIG9yIHRyYWNlcykgYXJlIHJlcG9ydGVkLiBJdCBmdXJ0aGVyXG4gKiBwcm92aWRlcyBhIGZyYW1ld29yayBmb3IgZGV0ZWN0aW9uIG9mIHJlc291cmNlIGluZm9ybWF0aW9uIGZyb20gdGhlXG4gKiBlbnZpcm9ubWVudCBhbmQgcHJvZ3Jlc3NpdmUgcG9wdWxhdGlvbiBhcyBzaWduYWxzIHByb3BhZ2F0ZSBmcm9tIHRoZSBjb3JlXG4gKiBpbnN0cnVtZW50YXRpb24gbGlicmFyeSB0byBhIGJhY2tlbmQncyBleHBvcnRlci5cbiAqL1xuZXhwb3J0IGNsYXNzIENvcmVSZXNvdXJjZSB7XG4gIC8vIFR5cGUsIGxhYmVsIGtleXMsIGFuZCBsYWJlbCB2YWx1ZXMgc2hvdWxkIG5vdCBleGNlZWQgMjU2IGNoYXJhY3RlcnMuXG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IE1BWF9MRU5HVEggPSAyNTU7XG5cbiAgLy8gT0NfUkVTT1VSQ0VfTEFCRUxTIGlzIGEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgbGFiZWxzLlxuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBDT01NQV9TRVBBUkFUT1IgPSAnLCc7XG5cbiAgLy8gT0NfUkVTT1VSQ0VfTEFCRUxTIGNvbnRhaW5zIGtleSB2YWx1ZSBwYWlyIHNlcGFyYXRlZCBieSAnPScuXG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IExBQkVMX0tFWV9WQUxVRV9TUExJVFRFUiA9ICc9JztcblxuICBwcml2YXRlIHN0YXRpYyBFTlZfVFlQRSA9IENvcmVSZXNvdXJjZS5wYXJzZVJlc291cmNlVHlwZShcbiAgICBwcm9jZXNzLmVudi5PQ19SRVNPVVJDRV9UWVBFXG4gICk7XG4gIHByaXZhdGUgc3RhdGljIEVOVl9MQUJFTF9NQVAgPSBDb3JlUmVzb3VyY2UucGFyc2VSZXNvdXJjZUxhYmVscyhcbiAgICBwcm9jZXNzLmVudi5PQ19SRVNPVVJDRV9MQUJFTFNcbiAgKTtcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgRVJST1JfTUVTU0FHRV9JTlZBTElEX0NIQVJTID1cbiAgICAnc2hvdWxkIGJlIGEgQVNDSUkgc3RyaW5nIHdpdGggYSBsZW5ndGggZ3JlYXRlciB0aGFuIDAgYW5kIG5vdCBleGNlZWQgJyArXG4gICAgQ29yZVJlc291cmNlLk1BWF9MRU5HVEggK1xuICAgICcgY2hhcmFjdGVycy4nO1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBFUlJPUl9NRVNTQUdFX0lOVkFMSURfVkFMVUUgPVxuICAgICdzaG91bGQgYmUgYSBBU0NJSSBzdHJpbmcgd2l0aCBhIGxlbmd0aCBub3QgZXhjZWVkICcgK1xuICAgIENvcmVSZXNvdXJjZS5NQVhfTEVOR1RIICtcbiAgICAnIGNoYXJhY3RlcnMuJztcblxuICAvKipcbiAgICogUmV0dXJucyBhIFJlc291cmNlLiBUaGlzIHJlc291cmNlIGluZm9ybWF0aW9uIGlzIGxvYWRlZCBmcm9tIHRoZVxuICAgKiBPQ19SRVNPVVJDRV9UWVBFIGFuZCBPQ19SRVNPVVJDRV9MQUJFTFMgZW52aXJvbm1lbnQgdmFyaWFibGVzLlxuICAgKlxuICAgKiBAcmV0dXJucyBUaGUgcmVzb3VyY2UuXG4gICAqL1xuICBzdGF0aWMgY3JlYXRlRnJvbUVudmlyb25tZW50VmFyaWFibGVzKCk6IFJlc291cmNlIHtcbiAgICByZXR1cm4geyB0eXBlOiBDb3JlUmVzb3VyY2UuRU5WX1RZUEUsIGxhYmVsczogQ29yZVJlc291cmNlLkVOVl9MQUJFTF9NQVAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgUmVzb3VyY2UgdGhhdCBydW5zIGFsbCBpbnB1dCByZXNvdXJjZXMgc2VxdWVudGlhbGx5IGFuZCBtZXJnZXNcbiAgICogdGhlaXIgcmVzdWx0cy4gSW4gY2FzZSBhIHR5cGUgb2YgbGFiZWwga2V5IGlzIGFscmVhZHkgc2V0LCB0aGUgZmlyc3Qgc2V0XG4gICAqIHZhbHVlIHRha2VzIHByZWNlZGVuY2UuXG4gICAqXG4gICAqIEBwYXJhbSByZXNvdXJjZXMgVGhlIGxpc3Qgb2YgdGhlIHJlc291cmNlcy5cbiAgICogQHJldHVybnMgVGhlIHJlc291cmNlLlxuICAgKi9cbiAgc3RhdGljIG1lcmdlUmVzb3VyY2VzKHJlc291cmNlczogUmVzb3VyY2VbXSk6IFJlc291cmNlIHtcbiAgICBpZiAocmVzb3VyY2VzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHsgdHlwZTogJ2dsb2JhbCcsIGxhYmVsczoge30gfTtcbiAgICBsZXQgY3VycmVudFJlc291cmNlID0gcmVzb3VyY2VzWzBdO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgcmVzb3VyY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjdXJyZW50UmVzb3VyY2UgPSB0aGlzLm1lcmdlKGN1cnJlbnRSZXNvdXJjZSwgcmVzb3VyY2VzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIGN1cnJlbnRSZXNvdXJjZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgcmVzb3VyY2UgdHlwZSBmcm9tIHRoZSBPQ19SRVNPVVJDRV9UWVBFIGVudmlyb25tZW50IHZhcmlhYmxlLlxuICAgKlxuICAgKiBPQ19SRVNPVVJDRV9UWVBFOiBBIHN0cmluZyB0aGF0IGRlc2NyaWJlcyB0aGUgdHlwZSBvZiB0aGUgcmVzb3VyY2VcbiAgICogcHJlZml4ZWQgYnkgYSBkb21haW4gbmFtZXNwYWNlLCBlLmcuIOKAnGt1YmVybmV0ZXMuaW8vY29udGFpbmVy4oCdLlxuICAgKlxuICAgKiBAcGFyYW0gcmF3RW52VHlwZSBUaGUgcmVzb3VyY2UgdHlwZS5cbiAgICogQHJldHVybnMgVGhlIHNhbml0aXplZCByZXNvdXJjZSB0eXBlLlxuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgcGFyc2VSZXNvdXJjZVR5cGUocmF3RW52VHlwZT86IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xuICAgIGlmICghcmF3RW52VHlwZSkgcmV0dXJuIG51bGw7XG4gICAgaWYgKCFDb3JlUmVzb3VyY2UuaXNWYWxpZEFuZE5vdEVtcHR5KHJhd0VudlR5cGUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFR5cGUgJHtDb3JlUmVzb3VyY2UuRVJST1JfTUVTU0FHRV9JTlZBTElEX0NIQVJTfWApO1xuICAgIH1cbiAgICByZXR1cm4gcmF3RW52VHlwZS50cmltKCk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGxhYmVsIG1hcCBmcm9tIHRoZSBPQ19SRVNPVVJDRV9MQUJFTFMgZW52aXJvbm1lbnQgdmFyaWFibGUuXG4gICAqXG4gICAqIE9DX1JFU09VUkNFX0xBQkVMUzogQSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBsYWJlbHMgZGVzY3JpYmluZyB0aGVcbiAgICogc291cmNlIGluIG1vcmUgZGV0YWlsLCBlLmcuIOKAnGtleTE9dmFsMSxrZXkyPXZhbDLigJ0uIERvbWFpbiBuYW1lcyBhbmQgcGF0aHNcbiAgICogYXJlIGFjY2VwdGVkIGFzIGxhYmVsIGtleXMuIFZhbHVlcyBtYXkgYmUgcXVvdGVkIG9yIHVucXVvdGVkIGluIGdlbmVyYWwuIElmXG4gICAqIGEgdmFsdWUgY29udGFpbnMgd2hpdGVzcGFjZXMsID0sIG9yIFwiIGNoYXJhY3RlcnMsIGl0IG11c3QgYWx3YXlzIGJlIHF1b3RlZC5cbiAgICpcbiAgICogQHBhcmFtIHJhd0VudkxhYmVscyBUaGUgcmVzb3VyY2UgbGFiZWxzIGFzIGEgY29tbWEtc2VwZXJhdGVkIGxpc3RcbiAgICogb2Yga2V5L3ZhbHVlIHBhaXJzLlxuICAgKiBAcmV0dXJucyBUaGUgc2FuaXRpemVkIHJlc291cmNlIGxhYmVscy5cbiAgICovXG4gIHByaXZhdGUgc3RhdGljIHBhcnNlUmVzb3VyY2VMYWJlbHMocmF3RW52TGFiZWxzPzogc3RyaW5nKTogTGFiZWxzIHtcbiAgICBpZiAoIXJhd0VudkxhYmVscykgcmV0dXJuIHt9O1xuXG4gICAgY29uc3QgbGFiZWxzOiBMYWJlbHMgPSB7fTtcbiAgICBjb25zdCByYXdMYWJlbHM6IHN0cmluZ1tdID0gcmF3RW52TGFiZWxzLnNwbGl0KHRoaXMuQ09NTUFfU0VQQVJBVE9SLCAtMSk7XG4gICAgZm9yIChjb25zdCByYXdMYWJlbCBvZiByYXdMYWJlbHMpIHtcbiAgICAgIGNvbnN0IGtleVZhbHVlUGFpcjogc3RyaW5nW10gPSByYXdMYWJlbC5zcGxpdChcbiAgICAgICAgdGhpcy5MQUJFTF9LRVlfVkFMVUVfU1BMSVRURVIsXG4gICAgICAgIC0xXG4gICAgICApO1xuICAgICAgaWYgKGtleVZhbHVlUGFpci5sZW5ndGggIT09IDIpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBsZXQgW2tleSwgdmFsdWVdID0ga2V5VmFsdWVQYWlyO1xuICAgICAgLy8gTGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZXMgYXJlIHRyaW1tZWQuXG4gICAgICBrZXkgPSBrZXkudHJpbSgpO1xuICAgICAgdmFsdWUgPSB2YWx1ZVxuICAgICAgICAudHJpbSgpXG4gICAgICAgIC5zcGxpdCgnXlwifFwiJCcpXG4gICAgICAgIC5qb2luKCcnKTtcbiAgICAgIGlmICghQ29yZVJlc291cmNlLmlzVmFsaWRBbmROb3RFbXB0eShrZXkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgTGFiZWwga2V5ICR7Q29yZVJlc291cmNlLkVSUk9SX01FU1NBR0VfSU5WQUxJRF9DSEFSU31gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoIUNvcmVSZXNvdXJjZS5pc1ZhbGlkKHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYExhYmVsIHZhbHVlICR7Q29yZVJlc291cmNlLkVSUk9SX01FU1NBR0VfSU5WQUxJRF9WQUxVRX1gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBsYWJlbHNba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gbGFiZWxzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBuZXcsIG1lcmdlZCBSZXNvdXJjZSBieSBtZXJnaW5nIHR3byByZXNvdXJjZXMuIEluIGNhc2Ugb2ZcbiAgICogYSBjb2xsaXNpb24sIGZpcnN0IHJlc291cmNlIHRha2VzIHByZWNlZGVuY2UuXG4gICAqXG4gICAqIEBwYXJhbSByZXNvdXJjZSBUaGUgcmVzb3VyY2Ugb2JqZWN0LlxuICAgKiBAcGFyYW0gb3RoZXJSZXNvdXJjZSBUaGUgcmVzb3VyY2Ugb2JqZWN0LlxuICAgKiBAcmV0dXJucyBBIG5ldywgbWVyZ2VkIFJlc291cmNlLlxuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgbWVyZ2UocmVzb3VyY2U6IFJlc291cmNlLCBvdGhlclJlc291cmNlOiBSZXNvdXJjZSk6IFJlc291cmNlIHtcbiAgICBpZiAoIXJlc291cmNlKSB7XG4gICAgICByZXR1cm4gb3RoZXJSZXNvdXJjZTtcbiAgICB9XG4gICAgaWYgKCFvdGhlclJlc291cmNlKSB7XG4gICAgICByZXR1cm4gcmVzb3VyY2U7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiByZXNvdXJjZS50eXBlIHx8IG90aGVyUmVzb3VyY2UudHlwZSxcbiAgICAgIGxhYmVsczogT2JqZWN0LmFzc2lnbih7fSwgb3RoZXJSZXNvdXJjZS5sYWJlbHMsIHJlc291cmNlLmxhYmVscyksXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGdpdmVuIFN0cmluZyBpcyBhIHZhbGlkIHByaW50YWJsZSBBU0NJSSBzdHJpbmcgd2l0aFxuICAgKiBhIGxlbmd0aCBub3QgZXhjZWVkIE1BWF9MRU5HVEggY2hhcmFjdGVycy5cbiAgICpcbiAgICogQHBhcmFtIHN0ciBUaGUgU3RyaW5nIHRvIGJlIHZhbGlkYXRlZC5cbiAgICogQHJldHVybnMgV2hldGhlciB0aGUgU3RyaW5nIGlzIHZhbGlkLlxuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgaXNWYWxpZChuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKFxuICAgICAgbmFtZS5sZW5ndGggPD0gQ29yZVJlc291cmNlLk1BWF9MRU5HVEggJiZcbiAgICAgIFN0cmluZ1V0aWxzLmlzUHJpbnRhYmxlU3RyaW5nKG5hbWUpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGdpdmVuIFN0cmluZyBpcyBhIHZhbGlkIHByaW50YWJsZSBBU0NJSSBzdHJpbmcgd2l0aFxuICAgKiBhIGxlbmd0aCBncmVhdGVyIHRoYW4gMCBhbmQgbm90IGV4Y2VlZCBNQVhfTEVOR1RIIGNoYXJhY3RlcnMuXG4gICAqXG4gICAqIEBwYXJhbSBzdHIgVGhlIFN0cmluZyB0byBiZSB2YWxpZGF0ZWQuXG4gICAqIEByZXR1cm5zIFdoZXRoZXIgdGhlIFN0cmluZyBpcyB2YWxpZCBhbmQgbm90IGVtcHR5LlxuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgaXNWYWxpZEFuZE5vdEVtcHR5KG5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBuYW1lLmxlbmd0aCA+IDAgJiYgQ29yZVJlc291cmNlLmlzVmFsaWQobmFtZSk7XG4gIH1cblxuICAvKiogVEVTVF9PTkxZICovXG4gIHN0YXRpYyBzZXR1cCgpIHtcbiAgICBDb3JlUmVzb3VyY2UuRU5WX1RZUEUgPSBDb3JlUmVzb3VyY2UucGFyc2VSZXNvdXJjZVR5cGUoXG4gICAgICBwcm9jZXNzLmVudi5PQ19SRVNPVVJDRV9UWVBFXG4gICAgKTtcbiAgICBDb3JlUmVzb3VyY2UuRU5WX0xBQkVMX01BUCA9IENvcmVSZXNvdXJjZS5wYXJzZVJlc291cmNlTGFiZWxzKFxuICAgICAgcHJvY2Vzcy5lbnYuT0NfUkVTT1VSQ0VfTEFCRUxTXG4gICAgKTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiYUFBQTs7Ozs7Ozs7Ozs7Ozs7R0FBQSxTQUFBQSxlQUFBLE1BQUFDLElBQUEsZ0dBQUFDLElBQUEsZ0RBQUFDLE1BQUEsS0FBQUMsUUFBQSxzQkFBQUMsR0FBQSxvQkFBQUMsWUFBQSxFQUFBTCxJQUFBLDRGQUFBTSxZQUFBLE9BQUFDLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFVBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLGFBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLE9BQUFFLEtBQUEsT0FBQUMsSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxLQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFELElBQUEsVUFBQUksSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxLQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFELElBQUEsVUFBQUksSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxLQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFELElBQUEsVUFBQUksSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxLQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLEtBQUFELElBQUEsVUFBQUksSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsS0FBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsS0FBQUMsTUFBQSxLQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLEtBQUFELElBQUEsV0FBQUksSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsS0FBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsS0FBQUMsTUFBQSxLQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLEtBQUFELElBQUEsV0FBQUksSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsS0FBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsS0FBQUMsTUFBQSxLQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLEtBQUFELElBQUEsV0FBQUksSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsS0FBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsS0FBQUMsTUFBQSxLQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLEtBQUFELElBQUEsT0FBQU8sU0FBQSxPQUFBRCxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLE1BQUFPLElBQUEsTUFBQUMsU0FBQSxHQUFBVixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxPQUFBRixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxPQUFBRCxJQUFBLFVBQUFNLEdBQUEsRUFBQVAsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsTUFBQU8sSUFBQSxNQUFBQyxTQUFBLEdBQUFWLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLE9BQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLE9BQUFELElBQUEsVUFBQU0sR0FBQSxFQUFBUCxLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxLQUFBTyxJQUFBLE1BQUFDLFNBQUEsR0FBQVYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsTUFBQUYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsTUFBQUQsSUFBQSxVQUFBTSxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLE1BQUFPLElBQUEsTUFBQUMsU0FBQSxHQUFBVixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxPQUFBRixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxPQUFBRCxJQUFBLFVBQUFNLEdBQUEsRUFBQVAsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsS0FBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsTUFBQU8sSUFBQSxNQUFBQyxTQUFBLEdBQUFWLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLE9BQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLE9BQUFELElBQUEsVUFBQU0sR0FBQSxFQUFBUCxLQUFBLEVBQUFDLElBQUEsS0FBQUMsTUFBQSxLQUFBQyxHQUFBLEVBQUFGLElBQUEsS0FBQUMsTUFBQSxNQUFBTyxJQUFBLE1BQUFDLFNBQUEsR0FBQVYsS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1BQUEsS0FBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsT0FBQUYsS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1BQUEsS0FBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsT0FBQUQsSUFBQSxXQUFBTSxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLE1BQUFPLElBQUEsTUFBQUMsU0FBQSxHQUFBVixLQUFBLEVBQUFDLElBQUEsS0FBQUMsTUFBQSxLQUFBQyxHQUFBLEVBQUFGLElBQUEsS0FBQUMsTUFBQSxPQUFBRixLQUFBLEVBQUFDLElBQUEsS0FBQUMsTUFBQSxLQUFBQyxHQUFBLEVBQUFGLElBQUEsS0FBQUMsTUFBQSxPQUFBRCxJQUFBLFdBQUFNLEdBQUEsRUFBQVAsS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsS0FBQU8sSUFBQSxNQUFBQyxTQUFBLEdBQUFWLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLE1BQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLE1BQUFELElBQUEsV0FBQU0sR0FBQSxFQUFBUCxLQUFBLEVBQUFDLElBQUEsS0FBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsS0FBQUMsTUFBQSxLQUFBTyxJQUFBLE1BQUFDLFNBQUEsR0FBQVYsS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsTUFBQUYsS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsTUFBQUQsSUFBQSxXQUFBTSxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLE1BQUFPLElBQUEsZUFBQUMsU0FBQSxHQUFBVixLQUFBLEVBQUFDLElBQUEsS0FBQUMsTUFBQSxLQUFBQyxHQUFBLEVBQUFGLElBQUEsS0FBQUMsTUFBQSxPQUFBRixLQUFBLEVBQUFDLElBQUEsS0FBQUMsTUFBQSxL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