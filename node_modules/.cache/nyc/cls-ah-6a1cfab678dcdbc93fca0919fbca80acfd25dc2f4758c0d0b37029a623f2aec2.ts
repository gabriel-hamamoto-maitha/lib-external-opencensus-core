"use strict";/**
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_2qkewc4hgz(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/internal/cls-ah.ts";var hash="f1ca5d6a82a96bd158cf7e53bfda529f4c706c54";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/internal/cls-ah.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:0},end:{line:18,column:99}},"2":{start:{line:21,column:18},end:{line:21,column:40}},"3":{start:{line:22,column:16},end:{line:22,column:34}},"4":{start:{line:23,column:16},end:{line:23,column:41}},"5":{start:{line:25,column:15},end:{line:25,column:24}},"6":{start:{line:26,column:14},end:{line:26,column:16}},"7":{start:{line:28,column:0},end:{line:28,column:57}},"8":{start:{line:30,column:30},end:{line:36,column:1}},"9":{start:{line:39,column:8},end:{line:39,column:43}},"10":{start:{line:42,column:8},end:{line:42,column:23}},"11":{start:{line:45,column:8},end:{line:45,column:43}},"12":{start:{line:48,column:8},end:{line:48,column:26}},"13":{start:{line:51,column:8},end:{line:51,column:23}},"14":{start:{line:52,column:8},end:{line:52,column:17}},"15":{start:{line:55,column:8},end:{line:55,column:30}},"16":{start:{line:56,column:8},end:{line:56,column:23}},"17":{start:{line:59,column:27},end:{line:59,column:34}},"18":{start:{line:60,column:8},end:{line:60,column:21}},"19":{start:{line:61,column:8},end:{line:63,column:9}},"20":{start:{line:62,column:12},end:{line:62,column:71}},"21":{start:{line:64,column:20},end:{line:64,column:24}},"22":{start:{line:65,column:8},end:{line:65,column:29}},"23":{start:{line:66,column:8},end:{line:66,column:19}},"24":{start:{line:72,column:8},end:{line:74,column:9}},"25":{start:{line:73,column:12},end:{line:73,column:22}},"26":{start:{line:75,column:29},end:{line:75,column:36}},"27":{start:{line:76,column:31},end:{line:83,column:9}},"28":{start:{line:77,column:31},end:{line:77,column:38}},"29":{start:{line:78,column:12},end:{line:78,column:35}},"30":{start:{line:80,column:24},end:{line:80,column:49}},"31":{start:{line:81,column:12},end:{line:81,column:33}},"32":{start:{line:82,column:12},end:{line:82,column:23}},"33":{start:{line:85,column:8},end:{line:85,column:39}},"34":{start:{line:86,column:8},end:{line:91,column:11}},"35":{start:{line:92,column:8},end:{line:92,column:30}},"36":{start:{line:100,column:19},end:{line:100,column:23}},"37":{start:{line:101,column:8},end:{line:110,column:11}},"38":{start:{line:102,column:12},end:{line:109,column:13}},"39":{start:{line:103,column:16},end:{line:108,column:19}},"40":{start:{line:104,column:20},end:{line:107,column:22}},"41":{start:{line:106,column:24},end:{line:106,column:72}},"42":{start:{line:113,column:18},end:{line:113,column:43}},"43":{start:{line:117,column:4},end:{line:117,column:31}},"44":{start:{line:121,column:25},end:{line:121,column:42}},"45":{start:{line:122,column:4},end:{line:124,column:5}},"46":{start:{line:123,column:8},end:{line:123,column:31}},"47":{start:{line:131,column:4},end:{line:131,column:25}},"48":{start:{line:134,column:4},end:{line:134,column:21}},"49":{start:{line:136,column:0},end:{line:136,column:42}},"50":{start:{line:138,column:4},end:{line:138,column:17}},"51":{start:{line:139,column:4},end:{line:139,column:25}},"52":{start:{line:141,column:0},end:{line:141,column:44}},"53":{start:{line:143,column:4},end:{line:143,column:21}},"54":{start:{line:145,column:0},end:{line:145,column:36}},"55":{start:{line:147,column:4},end:{line:147,column:39}},"56":{start:{line:149,column:0},end:{line:149,column:22}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:38,column:4},end:{line:38,column:5}},loc:{start:{line:38,column:15},end:{line:40,column:5}},line:38},"1":{name:"(anonymous_1)",decl:{start:{line:41,column:4},end:{line:41,column:5}},loc:{start:{line:41,column:17},end:{line:43,column:5}},line:41},"2":{name:"(anonymous_2)",decl:{start:{line:44,column:4},end:{line:44,column:5}},loc:{start:{line:44,column:20},end:{line:46,column:5}},line:44},"3":{name:"(anonymous_3)",decl:{start:{line:47,column:4},end:{line:47,column:5}},loc:{start:{line:47,column:11},end:{line:49,column:5}},line:47},"4":{name:"(anonymous_4)",decl:{start:{line:50,column:4},end:{line:50,column:5}},loc:{start:{line:50,column:14},end:{line:53,column:5}},line:50},"5":{name:"(anonymous_5)",decl:{start:{line:54,column:4},end:{line:54,column:5}},loc:{start:{line:54,column:12},end:{line:57,column:5}},line:54},"6":{name:"(anonymous_6)",decl:{start:{line:58,column:4},end:{line:58,column:5}},loc:{start:{line:58,column:21},end:{line:67,column:5}},line:58},"7":{name:"(anonymous_7)",decl:{start:{line:68,column:4},end:{line:68,column:5}},loc:{start:{line:68,column:13},end:{line:93,column:5}},line:68},"8":{name:"(anonymous_8)",decl:{start:{line:76,column:31},end:{line:76,column:32}},loc:{start:{line:76,column:43},end:{line:83,column:9}},line:76},"9":{name:"(anonymous_9)",decl:{start:{line:99,column:4},end:{line:99,column:5}},loc:{start:{line:99,column:20},end:{line:111,column:5}},line:99},"10":{name:"(anonymous_10)",decl:{start:{line:101,column:38},end:{line:101,column:39}},loc:{start:{line:101,column:48},end:{line:110,column:9}},line:101},"11":{name:"(anonymous_11)",decl:{start:{line:103,column:41},end:{line:103,column:42}},loc:{start:{line:103,column:54},end:{line:108,column:17}},line:103},"12":{name:"(anonymous_12)",decl:{start:{line:104,column:27},end:{line:104,column:28}},loc:{start:{line:104,column:48},end:{line:107,column:21}},line:104},"13":{name:"init",decl:{start:{line:116,column:9},end:{line:116,column:13}},loc:{start:{line:116,column:54},end:{line:118,column:1}},line:116},"14":{name:"before",decl:{start:{line:120,column:9},end:{line:120,column:15}},loc:{start:{line:120,column:21},end:{line:125,column:1}},line:120},"15":{name:"destroy",decl:{start:{line:130,column:9},end:{line:130,column:16}},loc:{start:{line:130,column:22},end:{line:132,column:1}},line:130},"16":{name:"createNamespace",decl:{start:{line:133,column:9},end:{line:133,column:24}},loc:{start:{line:133,column:27},end:{line:135,column:1}},line:133},"17":{name:"destroyNamespace",decl:{start:{line:137,column:9},end:{line:137,column:25}},loc:{start:{line:137,column:28},end:{line:140,column:1}},line:137},"18":{name:"getNamespace",decl:{start:{line:142,column:9},end:{line:142,column:21}},loc:{start:{line:142,column:24},end:{line:144,column:1}},line:142},"19":{name:"reset",decl:{start:{line:146,column:9},end:{line:146,column:14}},loc:{start:{line:146,column:17},end:{line:148,column:1}},line:146}},branchMap:{"0":{loc:{start:{line:61,column:8},end:{line:63,column:9}},type:"if",locations:[{start:{line:61,column:8},end:{line:63,column:9}},{start:{line:61,column:8},end:{line:63,column:9}}],line:61},"1":{loc:{start:{line:72,column:8},end:{line:74,column:9}},type:"if",locations:[{start:{line:72,column:8},end:{line:74,column:9}},{start:{line:72,column:8},end:{line:74,column:9}}],line:72},"2":{loc:{start:{line:72,column:12},end:{line:72,column:35}},type:"binary-expr",locations:[{start:{line:72,column:12},end:{line:72,column:23}},{start:{line:72,column:27},end:{line:72,column:35}}],line:72},"3":{loc:{start:{line:102,column:12},end:{line:109,column:13}},type:"if",locations:[{start:{line:102,column:12},end:{line:109,column:13}},{start:{line:102,column:12},end:{line:109,column:13}}],line:102},"4":{loc:{start:{line:122,column:4},end:{line:124,column:5}},type:"if",locations:[{start:{line:122,column:4},end:{line:124,column:5}},{start:{line:122,column:4},end:{line:124,column:5}}],line:122}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/internal/cls-ah.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/internal/cls-ah.ts"],names:[],mappings:"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",sourcesContent:["/**\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Original file from Stackdriver Trace Agent for Node.js\n// https://github.com/GoogleCloudPlatform/cloud-trace-nodejs\n\nimport * as asyncHook from 'async_hooks';\nimport {\n  Context,\n  Func,\n  Namespace as CLSNamespace,\n} from 'continuation-local-storage';\nimport { EventEmitter } from 'events';\nimport * as shimmer from 'shimmer';\n\nconst WRAPPED = Symbol('context_wrapped');\n/** A map of AsyncResource IDs to Context objects. */\nlet contexts: Map<number, Context> = new Map();\nlet current: Context = {};\n\n// Create the hook.\nasyncHook.createHook({ init, before, destroy }).enable();\n\n// A list of well-known EventEmitter methods that add event listeners.\nconst EVENT_EMITTER_METHODS: Array<keyof EventEmitter> = [\n  'addListener',\n  'on',\n  'once',\n  'prependListener',\n  'prependOnceListener',\n];\n\nclass AsyncHooksNamespace implements CLSNamespace {\n  get name(): string {\n    throw new Error('Not implemented');\n  }\n\n  get active(): Context {\n    return current;\n  }\n\n  createContext(): Context {\n    throw new Error('Not implemented');\n  }\n\n  get(k: string) {\n    return current[k];\n  }\n\n  set<T>(k: string, v: T): T {\n    current[k] = v;\n    return v;\n  }\n\n  run<T>(fn: Func<T>): Context {\n    this.runAndReturn(fn);\n    return current;\n  }\n\n  runAndReturn<T>(fn: Func<T>): T {\n    const oldContext = current;\n    current = {};\n    if (oldContext['current_tag_map']) {\n      current['current_tag_map'] = oldContext['current_tag_map'];\n    }\n    const res = fn();\n    current = oldContext;\n    return res;\n  }\n\n  bind<T>(cb: Func<T>): Func<T> {\n    // TODO(kjin): Monitor https://github.com/Microsoft/TypeScript/pull/15473.\n    // When it's landed and released, we can remove these `any` casts.\n    // tslint:disable-next-line:no-any\n    if (((cb as any)[WRAPPED] as boolean) || !current) {\n      return cb;\n    }\n    const boundContext = current;\n    const contextWrapper = function(this: {}) {\n      const oldContext = current;\n      current = boundContext;\n      // @ts-expect-error ts-migrate(2345) FIXME: Argument of type 'IArguments' is not assignable to... Remove this comment to see the full error message\n      const res = cb.apply(this, arguments) as T;\n      current = oldContext;\n      return res;\n    };\n    // tslint:disable-next-line:no-any\n    (contextWrapper as any)[WRAPPED] = true;\n    Object.defineProperty(contextWrapper, 'length', {\n      enumerable: false,\n      configurable: true,\n      writable: false,\n      value: cb.length,\n    });\n    return contextWrapper;\n  }\n\n  // This function is not technically needed and all tests currently pass\n  // without it (after removing call sites). While it is not a complete\n  // solution, restoring correct context before running every request/response\n  // event handler reduces the number of situations in which userspace queuing\n  // will cause us to lose context.\n  bindEmitter(ee: NodeJS.EventEmitter): void {\n    const ns = this;\n    EVENT_EMITTER_METHODS.forEach(method => {\n      if (ee[method]) {\n        shimmer.wrap(ee, method, oldMethod => {\n          return function(this: {}, event: string, cb: Func<void>) {\n            // @ts-expect-error ts-migrate(2684) FIXME: The 'this' context of type '((event: string | symb... Remove this comment to see the full error message\n            return oldMethod.call(this, event, ns.bind(cb));\n          };\n        });\n      }\n    });\n  }\n}\n\nconst namespace = new AsyncHooksNamespace();\n\n// AsyncWrap Hooks\n\n/** init is called during object construction. */\nfunction init(\n  uid: number,\n  provider: string,\n  parentUid: number,\n  parentHandle: {}\n) {\n  contexts.set(uid, current);\n}\n\n/** before is called just before the resource's callback is called. */\nfunction before(uid: number) {\n  const maybeCurrent = contexts.get(uid);\n  if (maybeCurrent !== undefined) {\n    current = maybeCurrent;\n  }\n}\n\n/**\n * destroy is called when the object is no longer used, so also delete\n * its entry in the map.\n */\nfunction destroy(uid: number) {\n  contexts.delete(uid);\n}\n\nexport function createNamespace(): CLSNamespace {\n  return namespace;\n}\n\nexport function destroyNamespace(): void {\n  current = {};\n  contexts = new Map();\n}\n\nexport function getNamespace(): CLSNamespace {\n  return namespace;\n}\n\nexport function reset(): void {\n  throw new Error('Not implemented');\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"f1ca5d6a82a96bd158cf7e53bfda529f4c706c54"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2qkewc4hgz=function(){return actualCoverage;};}return actualCoverage;}cov_2qkewc4hgz();cov_2qkewc4hgz().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_2qkewc4hgz().s[1]++;exports.reset=exports.getNamespace=exports.destroyNamespace=exports.createNamespace=void 0;// Original file from Stackdriver Trace Agent for Node.js
// https://github.com/GoogleCloudPlatform/cloud-trace-nodejs
const asyncHook=(cov_2qkewc4hgz().s[2]++,require("async_hooks"));const shimmer=(cov_2qkewc4hgz().s[3]++,require("shimmer"));const WRAPPED=(cov_2qkewc4hgz().s[4]++,Symbol('context_wrapped'));/** A map of AsyncResource IDs to Context objects. */let contexts=(cov_2qkewc4hgz().s[5]++,new Map());let current=(cov_2qkewc4hgz().s[6]++,{});// Create the hook.
cov_2qkewc4hgz().s[7]++;asyncHook.createHook({init,before,destroy}).enable();// A list of well-known EventEmitter methods that add event listeners.
const EVENT_EMITTER_METHODS=(cov_2qkewc4hgz().s[8]++,['addListener','on','once','prependListener','prependOnceListener']);class AsyncHooksNamespace{get name(){cov_2qkewc4hgz().f[0]++;cov_2qkewc4hgz().s[9]++;throw new Error('Not implemented');}get active(){cov_2qkewc4hgz().f[1]++;cov_2qkewc4hgz().s[10]++;return current;}createContext(){cov_2qkewc4hgz().f[2]++;cov_2qkewc4hgz().s[11]++;throw new Error('Not implemented');}get(k){cov_2qkewc4hgz().f[3]++;cov_2qkewc4hgz().s[12]++;return current[k];}set(k,v){cov_2qkewc4hgz().f[4]++;cov_2qkewc4hgz().s[13]++;current[k]=v;cov_2qkewc4hgz().s[14]++;return v;}run(fn){cov_2qkewc4hgz().f[5]++;cov_2qkewc4hgz().s[15]++;this.runAndReturn(fn);cov_2qkewc4hgz().s[16]++;return current;}runAndReturn(fn){cov_2qkewc4hgz().f[6]++;const oldContext=(cov_2qkewc4hgz().s[17]++,current);cov_2qkewc4hgz().s[18]++;current={};cov_2qkewc4hgz().s[19]++;if(oldContext['current_tag_map']){cov_2qkewc4hgz().b[0][0]++;cov_2qkewc4hgz().s[20]++;current['current_tag_map']=oldContext['current_tag_map'];}else{cov_2qkewc4hgz().b[0][1]++;}const res=(cov_2qkewc4hgz().s[21]++,fn());cov_2qkewc4hgz().s[22]++;current=oldContext;cov_2qkewc4hgz().s[23]++;return res;}bind(cb){cov_2qkewc4hgz().f[7]++;cov_2qkewc4hgz().s[24]++;// TODO(kjin): Monitor https://github.com/Microsoft/TypeScript/pull/15473.
// When it's landed and released, we can remove these `any` casts.
// tslint:disable-next-line:no-any
if((cov_2qkewc4hgz().b[2][0]++,cb[WRAPPED])||(cov_2qkewc4hgz().b[2][1]++,!current)){cov_2qkewc4hgz().b[1][0]++;cov_2qkewc4hgz().s[25]++;return cb;}else{cov_2qkewc4hgz().b[1][1]++;}const boundContext=(cov_2qkewc4hgz().s[26]++,current);cov_2qkewc4hgz().s[27]++;const contextWrapper=function(){cov_2qkewc4hgz().f[8]++;const oldContext=(cov_2qkewc4hgz().s[28]++,current);cov_2qkewc4hgz().s[29]++;current=boundContext;// @ts-expect-error ts-migrate(2345) FIXME: Argument of type 'IArguments' is not assignable to... Remove this comment to see the full error message
const res=(cov_2qkewc4hgz().s[30]++,cb.apply(this,arguments));cov_2qkewc4hgz().s[31]++;current=oldContext;cov_2qkewc4hgz().s[32]++;return res;};// tslint:disable-next-line:no-any
cov_2qkewc4hgz().s[33]++;contextWrapper[WRAPPED]=true;cov_2qkewc4hgz().s[34]++;Object.defineProperty(contextWrapper,'length',{enumerable:false,configurable:true,writable:false,value:cb.length});cov_2qkewc4hgz().s[35]++;return contextWrapper;}// This function is not technically needed and all tests currently pass
// without it (after removing call sites). While it is not a complete
// solution, restoring correct context before running every request/response
// event handler reduces the number of situations in which userspace queuing
// will cause us to lose context.
bindEmitter(ee){cov_2qkewc4hgz().f[9]++;const ns=(cov_2qkewc4hgz().s[36]++,this);cov_2qkewc4hgz().s[37]++;EVENT_EMITTER_METHODS.forEach(method=>{cov_2qkewc4hgz().f[10]++;cov_2qkewc4hgz().s[38]++;if(ee[method]){cov_2qkewc4hgz().b[3][0]++;cov_2qkewc4hgz().s[39]++;shimmer.wrap(ee,method,oldMethod=>{cov_2qkewc4hgz().f[11]++;cov_2qkewc4hgz().s[40]++;return function(event,cb){cov_2qkewc4hgz().f[12]++;cov_2qkewc4hgz().s[41]++;// @ts-expect-error ts-migrate(2684) FIXME: The 'this' context of type '((event: string | symb... Remove this comment to see the full error message
return oldMethod.call(this,event,ns.bind(cb));};});}else{cov_2qkewc4hgz().b[3][1]++;}});}}const namespace=(cov_2qkewc4hgz().s[42]++,new AsyncHooksNamespace());// AsyncWrap Hooks
/** init is called during object construction. */function init(uid,provider,parentUid,parentHandle){cov_2qkewc4hgz().f[13]++;cov_2qkewc4hgz().s[43]++;contexts.set(uid,current);}/** before is called just before the resource's callback is called. */function before(uid){cov_2qkewc4hgz().f[14]++;const maybeCurrent=(cov_2qkewc4hgz().s[44]++,contexts.get(uid));cov_2qkewc4hgz().s[45]++;if(maybeCurrent!==undefined){cov_2qkewc4hgz().b[4][0]++;cov_2qkewc4hgz().s[46]++;current=maybeCurrent;}else{cov_2qkewc4hgz().b[4][1]++;}}/**
 * destroy is called when the object is no longer used, so also delete
 * its entry in the map.
 */function destroy(uid){cov_2qkewc4hgz().f[15]++;cov_2qkewc4hgz().s[47]++;contexts.delete(uid);}function createNamespace(){cov_2qkewc4hgz().f[16]++;cov_2qkewc4hgz().s[48]++;return namespace;}cov_2qkewc4hgz().s[49]++;exports.createNamespace=createNamespace;function destroyNamespace(){cov_2qkewc4hgz().f[17]++;cov_2qkewc4hgz().s[50]++;current={};cov_2qkewc4hgz().s[51]++;contexts=new Map();}cov_2qkewc4hgz().s[52]++;exports.destroyNamespace=destroyNamespace;function getNamespace(){cov_2qkewc4hgz().f[18]++;cov_2qkewc4hgz().s[53]++;return namespace;}cov_2qkewc4hgz().s[54]++;exports.getNamespace=getNamespace;function reset(){cov_2qkewc4hgz().f[19]++;cov_2qkewc4hgz().s[55]++;throw new Error('Not implemented');}cov_2qkewc4hgz().s[56]++;exports.reset=reset;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMnFrZXdjNGhneiIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJlbmQiLCJmbk1hcCIsIm5hbWUiLCJkZWNsIiwibG9jIiwiYnJhbmNoTWFwIiwidHlwZSIsImxvY2F0aW9ucyIsInMiLCJmIiwiYiIsImlucHV0U291cmNlTWFwIiwidmVyc2lvbiIsImZpbGUiLCJzb3VyY2VzIiwibmFtZXMiLCJtYXBwaW5ncyIsInNvdXJjZXNDb250ZW50IiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSIsImFzeW5jSG9vayIsInJlcXVpcmUiLCJzaGltbWVyIiwiV1JBUFBFRCIsIlN5bWJvbCIsImNvbnRleHRzIiwiTWFwIiwiY3VycmVudCIsImNyZWF0ZUhvb2siLCJpbml0IiwiYmVmb3JlIiwiZGVzdHJveSIsImVuYWJsZSIsIkVWRU5UX0VNSVRURVJfTUVUSE9EUyIsIkFzeW5jSG9va3NOYW1lc3BhY2UiLCJFcnJvciIsImFjdGl2ZSIsImNyZWF0ZUNvbnRleHQiLCJnZXQiLCJrIiwic2V0IiwidiIsInJ1biIsImZuIiwicnVuQW5kUmV0dXJuIiwib2xkQ29udGV4dCIsInJlcyIsImJpbmQiLCJjYiIsImJvdW5kQ29udGV4dCIsImNvbnRleHRXcmFwcGVyIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwibGVuZ3RoIiwiYmluZEVtaXR0ZXIiLCJlZSIsIm5zIiwiZm9yRWFjaCIsIm1ldGhvZCIsIndyYXAiLCJvbGRNZXRob2QiLCJldmVudCIsImNhbGwiLCJuYW1lc3BhY2UiLCJ1aWQiLCJwcm92aWRlciIsInBhcmVudFVpZCIsInBhcmVudEhhbmRsZSIsIm1heWJlQ3VycmVudCIsInVuZGVmaW5lZCIsImRlbGV0ZSIsImNyZWF0ZU5hbWVzcGFjZSIsImV4cG9ydHMiLCJkZXN0cm95TmFtZXNwYWNlIiwiZ2V0TmFtZXNwYWNlIiwicmVzZXQiXSwic291cmNlcyI6WyIvVXNlcnMvdXNlcm1haXRoYS90cmFkZW1hc3Rlci9saWJzL2xpYi1leHRlcm5hbC1vcGVuY2Vuc3VzLW5vZGUvc3JjL2ludGVybmFsL2Nscy1haC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8vIE9yaWdpbmFsIGZpbGUgZnJvbSBTdGFja2RyaXZlciBUcmFjZSBBZ2VudCBmb3IgTm9kZS5qc1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL0dvb2dsZUNsb3VkUGxhdGZvcm0vY2xvdWQtdHJhY2Utbm9kZWpzXG5cbmltcG9ydCAqIGFzIGFzeW5jSG9vayBmcm9tICdhc3luY19ob29rcyc7XG5pbXBvcnQge1xuICBDb250ZXh0LFxuICBGdW5jLFxuICBOYW1lc3BhY2UgYXMgQ0xTTmFtZXNwYWNlLFxufSBmcm9tICdjb250aW51YXRpb24tbG9jYWwtc3RvcmFnZSc7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdldmVudHMnO1xuaW1wb3J0ICogYXMgc2hpbW1lciBmcm9tICdzaGltbWVyJztcblxuY29uc3QgV1JBUFBFRCA9IFN5bWJvbCgnY29udGV4dF93cmFwcGVkJyk7XG4vKiogQSBtYXAgb2YgQXN5bmNSZXNvdXJjZSBJRHMgdG8gQ29udGV4dCBvYmplY3RzLiAqL1xubGV0IGNvbnRleHRzOiBNYXA8bnVtYmVyLCBDb250ZXh0PiA9IG5ldyBNYXAoKTtcbmxldCBjdXJyZW50OiBDb250ZXh0ID0ge307XG5cbi8vIENyZWF0ZSB0aGUgaG9vay5cbmFzeW5jSG9vay5jcmVhdGVIb29rKHsgaW5pdCwgYmVmb3JlLCBkZXN0cm95IH0pLmVuYWJsZSgpO1xuXG4vLyBBIGxpc3Qgb2Ygd2VsbC1rbm93biBFdmVudEVtaXR0ZXIgbWV0aG9kcyB0aGF0IGFkZCBldmVudCBsaXN0ZW5lcnMuXG5jb25zdCBFVkVOVF9FTUlUVEVSX01FVEhPRFM6IEFycmF5PGtleW9mIEV2ZW50RW1pdHRlcj4gPSBbXG4gICdhZGRMaXN0ZW5lcicsXG4gICdvbicsXG4gICdvbmNlJyxcbiAgJ3ByZXBlbmRMaXN0ZW5lcicsXG4gICdwcmVwZW5kT25jZUxpc3RlbmVyJyxcbl07XG5cbmNsYXNzIEFzeW5jSG9va3NOYW1lc3BhY2UgaW1wbGVtZW50cyBDTFNOYW1lc3BhY2Uge1xuICBnZXQgbmFtZSgpOiBzdHJpbmcge1xuICAgIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7XG4gIH1cblxuICBnZXQgYWN0aXZlKCk6IENvbnRleHQge1xuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG5cbiAgY3JlYXRlQ29udGV4dCgpOiBDb250ZXh0IHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpO1xuICB9XG5cbiAgZ2V0KGs6IHN0cmluZykge1xuICAgIHJldHVybiBjdXJyZW50W2tdO1xuICB9XG5cbiAgc2V0PFQ+KGs6IHN0cmluZywgdjogVCk6IFQge1xuICAgIGN1cnJlbnRba10gPSB2O1xuICAgIHJldHVybiB2O1xuICB9XG5cbiAgcnVuPFQ+KGZuOiBGdW5jPFQ+KTogQ29udGV4dCB7XG4gICAgdGhpcy5ydW5BbmRSZXR1cm4oZm4pO1xuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG5cbiAgcnVuQW5kUmV0dXJuPFQ+KGZuOiBGdW5jPFQ+KTogVCB7XG4gICAgY29uc3Qgb2xkQ29udGV4dCA9IGN1cnJlbnQ7XG4gICAgY3VycmVudCA9IHt9O1xuICAgIGlmIChvbGRDb250ZXh0WydjdXJyZW50X3RhZ19tYXAnXSkge1xuICAgICAgY3VycmVudFsnY3VycmVudF90YWdfbWFwJ10gPSBvbGRDb250ZXh0WydjdXJyZW50X3RhZ19tYXAnXTtcbiAgICB9XG4gICAgY29uc3QgcmVzID0gZm4oKTtcbiAgICBjdXJyZW50ID0gb2xkQ29udGV4dDtcbiAgICByZXR1cm4gcmVzO1xuICB9XG5cbiAgYmluZDxUPihjYjogRnVuYzxUPik6IEZ1bmM8VD4ge1xuICAgIC8vIFRPRE8oa2ppbik6IE1vbml0b3IgaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9UeXBlU2NyaXB0L3B1bGwvMTU0NzMuXG4gICAgLy8gV2hlbiBpdCdzIGxhbmRlZCBhbmQgcmVsZWFzZWQsIHdlIGNhbiByZW1vdmUgdGhlc2UgYGFueWAgY2FzdHMuXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICAgIGlmICgoKGNiIGFzIGFueSlbV1JBUFBFRF0gYXMgYm9vbGVhbikgfHwgIWN1cnJlbnQpIHtcbiAgICAgIHJldHVybiBjYjtcbiAgICB9XG4gICAgY29uc3QgYm91bmRDb250ZXh0ID0gY3VycmVudDtcbiAgICBjb25zdCBjb250ZXh0V3JhcHBlciA9IGZ1bmN0aW9uKHRoaXM6IHt9KSB7XG4gICAgICBjb25zdCBvbGRDb250ZXh0ID0gY3VycmVudDtcbiAgICAgIGN1cnJlbnQgPSBib3VuZENvbnRleHQ7XG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHRzLW1pZ3JhdGUoMjM0NSkgRklYTUU6IEFyZ3VtZW50IG9mIHR5cGUgJ0lBcmd1bWVudHMnIGlzIG5vdCBhc3NpZ25hYmxlIHRvLi4uIFJlbW92ZSB0aGlzIGNvbW1lbnQgdG8gc2VlIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2VcbiAgICAgIGNvbnN0IHJlcyA9IGNiLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgYXMgVDtcbiAgICAgIGN1cnJlbnQgPSBvbGRDb250ZXh0O1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9O1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgICAoY29udGV4dFdyYXBwZXIgYXMgYW55KVtXUkFQUEVEXSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnRleHRXcmFwcGVyLCAnbGVuZ3RoJywge1xuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICB2YWx1ZTogY2IubGVuZ3RoLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZXh0V3JhcHBlcjtcbiAgfVxuXG4gIC8vIFRoaXMgZnVuY3Rpb24gaXMgbm90IHRlY2huaWNhbGx5IG5lZWRlZCBhbmQgYWxsIHRlc3RzIGN1cnJlbnRseSBwYXNzXG4gIC8vIHdpdGhvdXQgaXQgKGFmdGVyIHJlbW92aW5nIGNhbGwgc2l0ZXMpLiBXaGlsZSBpdCBpcyBub3QgYSBjb21wbGV0ZVxuICAvLyBzb2x1dGlvbiwgcmVzdG9yaW5nIGNvcnJlY3QgY29udGV4dCBiZWZvcmUgcnVubmluZyBldmVyeSByZXF1ZXN0L3Jlc3BvbnNlXG4gIC8vIGV2ZW50IGhhbmRsZXIgcmVkdWNlcyB0aGUgbnVtYmVyIG9mIHNpdHVhdGlvbnMgaW4gd2hpY2ggdXNlcnNwYWNlIHF1ZXVpbmdcbiAgLy8gd2lsbCBjYXVzZSB1cyB0byBsb3NlIGNvbnRleHQuXG4gIGJpbmRFbWl0dGVyKGVlOiBOb2RlSlMuRXZlbnRFbWl0dGVyKTogdm9pZCB7XG4gICAgY29uc3QgbnMgPSB0aGlzO1xuICAgIEVWRU5UX0VNSVRURVJfTUVUSE9EUy5mb3JFYWNoKG1ldGhvZCA9PiB7XG4gICAgICBpZiAoZWVbbWV0aG9kXSkge1xuICAgICAgICBzaGltbWVyLndyYXAoZWUsIG1ldGhvZCwgb2xkTWV0aG9kID0+IHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odGhpczoge30sIGV2ZW50OiBzdHJpbmcsIGNiOiBGdW5jPHZvaWQ+KSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHRzLW1pZ3JhdGUoMjY4NCkgRklYTUU6IFRoZSAndGhpcycgY29udGV4dCBvZiB0eXBlICcoKGV2ZW50OiBzdHJpbmcgfCBzeW1iLi4uIFJlbW92ZSB0aGlzIGNvbW1lbnQgdG8gc2VlIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2VcbiAgICAgICAgICAgIHJldHVybiBvbGRNZXRob2QuY2FsbCh0aGlzLCBldmVudCwgbnMuYmluZChjYikpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmNvbnN0IG5hbWVzcGFjZSA9IG5ldyBBc3luY0hvb2tzTmFtZXNwYWNlKCk7XG5cbi8vIEFzeW5jV3JhcCBIb29rc1xuXG4vKiogaW5pdCBpcyBjYWxsZWQgZHVyaW5nIG9iamVjdCBjb25zdHJ1Y3Rpb24uICovXG5mdW5jdGlvbiBpbml0KFxuICB1aWQ6IG51bWJlcixcbiAgcHJvdmlkZXI6IHN0cmluZyxcbiAgcGFyZW50VWlkOiBudW1iZXIsXG4gIHBhcmVudEhhbmRsZToge31cbikge1xuICBjb250ZXh0cy5zZXQodWlkLCBjdXJyZW50KTtcbn1cblxuLyoqIGJlZm9yZSBpcyBjYWxsZWQganVzdCBiZWZvcmUgdGhlIHJlc291cmNlJ3MgY2FsbGJhY2sgaXMgY2FsbGVkLiAqL1xuZnVuY3Rpb24gYmVmb3JlKHVpZDogbnVtYmVyKSB7XG4gIGNvbnN0IG1heWJlQ3VycmVudCA9IGNvbnRleHRzLmdldCh1aWQpO1xuICBpZiAobWF5YmVDdXJyZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICBjdXJyZW50ID0gbWF5YmVDdXJyZW50O1xuICB9XG59XG5cbi8qKlxuICogZGVzdHJveSBpcyBjYWxsZWQgd2hlbiB0aGUgb2JqZWN0IGlzIG5vIGxvbmdlciB1c2VkLCBzbyBhbHNvIGRlbGV0ZVxuICogaXRzIGVudHJ5IGluIHRoZSBtYXAuXG4gKi9cbmZ1bmN0aW9uIGRlc3Ryb3kodWlkOiBudW1iZXIpIHtcbiAgY29udGV4dHMuZGVsZXRlKHVpZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVOYW1lc3BhY2UoKTogQ0xTTmFtZXNwYWNlIHtcbiAgcmV0dXJuIG5hbWVzcGFjZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlc3Ryb3lOYW1lc3BhY2UoKTogdm9pZCB7XG4gIGN1cnJlbnQgPSB7fTtcbiAgY29udGV4dHMgPSBuZXcgTWFwKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXROYW1lc3BhY2UoKTogQ0xTTmFtZXNwYWNlIHtcbiAgcmV0dXJuIG5hbWVzcGFjZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0KCk6IHZvaWQge1xuICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpO1xufVxuIl0sIm1hcHBpbmdzIjoiYUFBQTs7Ozs7Ozs7Ozs7Ozs7R0FBQSxTQUFBQSxlQUFBLE1BQUFDLElBQUEsOEZBQUFDLElBQUEsZ0RBQUFDLE1BQUEsS0FBQUMsUUFBQSxzQkFBQUMsR0FBQSxvQkFBQUMsWUFBQSxFQUFBTCxJQUFBLDBGQUFBTSxZQUFBLE9BQUFDLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFVBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLFlBQUFGLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLE9BQUFFLEtBQUEsT0FBQUMsSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxLQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFELElBQUEsVUFBQUksSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxLQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFELElBQUEsVUFBQUksSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxLQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFELElBQUEsVUFBQUksSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxLQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFELElBQUEsVUFBQUksSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxLQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFELElBQUEsVUFBQUksSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxLQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFELElBQUEsVUFBQUksSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxLQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFELElBQUEsVUFBQUksSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxLQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFELElBQUEsVUFBQUksSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxLQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxNQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFELElBQUEsVUFBQUksSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxLQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLEtBQUFELElBQUEsV0FBQUksSUFBQSxrQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsS0FBQUMsTUFBQSxLQUFBQyxHQUFBLEVBQUFGLElBQUEsS0FBQUMsTUFBQSxNQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLEtBQUFELElBQUEsWUFBQUksSUFBQSxrQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsS0FBQUMsTUFBQSxLQUFBQyxHQUFBLEVBQUFGLElBQUEsS0FBQUMsTUFBQSxNQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLE1BQUFELElBQUEsWUFBQUksSUFBQSxrQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsS0FBQUMsTUFBQSxLQUFBQyxHQUFBLEVBQUFGLElBQUEsS0FBQUMsTUFBQSxNQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLE1BQUFELElBQUEsWUFBQUksSUFBQSxRQUFBQyxJQUFBLEVBQUFOLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLE1BQUFLLEdBQUEsRUFBQVAsS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1BQUEsS0FBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsS0FBQUQsSUFBQSxZQUFBSSxJQUFBLFVBQUFDLElBQUEsRUFBQU4sS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsTUFBQUssR0FBQSxFQUFBUCxLQUFBLEVBQUFDLElBQUEsS0FBQUMsTUFBQSxLQUFBQyxHQUFBLEVBQUFGLElBQUEsS0FBQUMsTUFBQSxLQUFBRCxJQUFBLFlBQUFJLElBQUEsV0FBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsS0FBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsS0FBQUMsTUFBQSxNQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLEtBQUFELElBQUEsWUFBQUksSUFBQSxtQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsS0FBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsS0FBQUMsTUFBQSxNQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLEtBQUFELElBQUEsWUFBQUksSUFBQSxvQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsS0FBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsS0FBQUMsTUFBQSxNQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLEtBQUFELElBQUEsWUFBQUksSUFBQSxnQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsS0FBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsS0FBQUMsTUFBQSxNQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLEtBQUFELElBQUEsWUFBQUksSUFBQSxTQUFBQyxJQUFBLEVBQUFOLEtBQUEsRUFBQUMsSUFBQSxLQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxLQUFBQyxNQUFBLE1BQUFLLEdBQUEsRUFBQVAsS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1BQUEsS0FBQUMsR0FBQSxFQUFBRixJQUFBLEtBQUFDLE1BQUEsS0FBQUQsSUFBQSxPQUFBTyxTQUFBLE9BQUFELEdBQUEsRUFBQVAsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsS0FBQU8sSUFBQSxNQUFBQyxTQUFBLEdBQUFWLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLE1BQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLE1BQUFELElBQUEsVUFBQU0sR0FBQSxFQUFBUCxLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxLQUFBTyxJQUFBLE1BQUFDLFNBQUEsR0FBQVYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsTUFBQUYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsTUFBQUQsSUFBQSxVQUFBTSxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLE1BQUFPLElBQUEsZUFBQUMsU0FBQSxHQUFBVixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxLQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxPQUFBRixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxLQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxPQUFBRCxJQUFBLFVBQUFNLEdBQUEsRUFBQVAsS0FBQSxFQUFBQyxJQUFBLEtBQUFDLE1B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