{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/tag-map.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/tags/tag-map.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,mCAMiB;AACjB,6CAA8D;AAE9D,MAAM,wBAAwB,GAAG;IAC/B,MAAM,EAAE,cAAM,CAAC,qBAAqB;CACrC,CAAC;AAEF,uDAAuD;AACvD,MAAa,MAAM;IAAnB;QACE,kEAAkE;QACjD,mBAAc,GAG3B,IAAI,GAAG,EAAE,CAAC;IA0DhB,CAAC;IAxDC;;;;;OAKG;IACH,GAAG,CAAC,MAAc,EAAE,QAAkB,EAAE,WAAyB;QAC/D,IAAI,CAAC,0BAAa,CAAC,MAAM,CAAC,IAAI,CAAC,4BAAe,CAAC,QAAQ,CAAC;YAAE,OAAO;QACjE,IAAI,WAAW,CAAC;QAChB,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,EAAE;YAC5C,IAAI,GAAG,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI,EAAE;gBAC5B,WAAW,GAAG,GAAG,CAAC;gBAClB,MAAM;aACP;SACF;QACD,IAAI,WAAW;YAAE,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QACzD,MAAM,iBAAiB,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;QAC3E,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC;IACrD,CAAC;IAED;;;OAGG;IACH,MAAM,CAAC,MAAc;QACnB,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACrC,CAAC;IAED,0CAA0C;IAC1C,IAAI,IAAI;QACN,MAAM,mBAAmB,GAA0B,IAAI,GAAG,EAAE,CAAC;QAC7D,KAAK,MAAM,CAAC,MAAM,EAAE,iBAAiB,CAAC,IAAI,IAAI,CAAC,cAAc,EAAE;YAC7D,mBAAmB,CAAC,GAAG,CAAC,MAAM,EAAE,iBAAiB,CAAC,QAAQ,CAAC,CAAC;SAC7D;QACD,OAAO,mBAAmB,CAAC;IAC7B,CAAC;IAED,uCAAuC;IACvC,IAAI,gBAAgB;QAClB,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IAED;;;;OAIG;IACK,oBAAoB,CAC1B,QAAkB,EAClB,WAAyB;QAEzB,IAAI,WAAW,EAAE;YACf,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,CAAC;SAClC;QACD,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,wBAAwB,EAAE,CAAC;IAC7D,CAAC;CACF;AA/DD,wBA+DC","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  TagKey,\n  TagMetadata,\n  TagTtl,\n  TagValue,\n  TagValueWithMetadata,\n} from './types';\nimport { isValidTagKey, isValidTagValue } from './validation';\n\nconst UNLIMITED_PROPAGATION_MD = {\n  tagTtl: TagTtl.UNLIMITED_PROPAGATION,\n};\n\n/** TagMap is maps of TagKey -> TagValueWithMetadata */\nexport class TagMap {\n  // A map mapping TagKey to to its respective TagValueWithMetadata.\n  private readonly registeredTags: Map<\n    TagKey,\n    TagValueWithMetadata\n  > = new Map();\n\n  /**\n   * Adds the key/value pair regardless of whether the key is present.\n   * @param tagKey The TagKey which will be set.\n   * @param tagValue The TagValue to set for the given key.\n   * @param tagMetadata The TagMetadata associated with this Tag.\n   */\n  set(tagKey: TagKey, tagValue: TagValue, tagMetadata?: TagMetadata): void {\n    if (!isValidTagKey(tagKey) || !isValidTagValue(tagValue)) return;\n    let existingKey;\n    for (const key of this.registeredTags.keys()) {\n      if (key.name === tagKey.name) {\n        existingKey = key;\n        break;\n      }\n    }\n    if (existingKey) this.registeredTags.delete(existingKey);\n    const valueWithMetadata = this.getValueWithMetadata(tagValue, tagMetadata);\n    this.registeredTags.set(tagKey, valueWithMetadata);\n  }\n\n  /**\n   * Deletes a tag from the map if the key is in the map.\n   * @param tagKey The TagKey which will be removed.\n   */\n  delete(tagKey: TagKey): void {\n    this.registeredTags.delete(tagKey);\n  }\n\n  /** Gets the tags map without metadata. */\n  get tags() {\n    const tagsWithoutMetadata: Map<TagKey, TagValue> = new Map();\n    for (const [tagKey, valueWithMetadata] of this.registeredTags) {\n      tagsWithoutMetadata.set(tagKey, valueWithMetadata.tagValue);\n    }\n    return tagsWithoutMetadata;\n  }\n\n  /** Gets the tags map with metadata. */\n  get tagsWithMetadata() {\n    return this.registeredTags;\n  }\n\n  /**\n   * Constructs a new TagValueWithMetadata using tagValue and tagMetadata.\n   * For backwards-compatibility this method still produces propagating Tags\n   * (UNLIMITED_PROPAGATION) if tagMetadata is not provided or missing.\n   */\n  private getValueWithMetadata(\n    tagValue: TagValue,\n    tagMetadata?: TagMetadata\n  ): TagValueWithMetadata {\n    if (tagMetadata) {\n      return { tagValue, tagMetadata };\n    }\n    return { tagValue, tagMetadata: UNLIMITED_PROPAGATION_MD };\n  }\n}\n"]}