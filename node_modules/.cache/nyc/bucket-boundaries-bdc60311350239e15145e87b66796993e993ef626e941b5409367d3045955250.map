{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/bucket-boundaries.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/stats/bucket-boundaries.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,0DAA0D;AAI1D,MAAa,gBAAgB;IAM3B,YAAY,UAAoB,EAAE,MAAM,GAAG,aAAa;QACtD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC;QAC9B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,CAAC,CAAC;QACzD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACzD,CAAC;IAED;;OAEG;IACH,aAAa;QACX,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED;;OAEG;IACH,SAAS;QACP,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED;;;;OAIG;IACK,wBAAwB,CAAC,gBAA0B;QACzD,IAAI,QAAQ,GAAG,CAAC,CAAC;QACjB,IAAI,CAAC,gBAAgB;YAAE,OAAO,EAAE,CAAC;QACjC,MAAM,MAAM,GAAG,gBAAgB,CAAC,MAAM,CACpC,CAAC,WAAqB,EAAE,QAAgB,EAAE,KAAa,EAAE,EAAE;YACzD,IAAI,QAAQ,GAAG,CAAC,EAAE;gBAChB,MAAM,YAAY,GAAG,gBAAgB,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;gBACjD,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;gBAC9C,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC5B;iBAAM;gBACL,QAAQ,EAAE,CAAC;aACZ;YACD,OAAO,WAAW,CAAC;QACrB,CAAC,EACD,EAAE,CACH,CAAC;QACF,IAAI,QAAQ,EAAE;YACZ,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,YAAY,QAAQ,+DAA+D,CACpF,CAAC;SACH;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;;OAGG;IACK,eAAe,CAAC,OAAiB;QACvC,IAAI,CAAC,OAAO;YAAE,OAAO,EAAE,CAAC;QACxB,MAAM,YAAY,GAAG,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACnD,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACrB,OAAO,YAAY,CAAC;IACtB,CAAC;IAED;;;;OAIG;IACK,gBAAgB,CAAC,OAAe,EAAE,IAAY;QACpD,IAAI,IAAI,EAAE;YACR,IAAI,OAAO,GAAG,IAAI,EAAE;gBAClB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC;aACpD;YACD,IAAI,OAAO,KAAK,IAAI,EAAE;gBACpB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC;aACpD;SACF;IACH,CAAC;CACF;AAjFD,4CAiFC","sourcesContent":["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as defaultLogger from '../common/console-logger';\nimport * as loggerTypes from '../common/types';\nimport { Bucket } from './types';\n\nexport class BucketBoundaries {\n  readonly buckets: Bucket[];\n  readonly bucketCounts: number[];\n  /** An object to log information to */\n  private logger: loggerTypes.Logger;\n\n  constructor(boundaries: number[], logger = defaultLogger) {\n    this.logger = logger.logger();\n    this.buckets = this.dropNegativeBucketBounds(boundaries);\n    this.bucketCounts = this.getBucketCounts(this.buckets);\n  }\n\n  /**\n   * Gets bucket boundaries\n   */\n  getBoundaries(): Bucket[] {\n    return this.buckets;\n  }\n\n  /**\n   * Gets initial bucket counts\n   */\n  getCounts(): number[] {\n    return this.bucketCounts;\n  }\n\n  /**\n   * Drops negative (BucketBounds) are currently not supported by\n   * any of the backends that OC supports\n   * @param bucketBoundaries a list with the bucket boundaries\n   */\n  private dropNegativeBucketBounds(bucketBoundaries: number[]): Bucket[] {\n    let negative = 0;\n    if (!bucketBoundaries) return [];\n    const result = bucketBoundaries.reduce(\n      (accumulator: number[], boundary: number, index: number) => {\n        if (boundary > 0) {\n          const nextBoundary = bucketBoundaries[index + 1];\n          this.validateBoundary(boundary, nextBoundary);\n          accumulator.push(boundary);\n        } else {\n          negative++;\n        }\n        return accumulator;\n      },\n      []\n    );\n    if (negative) {\n      this.logger.warn(\n        `Dropping ${negative} negative bucket boundaries, the values must be strictly > 0.`\n      );\n    }\n    return result;\n  }\n\n  /**\n   * Gets initial list of bucket counters\n   * @param buckets Bucket boundaries\n   */\n  private getBucketCounts(buckets: Bucket[]): number[] {\n    if (!buckets) return [];\n    const bucketsCount = new Array(buckets.length + 1);\n    bucketsCount.fill(0);\n    return bucketsCount;\n  }\n\n  /**\n   * Checks boundaries order and duplicates\n   * @param current Boundary\n   * @param next Next boundary\n   */\n  private validateBoundary(current: number, next: number) {\n    if (next) {\n      if (current > next) {\n        this.logger.error('Bucket boundaries not sorted.');\n      }\n      if (current === next) {\n        this.logger.error('Bucket boundaries not unique.');\n      }\n    }\n  }\n}\n"]}