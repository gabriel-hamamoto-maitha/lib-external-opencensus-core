{"version":3,"file":"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/time-util.ts","sources":["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/common/time-util.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAIH,MAAM,iBAAiB,GAAG,GAAG,CAAC;AAC9B,MAAM,eAAe,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,MAAM,gBAAgB,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAEzC,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;AAC5B,IAAI,YAAY,GAAqB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC5C,IAAI,gBAAgB,GAAG,CAAC,CAAC;AACzB,IAAI,cAAc,GAAG,CAAC,CAAC;AAEvB,SAAS,kBAAkB;IACzB,wBAAwB,EAAE,CAAC;IAC3B,YAAY,GAAG,MAAM,EAAE,CAAC;IACxB,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IAC3B,gBAAgB,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,iBAAiB,CAAC,CAAC;IAC3D,cAAc,GAAG,CAAC,OAAO,GAAG,iBAAiB,CAAC,GAAG,eAAe,CAAC;AACnE,CAAC;AAED;;;GAGG;AACH,SAAS,wBAAwB;IAC/B,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;AAC1B,CAAC;AAED;;;;GAIG;AACH,SAAgB,6BAA6B;IAC3C,MAAM,CAAC,UAAU,EAAE,WAAW,CAAC,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC;IAEvD,6CAA6C;IAC7C,MAAM,OAAO,GAAG,gBAAgB,GAAG,UAAU,CAAC;IAC9C,MAAM,KAAK,GAAG,cAAc,GAAG,WAAW,CAAC;IAE3C,IAAI,KAAK,IAAI,gBAAgB,EAAE;QAC7B,OAAO,EAAE,OAAO,EAAE,OAAO,GAAG,CAAC,EAAE,KAAK,EAAE,KAAK,GAAG,gBAAgB,EAAE,CAAC;KAClE;IACD,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;AAC5B,CAAC;AAXD,sEAWC;AAED;;;;;GAKG;AACH,SAAgB,mBAAmB,CAAC,UAAkB;IACpD,OAAO;QACL,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,iBAAiB,CAAC;QACnD,KAAK,EAAE,CAAC,UAAU,GAAG,iBAAiB,CAAC,GAAG,eAAe;KAC1D,CAAC;AACJ,CAAC;AALD,kDAKC;AAED,kBAAkB,EAAE,CAAC;AAER,QAAA,SAAS,GAAG;IACvB,kBAAkB;IAClB,wBAAwB;CACzB,CAAC","sourcesContent":["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../metrics/export/types';\n\nconst MILLIS_PER_SECOND = 1e3;\nconst NANOS_PER_MILLI = 1e3 * 1e3;\nconst NANOS_PER_SECOND = 1e3 * 1e3 * 1e3;\n\nlet hrtime = process.hrtime;\nlet hrtimeOrigin: [number, number] = [0, 0];\nlet hrtimeRefSeconds = 0;\nlet hrtimeRefNanos = 0;\n\nfunction setHrtimeReference() {\n  resetHrtimeFunctionCache();\n  hrtimeOrigin = hrtime();\n  const refTime = Date.now();\n  hrtimeRefSeconds = Math.floor(refTime / MILLIS_PER_SECOND);\n  hrtimeRefNanos = (refTime % MILLIS_PER_SECOND) * NANOS_PER_MILLI;\n}\n\n/**\n * This is used to enable tests to mock process.hrtime while still allow us to\n * cache it.\n */\nfunction resetHrtimeFunctionCache() {\n  hrtime = process.hrtime;\n}\n\n/**\n * Gets the current timestamp with seconds and nanoseconds.\n *\n * @returns The Timestamp.\n */\nexport function getTimestampWithProcessHRTime(): Timestamp {\n  const [offsetSecs, offsetNanos] = hrtime(hrtimeOrigin);\n\n  // determine drift in seconds and nanoseconds\n  const seconds = hrtimeRefSeconds + offsetSecs;\n  const nanos = hrtimeRefNanos + offsetNanos;\n\n  if (nanos >= NANOS_PER_SECOND) {\n    return { seconds: seconds + 1, nanos: nanos % NANOS_PER_SECOND };\n  }\n  return { seconds, nanos };\n}\n\n/**\n * Creates a new timestamp from the given milliseconds.\n *\n * @param epochMilli the timestamp represented in milliseconds since epoch.\n * @returns new timestamp with specified fields.\n */\nexport function timestampFromMillis(epochMilli: number): Timestamp {\n  return {\n    seconds: Math.floor(epochMilli / MILLIS_PER_SECOND),\n    nanos: (epochMilli % MILLIS_PER_SECOND) * NANOS_PER_MILLI,\n  };\n}\n\nsetHrtimeReference();\n\nexport const TEST_ONLY = {\n  setHrtimeReference,\n  resetHrtimeFunctionCache,\n};\n"]}