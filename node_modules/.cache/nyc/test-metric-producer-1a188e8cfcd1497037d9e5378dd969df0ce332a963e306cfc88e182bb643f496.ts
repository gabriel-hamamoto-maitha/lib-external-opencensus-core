"use strict";/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_9pfbugm41(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-metric-producer.ts";var hash="350a2263c1fde1c09680b2d576dc7cf7e63a7bdb";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-metric-producer.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:15},end:{line:18,column:32}},"2":{start:{line:19,column:14},end:{line:19,column:31}},"3":{start:{line:20,column:16},end:{line:20,column:54}},"4":{start:{line:21,column:26},end:{line:21,column:65}},"5":{start:{line:22,column:0},end:{line:158,column:3}},"6":{start:{line:23,column:35},end:{line:23,column:98}},"7":{start:{line:25,column:22},end:{line:25,column:39}},"8":{start:{line:26,column:22},end:{line:26,column:39}},"9":{start:{line:27,column:22},end:{line:27,column:39}},"10":{start:{line:28,column:24},end:{line:28,column:42}},"11":{start:{line:29,column:26},end:{line:29,column:134}},"12":{start:{line:30,column:20},end:{line:30,column:64}},"13":{start:{line:31,column:19},end:{line:31,column:37}},"14":{start:{line:32,column:4},end:{line:32,column:52}},"15":{start:{line:33,column:4},end:{line:33,column:52}},"16":{start:{line:34,column:22},end:{line:37,column:5}},"17":{start:{line:38,column:24},end:{line:41,column:5}},"18":{start:{line:42,column:25},end:{line:42,column:62}},"19":{start:{line:43,column:25},end:{line:43,column:63}},"20":{start:{line:45,column:38},end:{line:51,column:5}},"21":{start:{line:52,column:38},end:{line:58,column:5}},"22":{start:{line:59,column:38},end:{line:65,column:5}},"23":{start:{line:66,column:38},end:{line:72,column:5}},"24":{start:{line:73,column:4},end:{line:84,column:7}},"25":{start:{line:74,column:21},end:{line:74,column:124}},"26":{start:{line:75,column:8},end:{line:75,column:45}},"27":{start:{line:76,column:8},end:{line:76,column:53}},"28":{start:{line:77,column:24},end:{line:77,column:59}},"29":{start:{line:78,column:8},end:{line:78,column:46}},"30":{start:{line:79,column:90},end:{line:79,column:97}},"31":{start:{line:80,column:8},end:{line:80,column:83}},"32":{start:{line:81,column:8},end:{line:81,column:56}},"33":{start:{line:82,column:8},end:{line:82,column:78}},"34":{start:{line:83,column:8},end:{line:83,column:69}},"35":{start:{line:85,column:4},end:{line:104,column:7}},"36":{start:{line:86,column:21},end:{line:86,column:126}},"37":{start:{line:87,column:8},end:{line:87,column:45}},"38":{start:{line:88,column:8},end:{line:88,column:53}},"39":{start:{line:89,column:22},end:{line:89,column:57}},"40":{start:{line:90,column:8},end:{line:90,column:46}},"41":{start:{line:91,column:162},end:{line:91,column:169}},"42":{start:{line:92,column:8},end:{line:92,column:83}},"43":{start:{line:93,column:8},end:{line:93,column:56}},"44":{start:{line:94,column:8},end:{line:94,column:78}},"45":{start:{line:95,column:8},end:{line:95,column:69}},"46":{start:{line:96,column:8},end:{line:96,column:83}},"47":{start:{line:97,column:8},end:{line:97,column:56}},"48":{start:{line:98,column:8},end:{line:98,column:78}},"49":{start:{line:99,column:8},end:{line:99,column:68}},"50":{start:{line:101,column:8},end:{line:101,column:53}},"51":{start:{line:102,column:8},end:{line:102,column:54}},"52":{start:{line:103,column:8},end:{line:103,column:76}},"53":{start:{line:105,column:4},end:{line:124,column:7}},"54":{start:{line:106,column:21},end:{line:106,column:131}},"55":{start:{line:107,column:8},end:{line:107,column:45}},"56":{start:{line:108,column:8},end:{line:108,column:53}},"57":{start:{line:109,column:8},end:{line:109,column:53}},"58":{start:{line:110,column:24},end:{line:110,column:59}},"59":{start:{line:111,column:8},end:{line:111,column:46}},"60":{start:{line:112,column:234},end:{line:112,column:241}},"61":{start:{line:113,column:8},end:{line:113,column:83}},"62":{start:{line:114,column:8},end:{line:114,column:56}},"63":{start:{line:115,column:8},end:{line:115,column:56}},"64":{start:{line:116,column:8},end:{line:116,column:78}},"65":{start:{line:117,column:8},end:{line:117,column:69}},"66":{start:{line:118,column:8},end:{line:118,column:83}},"67":{start:{line:119,column:8},end:{line:119,column:56}},"68":{start:{line:120,column:8},end:{line:120,column:83}},"69":{start:{line:121,column:8},end:{line:121,column:56}},"70":{start:{line:122,column:8},end:{line:122,column:78}},"71":{start:{line:123,column:8},end:{line:123,column:70}},"72":{start:{line:125,column:4},end:{line:157,column:7}},"73":{start:{line:126,column:34},end:{line:126,column:59}},"74":{start:{line:127,column:24},end:{line:127,column:33}},"75":{start:{line:128,column:21},end:{line:128,column:142}},"76":{start:{line:129,column:8},end:{line:129,column:45}},"77":{start:{line:130,column:8},end:{line:133,column:9}},"78":{start:{line:131,column:32},end:{line:131,column:65}},"79":{start:{line:132,column:12},end:{line:132,column:56}},"80":{start:{line:134,column:24},end:{line:134,column:59}},"81":{start:{line:135,column:8},end:{line:135,column:46}},"82":{start:{line:136,column:306},end:{line:136,column:313}},"83":{start:{line:137,column:8},end:{line:137,column:83}},"84":{start:{line:138,column:8},end:{line:138,column:56}},"85":{start:{line:139,column:8},end:{line:139,column:78}},"86":{start:{line:140,column:8},end:{line:140,column:69}},"87":{start:{line:141,column:8},end:{line:141,column:83}},"88":{start:{line:142,column:8},end:{line:142,column:56}},"89":{start:{line:143,column:8},end:{line:143,column:83}},"90":{start:{line:144,column:8},end:{line:144,column:56}},"91":{start:{line:145,column:8},end:{line:145,column:78}},"92":{start:{line:146,column:8},end:{line:146,column:70}},"93":{start:{line:147,column:8},end:{line:147,column:83}},"94":{start:{line:148,column:8},end:{line:148,column:56}},"95":{start:{line:149,column:8},end:{line:149,column:78}},"96":{start:{line:150,column:8},end:{line:156,column:11}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:22,column:38},end:{line:22,column:39}},loc:{start:{line:22,column:44},end:{line:158,column:1}},line:22},"1":{name:"(anonymous_1)",decl:{start:{line:73,column:31},end:{line:73,column:32}},loc:{start:{line:73,column:37},end:{line:84,column:5}},line:73},"2":{name:"(anonymous_2)",decl:{start:{line:85,column:33},end:{line:85,column:34}},loc:{start:{line:85,column:39},end:{line:104,column:5}},line:85},"3":{name:"(anonymous_3)",decl:{start:{line:105,column:37},end:{line:105,column:38}},loc:{start:{line:105,column:43},end:{line:124,column:5}},line:105},"4":{name:"(anonymous_4)",decl:{start:{line:125,column:40},end:{line:125,column:41}},loc:{start:{line:125,column:46},end:{line:157,column:5}},line:125}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-metric-producer.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/test/test-metric-producer.ts"],names:[],mappings:"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",sourcesContent:["/**\n * Copyright 2018, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as assert from 'assert';\n\nimport {\n  AggregationType,\n  globalStats,\n  Measurement,\n  MeasureUnit,\n  TagMap,\n  View,\n} from '../src';\nimport {\n  LabelKey,\n  LabelValue,\n  MetricDescriptorType,\n} from '../src/metrics/export/types';\nimport { MetricProducerForStats } from '../src/stats/metric-producer';\n\ndescribe('Metric producer for stats', () => {\n  const metricProducerForStats = new MetricProducerForStats(globalStats);\n\n  // constants for view name\n  const viewName1 = 'test/view/name1';\n  const viewName2 = 'test/view/name2';\n  const viewName3 = 'test/view/name2';\n  const description = 'test description';\n\n  const measureDouble = globalStats.createMeasureDouble(\n    'opencensus.io/test/double',\n    MeasureUnit.UNIT,\n    'Measure Double'\n  );\n  const tagKeys = [{ name: 'testKey1' }, { name: 'testKey2' }];\n  const tagMap = new TagMap();\n  tagMap.set(tagKeys[0], { value: 'testValue1' });\n  tagMap.set(tagKeys[1], { value: 'testValue2' });\n  const labelKeys: LabelKey[] = [\n    { key: 'testKey1', description: '' },\n    { key: 'testKey2', description: '' },\n  ];\n  const labelValues: LabelValue[] = [\n    { value: 'testValue1' },\n    { value: 'testValue2' },\n  ];\n  const measurement1: Measurement = { measure: measureDouble, value: 25 };\n  const measurement2: Measurement = { measure: measureDouble, value: 300 };\n\n  // expected constants\n  const expectedMetricDescriptor1 = {\n    name: viewName1,\n    description,\n    labelKeys,\n    unit: MeasureUnit.UNIT,\n    type: MetricDescriptorType.CUMULATIVE_DOUBLE,\n  };\n  const expectedMetricDescriptor2 = {\n    name: viewName2,\n    description,\n    labelKeys,\n    unit: MeasureUnit.UNIT,\n    type: MetricDescriptorType.CUMULATIVE_INT64,\n  };\n  const expectedMetricDescriptor3 = {\n    name: viewName3,\n    description,\n    labelKeys,\n    unit: MeasureUnit.UNIT,\n    type: MetricDescriptorType.GAUGE_DOUBLE,\n  };\n  const expectedMetricDescriptor4 = {\n    name: viewName3,\n    description,\n    labelKeys,\n    unit: MeasureUnit.UNIT,\n    type: MetricDescriptorType.CUMULATIVE_DISTRIBUTION,\n  };\n\n  it('should add sum stats', () => {\n    const view: View = globalStats.createView(\n      viewName1,\n      measureDouble,\n      AggregationType.SUM,\n      tagKeys,\n      description\n    );\n    globalStats.registerView(view);\n    view.recordMeasurement(measurement1, tagMap);\n\n    const metrics = metricProducerForStats.getMetrics();\n\n    assert.strictEqual(metrics.length, 1);\n    const [\n      { descriptor: actualMetricDescriptor1, timeseries: actualTimeSeries1 },\n    ] = metrics;\n    assert.deepStrictEqual(actualMetricDescriptor1, expectedMetricDescriptor1);\n    assert.strictEqual(actualTimeSeries1.length, 1);\n    assert.deepStrictEqual(actualTimeSeries1[0].labelValues, labelValues);\n    assert.strictEqual(actualTimeSeries1[0].points[0].value, 25);\n  });\n\n  it('should add count stats', () => {\n    const view: View = globalStats.createView(\n      viewName2,\n      measureDouble,\n      AggregationType.COUNT,\n      tagKeys,\n      description\n    );\n    globalStats.registerView(view);\n    view.recordMeasurement(measurement1, tagMap);\n\n    let metrics = metricProducerForStats.getMetrics();\n\n    assert.strictEqual(metrics.length, 2);\n    const [\n      { descriptor: actualMetricDescriptor1, timeseries: actualTimeSeries1 },\n      { descriptor: actualMetricDescriptor2, timeseries: actualTimeSeries2 },\n    ] = metrics;\n    assert.deepStrictEqual(actualMetricDescriptor1, expectedMetricDescriptor1);\n    assert.strictEqual(actualTimeSeries1.length, 1);\n    assert.deepStrictEqual(actualTimeSeries1[0].labelValues, labelValues);\n    assert.strictEqual(actualTimeSeries1[0].points[0].value, 25);\n    assert.deepStrictEqual(actualMetricDescriptor2, expectedMetricDescriptor2);\n    assert.strictEqual(actualTimeSeries2.length, 1);\n    assert.deepStrictEqual(actualTimeSeries2[0].labelValues, labelValues);\n    assert.strictEqual(actualTimeSeries2[0].points[0].value, 1);\n\n    // update count view\n    view.recordMeasurement(measurement2, tagMap);\n    metrics = metricProducerForStats.getMetrics();\n    assert.deepStrictEqual(metrics[1].timeseries[0].points[0].value, 2);\n  });\n\n  it('should add lastValue stats', () => {\n    const view: View = globalStats.createView(\n      viewName3,\n      measureDouble,\n      AggregationType.LAST_VALUE,\n      tagKeys,\n      description\n    );\n    globalStats.registerView(view);\n    view.recordMeasurement(measurement1, tagMap);\n    view.recordMeasurement(measurement2, tagMap);\n\n    const metrics = metricProducerForStats.getMetrics();\n\n    assert.strictEqual(metrics.length, 3);\n    const [\n      { descriptor: actualMetricDescriptor1, timeseries: actualTimeSeries1 },\n      { descriptor: actualMetricDescriptor2, timeseries: actualTimeSeries2 },\n      { descriptor: actualMetricDescriptor3, timeseries: actualTimeSeries3 },\n    ] = metrics;\n    assert.deepStrictEqual(actualMetricDescriptor1, expectedMetricDescriptor1);\n    assert.strictEqual(actualTimeSeries1.length, 1);\n    assert.strictEqual(actualTimeSeries1.length, 1);\n    assert.deepStrictEqual(actualTimeSeries1[0].labelValues, labelValues);\n    assert.strictEqual(actualTimeSeries1[0].points[0].value, 25);\n    assert.deepStrictEqual(actualMetricDescriptor2, expectedMetricDescriptor2);\n    assert.strictEqual(actualTimeSeries2.length, 1);\n    assert.deepStrictEqual(actualMetricDescriptor3, expectedMetricDescriptor3);\n    assert.strictEqual(actualTimeSeries3.length, 1);\n    assert.deepStrictEqual(actualTimeSeries3[0].labelValues, labelValues);\n    assert.strictEqual(actualTimeSeries3[0].points[0].value, 300);\n  });\n\n  it('should add distribution stats', () => {\n    const measurementValues = [1.1, 2.3, 3.2, 4.3, 5.2];\n    const buckets = [2, 4, 6];\n    const view: View = globalStats.createView(\n      viewName3,\n      measureDouble,\n      AggregationType.DISTRIBUTION,\n      tagKeys,\n      description,\n      buckets\n    );\n    globalStats.registerView(view);\n    for (const value of measurementValues) {\n      const measurement: Measurement = { measure: measureDouble, value };\n      view.recordMeasurement(measurement, tagMap);\n    }\n\n    const metrics = metricProducerForStats.getMetrics();\n\n    assert.strictEqual(metrics.length, 4);\n    const [\n      { descriptor: actualMetricDescriptor1, timeseries: actualTimeSeries1 },\n      { descriptor: actualMetricDescriptor2, timeseries: actualTimeSeries2 },\n      { descriptor: actualMetricDescriptor3, timeseries: actualTimeSeries3 },\n      { descriptor: actualMetricDescriptor4, timeseries: actualTimeSeries4 },\n    ] = metrics;\n    assert.deepStrictEqual(actualMetricDescriptor1, expectedMetricDescriptor1);\n    assert.strictEqual(actualTimeSeries1.length, 1);\n    assert.deepStrictEqual(actualTimeSeries1[0].labelValues, labelValues);\n    assert.strictEqual(actualTimeSeries1[0].points[0].value, 25);\n    assert.deepStrictEqual(actualMetricDescriptor2, expectedMetricDescriptor2);\n    assert.strictEqual(actualTimeSeries2.length, 1);\n    assert.deepStrictEqual(actualMetricDescriptor3, expectedMetricDescriptor3);\n    assert.strictEqual(actualTimeSeries3.length, 1);\n    assert.deepStrictEqual(actualTimeSeries3[0].labelValues, labelValues);\n    assert.strictEqual(actualTimeSeries3[0].points[0].value, 300);\n    assert.deepStrictEqual(actualMetricDescriptor4, expectedMetricDescriptor4);\n    assert.strictEqual(actualTimeSeries4.length, 1);\n    assert.deepStrictEqual(actualTimeSeries4[0].labelValues, labelValues);\n    assert.deepStrictEqual(actualTimeSeries4[0].points[0].value, {\n      bucketOptions: { explicit: { bounds: [2, 4, 6] } },\n      buckets: [{ count: 1 }, { count: 2 }, { count: 2 }, { count: 0 }],\n      count: 5,\n      sum: 16.099999999999998,\n      sumOfSquaredDeviation: 10.427999999999997,\n    });\n  });\n});\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"350a2263c1fde1c09680b2d576dc7cf7e63a7bdb"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_9pfbugm41=function(){return actualCoverage;};}return actualCoverage;}cov_9pfbugm41();cov_9pfbugm41().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const assert=(cov_9pfbugm41().s[1]++,require("assert"));const src_1=(cov_9pfbugm41().s[2]++,require("../src"));const types_1=(cov_9pfbugm41().s[3]++,require("../src/metrics/export/types"));const metric_producer_1=(cov_9pfbugm41().s[4]++,require("../src/stats/metric-producer"));cov_9pfbugm41().s[5]++;describe('Metric producer for stats',()=>{cov_9pfbugm41().f[0]++;const metricProducerForStats=(cov_9pfbugm41().s[6]++,new metric_producer_1.MetricProducerForStats(src_1.globalStats));// constants for view name
const viewName1=(cov_9pfbugm41().s[7]++,'test/view/name1');const viewName2=(cov_9pfbugm41().s[8]++,'test/view/name2');const viewName3=(cov_9pfbugm41().s[9]++,'test/view/name2');const description=(cov_9pfbugm41().s[10]++,'test description');const measureDouble=(cov_9pfbugm41().s[11]++,src_1.globalStats.createMeasureDouble('opencensus.io/test/double',src_1.MeasureUnit.UNIT,'Measure Double'));const tagKeys=(cov_9pfbugm41().s[12]++,[{name:'testKey1'},{name:'testKey2'}]);const tagMap=(cov_9pfbugm41().s[13]++,new src_1.TagMap());cov_9pfbugm41().s[14]++;tagMap.set(tagKeys[0],{value:'testValue1'});cov_9pfbugm41().s[15]++;tagMap.set(tagKeys[1],{value:'testValue2'});const labelKeys=(cov_9pfbugm41().s[16]++,[{key:'testKey1',description:''},{key:'testKey2',description:''}]);const labelValues=(cov_9pfbugm41().s[17]++,[{value:'testValue1'},{value:'testValue2'}]);const measurement1=(cov_9pfbugm41().s[18]++,{measure:measureDouble,value:25});const measurement2=(cov_9pfbugm41().s[19]++,{measure:measureDouble,value:300});// expected constants
const expectedMetricDescriptor1=(cov_9pfbugm41().s[20]++,{name:viewName1,description,labelKeys,unit:src_1.MeasureUnit.UNIT,type:types_1.MetricDescriptorType.CUMULATIVE_DOUBLE});const expectedMetricDescriptor2=(cov_9pfbugm41().s[21]++,{name:viewName2,description,labelKeys,unit:src_1.MeasureUnit.UNIT,type:types_1.MetricDescriptorType.CUMULATIVE_INT64});const expectedMetricDescriptor3=(cov_9pfbugm41().s[22]++,{name:viewName3,description,labelKeys,unit:src_1.MeasureUnit.UNIT,type:types_1.MetricDescriptorType.GAUGE_DOUBLE});const expectedMetricDescriptor4=(cov_9pfbugm41().s[23]++,{name:viewName3,description,labelKeys,unit:src_1.MeasureUnit.UNIT,type:types_1.MetricDescriptorType.CUMULATIVE_DISTRIBUTION});cov_9pfbugm41().s[24]++;it('should add sum stats',()=>{cov_9pfbugm41().f[1]++;const view=(cov_9pfbugm41().s[25]++,src_1.globalStats.createView(viewName1,measureDouble,src_1.AggregationType.SUM,tagKeys,description));cov_9pfbugm41().s[26]++;src_1.globalStats.registerView(view);cov_9pfbugm41().s[27]++;view.recordMeasurement(measurement1,tagMap);const metrics=(cov_9pfbugm41().s[28]++,metricProducerForStats.getMetrics());cov_9pfbugm41().s[29]++;assert.strictEqual(metrics.length,1);const[{descriptor:actualMetricDescriptor1,timeseries:actualTimeSeries1}]=(cov_9pfbugm41().s[30]++,metrics);cov_9pfbugm41().s[31]++;assert.deepStrictEqual(actualMetricDescriptor1,expectedMetricDescriptor1);cov_9pfbugm41().s[32]++;assert.strictEqual(actualTimeSeries1.length,1);cov_9pfbugm41().s[33]++;assert.deepStrictEqual(actualTimeSeries1[0].labelValues,labelValues);cov_9pfbugm41().s[34]++;assert.strictEqual(actualTimeSeries1[0].points[0].value,25);});cov_9pfbugm41().s[35]++;it('should add count stats',()=>{cov_9pfbugm41().f[2]++;const view=(cov_9pfbugm41().s[36]++,src_1.globalStats.createView(viewName2,measureDouble,src_1.AggregationType.COUNT,tagKeys,description));cov_9pfbugm41().s[37]++;src_1.globalStats.registerView(view);cov_9pfbugm41().s[38]++;view.recordMeasurement(measurement1,tagMap);let metrics=(cov_9pfbugm41().s[39]++,metricProducerForStats.getMetrics());cov_9pfbugm41().s[40]++;assert.strictEqual(metrics.length,2);const[{descriptor:actualMetricDescriptor1,timeseries:actualTimeSeries1},{descriptor:actualMetricDescriptor2,timeseries:actualTimeSeries2}]=(cov_9pfbugm41().s[41]++,metrics);cov_9pfbugm41().s[42]++;assert.deepStrictEqual(actualMetricDescriptor1,expectedMetricDescriptor1);cov_9pfbugm41().s[43]++;assert.strictEqual(actualTimeSeries1.length,1);cov_9pfbugm41().s[44]++;assert.deepStrictEqual(actualTimeSeries1[0].labelValues,labelValues);cov_9pfbugm41().s[45]++;assert.strictEqual(actualTimeSeries1[0].points[0].value,25);cov_9pfbugm41().s[46]++;assert.deepStrictEqual(actualMetricDescriptor2,expectedMetricDescriptor2);cov_9pfbugm41().s[47]++;assert.strictEqual(actualTimeSeries2.length,1);cov_9pfbugm41().s[48]++;assert.deepStrictEqual(actualTimeSeries2[0].labelValues,labelValues);cov_9pfbugm41().s[49]++;assert.strictEqual(actualTimeSeries2[0].points[0].value,1);// update count view
cov_9pfbugm41().s[50]++;view.recordMeasurement(measurement2,tagMap);cov_9pfbugm41().s[51]++;metrics=metricProducerForStats.getMetrics();cov_9pfbugm41().s[52]++;assert.deepStrictEqual(metrics[1].timeseries[0].points[0].value,2);});cov_9pfbugm41().s[53]++;it('should add lastValue stats',()=>{cov_9pfbugm41().f[3]++;const view=(cov_9pfbugm41().s[54]++,src_1.globalStats.createView(viewName3,measureDouble,src_1.AggregationType.LAST_VALUE,tagKeys,description));cov_9pfbugm41().s[55]++;src_1.globalStats.registerView(view);cov_9pfbugm41().s[56]++;view.recordMeasurement(measurement1,tagMap);cov_9pfbugm41().s[57]++;view.recordMeasurement(measurement2,tagMap);const metrics=(cov_9pfbugm41().s[58]++,metricProducerForStats.getMetrics());cov_9pfbugm41().s[59]++;assert.strictEqual(metrics.length,3);const[{descriptor:actualMetricDescriptor1,timeseries:actualTimeSeries1},{descriptor:actualMetricDescriptor2,timeseries:actualTimeSeries2},{descriptor:actualMetricDescriptor3,timeseries:actualTimeSeries3}]=(cov_9pfbugm41().s[60]++,metrics);cov_9pfbugm41().s[61]++;assert.deepStrictEqual(actualMetricDescriptor1,expectedMetricDescriptor1);cov_9pfbugm41().s[62]++;assert.strictEqual(actualTimeSeries1.length,1);cov_9pfbugm41().s[63]++;assert.strictEqual(actualTimeSeries1.length,1);cov_9pfbugm41().s[64]++;assert.deepStrictEqual(actualTimeSeries1[0].labelValues,labelValues);cov_9pfbugm41().s[65]++;assert.strictEqual(actualTimeSeries1[0].points[0].value,25);cov_9pfbugm41().s[66]++;assert.deepStrictEqual(actualMetricDescriptor2,expectedMetricDescriptor2);cov_9pfbugm41().s[67]++;assert.strictEqual(actualTimeSeries2.length,1);cov_9pfbugm41().s[68]++;assert.deepStrictEqual(actualMetricDescriptor3,expectedMetricDescriptor3);cov_9pfbugm41().s[69]++;assert.strictEqual(actualTimeSeries3.length,1);cov_9pfbugm41().s[70]++;assert.deepStrictEqual(actualTimeSeries3[0].labelValues,labelValues);cov_9pfbugm41().s[71]++;assert.strictEqual(actualTimeSeries3[0].points[0].value,300);});cov_9pfbugm41().s[72]++;it('should add distribution stats',()=>{cov_9pfbugm41().f[4]++;const measurementValues=(cov_9pfbugm41().s[73]++,[1.1,2.3,3.2,4.3,5.2]);const buckets=(cov_9pfbugm41().s[74]++,[2,4,6]);const view=(cov_9pfbugm41().s[75]++,src_1.globalStats.createView(viewName3,measureDouble,src_1.AggregationType.DISTRIBUTION,tagKeys,description,buckets));cov_9pfbugm41().s[76]++;src_1.globalStats.registerView(view);cov_9pfbugm41().s[77]++;for(const value of measurementValues){const measurement=(cov_9pfbugm41().s[78]++,{measure:measureDouble,value});cov_9pfbugm41().s[79]++;view.recordMeasurement(measurement,tagMap);}const metrics=(cov_9pfbugm41().s[80]++,metricProducerForStats.getMetrics());cov_9pfbugm41().s[81]++;assert.strictEqual(metrics.length,4);const[{descriptor:actualMetricDescriptor1,timeseries:actualTimeSeries1},{descriptor:actualMetricDescriptor2,timeseries:actualTimeSeries2},{descriptor:actualMetricDescriptor3,timeseries:actualTimeSeries3},{descriptor:actualMetricDescriptor4,timeseries:actualTimeSeries4}]=(cov_9pfbugm41().s[82]++,metrics);cov_9pfbugm41().s[83]++;assert.deepStrictEqual(actualMetricDescriptor1,expectedMetricDescriptor1);cov_9pfbugm41().s[84]++;assert.strictEqual(actualTimeSeries1.length,1);cov_9pfbugm41().s[85]++;assert.deepStrictEqual(actualTimeSeries1[0].labelValues,labelValues);cov_9pfbugm41().s[86]++;assert.strictEqual(actualTimeSeries1[0].points[0].value,25);cov_9pfbugm41().s[87]++;assert.deepStrictEqual(actualMetricDescriptor2,expectedMetricDescriptor2);cov_9pfbugm41().s[88]++;assert.strictEqual(actualTimeSeries2.length,1);cov_9pfbugm41().s[89]++;assert.deepStrictEqual(actualMetricDescriptor3,expectedMetricDescriptor3);cov_9pfbugm41().s[90]++;assert.strictEqual(actualTimeSeries3.length,1);cov_9pfbugm41().s[91]++;assert.deepStrictEqual(actualTimeSeries3[0].labelValues,labelValues);cov_9pfbugm41().s[92]++;assert.strictEqual(actualTimeSeries3[0].points[0].value,300);cov_9pfbugm41().s[93]++;assert.deepStrictEqual(actualMetricDescriptor4,expectedMetricDescriptor4);cov_9pfbugm41().s[94]++;assert.strictEqual(actualTimeSeries4.length,1);cov_9pfbugm41().s[95]++;assert.deepStrictEqual(actualTimeSeries4[0].labelValues,labelValues);cov_9pfbugm41().s[96]++;assert.deepStrictEqual(actualTimeSeries4[0].points[0].value,{bucketOptions:{explicit:{bounds:[2,4,6]}},buckets:[{count:1},{count:2},{count:2},{count:0}],count:5,sum:16.099999999999998,sumOfSquaredDeviation:10.427999999999997});});});//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,