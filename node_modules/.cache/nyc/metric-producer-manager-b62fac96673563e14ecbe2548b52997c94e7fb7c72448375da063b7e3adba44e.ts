"use strict";/**
 * Copyright 2019, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function cov_1g9z5jevo8(){var path="/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/export/metric-producer-manager.ts";var hash="43f04843e2556726c4bc977376262f430a0c58ad";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/export/metric-producer-manager.ts",statementMap:{"0":{start:{line:17,column:0},end:{line:17,column:62}},"1":{start:{line:18,column:0},end:{line:18,column:47}},"2":{start:{line:19,column:22},end:{line:19,column:57}},"3":{start:{line:26,column:8},end:{line:26,column:41}},"4":{start:{line:30,column:8},end:{line:30,column:79}},"5":{start:{line:38,column:8},end:{line:38,column:72}},"6":{start:{line:39,column:8},end:{line:41,column:9}},"7":{start:{line:40,column:12},end:{line:40,column:53}},"8":{start:{line:49,column:8},end:{line:49,column:72}},"9":{start:{line:50,column:8},end:{line:50,column:52}},"10":{start:{line:56,column:8},end:{line:56,column:37}},"11":{start:{line:67,column:8},end:{line:67,column:36}},"12":{start:{line:70,column:0},end:{line:70,column:75}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:25,column:4},end:{line:25,column:5}},loc:{start:{line:25,column:18},end:{line:27,column:5}},line:25},"1":{name:"(anonymous_1)",decl:{start:{line:29,column:4},end:{line:29,column:5}},loc:{start:{line:29,column:26},end:{line:31,column:5}},line:29},"2":{name:"(anonymous_2)",decl:{start:{line:37,column:4},end:{line:37,column:5}},loc:{start:{line:37,column:24},end:{line:42,column:5}},line:37},"3":{name:"(anonymous_3)",decl:{start:{line:48,column:4},end:{line:48,column:5}},loc:{start:{line:48,column:27},end:{line:51,column:5}},line:48},"4":{name:"(anonymous_4)",decl:{start:{line:55,column:4},end:{line:55,column:5}},loc:{start:{line:55,column:16},end:{line:57,column:5}},line:55},"5":{name:"(anonymous_5)",decl:{start:{line:66,column:4},end:{line:66,column:5}},loc:{start:{line:66,column:27},end:{line:68,column:5}},line:66}},branchMap:{"0":{loc:{start:{line:30,column:15},end:{line:30,column:78}},type:"binary-expr",locations:[{start:{line:30,column:15},end:{line:30,column:37}},{start:{line:30,column:42},end:{line:30,column:77}}],line:30},"1":{loc:{start:{line:39,column:8},end:{line:41,column:9}},type:"if",locations:[{start:{line:39,column:8},end:{line:41,column:9}},{start:{line:39,column:8},end:{line:41,column:9}}],line:39}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},b:{"0":[0,0],"1":[0,0]},inputSourceMap:{version:3,file:"/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/export/metric-producer-manager.ts",sources:["/Users/usermaitha/trademaster/libs/lib-external-opencensus-node/src/metrics/export/metric-producer-manager.ts"],names:[],mappings:";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,0DAA2D;AAG3D;;;GAGG;AACH,MAAM,yBAAyB;IAA/B;QAIU,oBAAe,GAAwB,IAAI,GAAG,EAAkB,CAAC;IA+C3E,CAAC;IA7CC,yBAAyB;IACzB,MAAM,KAAK,QAAQ;QACjB,OAAO,IAAI,CAAC,iBAAiB,IAAI,CAAC,IAAI,CAAC,iBAAiB,GAAG,IAAI,IAAI,EAAE,CAAC,CAAC;IACzE,CAAC;IAED;;;;OAIG;IACH,GAAG,CAAC,cAA8B;QAChC,6BAAe,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC;QAClD,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE;YAC7C,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;SAC1C;IACH,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,cAA8B;QACnC,6BAAe,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC;QAClD,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;IAC9C,CAAC;IAED;;OAEG;IACH,SAAS;QACP,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;IAC/B,CAAC;IAED;;;;;;;OAOG;IACH,oBAAoB;QAClB,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;CACF;AAEY,QAAA,6BAA6B,GAAG,yBAAyB,CAAC,QAAQ,CAAC",sourcesContent:["/**\n * Copyright 2019, OpenCensus Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { validateNotNull } from '../../common/validations';\nimport { MetricProducer, MetricProducerManager } from './types';\n\n/**\n * Keeps a set of MetricProducer that is used by exporters to determine the\n * metrics that need to be exported.\n */\nclass BaseMetricProducerManager implements MetricProducerManager {\n  /** Singleton instance */\n  private static singletonInstance: MetricProducerManager;\n\n  private metricProducers: Set<MetricProducer> = new Set<MetricProducer>();\n\n  /** Gets the instance. */\n  static get instance(): MetricProducerManager {\n    return this.singletonInstance || (this.singletonInstance = new this());\n  }\n\n  /**\n   * Adds the MetricProducer to the manager if it is not already present.\n   *\n   * @param metricProducer The MetricProducer to be added to the manager.\n   */\n  add(metricProducer: MetricProducer): void {\n    validateNotNull(metricProducer, 'metricProducer');\n    if (!this.metricProducers.has(metricProducer)) {\n      this.metricProducers.add(metricProducer);\n    }\n  }\n\n  /**\n   * Removes the MetricProducer to the manager if it is present.\n   *\n   * @param metricProducer The MetricProducer to be removed from the manager.\n   */\n  remove(metricProducer: MetricProducer): void {\n    validateNotNull(metricProducer, 'metricProducer');\n    this.metricProducers.delete(metricProducer);\n  }\n\n  /**\n   * Clears all MetricProducers.\n   */\n  removeAll(): void {\n    this.metricProducers.clear();\n  }\n\n  /**\n   * Returns all registered MetricProducers that should be exported.\n   *\n   * This method should be used by any metrics exporter that automatically\n   * exports data for MetricProducer registered with the MetricProducerManager.\n   *\n   * @return {Set<MetricProducer>} The Set of MetricProducers.\n   */\n  getAllMetricProducer(): Set<MetricProducer> {\n    return this.metricProducers;\n  }\n}\n\nexport const metricProducerManagerInstance = BaseMetricProducerManager.instance;\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"43f04843e2556726c4bc977376262f430a0c58ad"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1g9z5jevo8=function(){return actualCoverage;};}return actualCoverage;}cov_1g9z5jevo8();cov_1g9z5jevo8().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_1g9z5jevo8().s[1]++;exports.metricProducerManagerInstance=void 0;const validations_1=(cov_1g9z5jevo8().s[2]++,require("../../common/validations"));/**
 * Keeps a set of MetricProducer that is used by exporters to determine the
 * metrics that need to be exported.
 */class BaseMetricProducerManager{constructor(){cov_1g9z5jevo8().f[0]++;cov_1g9z5jevo8().s[3]++;this.metricProducers=new Set();}/** Gets the instance. */static get instance(){cov_1g9z5jevo8().f[1]++;cov_1g9z5jevo8().s[4]++;return(cov_1g9z5jevo8().b[0][0]++,this.singletonInstance)||(cov_1g9z5jevo8().b[0][1]++,this.singletonInstance=new this());}/**
     * Adds the MetricProducer to the manager if it is not already present.
     *
     * @param metricProducer The MetricProducer to be added to the manager.
     */add(metricProducer){cov_1g9z5jevo8().f[2]++;cov_1g9z5jevo8().s[5]++;validations_1.validateNotNull(metricProducer,'metricProducer');cov_1g9z5jevo8().s[6]++;if(!this.metricProducers.has(metricProducer)){cov_1g9z5jevo8().b[1][0]++;cov_1g9z5jevo8().s[7]++;this.metricProducers.add(metricProducer);}else{cov_1g9z5jevo8().b[1][1]++;}}/**
     * Removes the MetricProducer to the manager if it is present.
     *
     * @param metricProducer The MetricProducer to be removed from the manager.
     */remove(metricProducer){cov_1g9z5jevo8().f[3]++;cov_1g9z5jevo8().s[8]++;validations_1.validateNotNull(metricProducer,'metricProducer');cov_1g9z5jevo8().s[9]++;this.metricProducers.delete(metricProducer);}/**
     * Clears all MetricProducers.
     */removeAll(){cov_1g9z5jevo8().f[4]++;cov_1g9z5jevo8().s[10]++;this.metricProducers.clear();}/**
     * Returns all registered MetricProducers that should be exported.
     *
     * This method should be used by any metrics exporter that automatically
     * exports data for MetricProducer registered with the MetricProducerManager.
     *
     * @return {Set<MetricProducer>} The Set of MetricProducers.
     */getAllMetricProducer(){cov_1g9z5jevo8().f[5]++;cov_1g9z5jevo8().s[11]++;return this.metricProducers;}}cov_1g9z5jevo8().s[12]++;exports.metricProducerManagerInstance=BaseMetricProducerManager.instance;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3VzZXJtYWl0aGEvdHJhZGVtYXN0ZXIvbGlicy9saWItZXh0ZXJuYWwtb3BlbmNlbnN1cy1ub2RlL3NyYy9tZXRyaWNzL2V4cG9ydC9tZXRyaWMtcHJvZHVjZXItbWFuYWdlci50cyIsInNvdXJjZXMiOlsiL1VzZXJzL3VzZXJtYWl0aGEvdHJhZGVtYXN0ZXIvbGlicy9saWItZXh0ZXJuYWwtb3BlbmNlbnN1cy1ub2RlL3NyYy9tZXRyaWNzL2V4cG9ydC9tZXRyaWMtcHJvZHVjZXItbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7O0dBY0c7OztBQUVILDBEQUEyRDtBQUczRDs7O0dBR0c7QUFDSCxNQUFNLHlCQUF5QjtJQUEvQjtRQUlVLG9CQUFlLEdBQXdCLElBQUksR0FBRyxFQUFrQixDQUFDO0lBK0MzRSxDQUFDO0lBN0NDLHlCQUF5QjtJQUN6QixNQUFNLEtBQUssUUFBUTtRQUNqQixPQUFPLElBQUksQ0FBQyxpQkFBaUIsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUM7SUFDekUsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxHQUFHLENBQUMsY0FBOEI7UUFDaEMsNkJBQWUsQ0FBQyxjQUFjLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEVBQUU7WUFDN0MsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7U0FDMUM7SUFDSCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxjQUE4QjtRQUNuQyw2QkFBZSxDQUFDLGNBQWMsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRDs7T0FFRztJQUNILFNBQVM7UUFDUCxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQy9CLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0gsb0JBQW9CO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUM5QixDQUFDO0NBQ0Y7QUFFWSxRQUFBLDZCQUE2QixHQUFHLHlCQUF5QixDQUFDLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTksIE9wZW5DZW5zdXMgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgdmFsaWRhdGVOb3ROdWxsIH0gZnJvbSAnLi4vLi4vY29tbW9uL3ZhbGlkYXRpb25zJztcbmltcG9ydCB7IE1ldHJpY1Byb2R1Y2VyLCBNZXRyaWNQcm9kdWNlck1hbmFnZXIgfSBmcm9tICcuL3R5cGVzJztcblxuLyoqXG4gKiBLZWVwcyBhIHNldCBvZiBNZXRyaWNQcm9kdWNlciB0aGF0IGlzIHVzZWQgYnkgZXhwb3J0ZXJzIHRvIGRldGVybWluZSB0aGVcbiAqIG1ldHJpY3MgdGhhdCBuZWVkIHRvIGJlIGV4cG9ydGVkLlxuICovXG5jbGFzcyBCYXNlTWV0cmljUHJvZHVjZXJNYW5hZ2VyIGltcGxlbWVudHMgTWV0cmljUHJvZHVjZXJNYW5hZ2VyIHtcbiAgLyoqIFNpbmdsZXRvbiBpbnN0YW5jZSAqL1xuICBwcml2YXRlIHN0YXRpYyBzaW5nbGV0b25JbnN0YW5jZTogTWV0cmljUHJvZHVjZXJNYW5hZ2VyO1xuXG4gIHByaXZhdGUgbWV0cmljUHJvZHVjZXJzOiBTZXQ8TWV0cmljUHJvZHVjZXI+ID0gbmV3IFNldDxNZXRyaWNQcm9kdWNlcj4oKTtcblxuICAvKiogR2V0cyB0aGUgaW5zdGFuY2UuICovXG4gIHN0YXRpYyBnZXQgaW5zdGFuY2UoKTogTWV0cmljUHJvZHVjZXJNYW5hZ2VyIHtcbiAgICByZXR1cm4gdGhpcy5zaW5nbGV0b25JbnN0YW5jZSB8fCAodGhpcy5zaW5nbGV0b25JbnN0YW5jZSA9IG5ldyB0aGlzKCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgdGhlIE1ldHJpY1Byb2R1Y2VyIHRvIHRoZSBtYW5hZ2VyIGlmIGl0IGlzIG5vdCBhbHJlYWR5IHByZXNlbnQuXG4gICAqXG4gICAqIEBwYXJhbSBtZXRyaWNQcm9kdWNlciBUaGUgTWV0cmljUHJvZHVjZXIgdG8gYmUgYWRkZWQgdG8gdGhlIG1hbmFnZXIuXG4gICAqL1xuICBhZGQobWV0cmljUHJvZHVjZXI6IE1ldHJpY1Byb2R1Y2VyKTogdm9pZCB7XG4gICAgdmFsaWRhdGVOb3ROdWxsKG1ldHJpY1Byb2R1Y2VyLCAnbWV0cmljUHJvZHVjZXInKTtcbiAgICBpZiAoIXRoaXMubWV0cmljUHJvZHVjZXJzLmhhcyhtZXRyaWNQcm9kdWNlcikpIHtcbiAgICAgIHRoaXMubWV0cmljUHJvZHVjZXJzLmFkZChtZXRyaWNQcm9kdWNlcik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgdGhlIE1ldHJpY1Byb2R1Y2VyIHRvIHRoZSBtYW5hZ2VyIGlmIGl0IGlzIHByZXNlbnQuXG4gICAqXG4gICAqIEBwYXJhbSBtZXRyaWNQcm9kdWNlciBUaGUgTWV0cmljUHJvZHVjZXIgdG8gYmUgcmVtb3ZlZCBmcm9tIHRoZSBtYW5hZ2VyLlxuICAgKi9cbiAgcmVtb3ZlKG1ldHJpY1Byb2R1Y2VyOiBNZXRyaWNQcm9kdWNlcik6IHZvaWQge1xuICAgIHZhbGlkYXRlTm90TnVsbChtZXRyaWNQcm9kdWNlciwgJ21ldHJpY1Byb2R1Y2VyJyk7XG4gICAgdGhpcy5tZXRyaWNQcm9kdWNlcnMuZGVsZXRlKG1ldHJpY1Byb2R1Y2VyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhcnMgYWxsIE1ldHJpY1Byb2R1Y2Vycy5cbiAgICovXG4gIHJlbW92ZUFsbCgpOiB2b2lkIHtcbiAgICB0aGlzLm1ldHJpY1Byb2R1Y2Vycy5jbGVhcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYWxsIHJlZ2lzdGVyZWQgTWV0cmljUHJvZHVjZXJzIHRoYXQgc2hvdWxkIGJlIGV4cG9ydGVkLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgdXNlZCBieSBhbnkgbWV0cmljcyBleHBvcnRlciB0aGF0IGF1dG9tYXRpY2FsbHlcbiAgICogZXhwb3J0cyBkYXRhIGZvciBNZXRyaWNQcm9kdWNlciByZWdpc3RlcmVkIHdpdGggdGhlIE1ldHJpY1Byb2R1Y2VyTWFuYWdlci5cbiAgICpcbiAgICogQHJldHVybiB7U2V0PE1ldHJpY1Byb2R1Y2VyPn0gVGhlIFNldCBvZiBNZXRyaWNQcm9kdWNlcnMuXG4gICAqL1xuICBnZXRBbGxNZXRyaWNQcm9kdWNlcigpOiBTZXQ8TWV0cmljUHJvZHVjZXI+IHtcbiAgICByZXR1cm4gdGhpcy5tZXRyaWNQcm9kdWNlcnM7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IG1ldHJpY1Byb2R1Y2VyTWFuYWdlckluc3RhbmNlID0gQmFzZU1ldHJpY1Byb2R1Y2VyTWFuYWdlci5pbnN0YW5jZTtcbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,